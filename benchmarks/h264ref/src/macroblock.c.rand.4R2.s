	.text
	.file	"macroblock.c"
	.globl	set_MB_parameters       # -- Begin function set_MB_parameters
	.p2align	4, 0x90
	.type	set_MB_parameters,@function
set_MB_parameters:                      # @set_MB_parameters
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 12(%rcx)
	movl	-4(%rbp), %edi
	movq	img, %rsi
	addq	$136, %rsi
	movq	img, %rdx
	addq	$140, %rdx
	callq	get_mb_block_pos
	movq	img, %rax
	movl	136(%rax), %eax
	shll	$2, %eax
	movq	img, %rcx
	movl	%eax, 144(%rcx)
	movq	img, %rax
	movl	140(%rax), %eax
	shll	$2, %eax
	movq	img, %rcx
	movl	%eax, 148(%rcx)
	movq	img, %rax
	movl	144(%rax), %eax
	shll	$2, %eax
	movq	img, %rcx
	movl	%eax, 152(%rcx)
	movq	img, %rax
	movl	148(%rax), %eax
	shll	$2, %eax
	movq	img, %rcx
	movl	%eax, 156(%rcx)
	movq	img, %rax
	movl	152(%rax), %eax
	movq	img, %rcx
	movl	%eax, 168(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB0_11
# %bb.1:                                # %if.then
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB0_9
# %bb.2:                                # %if.then10
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB0_4
# %bb.3:                                # %cond.true
	movq	imgY_org_bot, %rax
	jmp	.LBB0_5
.LBB0_4:                                # %cond.false
	movq	imgY_org_top, %rax
.LBB0_5:                                # %cond.end
	movq	%rax, imgY_org
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB0_7
# %bb.6:                                # %cond.true14
	movq	imgUV_org_bot, %rax
	jmp	.LBB0_8
.LBB0_7:                                # %cond.false15
	movq	imgUV_org_top, %rax
.LBB0_8:                                # %cond.end16
	movq	%rax, imgUV_org
	movq	img, %rax
	movl	140(%rax), %eax
	sarl	$1, %eax
	shll	$4, %eax
	movq	img, %rcx
	movl	%eax, 172(%rcx)
	jmp	.LBB0_10
.LBB0_9:                                # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	img, %rax
	movl	148(%rax), %eax
	shll	$2, %eax
	movq	img, %rcx
	movl	%eax, 172(%rcx)
.LBB0_10:                               # %if.end
	jmp	.LBB0_12
.LBB0_11:                               # %if.else23
	movq	img, %rax
	movl	148(%rax), %eax
	shll	$2, %eax
	movq	img, %rcx
	movl	%eax, 172(%rcx)
.LBB0_12:                               # %if.end27
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB0_14
# %bb.13:                               # %if.then28
	movq	img, %rax
	movl	152(%rax), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72708(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rcx
	movl	%eax, 160(%rcx)
	movq	img, %rax
	movl	156(%rax), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72712(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rcx
	movl	%eax, 164(%rcx)
	movq	img, %rax
	movl	168(%rax), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72708(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rcx
	movl	%eax, 176(%rcx)
	movq	img, %rax
	movl	172(%rax), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72712(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rcx
	movl	%eax, 180(%rcx)
.LBB0_14:                               # %if.end42
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end0:
	.size	set_MB_parameters, .Lfunc_end0-set_MB_parameters
	.cfi_endproc
                                        # -- End function
	.globl	clip1a                  # -- Begin function clip1a
	.p2align	4, 0x90
	.type	clip1a,@function
clip1a:                                 # @clip1a
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB1_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB1_6
.LBB1_2:                                # %cond.false
	cmpl	$0, -4(%rbp)
	jge	.LBB1_4
# %bb.3:                                # %cond.true3
	xorl	%eax, %eax
	jmp	.LBB1_5
.LBB1_4:                                # %cond.false4
	movl	-4(%rbp), %eax
.LBB1_5:                                # %cond.end
.LBB1_6:                                # %cond.end5
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end1:
	.size	clip1a, .Lfunc_end1-clip1a
	.cfi_endproc
                                        # -- End function
	.globl	clip1a_chr              # -- Begin function clip1a_chr
	.p2align	4, 0x90
	.type	clip1a_chr,@function
clip1a_chr:                             # @clip1a_chr
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB2_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB2_6
.LBB2_2:                                # %cond.false
	cmpl	$0, -4(%rbp)
	jge	.LBB2_4
# %bb.3:                                # %cond.true3
	xorl	%eax, %eax
	jmp	.LBB2_5
.LBB2_4:                                # %cond.false4
	movl	-4(%rbp), %eax
.LBB2_5:                                # %cond.end
.LBB2_6:                                # %cond.end5
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end2:
	.size	clip1a_chr, .Lfunc_end2-clip1a_chr
	.cfi_endproc
                                        # -- End function
	.globl	proceed2nextMacroblock  # -- Begin function proceed2nextMacroblock
	.p2align	4, 0x90
	.type	proceed2nextMacroblock,@function
proceed2nextMacroblock:                 # @proceed2nextMacroblock
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB3_5
# %bb.1:                                # %func_proceed2nextMacroblock.66
	callq	proceed2nextMacroblock.66
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_proceed2nextMacroblock.137
	.cfi_def_cfa %rbp, 16
	callq	proceed2nextMacroblock.137
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_proceed2nextMacroblock.138
	.cfi_def_cfa %rbp, 16
	callq	proceed2nextMacroblock.138
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_proceed2nextMacroblock.146
	.cfi_def_cfa %rbp, 16
	callq	proceed2nextMacroblock.146
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
	jmp	.LBB3_4
.Lfunc_end3:
	.size	proceed2nextMacroblock, .Lfunc_end3-proceed2nextMacroblock
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock        # -- Begin function start_macroblock
	.p2align	4, 0x90
	.type	start_macroblock,@function
start_macroblock:                       # @start_macroblock
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB4_5
# %bb.1:                                # %func_start_macroblock.54
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.54
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_2:                                # %func_start_macroblock.64
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.64
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_3:                                # %func_start_macroblock.134
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.134
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_4:                                # %func_start_macroblock.142
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.142
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB4_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB4_3
	jmp	.LBB4_4
.Lfunc_end4:
	.size	start_macroblock, .Lfunc_end4-start_macroblock
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock    # -- Begin function terminate_macroblock
	.p2align	4, 0x90
	.type	terminate_macroblock,@function
terminate_macroblock:                   # @terminate_macroblock
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB5_5
# %bb.1:                                # %func_terminate_macroblock.1
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.1
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_terminate_macroblock.33
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.33
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_terminate_macroblock.49
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.49
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_terminate_macroblock.122
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.122
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
	jmp	.LBB5_4
.Lfunc_end5:
	.size	terminate_macroblock, .Lfunc_end5-terminate_macroblock
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big           # -- Begin function slice_too_big
	.p2align	4, 0x90
	.type	slice_too_big,@function
slice_too_big:                          # @slice_too_big
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB6_5
# %bb.1:                                # %func_slice_too_big.80
	movl	%ebx, %edi
	callq	slice_too_big.80
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_slice_too_big.88
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	slice_too_big.88
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_slice_too_big.141
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	slice_too_big.141
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_slice_too_big.145
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	slice_too_big.145
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
	jmp	.LBB6_4
.Lfunc_end6:
	.size	slice_too_big, .Lfunc_end6-slice_too_big
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4 # -- Begin function OneComponentLumaPrediction4x4
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4,@function
OneComponentLumaPrediction4x4:          # @OneComponentLumaPrediction4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, -48(%rbp)          # 8-byte Spill
	movl	%r8d, %r12d
	movq	%rcx, %r13
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB7_5
# %bb.1:                                # %func_OneComponentLumaPrediction4x4.18
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movswl	%r12w, %r8d
	movq	-48(%rbp), %r9          # 8-byte Reload
	callq	OneComponentLumaPrediction4x4.18
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_OneComponentLumaPrediction4x4.29
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movswl	%r12w, %r8d
	callq	OneComponentLumaPrediction4x4.29
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_OneComponentLumaPrediction4x4.31
	.cfi_def_cfa %rbp, 16
	movswl	%r12w, %r8d
	callq	OneComponentLumaPrediction4x4.31
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_OneComponentLumaPrediction4x4.58
	.cfi_def_cfa %rbp, 16
	movswl	%r12w, %r8d
	callq	OneComponentLumaPrediction4x4.58
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	-48(%rbp), %r9          # 8-byte Reload
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movq	%r13, %rcx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movq	%r15, %rdi
	je	.LBB7_3
	jmp	.LBB7_4
.Lfunc_end7:
	.size	OneComponentLumaPrediction4x4, .Lfunc_end7-OneComponentLumaPrediction4x4
	.cfi_endproc
                                        # -- End function
	.globl	copyblock4x4            # -- Begin function copyblock4x4
	.p2align	4, 0x90
	.type	copyblock4x4,@function
copyblock4x4:                           # @copyblock4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB8_2
# %bb.1:                                # %func_copyblock4x4.28
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	copyblock4x4.28
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_2:                                # %func_copyblock4x4.125
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	copyblock4x4.125
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end8:
	.size	copyblock4x4, .Lfunc_end8-copyblock4x4
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4       # -- Begin function LumaPrediction4x4
	.p2align	4, 0x90
	.type	LumaPrediction4x4,@function
LumaPrediction4x4:                      # @LumaPrediction4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB9_5
# %bb.1:                                # %func_LumaPrediction4x4.17
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movswl	-44(%rbp), %r9d         # 2-byte Folded Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.17
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_2:                                # %func_LumaPrediction4x4.44
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movswl	%r15w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.44
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_3:                                # %func_LumaPrediction4x4.59
	.cfi_def_cfa %rbp, 16
	movswl	%ax, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.59
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_4:                                # %func_LumaPrediction4x4.83
	.cfi_def_cfa %rbp, 16
	movswl	%ax, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.83
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	-44(%rbp), %r15d        # 4-byte Reload
	movw	16(%rbp), %r10w
	cmpl	$1, %eax
	je	.LBB9_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r15d, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	je	.LBB9_3
	jmp	.LBB9_4
.Lfunc_end9:
	.size	LumaPrediction4x4, .Lfunc_end9-LumaPrediction4x4
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi     # -- Begin function LumaPrediction4x4Bi
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi,@function
LumaPrediction4x4Bi:                    # @LumaPrediction4x4Bi
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB10_5
# %bb.1:                                # %func_LumaPrediction4x4Bi.30
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movswl	-44(%rbp), %r9d         # 2-byte Folded Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaPrediction4x4Bi.30
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_2:                               # %func_LumaPrediction4x4Bi.37
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movswl	%r15w, %r9d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi.37
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_3:                               # %func_LumaPrediction4x4Bi.84
	.cfi_def_cfa %rbp, 16
	movswl	%ax, %r9d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi.84
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_4:                               # %func_LumaPrediction4x4Bi.116
	.cfi_def_cfa %rbp, 16
	movswl	%ax, %r9d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi.116
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movw	16(%rbp), %r11w
	movl	-44(%rbp), %r15d        # 4-byte Reload
	movl	24(%rbp), %r10d
	cmpl	$1, %eax
	je	.LBB10_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r15d, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	je	.LBB10_3
	jmp	.LBB10_4
.Lfunc_end10:
	.size	LumaPrediction4x4Bi, .Lfunc_end10-LumaPrediction4x4Bi
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8   # -- Begin function LumaResidualCoding8x8
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8,@function
LumaResidualCoding8x8:                  # @LumaResidualCoding8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movq	%rsi, %r14
	movq	%rdi, %r15
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB11_5
# %bb.1:                                # %func_LumaResidualCoding8x8.46
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movswl	%r13w, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.46
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_2:                               # %func_LumaResidualCoding8x8.62
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movswl	%r13w, %ecx
	movl	%r12d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.62
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_3:                               # %func_LumaResidualCoding8x8.73
	.cfi_def_cfa %rbp, 16
	movswl	%r13w, %ecx
	cwtl
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.73
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_4:                               # %func_LumaResidualCoding8x8.102
	.cfi_def_cfa %rbp, 16
	movswl	%r13w, %ecx
	cwtl
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.102
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movw	16(%rbp), %r11w
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movw	24(%rbp), %r10w
	cmpl	$1, %eax
	je	.LBB11_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movw	%r11w, %ax
	movl	%r12d, %r8d
	movl	%ebx, %edx
	movq	%r14, %rsi
	movq	%r15, %rdi
	je	.LBB11_3
	jmp	.LBB11_4
.Lfunc_end11:
	.size	LumaResidualCoding8x8, .Lfunc_end11-LumaResidualCoding8x8
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4     # -- Begin function ChromaPrediction4x4
	.p2align	4, 0x90
	.type	ChromaPrediction4x4,@function
ChromaPrediction4x4:                    # @ChromaPrediction4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB12_5
# %bb.1:                                # %func_ChromaPrediction4x4.24
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.24
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_2:                               # %func_ChromaPrediction4x4.57
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.57
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_3:                               # %func_ChromaPrediction4x4.75
	.cfi_def_cfa %rbp, 16
	cwtl
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.75
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_4:                               # %func_ChromaPrediction4x4.96
	.cfi_def_cfa %rbp, 16
	cwtl
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.96
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movw	16(%rbp), %r11w
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movw	24(%rbp), %r10w
	cmpl	$1, %eax
	je	.LBB12_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movw	%r11w, %ax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r15d, %edi
	je	.LBB12_3
	jmp	.LBB12_4
.Lfunc_end12:
	.size	ChromaPrediction4x4, .Lfunc_end12-ChromaPrediction4x4
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe     # -- Begin function SetModesAndRefframe
	.p2align	4, 0x90
	.type	SetModesAndRefframe,@function
SetModesAndRefframe:                    # @SetModesAndRefframe
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, -48(%rbp)          # 8-byte Spill
	movq	%r8, %r12
	movq	%rcx, %r13
	movq	%rdx, %rbx
	movq	%rsi, %r14
	movl	%edi, %r15d
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB13_5
# %bb.1:                                # %func_SetModesAndRefframe.6
	movl	%r15d, %edi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movq	%r13, %rcx
	movq	%r12, %r8
	movq	-48(%rbp), %r9          # 8-byte Reload
	callq	SetModesAndRefframe.6
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_2:                               # %func_SetModesAndRefframe.63
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	SetModesAndRefframe.63
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_3:                               # %func_SetModesAndRefframe.68
	.cfi_def_cfa %rbp, 16
	callq	SetModesAndRefframe.68
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_4:                               # %func_SetModesAndRefframe.97
	.cfi_def_cfa %rbp, 16
	callq	SetModesAndRefframe.97
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	-48(%rbp), %r9          # 8-byte Reload
	cmpl	$1, %eax
	je	.LBB13_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movq	%r12, %r8
	movq	%r13, %rcx
	movq	%rbx, %rdx
	movq	%r14, %rsi
	movl	%r15d, %edi
	je	.LBB13_3
	jmp	.LBB13_4
.Lfunc_end13:
	.size	SetModesAndRefframe, .Lfunc_end13-SetModesAndRefframe
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding      # -- Begin function LumaResidualCoding
	.p2align	4, 0x90
	.type	LumaResidualCoding,@function
LumaResidualCoding:                     # @LumaResidualCoding
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB14_5
# %bb.1:                                # %func_LumaResidualCoding.77
	callq	LumaResidualCoding.77
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_2:                               # %func_LumaResidualCoding.94
	.cfi_def_cfa %rbp, 16
	callq	LumaResidualCoding.94
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_3:                               # %func_LumaResidualCoding.99
	.cfi_def_cfa %rbp, 16
	callq	LumaResidualCoding.99
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_4:                               # %func_LumaResidualCoding.106
	.cfi_def_cfa %rbp, 16
	callq	LumaResidualCoding.106
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB14_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB14_3
	jmp	.LBB14_4
.Lfunc_end14:
	.size	LumaResidualCoding, .Lfunc_end14-LumaResidualCoding
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision       # -- Begin function TransformDecision
	.p2align	4, 0x90
	.type	TransformDecision,@function
TransformDecision:                      # @TransformDecision
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB15_5
# %bb.1:                                # %func_TransformDecision.4
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.4
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_2:                               # %func_TransformDecision.22
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.22
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_3:                               # %func_TransformDecision.90
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.90
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_4:                               # %func_TransformDecision.101
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.101
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB15_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB15_3
	jmp	.LBB15_4
.Lfunc_end15:
	.size	TransformDecision, .Lfunc_end15-TransformDecision
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4 # -- Begin function OneComponentChromaPrediction4x4
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4,@function
OneComponentChromaPrediction4x4:        # @OneComponentChromaPrediction4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movq	%rcx, %r13
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB16_5
# %bb.1:                                # %func_OneComponentChromaPrediction4x4.60
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movl	%r12d, %r8d
	movswl	-44(%rbp), %r9d         # 2-byte Folded Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.60
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_2:                               # %func_OneComponentChromaPrediction4x4.78
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movl	%r12d, %r8d
	movswl	%r15w, %r9d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.78
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_3:                               # %func_OneComponentChromaPrediction4x4.115
	.cfi_def_cfa %rbp, 16
	movswl	%ax, %r9d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.115
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_4:                               # %func_OneComponentChromaPrediction4x4.119
	.cfi_def_cfa %rbp, 16
	movswl	%ax, %r9d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.119
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	16(%rbp), %r11d
	movl	-44(%rbp), %r15d        # 4-byte Reload
	movl	24(%rbp), %r10d
	cmpl	$1, %eax
	je	.LBB16_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r15d, %eax
	movl	%r12d, %r8d
	movq	%r13, %rcx
	movl	%ebx, %edx
	movl	%r14d, %esi
	je	.LBB16_3
	jmp	.LBB16_4
.Lfunc_end16:
	.size	OneComponentChromaPrediction4x4, .Lfunc_end16-OneComponentChromaPrediction4x4
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4 # -- Begin function IntraChromaPrediction4x4
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4,@function
IntraChromaPrediction4x4:               # @IntraChromaPrediction4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB17_5
# %bb.1:                                # %func_IntraChromaPrediction4x4.45
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.45
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_2:                               # %func_IntraChromaPrediction4x4.51
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.51
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_3:                               # %func_IntraChromaPrediction4x4.52
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.52
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_4:                               # %func_IntraChromaPrediction4x4.76
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.76
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB17_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB17_3
	jmp	.LBB17_4
.Lfunc_end17:
	.size	IntraChromaPrediction4x4, .Lfunc_end17-IntraChromaPrediction4x4
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding    # -- Begin function ChromaResidualCoding
	.p2align	4, 0x90
	.type	ChromaResidualCoding,@function
ChromaResidualCoding:                   # @ChromaResidualCoding
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB18_5
# %bb.1:                                # %func_ChromaResidualCoding.3
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.3
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_2:                               # %func_ChromaResidualCoding.40
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.40
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_3:                               # %func_ChromaResidualCoding.86
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.86
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_4:                               # %func_ChromaResidualCoding.89
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.89
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB18_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB18_3
	jmp	.LBB18_4
.Lfunc_end18:
	.size	ChromaResidualCoding, .Lfunc_end18-ChromaResidualCoding
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction   # -- Begin function IntraChromaPrediction
	.p2align	4, 0x90
	.type	IntraChromaPrediction,@function
IntraChromaPrediction:                  # @IntraChromaPrediction
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB19_5
# %bb.1:                                # %func_IntraChromaPrediction.2
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.2
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_2:                               # %func_IntraChromaPrediction.19
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.19
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_3:                               # %func_IntraChromaPrediction.95
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.95
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_4:                               # %func_IntraChromaPrediction.111
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.111
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB19_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB19_3
	jmp	.LBB19_4
.Lfunc_end19:
	.size	IntraChromaPrediction, .Lfunc_end19-IntraChromaPrediction
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef                 # -- Begin function ZeroRef
	.p2align	4, 0x90
	.type	ZeroRef,@function
ZeroRef:                                # @ZeroRef
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB20_5
# %bb.1:                                # %func_ZeroRef.21
	movq	%rbx, %rdi
	callq	ZeroRef.21
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_2:                               # %func_ZeroRef.108
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ZeroRef.108
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_3:                               # %func_ZeroRef.126
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ZeroRef.126
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_4:                               # %func_ZeroRef.133
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ZeroRef.133
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB20_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB20_3
	jmp	.LBB20_4
.Lfunc_end20:
	.size	ZeroRef, .Lfunc_end20-ZeroRef
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value            # -- Begin function MBType2Value
	.p2align	4, 0x90
	.type	MBType2Value,@function
MBType2Value:                           # @MBType2Value
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB21_5
# %bb.1:                                # %func_MBType2Value.14
	movq	%rbx, %rdi
	callq	MBType2Value.14
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_2:                               # %func_MBType2Value.124
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	MBType2Value.124
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_3:                               # %func_MBType2Value.129
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	MBType2Value.129
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_4:                               # %func_MBType2Value.143
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	MBType2Value.143
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB21_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB21_3
	jmp	.LBB21_4
.Lfunc_end21:
	.size	MBType2Value, .Lfunc_end21-MBType2Value
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes      # -- Begin function writeIntra4x4Modes
	.p2align	4, 0x90
	.type	writeIntra4x4Modes,@function
writeIntra4x4Modes:                     # @writeIntra4x4Modes
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB22_5
# %bb.1:                                # %func_writeIntra4x4Modes.27
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.27
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_2:                               # %func_writeIntra4x4Modes.41
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.41
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_3:                               # %func_writeIntra4x4Modes.48
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.48
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_4:                               # %func_writeIntra4x4Modes.100
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.100
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB22_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB22_3
	jmp	.LBB22_4
.Lfunc_end22:
	.size	writeIntra4x4Modes, .Lfunc_end22-writeIntra4x4Modes
	.cfi_endproc
                                        # -- End function
	.globl	B8Mode2Value            # -- Begin function B8Mode2Value
	.p2align	4, 0x90
	.type	B8Mode2Value,@function
B8Mode2Value:                           # @B8Mode2Value
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB23_5
# %bb.1:                                # %func_B8Mode2Value.10
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	B8Mode2Value.10
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_2:                               # %func_B8Mode2Value.43
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	B8Mode2Value.43
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_3:                               # %func_B8Mode2Value.98
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	B8Mode2Value.98
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_4:                               # %func_B8Mode2Value.113
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	B8Mode2Value.113
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB23_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB23_3
	jmp	.LBB23_4
.Lfunc_end23:
	.size	B8Mode2Value, .Lfunc_end23-B8Mode2Value
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer            # -- Begin function writeMBLayer
	.p2align	4, 0x90
	.type	writeMBLayer,@function
writeMBLayer:                           # @writeMBLayer
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB24_5
# %bb.1:                                # %func_writeMBLayer.16
	movl	%ebx, %edi
	callq	writeMBLayer.16
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_2:                               # %func_writeMBLayer.56
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeMBLayer.56
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_3:                               # %func_writeMBLayer.123
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeMBLayer.123
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_4:                               # %func_writeMBLayer.136
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeMBLayer.136
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB24_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB24_3
	jmp	.LBB24_4
.Lfunc_end24:
	.size	writeMBLayer, .Lfunc_end24-writeMBLayer
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit   # -- Begin function write_terminating_bit
	.p2align	4, 0x90
	.type	write_terminating_bit,@function
write_terminating_bit:                  # @write_terminating_bit
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB25_5
# %bb.1:                                # %func_write_terminating_bit.32
	movswl	%bx, %edi
	callq	write_terminating_bit.32
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_2:                               # %func_write_terminating_bit.55
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	callq	write_terminating_bit.55
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_3:                               # %func_write_terminating_bit.114
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	callq	write_terminating_bit.114
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_4:                               # %func_write_terminating_bit.131
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	callq	write_terminating_bit.131
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB25_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB25_3
	jmp	.LBB25_4
.Lfunc_end25:
	.size	write_terminating_bit, .Lfunc_end25-write_terminating_bit
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode # -- Begin function writeChromaIntraPredMode
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode,@function
writeChromaIntraPredMode:               # @writeChromaIntraPredMode
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB26_5
# %bb.1:                                # %func_writeChromaIntraPredMode.72
	callq	writeChromaIntraPredMode.72
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_2:                               # %func_writeChromaIntraPredMode.74
	.cfi_def_cfa %rbp, 16
	callq	writeChromaIntraPredMode.74
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_3:                               # %func_writeChromaIntraPredMode.81
	.cfi_def_cfa %rbp, 16
	callq	writeChromaIntraPredMode.81
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_4:                               # %func_writeChromaIntraPredMode.109
	.cfi_def_cfa %rbp, 16
	callq	writeChromaIntraPredMode.109
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB26_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB26_3
	jmp	.LBB26_4
.Lfunc_end26:
	.size	writeChromaIntraPredMode, .Lfunc_end26-writeChromaIntraPredMode
	.cfi_endproc
                                        # -- End function
	.globl	set_last_dquant         # -- Begin function set_last_dquant
	.p2align	4, 0x90
	.type	set_last_dquant,@function
set_last_dquant:                        # @set_last_dquant
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB27_4
# %bb.1:                                # %land.lhs.true
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB27_4
# %bb.2:                                # %land.lhs.true3
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB27_4
# %bb.3:                                # %land.lhs.true6
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB27_9
.LBB27_4:                               # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB27_9
# %bb.5:                                # %lor.lhs.false11
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB27_9
# %bb.6:                                # %lor.lhs.false14
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB27_9
# %bb.7:                                # %lor.lhs.false17
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB27_10
# %bb.8:                                # %land.lhs.true19
	movq	-8(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB27_10
.LBB27_9:                               # %if.then
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, last_dquant
	jmp	.LBB27_11
.LBB27_10:                              # %if.else
	movl	$0, last_dquant
.LBB27_11:                              # %if.end
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end27:
	.size	set_last_dquant, .Lfunc_end27-set_last_dquant
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock    # -- Begin function write_one_macroblock
	.p2align	4, 0x90
	.type	write_one_macroblock,@function
write_one_macroblock:                   # @write_one_macroblock
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB28_5
# %bb.1:                                # %func_write_one_macroblock.70
	movl	%ebx, %edi
	callq	write_one_macroblock.70
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_2:                               # %func_write_one_macroblock.117
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	write_one_macroblock.117
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_3:                               # %func_write_one_macroblock.120
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	write_one_macroblock.120
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_4:                               # %func_write_one_macroblock.121
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	write_one_macroblock.121
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB28_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB28_3
	jmp	.LBB28_4
.Lfunc_end28:
	.size	write_one_macroblock, .Lfunc_end28-write_one_macroblock
	.cfi_endproc
                                        # -- End function
	.globl	BType2CtxRef            # -- Begin function BType2CtxRef
	.p2align	4, 0x90
	.type	BType2CtxRef,@function
BType2CtxRef:                           # @BType2CtxRef
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB29_2
# %bb.1:                                # %func_BType2CtxRef.7
	movl	%ebx, %edi
	callq	BType2CtxRef.7
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_2:                               # %func_BType2CtxRef.42
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	BType2CtxRef.42
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end29:
	.size	BType2CtxRef, .Lfunc_end29-BType2CtxRef
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame     # -- Begin function writeReferenceFrame
	.p2align	4, 0x90
	.type	writeReferenceFrame,@function
writeReferenceFrame:                    # @writeReferenceFrame
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB30_5
# %bb.1:                                # %func_writeReferenceFrame.61
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.61
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_2:                               # %func_writeReferenceFrame.103
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.103
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_3:                               # %func_writeReferenceFrame.112
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.112
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_4:                               # %func_writeReferenceFrame.118
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.118
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB30_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB30_3
	jmp	.LBB30_4
.Lfunc_end30:
	.size	writeReferenceFrame, .Lfunc_end30-writeReferenceFrame
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8    # -- Begin function writeMotionVector8x8
	.p2align	4, 0x90
	.type	writeMotionVector8x8,@function
writeMotionVector8x8:                   # @writeMotionVector8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB31_5
# %bb.1:                                # %func_writeMotionVector8x8.12
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8.12
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_2:                               # %func_writeMotionVector8x8.13
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	%r10d, (%rsp)
	callq	writeMotionVector8x8.13
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_3:                               # %func_writeMotionVector8x8.87
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8.87
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_4:                               # %func_writeMotionVector8x8.105
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8.105
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	16(%rbp), %r10d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB31_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r10d, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r15d, %edi
	je	.LBB31_3
	jmp	.LBB31_4
.Lfunc_end31:
	.size	writeMotionVector8x8, .Lfunc_end31-writeMotionVector8x8
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL     # -- Begin function writeMotionInfo2NAL
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL,@function
writeMotionInfo2NAL:                    # @writeMotionInfo2NAL
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB32_5
# %bb.1:                                # %func_writeMotionInfo2NAL.26
	callq	writeMotionInfo2NAL.26
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_2:                               # %func_writeMotionInfo2NAL.47
	.cfi_def_cfa %rbp, 16
	callq	writeMotionInfo2NAL.47
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_3:                               # %func_writeMotionInfo2NAL.93
	.cfi_def_cfa %rbp, 16
	callq	writeMotionInfo2NAL.93
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_4:                               # %func_writeMotionInfo2NAL.104
	.cfi_def_cfa %rbp, 16
	callq	writeMotionInfo2NAL.104
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB32_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB32_3
	jmp	.LBB32_4
.Lfunc_end32:
	.size	writeMotionInfo2NAL, .Lfunc_end32-writeMotionInfo2NAL
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff        # -- Begin function writeChromaCoeff
	.p2align	4, 0x90
	.type	writeChromaCoeff,@function
writeChromaCoeff:                       # @writeChromaCoeff
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB33_5
# %bb.1:                                # %func_writeChromaCoeff.9
	callq	writeChromaCoeff.9
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_2:                               # %func_writeChromaCoeff.130
	.cfi_def_cfa %rbp, 16
	callq	writeChromaCoeff.130
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_3:                               # %func_writeChromaCoeff.135
	.cfi_def_cfa %rbp, 16
	callq	writeChromaCoeff.135
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_4:                               # %func_writeChromaCoeff.140
	.cfi_def_cfa %rbp, 16
	callq	writeChromaCoeff.140
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB33_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB33_3
	jmp	.LBB33_4
.Lfunc_end33:
	.size	writeChromaCoeff, .Lfunc_end33-writeChromaCoeff
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC     # -- Begin function writeCoeff4x4_CAVLC
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC,@function
writeCoeff4x4_CAVLC:                    # @writeCoeff4x4_CAVLC
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%ecx, %r14d
	movl	%edx, %r15d
	movl	%esi, %r12d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB34_5
# %bb.1:                                # %func_writeCoeff4x4_CAVLC.11
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.11
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_2:                               # %func_writeCoeff4x4_CAVLC.132
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.132
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_3:                               # %func_writeCoeff4x4_CAVLC.139
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.139
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_4:                               # %func_writeCoeff4x4_CAVLC.144
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.144
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB34_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB34_3
	jmp	.LBB34_4
.Lfunc_end34:
	.size	writeCoeff4x4_CAVLC, .Lfunc_end34-writeCoeff4x4_CAVLC
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC # -- Begin function writeLumaCoeff4x4_CABAC
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC,@function
writeLumaCoeff4x4_CABAC:                # @writeLumaCoeff4x4_CABAC
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB35_5
# %bb.1:                                # %func_writeLumaCoeff4x4_CABAC.5
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.5
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_2:                               # %func_writeLumaCoeff4x4_CABAC.20
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.20
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_3:                               # %func_writeLumaCoeff4x4_CABAC.53
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.53
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_4:                               # %func_writeLumaCoeff4x4_CABAC.71
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.71
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB35_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB35_3
	jmp	.LBB35_4
.Lfunc_end35:
	.size	writeLumaCoeff4x4_CABAC, .Lfunc_end35-writeLumaCoeff4x4_CABAC
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC # -- Begin function writeLumaCoeff8x8_CABAC
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC,@function
writeLumaCoeff8x8_CABAC:                # @writeLumaCoeff8x8_CABAC
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB36_5
# %bb.1:                                # %func_writeLumaCoeff8x8_CABAC.15
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.15
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_2:                               # %func_writeLumaCoeff8x8_CABAC.23
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.23
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_3:                               # %func_writeLumaCoeff8x8_CABAC.91
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.91
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_4:                               # %func_writeLumaCoeff8x8_CABAC.92
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.92
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB36_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB36_3
	jmp	.LBB36_4
.Lfunc_end36:
	.size	writeLumaCoeff8x8_CABAC, .Lfunc_end36-writeLumaCoeff8x8_CABAC
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8       # -- Begin function writeLumaCoeff8x8
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8,@function
writeLumaCoeff8x8:                      # @writeLumaCoeff8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB37_5
# %bb.1:                                # %func_writeLumaCoeff8x8.25
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.25
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_2:                               # %func_writeLumaCoeff8x8.36
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.36
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_3:                               # %func_writeLumaCoeff8x8.39
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.39
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_4:                               # %func_writeLumaCoeff8x8.65
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.65
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB37_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB37_3
	jmp	.LBB37_4
.Lfunc_end37:
	.size	writeLumaCoeff8x8, .Lfunc_end37-writeLumaCoeff8x8
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff    # -- Begin function writeCBPandLumaCoeff
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff,@function
writeCBPandLumaCoeff:                   # @writeCBPandLumaCoeff
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB38_5
# %bb.1:                                # %func_writeCBPandLumaCoeff.35
	callq	writeCBPandLumaCoeff.35
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_2:                               # %func_writeCBPandLumaCoeff.79
	.cfi_def_cfa %rbp, 16
	callq	writeCBPandLumaCoeff.79
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_3:                               # %func_writeCBPandLumaCoeff.107
	.cfi_def_cfa %rbp, 16
	callq	writeCBPandLumaCoeff.107
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_4:                               # %func_writeCBPandLumaCoeff.148
	.cfi_def_cfa %rbp, 16
	callq	writeCBPandLumaCoeff.148
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB38_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB38_3
	jmp	.LBB38_4
.Lfunc_end38:
	.size	writeCBPandLumaCoeff, .Lfunc_end38-writeCBPandLumaCoeff
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz             # -- Begin function predict_nnz
	.p2align	4, 0x90
	.type	predict_nnz,@function
predict_nnz:                            # @predict_nnz
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB39_5
# %bb.1:                                # %func_predict_nnz.34
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.34
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_2:                               # %func_predict_nnz.85
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.85
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_3:                               # %func_predict_nnz.127
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.127
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_4:                               # %func_predict_nnz.147
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.147
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB39_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB39_3
	jmp	.LBB39_4
.Lfunc_end39:
	.size	predict_nnz, .Lfunc_end39-predict_nnz
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma      # -- Begin function predict_nnz_chroma
	.p2align	4, 0x90
	.type	predict_nnz_chroma,@function
predict_nnz_chroma:                     # @predict_nnz_chroma
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB40_5
# %bb.1:                                # %func_predict_nnz_chroma.69
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.69
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_2:                               # %func_predict_nnz_chroma.82
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.82
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_3:                               # %func_predict_nnz_chroma.110
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.110
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_4:                               # %func_predict_nnz_chroma.128
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.128
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB40_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB40_3
	jmp	.LBB40_4
.Lfunc_end40:
	.size	predict_nnz_chroma, .Lfunc_end40-predict_nnz_chroma
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16          # -- Begin function find_sad_16x16
	.p2align	4, 0x90
	.type	find_sad_16x16,@function
find_sad_16x16:                         # @find_sad_16x16
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB41_5
# %bb.1:                                # %func_find_sad_16x16.8
	movq	%rbx, %rdi
	callq	find_sad_16x16.8
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_2:                               # %func_find_sad_16x16.38
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	find_sad_16x16.38
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_3:                               # %func_find_sad_16x16.50
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	find_sad_16x16.50
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_4:                               # %func_find_sad_16x16.67
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	find_sad_16x16.67
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB41_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB41_3
	jmp	.LBB41_4
.Lfunc_end41:
	.size	find_sad_16x16, .Lfunc_end41-find_sad_16x16
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock.1  # -- Begin function terminate_macroblock.1
	.p2align	4, 0x90
	.type	terminate_macroblock.1,@function
terminate_macroblock.1:                 # @terminate_macroblock.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1758198994, -112(%rbp) # imm = 0x68CBFCD2
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-104(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB42_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB42_2:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB42_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB42_5
.LBB42_4:                               # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB42_8
.LBB42_5:                               # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB42_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB42_7:                               # %if.end
	jmp	.LBB42_8
.LBB42_8:                               # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB42_45
# %bb.9:                                # %if.end18
	movq	.LJTI42_0(,%rax,8), %rax
	jmpq	*%rax
.LBB42_10:                              # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB42_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB42_12:                              # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB42_46
.LBB42_13:                              # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB42_46
.LBB42_14:                              # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB42_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB42_16:                              # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB42_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB42_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB42_22
.LBB42_19:                              # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB42_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB42_21:                              # %if.end64
	jmp	.LBB42_22
.LBB42_22:                              # %if.end65
	jmp	.LBB42_23
.LBB42_23:                              # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB42_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB42_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB42_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB42_27:                              # %if.end79
	jmp	.LBB42_28
.LBB42_28:                              # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB42_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB42_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB42_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB42_32:                              # %if.end89
	jmp	.LBB42_33
.LBB42_33:                              # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB42_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB42_35:                              # %if.end95
	jmp	.LBB42_46
.LBB42_36:                              # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB42_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB42_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB42_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB42_40:                              # %if.end106
	jmp	.LBB42_41
.LBB42_41:                              # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB42_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB42_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB42_44:                              # %if.end118
	jmp	.LBB42_46
.LBB42_45:                              # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB42_46:                              # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB42_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB42_48:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB42_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB42_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB42_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB42_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB42_51:                              # %if.end139
                                        #   in Loop: Header=BB42_48 Depth=1
	jmp	.LBB42_52
.LBB42_52:                              # %for.inc
                                        #   in Loop: Header=BB42_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB42_48
.LBB42_53:                              # %for.end
	jmp	.LBB42_54
.LBB42_54:                              # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB42_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB42_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB42_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB42_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB42_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-104(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB42_60:                              # %if.end174
	jmp	.LBB42_62
.LBB42_61:                              # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB42_62:                              # %if.end188
	jmp	.LBB42_63
.LBB42_63:                              # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB42_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB42_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -108(%rbp)
	jne	.LBB42_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-104(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB42_67:                              # %if.end218
	cmpl	$1758198994, -112(%rbp) # imm = 0x68CBFCD2
	jne	.LBB42_69
.LBB42_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_69:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_68
.Lfunc_end42:
	.size	terminate_macroblock.1, .Lfunc_end42-terminate_macroblock.1
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI42_0:
	.quad	.LBB42_10
	.quad	.LBB42_13
	.quad	.LBB42_14
	.quad	.LBB42_36
                                        # -- End function
	.text
	.globl	IntraChromaPrediction.2 # -- Begin function IntraChromaPrediction.2
	.p2align	4, 0x90
	.type	IntraChromaPrediction.2,@function
IntraChromaPrediction.2:                # @IntraChromaPrediction.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$1313796242, -164(%rbp) # imm = 0x4E4EF092
	movq	%rdi, -184(%rbp)
	movq	%rsi, -176(%rbp)
	movq	%rdx, -192(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -112(%rbp)
	movl	$0, -132(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -128(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB43_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	-112(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_1
.LBB43_4:                               # %for.end
	movl	-112(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB43_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB43_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB43_8
.LBB43_7:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB43_8
.LBB43_8:                               # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB43_9:                               # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB43_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB43_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB43_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB43_13
.LBB43_12:                              # %cond.false32
                                        #   in Loop: Header=BB43_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB43_13
.LBB43_13:                              # %cond.end33
                                        #   in Loop: Header=BB43_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB43_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_9
.LBB43_15:                              # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB43_16:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB43_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB43_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB43_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB43_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB43_20
.LBB43_19:                              # %cond.false57
                                        #   in Loop: Header=BB43_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB43_20
.LBB43_20:                              # %cond.end58
                                        #   in Loop: Header=BB43_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB43_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_16
.LBB43_22:                              # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB43_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB43_25
.LBB43_24:                              # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB43_25
.LBB43_25:                              # %cond.end75
	movl	%eax, -92(%rbp)
.LBB43_26:                              # %if.end
	cmpq	$0, -184(%rbp)
	je	.LBB43_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB43_28:                              # %if.end79
	cmpq	$0, -176(%rbp)
	je	.LBB43_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB43_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB43_31:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB43_32:                              # %if.end86
	cmpq	$0, -192(%rbp)
	je	.LBB43_34
# %bb.33:                               # %if.then88
	movl	-92(%rbp), %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB43_34:                              # %if.end89
	movl	$0, -24(%rbp)
.LBB43_35:                              # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_37 Depth 2
                                        #       Child Loop BB43_39 Depth 3
                                        #         Child Loop BB43_104 Depth 4
                                        #         Child Loop BB43_110 Depth 4
                                        #         Child Loop BB43_85 Depth 4
                                        #         Child Loop BB43_91 Depth 4
                                        #         Child Loop BB43_66 Depth 4
                                        #         Child Loop BB43_72 Depth 4
                                        #         Child Loop BB43_44 Depth 4
                                        #         Child Loop BB43_50 Depth 4
                                        #         Child Loop BB43_125 Depth 4
                                        #           Child Loop BB43_127 Depth 5
                                        #     Child Loop BB43_138 Depth 2
                                        #     Child Loop BB43_142 Depth 2
                                        #       Child Loop BB43_144 Depth 3
                                        #     Child Loop BB43_153 Depth 2
                                        #     Child Loop BB43_157 Depth 2
                                        #       Child Loop BB43_159 Depth 3
                                        #     Child Loop BB43_170 Depth 2
                                        #     Child Loop BB43_174 Depth 2
                                        #     Child Loop BB43_178 Depth 2
                                        #       Child Loop BB43_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB43_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB43_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -84(%rbp)
.LBB43_37:                              # %for.cond95
                                        #   Parent Loop BB43_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_39 Depth 3
                                        #         Child Loop BB43_104 Depth 4
                                        #         Child Loop BB43_110 Depth 4
                                        #         Child Loop BB43_85 Depth 4
                                        #         Child Loop BB43_91 Depth 4
                                        #         Child Loop BB43_66 Depth 4
                                        #         Child Loop BB43_72 Depth 4
                                        #         Child Loop BB43_44 Depth 4
                                        #         Child Loop BB43_50 Depth 4
                                        #         Child Loop BB43_125 Depth 4
                                        #           Child Loop BB43_127 Depth 5
	movl	-84(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB43_37 Depth=2
	movl	$0, -88(%rbp)
.LBB43_39:                              # %for.cond99
                                        #   Parent Loop BB43_35 Depth=1
                                        #     Parent Loop BB43_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB43_104 Depth 4
                                        #         Child Loop BB43_110 Depth 4
                                        #         Child Loop BB43_85 Depth 4
                                        #         Child Loop BB43_91 Depth 4
                                        #         Child Loop BB43_66 Depth 4
                                        #         Child Loop BB43_72 Depth 4
                                        #         Child Loop BB43_44 Depth 4
                                        #         Child Loop BB43_50 Depth 4
                                        #         Child Loop BB43_125 Depth 4
                                        #           Child Loop BB43_127 Depth 5
	cmpl	$4, -88(%rbp)
	jge	.LBB43_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB43_39 Depth=3
	movslq	-128(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -44(%rbp)
	movslq	-128(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -64(%rbp)
	movslq	-128(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-84(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-88(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB43_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB43_39 Depth=3
	movq	.LJTI43_0(,%rax,8), %rax
	jmpq	*%rax
.LBB43_42:                              # %sw.bb
                                        #   in Loop: Header=BB43_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB43_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB43_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB43_44:                              # %for.cond124
                                        #   Parent Loop BB43_35 Depth=1
                                        #     Parent Loop BB43_37 Depth=2
                                        #       Parent Loop BB43_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB43_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB43_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_44
.LBB43_47:                              # %for.end138
                                        #   in Loop: Header=BB43_39 Depth=3
	jmp	.LBB43_48
.LBB43_48:                              # %if.end139
                                        #   in Loop: Header=BB43_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB43_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB43_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB43_50:                              # %for.cond143
                                        #   Parent Loop BB43_35 Depth=1
                                        #     Parent Loop BB43_37 Depth=2
                                        #       Parent Loop BB43_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB43_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB43_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_50
.LBB43_53:                              # %for.end162
                                        #   in Loop: Header=BB43_39 Depth=3
	jmp	.LBB43_54
.LBB43_54:                              # %if.end163
                                        #   in Loop: Header=BB43_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB43_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB43_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB43_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB43_39 Depth=3
	movl	-64(%rbp), %eax
	addl	-72(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB43_63
.LBB43_57:                              # %if.else
                                        #   in Loop: Header=BB43_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB43_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB43_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB43_62
.LBB43_59:                              # %if.else174
                                        #   in Loop: Header=BB43_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB43_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB43_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB43_61:                              # %if.end180
                                        #   in Loop: Header=BB43_39 Depth=3
	jmp	.LBB43_62
.LBB43_62:                              # %if.end181
                                        #   in Loop: Header=BB43_39 Depth=3
	jmp	.LBB43_63
.LBB43_63:                              # %if.end182
                                        #   in Loop: Header=BB43_39 Depth=3
	jmp	.LBB43_124
.LBB43_64:                              # %sw.bb183
                                        #   in Loop: Header=BB43_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB43_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB43_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB43_66:                              # %for.cond186
                                        #   Parent Loop BB43_35 Depth=1
                                        #     Parent Loop BB43_37 Depth=2
                                        #       Parent Loop BB43_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB43_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB43_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_66
.LBB43_69:                              # %for.end202
                                        #   in Loop: Header=BB43_39 Depth=3
	jmp	.LBB43_77
.LBB43_70:                              # %if.else203
                                        #   in Loop: Header=BB43_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB43_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB43_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB43_72:                              # %for.cond207
                                        #   Parent Loop BB43_35 Depth=1
                                        #     Parent Loop BB43_37 Depth=2
                                        #       Parent Loop BB43_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB43_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB43_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_72
.LBB43_75:                              # %for.end226
                                        #   in Loop: Header=BB43_39 Depth=3
	jmp	.LBB43_76
.LBB43_76:                              # %if.end227
                                        #   in Loop: Header=BB43_39 Depth=3
	jmp	.LBB43_77
.LBB43_77:                              # %if.end228
                                        #   in Loop: Header=BB43_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB43_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB43_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB43_82
.LBB43_79:                              # %if.else233
                                        #   in Loop: Header=BB43_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB43_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB43_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB43_81:                              # %if.end239
                                        #   in Loop: Header=BB43_39 Depth=3
	jmp	.LBB43_82
.LBB43_82:                              # %if.end240
                                        #   in Loop: Header=BB43_39 Depth=3
	jmp	.LBB43_124
.LBB43_83:                              # %sw.bb241
                                        #   in Loop: Header=BB43_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB43_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB43_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB43_85:                              # %for.cond245
                                        #   Parent Loop BB43_35 Depth=1
                                        #     Parent Loop BB43_37 Depth=2
                                        #       Parent Loop BB43_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB43_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB43_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_85
.LBB43_88:                              # %for.end264
                                        #   in Loop: Header=BB43_39 Depth=3
	jmp	.LBB43_96
.LBB43_89:                              # %if.else265
                                        #   in Loop: Header=BB43_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB43_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB43_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB43_91:                              # %for.cond268
                                        #   Parent Loop BB43_35 Depth=1
                                        #     Parent Loop BB43_37 Depth=2
                                        #       Parent Loop BB43_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB43_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB43_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_91
.LBB43_94:                              # %for.end284
                                        #   in Loop: Header=BB43_39 Depth=3
	jmp	.LBB43_95
.LBB43_95:                              # %if.end285
                                        #   in Loop: Header=BB43_39 Depth=3
	jmp	.LBB43_96
.LBB43_96:                              # %if.end286
                                        #   in Loop: Header=BB43_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB43_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB43_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB43_101
.LBB43_98:                              # %if.else292
                                        #   in Loop: Header=BB43_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB43_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB43_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB43_100:                             # %if.end297
                                        #   in Loop: Header=BB43_39 Depth=3
	jmp	.LBB43_101
.LBB43_101:                             # %if.end298
                                        #   in Loop: Header=BB43_39 Depth=3
	jmp	.LBB43_124
.LBB43_102:                             # %sw.bb299
                                        #   in Loop: Header=BB43_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB43_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB43_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB43_104:                             # %for.cond302
                                        #   Parent Loop BB43_35 Depth=1
                                        #     Parent Loop BB43_37 Depth=2
                                        #       Parent Loop BB43_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB43_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB43_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_104
.LBB43_107:                             # %for.end318
                                        #   in Loop: Header=BB43_39 Depth=3
	jmp	.LBB43_108
.LBB43_108:                             # %if.end319
                                        #   in Loop: Header=BB43_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB43_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB43_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB43_110:                             # %for.cond323
                                        #   Parent Loop BB43_35 Depth=1
                                        #     Parent Loop BB43_37 Depth=2
                                        #       Parent Loop BB43_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB43_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB43_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_110
.LBB43_113:                             # %for.end342
                                        #   in Loop: Header=BB43_39 Depth=3
	jmp	.LBB43_114
.LBB43_114:                             # %if.end343
                                        #   in Loop: Header=BB43_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB43_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB43_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB43_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB43_39 Depth=3
	movl	-60(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB43_123
.LBB43_117:                             # %if.else352
                                        #   in Loop: Header=BB43_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB43_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB43_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB43_122
.LBB43_119:                             # %if.else357
                                        #   in Loop: Header=BB43_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB43_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB43_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB43_121:                             # %if.end363
                                        #   in Loop: Header=BB43_39 Depth=3
	jmp	.LBB43_122
.LBB43_122:                             # %if.end364
                                        #   in Loop: Header=BB43_39 Depth=3
	jmp	.LBB43_123
.LBB43_123:                             # %if.end365
                                        #   in Loop: Header=BB43_39 Depth=3
	jmp	.LBB43_124
.LBB43_124:                             # %sw.epilog
                                        #   in Loop: Header=BB43_39 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB43_125:                             # %for.cond366
                                        #   Parent Loop BB43_35 Depth=1
                                        #     Parent Loop BB43_37 Depth=2
                                        #       Parent Loop BB43_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB43_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB43_125 Depth=4
	movl	-40(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB43_127:                             # %for.cond371
                                        #   Parent Loop BB43_35 Depth=1
                                        #     Parent Loop BB43_37 Depth=2
                                        #       Parent Loop BB43_39 Depth=3
                                        #         Parent Loop BB43_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB43_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB43_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_127
.LBB43_130:                             # %for.end386
                                        #   in Loop: Header=BB43_125 Depth=4
	jmp	.LBB43_131
.LBB43_131:                             # %for.inc387
                                        #   in Loop: Header=BB43_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_125
.LBB43_132:                             # %for.end389
                                        #   in Loop: Header=BB43_39 Depth=3
	jmp	.LBB43_133
.LBB43_133:                             # %for.inc390
                                        #   in Loop: Header=BB43_39 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB43_39
.LBB43_134:                             # %for.end392
                                        #   in Loop: Header=BB43_37 Depth=2
	jmp	.LBB43_135
.LBB43_135:                             # %for.inc393
                                        #   in Loop: Header=BB43_37 Depth=2
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB43_37
.LBB43_136:                             # %for.end395
                                        #   in Loop: Header=BB43_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB43_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB43_35 Depth=1
	movl	$0, -4(%rbp)
.LBB43_138:                             # %for.cond398
                                        #   Parent Loop BB43_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB43_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB43_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB43_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_138
.LBB43_141:                             # %for.end414
                                        #   in Loop: Header=BB43_35 Depth=1
	movl	$0, -4(%rbp)
.LBB43_142:                             # %for.cond415
                                        #   Parent Loop BB43_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB43_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB43_142 Depth=2
	movl	$0, -8(%rbp)
.LBB43_144:                             # %for.cond419
                                        #   Parent Loop BB43_35 Depth=1
                                        #     Parent Loop BB43_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB43_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB43_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB43_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_144
.LBB43_147:                             # %for.end436
                                        #   in Loop: Header=BB43_142 Depth=2
	jmp	.LBB43_148
.LBB43_148:                             # %for.inc437
                                        #   in Loop: Header=BB43_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_142
.LBB43_149:                             # %for.end439
                                        #   in Loop: Header=BB43_35 Depth=1
	jmp	.LBB43_150
.LBB43_150:                             # %if.end440
                                        #   in Loop: Header=BB43_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB43_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB43_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB43_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB43_35 Depth=1
	movl	$0, -4(%rbp)
.LBB43_153:                             # %for.cond447
                                        #   Parent Loop BB43_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB43_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB43_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB43_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_153
.LBB43_156:                             # %for.end468
                                        #   in Loop: Header=BB43_35 Depth=1
	movl	$0, -4(%rbp)
.LBB43_157:                             # %for.cond469
                                        #   Parent Loop BB43_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB43_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB43_157 Depth=2
	movl	$0, -8(%rbp)
.LBB43_159:                             # %for.cond473
                                        #   Parent Loop BB43_35 Depth=1
                                        #     Parent Loop BB43_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB43_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB43_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB43_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_159
.LBB43_162:                             # %for.end490
                                        #   in Loop: Header=BB43_157 Depth=2
	jmp	.LBB43_163
.LBB43_163:                             # %for.inc491
                                        #   in Loop: Header=BB43_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_157
.LBB43_164:                             # %for.end493
                                        #   in Loop: Header=BB43_35 Depth=1
	jmp	.LBB43_165
.LBB43_165:                             # %if.end494
                                        #   in Loop: Header=BB43_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB43_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB43_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB43_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB43_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB43_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB43_35 Depth=1
	cmpl	$0, -92(%rbp)
	je	.LBB43_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB43_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -4(%rbp)
.LBB43_170:                             # %for.cond519
                                        #   Parent Loop BB43_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB43_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB43_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-120(%rbp), %ecx
	movl	%ecx, -120(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB43_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_170
.LBB43_173:                             # %for.end540
                                        #   in Loop: Header=BB43_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -4(%rbp)
.LBB43_174:                             # %for.cond556
                                        #   Parent Loop BB43_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB43_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB43_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-116(%rbp), %ecx
	movl	%ecx, -116(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB43_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_174
.LBB43_177:                             # %for.end577
                                        #   in Loop: Header=BB43_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-120(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -100(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-116(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -96(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-336(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-272(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -8(%rbp)
.LBB43_178:                             # %for.cond606
                                        #   Parent Loop BB43_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB43_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB43_178 Depth=2
	movl	$0, -4(%rbp)
.LBB43_180:                             # %for.cond610
                                        #   Parent Loop BB43_35 Depth=1
                                        #     Parent Loop BB43_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB43_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB43_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-104(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-96(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB43_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB43_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB43_184
.LBB43_183:                             # %cond.false630
                                        #   in Loop: Header=BB43_180 Depth=3
	movl	-104(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-96(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB43_184:                             # %cond.end643
                                        #   in Loop: Header=BB43_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB43_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB43_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB43_190
.LBB43_186:                             # %cond.false648
                                        #   in Loop: Header=BB43_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-104(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-96(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB43_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB43_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB43_189
.LBB43_188:                             # %cond.false666
                                        #   in Loop: Header=BB43_180 Depth=3
	movl	-104(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-96(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB43_189:                             # %cond.end679
                                        #   in Loop: Header=BB43_180 Depth=3
.LBB43_190:                             # %cond.end681
                                        #   in Loop: Header=BB43_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB43_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_180
.LBB43_192:                             # %for.end694
                                        #   in Loop: Header=BB43_178 Depth=2
	jmp	.LBB43_193
.LBB43_193:                             # %for.inc695
                                        #   in Loop: Header=BB43_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_178
.LBB43_194:                             # %for.end697
                                        #   in Loop: Header=BB43_35 Depth=1
	jmp	.LBB43_195
.LBB43_195:                             # %if.end698
                                        #   in Loop: Header=BB43_35 Depth=1
	jmp	.LBB43_196
.LBB43_196:                             # %for.inc699
                                        #   in Loop: Header=BB43_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB43_35
.LBB43_197:                             # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB43_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -136(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB43_199:                             # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB43_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB43_199 Depth=1
	movl	-112(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB43_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_199
.LBB43_202:                             # %for.end712
	movl	$0, -48(%rbp)
.LBB43_203:                             # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_219 Depth 2
                                        #       Child Loop BB43_221 Depth 3
                                        #         Child Loop BB43_223 Depth 4
                                        #           Child Loop BB43_225 Depth 5
                                        #             Child Loop BB43_227 Depth 6
	cmpl	$3, -48(%rbp)
	jg	.LBB43_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB43_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB43_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB43_203 Depth=1
	cmpl	$0, -48(%rbp)
	je	.LBB43_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB43_203 Depth=1
	jmp	.LBB43_241
.LBB43_207:                             # %if.end723
                                        #   in Loop: Header=BB43_203 Depth=1
	cmpl	$2, -48(%rbp)
	jne	.LBB43_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB43_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB43_217
.LBB43_209:                             # %lor.lhs.false
                                        #   in Loop: Header=BB43_203 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB43_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB43_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB43_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB43_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB43_217
.LBB43_212:                             # %lor.lhs.false736
                                        #   in Loop: Header=BB43_203 Depth=1
	cmpl	$3, -48(%rbp)
	jne	.LBB43_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB43_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB43_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB43_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB43_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB43_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB43_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB43_203 Depth=1
	cmpl	$0, -92(%rbp)
	jne	.LBB43_218
.LBB43_217:                             # %if.then749
                                        #   in Loop: Header=BB43_203 Depth=1
	jmp	.LBB43_241
.LBB43_218:                             # %if.end750
                                        #   in Loop: Header=BB43_203 Depth=1
	movl	$0, -108(%rbp)
	movl	$0, -24(%rbp)
.LBB43_219:                             # %for.cond751
                                        #   Parent Loop BB43_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_221 Depth 3
                                        #         Child Loop BB43_223 Depth 4
                                        #           Child Loop BB43_225 Depth 5
                                        #             Child Loop BB43_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB43_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB43_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -44(%rbp)
.LBB43_221:                             # %for.cond757
                                        #   Parent Loop BB43_203 Depth=1
                                        #     Parent Loop BB43_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB43_223 Depth 4
                                        #           Child Loop BB43_225 Depth 5
                                        #             Child Loop BB43_227 Depth 6
	movl	-44(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB43_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB43_221 Depth=3
	movl	$0, -40(%rbp)
.LBB43_223:                             # %for.cond761
                                        #   Parent Loop BB43_203 Depth=1
                                        #     Parent Loop BB43_219 Depth=2
                                        #       Parent Loop BB43_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB43_225 Depth 5
                                        #             Child Loop BB43_227 Depth 6
	movl	-40(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB43_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB43_223 Depth=4
	movl	$0, -124(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB43_225:                             # %for.cond765
                                        #   Parent Loop BB43_203 Depth=1
                                        #     Parent Loop BB43_219 Depth=2
                                        #       Parent Loop BB43_221 Depth=3
                                        #         Parent Loop BB43_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB43_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB43_225 Depth=5
	movl	-40(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB43_227:                             # %for.cond770
                                        #   Parent Loop BB43_203 Depth=1
                                        #     Parent Loop BB43_219 Depth=2
                                        #       Parent Loop BB43_221 Depth=3
                                        #         Parent Loop BB43_223 Depth=4
                                        #           Parent Loop BB43_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB43_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-124(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB43_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
	jmp	.LBB43_227
.LBB43_230:                             # %for.end803
                                        #   in Loop: Header=BB43_225 Depth=5
	jmp	.LBB43_231
.LBB43_231:                             # %for.inc804
                                        #   in Loop: Header=BB43_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_225
.LBB43_232:                             # %for.end806
                                        #   in Loop: Header=BB43_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB43_223 Depth=4
	movl	-40(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB43_223
.LBB43_234:                             # %for.end810
                                        #   in Loop: Header=BB43_221 Depth=3
	jmp	.LBB43_235
.LBB43_235:                             # %for.inc811
                                        #   in Loop: Header=BB43_221 Depth=3
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB43_221
.LBB43_236:                             # %for.end813
                                        #   in Loop: Header=BB43_219 Depth=2
	jmp	.LBB43_237
.LBB43_237:                             # %for.inc814
                                        #   in Loop: Header=BB43_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB43_219
.LBB43_238:                             # %for.end816
                                        #   in Loop: Header=BB43_203 Depth=1
	movl	-108(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB43_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB43_203 Depth=1
	movl	-48(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB43_240:                             # %if.end820
                                        #   in Loop: Header=BB43_203 Depth=1
	jmp	.LBB43_241
.LBB43_241:                             # %for.inc821
                                        #   in Loop: Header=BB43_203 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB43_203
.LBB43_242:                             # %for.end823
	movl	-132(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB43_243:                             # %if.end824
	cmpl	$1313796242, -164(%rbp) # imm = 0x4E4EF092
	jne	.LBB43_245
.LBB43_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_245:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_244
.Lfunc_end43:
	.size	IntraChromaPrediction.2, .Lfunc_end43-IntraChromaPrediction.2
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI43_0:
	.quad	.LBB43_42
	.quad	.LBB43_64
	.quad	.LBB43_83
	.quad	.LBB43_102
                                        # -- End function
	.text
	.globl	ChromaResidualCoding.3  # -- Begin function ChromaResidualCoding.3
	.p2align	4, 0x90
	.type	ChromaResidualCoding.3,@function
ChromaResidualCoding.3:                 # @ChromaResidualCoding.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$1290809498, -80(%rbp)  # imm = 0x4CF0309A
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB44_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB44_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB44_3:                               # %lor.end
.LBB44_4:                               # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -76(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB44_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_7 Depth 2
                                        #       Child Loop BB44_9 Depth 3
                                        #     Child Loop BB44_16 Depth 2
                                        #       Child Loop BB44_18 Depth 3
                                        #     Child Loop BB44_33 Depth 2
                                        #       Child Loop BB44_35 Depth 3
                                        #     Child Loop BB44_43 Depth 2
                                        #       Child Loop BB44_45 Depth 3
                                        #     Child Loop BB44_58 Depth 2
                                        #       Child Loop BB44_60 Depth 3
                                        #     Child Loop BB44_87 Depth 2
                                        #       Child Loop BB44_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB44_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB44_5 Depth=1
	movl	$0, -60(%rbp)
	movl	$0, -16(%rbp)
.LBB44_7:                               # %for.cond5
                                        #   Parent Loop BB44_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_9 Depth 3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB44_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB44_7 Depth=2
	movl	$0, -24(%rbp)
.LBB44_9:                               # %for.cond8
                                        #   Parent Loop BB44_5 Depth=1
                                        #     Parent Loop BB44_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB44_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB44_9 Depth=3
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %edi
	leaq	-50(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	leaq	-68(%rbp), %rcx
	leaq	-54(%rbp), %r8
	leaq	-52(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	movswl	-50(%rbp), %ecx
	movl	-72(%rbp), %r8d
	movl	-68(%rbp), %r9d
	movw	-54(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-52(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB44_9 Depth=3
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB44_9
.LBB44_12:                              # %for.end
                                        #   in Loop: Header=BB44_7 Depth=2
	jmp	.LBB44_13
.LBB44_13:                              # %for.inc18
                                        #   in Loop: Header=BB44_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_7
.LBB44_14:                              # %for.end20
                                        #   in Loop: Header=BB44_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB44_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB44_5 Depth=1
	movl	$0, -8(%rbp)
.LBB44_16:                              # %for.cond21
                                        #   Parent Loop BB44_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_18 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB44_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB44_16 Depth=2
	movl	$0, -4(%rbp)
.LBB44_18:                              # %for.cond26
                                        #   Parent Loop BB44_5 Depth=1
                                        #     Parent Loop BB44_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB44_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB44_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB44_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB44_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB44_25
.LBB44_21:                              # %if.else
                                        #   in Loop: Header=BB44_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB44_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB44_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB44_24
.LBB44_23:                              # %if.else52
                                        #   in Loop: Header=BB44_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB44_24:                              # %if.end
                                        #   in Loop: Header=BB44_18 Depth=3
	jmp	.LBB44_25
.LBB44_25:                              # %if.end57
                                        #   in Loop: Header=BB44_18 Depth=3
	jmp	.LBB44_26
.LBB44_26:                              # %for.inc58
                                        #   in Loop: Header=BB44_18 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_18
.LBB44_27:                              # %for.end59
                                        #   in Loop: Header=BB44_16 Depth=2
	jmp	.LBB44_28
.LBB44_28:                              # %for.inc60
                                        #   in Loop: Header=BB44_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_16
.LBB44_29:                              # %for.end62
                                        #   in Loop: Header=BB44_5 Depth=1
	jmp	.LBB44_74
.LBB44_30:                              # %if.else63
                                        #   in Loop: Header=BB44_5 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB44_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB44_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB44_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB44_5 Depth=1
	movl	$0, -8(%rbp)
.LBB44_33:                              # %for.cond69
                                        #   Parent Loop BB44_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_35 Depth 3
	cmpl	$8, -8(%rbp)
	jge	.LBB44_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB44_33 Depth=2
	movl	$0, -4(%rbp)
.LBB44_35:                              # %for.cond73
                                        #   Parent Loop BB44_5 Depth=1
                                        #     Parent Loop BB44_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -4(%rbp)
	jge	.LBB44_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB44_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB44_35 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_35
.LBB44_38:                              # %for.end83
                                        #   in Loop: Header=BB44_33 Depth=2
	jmp	.LBB44_39
.LBB44_39:                              # %for.inc84
                                        #   in Loop: Header=BB44_33 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_33
.LBB44_40:                              # %for.end86
                                        #   in Loop: Header=BB44_5 Depth=1
	jmp	.LBB44_73
.LBB44_41:                              # %if.else87
                                        #   in Loop: Header=BB44_5 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB44_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB44_5 Depth=1
	movl	$0, -8(%rbp)
.LBB44_43:                              # %for.cond90
                                        #   Parent Loop BB44_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_45 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB44_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB44_43 Depth=2
	movl	$0, -4(%rbp)
.LBB44_45:                              # %for.cond95
                                        #   Parent Loop BB44_5 Depth=1
                                        #     Parent Loop BB44_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB44_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB44_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB44_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB44_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB44_52
.LBB44_48:                              # %if.else119
                                        #   in Loop: Header=BB44_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB44_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB44_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB44_51
.LBB44_50:                              # %if.else127
                                        #   in Loop: Header=BB44_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB44_51:                              # %if.end132
                                        #   in Loop: Header=BB44_45 Depth=3
	jmp	.LBB44_52
.LBB44_52:                              # %if.end133
                                        #   in Loop: Header=BB44_45 Depth=3
	jmp	.LBB44_53
.LBB44_53:                              # %for.inc134
                                        #   in Loop: Header=BB44_45 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_45
.LBB44_54:                              # %for.end136
                                        #   in Loop: Header=BB44_43 Depth=2
	jmp	.LBB44_55
.LBB44_55:                              # %for.inc137
                                        #   in Loop: Header=BB44_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_43
.LBB44_56:                              # %for.end139
                                        #   in Loop: Header=BB44_5 Depth=1
	jmp	.LBB44_72
.LBB44_57:                              # %if.else140
                                        #   in Loop: Header=BB44_5 Depth=1
	movl	$0, -8(%rbp)
.LBB44_58:                              # %for.cond141
                                        #   Parent Loop BB44_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_60 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB44_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB44_58 Depth=2
	movl	$0, -4(%rbp)
.LBB44_60:                              # %for.cond146
                                        #   Parent Loop BB44_5 Depth=1
                                        #     Parent Loop BB44_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB44_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB44_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB44_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB44_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB44_67
.LBB44_63:                              # %if.else175
                                        #   in Loop: Header=BB44_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB44_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB44_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB44_66
.LBB44_65:                              # %if.else188
                                        #   in Loop: Header=BB44_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB44_66:                              # %if.end198
                                        #   in Loop: Header=BB44_60 Depth=3
	jmp	.LBB44_67
.LBB44_67:                              # %if.end199
                                        #   in Loop: Header=BB44_60 Depth=3
	jmp	.LBB44_68
.LBB44_68:                              # %for.inc200
                                        #   in Loop: Header=BB44_60 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_60
.LBB44_69:                              # %for.end202
                                        #   in Loop: Header=BB44_58 Depth=2
	jmp	.LBB44_70
.LBB44_70:                              # %for.inc203
                                        #   in Loop: Header=BB44_58 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_58
.LBB44_71:                              # %for.end205
                                        #   in Loop: Header=BB44_5 Depth=1
	jmp	.LBB44_72
.LBB44_72:                              # %if.end206
                                        #   in Loop: Header=BB44_5 Depth=1
	jmp	.LBB44_73
.LBB44_73:                              # %if.end207
                                        #   in Loop: Header=BB44_5 Depth=1
	jmp	.LBB44_74
.LBB44_74:                              # %if.end208
                                        #   in Loop: Header=BB44_5 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB44_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB44_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB44_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB44_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB44_100
.LBB44_77:                              # %if.else215
                                        #   in Loop: Header=BB44_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB44_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB44_5 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB44_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB44_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB44_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB44_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB44_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB44_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB44_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB44_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB44_84
.LBB44_83:                              # %if.then247
                                        #   in Loop: Header=BB44_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB44_85
.LBB44_84:                              # %if.else249
                                        #   in Loop: Header=BB44_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB44_85:                              # %if.end251
                                        #   in Loop: Header=BB44_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB44_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB44_5 Depth=1
	movl	$0, -8(%rbp)
.LBB44_87:                              # %for.cond255
                                        #   Parent Loop BB44_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_89 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB44_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB44_87 Depth=2
	movl	$0, -4(%rbp)
.LBB44_89:                              # %for.cond260
                                        #   Parent Loop BB44_5 Depth=1
                                        #     Parent Loop BB44_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB44_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB44_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB44_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB44_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB44_93
.LBB44_92:                              # %if.else277
                                        #   in Loop: Header=BB44_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB44_93:                              # %if.end287
                                        #   in Loop: Header=BB44_89 Depth=3
	jmp	.LBB44_94
.LBB44_94:                              # %for.inc288
                                        #   in Loop: Header=BB44_89 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_89
.LBB44_95:                              # %for.end290
                                        #   in Loop: Header=BB44_87 Depth=2
	jmp	.LBB44_96
.LBB44_96:                              # %for.inc291
                                        #   in Loop: Header=BB44_87 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_87
.LBB44_97:                              # %for.end293
                                        #   in Loop: Header=BB44_5 Depth=1
	jmp	.LBB44_98
.LBB44_98:                              # %if.end294
                                        #   in Loop: Header=BB44_5 Depth=1
	jmp	.LBB44_99
.LBB44_99:                              # %if.end295
                                        #   in Loop: Header=BB44_5 Depth=1
	jmp	.LBB44_100
.LBB44_100:                             # %if.end296
                                        #   in Loop: Header=BB44_5 Depth=1
	jmp	.LBB44_101
.LBB44_101:                             # %for.inc297
                                        #   in Loop: Header=BB44_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_5
.LBB44_102:                             # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB44_139
# %bb.103:                              # %if.then307
	movl	$0, -8(%rbp)
.LBB44_104:                             # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_106 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB44_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB44_104 Depth=1
	movl	$0, -4(%rbp)
.LBB44_106:                             # %for.cond312
                                        #   Parent Loop BB44_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB44_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB44_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -64(%rbp)
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-64(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-20(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB44_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB44_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB44_110
.LBB44_109:                             # %cond.false
                                        #   in Loop: Header=BB44_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB44_110:                             # %cond.end
                                        #   in Loop: Header=BB44_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB44_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB44_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB44_116
.LBB44_112:                             # %cond.false358
                                        #   in Loop: Header=BB44_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB44_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB44_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB44_115
.LBB44_114:                             # %cond.false367
                                        #   in Loop: Header=BB44_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB44_115:                             # %cond.end373
                                        #   in Loop: Header=BB44_106 Depth=2
.LBB44_116:                             # %cond.end375
                                        #   in Loop: Header=BB44_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-36(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB44_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB44_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB44_119
.LBB44_118:                             # %cond.false394
                                        #   in Loop: Header=BB44_106 Depth=2
	movl	-36(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB44_119:                             # %cond.end400
                                        #   in Loop: Header=BB44_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB44_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB44_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB44_125
.LBB44_121:                             # %cond.false406
                                        #   in Loop: Header=BB44_106 Depth=2
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB44_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB44_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB44_124
.LBB44_123:                             # %cond.false415
                                        #   in Loop: Header=BB44_106 Depth=2
	movl	-36(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB44_124:                             # %cond.end421
                                        #   in Loop: Header=BB44_106 Depth=2
.LBB44_125:                             # %cond.end423
                                        #   in Loop: Header=BB44_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-32(%rbp), %esi
	movslq	-4(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-8(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB44_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB44_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB44_128
.LBB44_127:                             # %cond.false443
                                        #   in Loop: Header=BB44_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-32(%rbp), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB44_128:                             # %cond.end449
                                        #   in Loop: Header=BB44_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB44_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB44_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB44_134
.LBB44_130:                             # %cond.false455
                                        #   in Loop: Header=BB44_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-32(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB44_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB44_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB44_133
.LBB44_132:                             # %cond.false464
                                        #   in Loop: Header=BB44_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-32(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB44_133:                             # %cond.end470
                                        #   in Loop: Header=BB44_106 Depth=2
.LBB44_134:                             # %cond.end472
                                        #   in Loop: Header=BB44_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB44_106 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_106
.LBB44_136:                             # %for.end487
                                        #   in Loop: Header=BB44_104 Depth=1
	jmp	.LBB44_137
.LBB44_137:                             # %for.inc488
                                        #   in Loop: Header=BB44_104 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_104
.LBB44_138:                             # %for.end490
	jmp	.LBB44_139
.LBB44_139:                             # %if.end491
	cmpl	$1290809498, -80(%rbp)  # imm = 0x4CF0309A
	jne	.LBB44_141
.LBB44_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_141:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_140
.Lfunc_end44:
	.size	ChromaResidualCoding.3, .Lfunc_end44-ChromaResidualCoding.3
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.4     # -- Begin function TransformDecision.4
	.p2align	4, 0x90
	.type	TransformDecision.4,@function
TransformDecision.4:                    # @TransformDecision.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$1904593793, -88(%rbp)  # imm = 0x7185CB81
	movl	%edi, -44(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -36(%rbp)
	cmpl	$-1, -44(%rbp)
	jne	.LBB45_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -60(%rbp)
	jmp	.LBB45_3
.LBB45_2:                               # %if.else
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB45_3:                               # %if.end
	jmp	.LBB45_4
.LBB45_4:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_6 Depth 2
                                        #       Child Loop BB45_8 Depth 3
                                        #         Child Loop BB45_10 Depth 4
                                        #           Child Loop BB45_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB45_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB45_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-52(%rbp), %rsi
	leaq	-76(%rbp), %rdx
	leaq	-72(%rbp), %rcx
	leaq	-50(%rbp), %r8
	leaq	-54(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -64(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -68(%rbp)
	movl	$0, -32(%rbp)
	movl	-64(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB45_6:                               # %for.cond3
                                        #   Parent Loop BB45_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_8 Depth 3
                                        #         Child Loop BB45_10 Depth 4
                                        #           Child Loop BB45_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB45_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB45_8:                               # %for.cond8
                                        #   Parent Loop BB45_4 Depth=1
                                        #     Parent Loop BB45_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB45_10 Depth 4
                                        #           Child Loop BB45_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB45_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movswl	-52(%rbp), %edx
	movl	-76(%rbp), %ecx
	movl	-72(%rbp), %r8d
	movw	-50(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-54(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-32(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -28(%rbp)
.LBB45_10:                              # %for.cond13
                                        #   Parent Loop BB45_4 Depth=1
                                        #     Parent Loop BB45_6 Depth=2
                                        #       Parent Loop BB45_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB45_12 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB45_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB45_10 Depth=4
	movl	$0, -24(%rbp)
.LBB45_12:                              # %for.cond17
                                        #   Parent Loop BB45_4 Depth=1
                                        #     Parent Loop BB45_6 Depth=2
                                        #       Parent Loop BB45_8 Depth=3
                                        #         Parent Loop BB45_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB45_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB45_12 Depth=5
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB45_12 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB45_12
.LBB45_15:                              # %for.end
                                        #   in Loop: Header=BB45_10 Depth=4
	jmp	.LBB45_16
.LBB45_16:                              # %for.inc38
                                        #   in Loop: Header=BB45_10 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB45_10
.LBB45_17:                              # %for.end40
                                        #   in Loop: Header=BB45_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB45_8 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB45_8
.LBB45_19:                              # %for.end44
                                        #   in Loop: Header=BB45_6 Depth=2
	jmp	.LBB45_20
.LBB45_20:                              # %for.inc45
                                        #   in Loop: Header=BB45_6 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_6
.LBB45_21:                              # %for.end47
                                        #   in Loop: Header=BB45_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB45_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_4
.LBB45_23:                              # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB45_25
# %bb.24:                               # %if.then56
	movl	$1, -48(%rbp)
	jmp	.LBB45_28
.LBB45_25:                              # %if.else57
	movl	-40(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB45_27
# %bb.26:                               # %if.then60
	movl	$1, -48(%rbp)
	jmp	.LBB45_28
.LBB45_27:                              # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -48(%rbp)
.LBB45_28:                              # %return
	movl	-48(%rbp), %ebx
	cmpl	$1904593793, -88(%rbp)  # imm = 0x7185CB81
	jne	.LBB45_30
.LBB45_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_30:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_29
.Lfunc_end45:
	.size	TransformDecision.4, .Lfunc_end45-TransformDecision.4
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC.5 # -- Begin function writeLumaCoeff4x4_CABAC.5
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.5,@function
writeLumaCoeff4x4_CABAC.5:              # @writeLumaCoeff4x4_CABAC.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1796290185, -52(%rbp)  # imm = 0x6B113689
	movl	%edi, -28(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -72(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB46_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB46_3
.LBB46_2:                               # %cond.false
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB46_3:                               # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB46_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB46_6
.LBB46_5:                               # %cond.false26
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB46_6:                               # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB46_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -12(%rbp)
	jg	.LBB46_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB46_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB46_9:                               # %land.end
                                        #   in Loop: Header=BB46_7 Depth=1
	testb	$1, %al
	jne	.LBB46_10
	jmp	.LBB46_15
.LBB46_10:                              # %for.body
                                        #   in Loop: Header=BB46_7 Depth=1
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-104(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB46_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB46_13
.LBB46_12:                              # %cond.false40
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB46_13:                              # %cond.end43
                                        #   in Loop: Header=BB46_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-88(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB46_7 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_7
.LBB46_15:                              # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$1796290185, -52(%rbp)  # imm = 0x6B113689
	jne	.LBB46_17
.LBB46_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_17:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_16
.Lfunc_end46:
	.size	writeLumaCoeff4x4_CABAC.5, .Lfunc_end46-writeLumaCoeff4x4_CABAC.5
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe.6   # -- Begin function SetModesAndRefframe.6
	.p2align	4, 0x90
	.type	SetModesAndRefframe.6,@function
SetModesAndRefframe.6:                  # @SetModesAndRefframe.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1230946813, -60(%rbp)  # imm = 0x495EC1FD
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -48(%rbp)
	movq	%r9, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -8(%rbp)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movl	$-1, (%rax)
	movq	-40(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB47_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB47_12
.LBB47_2:                               # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB47_4
# %bb.3:                                # %if.then18
	movq	-48(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB47_11
.LBB47_4:                               # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB47_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB47_10
.LBB47_6:                               # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB47_8
# %bb.7:                                # %if.then45
	movq	-48(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB47_9
.LBB47_8:                               # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB47_9:                               # %if.end
	jmp	.LBB47_10
.LBB47_10:                              # %if.end86
	jmp	.LBB47_11
.LBB47_11:                              # %if.end87
	jmp	.LBB47_12
.LBB47_12:                              # %if.end88
	cmpl	$1230946813, -60(%rbp)  # imm = 0x495EC1FD
	jne	.LBB47_14
.LBB47_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_14:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_13
.Lfunc_end47:
	.size	SetModesAndRefframe.6, .Lfunc_end47-SetModesAndRefframe.6
	.cfi_endproc
                                        # -- End function
	.globl	BType2CtxRef.7          # -- Begin function BType2CtxRef.7
	.p2align	4, 0x90
	.type	BType2CtxRef.7,@function
BType2CtxRef.7:                         # @BType2CtxRef.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$907355871, -20(%rbp)   # imm = 0x361526DF
	movl	%edi, -16(%rbp)
	cmpl	$4, -16(%rbp)
	jge	.LBB48_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB48_3
.LBB48_2:                               # %if.else
	movl	$1, -12(%rbp)
.LBB48_3:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$907355871, -20(%rbp)   # imm = 0x361526DF
	jne	.LBB48_5
.LBB48_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_4
.Lfunc_end48:
	.size	BType2CtxRef.7, .Lfunc_end48-BType2CtxRef.7
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16.8        # -- Begin function find_sad_16x16.8
	.p2align	4, 0x90
	.type	find_sad_16x16.8,@function
find_sad_16x16.8:                       # @find_sad_16x16.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$1186965308, -80(%rbp)  # imm = 0x46BFA73C
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$0, -12(%rbp)
.LBB49_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB49_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-76(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_1
.LBB49_4:                               # %for.end
	movl	-76(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB49_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB49_20
.LBB49_6:                               # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB49_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB49_9
.LBB49_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB49_9
.LBB49_9:                               # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -60(%rbp)
.LBB49_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB49_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB49_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB49_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB49_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB49_14
.LBB49_13:                              # %cond.false23
                                        #   in Loop: Header=BB49_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB49_14
.LBB49_14:                              # %cond.end24
                                        #   in Loop: Header=BB49_10 Depth=1
	andl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB49_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_10
.LBB49_16:                              # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB49_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB49_19
.LBB49_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB49_19
.LBB49_19:                              # %cond.end39
	movl	%eax, -72(%rbp)
.LBB49_20:                              # %if.end
	movl	$999999, -64(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB49_21:                              # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_42 Depth 2
                                        #       Child Loop BB49_44 Depth 3
                                        #     Child Loop BB49_50 Depth 2
                                        #       Child Loop BB49_52 Depth 3
                                        #         Child Loop BB49_54 Depth 4
                                        #         Child Loop BB49_58 Depth 4
                                        #           Child Loop BB49_60 Depth 5
                                        #     Child Loop BB49_72 Depth 2
                                        #       Child Loop BB49_74 Depth 3
                                        #     Child Loop BB49_80 Depth 2
                                        #     Child Loop BB49_84 Depth 2
                                        #       Child Loop BB49_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB49_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB49_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB49_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB49_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB49_32
.LBB49_24:                              # %if.then46
                                        #   in Loop: Header=BB49_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB49_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB49_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB49_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB49_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB49_28
.LBB49_27:                              # %if.then51
                                        #   in Loop: Header=BB49_21 Depth=1
	jmp	.LBB49_95
.LBB49_28:                              # %if.end52
                                        #   in Loop: Header=BB49_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB49_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB49_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB49_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB49_21 Depth=1
	jmp	.LBB49_95
.LBB49_31:                              # %if.end57
                                        #   in Loop: Header=BB49_21 Depth=1
	jmp	.LBB49_32
.LBB49_32:                              # %if.end58
                                        #   in Loop: Header=BB49_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB49_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB49_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB49_40
.LBB49_34:                              # %lor.lhs.false62
                                        #   in Loop: Header=BB49_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB49_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB49_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB49_40
.LBB49_36:                              # %lor.lhs.false66
                                        #   in Loop: Header=BB49_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB49_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB49_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB49_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB49_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB49_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB49_21 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB49_41
.LBB49_40:                              # %if.then74
                                        #   in Loop: Header=BB49_21 Depth=1
	jmp	.LBB49_94
.LBB49_41:                              # %if.else75
                                        #   in Loop: Header=BB49_21 Depth=1
	movl	$0, -16(%rbp)
.LBB49_42:                              # %for.cond76
                                        #   Parent Loop BB49_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB49_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB49_42 Depth=2
	movl	$0, -12(%rbp)
.LBB49_44:                              # %for.cond79
                                        #   Parent Loop BB49_21 Depth=1
                                        #     Parent Loop BB49_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB49_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB49_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB49_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_44
.LBB49_47:                              # %for.end115
                                        #   in Loop: Header=BB49_42 Depth=2
	jmp	.LBB49_48
.LBB49_48:                              # %for.inc116
                                        #   in Loop: Header=BB49_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_42
.LBB49_49:                              # %for.end118
                                        #   in Loop: Header=BB49_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -24(%rbp)
.LBB49_50:                              # %for.cond119
                                        #   Parent Loop BB49_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_52 Depth 3
                                        #         Child Loop BB49_54 Depth 4
                                        #         Child Loop BB49_58 Depth 4
                                        #           Child Loop BB49_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB49_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB49_50 Depth=2
	movl	$0, -20(%rbp)
.LBB49_52:                              # %for.cond123
                                        #   Parent Loop BB49_21 Depth=1
                                        #     Parent Loop BB49_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB49_54 Depth 4
                                        #         Child Loop BB49_58 Depth 4
                                        #           Child Loop BB49_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB49_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB49_52 Depth=3
	movl	$0, -16(%rbp)
.LBB49_54:                              # %for.cond127
                                        #   Parent Loop BB49_21 Depth=1
                                        #     Parent Loop BB49_50 Depth=2
                                        #       Parent Loop BB49_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB49_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB49_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB49_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_54
.LBB49_57:                              # %for.end237
                                        #   in Loop: Header=BB49_52 Depth=3
	movl	$0, -12(%rbp)
.LBB49_58:                              # %for.cond238
                                        #   Parent Loop BB49_21 Depth=1
                                        #     Parent Loop BB49_50 Depth=2
                                        #       Parent Loop BB49_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB49_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB49_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB49_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB49_60:                              # %for.cond346
                                        #   Parent Loop BB49_21 Depth=1
                                        #     Parent Loop BB49_50 Depth=2
                                        #       Parent Loop BB49_52 Depth=3
                                        #         Parent Loop BB49_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB49_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB49_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB49_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB49_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB49_63:                              # %if.end363
                                        #   in Loop: Header=BB49_60 Depth=5
	jmp	.LBB49_64
.LBB49_64:                              # %for.inc364
                                        #   in Loop: Header=BB49_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_60
.LBB49_65:                              # %for.end366
                                        #   in Loop: Header=BB49_58 Depth=4
	jmp	.LBB49_66
.LBB49_66:                              # %for.inc367
                                        #   in Loop: Header=BB49_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_58
.LBB49_67:                              # %for.end369
                                        #   in Loop: Header=BB49_52 Depth=3
	jmp	.LBB49_68
.LBB49_68:                              # %for.inc370
                                        #   in Loop: Header=BB49_52 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB49_52
.LBB49_69:                              # %for.end372
                                        #   in Loop: Header=BB49_50 Depth=2
	jmp	.LBB49_70
.LBB49_70:                              # %for.inc373
                                        #   in Loop: Header=BB49_50 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB49_50
.LBB49_71:                              # %for.end375
                                        #   in Loop: Header=BB49_21 Depth=1
	movl	$0, -16(%rbp)
.LBB49_72:                              # %for.cond376
                                        #   Parent Loop BB49_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB49_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB49_72 Depth=2
	movl	$0, -12(%rbp)
.LBB49_74:                              # %for.cond380
                                        #   Parent Loop BB49_21 Depth=1
                                        #     Parent Loop BB49_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB49_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB49_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB49_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_74
.LBB49_77:                              # %for.end397
                                        #   in Loop: Header=BB49_72 Depth=2
	jmp	.LBB49_78
.LBB49_78:                              # %for.inc398
                                        #   in Loop: Header=BB49_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_72
.LBB49_79:                              # %for.end400
                                        #   in Loop: Header=BB49_21 Depth=1
	movl	$0, -16(%rbp)
.LBB49_80:                              # %for.cond401
                                        #   Parent Loop BB49_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB49_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB49_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB49_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_80
.LBB49_83:                              # %for.end463
                                        #   in Loop: Header=BB49_21 Depth=1
	movl	$0, -12(%rbp)
.LBB49_84:                              # %for.cond464
                                        #   Parent Loop BB49_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB49_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB49_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB49_86:                              # %for.cond524
                                        #   Parent Loop BB49_21 Depth=1
                                        #     Parent Loop BB49_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB49_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB49_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB49_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_86
.LBB49_89:                              # %for.end536
                                        #   in Loop: Header=BB49_84 Depth=2
	jmp	.LBB49_90
.LBB49_90:                              # %for.inc537
                                        #   in Loop: Header=BB49_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_84
.LBB49_91:                              # %for.end539
                                        #   in Loop: Header=BB49_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB49_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB49_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB49_93:                              # %if.end543
                                        #   in Loop: Header=BB49_21 Depth=1
	jmp	.LBB49_94
.LBB49_94:                              # %if.end544
                                        #   in Loop: Header=BB49_21 Depth=1
	jmp	.LBB49_95
.LBB49_95:                              # %for.inc545
                                        #   in Loop: Header=BB49_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB49_21
.LBB49_96:                              # %for.end547
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %ebx
	cmpl	$1186965308, -80(%rbp)  # imm = 0x46BFA73C
	jne	.LBB49_98
.LBB49_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_97
.Lfunc_end49:
	.size	find_sad_16x16.8, .Lfunc_end49-find_sad_16x16.8
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff.9      # -- Begin function writeChromaCoeff.9
	.p2align	4, 0x90
	.type	writeChromaCoeff.9,@function
writeChromaCoeff.9:                     # @writeChromaCoeff.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$823542120, -80(%rbp)   # imm = 0x31164168
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB50_24
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB50_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_6 Depth 2
	cmpl	$2, -20(%rbp)
	jge	.LBB50_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB50_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB50_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB50_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB50_21
.LBB50_5:                               # %if.else
                                        #   in Loop: Header=BB50_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -24(%rbp)
.LBB50_6:                               # %for.cond18
                                        #   Parent Loop BB50_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB50_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB50_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB50_8:                               # %land.end
                                        #   in Loop: Header=BB50_6 Depth=2
	testb	$1, %al
	jne	.LBB50_9
	jmp	.LBB50_20
.LBB50_9:                               # %for.body21
                                        #   in Loop: Header=BB50_6 Depth=2
	movq	-120(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-128(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB50_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB50_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB50_12
.LBB50_11:                              # %if.else29
                                        #   in Loop: Header=BB50_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB50_12:                              # %if.end
                                        #   in Loop: Header=BB50_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB50_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB50_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB50_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB50_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB50_15:                              # %lor.end
                                        #   in Loop: Header=BB50_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB50_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB50_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB50_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB50_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB50_18:                              # %lor.end45
                                        #   in Loop: Header=BB50_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB50_6 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB50_6
.LBB50_20:                              # %for.end
                                        #   in Loop: Header=BB50_2 Depth=1
	jmp	.LBB50_21
.LBB50_21:                              # %if.end58
                                        #   in Loop: Header=BB50_2 Depth=1
	jmp	.LBB50_22
.LBB50_22:                              # %for.inc59
                                        #   in Loop: Header=BB50_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB50_2
.LBB50_23:                              # %for.end61
	jmp	.LBB50_24
.LBB50_24:                              # %if.end62
	movl	$-1, -20(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB50_52
# %bb.25:                               # %if.then64
	movl	$4, -28(%rbp)
.LBB50_26:                              # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_28 Depth 2
                                        #       Child Loop BB50_32 Depth 3
	movl	-28(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB50_26 Depth=1
	movl	$0, -36(%rbp)
.LBB50_28:                              # %for.cond69
                                        #   Parent Loop BB50_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_32 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB50_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB50_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB50_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB50_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %esi
	movl	-36(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB50_47
.LBB50_31:                              # %if.else84
                                        #   in Loop: Header=BB50_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movl	$1, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -24(%rbp)
.LBB50_32:                              # %for.cond115
                                        #   Parent Loop BB50_26 Depth=1
                                        #     Parent Loop BB50_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -24(%rbp)
	jge	.LBB50_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB50_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB50_34:                              # %land.end121
                                        #   in Loop: Header=BB50_32 Depth=3
	testb	$1, %al
	jne	.LBB50_35
	jmp	.LBB50_46
.LBB50_35:                              # %for.body122
                                        #   in Loop: Header=BB50_32 Depth=3
	movq	-136(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-144(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB50_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB50_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB50_38
.LBB50_37:                              # %if.else134
                                        #   in Loop: Header=BB50_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB50_38:                              # %if.end136
                                        #   in Loop: Header=BB50_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB50_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB50_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB50_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB50_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB50_41:                              # %lor.end149
                                        #   in Loop: Header=BB50_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB50_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB50_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB50_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB50_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB50_44:                              # %lor.end164
                                        #   in Loop: Header=BB50_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB50_32 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB50_32
.LBB50_46:                              # %for.end189
                                        #   in Loop: Header=BB50_28 Depth=2
	jmp	.LBB50_47
.LBB50_47:                              # %if.end190
                                        #   in Loop: Header=BB50_28 Depth=2
	jmp	.LBB50_48
.LBB50_48:                              # %for.inc191
                                        #   in Loop: Header=BB50_28 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB50_28
.LBB50_49:                              # %for.end193
                                        #   in Loop: Header=BB50_26 Depth=1
	jmp	.LBB50_50
.LBB50_50:                              # %for.inc194
                                        #   in Loop: Header=BB50_26 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB50_26
.LBB50_51:                              # %for.end196
	jmp	.LBB50_52
.LBB50_52:                              # %if.end197
	movl	-32(%rbp), %ebx
	cmpl	$823542120, -80(%rbp)   # imm = 0x31164168
	jne	.LBB50_54
.LBB50_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_54:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_53
.Lfunc_end50:
	.size	writeChromaCoeff.9, .Lfunc_end50-writeChromaCoeff.9
	.cfi_endproc
                                        # -- End function
	.globl	B8Mode2Value.10         # -- Begin function B8Mode2Value.10
	.p2align	4, 0x90
	.type	B8Mode2Value.10,@function
B8Mode2Value.10:                        # @B8Mode2Value.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2080614504, -20(%rbp)  # imm = 0x7C03A868
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB51_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_3
.LBB51_2:                               # %if.else
	movslq	-12(%rbp), %rax
	movl	B8Mode2Value.b8start(,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	B8Mode2Value.b8inc(,%rcx,4), %ecx
	imull	-24(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
.LBB51_3:                               # %return
	movl	-16(%rbp), %ebx
	cmpl	$2080614504, -20(%rbp)  # imm = 0x7C03A868
	jne	.LBB51_5
.LBB51_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_4
.Lfunc_end51:
	.size	B8Mode2Value.10, .Lfunc_end51-B8Mode2Value.10
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.11  # -- Begin function writeCoeff4x4_CAVLC.11
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.11,@function
writeCoeff4x4_CAVLC.11:                 # @writeCoeff4x4_CAVLC.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$1351045338, -172(%rbp) # imm = 0x508750DA
	movl	%edi, -168(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -48(%rbp)
	movl	%ecx, -72(%rbp)
	movl	$0, -40(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -200(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -92(%rbp)
	movl	$0, -156(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -120(%rbp)
	movq	$0, -136(%rbp)
	movl	-168(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB52_22
# %bb.1:                                # %entry
	movq	.LJTI52_0(,%rax,8), %rax
	jmpq	*%rax
.LBB52_2:                               # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -68(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB52_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB52_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB52_6
.LBB52_5:                               # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB52_7
.LBB52_6:                               # %if.else
	movl	$14, -24(%rbp)
.LBB52_7:                               # %if.end
	jmp	.LBB52_23
.LBB52_8:                               # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -68(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB52_23
.LBB52_9:                               # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -68(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB52_23
.LBB52_10:                              # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -68(%rbp)
	movl	$6, -52(%rbp)
	movl	$1, -92(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-72(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-72(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB52_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB52_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB52_14
.LBB52_13:                              # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB52_15
.LBB52_14:                              # %if.else66
	movl	$13, -24(%rbp)
.LBB52_15:                              # %if.end67
	jmp	.LBB52_23
.LBB52_16:                              # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -68(%rbp)
	movl	$6, -52(%rbp)
	movl	$1, -156(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB52_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB52_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB52_20
.LBB52_19:                              # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB52_21
.LBB52_20:                              # %if.else92
	movl	$15, -24(%rbp)
.LBB52_21:                              # %if.end93
	jmp	.LBB52_23
.LBB52_22:                              # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB52_23:                              # %sw.epilog
	movq	-208(%rbp), %rax
	movq	24(%rax), %rax
	movq	-200(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -160(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -108(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB52_24:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -92(%rbp)
	je	.LBB52_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB52_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB52_27
.LBB52_26:                              # %cond.false
                                        #   in Loop: Header=BB52_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB52_27
.LBB52_27:                              # %cond.end
                                        #   in Loop: Header=BB52_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB52_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB52_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB52_29:                              # %land.end
                                        #   in Loop: Header=BB52_24 Depth=1
	testb	$1, %dl
	jne	.LBB52_30
	jmp	.LBB52_41
.LBB52_30:                              # %for.body
                                        #   in Loop: Header=BB52_24 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -88(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB52_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB52_24 Depth=1
	cmpl	$0, -88(%rbp)
	je	.LBB52_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB52_24 Depth=1
	movl	-88(%rbp), %eax
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
.LBB52_33:                              # %if.end110
                                        #   in Loop: Header=BB52_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB52_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB52_24 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-160(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -160(%rbp)
	cmpl	$3, -32(%rbp)
	jle	.LBB52_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB52_24 Depth=1
	movl	$3, -32(%rbp)
.LBB52_36:                              # %if.end117
                                        #   in Loop: Header=BB52_24 Depth=1
	jmp	.LBB52_38
.LBB52_37:                              # %if.else118
                                        #   in Loop: Header=BB52_24 Depth=1
	movl	$0, -32(%rbp)
.LBB52_38:                              # %if.end119
                                        #   in Loop: Header=BB52_24 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -76(%rbp)
.LBB52_39:                              # %if.end121
                                        #   in Loop: Header=BB52_24 Depth=1
	jmp	.LBB52_40
.LBB52_40:                              # %for.inc
                                        #   in Loop: Header=BB52_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_24
.LBB52_41:                              # %for.end
	cmpl	$0, -92(%rbp)
	jne	.LBB52_61
# %bb.42:                               # %if.then124
	cmpl	$0, -156(%rbp)
	jne	.LBB52_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB52_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-48(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB52_46
.LBB52_45:                              # %cond.false132
	movl	-48(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB52_46:                              # %cond.end136
	movl	%eax, -104(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB52_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-48(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB52_49
.LBB52_48:                              # %cond.false142
	movl	-48(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB52_49:                              # %cond.end145
	movl	%eax, -100(%rbp)
	movl	-104(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -112(%rbp)
	jmp	.LBB52_51
.LBB52_50:                              # %if.else148
	movl	-72(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -104(%rbp)
	movl	-72(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -100(%rbp)
	movl	-104(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -112(%rbp)
.LBB52_51:                              # %if.end151
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-104(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -112(%rbp)
	jge	.LBB52_53
# %bb.52:                               # %if.then160
	movl	$0, -80(%rbp)
	jmp	.LBB52_60
.LBB52_53:                              # %if.else161
	cmpl	$4, -112(%rbp)
	jge	.LBB52_55
# %bb.54:                               # %if.then163
	movl	$1, -80(%rbp)
	jmp	.LBB52_59
.LBB52_55:                              # %if.else164
	cmpl	$8, -112(%rbp)
	jge	.LBB52_57
# %bb.56:                               # %if.then166
	movl	$2, -80(%rbp)
	jmp	.LBB52_58
.LBB52_57:                              # %if.else167
	movl	$3, -80(%rbp)
.LBB52_58:                              # %if.end168
	jmp	.LBB52_59
.LBB52_59:                              # %if.end169
	jmp	.LBB52_60
.LBB52_60:                              # %if.end170
	jmp	.LBB52_62
.LBB52_61:                              # %if.else171
	movl	$0, -80(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB52_62:                              # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -92(%rbp)
	jne	.LBB52_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB52_65
.LBB52_64:                              # %if.else177
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB52_65:                              # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -36(%rbp)
	jne	.LBB52_67
# %bb.66:                               # %if.then189
	movl	-40(%rbp), %eax
	movl	%eax, -164(%rbp)
	jmp	.LBB52_122
.LBB52_67:                              # %if.end190
	cmpl	$0, -36(%rbp)
	je	.LBB52_121
# %bb.68:                               # %if.then192
	movl	$0, -96(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB52_69:                              # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-76(%rbp), %ecx
	subl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB52_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB52_69 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB52_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB52_72:                              # %if.end202
                                        #   in Loop: Header=BB52_69 Depth=1
	movl	-96(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -96(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB52_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB52_69 Depth=1
	movl	-96(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -96(%rbp)
.LBB52_74:                              # %if.end205
                                        #   in Loop: Header=BB52_69 Depth=1
	jmp	.LBB52_75
.LBB52_75:                              # %for.inc206
                                        #   in Loop: Header=BB52_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_69
.LBB52_76:                              # %for.end207
	cmpl	$0, -32(%rbp)
	je	.LBB52_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-96(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB52_78:                              # %if.end223
	movl	$1, -140(%rbp)
	cmpl	$3, -36(%rbp)
	jle	.LBB52_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -32(%rbp)
	jne	.LBB52_81
# %bb.80:                               # %if.then226
	movl	$0, -140(%rbp)
.LBB52_81:                              # %if.end227
	cmpl	$10, -36(%rbp)
	jle	.LBB52_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -32(%rbp)
	jge	.LBB52_84
# %bb.83:                               # %if.then231
	movl	$1, -28(%rbp)
	jmp	.LBB52_85
.LBB52_84:                              # %if.else232
	movl	$0, -28(%rbp)
.LBB52_85:                              # %if.end233
	movl	-76(%rbp), %eax
	subl	-32(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB52_86:                              # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB52_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB52_86 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -140(%rbp)
	je	.LBB52_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB52_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB52_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB52_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB52_91
.LBB52_90:                              # %if.else249
                                        #   in Loop: Header=BB52_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB52_91:                              # %if.end252
                                        #   in Loop: Header=BB52_86 Depth=1
	movl	$0, -140(%rbp)
.LBB52_92:                              # %if.end253
                                        #   in Loop: Header=BB52_86 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB52_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB52_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB52_95
.LBB52_94:                              # %if.else257
                                        #   in Loop: Header=BB52_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-28(%rbp), %esi
	movq	-128(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB52_95:                              # %if.end259
                                        #   in Loop: Header=BB52_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB52_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB52_86 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
.LBB52_97:                              # %if.end266
                                        #   in Loop: Header=BB52_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-76(%rbp), %ecx
	subl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB52_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB52_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB52_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB52_86 Depth=1
	movl	$2, -28(%rbp)
.LBB52_100:                             # %if.end273
                                        #   in Loop: Header=BB52_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB52_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_86
.LBB52_102:                             # %for.end285
	movl	-36(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB52_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-108(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -92(%rbp)
	jne	.LBB52_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB52_106
.LBB52_105:                             # %if.else295
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB52_106:                             # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB52_107:                             # %if.end307
	movl	-108(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB52_108:                             # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB52_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB52_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB52_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB52_108 Depth=1
	cmpl	$0, -84(%rbp)
	jne	.LBB52_112
.LBB52_111:                             # %if.then318
	jmp	.LBB52_120
.LBB52_112:                             # %if.end319
                                        #   in Loop: Header=BB52_108 Depth=1
	cmpl	$1, -144(%rbp)
	jle	.LBB52_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB52_108 Depth=1
	cmpl	$0, -84(%rbp)
	je	.LBB52_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB52_108 Depth=1
	movl	-84(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	cmpl	$6, -28(%rbp)
	jle	.LBB52_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB52_108 Depth=1
	movl	$6, -28(%rbp)
.LBB52_116:                             # %if.end327
                                        #   in Loop: Header=BB52_108 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -84(%rbp)
	movl	-144(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -144(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB52_117:                             # %if.end341
                                        #   in Loop: Header=BB52_108 Depth=1
	jmp	.LBB52_118
.LBB52_118:                             # %for.inc342
                                        #   in Loop: Header=BB52_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_108
.LBB52_119:                             # %for.end344.loopexit
	jmp	.LBB52_120
.LBB52_120:                             # %for.end344
	jmp	.LBB52_121
.LBB52_121:                             # %if.end345
	movl	-40(%rbp), %eax
	movl	%eax, -164(%rbp)
.LBB52_122:                             # %return
	movl	-164(%rbp), %ebx
	cmpl	$1351045338, -172(%rbp) # imm = 0x508750DA
	jne	.LBB52_124
.LBB52_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_123
.Lfunc_end52:
	.size	writeCoeff4x4_CAVLC.11, .Lfunc_end52-writeCoeff4x4_CAVLC.11
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI52_0:
	.quad	.LBB52_2
	.quad	.LBB52_8
	.quad	.LBB52_9
	.quad	.LBB52_22
	.quad	.LBB52_22
	.quad	.LBB52_22
	.quad	.LBB52_10
	.quad	.LBB52_16
                                        # -- End function
	.text
	.globl	writeMotionVector8x8.12 # -- Begin function writeMotionVector8x8.12
	.p2align	4, 0x90
	.type	writeMotionVector8x8.12,@function
writeMotionVector8x8.12:                # @writeMotionVector8x8.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$1867758072, -92(%rbp)  # imm = 0x6F53B9F8
	movl	%edi, -100(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -88(%rbp)
	movl	%ecx, -96(%rbp)
	movl	%r8d, -80(%rbp)
	movl	%r9d, -44(%rbp)
	movl	$0, -64(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -128(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -136(%rbp)
	movl	-80(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB53_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB53_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB53_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -60(%rbp)
	jne	.LBB53_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB53_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB53_7
.LBB53_6:                               # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB53_7:                               # %cond.end
	movq	%rax, -112(%rbp)
.LBB53_8:                               # %if.end
	movl	-84(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB53_9:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_11 Depth 2
                                        #       Child Loop BB53_13 Depth 3
                                        #         Child Loop BB53_15 Depth 4
                                        #           Child Loop BB53_17 Depth 5
	movl	-16(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB53_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB53_9 Depth=1
	movl	-100(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB53_11:                              # %for.cond22
                                        #   Parent Loop BB53_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_13 Depth 3
                                        #         Child Loop BB53_15 Depth 4
                                        #           Child Loop BB53_17 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jge	.LBB53_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB53_11 Depth=2
	movl	$0, -20(%rbp)
.LBB53_13:                              # %for.cond25
                                        #   Parent Loop BB53_9 Depth=1
                                        #     Parent Loop BB53_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB53_15 Depth 4
                                        #           Child Loop BB53_17 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB53_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB53_13 Depth=3
	movq	-112(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-144(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB53_15:                              # %for.cond53
                                        #   Parent Loop BB53_9 Depth=1
                                        #     Parent Loop BB53_11 Depth=2
                                        #       Parent Loop BB53_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB53_17 Depth 5
	movl	-36(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB53_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB53_15 Depth=4
	movl	$0, -40(%rbp)
.LBB53_17:                              # %for.cond57
                                        #   Parent Loop BB53_9 Depth=1
                                        #     Parent Loop BB53_11 Depth=2
                                        #       Parent Loop BB53_13 Depth=3
                                        #         Parent Loop BB53_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-40(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB53_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB53_17 Depth=5
	movl	-72(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-40(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB53_17 Depth=5
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB53_17
.LBB53_20:                              # %for.end
                                        #   in Loop: Header=BB53_15 Depth=4
	jmp	.LBB53_21
.LBB53_21:                              # %for.inc70
                                        #   in Loop: Header=BB53_15 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB53_15
.LBB53_22:                              # %for.end72
                                        #   in Loop: Header=BB53_13 Depth=3
	movl	-72(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB53_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB53_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB53_25
.LBB53_24:                              # %if.else
                                        #   in Loop: Header=BB53_13 Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB53_25:                              # %if.end78
                                        #   in Loop: Header=BB53_13 Depth=3
	movq	-152(%rbp), %rax
	movq	24(%rax), %rax
	movq	-136(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-128(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB53_13 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB53_13
.LBB53_27:                              # %for.end90
                                        #   in Loop: Header=BB53_11 Depth=2
	jmp	.LBB53_28
.LBB53_28:                              # %for.inc91
                                        #   in Loop: Header=BB53_11 Depth=2
	movl	-68(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_11
.LBB53_29:                              # %for.end93
                                        #   in Loop: Header=BB53_9 Depth=1
	jmp	.LBB53_30
.LBB53_30:                              # %for.inc94
                                        #   in Loop: Header=BB53_9 Depth=1
	movl	-76(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_9
.LBB53_31:                              # %for.end96
	movl	-64(%rbp), %ebx
	cmpl	$1867758072, -92(%rbp)  # imm = 0x6F53B9F8
	jne	.LBB53_33
.LBB53_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_33:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_32
.Lfunc_end53:
	.size	writeMotionVector8x8.12, .Lfunc_end53-writeMotionVector8x8.12
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8.13 # -- Begin function writeMotionVector8x8.13
	.p2align	4, 0x90
	.type	writeMotionVector8x8.13,@function
writeMotionVector8x8.13:                # @writeMotionVector8x8.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$1465543751, -84(%rbp)  # imm = 0x575A6C47
	movl	%edi, -100(%rbp)
	movl	%esi, -88(%rbp)
	movl	%edx, -96(%rbp)
	movl	%ecx, -80(%rbp)
	movl	%r8d, -92(%rbp)
	movl	%r9d, -44(%rbp)
	movl	$0, -64(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -128(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -144(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB54_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB54_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB54_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -60(%rbp)
	jne	.LBB54_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB54_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB54_7
.LBB54_6:                               # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB54_7:                               # %cond.end
	movq	%rax, -112(%rbp)
.LBB54_8:                               # %if.end
	movl	-88(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB54_9:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_11 Depth 2
                                        #       Child Loop BB54_13 Depth 3
                                        #         Child Loop BB54_15 Depth 4
                                        #           Child Loop BB54_17 Depth 5
	movl	-16(%rbp), %eax
	cmpl	-80(%rbp), %eax
	jge	.LBB54_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB54_9 Depth=1
	movl	-100(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB54_11:                              # %for.cond22
                                        #   Parent Loop BB54_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_13 Depth 3
                                        #         Child Loop BB54_15 Depth 4
                                        #           Child Loop BB54_17 Depth 5
	movl	-20(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB54_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB54_11 Depth=2
	movl	$0, -12(%rbp)
.LBB54_13:                              # %for.cond25
                                        #   Parent Loop BB54_9 Depth=1
                                        #     Parent Loop BB54_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB54_15 Depth 4
                                        #           Child Loop BB54_17 Depth 5
	cmpl	$2, -12(%rbp)
	jge	.LBB54_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB54_13 Depth=3
	movq	-112(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-152(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB54_15:                              # %for.cond53
                                        #   Parent Loop BB54_9 Depth=1
                                        #     Parent Loop BB54_11 Depth=2
                                        #       Parent Loop BB54_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB54_17 Depth 5
	movl	-36(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB54_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB54_15 Depth=4
	movl	$0, -40(%rbp)
.LBB54_17:                              # %for.cond57
                                        #   Parent Loop BB54_9 Depth=1
                                        #     Parent Loop BB54_11 Depth=2
                                        #       Parent Loop BB54_13 Depth=3
                                        #         Parent Loop BB54_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-40(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB54_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB54_17 Depth=5
	movl	-68(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-40(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB54_17 Depth=5
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB54_17
.LBB54_20:                              # %for.end
                                        #   in Loop: Header=BB54_15 Depth=4
	jmp	.LBB54_21
.LBB54_21:                              # %for.inc70
                                        #   in Loop: Header=BB54_15 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB54_15
.LBB54_22:                              # %for.end72
                                        #   in Loop: Header=BB54_13 Depth=3
	movl	-68(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB54_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB54_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB54_25
.LBB54_24:                              # %if.else
                                        #   in Loop: Header=BB54_13 Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB54_25:                              # %if.end78
                                        #   in Loop: Header=BB54_13 Depth=3
	movq	-136(%rbp), %rax
	movq	24(%rax), %rax
	movq	-144(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-128(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB54_13 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_13
.LBB54_27:                              # %for.end90
                                        #   in Loop: Header=BB54_11 Depth=2
	jmp	.LBB54_28
.LBB54_28:                              # %for.inc91
                                        #   in Loop: Header=BB54_11 Depth=2
	movl	-72(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB54_11
.LBB54_29:                              # %for.end93
                                        #   in Loop: Header=BB54_9 Depth=1
	jmp	.LBB54_30
.LBB54_30:                              # %for.inc94
                                        #   in Loop: Header=BB54_9 Depth=1
	movl	-76(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_9
.LBB54_31:                              # %for.end96
	movl	-64(%rbp), %ebx
	cmpl	$1465543751, -84(%rbp)  # imm = 0x575A6C47
	jne	.LBB54_33
.LBB54_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_33:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_32
.Lfunc_end54:
	.size	writeMotionVector8x8.13, .Lfunc_end54-writeMotionVector8x8.13
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value.14         # -- Begin function MBType2Value.14
	.p2align	4, 0x90
	.type	MBType2Value.14,@function
MBType2Value.14:                        # @MBType2Value.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$2075682843, -36(%rbp)  # imm = 0x7BB8681B
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB55_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB55_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB55_4
.LBB55_3:                               # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB55_26
.LBB55_4:                               # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB55_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB55_26
.LBB55_6:                               # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB55_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB55_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB55_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB55_26
.LBB55_10:                              # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB55_26
.LBB55_11:                              # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_26
.LBB55_12:                              # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB55_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB55_26
.LBB55_14:                              # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB55_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB55_17
.LBB55_16:                              # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB55_26
.LBB55_17:                              # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB55_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_26
.LBB55_19:                              # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB55_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB55_26
.LBB55_21:                              # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB55_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_26
.LBB55_23:                              # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB55_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_26
.LBB55_25:                              # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB55_26:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$2075682843, -36(%rbp)  # imm = 0x7BB8681B
	jne	.LBB55_28
.LBB55_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_28:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_27
.Lfunc_end55:
	.size	MBType2Value.14, .Lfunc_end55-MBType2Value.14
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC.15 # -- Begin function writeLumaCoeff8x8_CABAC.15
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.15,@function
writeLumaCoeff8x8_CABAC.15:             # @writeLumaCoeff8x8_CABAC.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$1140846796, -60(%rbp)  # imm = 0x43FFF0CC
	movl	%edi, -28(%rbp)
	movl	%esi, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -56(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-56(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -72(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -80(%rbp)
	movq	-56(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -88(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -104(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -96(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB56_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB56_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB56_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB56_3:                               # %land.end
                                        #   in Loop: Header=BB56_1 Depth=1
	testb	$1, %al
	jne	.LBB56_4
	jmp	.LBB56_12
.LBB56_4:                               # %for.body
                                        #   in Loop: Header=BB56_1 Depth=1
	movq	-104(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB56_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB56_7
.LBB56_6:                               # %cond.false
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB56_7:                               # %cond.end
                                        #   in Loop: Header=BB56_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB56_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB56_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB56_10
.LBB56_9:                               # %if.else
                                        #   in Loop: Header=BB56_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
.LBB56_10:                              # %if.end
                                        #   in Loop: Header=BB56_1 Depth=1
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-88(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_1
.LBB56_12:                              # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$1140846796, -60(%rbp)  # imm = 0x43FFF0CC
	jne	.LBB56_14
.LBB56_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_14:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_13
.Lfunc_end56:
	.size	writeLumaCoeff8x8_CABAC.15, .Lfunc_end56-writeLumaCoeff8x8_CABAC.15
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer.16         # -- Begin function writeMBLayer.16
	.p2align	4, 0x90
	.type	writeMBLayer.16,@function
writeMBLayer.16:                        # @writeMBLayer.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$2011790604, -100(%rbp) # imm = 0x77E97D0C
	movl	%edi, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-64(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB57_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-64(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB57_3
.LBB57_2:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB57_3
.LBB57_3:                               # %cond.end
	movq	%rax, -128(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB57_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB57_9
.LBB57_5:                               # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB57_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB57_8
.LBB57_7:                               # %cond.false13
	movl	$1, %eax
	jmp	.LBB57_8
.LBB57_8:                               # %cond.end14
.LBB57_9:                               # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -68(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB57_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB57_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -68(%rbp)
	jmp	.LBB57_24
.LBB57_12:                              # %if.else
	movq	-128(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB57_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB57_17
	jmp	.LBB57_18
.LBB57_14:                              # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB57_16
# %bb.15:                               # %cond.true28
	movq	-128(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB57_18
	jmp	.LBB57_17
.LBB57_16:                              # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB57_17
	jmp	.LBB57_18
.LBB57_17:                              # %if.then32
	movl	$1, -60(%rbp)
.LBB57_18:                              # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB57_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB57_23
.LBB57_20:                              # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB57_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB57_22:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB57_23:                              # %if.end50
	jmp	.LBB57_24
.LBB57_24:                              # %if.end51
	jmp	.LBB57_25
.LBB57_25:                              # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB57_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB57_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB57_28:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-120(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB57_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB57_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB57_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB57_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB57_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB57_35
.LBB57_34:                              # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB57_35:                              # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB57_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB57_38
.LBB57_37:                              # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB57_38:                              # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB57_39:                              # %if.end96
	jmp	.LBB57_40
.LBB57_40:                              # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB57_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB57_43
.LBB57_42:                              # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB57_43:                              # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB57_89
.LBB57_44:                              # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB57_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB57_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB57_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -68(%rbp)
	je	.LBB57_49
.LBB57_48:                              # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -92(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-92(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB57_49:                              # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB57_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB57_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB57_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB57_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB57_55
.LBB57_54:                              # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB57_55:                              # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB57_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB57_58
.LBB57_57:                              # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB57_58:                              # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB57_59:                              # %if.end198
	jmp	.LBB57_60
.LBB57_60:                              # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB57_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB57_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB57_64
.LBB57_63:                              # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB57_64:                              # %if.end226
	jmp	.LBB57_88
.LBB57_65:                              # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB57_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB57_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB57_76
.LBB57_68:                              # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB57_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB57_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB57_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB57_72:                              # %if.end281
	jmp	.LBB57_73
.LBB57_73:                              # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB57_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB57_75:                              # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB57_87
.LBB57_76:                              # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -72(%rbp)
.LBB57_77:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_79 Depth 2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB57_77 Depth=1
	movl	$0, -44(%rbp)
.LBB57_79:                              # %for.cond310
                                        #   Parent Loop BB57_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB57_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB57_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB57_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB57_79
.LBB57_82:                              # %for.end
                                        #   in Loop: Header=BB57_77 Depth=1
	jmp	.LBB57_83
.LBB57_83:                              # %for.inc322
                                        #   in Loop: Header=BB57_77 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB57_77
.LBB57_84:                              # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB57_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB57_86:                              # %if.end345
	jmp	.LBB57_87
.LBB57_87:                              # %if.end346
	jmp	.LBB57_88
.LBB57_88:                              # %if.end347
	jmp	.LBB57_89
.LBB57_89:                              # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB57_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB57_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB57_92:                              # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB57_104
# %bb.93:                               # %if.then366
	movq	-120(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB57_94:                              # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB57_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB57_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB57_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB57_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB57_98
.LBB57_97:                              # %if.else380
                                        #   in Loop: Header=BB57_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB57_98:                              # %if.end382
                                        #   in Loop: Header=BB57_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB57_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB57_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB57_101
.LBB57_100:                             # %lor.rhs409
                                        #   in Loop: Header=BB57_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB57_101:                             # %lor.end415
                                        #   in Loop: Header=BB57_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB57_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB57_94
.LBB57_103:                             # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB57_104:                             # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB57_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB57_114
.LBB57_106:                             # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB57_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB57_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB57_110
.LBB57_109:                             # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB57_110:                             # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB57_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB57_113
.LBB57_112:                             # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB57_113:                             # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB57_114:                             # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB57_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB57_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_120
.LBB57_117:                             # %if.else480
	cmpl	$0, -96(%rbp)
	jne	.LBB57_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB57_119:                             # %if.end483
	jmp	.LBB57_120
.LBB57_120:                             # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB57_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB57_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB57_123:                             # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB57_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB57_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB57_129
.LBB57_126:                             # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB57_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB57_128:                             # %if.end516
	jmp	.LBB57_129
.LBB57_129:                             # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$2011790604, -100(%rbp) # imm = 0x77E97D0C
	jne	.LBB57_131
.LBB57_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_131:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_130
.Lfunc_end57:
	.size	writeMBLayer.16, .Lfunc_end57-writeMBLayer.16
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.17    # -- Begin function LumaPrediction4x4.17
	.p2align	4, 0x90
	.type	LumaPrediction4x4.17,@function
LumaPrediction4x4.17:                   # @LumaPrediction4x4.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$637863892, -104(%rbp)  # imm = 0x260507D4
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -76(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -72(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB58_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB58_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB58_6
.LBB58_3:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB58_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB58_5:                               # %land.end
.LBB58_6:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB58_9
# %bb.7:                                # %land.lhs.true11
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB58_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB58_10
.LBB58_9:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB58_10
.LBB58_10:                              # %cond.end
	movl	%ecx, -56(%rbp)
	movq	-88(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB58_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB58_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB58_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -24(%rbp)
	jne	.LBB58_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -60(%rbp)
	jne	.LBB58_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -76(%rbp)
	jne	.LBB58_20
# %bb.16:                               # %if.then
	movq	-88(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB58_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB58_19
.LBB58_18:                              # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB58_19:                              # %cond.end38
	movq	%rax, -96(%rbp)
.LBB58_20:                              # %if.end
	cmpl	$0, -24(%rbp)
	je	.LBB58_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -24(%rbp)
	jne	.LBB58_23
.LBB58_22:                              # %if.then45
	movl	-68(%rbp), %esi
	movl	-64(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-56(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB58_23:                              # %if.end58
	cmpl	$1, -24(%rbp)
	je	.LBB58_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -24(%rbp)
	jne	.LBB58_26
.LBB58_25:                              # %if.then64
	movl	-68(%rbp), %esi
	movl	-64(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB58_26:                              # %if.end77
	cmpl	$0, -100(%rbp)
	je	.LBB58_58
# %bb.27:                               # %if.then79
	cmpl	$2, -24(%rbp)
	jne	.LBB58_37
# %bb.28:                               # %if.then82
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB58_29:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_31 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB58_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB58_29 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB58_31:                              # %for.cond85
                                        #   Parent Loop BB58_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB58_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB58_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB58_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_31
.LBB58_34:                              # %for.end
                                        #   in Loop: Header=BB58_29 Depth=1
	jmp	.LBB58_35
.LBB58_35:                              # %for.inc125
                                        #   in Loop: Header=BB58_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_29
.LBB58_36:                              # %for.end127
	jmp	.LBB58_57
.LBB58_37:                              # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB58_47
# %bb.38:                               # %if.then130
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB58_39:                              # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_41 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB58_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB58_39 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB58_41:                              # %for.cond135
                                        #   Parent Loop BB58_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB58_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB58_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB58_41 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_41
.LBB58_44:                              # %for.end161
                                        #   in Loop: Header=BB58_39 Depth=1
	jmp	.LBB58_45
.LBB58_45:                              # %for.inc162
                                        #   in Loop: Header=BB58_39 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_39
.LBB58_46:                              # %for.end164
	jmp	.LBB58_56
.LBB58_47:                              # %if.else165
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB58_48:                              # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_50 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB58_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB58_48 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB58_50:                              # %for.cond170
                                        #   Parent Loop BB58_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB58_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB58_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB58_50 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_50
.LBB58_53:                              # %for.end196
                                        #   in Loop: Header=BB58_48 Depth=1
	jmp	.LBB58_54
.LBB58_54:                              # %for.inc197
                                        #   in Loop: Header=BB58_48 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_48
.LBB58_55:                              # %for.end199
	jmp	.LBB58_56
.LBB58_56:                              # %if.end200
	jmp	.LBB58_57
.LBB58_57:                              # %if.end201
	jmp	.LBB58_89
.LBB58_58:                              # %if.else202
	cmpl	$2, -24(%rbp)
	jne	.LBB58_68
# %bb.59:                               # %if.then205
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB58_60:                              # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_62 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB58_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB58_60 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB58_62:                              # %for.cond210
                                        #   Parent Loop BB58_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB58_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB58_62 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB58_62 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_62
.LBB58_65:                              # %for.end226
                                        #   in Loop: Header=BB58_60 Depth=1
	jmp	.LBB58_66
.LBB58_66:                              # %for.inc227
                                        #   in Loop: Header=BB58_60 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_60
.LBB58_67:                              # %for.end229
	jmp	.LBB58_88
.LBB58_68:                              # %if.else230
	cmpl	$0, -24(%rbp)
	jne	.LBB58_78
# %bb.69:                               # %if.then233
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB58_70:                              # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_72 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB58_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB58_70 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB58_72:                              # %for.cond238
                                        #   Parent Loop BB58_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB58_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB58_72 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB58_72 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_72
.LBB58_75:                              # %for.end251
                                        #   in Loop: Header=BB58_70 Depth=1
	jmp	.LBB58_76
.LBB58_76:                              # %for.inc252
                                        #   in Loop: Header=BB58_70 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_70
.LBB58_77:                              # %for.end254
	jmp	.LBB58_87
.LBB58_78:                              # %if.else255
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB58_79:                              # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_81 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB58_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB58_79 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB58_81:                              # %for.cond260
                                        #   Parent Loop BB58_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB58_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB58_81 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB58_81 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_81
.LBB58_84:                              # %for.end273
                                        #   in Loop: Header=BB58_79 Depth=1
	jmp	.LBB58_85
.LBB58_85:                              # %for.inc274
                                        #   in Loop: Header=BB58_79 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_79
.LBB58_86:                              # %for.end276
	jmp	.LBB58_87
.LBB58_87:                              # %if.end277
	jmp	.LBB58_88
.LBB58_88:                              # %if.end278
	jmp	.LBB58_89
.LBB58_89:                              # %if.end279
	cmpl	$637863892, -104(%rbp)  # imm = 0x260507D4
	jne	.LBB58_91
.LBB58_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_91:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_90
.Lfunc_end58:
	.size	LumaPrediction4x4.17, .Lfunc_end58-LumaPrediction4x4.17
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.18 # -- Begin function OneComponentLumaPrediction4x4.18
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.18,@function
OneComponentLumaPrediction4x4.18:       # @OneComponentLumaPrediction4x4.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1027447029, -84(%rbp)  # imm = 0x3D3D98F5
	movq	%rdi, -16(%rbp)
	movl	%esi, -92(%rbp)
	movl	%edx, -88(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-88(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-92(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -32(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$1027447029, -84(%rbp)  # imm = 0x3D3D98F5
	jne	.LBB59_2
.LBB59_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_1
.Lfunc_end59:
	.size	OneComponentLumaPrediction4x4.18, .Lfunc_end59-OneComponentLumaPrediction4x4.18
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction.19 # -- Begin function IntraChromaPrediction.19
	.p2align	4, 0x90
	.type	IntraChromaPrediction.19,@function
IntraChromaPrediction.19:               # @IntraChromaPrediction.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$1390482451, -164(%rbp) # imm = 0x52E11413
	movq	%rdi, -192(%rbp)
	movq	%rsi, -176(%rbp)
	movq	%rdx, -184(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -124(%rbp)
	movl	$0, -132(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -128(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB60_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	-124(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_1
.LBB60_4:                               # %for.end
	movl	-124(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB60_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB60_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB60_8
.LBB60_7:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB60_8
.LBB60_8:                               # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB60_9:                               # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB60_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB60_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB60_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB60_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB60_13
.LBB60_12:                              # %cond.false32
                                        #   in Loop: Header=BB60_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB60_13
.LBB60_13:                              # %cond.end33
                                        #   in Loop: Header=BB60_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB60_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_9
.LBB60_15:                              # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB60_16:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB60_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB60_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB60_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB60_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB60_20
.LBB60_19:                              # %cond.false57
                                        #   in Loop: Header=BB60_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB60_20
.LBB60_20:                              # %cond.end58
                                        #   in Loop: Header=BB60_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB60_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_16
.LBB60_22:                              # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB60_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB60_25
.LBB60_24:                              # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB60_25
.LBB60_25:                              # %cond.end75
	movl	%eax, -96(%rbp)
.LBB60_26:                              # %if.end
	cmpq	$0, -192(%rbp)
	je	.LBB60_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB60_28:                              # %if.end79
	cmpq	$0, -176(%rbp)
	je	.LBB60_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB60_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB60_31:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB60_32:                              # %if.end86
	cmpq	$0, -184(%rbp)
	je	.LBB60_34
# %bb.33:                               # %if.then88
	movl	-96(%rbp), %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB60_34:                              # %if.end89
	movl	$0, -24(%rbp)
.LBB60_35:                              # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_37 Depth 2
                                        #       Child Loop BB60_39 Depth 3
                                        #         Child Loop BB60_104 Depth 4
                                        #         Child Loop BB60_110 Depth 4
                                        #         Child Loop BB60_85 Depth 4
                                        #         Child Loop BB60_91 Depth 4
                                        #         Child Loop BB60_66 Depth 4
                                        #         Child Loop BB60_72 Depth 4
                                        #         Child Loop BB60_44 Depth 4
                                        #         Child Loop BB60_50 Depth 4
                                        #         Child Loop BB60_125 Depth 4
                                        #           Child Loop BB60_127 Depth 5
                                        #     Child Loop BB60_138 Depth 2
                                        #     Child Loop BB60_142 Depth 2
                                        #       Child Loop BB60_144 Depth 3
                                        #     Child Loop BB60_153 Depth 2
                                        #     Child Loop BB60_157 Depth 2
                                        #       Child Loop BB60_159 Depth 3
                                        #     Child Loop BB60_170 Depth 2
                                        #     Child Loop BB60_174 Depth 2
                                        #     Child Loop BB60_178 Depth 2
                                        #       Child Loop BB60_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB60_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB60_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -84(%rbp)
.LBB60_37:                              # %for.cond95
                                        #   Parent Loop BB60_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_39 Depth 3
                                        #         Child Loop BB60_104 Depth 4
                                        #         Child Loop BB60_110 Depth 4
                                        #         Child Loop BB60_85 Depth 4
                                        #         Child Loop BB60_91 Depth 4
                                        #         Child Loop BB60_66 Depth 4
                                        #         Child Loop BB60_72 Depth 4
                                        #         Child Loop BB60_44 Depth 4
                                        #         Child Loop BB60_50 Depth 4
                                        #         Child Loop BB60_125 Depth 4
                                        #           Child Loop BB60_127 Depth 5
	movl	-84(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB60_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB60_37 Depth=2
	movl	$0, -88(%rbp)
.LBB60_39:                              # %for.cond99
                                        #   Parent Loop BB60_35 Depth=1
                                        #     Parent Loop BB60_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB60_104 Depth 4
                                        #         Child Loop BB60_110 Depth 4
                                        #         Child Loop BB60_85 Depth 4
                                        #         Child Loop BB60_91 Depth 4
                                        #         Child Loop BB60_66 Depth 4
                                        #         Child Loop BB60_72 Depth 4
                                        #         Child Loop BB60_44 Depth 4
                                        #         Child Loop BB60_50 Depth 4
                                        #         Child Loop BB60_125 Depth 4
                                        #           Child Loop BB60_127 Depth 5
	cmpl	$4, -88(%rbp)
	jge	.LBB60_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB60_39 Depth=3
	movslq	-128(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movslq	-128(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movslq	-128(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-84(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-88(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB60_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB60_39 Depth=3
	movq	.LJTI60_0(,%rax,8), %rax
	jmpq	*%rax
.LBB60_42:                              # %sw.bb
                                        #   in Loop: Header=BB60_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB60_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB60_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB60_44:                              # %for.cond124
                                        #   Parent Loop BB60_35 Depth=1
                                        #     Parent Loop BB60_37 Depth=2
                                        #       Parent Loop BB60_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB60_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB60_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_44
.LBB60_47:                              # %for.end138
                                        #   in Loop: Header=BB60_39 Depth=3
	jmp	.LBB60_48
.LBB60_48:                              # %if.end139
                                        #   in Loop: Header=BB60_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB60_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB60_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB60_50:                              # %for.cond143
                                        #   Parent Loop BB60_35 Depth=1
                                        #     Parent Loop BB60_37 Depth=2
                                        #       Parent Loop BB60_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB60_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB60_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_50
.LBB60_53:                              # %for.end162
                                        #   in Loop: Header=BB60_39 Depth=3
	jmp	.LBB60_54
.LBB60_54:                              # %if.end163
                                        #   in Loop: Header=BB60_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB60_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB60_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB60_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB60_39 Depth=3
	movl	-64(%rbp), %eax
	addl	-72(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB60_63
.LBB60_57:                              # %if.else
                                        #   in Loop: Header=BB60_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB60_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB60_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB60_62
.LBB60_59:                              # %if.else174
                                        #   in Loop: Header=BB60_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB60_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB60_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB60_61:                              # %if.end180
                                        #   in Loop: Header=BB60_39 Depth=3
	jmp	.LBB60_62
.LBB60_62:                              # %if.end181
                                        #   in Loop: Header=BB60_39 Depth=3
	jmp	.LBB60_63
.LBB60_63:                              # %if.end182
                                        #   in Loop: Header=BB60_39 Depth=3
	jmp	.LBB60_124
.LBB60_64:                              # %sw.bb183
                                        #   in Loop: Header=BB60_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB60_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB60_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB60_66:                              # %for.cond186
                                        #   Parent Loop BB60_35 Depth=1
                                        #     Parent Loop BB60_37 Depth=2
                                        #       Parent Loop BB60_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB60_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB60_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_66
.LBB60_69:                              # %for.end202
                                        #   in Loop: Header=BB60_39 Depth=3
	jmp	.LBB60_77
.LBB60_70:                              # %if.else203
                                        #   in Loop: Header=BB60_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB60_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB60_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB60_72:                              # %for.cond207
                                        #   Parent Loop BB60_35 Depth=1
                                        #     Parent Loop BB60_37 Depth=2
                                        #       Parent Loop BB60_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB60_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB60_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_72
.LBB60_75:                              # %for.end226
                                        #   in Loop: Header=BB60_39 Depth=3
	jmp	.LBB60_76
.LBB60_76:                              # %if.end227
                                        #   in Loop: Header=BB60_39 Depth=3
	jmp	.LBB60_77
.LBB60_77:                              # %if.end228
                                        #   in Loop: Header=BB60_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB60_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB60_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB60_82
.LBB60_79:                              # %if.else233
                                        #   in Loop: Header=BB60_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB60_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB60_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB60_81:                              # %if.end239
                                        #   in Loop: Header=BB60_39 Depth=3
	jmp	.LBB60_82
.LBB60_82:                              # %if.end240
                                        #   in Loop: Header=BB60_39 Depth=3
	jmp	.LBB60_124
.LBB60_83:                              # %sw.bb241
                                        #   in Loop: Header=BB60_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB60_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB60_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB60_85:                              # %for.cond245
                                        #   Parent Loop BB60_35 Depth=1
                                        #     Parent Loop BB60_37 Depth=2
                                        #       Parent Loop BB60_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB60_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB60_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_85
.LBB60_88:                              # %for.end264
                                        #   in Loop: Header=BB60_39 Depth=3
	jmp	.LBB60_96
.LBB60_89:                              # %if.else265
                                        #   in Loop: Header=BB60_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB60_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB60_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB60_91:                              # %for.cond268
                                        #   Parent Loop BB60_35 Depth=1
                                        #     Parent Loop BB60_37 Depth=2
                                        #       Parent Loop BB60_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB60_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB60_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_91
.LBB60_94:                              # %for.end284
                                        #   in Loop: Header=BB60_39 Depth=3
	jmp	.LBB60_95
.LBB60_95:                              # %if.end285
                                        #   in Loop: Header=BB60_39 Depth=3
	jmp	.LBB60_96
.LBB60_96:                              # %if.end286
                                        #   in Loop: Header=BB60_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB60_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB60_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB60_101
.LBB60_98:                              # %if.else292
                                        #   in Loop: Header=BB60_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB60_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB60_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB60_100:                             # %if.end297
                                        #   in Loop: Header=BB60_39 Depth=3
	jmp	.LBB60_101
.LBB60_101:                             # %if.end298
                                        #   in Loop: Header=BB60_39 Depth=3
	jmp	.LBB60_124
.LBB60_102:                             # %sw.bb299
                                        #   in Loop: Header=BB60_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB60_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB60_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB60_104:                             # %for.cond302
                                        #   Parent Loop BB60_35 Depth=1
                                        #     Parent Loop BB60_37 Depth=2
                                        #       Parent Loop BB60_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB60_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB60_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_104
.LBB60_107:                             # %for.end318
                                        #   in Loop: Header=BB60_39 Depth=3
	jmp	.LBB60_108
.LBB60_108:                             # %if.end319
                                        #   in Loop: Header=BB60_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB60_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB60_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB60_110:                             # %for.cond323
                                        #   Parent Loop BB60_35 Depth=1
                                        #     Parent Loop BB60_37 Depth=2
                                        #       Parent Loop BB60_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB60_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB60_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_110
.LBB60_113:                             # %for.end342
                                        #   in Loop: Header=BB60_39 Depth=3
	jmp	.LBB60_114
.LBB60_114:                             # %if.end343
                                        #   in Loop: Header=BB60_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB60_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB60_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB60_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB60_39 Depth=3
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB60_123
.LBB60_117:                             # %if.else352
                                        #   in Loop: Header=BB60_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB60_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB60_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB60_122
.LBB60_119:                             # %if.else357
                                        #   in Loop: Header=BB60_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB60_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB60_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB60_121:                             # %if.end363
                                        #   in Loop: Header=BB60_39 Depth=3
	jmp	.LBB60_122
.LBB60_122:                             # %if.end364
                                        #   in Loop: Header=BB60_39 Depth=3
	jmp	.LBB60_123
.LBB60_123:                             # %if.end365
                                        #   in Loop: Header=BB60_39 Depth=3
	jmp	.LBB60_124
.LBB60_124:                             # %sw.epilog
                                        #   in Loop: Header=BB60_39 Depth=3
	movl	-40(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB60_125:                             # %for.cond366
                                        #   Parent Loop BB60_35 Depth=1
                                        #     Parent Loop BB60_37 Depth=2
                                        #       Parent Loop BB60_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB60_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB60_125 Depth=4
	movl	-48(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB60_127:                             # %for.cond371
                                        #   Parent Loop BB60_35 Depth=1
                                        #     Parent Loop BB60_37 Depth=2
                                        #       Parent Loop BB60_39 Depth=3
                                        #         Parent Loop BB60_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB60_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB60_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_127
.LBB60_130:                             # %for.end386
                                        #   in Loop: Header=BB60_125 Depth=4
	jmp	.LBB60_131
.LBB60_131:                             # %for.inc387
                                        #   in Loop: Header=BB60_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_125
.LBB60_132:                             # %for.end389
                                        #   in Loop: Header=BB60_39 Depth=3
	jmp	.LBB60_133
.LBB60_133:                             # %for.inc390
                                        #   in Loop: Header=BB60_39 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB60_39
.LBB60_134:                             # %for.end392
                                        #   in Loop: Header=BB60_37 Depth=2
	jmp	.LBB60_135
.LBB60_135:                             # %for.inc393
                                        #   in Loop: Header=BB60_37 Depth=2
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB60_37
.LBB60_136:                             # %for.end395
                                        #   in Loop: Header=BB60_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB60_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB60_35 Depth=1
	movl	$0, -4(%rbp)
.LBB60_138:                             # %for.cond398
                                        #   Parent Loop BB60_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB60_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB60_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB60_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_138
.LBB60_141:                             # %for.end414
                                        #   in Loop: Header=BB60_35 Depth=1
	movl	$0, -4(%rbp)
.LBB60_142:                             # %for.cond415
                                        #   Parent Loop BB60_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB60_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB60_142 Depth=2
	movl	$0, -8(%rbp)
.LBB60_144:                             # %for.cond419
                                        #   Parent Loop BB60_35 Depth=1
                                        #     Parent Loop BB60_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB60_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB60_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB60_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_144
.LBB60_147:                             # %for.end436
                                        #   in Loop: Header=BB60_142 Depth=2
	jmp	.LBB60_148
.LBB60_148:                             # %for.inc437
                                        #   in Loop: Header=BB60_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_142
.LBB60_149:                             # %for.end439
                                        #   in Loop: Header=BB60_35 Depth=1
	jmp	.LBB60_150
.LBB60_150:                             # %if.end440
                                        #   in Loop: Header=BB60_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB60_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB60_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB60_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB60_35 Depth=1
	movl	$0, -4(%rbp)
.LBB60_153:                             # %for.cond447
                                        #   Parent Loop BB60_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB60_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB60_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB60_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_153
.LBB60_156:                             # %for.end468
                                        #   in Loop: Header=BB60_35 Depth=1
	movl	$0, -4(%rbp)
.LBB60_157:                             # %for.cond469
                                        #   Parent Loop BB60_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB60_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB60_157 Depth=2
	movl	$0, -8(%rbp)
.LBB60_159:                             # %for.cond473
                                        #   Parent Loop BB60_35 Depth=1
                                        #     Parent Loop BB60_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB60_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB60_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB60_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_159
.LBB60_162:                             # %for.end490
                                        #   in Loop: Header=BB60_157 Depth=2
	jmp	.LBB60_163
.LBB60_163:                             # %for.inc491
                                        #   in Loop: Header=BB60_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_157
.LBB60_164:                             # %for.end493
                                        #   in Loop: Header=BB60_35 Depth=1
	jmp	.LBB60_165
.LBB60_165:                             # %if.end494
                                        #   in Loop: Header=BB60_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB60_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB60_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB60_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB60_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB60_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB60_35 Depth=1
	cmpl	$0, -96(%rbp)
	je	.LBB60_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB60_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -4(%rbp)
.LBB60_170:                             # %for.cond519
                                        #   Parent Loop BB60_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB60_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB60_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-120(%rbp), %ecx
	movl	%ecx, -120(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB60_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_170
.LBB60_173:                             # %for.end540
                                        #   in Loop: Header=BB60_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -4(%rbp)
.LBB60_174:                             # %for.cond556
                                        #   Parent Loop BB60_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB60_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB60_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-116(%rbp), %ecx
	movl	%ecx, -116(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB60_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_174
.LBB60_177:                             # %for.end577
                                        #   in Loop: Header=BB60_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-120(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -92(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-116(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -104(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-336(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-272(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -8(%rbp)
.LBB60_178:                             # %for.cond606
                                        #   Parent Loop BB60_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB60_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB60_178 Depth=2
	movl	$0, -4(%rbp)
.LBB60_180:                             # %for.cond610
                                        #   Parent Loop BB60_35 Depth=1
                                        #     Parent Loop BB60_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB60_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB60_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-100(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-92(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-104(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB60_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB60_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB60_184
.LBB60_183:                             # %cond.false630
                                        #   in Loop: Header=BB60_180 Depth=3
	movl	-100(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-92(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-104(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB60_184:                             # %cond.end643
                                        #   in Loop: Header=BB60_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB60_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB60_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB60_190
.LBB60_186:                             # %cond.false648
                                        #   in Loop: Header=BB60_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-100(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-92(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-104(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB60_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB60_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB60_189
.LBB60_188:                             # %cond.false666
                                        #   in Loop: Header=BB60_180 Depth=3
	movl	-100(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-92(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-104(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB60_189:                             # %cond.end679
                                        #   in Loop: Header=BB60_180 Depth=3
.LBB60_190:                             # %cond.end681
                                        #   in Loop: Header=BB60_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB60_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_180
.LBB60_192:                             # %for.end694
                                        #   in Loop: Header=BB60_178 Depth=2
	jmp	.LBB60_193
.LBB60_193:                             # %for.inc695
                                        #   in Loop: Header=BB60_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_178
.LBB60_194:                             # %for.end697
                                        #   in Loop: Header=BB60_35 Depth=1
	jmp	.LBB60_195
.LBB60_195:                             # %if.end698
                                        #   in Loop: Header=BB60_35 Depth=1
	jmp	.LBB60_196
.LBB60_196:                             # %for.inc699
                                        #   in Loop: Header=BB60_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB60_35
.LBB60_197:                             # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB60_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -136(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB60_199:                             # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB60_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB60_199 Depth=1
	movl	-124(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB60_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_199
.LBB60_202:                             # %for.end712
	movl	$0, -44(%rbp)
.LBB60_203:                             # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_219 Depth 2
                                        #       Child Loop BB60_221 Depth 3
                                        #         Child Loop BB60_223 Depth 4
                                        #           Child Loop BB60_225 Depth 5
                                        #             Child Loop BB60_227 Depth 6
	cmpl	$3, -44(%rbp)
	jg	.LBB60_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB60_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB60_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB60_203 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB60_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB60_203 Depth=1
	jmp	.LBB60_241
.LBB60_207:                             # %if.end723
                                        #   in Loop: Header=BB60_203 Depth=1
	cmpl	$2, -44(%rbp)
	jne	.LBB60_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB60_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB60_217
.LBB60_209:                             # %lor.lhs.false
                                        #   in Loop: Header=BB60_203 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB60_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB60_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB60_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB60_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB60_217
.LBB60_212:                             # %lor.lhs.false736
                                        #   in Loop: Header=BB60_203 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB60_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB60_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB60_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB60_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB60_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB60_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB60_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB60_203 Depth=1
	cmpl	$0, -96(%rbp)
	jne	.LBB60_218
.LBB60_217:                             # %if.then749
                                        #   in Loop: Header=BB60_203 Depth=1
	jmp	.LBB60_241
.LBB60_218:                             # %if.end750
                                        #   in Loop: Header=BB60_203 Depth=1
	movl	$0, -108(%rbp)
	movl	$0, -24(%rbp)
.LBB60_219:                             # %for.cond751
                                        #   Parent Loop BB60_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_221 Depth 3
                                        #         Child Loop BB60_223 Depth 4
                                        #           Child Loop BB60_225 Depth 5
                                        #             Child Loop BB60_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB60_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB60_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -40(%rbp)
.LBB60_221:                             # %for.cond757
                                        #   Parent Loop BB60_203 Depth=1
                                        #     Parent Loop BB60_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB60_223 Depth 4
                                        #           Child Loop BB60_225 Depth 5
                                        #             Child Loop BB60_227 Depth 6
	movl	-40(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB60_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB60_221 Depth=3
	movl	$0, -48(%rbp)
.LBB60_223:                             # %for.cond761
                                        #   Parent Loop BB60_203 Depth=1
                                        #     Parent Loop BB60_219 Depth=2
                                        #       Parent Loop BB60_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB60_225 Depth 5
                                        #             Child Loop BB60_227 Depth 6
	movl	-48(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB60_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB60_223 Depth=4
	movl	$0, -112(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB60_225:                             # %for.cond765
                                        #   Parent Loop BB60_203 Depth=1
                                        #     Parent Loop BB60_219 Depth=2
                                        #       Parent Loop BB60_221 Depth=3
                                        #         Parent Loop BB60_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB60_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB60_225 Depth=5
	movl	-48(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB60_227:                             # %for.cond770
                                        #   Parent Loop BB60_203 Depth=1
                                        #     Parent Loop BB60_219 Depth=2
                                        #       Parent Loop BB60_221 Depth=3
                                        #         Parent Loop BB60_223 Depth=4
                                        #           Parent Loop BB60_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB60_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-112(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB60_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB60_227
.LBB60_230:                             # %for.end803
                                        #   in Loop: Header=BB60_225 Depth=5
	jmp	.LBB60_231
.LBB60_231:                             # %for.inc804
                                        #   in Loop: Header=BB60_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_225
.LBB60_232:                             # %for.end806
                                        #   in Loop: Header=BB60_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB60_223 Depth=4
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB60_223
.LBB60_234:                             # %for.end810
                                        #   in Loop: Header=BB60_221 Depth=3
	jmp	.LBB60_235
.LBB60_235:                             # %for.inc811
                                        #   in Loop: Header=BB60_221 Depth=3
	movl	-40(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB60_221
.LBB60_236:                             # %for.end813
                                        #   in Loop: Header=BB60_219 Depth=2
	jmp	.LBB60_237
.LBB60_237:                             # %for.inc814
                                        #   in Loop: Header=BB60_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB60_219
.LBB60_238:                             # %for.end816
                                        #   in Loop: Header=BB60_203 Depth=1
	movl	-108(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB60_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB60_203 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB60_240:                             # %if.end820
                                        #   in Loop: Header=BB60_203 Depth=1
	jmp	.LBB60_241
.LBB60_241:                             # %for.inc821
                                        #   in Loop: Header=BB60_203 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB60_203
.LBB60_242:                             # %for.end823
	movl	-132(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB60_243:                             # %if.end824
	cmpl	$1390482451, -164(%rbp) # imm = 0x52E11413
	jne	.LBB60_245
.LBB60_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_245:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_244
.Lfunc_end60:
	.size	IntraChromaPrediction.19, .Lfunc_end60-IntraChromaPrediction.19
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI60_0:
	.quad	.LBB60_42
	.quad	.LBB60_64
	.quad	.LBB60_83
	.quad	.LBB60_102
                                        # -- End function
	.text
	.globl	writeLumaCoeff4x4_CABAC.20 # -- Begin function writeLumaCoeff4x4_CABAC.20
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.20,@function
writeLumaCoeff4x4_CABAC.20:             # @writeLumaCoeff4x4_CABAC.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1444237560, -52(%rbp)  # imm = 0x561550F8
	movl	%edi, -28(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -72(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -96(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB61_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB61_3
.LBB61_2:                               # %cond.false
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB61_3:                               # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB61_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB61_6
.LBB61_5:                               # %cond.false26
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB61_6:                               # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -16(%rbp)
.LBB61_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -16(%rbp)
	jg	.LBB61_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB61_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB61_9:                               # %land.end
                                        #   in Loop: Header=BB61_7 Depth=1
	testb	$1, %al
	jne	.LBB61_10
	jmp	.LBB61_15
.LBB61_10:                              # %for.body
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-88(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-96(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -16(%rbp)
	jne	.LBB61_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB61_13
.LBB61_12:                              # %cond.false40
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB61_13:                              # %cond.end43
                                        #   in Loop: Header=BB61_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB61_7 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_7
.LBB61_15:                              # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$1444237560, -52(%rbp)  # imm = 0x561550F8
	jne	.LBB61_17
.LBB61_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_17:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_16
.Lfunc_end61:
	.size	writeLumaCoeff4x4_CABAC.20, .Lfunc_end61-writeLumaCoeff4x4_CABAC.20
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef.21              # -- Begin function ZeroRef.21
	.p2align	4, 0x90
	.type	ZeroRef.21,@function
ZeroRef.21:                             # @ZeroRef.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1625273433, -24(%rbp)  # imm = 0x60DFB459
	movq	%rdi, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB62_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB62_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	$0, -16(%rbp)
.LBB62_3:                               # %for.cond1
                                        #   Parent Loop BB62_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB62_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB62_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB62_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB62_11
.LBB62_6:                               # %if.end
                                        #   in Loop: Header=BB62_3 Depth=2
	jmp	.LBB62_7
.LBB62_7:                               # %for.inc
                                        #   in Loop: Header=BB62_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_3
.LBB62_8:                               # %for.end
                                        #   in Loop: Header=BB62_1 Depth=1
	jmp	.LBB62_9
.LBB62_9:                               # %for.inc10
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_1
.LBB62_10:                              # %for.end12
	movl	$1, -20(%rbp)
.LBB62_11:                              # %return
	movl	-20(%rbp), %ebx
	cmpl	$1625273433, -24(%rbp)  # imm = 0x60DFB459
	jne	.LBB62_13
.LBB62_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_12
.Lfunc_end62:
	.size	ZeroRef.21, .Lfunc_end62-ZeroRef.21
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.22    # -- Begin function TransformDecision.22
	.p2align	4, 0x90
	.type	TransformDecision.22,@function
TransformDecision.22:                   # @TransformDecision.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$1998701160, -80(%rbp)  # imm = 0x7721C268
	movl	%edi, -48(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$-1, -48(%rbp)
	jne	.LBB63_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -64(%rbp)
	jmp	.LBB63_3
.LBB63_2:                               # %if.else
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
.LBB63_3:                               # %if.end
	jmp	.LBB63_4
.LBB63_4:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_6 Depth 2
                                        #       Child Loop BB63_8 Depth 3
                                        #         Child Loop BB63_10 Depth 4
                                        #           Child Loop BB63_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB63_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB63_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-54(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	leaq	-88(%rbp), %rcx
	leaq	-50(%rbp), %r8
	leaq	-52(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -60(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -68(%rbp)
	movl	$0, -32(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB63_6:                               # %for.cond3
                                        #   Parent Loop BB63_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_8 Depth 3
                                        #         Child Loop BB63_10 Depth 4
                                        #           Child Loop BB63_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB63_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB63_8:                               # %for.cond8
                                        #   Parent Loop BB63_4 Depth=1
                                        #     Parent Loop BB63_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB63_10 Depth 4
                                        #           Child Loop BB63_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB63_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-16(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-54(%rbp), %edx
	movl	-72(%rbp), %ecx
	movl	-88(%rbp), %r8d
	movw	-50(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-52(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-32(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -28(%rbp)
.LBB63_10:                              # %for.cond13
                                        #   Parent Loop BB63_4 Depth=1
                                        #     Parent Loop BB63_6 Depth=2
                                        #       Parent Loop BB63_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB63_12 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB63_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB63_10 Depth=4
	movl	$0, -24(%rbp)
.LBB63_12:                              # %for.cond17
                                        #   Parent Loop BB63_4 Depth=1
                                        #     Parent Loop BB63_6 Depth=2
                                        #       Parent Loop BB63_8 Depth=3
                                        #         Parent Loop BB63_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB63_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB63_12 Depth=5
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-76(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB63_12 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB63_12
.LBB63_15:                              # %for.end
                                        #   in Loop: Header=BB63_10 Depth=4
	jmp	.LBB63_16
.LBB63_16:                              # %for.inc38
                                        #   in Loop: Header=BB63_10 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB63_10
.LBB63_17:                              # %for.end40
                                        #   in Loop: Header=BB63_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB63_8 Depth=3
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_8
.LBB63_19:                              # %for.end44
                                        #   in Loop: Header=BB63_6 Depth=2
	jmp	.LBB63_20
.LBB63_20:                              # %for.inc45
                                        #   in Loop: Header=BB63_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB63_6
.LBB63_21:                              # %for.end47
                                        #   in Loop: Header=BB63_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB63_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_4
.LBB63_23:                              # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB63_25
# %bb.24:                               # %if.then56
	movl	$1, -44(%rbp)
	jmp	.LBB63_28
.LBB63_25:                              # %if.else57
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB63_27
# %bb.26:                               # %if.then60
	movl	$1, -44(%rbp)
	jmp	.LBB63_28
.LBB63_27:                              # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -44(%rbp)
.LBB63_28:                              # %return
	movl	-44(%rbp), %ebx
	cmpl	$1998701160, -80(%rbp)  # imm = 0x7721C268
	jne	.LBB63_30
.LBB63_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_30:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_29
.Lfunc_end63:
	.size	TransformDecision.22, .Lfunc_end63-TransformDecision.22
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC.23 # -- Begin function writeLumaCoeff8x8_CABAC.23
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.23,@function
writeLumaCoeff8x8_CABAC.23:             # @writeLumaCoeff8x8_CABAC.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$1178472931, -60(%rbp)  # imm = 0x463E11E3
	movl	%edi, -28(%rbp)
	movl	%esi, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -56(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-56(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -72(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -80(%rbp)
	movq	-56(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -104(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -88(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -96(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB64_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB64_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB64_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB64_3:                               # %land.end
                                        #   in Loop: Header=BB64_1 Depth=1
	testb	$1, %al
	jne	.LBB64_4
	jmp	.LBB64_12
.LBB64_4:                               # %for.body
                                        #   in Loop: Header=BB64_1 Depth=1
	movq	-88(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB64_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB64_7
.LBB64_6:                               # %cond.false
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB64_7:                               # %cond.end
                                        #   in Loop: Header=BB64_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB64_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB64_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB64_10
.LBB64_9:                               # %if.else
                                        #   in Loop: Header=BB64_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
.LBB64_10:                              # %if.end
                                        #   in Loop: Header=BB64_1 Depth=1
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_1
.LBB64_12:                              # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$1178472931, -60(%rbp)  # imm = 0x463E11E3
	jne	.LBB64_14
.LBB64_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_14:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_13
.Lfunc_end64:
	.size	writeLumaCoeff8x8_CABAC.23, .Lfunc_end64-writeLumaCoeff8x8_CABAC.23
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.24  # -- Begin function ChromaPrediction4x4.24
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.24,@function
ChromaPrediction4x4.24:                 # @ChromaPrediction4x4.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$803806446, -68(%rbp)   # imm = 0x2FE91CEE
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -52(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB65_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB65_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB65_6
.LBB65_3:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB65_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB65_5:                               # %land.end
.LBB65_6:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB65_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB65_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB65_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -20(%rbp)
	jne	.LBB65_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -56(%rbp)
	jne	.LBB65_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -52(%rbp)
	jne	.LBB65_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB65_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB65_15
.LBB65_14:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB65_15:                              # %cond.end
	movq	%rax, -64(%rbp)
.LBB65_16:                              # %if.end
	cmpl	$-1, -20(%rbp)
	jne	.LBB65_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB65_87
.LBB65_18:                              # %if.end30
	cmpl	$0, -20(%rbp)
	je	.LBB65_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -20(%rbp)
	jne	.LBB65_21
.LBB65_20:                              # %if.then36
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB65_21:                              # %if.end37
	cmpl	$1, -20(%rbp)
	je	.LBB65_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -20(%rbp)
	jne	.LBB65_24
.LBB65_23:                              # %if.then43
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB65_24:                              # %if.end44
	cmpl	$0, -72(%rbp)
	je	.LBB65_56
# %bb.25:                               # %if.then46
	cmpl	$2, -20(%rbp)
	jne	.LBB65_35
# %bb.26:                               # %if.then49
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB65_27:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_29 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB65_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB65_27 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB65_29:                              # %for.cond52
                                        #   Parent Loop BB65_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB65_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB65_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB65_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_29
.LBB65_32:                              # %for.end
                                        #   in Loop: Header=BB65_27 Depth=1
	jmp	.LBB65_33
.LBB65_33:                              # %for.inc99
                                        #   in Loop: Header=BB65_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_27
.LBB65_34:                              # %for.end101
	jmp	.LBB65_55
.LBB65_35:                              # %if.else
	cmpl	$0, -20(%rbp)
	jne	.LBB65_45
# %bb.36:                               # %if.then104
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB65_37:                              # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_39 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB65_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB65_37 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB65_39:                              # %for.cond109
                                        #   Parent Loop BB65_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB65_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB65_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB65_39 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_39
.LBB65_42:                              # %for.end139
                                        #   in Loop: Header=BB65_37 Depth=1
	jmp	.LBB65_43
.LBB65_43:                              # %for.inc140
                                        #   in Loop: Header=BB65_37 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_37
.LBB65_44:                              # %for.end142
	jmp	.LBB65_54
.LBB65_45:                              # %if.else143
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB65_46:                              # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_48 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB65_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB65_46 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB65_48:                              # %for.cond148
                                        #   Parent Loop BB65_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB65_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB65_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB65_48 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_48
.LBB65_51:                              # %for.end178
                                        #   in Loop: Header=BB65_46 Depth=1
	jmp	.LBB65_52
.LBB65_52:                              # %for.inc179
                                        #   in Loop: Header=BB65_46 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_46
.LBB65_53:                              # %for.end181
	jmp	.LBB65_54
.LBB65_54:                              # %if.end182
	jmp	.LBB65_55
.LBB65_55:                              # %if.end183
	jmp	.LBB65_87
.LBB65_56:                              # %if.else184
	cmpl	$2, -20(%rbp)
	jne	.LBB65_66
# %bb.57:                               # %if.then187
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB65_58:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_60 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB65_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB65_58 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB65_60:                              # %for.cond192
                                        #   Parent Loop BB65_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB65_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB65_60 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB65_60 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_60
.LBB65_63:                              # %for.end208
                                        #   in Loop: Header=BB65_58 Depth=1
	jmp	.LBB65_64
.LBB65_64:                              # %for.inc209
                                        #   in Loop: Header=BB65_58 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_58
.LBB65_65:                              # %for.end211
	jmp	.LBB65_86
.LBB65_66:                              # %if.else212
	cmpl	$0, -20(%rbp)
	jne	.LBB65_76
# %bb.67:                               # %if.then215
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB65_68:                              # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_70 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB65_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB65_68 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB65_70:                              # %for.cond220
                                        #   Parent Loop BB65_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB65_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB65_70 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB65_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_70
.LBB65_73:                              # %for.end233
                                        #   in Loop: Header=BB65_68 Depth=1
	jmp	.LBB65_74
.LBB65_74:                              # %for.inc234
                                        #   in Loop: Header=BB65_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_68
.LBB65_75:                              # %for.end236
	jmp	.LBB65_85
.LBB65_76:                              # %if.else237
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB65_77:                              # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_79 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB65_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB65_77 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB65_79:                              # %for.cond242
                                        #   Parent Loop BB65_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB65_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB65_79 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB65_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_79
.LBB65_82:                              # %for.end255
                                        #   in Loop: Header=BB65_77 Depth=1
	jmp	.LBB65_83
.LBB65_83:                              # %for.inc256
                                        #   in Loop: Header=BB65_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_77
.LBB65_84:                              # %for.end258
	jmp	.LBB65_85
.LBB65_85:                              # %if.end259
	jmp	.LBB65_86
.LBB65_86:                              # %if.end260
	jmp	.LBB65_87
.LBB65_87:                              # %if.end261
	cmpl	$803806446, -68(%rbp)   # imm = 0x2FE91CEE
	jne	.LBB65_89
.LBB65_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_88
.Lfunc_end65:
	.size	ChromaPrediction4x4.24, .Lfunc_end65-ChromaPrediction4x4.24
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8.25    # -- Begin function writeLumaCoeff8x8.25
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.25,@function
writeLumaCoeff8x8.25:                   # @writeLumaCoeff8x8.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1022705292, -36(%rbp)  # imm = 0x3CF53E8C
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -24(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	cmpl	$13, -24(%rbp)
	jne	.LBB66_2
# %bb.1:                                # %if.then
	jmp	.LBB66_2
.LBB66_2:                               # %if.end
	cmpl	$0, -28(%rbp)
	je	.LBB66_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB66_15
.LBB66_4:                               # %if.then5
	movl	$0, -16(%rbp)
.LBB66_5:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB66_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB66_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB66_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB66_5 Depth=1
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -28(%rbp)
	je	.LBB66_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB66_5 Depth=1
	cmpl	$13, -24(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB66_10
.LBB66_9:                               # %cond.false
                                        #   in Loop: Header=BB66_5 Depth=1
	movl	-32(%rbp), %ecx
.LBB66_10:                              # %cond.end
                                        #   in Loop: Header=BB66_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_12
.LBB66_11:                              # %if.else
                                        #   in Loop: Header=BB66_5 Depth=1
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-32(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB66_12:                              # %if.end17
                                        #   in Loop: Header=BB66_5 Depth=1
	jmp	.LBB66_13
.LBB66_13:                              # %for.inc
                                        #   in Loop: Header=BB66_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_5
.LBB66_14:                              # %for.end
	jmp	.LBB66_19
.LBB66_15:                              # %if.else18
	cmpl	$13, -24(%rbp)
	jne	.LBB66_17
# %bb.16:                               # %if.then21
	movl	-20(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_18
.LBB66_17:                              # %if.else24
	movl	-20(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB66_18:                              # %if.end27
	jmp	.LBB66_19
.LBB66_19:                              # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$1022705292, -36(%rbp)  # imm = 0x3CF53E8C
	jne	.LBB66_21
.LBB66_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_20
.Lfunc_end66:
	.size	writeLumaCoeff8x8.25, .Lfunc_end66-writeLumaCoeff8x8.25
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL.26  # -- Begin function writeMotionInfo2NAL.26
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.26,@function
writeMotionInfo2NAL.26:                 # @writeMotionInfo2NAL.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$457580327, -56(%rbp)   # imm = 0x1B461F27
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB67_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB67_3
.LBB67_2:                               # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB67_3:                               # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB67_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB67_6
.LBB67_5:                               # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB67_6:                               # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB67_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB67_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB67_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB67_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB67_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB67_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB67_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB67_39
.LBB67_14:                              # %if.then42
	movl	$0, -16(%rbp)
.LBB67_15:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_17 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB67_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB67_15 Depth=1
	movl	$0, -12(%rbp)
.LBB67_17:                              # %for.cond45
                                        #   Parent Loop BB67_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB67_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB67_17 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB67_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB67_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB67_22
.LBB67_20:                              # %land.lhs.true59
                                        #   in Loop: Header=BB67_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB67_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB67_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB67_22:                              # %if.end
                                        #   in Loop: Header=BB67_17 Depth=2
	jmp	.LBB67_23
.LBB67_23:                              # %for.inc
                                        #   in Loop: Header=BB67_17 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_17
.LBB67_24:                              # %for.end
                                        #   in Loop: Header=BB67_15 Depth=1
	jmp	.LBB67_25
.LBB67_25:                              # %for.inc79
                                        #   in Loop: Header=BB67_15 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_15
.LBB67_26:                              # %for.end81
	movl	$0, -16(%rbp)
.LBB67_27:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_29 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB67_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB67_27 Depth=1
	movl	$0, -12(%rbp)
.LBB67_29:                              # %for.cond86
                                        #   Parent Loop BB67_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB67_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB67_29 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB67_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB67_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB67_34
.LBB67_32:                              # %land.lhs.true103
                                        #   in Loop: Header=BB67_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB67_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB67_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB67_34:                              # %if.end126
                                        #   in Loop: Header=BB67_29 Depth=2
	jmp	.LBB67_35
.LBB67_35:                              # %for.inc127
                                        #   in Loop: Header=BB67_29 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_29
.LBB67_36:                              # %for.end129
                                        #   in Loop: Header=BB67_27 Depth=1
	jmp	.LBB67_37
.LBB67_37:                              # %for.inc130
                                        #   in Loop: Header=BB67_27 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_27
.LBB67_38:                              # %for.end132
	jmp	.LBB67_39
.LBB67_39:                              # %if.end133
	jmp	.LBB67_40
.LBB67_40:                              # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB67_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB67_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB67_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB67_57
# %bb.44:                               # %if.then150
	movl	$0, -16(%rbp)
.LBB67_45:                              # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_47 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB67_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB67_45 Depth=1
	movl	$0, -12(%rbp)
.LBB67_47:                              # %for.cond155
                                        #   Parent Loop BB67_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB67_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB67_47 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB67_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB67_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB67_52
.LBB67_50:                              # %land.lhs.true172
                                        #   in Loop: Header=BB67_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB67_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB67_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB67_52:                              # %if.end197
                                        #   in Loop: Header=BB67_47 Depth=2
	jmp	.LBB67_53
.LBB67_53:                              # %for.inc198
                                        #   in Loop: Header=BB67_47 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_47
.LBB67_54:                              # %for.end200
                                        #   in Loop: Header=BB67_45 Depth=1
	jmp	.LBB67_55
.LBB67_55:                              # %for.inc201
                                        #   in Loop: Header=BB67_45 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_45
.LBB67_56:                              # %for.end203
	jmp	.LBB67_57
.LBB67_57:                              # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB67_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB67_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB67_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB67_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB67_75
# %bb.62:                               # %if.then222
	movl	$0, -16(%rbp)
.LBB67_63:                              # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_65 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB67_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB67_63 Depth=1
	movl	$0, -12(%rbp)
.LBB67_65:                              # %for.cond227
                                        #   Parent Loop BB67_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB67_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB67_65 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB67_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB67_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB67_70
.LBB67_68:                              # %land.lhs.true244
                                        #   in Loop: Header=BB67_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB67_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB67_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB67_70:                              # %if.end269
                                        #   in Loop: Header=BB67_65 Depth=2
	jmp	.LBB67_71
.LBB67_71:                              # %for.inc270
                                        #   in Loop: Header=BB67_65 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_65
.LBB67_72:                              # %for.end272
                                        #   in Loop: Header=BB67_63 Depth=1
	jmp	.LBB67_73
.LBB67_73:                              # %for.inc273
                                        #   in Loop: Header=BB67_63 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_63
.LBB67_74:                              # %for.end275
	jmp	.LBB67_75
.LBB67_75:                              # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$457580327, -56(%rbp)   # imm = 0x1B461F27
	jne	.LBB67_77
.LBB67_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_77:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_76
.Lfunc_end67:
	.size	writeMotionInfo2NAL.26, .Lfunc_end67-writeMotionInfo2NAL.26
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.27   # -- Begin function writeIntra4x4Modes.27
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.27,@function
writeIntra4x4Modes.27:                  # @writeIntra4x4Modes.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$791244222, -76(%rbp)   # imm = 0x2F296DBE
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -16(%rbp)
.LBB68_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_9 Depth 2
                                        #       Child Loop BB68_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB68_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB68_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB68_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB68_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB68_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB68_8
.LBB68_5:                               # %lor.lhs.false10
                                        #   in Loop: Header=BB68_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB68_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB68_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB68_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB68_17
.LBB68_8:                               # %if.then
                                        #   in Loop: Header=BB68_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -80(%rbp)
	movl	%ecx, -68(%rbp)
	movl	-68(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -84(%rbp)
	movl	-80(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -32(%rbp)
.LBB68_9:                               # %for.cond24
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_11 Depth 3
	cmpl	$2, -32(%rbp)
	jge	.LBB68_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB68_9 Depth=2
	movl	$0, -12(%rbp)
.LBB68_11:                              # %for.cond27
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB68_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB68_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB68_11 Depth=3
	movl	-84(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_11
.LBB68_14:                              # %for.end
                                        #   in Loop: Header=BB68_9 Depth=2
	jmp	.LBB68_15
.LBB68_15:                              # %for.inc42
                                        #   in Loop: Header=BB68_9 Depth=2
	movl	-72(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB68_9
.LBB68_16:                              # %for.end44
                                        #   in Loop: Header=BB68_1 Depth=1
	jmp	.LBB68_17
.LBB68_17:                              # %if.end
                                        #   in Loop: Header=BB68_1 Depth=1
	jmp	.LBB68_18
.LBB68_18:                              # %for.inc45
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_1
.LBB68_19:                              # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB68_20:                              # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB68_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB68_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB68_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB68_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB68_23:                              # %if.end57
                                        #   in Loop: Header=BB68_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB68_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB68_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB68_26
.LBB68_25:                              # %if.else
                                        #   in Loop: Header=BB68_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB68_26:                              # %if.end65
                                        #   in Loop: Header=BB68_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB68_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_20
.LBB68_28:                              # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$791244222, -76(%rbp)   # imm = 0x2F296DBE
	jne	.LBB68_30
.LBB68_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_30:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_29
.Lfunc_end68:
	.size	writeIntra4x4Modes.27, .Lfunc_end68-writeIntra4x4Modes.27
	.cfi_endproc
                                        # -- End function
	.globl	copyblock4x4.28         # -- Begin function copyblock4x4.28
	.p2align	4, 0x90
	.type	copyblock4x4.28,@function
copyblock4x4.28:                        # @copyblock4x4.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$254414115, -20(%rbp)   # imm = 0xF2A0D23
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	48(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	cmpl	$254414115, -20(%rbp)   # imm = 0xF2A0D23
	jne	.LBB69_2
.LBB69_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_1
.Lfunc_end69:
	.size	copyblock4x4.28, .Lfunc_end69-copyblock4x4.28
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.29 # -- Begin function OneComponentLumaPrediction4x4.29
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.29,@function
OneComponentLumaPrediction4x4.29:       # @OneComponentLumaPrediction4x4.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$721249579, -92(%rbp)   # imm = 0x2AFD652B
	movq	%rdi, -16(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -88(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-88(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-84(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -24(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$721249579, -92(%rbp)   # imm = 0x2AFD652B
	jne	.LBB70_2
.LBB70_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_1
.Lfunc_end70:
	.size	OneComponentLumaPrediction4x4.29, .Lfunc_end70-OneComponentLumaPrediction4x4.29
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi.30  # -- Begin function LumaPrediction4x4Bi.30
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.30,@function
LumaPrediction4x4Bi.30:                 # @LumaPrediction4x4Bi.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$183715476, -84(%rbp)   # imm = 0xAF34694
	movl	%edi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -80(%rbp)
	movl	%r8d, -72(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB71_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB71_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB71_6
.LBB71_3:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB71_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB71_5:                               # %land.end
.LBB71_6:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB71_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB71_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB71_10
.LBB71_9:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB71_10
.LBB71_10:                              # %cond.end
	movl	%ecx, -60(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB71_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB71_13
.LBB71_12:                              # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB71_13:                              # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB71_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB71_16
.LBB71_15:                              # %if.then
	movl	-52(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-80(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-60(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB71_16:                              # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB71_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB71_19
.LBB71_18:                              # %if.then39
	movl	-52(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-60(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB71_19:                              # %if.end52
	cmpl	$0, -76(%rbp)
	je	.LBB71_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB71_30
# %bb.21:                               # %if.then56
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB71_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_24 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB71_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB71_22 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB71_24:                              # %for.cond58
                                        #   Parent Loop BB71_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB71_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB71_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB71_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_24
.LBB71_27:                              # %for.end
                                        #   in Loop: Header=BB71_22 Depth=1
	jmp	.LBB71_28
.LBB71_28:                              # %for.inc96
                                        #   in Loop: Header=BB71_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_22
.LBB71_29:                              # %for.end98
	jmp	.LBB71_50
.LBB71_30:                              # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB71_40
# %bb.31:                               # %if.then101
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB71_32:                              # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_34 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB71_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB71_32 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB71_34:                              # %for.cond106
                                        #   Parent Loop BB71_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB71_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB71_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB71_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_34
.LBB71_37:                              # %for.end132
                                        #   in Loop: Header=BB71_32 Depth=1
	jmp	.LBB71_38
.LBB71_38:                              # %for.inc133
                                        #   in Loop: Header=BB71_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_32
.LBB71_39:                              # %for.end135
	jmp	.LBB71_49
.LBB71_40:                              # %if.else136
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB71_41:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB71_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB71_41 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB71_43:                              # %for.cond141
                                        #   Parent Loop BB71_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB71_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB71_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB71_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_43
.LBB71_46:                              # %for.end167
                                        #   in Loop: Header=BB71_41 Depth=1
	jmp	.LBB71_47
.LBB71_47:                              # %for.inc168
                                        #   in Loop: Header=BB71_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_41
.LBB71_48:                              # %for.end170
	jmp	.LBB71_49
.LBB71_49:                              # %if.end171
	jmp	.LBB71_50
.LBB71_50:                              # %if.end172
	jmp	.LBB71_82
.LBB71_51:                              # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB71_61
# %bb.52:                               # %if.then176
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB71_53:                              # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_55 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB71_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB71_53 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB71_55:                              # %for.cond181
                                        #   Parent Loop BB71_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB71_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB71_55 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB71_55 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_55
.LBB71_58:                              # %for.end197
                                        #   in Loop: Header=BB71_53 Depth=1
	jmp	.LBB71_59
.LBB71_59:                              # %for.inc198
                                        #   in Loop: Header=BB71_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_53
.LBB71_60:                              # %for.end200
	jmp	.LBB71_81
.LBB71_61:                              # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB71_71
# %bb.62:                               # %if.then204
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB71_63:                              # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_65 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB71_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB71_63 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB71_65:                              # %for.cond209
                                        #   Parent Loop BB71_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB71_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB71_65 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB71_65 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_65
.LBB71_68:                              # %for.end222
                                        #   in Loop: Header=BB71_63 Depth=1
	jmp	.LBB71_69
.LBB71_69:                              # %for.inc223
                                        #   in Loop: Header=BB71_63 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_63
.LBB71_70:                              # %for.end225
	jmp	.LBB71_80
.LBB71_71:                              # %if.else226
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB71_72:                              # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_74 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB71_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB71_72 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB71_74:                              # %for.cond231
                                        #   Parent Loop BB71_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB71_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB71_74 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB71_74 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_74
.LBB71_77:                              # %for.end244
                                        #   in Loop: Header=BB71_72 Depth=1
	jmp	.LBB71_78
.LBB71_78:                              # %for.inc245
                                        #   in Loop: Header=BB71_72 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_72
.LBB71_79:                              # %for.end247
	jmp	.LBB71_80
.LBB71_80:                              # %if.end248
	jmp	.LBB71_81
.LBB71_81:                              # %if.end249
	jmp	.LBB71_82
.LBB71_82:                              # %if.end250
	cmpl	$183715476, -84(%rbp)   # imm = 0xAF34694
	jne	.LBB71_84
.LBB71_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_83
.Lfunc_end71:
	.size	LumaPrediction4x4Bi.30, .Lfunc_end71-LumaPrediction4x4Bi.30
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.31 # -- Begin function OneComponentLumaPrediction4x4.31
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.31,@function
OneComponentLumaPrediction4x4.31:       # @OneComponentLumaPrediction4x4.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$680333131, -92(%rbp)   # imm = 0x288D0F4B
	movq	%rdi, -16(%rbp)
	movl	%esi, -88(%rbp)
	movl	%edx, -84(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-84(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-88(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -24(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$680333131, -92(%rbp)   # imm = 0x288D0F4B
	jne	.LBB72_2
.LBB72_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_1
.Lfunc_end72:
	.size	OneComponentLumaPrediction4x4.31, .Lfunc_end72-OneComponentLumaPrediction4x4.31
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit.32 # -- Begin function write_terminating_bit.32
	.p2align	4, 0x90
	.type	write_terminating_bit.32,@function
write_terminating_bit.32:               # @write_terminating_bit.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1315616938, -8(%rbp)   # imm = 0x4E6AB8AA
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$1315616938, -8(%rbp)   # imm = 0x4E6AB8AA
	jne	.LBB73_2
.LBB73_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_1
.Lfunc_end73:
	.size	write_terminating_bit.32, .Lfunc_end73-write_terminating_bit.32
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock.33 # -- Begin function terminate_macroblock.33
	.p2align	4, 0x90
	.type	terminate_macroblock.33,@function
terminate_macroblock.33:                # @terminate_macroblock.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$243659380, -112(%rbp)  # imm = 0xE85F274
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-96(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB74_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB74_2:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB74_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB74_5
.LBB74_4:                               # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB74_8
.LBB74_5:                               # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB74_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB74_7:                               # %if.end
	jmp	.LBB74_8
.LBB74_8:                               # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB74_45
# %bb.9:                                # %if.end18
	movq	.LJTI74_0(,%rax,8), %rax
	jmpq	*%rax
.LBB74_10:                              # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB74_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB74_12:                              # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB74_46
.LBB74_13:                              # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB74_46
.LBB74_14:                              # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB74_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB74_16:                              # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB74_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB74_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB74_22
.LBB74_19:                              # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB74_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB74_21:                              # %if.end64
	jmp	.LBB74_22
.LBB74_22:                              # %if.end65
	jmp	.LBB74_23
.LBB74_23:                              # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB74_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB74_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB74_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB74_27:                              # %if.end79
	jmp	.LBB74_28
.LBB74_28:                              # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB74_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB74_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB74_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB74_32:                              # %if.end89
	jmp	.LBB74_33
.LBB74_33:                              # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB74_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB74_35:                              # %if.end95
	jmp	.LBB74_46
.LBB74_36:                              # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB74_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB74_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB74_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB74_40:                              # %if.end106
	jmp	.LBB74_41
.LBB74_41:                              # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB74_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB74_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB74_44:                              # %if.end118
	jmp	.LBB74_46
.LBB74_45:                              # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB74_46:                              # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB74_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB74_48:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB74_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB74_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB74_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB74_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB74_51:                              # %if.end139
                                        #   in Loop: Header=BB74_48 Depth=1
	jmp	.LBB74_52
.LBB74_52:                              # %for.inc
                                        #   in Loop: Header=BB74_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB74_48
.LBB74_53:                              # %for.end
	jmp	.LBB74_54
.LBB74_54:                              # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB74_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB74_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB74_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB74_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB74_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB74_60:                              # %if.end174
	jmp	.LBB74_62
.LBB74_61:                              # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB74_62:                              # %if.end188
	jmp	.LBB74_63
.LBB74_63:                              # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB74_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB74_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -108(%rbp)
	jne	.LBB74_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-96(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB74_67:                              # %if.end218
	cmpl	$243659380, -112(%rbp)  # imm = 0xE85F274
	jne	.LBB74_69
.LBB74_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_69:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_68
.Lfunc_end74:
	.size	terminate_macroblock.33, .Lfunc_end74-terminate_macroblock.33
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI74_0:
	.quad	.LBB74_10
	.quad	.LBB74_13
	.quad	.LBB74_14
	.quad	.LBB74_36
                                        # -- End function
	.text
	.globl	predict_nnz.34          # -- Begin function predict_nnz.34
	.p2align	4, 0x90
	.type	predict_nnz.34,@function
predict_nnz.34:                         # @predict_nnz.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$675489711, -56(%rbp)   # imm = 0x284327AF
	movl	%edi, -48(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	movl	-48(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB75_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB75_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB75_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB75_4:                               # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB75_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB75_6:                               # %if.end14
	movl	-44(%rbp), %edi
	movl	-48(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB75_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB75_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB75_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB75_10:                              # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB75_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB75_12:                              # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB75_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB75_14:                              # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$675489711, -56(%rbp)   # imm = 0x284327AF
	jne	.LBB75_16
.LBB75_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_16:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_15
.Lfunc_end75:
	.size	predict_nnz.34, .Lfunc_end75-predict_nnz.34
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff.35 # -- Begin function writeCBPandLumaCoeff.35
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.35,@function
writeCBPandLumaCoeff.35:                # @writeCBPandLumaCoeff.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1734254903, -104(%rbp) # imm = 0x675EA137
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB76_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB76_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB76_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB76_7
.LBB76_4:                               # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB76_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB76_6:                               # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB76_10
.LBB76_7:                               # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB76_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB76_9:                               # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB76_10:                              # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB76_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB76_12:                              # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB76_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB76_18
.LBB76_14:                              # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB76_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB76_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB76_18
.LBB76_17:                              # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB76_22
.LBB76_18:                              # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB76_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB76_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB76_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB76_22:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -100(%rbp)
	je	.LBB76_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB76_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB76_26
.LBB76_25:                              # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB76_26:                              # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB76_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB76_29
.LBB76_28:                              # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB76_29:                              # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB76_30:                              # %if.end93
	jmp	.LBB76_31
.LBB76_31:                              # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB76_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB76_42
.LBB76_33:                              # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB76_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB76_36
.LBB76_35:                              # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB76_36:                              # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB76_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB76_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB76_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB76_41
.LBB76_40:                              # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB76_41:                              # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB76_42:                              # %if.end138
	movl	$0, -36(%rbp)
.LBB76_43:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_45 Depth 2
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB76_43 Depth=1
	movl	$0, -20(%rbp)
.LBB76_45:                              # %for.cond141
                                        #   Parent Loop BB76_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB76_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB76_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB76_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB76_45
.LBB76_48:                              # %for.end
                                        #   in Loop: Header=BB76_43 Depth=1
	jmp	.LBB76_49
.LBB76_49:                              # %for.inc152
                                        #   in Loop: Header=BB76_43 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB76_43
.LBB76_50:                              # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB76_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB76_52:                              # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB76_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB76_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB76_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB76_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB76_55:                              # %if.end169
                                        #   in Loop: Header=BB76_52 Depth=1
	jmp	.LBB76_56
.LBB76_56:                              # %for.inc170
                                        #   in Loop: Header=BB76_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB76_52
.LBB76_57:                              # %for.end172
	jmp	.LBB76_101
.LBB76_58:                              # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB76_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB76_70
.LBB76_60:                              # %if.else179
	movl	$1, -60(%rbp)
	movl	$0, -40(%rbp)
.LBB76_61:                              # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jg	.LBB76_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB76_61 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
.LBB76_63:                              # %land.end184
                                        #   in Loop: Header=BB76_61 Depth=1
	testb	$1, %al
	jne	.LBB76_64
	jmp	.LBB76_69
.LBB76_64:                              # %for.body186
                                        #   in Loop: Header=BB76_61 Depth=1
	movq	-128(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -60(%rbp)
	movq	-144(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB76_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB76_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB76_67
.LBB76_66:                              # %if.else196
                                        #   in Loop: Header=BB76_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB76_67:                              # %if.end198
                                        #   in Loop: Header=BB76_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB76_61 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB76_61
.LBB76_69:                              # %for.end218
	jmp	.LBB76_70
.LBB76_70:                              # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB76_100
# %bb.71:                               # %if.then222
	movl	$0, -52(%rbp)
.LBB76_72:                              # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_74 Depth 2
                                        #       Child Loop BB76_76 Depth 3
                                        #         Child Loop BB76_78 Depth 4
                                        #           Child Loop BB76_82 Depth 5
	cmpl	$4, -52(%rbp)
	jge	.LBB76_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB76_72 Depth=1
	movl	$0, -56(%rbp)
.LBB76_74:                              # %for.cond226
                                        #   Parent Loop BB76_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_76 Depth 3
                                        #         Child Loop BB76_78 Depth 4
                                        #           Child Loop BB76_82 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB76_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB76_74 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB76_76:                              # %for.cond229
                                        #   Parent Loop BB76_72 Depth=1
                                        #     Parent Loop BB76_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB76_78 Depth 4
                                        #           Child Loop BB76_82 Depth 5
	movl	-36(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB76_76 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB76_78:                              # %for.cond233
                                        #   Parent Loop BB76_72 Depth=1
                                        #     Parent Loop BB76_74 Depth=2
                                        #       Parent Loop BB76_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB76_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB76_78 Depth=4
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -72(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB76_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB76_78 Depth=4
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB76_91
.LBB76_81:                              # %if.else247
                                        #   in Loop: Header=BB76_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -60(%rbp)
	movl	$0, -40(%rbp)
.LBB76_82:                              # %for.cond259
                                        #   Parent Loop BB76_72 Depth=1
                                        #     Parent Loop BB76_74 Depth=2
                                        #       Parent Loop BB76_76 Depth=3
                                        #         Parent Loop BB76_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jge	.LBB76_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB76_82 Depth=5
	cmpl	$0, -60(%rbp)
	setne	%al
.LBB76_84:                              # %land.end263
                                        #   in Loop: Header=BB76_82 Depth=5
	testb	$1, %al
	jne	.LBB76_85
	jmp	.LBB76_90
.LBB76_85:                              # %for.body265
                                        #   in Loop: Header=BB76_82 Depth=5
	movq	-136(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -60(%rbp)
	movq	-120(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB76_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB76_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB76_88
.LBB76_87:                              # %if.else276
                                        #   in Loop: Header=BB76_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB76_88:                              # %if.end278
                                        #   in Loop: Header=BB76_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB76_82 Depth=5
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB76_82
.LBB76_90:                              # %for.end300
                                        #   in Loop: Header=BB76_78 Depth=4
	jmp	.LBB76_91
.LBB76_91:                              # %if.end301
                                        #   in Loop: Header=BB76_78 Depth=4
	jmp	.LBB76_92
.LBB76_92:                              # %for.inc302
                                        #   in Loop: Header=BB76_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB76_78
.LBB76_93:                              # %for.end304
                                        #   in Loop: Header=BB76_76 Depth=3
	jmp	.LBB76_94
.LBB76_94:                              # %for.inc305
                                        #   in Loop: Header=BB76_76 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB76_76
.LBB76_95:                              # %for.end307
                                        #   in Loop: Header=BB76_74 Depth=2
	jmp	.LBB76_96
.LBB76_96:                              # %for.inc308
                                        #   in Loop: Header=BB76_74 Depth=2
	movl	-56(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB76_74
.LBB76_97:                              # %for.end310
                                        #   in Loop: Header=BB76_72 Depth=1
	jmp	.LBB76_98
.LBB76_98:                              # %for.inc311
                                        #   in Loop: Header=BB76_72 Depth=1
	movl	-52(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB76_72
.LBB76_99:                              # %for.end313
	jmp	.LBB76_100
.LBB76_100:                             # %if.end314
	jmp	.LBB76_101
.LBB76_101:                             # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$1734254903, -104(%rbp) # imm = 0x675EA137
	jne	.LBB76_103
.LBB76_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_103:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_102
.Lfunc_end76:
	.size	writeCBPandLumaCoeff.35, .Lfunc_end76-writeCBPandLumaCoeff.35
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8.36    # -- Begin function writeLumaCoeff8x8.36
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.36,@function
writeLumaCoeff8x8.36:                   # @writeLumaCoeff8x8.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$2005066771, -36(%rbp)  # imm = 0x7782E413
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	cmpl	$13, -20(%rbp)
	jne	.LBB77_2
# %bb.1:                                # %if.then
	jmp	.LBB77_2
.LBB77_2:                               # %if.end
	cmpl	$0, -32(%rbp)
	je	.LBB77_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB77_15
.LBB77_4:                               # %if.then5
	movl	$0, -16(%rbp)
.LBB77_5:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB77_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB77_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB77_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB77_5 Depth=1
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -32(%rbp)
	je	.LBB77_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB77_5 Depth=1
	cmpl	$13, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB77_10
.LBB77_9:                               # %cond.false
                                        #   in Loop: Header=BB77_5 Depth=1
	movl	-28(%rbp), %ecx
.LBB77_10:                              # %cond.end
                                        #   in Loop: Header=BB77_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_12
.LBB77_11:                              # %if.else
                                        #   in Loop: Header=BB77_5 Depth=1
	movl	-24(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-28(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB77_12:                              # %if.end17
                                        #   in Loop: Header=BB77_5 Depth=1
	jmp	.LBB77_13
.LBB77_13:                              # %for.inc
                                        #   in Loop: Header=BB77_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_5
.LBB77_14:                              # %for.end
	jmp	.LBB77_19
.LBB77_15:                              # %if.else18
	cmpl	$13, -20(%rbp)
	jne	.LBB77_17
# %bb.16:                               # %if.then21
	movl	-24(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_18
.LBB77_17:                              # %if.else24
	movl	-24(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB77_18:                              # %if.end27
	jmp	.LBB77_19
.LBB77_19:                              # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$2005066771, -36(%rbp)  # imm = 0x7782E413
	jne	.LBB77_21
.LBB77_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_20
.Lfunc_end77:
	.size	writeLumaCoeff8x8.36, .Lfunc_end77-writeLumaCoeff8x8.36
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi.37  # -- Begin function LumaPrediction4x4Bi.37
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.37,@function
LumaPrediction4x4Bi.37:                 # @LumaPrediction4x4Bi.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$1900485007, -76(%rbp)  # imm = 0x7147198F
	movl	%edi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -80(%rbp)
	movl	%r8d, -84(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB78_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB78_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB78_6
.LBB78_3:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB78_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB78_5:                               # %land.end
.LBB78_6:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB78_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB78_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB78_10
.LBB78_9:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB78_10
.LBB78_10:                              # %cond.end
	movl	%ecx, -64(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB78_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB78_13
.LBB78_12:                              # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB78_13:                              # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB78_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB78_16
.LBB78_15:                              # %if.then
	movl	-52(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-80(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-64(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB78_16:                              # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB78_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB78_19
.LBB78_18:                              # %if.then39
	movl	-52(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-64(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB78_19:                              # %if.end52
	cmpl	$0, -72(%rbp)
	je	.LBB78_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB78_30
# %bb.21:                               # %if.then56
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB78_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_24 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB78_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB78_22 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB78_24:                              # %for.cond58
                                        #   Parent Loop BB78_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB78_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB78_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB78_24 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_24
.LBB78_27:                              # %for.end
                                        #   in Loop: Header=BB78_22 Depth=1
	jmp	.LBB78_28
.LBB78_28:                              # %for.inc96
                                        #   in Loop: Header=BB78_22 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_22
.LBB78_29:                              # %for.end98
	jmp	.LBB78_50
.LBB78_30:                              # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB78_40
# %bb.31:                               # %if.then101
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB78_32:                              # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_34 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB78_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB78_32 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB78_34:                              # %for.cond106
                                        #   Parent Loop BB78_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB78_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB78_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB78_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_34
.LBB78_37:                              # %for.end132
                                        #   in Loop: Header=BB78_32 Depth=1
	jmp	.LBB78_38
.LBB78_38:                              # %for.inc133
                                        #   in Loop: Header=BB78_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_32
.LBB78_39:                              # %for.end135
	jmp	.LBB78_49
.LBB78_40:                              # %if.else136
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB78_41:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_43 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB78_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB78_41 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB78_43:                              # %for.cond141
                                        #   Parent Loop BB78_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB78_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB78_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB78_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_43
.LBB78_46:                              # %for.end167
                                        #   in Loop: Header=BB78_41 Depth=1
	jmp	.LBB78_47
.LBB78_47:                              # %for.inc168
                                        #   in Loop: Header=BB78_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_41
.LBB78_48:                              # %for.end170
	jmp	.LBB78_49
.LBB78_49:                              # %if.end171
	jmp	.LBB78_50
.LBB78_50:                              # %if.end172
	jmp	.LBB78_82
.LBB78_51:                              # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB78_61
# %bb.52:                               # %if.then176
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB78_53:                              # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_55 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB78_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB78_53 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB78_55:                              # %for.cond181
                                        #   Parent Loop BB78_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB78_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB78_55 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB78_55 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_55
.LBB78_58:                              # %for.end197
                                        #   in Loop: Header=BB78_53 Depth=1
	jmp	.LBB78_59
.LBB78_59:                              # %for.inc198
                                        #   in Loop: Header=BB78_53 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_53
.LBB78_60:                              # %for.end200
	jmp	.LBB78_81
.LBB78_61:                              # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB78_71
# %bb.62:                               # %if.then204
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB78_63:                              # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_65 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB78_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB78_63 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB78_65:                              # %for.cond209
                                        #   Parent Loop BB78_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB78_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB78_65 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB78_65 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_65
.LBB78_68:                              # %for.end222
                                        #   in Loop: Header=BB78_63 Depth=1
	jmp	.LBB78_69
.LBB78_69:                              # %for.inc223
                                        #   in Loop: Header=BB78_63 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_63
.LBB78_70:                              # %for.end225
	jmp	.LBB78_80
.LBB78_71:                              # %if.else226
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB78_72:                              # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_74 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB78_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB78_72 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB78_74:                              # %for.cond231
                                        #   Parent Loop BB78_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB78_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB78_74 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB78_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_74
.LBB78_77:                              # %for.end244
                                        #   in Loop: Header=BB78_72 Depth=1
	jmp	.LBB78_78
.LBB78_78:                              # %for.inc245
                                        #   in Loop: Header=BB78_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_72
.LBB78_79:                              # %for.end247
	jmp	.LBB78_80
.LBB78_80:                              # %if.end248
	jmp	.LBB78_81
.LBB78_81:                              # %if.end249
	jmp	.LBB78_82
.LBB78_82:                              # %if.end250
	cmpl	$1900485007, -76(%rbp)  # imm = 0x7147198F
	jne	.LBB78_84
.LBB78_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_83
.Lfunc_end78:
	.size	LumaPrediction4x4Bi.37, .Lfunc_end78-LumaPrediction4x4Bi.37
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16.38       # -- Begin function find_sad_16x16.38
	.p2align	4, 0x90
	.type	find_sad_16x16.38,@function
find_sad_16x16.38:                      # @find_sad_16x16.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$1224802450, -80(%rbp)  # imm = 0x49010092
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB79_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB79_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB79_1 Depth=1
	movl	-72(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB79_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_1
.LBB79_4:                               # %for.end
	movl	-72(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB79_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB79_20
.LBB79_6:                               # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB79_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB79_9
.LBB79_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB79_9
.LBB79_9:                               # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -64(%rbp)
.LBB79_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB79_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB79_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB79_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB79_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB79_14
.LBB79_13:                              # %cond.false23
                                        #   in Loop: Header=BB79_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB79_14
.LBB79_14:                              # %cond.end24
                                        #   in Loop: Header=BB79_10 Depth=1
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB79_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_10
.LBB79_16:                              # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB79_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB79_19
.LBB79_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB79_19
.LBB79_19:                              # %cond.end39
	movl	%eax, -76(%rbp)
.LBB79_20:                              # %if.end
	movl	$999999, -60(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB79_21:                              # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_42 Depth 2
                                        #       Child Loop BB79_44 Depth 3
                                        #     Child Loop BB79_50 Depth 2
                                        #       Child Loop BB79_52 Depth 3
                                        #         Child Loop BB79_54 Depth 4
                                        #         Child Loop BB79_58 Depth 4
                                        #           Child Loop BB79_60 Depth 5
                                        #     Child Loop BB79_72 Depth 2
                                        #       Child Loop BB79_74 Depth 3
                                        #     Child Loop BB79_80 Depth 2
                                        #     Child Loop BB79_84 Depth 2
                                        #       Child Loop BB79_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB79_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB79_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB79_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB79_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB79_32
.LBB79_24:                              # %if.then46
                                        #   in Loop: Header=BB79_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB79_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB79_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB79_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB79_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB79_28
.LBB79_27:                              # %if.then51
                                        #   in Loop: Header=BB79_21 Depth=1
	jmp	.LBB79_95
.LBB79_28:                              # %if.end52
                                        #   in Loop: Header=BB79_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB79_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB79_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB79_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB79_21 Depth=1
	jmp	.LBB79_95
.LBB79_31:                              # %if.end57
                                        #   in Loop: Header=BB79_21 Depth=1
	jmp	.LBB79_32
.LBB79_32:                              # %if.end58
                                        #   in Loop: Header=BB79_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB79_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB79_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB79_40
.LBB79_34:                              # %lor.lhs.false62
                                        #   in Loop: Header=BB79_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB79_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB79_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB79_40
.LBB79_36:                              # %lor.lhs.false66
                                        #   in Loop: Header=BB79_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB79_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB79_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB79_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB79_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB79_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB79_21 Depth=1
	cmpl	$0, -76(%rbp)
	jne	.LBB79_41
.LBB79_40:                              # %if.then74
                                        #   in Loop: Header=BB79_21 Depth=1
	jmp	.LBB79_94
.LBB79_41:                              # %if.else75
                                        #   in Loop: Header=BB79_21 Depth=1
	movl	$0, -16(%rbp)
.LBB79_42:                              # %for.cond76
                                        #   Parent Loop BB79_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB79_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB79_42 Depth=2
	movl	$0, -12(%rbp)
.LBB79_44:                              # %for.cond79
                                        #   Parent Loop BB79_21 Depth=1
                                        #     Parent Loop BB79_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB79_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB79_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB79_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_44
.LBB79_47:                              # %for.end115
                                        #   in Loop: Header=BB79_42 Depth=2
	jmp	.LBB79_48
.LBB79_48:                              # %for.inc116
                                        #   in Loop: Header=BB79_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_42
.LBB79_49:                              # %for.end118
                                        #   in Loop: Header=BB79_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB79_50:                              # %for.cond119
                                        #   Parent Loop BB79_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_52 Depth 3
                                        #         Child Loop BB79_54 Depth 4
                                        #         Child Loop BB79_58 Depth 4
                                        #           Child Loop BB79_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB79_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB79_50 Depth=2
	movl	$0, -24(%rbp)
.LBB79_52:                              # %for.cond123
                                        #   Parent Loop BB79_21 Depth=1
                                        #     Parent Loop BB79_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB79_54 Depth 4
                                        #         Child Loop BB79_58 Depth 4
                                        #           Child Loop BB79_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB79_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB79_52 Depth=3
	movl	$0, -16(%rbp)
.LBB79_54:                              # %for.cond127
                                        #   Parent Loop BB79_21 Depth=1
                                        #     Parent Loop BB79_50 Depth=2
                                        #       Parent Loop BB79_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB79_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB79_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB79_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_54
.LBB79_57:                              # %for.end237
                                        #   in Loop: Header=BB79_52 Depth=3
	movl	$0, -12(%rbp)
.LBB79_58:                              # %for.cond238
                                        #   Parent Loop BB79_21 Depth=1
                                        #     Parent Loop BB79_50 Depth=2
                                        #       Parent Loop BB79_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB79_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB79_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB79_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB79_60:                              # %for.cond346
                                        #   Parent Loop BB79_21 Depth=1
                                        #     Parent Loop BB79_50 Depth=2
                                        #       Parent Loop BB79_52 Depth=3
                                        #         Parent Loop BB79_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB79_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB79_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB79_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB79_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB79_63:                              # %if.end363
                                        #   in Loop: Header=BB79_60 Depth=5
	jmp	.LBB79_64
.LBB79_64:                              # %for.inc364
                                        #   in Loop: Header=BB79_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_60
.LBB79_65:                              # %for.end366
                                        #   in Loop: Header=BB79_58 Depth=4
	jmp	.LBB79_66
.LBB79_66:                              # %for.inc367
                                        #   in Loop: Header=BB79_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_58
.LBB79_67:                              # %for.end369
                                        #   in Loop: Header=BB79_52 Depth=3
	jmp	.LBB79_68
.LBB79_68:                              # %for.inc370
                                        #   in Loop: Header=BB79_52 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB79_52
.LBB79_69:                              # %for.end372
                                        #   in Loop: Header=BB79_50 Depth=2
	jmp	.LBB79_70
.LBB79_70:                              # %for.inc373
                                        #   in Loop: Header=BB79_50 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB79_50
.LBB79_71:                              # %for.end375
                                        #   in Loop: Header=BB79_21 Depth=1
	movl	$0, -16(%rbp)
.LBB79_72:                              # %for.cond376
                                        #   Parent Loop BB79_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB79_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB79_72 Depth=2
	movl	$0, -12(%rbp)
.LBB79_74:                              # %for.cond380
                                        #   Parent Loop BB79_21 Depth=1
                                        #     Parent Loop BB79_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB79_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB79_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB79_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_74
.LBB79_77:                              # %for.end397
                                        #   in Loop: Header=BB79_72 Depth=2
	jmp	.LBB79_78
.LBB79_78:                              # %for.inc398
                                        #   in Loop: Header=BB79_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_72
.LBB79_79:                              # %for.end400
                                        #   in Loop: Header=BB79_21 Depth=1
	movl	$0, -16(%rbp)
.LBB79_80:                              # %for.cond401
                                        #   Parent Loop BB79_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB79_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB79_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB79_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_80
.LBB79_83:                              # %for.end463
                                        #   in Loop: Header=BB79_21 Depth=1
	movl	$0, -12(%rbp)
.LBB79_84:                              # %for.cond464
                                        #   Parent Loop BB79_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB79_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB79_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB79_86:                              # %for.cond524
                                        #   Parent Loop BB79_21 Depth=1
                                        #     Parent Loop BB79_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB79_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB79_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB79_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_86
.LBB79_89:                              # %for.end536
                                        #   in Loop: Header=BB79_84 Depth=2
	jmp	.LBB79_90
.LBB79_90:                              # %for.inc537
                                        #   in Loop: Header=BB79_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_84
.LBB79_91:                              # %for.end539
                                        #   in Loop: Header=BB79_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB79_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB79_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB79_93:                              # %if.end543
                                        #   in Loop: Header=BB79_21 Depth=1
	jmp	.LBB79_94
.LBB79_94:                              # %if.end544
                                        #   in Loop: Header=BB79_21 Depth=1
	jmp	.LBB79_95
.LBB79_95:                              # %for.inc545
                                        #   in Loop: Header=BB79_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB79_21
.LBB79_96:                              # %for.end547
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ebx
	cmpl	$1224802450, -80(%rbp)  # imm = 0x49010092
	jne	.LBB79_98
.LBB79_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_97
.Lfunc_end79:
	.size	find_sad_16x16.38, .Lfunc_end79-find_sad_16x16.38
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8.39    # -- Begin function writeLumaCoeff8x8.39
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.39,@function
writeLumaCoeff8x8.39:                   # @writeLumaCoeff8x8.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1173579040, -36(%rbp)  # imm = 0x45F36520
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -24(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	cmpl	$13, -24(%rbp)
	jne	.LBB80_2
# %bb.1:                                # %if.then
	jmp	.LBB80_2
.LBB80_2:                               # %if.end
	cmpl	$0, -32(%rbp)
	je	.LBB80_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB80_15
.LBB80_4:                               # %if.then5
	movl	$0, -16(%rbp)
.LBB80_5:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB80_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB80_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB80_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB80_5 Depth=1
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -32(%rbp)
	je	.LBB80_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB80_5 Depth=1
	cmpl	$13, -24(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB80_10
.LBB80_9:                               # %cond.false
                                        #   in Loop: Header=BB80_5 Depth=1
	movl	-28(%rbp), %ecx
.LBB80_10:                              # %cond.end
                                        #   in Loop: Header=BB80_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_12
.LBB80_11:                              # %if.else
                                        #   in Loop: Header=BB80_5 Depth=1
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-28(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB80_12:                              # %if.end17
                                        #   in Loop: Header=BB80_5 Depth=1
	jmp	.LBB80_13
.LBB80_13:                              # %for.inc
                                        #   in Loop: Header=BB80_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_5
.LBB80_14:                              # %for.end
	jmp	.LBB80_19
.LBB80_15:                              # %if.else18
	cmpl	$13, -24(%rbp)
	jne	.LBB80_17
# %bb.16:                               # %if.then21
	movl	-20(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_18
.LBB80_17:                              # %if.else24
	movl	-20(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB80_18:                              # %if.end27
	jmp	.LBB80_19
.LBB80_19:                              # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$1173579040, -36(%rbp)  # imm = 0x45F36520
	jne	.LBB80_21
.LBB80_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_20
.Lfunc_end80:
	.size	writeLumaCoeff8x8.39, .Lfunc_end80-writeLumaCoeff8x8.39
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding.40 # -- Begin function ChromaResidualCoding.40
	.p2align	4, 0x90
	.type	ChromaResidualCoding.40,@function
ChromaResidualCoding.40:                # @ChromaResidualCoding.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$1499282465, -72(%rbp)  # imm = 0x595D3C21
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB81_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB81_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB81_3:                               # %lor.end
.LBB81_4:                               # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -80(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB81_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_7 Depth 2
                                        #       Child Loop BB81_9 Depth 3
                                        #     Child Loop BB81_16 Depth 2
                                        #       Child Loop BB81_18 Depth 3
                                        #     Child Loop BB81_33 Depth 2
                                        #       Child Loop BB81_35 Depth 3
                                        #     Child Loop BB81_43 Depth 2
                                        #       Child Loop BB81_45 Depth 3
                                        #     Child Loop BB81_58 Depth 2
                                        #       Child Loop BB81_60 Depth 3
                                        #     Child Loop BB81_87 Depth 2
                                        #       Child Loop BB81_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB81_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB81_5 Depth=1
	movl	$0, -60(%rbp)
	movl	$0, -24(%rbp)
.LBB81_7:                               # %for.cond5
                                        #   Parent Loop BB81_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_9 Depth 3
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB81_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB81_7 Depth=2
	movl	$0, -16(%rbp)
.LBB81_9:                               # %for.cond8
                                        #   Parent Loop BB81_5 Depth=1
                                        #     Parent Loop BB81_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB81_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB81_9 Depth=3
	movslq	-80(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %edi
	leaq	-50(%rbp), %rsi
	leaq	-68(%rbp), %rdx
	leaq	-76(%rbp), %rcx
	leaq	-54(%rbp), %r8
	leaq	-52(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-50(%rbp), %ecx
	movl	-68(%rbp), %r8d
	movl	-76(%rbp), %r9d
	movw	-54(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-52(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB81_9 Depth=3
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_9
.LBB81_12:                              # %for.end
                                        #   in Loop: Header=BB81_7 Depth=2
	jmp	.LBB81_13
.LBB81_13:                              # %for.inc18
                                        #   in Loop: Header=BB81_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB81_7
.LBB81_14:                              # %for.end20
                                        #   in Loop: Header=BB81_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB81_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB81_5 Depth=1
	movl	$0, -8(%rbp)
.LBB81_16:                              # %for.cond21
                                        #   Parent Loop BB81_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_18 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB81_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB81_16 Depth=2
	movl	$0, -4(%rbp)
.LBB81_18:                              # %for.cond26
                                        #   Parent Loop BB81_5 Depth=1
                                        #     Parent Loop BB81_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB81_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB81_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB81_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB81_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB81_25
.LBB81_21:                              # %if.else
                                        #   in Loop: Header=BB81_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB81_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB81_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB81_24
.LBB81_23:                              # %if.else52
                                        #   in Loop: Header=BB81_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB81_24:                              # %if.end
                                        #   in Loop: Header=BB81_18 Depth=3
	jmp	.LBB81_25
.LBB81_25:                              # %if.end57
                                        #   in Loop: Header=BB81_18 Depth=3
	jmp	.LBB81_26
.LBB81_26:                              # %for.inc58
                                        #   in Loop: Header=BB81_18 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_18
.LBB81_27:                              # %for.end59
                                        #   in Loop: Header=BB81_16 Depth=2
	jmp	.LBB81_28
.LBB81_28:                              # %for.inc60
                                        #   in Loop: Header=BB81_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_16
.LBB81_29:                              # %for.end62
                                        #   in Loop: Header=BB81_5 Depth=1
	jmp	.LBB81_74
.LBB81_30:                              # %if.else63
                                        #   in Loop: Header=BB81_5 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB81_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB81_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB81_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB81_5 Depth=1
	movl	$0, -8(%rbp)
.LBB81_33:                              # %for.cond69
                                        #   Parent Loop BB81_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_35 Depth 3
	cmpl	$8, -8(%rbp)
	jge	.LBB81_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB81_33 Depth=2
	movl	$0, -4(%rbp)
.LBB81_35:                              # %for.cond73
                                        #   Parent Loop BB81_5 Depth=1
                                        #     Parent Loop BB81_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -4(%rbp)
	jge	.LBB81_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB81_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB81_35 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_35
.LBB81_38:                              # %for.end83
                                        #   in Loop: Header=BB81_33 Depth=2
	jmp	.LBB81_39
.LBB81_39:                              # %for.inc84
                                        #   in Loop: Header=BB81_33 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_33
.LBB81_40:                              # %for.end86
                                        #   in Loop: Header=BB81_5 Depth=1
	jmp	.LBB81_73
.LBB81_41:                              # %if.else87
                                        #   in Loop: Header=BB81_5 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB81_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB81_5 Depth=1
	movl	$0, -8(%rbp)
.LBB81_43:                              # %for.cond90
                                        #   Parent Loop BB81_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_45 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB81_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB81_43 Depth=2
	movl	$0, -4(%rbp)
.LBB81_45:                              # %for.cond95
                                        #   Parent Loop BB81_5 Depth=1
                                        #     Parent Loop BB81_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB81_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB81_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB81_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB81_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB81_52
.LBB81_48:                              # %if.else119
                                        #   in Loop: Header=BB81_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB81_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB81_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB81_51
.LBB81_50:                              # %if.else127
                                        #   in Loop: Header=BB81_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB81_51:                              # %if.end132
                                        #   in Loop: Header=BB81_45 Depth=3
	jmp	.LBB81_52
.LBB81_52:                              # %if.end133
                                        #   in Loop: Header=BB81_45 Depth=3
	jmp	.LBB81_53
.LBB81_53:                              # %for.inc134
                                        #   in Loop: Header=BB81_45 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_45
.LBB81_54:                              # %for.end136
                                        #   in Loop: Header=BB81_43 Depth=2
	jmp	.LBB81_55
.LBB81_55:                              # %for.inc137
                                        #   in Loop: Header=BB81_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_43
.LBB81_56:                              # %for.end139
                                        #   in Loop: Header=BB81_5 Depth=1
	jmp	.LBB81_72
.LBB81_57:                              # %if.else140
                                        #   in Loop: Header=BB81_5 Depth=1
	movl	$0, -8(%rbp)
.LBB81_58:                              # %for.cond141
                                        #   Parent Loop BB81_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_60 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB81_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB81_58 Depth=2
	movl	$0, -4(%rbp)
.LBB81_60:                              # %for.cond146
                                        #   Parent Loop BB81_5 Depth=1
                                        #     Parent Loop BB81_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB81_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB81_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB81_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB81_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB81_67
.LBB81_63:                              # %if.else175
                                        #   in Loop: Header=BB81_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB81_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB81_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB81_66
.LBB81_65:                              # %if.else188
                                        #   in Loop: Header=BB81_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB81_66:                              # %if.end198
                                        #   in Loop: Header=BB81_60 Depth=3
	jmp	.LBB81_67
.LBB81_67:                              # %if.end199
                                        #   in Loop: Header=BB81_60 Depth=3
	jmp	.LBB81_68
.LBB81_68:                              # %for.inc200
                                        #   in Loop: Header=BB81_60 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_60
.LBB81_69:                              # %for.end202
                                        #   in Loop: Header=BB81_58 Depth=2
	jmp	.LBB81_70
.LBB81_70:                              # %for.inc203
                                        #   in Loop: Header=BB81_58 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_58
.LBB81_71:                              # %for.end205
                                        #   in Loop: Header=BB81_5 Depth=1
	jmp	.LBB81_72
.LBB81_72:                              # %if.end206
                                        #   in Loop: Header=BB81_5 Depth=1
	jmp	.LBB81_73
.LBB81_73:                              # %if.end207
                                        #   in Loop: Header=BB81_5 Depth=1
	jmp	.LBB81_74
.LBB81_74:                              # %if.end208
                                        #   in Loop: Header=BB81_5 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB81_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB81_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB81_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB81_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB81_100
.LBB81_77:                              # %if.else215
                                        #   in Loop: Header=BB81_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB81_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB81_5 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB81_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB81_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB81_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB81_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB81_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB81_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB81_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB81_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB81_84
.LBB81_83:                              # %if.then247
                                        #   in Loop: Header=BB81_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB81_85
.LBB81_84:                              # %if.else249
                                        #   in Loop: Header=BB81_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB81_85:                              # %if.end251
                                        #   in Loop: Header=BB81_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB81_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB81_5 Depth=1
	movl	$0, -8(%rbp)
.LBB81_87:                              # %for.cond255
                                        #   Parent Loop BB81_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_89 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB81_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB81_87 Depth=2
	movl	$0, -4(%rbp)
.LBB81_89:                              # %for.cond260
                                        #   Parent Loop BB81_5 Depth=1
                                        #     Parent Loop BB81_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB81_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB81_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB81_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB81_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB81_93
.LBB81_92:                              # %if.else277
                                        #   in Loop: Header=BB81_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB81_93:                              # %if.end287
                                        #   in Loop: Header=BB81_89 Depth=3
	jmp	.LBB81_94
.LBB81_94:                              # %for.inc288
                                        #   in Loop: Header=BB81_89 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_89
.LBB81_95:                              # %for.end290
                                        #   in Loop: Header=BB81_87 Depth=2
	jmp	.LBB81_96
.LBB81_96:                              # %for.inc291
                                        #   in Loop: Header=BB81_87 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_87
.LBB81_97:                              # %for.end293
                                        #   in Loop: Header=BB81_5 Depth=1
	jmp	.LBB81_98
.LBB81_98:                              # %if.end294
                                        #   in Loop: Header=BB81_5 Depth=1
	jmp	.LBB81_99
.LBB81_99:                              # %if.end295
                                        #   in Loop: Header=BB81_5 Depth=1
	jmp	.LBB81_100
.LBB81_100:                             # %if.end296
                                        #   in Loop: Header=BB81_5 Depth=1
	jmp	.LBB81_101
.LBB81_101:                             # %for.inc297
                                        #   in Loop: Header=BB81_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_5
.LBB81_102:                             # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB81_139
# %bb.103:                              # %if.then307
	movl	$0, -8(%rbp)
.LBB81_104:                             # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_106 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB81_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB81_104 Depth=1
	movl	$0, -4(%rbp)
.LBB81_106:                             # %for.cond312
                                        #   Parent Loop BB81_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB81_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB81_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -64(%rbp)
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-64(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-20(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB81_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB81_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB81_110
.LBB81_109:                             # %cond.false
                                        #   in Loop: Header=BB81_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB81_110:                             # %cond.end
                                        #   in Loop: Header=BB81_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB81_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB81_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB81_116
.LBB81_112:                             # %cond.false358
                                        #   in Loop: Header=BB81_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB81_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB81_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB81_115
.LBB81_114:                             # %cond.false367
                                        #   in Loop: Header=BB81_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB81_115:                             # %cond.end373
                                        #   in Loop: Header=BB81_106 Depth=2
.LBB81_116:                             # %cond.end375
                                        #   in Loop: Header=BB81_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-28(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB81_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB81_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB81_119
.LBB81_118:                             # %cond.false394
                                        #   in Loop: Header=BB81_106 Depth=2
	movl	-28(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB81_119:                             # %cond.end400
                                        #   in Loop: Header=BB81_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB81_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB81_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB81_125
.LBB81_121:                             # %cond.false406
                                        #   in Loop: Header=BB81_106 Depth=2
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB81_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB81_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB81_124
.LBB81_123:                             # %cond.false415
                                        #   in Loop: Header=BB81_106 Depth=2
	movl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB81_124:                             # %cond.end421
                                        #   in Loop: Header=BB81_106 Depth=2
.LBB81_125:                             # %cond.end423
                                        #   in Loop: Header=BB81_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-32(%rbp), %esi
	movslq	-4(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-8(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB81_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB81_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB81_128
.LBB81_127:                             # %cond.false443
                                        #   in Loop: Header=BB81_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-32(%rbp), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB81_128:                             # %cond.end449
                                        #   in Loop: Header=BB81_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB81_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB81_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB81_134
.LBB81_130:                             # %cond.false455
                                        #   in Loop: Header=BB81_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-32(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB81_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB81_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB81_133
.LBB81_132:                             # %cond.false464
                                        #   in Loop: Header=BB81_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-32(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB81_133:                             # %cond.end470
                                        #   in Loop: Header=BB81_106 Depth=2
.LBB81_134:                             # %cond.end472
                                        #   in Loop: Header=BB81_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB81_106 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_106
.LBB81_136:                             # %for.end487
                                        #   in Loop: Header=BB81_104 Depth=1
	jmp	.LBB81_137
.LBB81_137:                             # %for.inc488
                                        #   in Loop: Header=BB81_104 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_104
.LBB81_138:                             # %for.end490
	jmp	.LBB81_139
.LBB81_139:                             # %if.end491
	cmpl	$1499282465, -72(%rbp)  # imm = 0x595D3C21
	jne	.LBB81_141
.LBB81_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_141:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_140
.Lfunc_end81:
	.size	ChromaResidualCoding.40, .Lfunc_end81-ChromaResidualCoding.40
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.41   # -- Begin function writeIntra4x4Modes.41
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.41,@function
writeIntra4x4Modes.41:                  # @writeIntra4x4Modes.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$527670387, -84(%rbp)   # imm = 0x1F739C73
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB82_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_9 Depth 2
                                        #       Child Loop BB82_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB82_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB82_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB82_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB82_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB82_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB82_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB82_8
.LBB82_5:                               # %lor.lhs.false10
                                        #   in Loop: Header=BB82_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB82_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB82_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB82_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB82_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB82_17
.LBB82_8:                               # %if.then
                                        #   in Loop: Header=BB82_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -72(%rbp)
	movl	%ecx, -80(%rbp)
	movl	-80(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movl	-72(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -76(%rbp)
	movl	$0, -28(%rbp)
.LBB82_9:                               # %for.cond24
                                        #   Parent Loop BB82_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_11 Depth 3
	cmpl	$2, -28(%rbp)
	jge	.LBB82_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB82_9 Depth=2
	movl	$0, -12(%rbp)
.LBB82_11:                              # %for.cond27
                                        #   Parent Loop BB82_1 Depth=1
                                        #     Parent Loop BB82_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB82_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB82_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB82_11 Depth=3
	movl	-68(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_11
.LBB82_14:                              # %for.end
                                        #   in Loop: Header=BB82_9 Depth=2
	jmp	.LBB82_15
.LBB82_15:                              # %for.inc42
                                        #   in Loop: Header=BB82_9 Depth=2
	movl	-76(%rbp), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB82_9
.LBB82_16:                              # %for.end44
                                        #   in Loop: Header=BB82_1 Depth=1
	jmp	.LBB82_17
.LBB82_17:                              # %if.end
                                        #   in Loop: Header=BB82_1 Depth=1
	jmp	.LBB82_18
.LBB82_18:                              # %for.inc45
                                        #   in Loop: Header=BB82_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_1
.LBB82_19:                              # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB82_20:                              # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB82_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB82_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB82_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB82_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB82_23:                              # %if.end57
                                        #   in Loop: Header=BB82_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB82_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB82_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB82_26
.LBB82_25:                              # %if.else
                                        #   in Loop: Header=BB82_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB82_26:                              # %if.end65
                                        #   in Loop: Header=BB82_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB82_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_20
.LBB82_28:                              # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$527670387, -84(%rbp)   # imm = 0x1F739C73
	jne	.LBB82_30
.LBB82_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_30:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_29
.Lfunc_end82:
	.size	writeIntra4x4Modes.41, .Lfunc_end82-writeIntra4x4Modes.41
	.cfi_endproc
                                        # -- End function
	.globl	BType2CtxRef.42         # -- Begin function BType2CtxRef.42
	.p2align	4, 0x90
	.type	BType2CtxRef.42,@function
BType2CtxRef.42:                        # @BType2CtxRef.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1597455624, -20(%rbp)  # imm = 0x5F373D08
	movl	%edi, -16(%rbp)
	cmpl	$4, -16(%rbp)
	jge	.LBB83_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB83_3
.LBB83_2:                               # %if.else
	movl	$1, -12(%rbp)
.LBB83_3:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$1597455624, -20(%rbp)  # imm = 0x5F373D08
	jne	.LBB83_5
.LBB83_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_4
.Lfunc_end83:
	.size	BType2CtxRef.42, .Lfunc_end83-BType2CtxRef.42
	.cfi_endproc
                                        # -- End function
	.globl	B8Mode2Value.43         # -- Begin function B8Mode2Value.43
	.p2align	4, 0x90
	.type	B8Mode2Value.43,@function
B8Mode2Value.43:                        # @B8Mode2Value.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$951823742, -20(%rbp)   # imm = 0x38BBAD7E
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB84_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_3
.LBB84_2:                               # %if.else
	movslq	-12(%rbp), %rax
	movl	B8Mode2Value.b8start(,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	B8Mode2Value.b8inc(,%rcx,4), %ecx
	imull	-24(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
.LBB84_3:                               # %return
	movl	-16(%rbp), %ebx
	cmpl	$951823742, -20(%rbp)   # imm = 0x38BBAD7E
	jne	.LBB84_5
.LBB84_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_4
.Lfunc_end84:
	.size	B8Mode2Value.43, .Lfunc_end84-B8Mode2Value.43
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.44    # -- Begin function LumaPrediction4x4.44
	.p2align	4, 0x90
	.type	LumaPrediction4x4.44,@function
LumaPrediction4x4.44:                   # @LumaPrediction4x4.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$315524274, -104(%rbp)  # imm = 0x12CE84B2
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -52(%rbp)
	movl	%r8d, -76(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -72(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB85_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB85_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB85_6
.LBB85_3:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB85_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB85_5:                               # %land.end
.LBB85_6:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB85_9
# %bb.7:                                # %land.lhs.true11
	movq	-96(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB85_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB85_10
.LBB85_9:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB85_10
.LBB85_10:                              # %cond.end
	movl	%ecx, -56(%rbp)
	movq	-96(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB85_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB85_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB85_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -24(%rbp)
	jne	.LBB85_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -52(%rbp)
	jne	.LBB85_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -76(%rbp)
	jne	.LBB85_20
# %bb.16:                               # %if.then
	movq	-96(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB85_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB85_19
.LBB85_18:                              # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB85_19:                              # %cond.end38
	movq	%rax, -88(%rbp)
.LBB85_20:                              # %if.end
	cmpl	$0, -24(%rbp)
	je	.LBB85_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -24(%rbp)
	jne	.LBB85_23
.LBB85_22:                              # %if.then45
	movl	-64(%rbp), %esi
	movl	-60(%rbp), %edx
	movq	-88(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-56(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB85_23:                              # %if.end58
	cmpl	$1, -24(%rbp)
	je	.LBB85_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -24(%rbp)
	jne	.LBB85_26
.LBB85_25:                              # %if.then64
	movl	-64(%rbp), %esi
	movl	-60(%rbp), %edx
	movq	-88(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB85_26:                              # %if.end77
	cmpl	$0, -100(%rbp)
	je	.LBB85_58
# %bb.27:                               # %if.then79
	cmpl	$2, -24(%rbp)
	jne	.LBB85_37
# %bb.28:                               # %if.then82
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB85_29:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_31 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB85_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB85_29 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB85_31:                              # %for.cond85
                                        #   Parent Loop BB85_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB85_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB85_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB85_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_31
.LBB85_34:                              # %for.end
                                        #   in Loop: Header=BB85_29 Depth=1
	jmp	.LBB85_35
.LBB85_35:                              # %for.inc125
                                        #   in Loop: Header=BB85_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_29
.LBB85_36:                              # %for.end127
	jmp	.LBB85_57
.LBB85_37:                              # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB85_47
# %bb.38:                               # %if.then130
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB85_39:                              # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_41 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB85_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB85_39 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB85_41:                              # %for.cond135
                                        #   Parent Loop BB85_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB85_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB85_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB85_41 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_41
.LBB85_44:                              # %for.end161
                                        #   in Loop: Header=BB85_39 Depth=1
	jmp	.LBB85_45
.LBB85_45:                              # %for.inc162
                                        #   in Loop: Header=BB85_39 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_39
.LBB85_46:                              # %for.end164
	jmp	.LBB85_56
.LBB85_47:                              # %if.else165
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB85_48:                              # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_50 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB85_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB85_48 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB85_50:                              # %for.cond170
                                        #   Parent Loop BB85_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB85_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB85_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB85_50 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_50
.LBB85_53:                              # %for.end196
                                        #   in Loop: Header=BB85_48 Depth=1
	jmp	.LBB85_54
.LBB85_54:                              # %for.inc197
                                        #   in Loop: Header=BB85_48 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_48
.LBB85_55:                              # %for.end199
	jmp	.LBB85_56
.LBB85_56:                              # %if.end200
	jmp	.LBB85_57
.LBB85_57:                              # %if.end201
	jmp	.LBB85_89
.LBB85_58:                              # %if.else202
	cmpl	$2, -24(%rbp)
	jne	.LBB85_68
# %bb.59:                               # %if.then205
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB85_60:                              # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_62 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB85_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB85_60 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB85_62:                              # %for.cond210
                                        #   Parent Loop BB85_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB85_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB85_62 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB85_62 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_62
.LBB85_65:                              # %for.end226
                                        #   in Loop: Header=BB85_60 Depth=1
	jmp	.LBB85_66
.LBB85_66:                              # %for.inc227
                                        #   in Loop: Header=BB85_60 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_60
.LBB85_67:                              # %for.end229
	jmp	.LBB85_88
.LBB85_68:                              # %if.else230
	cmpl	$0, -24(%rbp)
	jne	.LBB85_78
# %bb.69:                               # %if.then233
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB85_70:                              # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_72 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB85_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB85_70 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB85_72:                              # %for.cond238
                                        #   Parent Loop BB85_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB85_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB85_72 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB85_72 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_72
.LBB85_75:                              # %for.end251
                                        #   in Loop: Header=BB85_70 Depth=1
	jmp	.LBB85_76
.LBB85_76:                              # %for.inc252
                                        #   in Loop: Header=BB85_70 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_70
.LBB85_77:                              # %for.end254
	jmp	.LBB85_87
.LBB85_78:                              # %if.else255
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB85_79:                              # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_81 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB85_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB85_79 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB85_81:                              # %for.cond260
                                        #   Parent Loop BB85_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB85_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB85_81 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB85_81 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_81
.LBB85_84:                              # %for.end273
                                        #   in Loop: Header=BB85_79 Depth=1
	jmp	.LBB85_85
.LBB85_85:                              # %for.inc274
                                        #   in Loop: Header=BB85_79 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_79
.LBB85_86:                              # %for.end276
	jmp	.LBB85_87
.LBB85_87:                              # %if.end277
	jmp	.LBB85_88
.LBB85_88:                              # %if.end278
	jmp	.LBB85_89
.LBB85_89:                              # %if.end279
	cmpl	$315524274, -104(%rbp)  # imm = 0x12CE84B2
	jne	.LBB85_91
.LBB85_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_91:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_90
.Lfunc_end85:
	.size	LumaPrediction4x4.44, .Lfunc_end85-LumaPrediction4x4.44
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.45 # -- Begin function IntraChromaPrediction4x4.45
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.45,@function
IntraChromaPrediction4x4.45:            # @IntraChromaPrediction4x4.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1093357469, -20(%rbp)  # imm = 0x412B4F9D
	movl	%edi, -28(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -24(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB86_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_3 Depth 2
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB86_3:                               # %for.cond1
                                        #   Parent Loop BB86_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB86_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-28(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB86_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_3
.LBB86_6:                               # %for.end
                                        #   in Loop: Header=BB86_1 Depth=1
	jmp	.LBB86_7
.LBB86_7:                               # %for.inc17
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_1
.LBB86_8:                               # %for.end19
	cmpl	$1093357469, -20(%rbp)  # imm = 0x412B4F9D
	jne	.LBB86_10
.LBB86_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_9
.Lfunc_end86:
	.size	IntraChromaPrediction4x4.45, .Lfunc_end86-IntraChromaPrediction4x4.45
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8.46 # -- Begin function LumaResidualCoding8x8.46
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.46,@function
LumaResidualCoding8x8.46:               # @LumaResidualCoding8x8.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$2088340314, -120(%rbp) # imm = 0x7C798B5A
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movl	%edx, -36(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -80(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -28(%rbp)
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -40(%rbp)
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -116(%rbp)
	cmpl	$0, -64(%rbp)
	jne	.LBB87_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -80(%rbp)
	jne	.LBB87_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB87_3:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB87_5
# %bb.4:                                # %if.then
	movl	$1, -116(%rbp)
.LBB87_5:                               # %if.end
	movl	$0, -72(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB87_6:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_8 Depth 2
                                        #       Child Loop BB87_11 Depth 3
                                        #         Child Loop BB87_13 Depth 4
                                        #       Child Loop BB87_19 Depth 3
                                        #         Child Loop BB87_21 Depth 4
                                        #       Child Loop BB87_29 Depth 3
                                        #         Child Loop BB87_31 Depth 4
                                        #       Child Loop BB87_40 Depth 3
                                        #         Child Loop BB87_42 Depth 4
                                        #       Child Loop BB87_57 Depth 3
                                        #         Child Loop BB87_59 Depth 4
                                        #       Child Loop BB87_67 Depth 3
                                        #         Child Loop BB87_69 Depth 4
                                        #       Child Loop BB87_84 Depth 3
                                        #         Child Loop BB87_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB87_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -60(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB87_8:                               # %for.cond9
                                        #   Parent Loop BB87_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_11 Depth 3
                                        #         Child Loop BB87_13 Depth 4
                                        #       Child Loop BB87_19 Depth 3
                                        #         Child Loop BB87_21 Depth 4
                                        #       Child Loop BB87_29 Depth 3
                                        #         Child Loop BB87_31 Depth 4
                                        #       Child Loop BB87_40 Depth 3
                                        #         Child Loop BB87_42 Depth 4
                                        #       Child Loop BB87_57 Depth 3
                                        #         Child Loop BB87_59 Depth 4
                                        #       Child Loop BB87_67 Depth 3
                                        #         Child Loop BB87_69 Depth 4
                                        #       Child Loop BB87_84 Depth 3
                                        #         Child Loop BB87_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB87_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB87_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB87_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-64(%rbp), %r8d
	movl	-80(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB87_11:                              # %for.cond16
                                        #   Parent Loop BB87_6 Depth=1
                                        #     Parent Loop BB87_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_13 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB87_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB87_11 Depth=3
	movl	$0, -16(%rbp)
.LBB87_13:                              # %for.cond20
                                        #   Parent Loop BB87_6 Depth=1
                                        #     Parent Loop BB87_8 Depth=2
                                        #       Parent Loop BB87_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB87_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB87_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB87_13 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_13
.LBB87_16:                              # %for.end
                                        #   in Loop: Header=BB87_11 Depth=3
	jmp	.LBB87_17
.LBB87_17:                              # %for.inc37
                                        #   in Loop: Header=BB87_11 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_11
.LBB87_18:                              # %for.end39
                                        #   in Loop: Header=BB87_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-64(%rbp), %r8d
	movl	-80(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB87_19:                              # %for.cond41
                                        #   Parent Loop BB87_6 Depth=1
                                        #     Parent Loop BB87_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_21 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB87_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB87_19 Depth=3
	movl	$0, -16(%rbp)
.LBB87_21:                              # %for.cond45
                                        #   Parent Loop BB87_6 Depth=1
                                        #     Parent Loop BB87_8 Depth=2
                                        #       Parent Loop BB87_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB87_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB87_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB87_21 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_21
.LBB87_24:                              # %for.end65
                                        #   in Loop: Header=BB87_19 Depth=3
	jmp	.LBB87_25
.LBB87_25:                              # %for.inc66
                                        #   in Loop: Header=BB87_19 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_19
.LBB87_26:                              # %for.end68
                                        #   in Loop: Header=BB87_8 Depth=2
	jmp	.LBB87_27
.LBB87_27:                              # %if.end69
                                        #   in Loop: Header=BB87_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-64(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB87_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB87_8 Depth=2
	movl	$0, -12(%rbp)
.LBB87_29:                              # %for.cond74
                                        #   Parent Loop BB87_6 Depth=1
                                        #     Parent Loop BB87_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_31 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB87_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB87_29 Depth=3
	movl	$0, -16(%rbp)
.LBB87_31:                              # %for.cond78
                                        #   Parent Loop BB87_6 Depth=1
                                        #     Parent Loop BB87_8 Depth=2
                                        #       Parent Loop BB87_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB87_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB87_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB87_31 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_31
.LBB87_34:                              # %for.end98
                                        #   in Loop: Header=BB87_29 Depth=3
	jmp	.LBB87_35
.LBB87_35:                              # %for.inc99
                                        #   in Loop: Header=BB87_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_29
.LBB87_36:                              # %for.end101
                                        #   in Loop: Header=BB87_8 Depth=2
	jmp	.LBB87_37
.LBB87_37:                              # %if.end102
                                        #   in Loop: Header=BB87_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB87_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB87_8 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB87_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB87_8 Depth=2
	movl	$0, -12(%rbp)
.LBB87_40:                              # %for.cond108
                                        #   Parent Loop BB87_6 Depth=1
                                        #     Parent Loop BB87_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_42 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB87_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB87_40 Depth=3
	movl	$0, -16(%rbp)
.LBB87_42:                              # %for.cond112
                                        #   Parent Loop BB87_6 Depth=1
                                        #     Parent Loop BB87_8 Depth=2
                                        #       Parent Loop BB87_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB87_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB87_42 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB87_42 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_42
.LBB87_45:                              # %for.end137
                                        #   in Loop: Header=BB87_40 Depth=3
	jmp	.LBB87_46
.LBB87_46:                              # %for.inc138
                                        #   in Loop: Header=BB87_40 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_40
.LBB87_47:                              # %for.end140
                                        #   in Loop: Header=BB87_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB87_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB87_8 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB87_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB87_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB87_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB87_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-28(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -32(%rbp)
	jmp	.LBB87_52
.LBB87_51:                              # %if.else
                                        #   in Loop: Header=BB87_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-28(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -32(%rbp)
.LBB87_52:                              # %if.end151
                                        #   in Loop: Header=BB87_8 Depth=2
	cmpl	$0, -32(%rbp)
	je	.LBB87_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB87_8 Depth=2
	movl	-88(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-84(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB87_54:                              # %if.end157
                                        #   in Loop: Header=BB87_8 Depth=2
	jmp	.LBB87_55
.LBB87_55:                              # %if.end158
                                        #   in Loop: Header=BB87_8 Depth=2
	jmp	.LBB87_65
.LBB87_56:                              # %if.else159
                                        #   in Loop: Header=BB87_8 Depth=2
	movl	$0, -12(%rbp)
.LBB87_57:                              # %for.cond160
                                        #   Parent Loop BB87_6 Depth=1
                                        #     Parent Loop BB87_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB87_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB87_57 Depth=3
	movl	$0, -16(%rbp)
.LBB87_59:                              # %for.cond164
                                        #   Parent Loop BB87_6 Depth=1
                                        #     Parent Loop BB87_8 Depth=2
                                        #       Parent Loop BB87_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB87_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB87_59 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-60(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB87_59 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_59
.LBB87_62:                              # %for.end193
                                        #   in Loop: Header=BB87_57 Depth=3
	jmp	.LBB87_63
.LBB87_63:                              # %for.inc194
                                        #   in Loop: Header=BB87_57 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_57
.LBB87_64:                              # %for.end196
                                        #   in Loop: Header=BB87_8 Depth=2
	jmp	.LBB87_65
.LBB87_65:                              # %if.end197
                                        #   in Loop: Header=BB87_8 Depth=2
	jmp	.LBB87_95
.LBB87_66:                              # %if.else198
                                        #   in Loop: Header=BB87_8 Depth=2
	movl	$0, -12(%rbp)
.LBB87_67:                              # %for.cond199
                                        #   Parent Loop BB87_6 Depth=1
                                        #     Parent Loop BB87_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_69 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB87_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB87_67 Depth=3
	movl	$0, -16(%rbp)
.LBB87_69:                              # %for.cond203
                                        #   Parent Loop BB87_6 Depth=1
                                        #     Parent Loop BB87_8 Depth=2
                                        #       Parent Loop BB87_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB87_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB87_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-52(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-56(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-16(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-12(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -96(%rbp)
	movq	imgY_org, %rdx
	movl	-52(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-56(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-16(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -124(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-52(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-56(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -128(%rbp)
	movl	-128(%rbp), %eax
	subl	-96(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-96(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-124(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-92(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -76(%rbp)
	jne	.LBB87_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB87_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB87_73
.LBB87_72:                              # %if.else300
                                        #   in Loop: Header=BB87_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-60(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB87_73:                              # %if.end314
                                        #   in Loop: Header=BB87_69 Depth=4
	jmp	.LBB87_74
.LBB87_74:                              # %for.inc315
                                        #   in Loop: Header=BB87_69 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_69
.LBB87_75:                              # %for.end317
                                        #   in Loop: Header=BB87_67 Depth=3
	jmp	.LBB87_76
.LBB87_76:                              # %for.inc318
                                        #   in Loop: Header=BB87_67 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_67
.LBB87_77:                              # %for.end320
                                        #   in Loop: Header=BB87_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB87_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB87_8 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB87_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB87_8 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB87_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB87_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB87_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB87_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-28(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -32(%rbp)
	jmp	.LBB87_83
.LBB87_82:                              # %if.else334
                                        #   in Loop: Header=BB87_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-28(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -32(%rbp)
.LBB87_83:                              # %if.end336
                                        #   in Loop: Header=BB87_8 Depth=2
	movl	$0, -12(%rbp)
.LBB87_84:                              # %for.cond337
                                        #   Parent Loop BB87_6 Depth=1
                                        #     Parent Loop BB87_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_86 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB87_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB87_84 Depth=3
	movl	$0, -16(%rbp)
.LBB87_86:                              # %for.cond341
                                        #   Parent Loop BB87_6 Depth=1
                                        #     Parent Loop BB87_8 Depth=2
                                        #       Parent Loop BB87_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB87_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB87_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB87_86 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_86
.LBB87_89:                              # %for.end358
                                        #   in Loop: Header=BB87_84 Depth=3
	jmp	.LBB87_90
.LBB87_90:                              # %for.inc359
                                        #   in Loop: Header=BB87_84 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_84
.LBB87_91:                              # %for.end361
                                        #   in Loop: Header=BB87_8 Depth=2
	cmpl	$0, -32(%rbp)
	je	.LBB87_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB87_8 Depth=2
	movl	-88(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-84(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB87_93:                              # %if.end368
                                        #   in Loop: Header=BB87_8 Depth=2
	jmp	.LBB87_94
.LBB87_94:                              # %if.end369
                                        #   in Loop: Header=BB87_8 Depth=2
	jmp	.LBB87_95
.LBB87_95:                              # %if.end370
                                        #   in Loop: Header=BB87_8 Depth=2
	jmp	.LBB87_96
.LBB87_96:                              # %for.inc371
                                        #   in Loop: Header=BB87_8 Depth=2
	movl	-60(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_8
.LBB87_97:                              # %for.end374
                                        #   in Loop: Header=BB87_6 Depth=1
	jmp	.LBB87_98
.LBB87_98:                              # %for.inc375
                                        #   in Loop: Header=BB87_6 Depth=1
	movl	-72(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -72(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_6
.LBB87_99:                              # %for.end378
	cmpl	$0, -76(%rbp)
	je	.LBB87_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB87_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -68(%rbp)
	jne	.LBB87_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB87_104
# %bb.103:                              # %if.then390
	movl	-36(%rbp), %edi
	leaq	-28(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -32(%rbp)
.LBB87_104:                             # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB87_114
# %bb.105:                              # %if.then395
	movl	$0, -12(%rbp)
.LBB87_106:                             # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_108 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB87_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB87_106 Depth=1
	movl	$0, -16(%rbp)
.LBB87_108:                             # %for.cond400
                                        #   Parent Loop BB87_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB87_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB87_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB87_108 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_108
.LBB87_111:                             # %for.end417
                                        #   in Loop: Header=BB87_106 Depth=1
	jmp	.LBB87_112
.LBB87_112:                             # %for.inc418
                                        #   in Loop: Header=BB87_106 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_106
.LBB87_113:                             # %for.end420
	jmp	.LBB87_114
.LBB87_114:                             # %if.end421
	cmpl	$0, -32(%rbp)
	je	.LBB87_116
# %bb.115:                              # %if.then423
	movl	-36(%rbp), %ecx
	shll	$2, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-84(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB87_116:                             # %if.end431
	jmp	.LBB87_117
.LBB87_117:                             # %if.end432
	jmp	.LBB87_118
.LBB87_118:                             # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB87_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -68(%rbp)
	jne	.LBB87_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -28(%rbp)
	jg	.LBB87_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB87_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB87_145
.LBB87_123:                             # %if.then448
	movl	$0, -28(%rbp)
	movl	$63, %eax
	subl	-84(%rbp), %eax
	movq	-104(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-36(%rbp), %ecx
	shll	$2, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-112(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB87_124:                             # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_126 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB87_124 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB87_126:                             # %for.cond462
                                        #   Parent Loop BB87_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB87_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB87_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB87_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB87_130
.LBB87_129:                             # %if.else481
                                        #   in Loop: Header=BB87_126 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB87_130:                             # %if.end486
                                        #   in Loop: Header=BB87_126 Depth=2
	jmp	.LBB87_131
.LBB87_131:                             # %for.inc487
                                        #   in Loop: Header=BB87_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_126
.LBB87_132:                             # %for.end489
                                        #   in Loop: Header=BB87_124 Depth=1
	jmp	.LBB87_133
.LBB87_133:                             # %for.inc490
                                        #   in Loop: Header=BB87_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_124
.LBB87_134:                             # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB87_144
# %bb.135:                              # %if.then496
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB87_136:                             # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_138 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB87_136 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB87_138:                             # %for.cond502
                                        #   Parent Loop BB87_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB87_138 Depth=2
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB87_138 Depth=2
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_138
.LBB87_141:                             # %for.end509
                                        #   in Loop: Header=BB87_136 Depth=1
	jmp	.LBB87_142
.LBB87_142:                             # %for.inc510
                                        #   in Loop: Header=BB87_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_136
.LBB87_143:                             # %for.end512
	jmp	.LBB87_144
.LBB87_144:                             # %if.end513
	jmp	.LBB87_145
.LBB87_145:                             # %if.end514
	movl	-28(%rbp), %ebx
	cmpl	$2088340314, -120(%rbp) # imm = 0x7C798B5A
	jne	.LBB87_147
.LBB87_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_147:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_146
.Lfunc_end87:
	.size	LumaResidualCoding8x8.46, .Lfunc_end87-LumaResidualCoding8x8.46
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL.47  # -- Begin function writeMotionInfo2NAL.47
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.47,@function
writeMotionInfo2NAL.47:                 # @writeMotionInfo2NAL.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1767132739, -56(%rbp)  # imm = 0x69544E43
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB88_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB88_3
.LBB88_2:                               # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB88_3:                               # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB88_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB88_6
.LBB88_5:                               # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB88_6:                               # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB88_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB88_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB88_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB88_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB88_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB88_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB88_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB88_39
.LBB88_14:                              # %if.then42
	movl	$0, -12(%rbp)
.LBB88_15:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_17 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB88_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB88_15 Depth=1
	movl	$0, -16(%rbp)
.LBB88_17:                              # %for.cond45
                                        #   Parent Loop BB88_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB88_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB88_17 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB88_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB88_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB88_22
.LBB88_20:                              # %land.lhs.true59
                                        #   in Loop: Header=BB88_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB88_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB88_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB88_22:                              # %if.end
                                        #   in Loop: Header=BB88_17 Depth=2
	jmp	.LBB88_23
.LBB88_23:                              # %for.inc
                                        #   in Loop: Header=BB88_17 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_17
.LBB88_24:                              # %for.end
                                        #   in Loop: Header=BB88_15 Depth=1
	jmp	.LBB88_25
.LBB88_25:                              # %for.inc79
                                        #   in Loop: Header=BB88_15 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_15
.LBB88_26:                              # %for.end81
	movl	$0, -12(%rbp)
.LBB88_27:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_29 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB88_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB88_27 Depth=1
	movl	$0, -16(%rbp)
.LBB88_29:                              # %for.cond86
                                        #   Parent Loop BB88_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB88_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB88_29 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB88_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB88_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB88_34
.LBB88_32:                              # %land.lhs.true103
                                        #   in Loop: Header=BB88_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB88_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB88_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB88_34:                              # %if.end126
                                        #   in Loop: Header=BB88_29 Depth=2
	jmp	.LBB88_35
.LBB88_35:                              # %for.inc127
                                        #   in Loop: Header=BB88_29 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_29
.LBB88_36:                              # %for.end129
                                        #   in Loop: Header=BB88_27 Depth=1
	jmp	.LBB88_37
.LBB88_37:                              # %for.inc130
                                        #   in Loop: Header=BB88_27 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_27
.LBB88_38:                              # %for.end132
	jmp	.LBB88_39
.LBB88_39:                              # %if.end133
	jmp	.LBB88_40
.LBB88_40:                              # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB88_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB88_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB88_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB88_57
# %bb.44:                               # %if.then150
	movl	$0, -12(%rbp)
.LBB88_45:                              # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_47 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB88_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB88_45 Depth=1
	movl	$0, -16(%rbp)
.LBB88_47:                              # %for.cond155
                                        #   Parent Loop BB88_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB88_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB88_47 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB88_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB88_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB88_52
.LBB88_50:                              # %land.lhs.true172
                                        #   in Loop: Header=BB88_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB88_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB88_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB88_52:                              # %if.end197
                                        #   in Loop: Header=BB88_47 Depth=2
	jmp	.LBB88_53
.LBB88_53:                              # %for.inc198
                                        #   in Loop: Header=BB88_47 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_47
.LBB88_54:                              # %for.end200
                                        #   in Loop: Header=BB88_45 Depth=1
	jmp	.LBB88_55
.LBB88_55:                              # %for.inc201
                                        #   in Loop: Header=BB88_45 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_45
.LBB88_56:                              # %for.end203
	jmp	.LBB88_57
.LBB88_57:                              # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB88_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB88_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB88_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB88_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB88_75
# %bb.62:                               # %if.then222
	movl	$0, -12(%rbp)
.LBB88_63:                              # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_65 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB88_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB88_63 Depth=1
	movl	$0, -16(%rbp)
.LBB88_65:                              # %for.cond227
                                        #   Parent Loop BB88_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB88_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB88_65 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB88_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB88_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB88_70
.LBB88_68:                              # %land.lhs.true244
                                        #   in Loop: Header=BB88_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB88_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB88_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB88_70:                              # %if.end269
                                        #   in Loop: Header=BB88_65 Depth=2
	jmp	.LBB88_71
.LBB88_71:                              # %for.inc270
                                        #   in Loop: Header=BB88_65 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_65
.LBB88_72:                              # %for.end272
                                        #   in Loop: Header=BB88_63 Depth=1
	jmp	.LBB88_73
.LBB88_73:                              # %for.inc273
                                        #   in Loop: Header=BB88_63 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_63
.LBB88_74:                              # %for.end275
	jmp	.LBB88_75
.LBB88_75:                              # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$1767132739, -56(%rbp)  # imm = 0x69544E43
	jne	.LBB88_77
.LBB88_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_77:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_76
.Lfunc_end88:
	.size	writeMotionInfo2NAL.47, .Lfunc_end88-writeMotionInfo2NAL.47
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.48   # -- Begin function writeIntra4x4Modes.48
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.48,@function
writeIntra4x4Modes.48:                  # @writeIntra4x4Modes.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$408294391, -72(%rbp)   # imm = 0x185613F7
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB89_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_9 Depth 2
                                        #       Child Loop BB89_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB89_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB89_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB89_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB89_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB89_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB89_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB89_8
.LBB89_5:                               # %lor.lhs.false10
                                        #   in Loop: Header=BB89_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB89_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB89_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB89_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB89_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB89_17
.LBB89_8:                               # %if.then
                                        #   in Loop: Header=BB89_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -80(%rbp)
	movl	%ecx, -84(%rbp)
	movl	-84(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movl	-80(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -76(%rbp)
	movl	$0, -28(%rbp)
.LBB89_9:                               # %for.cond24
                                        #   Parent Loop BB89_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB89_11 Depth 3
	cmpl	$2, -28(%rbp)
	jge	.LBB89_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB89_9 Depth=2
	movl	$0, -12(%rbp)
.LBB89_11:                              # %for.cond27
                                        #   Parent Loop BB89_1 Depth=1
                                        #     Parent Loop BB89_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB89_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB89_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB89_11 Depth=3
	movl	-68(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_11
.LBB89_14:                              # %for.end
                                        #   in Loop: Header=BB89_9 Depth=2
	jmp	.LBB89_15
.LBB89_15:                              # %for.inc42
                                        #   in Loop: Header=BB89_9 Depth=2
	movl	-76(%rbp), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB89_9
.LBB89_16:                              # %for.end44
                                        #   in Loop: Header=BB89_1 Depth=1
	jmp	.LBB89_17
.LBB89_17:                              # %if.end
                                        #   in Loop: Header=BB89_1 Depth=1
	jmp	.LBB89_18
.LBB89_18:                              # %for.inc45
                                        #   in Loop: Header=BB89_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_1
.LBB89_19:                              # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB89_20:                              # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB89_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB89_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB89_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB89_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB89_23:                              # %if.end57
                                        #   in Loop: Header=BB89_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB89_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB89_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB89_26
.LBB89_25:                              # %if.else
                                        #   in Loop: Header=BB89_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB89_26:                              # %if.end65
                                        #   in Loop: Header=BB89_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB89_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_20
.LBB89_28:                              # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$408294391, -72(%rbp)   # imm = 0x185613F7
	jne	.LBB89_30
.LBB89_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_30:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_29
.Lfunc_end89:
	.size	writeIntra4x4Modes.48, .Lfunc_end89-writeIntra4x4Modes.48
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock.49 # -- Begin function terminate_macroblock.49
	.p2align	4, 0x90
	.type	terminate_macroblock.49,@function
terminate_macroblock.49:                # @terminate_macroblock.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1020191849, -112(%rbp) # imm = 0x3CCEE469
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-96(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB90_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB90_2:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB90_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB90_5
.LBB90_4:                               # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB90_8
.LBB90_5:                               # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB90_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB90_7:                               # %if.end
	jmp	.LBB90_8
.LBB90_8:                               # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB90_45
# %bb.9:                                # %if.end18
	movq	.LJTI90_0(,%rax,8), %rax
	jmpq	*%rax
.LBB90_10:                              # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB90_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB90_12:                              # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB90_46
.LBB90_13:                              # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB90_46
.LBB90_14:                              # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB90_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB90_16:                              # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB90_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB90_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB90_22
.LBB90_19:                              # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB90_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB90_21:                              # %if.end64
	jmp	.LBB90_22
.LBB90_22:                              # %if.end65
	jmp	.LBB90_23
.LBB90_23:                              # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB90_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB90_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB90_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB90_27:                              # %if.end79
	jmp	.LBB90_28
.LBB90_28:                              # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB90_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB90_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB90_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB90_32:                              # %if.end89
	jmp	.LBB90_33
.LBB90_33:                              # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB90_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB90_35:                              # %if.end95
	jmp	.LBB90_46
.LBB90_36:                              # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB90_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB90_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB90_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB90_40:                              # %if.end106
	jmp	.LBB90_41
.LBB90_41:                              # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB90_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB90_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB90_44:                              # %if.end118
	jmp	.LBB90_46
.LBB90_45:                              # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB90_46:                              # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB90_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB90_48:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB90_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB90_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB90_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB90_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB90_51:                              # %if.end139
                                        #   in Loop: Header=BB90_48 Depth=1
	jmp	.LBB90_52
.LBB90_52:                              # %for.inc
                                        #   in Loop: Header=BB90_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB90_48
.LBB90_53:                              # %for.end
	jmp	.LBB90_54
.LBB90_54:                              # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB90_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB90_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB90_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB90_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB90_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB90_60:                              # %if.end174
	jmp	.LBB90_62
.LBB90_61:                              # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB90_62:                              # %if.end188
	jmp	.LBB90_63
.LBB90_63:                              # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB90_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB90_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -108(%rbp)
	jne	.LBB90_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-96(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB90_67:                              # %if.end218
	cmpl	$1020191849, -112(%rbp) # imm = 0x3CCEE469
	jne	.LBB90_69
.LBB90_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_69:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_68
.Lfunc_end90:
	.size	terminate_macroblock.49, .Lfunc_end90-terminate_macroblock.49
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI90_0:
	.quad	.LBB90_10
	.quad	.LBB90_13
	.quad	.LBB90_14
	.quad	.LBB90_36
                                        # -- End function
	.text
	.globl	find_sad_16x16.50       # -- Begin function find_sad_16x16.50
	.p2align	4, 0x90
	.type	find_sad_16x16.50,@function
find_sad_16x16.50:                      # @find_sad_16x16.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$1141060261, -80(%rbp)  # imm = 0x440332A5
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB91_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB91_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB91_1 Depth=1
	movl	-72(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB91_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_1
.LBB91_4:                               # %for.end
	movl	-72(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB91_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB91_20
.LBB91_6:                               # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB91_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB91_9
.LBB91_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB91_9
.LBB91_9:                               # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -64(%rbp)
.LBB91_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB91_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB91_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB91_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB91_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB91_14
.LBB91_13:                              # %cond.false23
                                        #   in Loop: Header=BB91_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB91_14
.LBB91_14:                              # %cond.end24
                                        #   in Loop: Header=BB91_10 Depth=1
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB91_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_10
.LBB91_16:                              # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB91_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB91_19
.LBB91_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB91_19
.LBB91_19:                              # %cond.end39
	movl	%eax, -76(%rbp)
.LBB91_20:                              # %if.end
	movl	$999999, -60(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB91_21:                              # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_42 Depth 2
                                        #       Child Loop BB91_44 Depth 3
                                        #     Child Loop BB91_50 Depth 2
                                        #       Child Loop BB91_52 Depth 3
                                        #         Child Loop BB91_54 Depth 4
                                        #         Child Loop BB91_58 Depth 4
                                        #           Child Loop BB91_60 Depth 5
                                        #     Child Loop BB91_72 Depth 2
                                        #       Child Loop BB91_74 Depth 3
                                        #     Child Loop BB91_80 Depth 2
                                        #     Child Loop BB91_84 Depth 2
                                        #       Child Loop BB91_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB91_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB91_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB91_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB91_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB91_32
.LBB91_24:                              # %if.then46
                                        #   in Loop: Header=BB91_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB91_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB91_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB91_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB91_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB91_28
.LBB91_27:                              # %if.then51
                                        #   in Loop: Header=BB91_21 Depth=1
	jmp	.LBB91_95
.LBB91_28:                              # %if.end52
                                        #   in Loop: Header=BB91_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB91_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB91_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB91_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB91_21 Depth=1
	jmp	.LBB91_95
.LBB91_31:                              # %if.end57
                                        #   in Loop: Header=BB91_21 Depth=1
	jmp	.LBB91_32
.LBB91_32:                              # %if.end58
                                        #   in Loop: Header=BB91_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB91_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB91_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB91_40
.LBB91_34:                              # %lor.lhs.false62
                                        #   in Loop: Header=BB91_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB91_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB91_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB91_40
.LBB91_36:                              # %lor.lhs.false66
                                        #   in Loop: Header=BB91_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB91_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB91_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB91_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB91_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB91_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB91_21 Depth=1
	cmpl	$0, -76(%rbp)
	jne	.LBB91_41
.LBB91_40:                              # %if.then74
                                        #   in Loop: Header=BB91_21 Depth=1
	jmp	.LBB91_94
.LBB91_41:                              # %if.else75
                                        #   in Loop: Header=BB91_21 Depth=1
	movl	$0, -16(%rbp)
.LBB91_42:                              # %for.cond76
                                        #   Parent Loop BB91_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB91_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB91_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB91_42 Depth=2
	movl	$0, -12(%rbp)
.LBB91_44:                              # %for.cond79
                                        #   Parent Loop BB91_21 Depth=1
                                        #     Parent Loop BB91_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB91_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB91_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB91_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_44
.LBB91_47:                              # %for.end115
                                        #   in Loop: Header=BB91_42 Depth=2
	jmp	.LBB91_48
.LBB91_48:                              # %for.inc116
                                        #   in Loop: Header=BB91_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB91_42
.LBB91_49:                              # %for.end118
                                        #   in Loop: Header=BB91_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB91_50:                              # %for.cond119
                                        #   Parent Loop BB91_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB91_52 Depth 3
                                        #         Child Loop BB91_54 Depth 4
                                        #         Child Loop BB91_58 Depth 4
                                        #           Child Loop BB91_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB91_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB91_50 Depth=2
	movl	$0, -24(%rbp)
.LBB91_52:                              # %for.cond123
                                        #   Parent Loop BB91_21 Depth=1
                                        #     Parent Loop BB91_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB91_54 Depth 4
                                        #         Child Loop BB91_58 Depth 4
                                        #           Child Loop BB91_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB91_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB91_52 Depth=3
	movl	$0, -16(%rbp)
.LBB91_54:                              # %for.cond127
                                        #   Parent Loop BB91_21 Depth=1
                                        #     Parent Loop BB91_50 Depth=2
                                        #       Parent Loop BB91_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB91_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB91_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB91_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB91_54
.LBB91_57:                              # %for.end237
                                        #   in Loop: Header=BB91_52 Depth=3
	movl	$0, -12(%rbp)
.LBB91_58:                              # %for.cond238
                                        #   Parent Loop BB91_21 Depth=1
                                        #     Parent Loop BB91_50 Depth=2
                                        #       Parent Loop BB91_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB91_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB91_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB91_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB91_60:                              # %for.cond346
                                        #   Parent Loop BB91_21 Depth=1
                                        #     Parent Loop BB91_50 Depth=2
                                        #       Parent Loop BB91_52 Depth=3
                                        #         Parent Loop BB91_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB91_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB91_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB91_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB91_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB91_63:                              # %if.end363
                                        #   in Loop: Header=BB91_60 Depth=5
	jmp	.LBB91_64
.LBB91_64:                              # %for.inc364
                                        #   in Loop: Header=BB91_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB91_60
.LBB91_65:                              # %for.end366
                                        #   in Loop: Header=BB91_58 Depth=4
	jmp	.LBB91_66
.LBB91_66:                              # %for.inc367
                                        #   in Loop: Header=BB91_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_58
.LBB91_67:                              # %for.end369
                                        #   in Loop: Header=BB91_52 Depth=3
	jmp	.LBB91_68
.LBB91_68:                              # %for.inc370
                                        #   in Loop: Header=BB91_52 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB91_52
.LBB91_69:                              # %for.end372
                                        #   in Loop: Header=BB91_50 Depth=2
	jmp	.LBB91_70
.LBB91_70:                              # %for.inc373
                                        #   in Loop: Header=BB91_50 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB91_50
.LBB91_71:                              # %for.end375
                                        #   in Loop: Header=BB91_21 Depth=1
	movl	$0, -16(%rbp)
.LBB91_72:                              # %for.cond376
                                        #   Parent Loop BB91_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB91_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB91_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB91_72 Depth=2
	movl	$0, -12(%rbp)
.LBB91_74:                              # %for.cond380
                                        #   Parent Loop BB91_21 Depth=1
                                        #     Parent Loop BB91_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB91_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB91_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB91_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_74
.LBB91_77:                              # %for.end397
                                        #   in Loop: Header=BB91_72 Depth=2
	jmp	.LBB91_78
.LBB91_78:                              # %for.inc398
                                        #   in Loop: Header=BB91_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB91_72
.LBB91_79:                              # %for.end400
                                        #   in Loop: Header=BB91_21 Depth=1
	movl	$0, -16(%rbp)
.LBB91_80:                              # %for.cond401
                                        #   Parent Loop BB91_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB91_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB91_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB91_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB91_80
.LBB91_83:                              # %for.end463
                                        #   in Loop: Header=BB91_21 Depth=1
	movl	$0, -12(%rbp)
.LBB91_84:                              # %for.cond464
                                        #   Parent Loop BB91_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB91_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB91_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB91_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB91_86:                              # %for.cond524
                                        #   Parent Loop BB91_21 Depth=1
                                        #     Parent Loop BB91_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB91_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB91_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB91_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB91_86
.LBB91_89:                              # %for.end536
                                        #   in Loop: Header=BB91_84 Depth=2
	jmp	.LBB91_90
.LBB91_90:                              # %for.inc537
                                        #   in Loop: Header=BB91_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_84
.LBB91_91:                              # %for.end539
                                        #   in Loop: Header=BB91_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB91_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB91_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB91_93:                              # %if.end543
                                        #   in Loop: Header=BB91_21 Depth=1
	jmp	.LBB91_94
.LBB91_94:                              # %if.end544
                                        #   in Loop: Header=BB91_21 Depth=1
	jmp	.LBB91_95
.LBB91_95:                              # %for.inc545
                                        #   in Loop: Header=BB91_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB91_21
.LBB91_96:                              # %for.end547
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ebx
	cmpl	$1141060261, -80(%rbp)  # imm = 0x440332A5
	jne	.LBB91_98
.LBB91_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_97
.Lfunc_end91:
	.size	find_sad_16x16.50, .Lfunc_end91-find_sad_16x16.50
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.51 # -- Begin function IntraChromaPrediction4x4.51
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.51,@function
IntraChromaPrediction4x4.51:            # @IntraChromaPrediction4x4.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$993828312, -28(%rbp)   # imm = 0x3B3C9DD8
	movl	%edi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB92_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_3 Depth 2
	movl	-8(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB92_1 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB92_3:                               # %for.cond1
                                        #   Parent Loop BB92_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB92_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB92_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_3
.LBB92_6:                               # %for.end
                                        #   in Loop: Header=BB92_1 Depth=1
	jmp	.LBB92_7
.LBB92_7:                               # %for.inc17
                                        #   in Loop: Header=BB92_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_1
.LBB92_8:                               # %for.end19
	cmpl	$993828312, -28(%rbp)   # imm = 0x3B3C9DD8
	jne	.LBB92_10
.LBB92_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB92_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB92_9
.Lfunc_end92:
	.size	IntraChromaPrediction4x4.51, .Lfunc_end92-IntraChromaPrediction4x4.51
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.52 # -- Begin function IntraChromaPrediction4x4.52
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.52,@function
IntraChromaPrediction4x4.52:            # @IntraChromaPrediction4x4.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$363301840, -28(%rbp)   # imm = 0x15A78BD0
	movl	%edi, -24(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB93_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_3 Depth 2
	movl	-8(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB93_1 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB93_3:                               # %for.cond1
                                        #   Parent Loop BB93_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB93_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB93_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_3
.LBB93_6:                               # %for.end
                                        #   in Loop: Header=BB93_1 Depth=1
	jmp	.LBB93_7
.LBB93_7:                               # %for.inc17
                                        #   in Loop: Header=BB93_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_1
.LBB93_8:                               # %for.end19
	cmpl	$363301840, -28(%rbp)   # imm = 0x15A78BD0
	jne	.LBB93_10
.LBB93_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB93_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB93_9
.Lfunc_end93:
	.size	IntraChromaPrediction4x4.52, .Lfunc_end93-IntraChromaPrediction4x4.52
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC.53 # -- Begin function writeLumaCoeff4x4_CABAC.53
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.53,@function
writeLumaCoeff4x4_CABAC.53:             # @writeLumaCoeff4x4_CABAC.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$453401468, -52(%rbp)   # imm = 0x1B065B7C
	movl	%edi, -28(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -72(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -96(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB94_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB94_3
.LBB94_2:                               # %cond.false
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB94_3:                               # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB94_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB94_6
.LBB94_5:                               # %cond.false26
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB94_6:                               # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -16(%rbp)
.LBB94_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -16(%rbp)
	jg	.LBB94_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB94_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB94_9:                               # %land.end
                                        #   in Loop: Header=BB94_7 Depth=1
	testb	$1, %al
	jne	.LBB94_10
	jmp	.LBB94_15
.LBB94_10:                              # %for.body
                                        #   in Loop: Header=BB94_7 Depth=1
	movq	-104(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-96(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -16(%rbp)
	jne	.LBB94_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB94_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB94_13
.LBB94_12:                              # %cond.false40
                                        #   in Loop: Header=BB94_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB94_13:                              # %cond.end43
                                        #   in Loop: Header=BB94_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-88(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB94_7 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB94_7
.LBB94_15:                              # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$453401468, -52(%rbp)   # imm = 0x1B065B7C
	jne	.LBB94_17
.LBB94_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB94_17:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB94_16
.Lfunc_end94:
	.size	writeLumaCoeff4x4_CABAC.53, .Lfunc_end94-writeLumaCoeff4x4_CABAC.53
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.54     # -- Begin function start_macroblock.54
	.p2align	4, 0x90
	.type	start_macroblock.54,@function
start_macroblock.54:                    # @start_macroblock.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1027916593, -88(%rbp)  # imm = 0x3D44C331
	movl	%edi, -48(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB95_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB95_2:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -44(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-48(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -84(%rbp)
	je	.LBB95_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB95_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB95_5:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB95_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB95_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB95_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB95_5 Depth=1
	movq	-104(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB95_8:                               # %if.end
                                        #   in Loop: Header=BB95_5 Depth=1
	jmp	.LBB95_9
.LBB95_9:                               # %for.inc
                                        #   in Loop: Header=BB95_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_5
.LBB95_10:                              # %for.end
	jmp	.LBB95_11
.LBB95_11:                              # %if.end19
	jmp	.LBB95_12
.LBB95_12:                              # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB95_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -56(%rbp)
	cmpl	$-1, -56(%rbp)
	jle	.LBB95_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB95_16
.LBB95_15:                              # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB95_16:                              # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB95_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB95_97
.LBB95_18:                              # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB95_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB95_21
.LBB95_20:                              # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB95_96
.LBB95_21:                              # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB95_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB95_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB95_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB95_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB95_34
.LBB95_26:                              # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB95_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB95_32
.LBB95_28:                              # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB95_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB95_31
.LBB95_30:                              # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB95_31:                              # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB95_33
.LBB95_32:                              # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB95_33:                              # %if.end112
	jmp	.LBB95_34
.LBB95_34:                              # %if.end113
	jmp	.LBB95_39
.LBB95_35:                              # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB95_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB95_38
.LBB95_37:                              # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB95_38:                              # %if.end125
	jmp	.LBB95_39
.LBB95_39:                              # %if.end126
	jmp	.LBB95_47
.LBB95_40:                              # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB95_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB95_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB95_44
.LBB95_43:                              # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB95_44:                              # %if.end140
	jmp	.LBB95_46
.LBB95_45:                              # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB95_46:                              # %if.end145
	jmp	.LBB95_47
.LBB95_47:                              # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB95_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB95_93
.LBB95_49:                              # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB95_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB95_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB95_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB95_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB95_74
.LBB95_54:                              # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB95_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB95_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB95_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB95_73
.LBB95_58:                              # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB95_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB95_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB95_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB95_72
.LBB95_62:                              # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB95_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB95_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB95_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB95_71
.LBB95_66:                              # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB95_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB95_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB95_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB95_70:                              # %if.end223
	jmp	.LBB95_71
.LBB95_71:                              # %if.end224
	jmp	.LBB95_72
.LBB95_72:                              # %if.end225
	jmp	.LBB95_73
.LBB95_73:                              # %if.end226
	jmp	.LBB95_74
.LBB95_74:                              # %if.end227
	jmp	.LBB95_75
.LBB95_75:                              # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB95_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB95_77:                              # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB95_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB95_82
.LBB95_79:                              # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB95_81:                              # %if.end256
	jmp	.LBB95_82
.LBB95_82:                              # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB95_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-44(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB95_88
.LBB95_84:                              # %if.else275
	movl	dq, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB95_86
# %bb.85:                               # %if.then278
	movl	-40(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB95_87
.LBB95_86:                              # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB95_87:                              # %if.end292
	jmp	.LBB95_88
.LBB95_88:                              # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB95_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB95_90:                              # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB95_92
.LBB95_91:                              # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB95_92:                              # %if.end305
	jmp	.LBB95_94
.LBB95_93:                              # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB95_94:                              # %if.end309
	jmp	.LBB95_95
.LBB95_95:                              # %if.end310
	jmp	.LBB95_96
.LBB95_96:                              # %if.end311
	jmp	.LBB95_97
.LBB95_97:                              # %if.end312
	jmp	.LBB95_102
.LBB95_98:                              # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jle	.LBB95_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB95_101
.LBB95_100:                             # %if.else331
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB95_101:                             # %if.end335
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB95_102:                             # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB95_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB95_105
.LBB95_104:                             # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB95_105:                             # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB95_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB95_107:                             # %if.end359
	movl	$0, -16(%rbp)
.LBB95_108:                             # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_110 Depth 2
                                        #       Child Loop BB95_112 Depth 3
                                        #         Child Loop BB95_114 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB95_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB95_108 Depth=1
	movl	$0, -20(%rbp)
.LBB95_110:                             # %for.cond364
                                        #   Parent Loop BB95_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB95_112 Depth 3
                                        #         Child Loop BB95_114 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB95_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB95_110 Depth=2
	movl	$0, -12(%rbp)
.LBB95_112:                             # %for.cond368
                                        #   Parent Loop BB95_108 Depth=1
                                        #     Parent Loop BB95_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB95_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB95_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB95_112 Depth=3
	movl	$0, -36(%rbp)
.LBB95_114:                             # %for.cond372
                                        #   Parent Loop BB95_108 Depth=1
                                        #     Parent Loop BB95_110 Depth=2
                                        #       Parent Loop BB95_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB95_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB95_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB95_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB95_114
.LBB95_117:                             # %for.end388
                                        #   in Loop: Header=BB95_112 Depth=3
	jmp	.LBB95_118
.LBB95_118:                             # %for.inc389
                                        #   in Loop: Header=BB95_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_112
.LBB95_119:                             # %for.end391
                                        #   in Loop: Header=BB95_110 Depth=2
	jmp	.LBB95_120
.LBB95_120:                             # %for.inc392
                                        #   in Loop: Header=BB95_110 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB95_110
.LBB95_121:                             # %for.end394
                                        #   in Loop: Header=BB95_108 Depth=1
	jmp	.LBB95_122
.LBB95_122:                             # %for.inc395
                                        #   in Loop: Header=BB95_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_108
.LBB95_123:                             # %for.end397
	movl	$0, -20(%rbp)
.LBB95_124:                             # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_126 Depth 2
                                        #       Child Loop BB95_128 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB95_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB95_124 Depth=1
	movl	$0, -12(%rbp)
.LBB95_126:                             # %for.cond402
                                        #   Parent Loop BB95_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB95_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB95_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB95_126 Depth=2
	movl	$0, -16(%rbp)
.LBB95_128:                             # %for.cond406
                                        #   Parent Loop BB95_124 Depth=1
                                        #     Parent Loop BB95_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -16(%rbp)
	jge	.LBB95_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB95_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB95_128 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_128
.LBB95_131:                             # %for.end432
                                        #   in Loop: Header=BB95_126 Depth=2
	jmp	.LBB95_132
.LBB95_132:                             # %for.inc433
                                        #   in Loop: Header=BB95_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_126
.LBB95_133:                             # %for.end435
                                        #   in Loop: Header=BB95_124 Depth=1
	jmp	.LBB95_134
.LBB95_134:                             # %for.inc436
                                        #   in Loop: Header=BB95_124 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB95_124
.LBB95_135:                             # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -16(%rbp)
.LBB95_136:                             # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_138 Depth 2
                                        #       Child Loop BB95_140 Depth 3
                                        #         Child Loop BB95_142 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB95_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB95_136 Depth=1
	movl	$0, -20(%rbp)
.LBB95_138:                             # %for.cond443
                                        #   Parent Loop BB95_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB95_140 Depth 3
                                        #         Child Loop BB95_142 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB95_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB95_138 Depth=2
	movl	$0, -12(%rbp)
.LBB95_140:                             # %for.cond447
                                        #   Parent Loop BB95_136 Depth=1
                                        #     Parent Loop BB95_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB95_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB95_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB95_140 Depth=3
	movl	$0, -36(%rbp)
.LBB95_142:                             # %for.cond451
                                        #   Parent Loop BB95_136 Depth=1
                                        #     Parent Loop BB95_138 Depth=2
                                        #       Parent Loop BB95_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB95_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB95_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-16(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB95_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB95_142
.LBB95_145:                             # %for.end465
                                        #   in Loop: Header=BB95_140 Depth=3
	jmp	.LBB95_146
.LBB95_146:                             # %for.inc466
                                        #   in Loop: Header=BB95_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_140
.LBB95_147:                             # %for.end468
                                        #   in Loop: Header=BB95_138 Depth=2
	jmp	.LBB95_148
.LBB95_148:                             # %for.inc469
                                        #   in Loop: Header=BB95_138 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB95_138
.LBB95_149:                             # %for.end471
                                        #   in Loop: Header=BB95_136 Depth=1
	jmp	.LBB95_150
.LBB95_150:                             # %for.inc472
                                        #   in Loop: Header=BB95_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_136
.LBB95_151:                             # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB95_152:                             # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB95_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB95_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB95_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_152
.LBB95_155:                             # %for.end483
	movl	$0, -12(%rbp)
.LBB95_156:                             # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB95_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB95_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB95_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_156
.LBB95_159:                             # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB95_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB95_161:                             # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB95_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB95_166
.LBB95_163:                             # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB95_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB95_165:                             # %if.end520
	jmp	.LBB95_166
.LBB95_166:                             # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB95_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB95_168:                             # %if.end536
	cmpl	$1027916593, -88(%rbp)  # imm = 0x3D44C331
	jne	.LBB95_170
.LBB95_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB95_170:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB95_169
.Lfunc_end95:
	.size	start_macroblock.54, .Lfunc_end95-start_macroblock.54
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit.55 # -- Begin function write_terminating_bit.55
	.p2align	4, 0x90
	.type	write_terminating_bit.55,@function
write_terminating_bit.55:               # @write_terminating_bit.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1080938695, -8(%rbp)   # imm = 0x406DD0C7
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$1080938695, -8(%rbp)   # imm = 0x406DD0C7
	jne	.LBB96_2
.LBB96_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB96_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB96_1
.Lfunc_end96:
	.size	write_terminating_bit.55, .Lfunc_end96-write_terminating_bit.55
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer.56         # -- Begin function writeMBLayer.56
	.p2align	4, 0x90
	.type	writeMBLayer.56,@function
writeMBLayer.56:                        # @writeMBLayer.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$1891027216, -100(%rbp) # imm = 0x70B6C910
	movl	%edi, -92(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-68(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB97_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-68(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB97_3
.LBB97_2:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB97_3
.LBB97_3:                               # %cond.end
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB97_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB97_9
.LBB97_5:                               # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB97_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB97_8
.LBB97_7:                               # %cond.false13
	movl	$1, %eax
	jmp	.LBB97_8
.LBB97_8:                               # %cond.end14
.LBB97_9:                               # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -64(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB97_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB97_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -64(%rbp)
	jmp	.LBB97_24
.LBB97_12:                              # %if.else
	movq	-112(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB97_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB97_17
	jmp	.LBB97_18
.LBB97_14:                              # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB97_16
# %bb.15:                               # %cond.true28
	movq	-112(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB97_18
	jmp	.LBB97_17
.LBB97_16:                              # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB97_17
	jmp	.LBB97_18
.LBB97_17:                              # %if.then32
	movl	$1, -60(%rbp)
.LBB97_18:                              # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB97_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB97_23
.LBB97_20:                              # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB97_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB97_22:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
.LBB97_23:                              # %if.end50
	jmp	.LBB97_24
.LBB97_24:                              # %if.end51
	jmp	.LBB97_25
.LBB97_25:                              # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB97_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB97_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB97_28:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-120(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB97_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB97_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB97_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB97_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB97_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB97_35
.LBB97_34:                              # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB97_35:                              # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB97_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB97_38
.LBB97_37:                              # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB97_38:                              # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB97_39:                              # %if.end96
	jmp	.LBB97_40
.LBB97_40:                              # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB97_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB97_43
.LBB97_42:                              # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB97_43:                              # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB97_89
.LBB97_44:                              # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB97_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB97_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB97_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -64(%rbp)
	je	.LBB97_49
.LBB97_48:                              # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -96(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-96(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB97_49:                              # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB97_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB97_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB97_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB97_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB97_55
.LBB97_54:                              # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB97_55:                              # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB97_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB97_58
.LBB97_57:                              # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB97_58:                              # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB97_59:                              # %if.end198
	jmp	.LBB97_60
.LBB97_60:                              # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB97_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB97_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB97_64
.LBB97_63:                              # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB97_64:                              # %if.end226
	jmp	.LBB97_88
.LBB97_65:                              # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB97_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB97_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB97_76
.LBB97_68:                              # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB97_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB97_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB97_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB97_72:                              # %if.end281
	jmp	.LBB97_73
.LBB97_73:                              # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB97_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB97_75:                              # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB97_87
.LBB97_76:                              # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -72(%rbp)
.LBB97_77:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_79 Depth 2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB97_77 Depth=1
	movl	$0, -44(%rbp)
.LBB97_79:                              # %for.cond310
                                        #   Parent Loop BB97_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB97_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB97_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB97_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB97_79
.LBB97_82:                              # %for.end
                                        #   in Loop: Header=BB97_77 Depth=1
	jmp	.LBB97_83
.LBB97_83:                              # %for.inc322
                                        #   in Loop: Header=BB97_77 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB97_77
.LBB97_84:                              # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB97_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB97_86:                              # %if.end345
	jmp	.LBB97_87
.LBB97_87:                              # %if.end346
	jmp	.LBB97_88
.LBB97_88:                              # %if.end347
	jmp	.LBB97_89
.LBB97_89:                              # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB97_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB97_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB97_92:                              # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB97_104
# %bb.93:                               # %if.then366
	movq	-120(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB97_94:                              # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB97_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB97_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB97_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB97_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB97_98
.LBB97_97:                              # %if.else380
                                        #   in Loop: Header=BB97_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB97_98:                              # %if.end382
                                        #   in Loop: Header=BB97_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB97_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB97_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB97_101
.LBB97_100:                             # %lor.rhs409
                                        #   in Loop: Header=BB97_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB97_101:                             # %lor.end415
                                        #   in Loop: Header=BB97_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB97_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB97_94
.LBB97_103:                             # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB97_104:                             # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB97_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB97_114
.LBB97_106:                             # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB97_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB97_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB97_110
.LBB97_109:                             # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB97_110:                             # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB97_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB97_113
.LBB97_112:                             # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB97_113:                             # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB97_114:                             # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB97_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB97_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB97_120
.LBB97_117:                             # %if.else480
	cmpl	$0, -92(%rbp)
	jne	.LBB97_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB97_119:                             # %if.end483
	jmp	.LBB97_120
.LBB97_120:                             # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB97_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB97_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB97_123:                             # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB97_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB97_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB97_129
.LBB97_126:                             # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB97_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB97_128:                             # %if.end516
	jmp	.LBB97_129
.LBB97_129:                             # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$1891027216, -100(%rbp) # imm = 0x70B6C910
	jne	.LBB97_131
.LBB97_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB97_131:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB97_130
.Lfunc_end97:
	.size	writeMBLayer.56, .Lfunc_end97-writeMBLayer.56
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.57  # -- Begin function ChromaPrediction4x4.57
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.57,@function
ChromaPrediction4x4.57:                 # @ChromaPrediction4x4.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$913723391, -68(%rbp)   # imm = 0x36764FFF
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -52(%rbp)
	movl	%r9d, -56(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB98_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB98_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB98_6
.LBB98_3:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB98_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB98_5:                               # %land.end
.LBB98_6:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB98_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB98_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB98_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -20(%rbp)
	jne	.LBB98_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -52(%rbp)
	jne	.LBB98_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -56(%rbp)
	jne	.LBB98_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB98_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB98_15
.LBB98_14:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB98_15:                              # %cond.end
	movq	%rax, -64(%rbp)
.LBB98_16:                              # %if.end
	cmpl	$-1, -20(%rbp)
	jne	.LBB98_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-24(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB98_87
.LBB98_18:                              # %if.end30
	cmpl	$0, -20(%rbp)
	je	.LBB98_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -20(%rbp)
	jne	.LBB98_21
.LBB98_20:                              # %if.then36
	movl	-16(%rbp), %esi
	movl	-24(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB98_21:                              # %if.end37
	cmpl	$1, -20(%rbp)
	je	.LBB98_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -20(%rbp)
	jne	.LBB98_24
.LBB98_23:                              # %if.then43
	movl	-16(%rbp), %esi
	movl	-24(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB98_24:                              # %if.end44
	cmpl	$0, -72(%rbp)
	je	.LBB98_56
# %bb.25:                               # %if.then46
	cmpl	$2, -20(%rbp)
	jne	.LBB98_35
# %bb.26:                               # %if.then49
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB98_27:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_29 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB98_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB98_27 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB98_29:                              # %for.cond52
                                        #   Parent Loop BB98_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB98_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB98_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB98_29 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_29
.LBB98_32:                              # %for.end
                                        #   in Loop: Header=BB98_27 Depth=1
	jmp	.LBB98_33
.LBB98_33:                              # %for.inc99
                                        #   in Loop: Header=BB98_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_27
.LBB98_34:                              # %for.end101
	jmp	.LBB98_55
.LBB98_35:                              # %if.else
	cmpl	$0, -20(%rbp)
	jne	.LBB98_45
# %bb.36:                               # %if.then104
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB98_37:                              # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_39 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB98_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB98_37 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB98_39:                              # %for.cond109
                                        #   Parent Loop BB98_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB98_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB98_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB98_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_39
.LBB98_42:                              # %for.end139
                                        #   in Loop: Header=BB98_37 Depth=1
	jmp	.LBB98_43
.LBB98_43:                              # %for.inc140
                                        #   in Loop: Header=BB98_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_37
.LBB98_44:                              # %for.end142
	jmp	.LBB98_54
.LBB98_45:                              # %if.else143
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB98_46:                              # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_48 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB98_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB98_46 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB98_48:                              # %for.cond148
                                        #   Parent Loop BB98_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB98_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB98_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB98_48 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_48
.LBB98_51:                              # %for.end178
                                        #   in Loop: Header=BB98_46 Depth=1
	jmp	.LBB98_52
.LBB98_52:                              # %for.inc179
                                        #   in Loop: Header=BB98_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_46
.LBB98_53:                              # %for.end181
	jmp	.LBB98_54
.LBB98_54:                              # %if.end182
	jmp	.LBB98_55
.LBB98_55:                              # %if.end183
	jmp	.LBB98_87
.LBB98_56:                              # %if.else184
	cmpl	$2, -20(%rbp)
	jne	.LBB98_66
# %bb.57:                               # %if.then187
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB98_58:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_60 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB98_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB98_58 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB98_60:                              # %for.cond192
                                        #   Parent Loop BB98_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB98_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB98_60 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB98_60 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_60
.LBB98_63:                              # %for.end208
                                        #   in Loop: Header=BB98_58 Depth=1
	jmp	.LBB98_64
.LBB98_64:                              # %for.inc209
                                        #   in Loop: Header=BB98_58 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_58
.LBB98_65:                              # %for.end211
	jmp	.LBB98_86
.LBB98_66:                              # %if.else212
	cmpl	$0, -20(%rbp)
	jne	.LBB98_76
# %bb.67:                               # %if.then215
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB98_68:                              # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_70 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB98_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB98_68 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB98_70:                              # %for.cond220
                                        #   Parent Loop BB98_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB98_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB98_70 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB98_70 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_70
.LBB98_73:                              # %for.end233
                                        #   in Loop: Header=BB98_68 Depth=1
	jmp	.LBB98_74
.LBB98_74:                              # %for.inc234
                                        #   in Loop: Header=BB98_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_68
.LBB98_75:                              # %for.end236
	jmp	.LBB98_85
.LBB98_76:                              # %if.else237
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB98_77:                              # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_79 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB98_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB98_77 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB98_79:                              # %for.cond242
                                        #   Parent Loop BB98_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB98_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB98_79 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB98_79 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_79
.LBB98_82:                              # %for.end255
                                        #   in Loop: Header=BB98_77 Depth=1
	jmp	.LBB98_83
.LBB98_83:                              # %for.inc256
                                        #   in Loop: Header=BB98_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_77
.LBB98_84:                              # %for.end258
	jmp	.LBB98_85
.LBB98_85:                              # %if.end259
	jmp	.LBB98_86
.LBB98_86:                              # %if.end260
	jmp	.LBB98_87
.LBB98_87:                              # %if.end261
	cmpl	$913723391, -68(%rbp)   # imm = 0x36764FFF
	jne	.LBB98_89
.LBB98_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB98_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB98_88
.Lfunc_end98:
	.size	ChromaPrediction4x4.57, .Lfunc_end98-ChromaPrediction4x4.57
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.58 # -- Begin function OneComponentLumaPrediction4x4.58
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.58,@function
OneComponentLumaPrediction4x4.58:       # @OneComponentLumaPrediction4x4.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1268492320, -84(%rbp)  # imm = 0x4B9BA820
	movq	%rdi, -16(%rbp)
	movl	%esi, -88(%rbp)
	movl	%edx, -92(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-92(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-88(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -32(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$1268492320, -84(%rbp)  # imm = 0x4B9BA820
	jne	.LBB99_2
.LBB99_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB99_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB99_1
.Lfunc_end99:
	.size	OneComponentLumaPrediction4x4.58, .Lfunc_end99-OneComponentLumaPrediction4x4.58
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.59    # -- Begin function LumaPrediction4x4.59
	.p2align	4, 0x90
	.type	LumaPrediction4x4.59,@function
LumaPrediction4x4.59:                   # @LumaPrediction4x4.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$198609812, -104(%rbp)  # imm = 0xBD68B94
	movl	%edi, -24(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -76(%rbp)
	movl	%r8d, -52(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -64(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -56(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB100_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB100_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB100_6
.LBB100_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB100_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB100_5:                              # %land.end
.LBB100_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB100_9
# %bb.7:                                # %land.lhs.true11
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB100_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB100_10
.LBB100_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB100_10
.LBB100_10:                             # %cond.end
	movl	%ecx, -72(%rbp)
	movq	-88(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB100_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB100_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB100_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -20(%rbp)
	jne	.LBB100_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -76(%rbp)
	jne	.LBB100_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -52(%rbp)
	jne	.LBB100_20
# %bb.16:                               # %if.then
	movq	-88(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB100_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB100_19
.LBB100_18:                             # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB100_19:                             # %cond.end38
	movq	%rax, -96(%rbp)
.LBB100_20:                             # %if.end
	cmpl	$0, -20(%rbp)
	je	.LBB100_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -20(%rbp)
	jne	.LBB100_23
.LBB100_22:                             # %if.then45
	movl	-60(%rbp), %esi
	movl	-68(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-72(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB100_23:                             # %if.end58
	cmpl	$1, -20(%rbp)
	je	.LBB100_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -20(%rbp)
	jne	.LBB100_26
.LBB100_25:                             # %if.then64
	movl	-60(%rbp), %esi
	movl	-68(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-72(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB100_26:                             # %if.end77
	cmpl	$0, -100(%rbp)
	je	.LBB100_58
# %bb.27:                               # %if.then79
	cmpl	$2, -20(%rbp)
	jne	.LBB100_37
# %bb.28:                               # %if.then82
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB100_29:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_31 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB100_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB100_29 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB100_31:                             # %for.cond85
                                        #   Parent Loop BB100_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB100_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB100_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB100_31 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_31
.LBB100_34:                             # %for.end
                                        #   in Loop: Header=BB100_29 Depth=1
	jmp	.LBB100_35
.LBB100_35:                             # %for.inc125
                                        #   in Loop: Header=BB100_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_29
.LBB100_36:                             # %for.end127
	jmp	.LBB100_57
.LBB100_37:                             # %if.else
	cmpl	$0, -20(%rbp)
	jne	.LBB100_47
# %bb.38:                               # %if.then130
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB100_39:                             # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_41 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB100_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB100_39 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB100_41:                             # %for.cond135
                                        #   Parent Loop BB100_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB100_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB100_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB100_41 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_41
.LBB100_44:                             # %for.end161
                                        #   in Loop: Header=BB100_39 Depth=1
	jmp	.LBB100_45
.LBB100_45:                             # %for.inc162
                                        #   in Loop: Header=BB100_39 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_39
.LBB100_46:                             # %for.end164
	jmp	.LBB100_56
.LBB100_47:                             # %if.else165
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB100_48:                             # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_50 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB100_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB100_48 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB100_50:                             # %for.cond170
                                        #   Parent Loop BB100_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB100_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB100_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB100_50 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_50
.LBB100_53:                             # %for.end196
                                        #   in Loop: Header=BB100_48 Depth=1
	jmp	.LBB100_54
.LBB100_54:                             # %for.inc197
                                        #   in Loop: Header=BB100_48 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_48
.LBB100_55:                             # %for.end199
	jmp	.LBB100_56
.LBB100_56:                             # %if.end200
	jmp	.LBB100_57
.LBB100_57:                             # %if.end201
	jmp	.LBB100_89
.LBB100_58:                             # %if.else202
	cmpl	$2, -20(%rbp)
	jne	.LBB100_68
# %bb.59:                               # %if.then205
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB100_60:                             # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_62 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB100_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB100_60 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB100_62:                             # %for.cond210
                                        #   Parent Loop BB100_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB100_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB100_62 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB100_62 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_62
.LBB100_65:                             # %for.end226
                                        #   in Loop: Header=BB100_60 Depth=1
	jmp	.LBB100_66
.LBB100_66:                             # %for.inc227
                                        #   in Loop: Header=BB100_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_60
.LBB100_67:                             # %for.end229
	jmp	.LBB100_88
.LBB100_68:                             # %if.else230
	cmpl	$0, -20(%rbp)
	jne	.LBB100_78
# %bb.69:                               # %if.then233
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB100_70:                             # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_72 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB100_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB100_70 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB100_72:                             # %for.cond238
                                        #   Parent Loop BB100_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB100_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB100_72 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB100_72 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_72
.LBB100_75:                             # %for.end251
                                        #   in Loop: Header=BB100_70 Depth=1
	jmp	.LBB100_76
.LBB100_76:                             # %for.inc252
                                        #   in Loop: Header=BB100_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_70
.LBB100_77:                             # %for.end254
	jmp	.LBB100_87
.LBB100_78:                             # %if.else255
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB100_79:                             # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_81 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB100_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB100_79 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB100_81:                             # %for.cond260
                                        #   Parent Loop BB100_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB100_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB100_81 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB100_81 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_81
.LBB100_84:                             # %for.end273
                                        #   in Loop: Header=BB100_79 Depth=1
	jmp	.LBB100_85
.LBB100_85:                             # %for.inc274
                                        #   in Loop: Header=BB100_79 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_79
.LBB100_86:                             # %for.end276
	jmp	.LBB100_87
.LBB100_87:                             # %if.end277
	jmp	.LBB100_88
.LBB100_88:                             # %if.end278
	jmp	.LBB100_89
.LBB100_89:                             # %if.end279
	cmpl	$198609812, -104(%rbp)  # imm = 0xBD68B94
	jne	.LBB100_91
.LBB100_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB100_91:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB100_90
.Lfunc_end100:
	.size	LumaPrediction4x4.59, .Lfunc_end100-LumaPrediction4x4.59
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4.60 # -- Begin function OneComponentChromaPrediction4x4.60
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.60,@function
OneComponentChromaPrediction4x4.60:     # @OneComponentChromaPrediction4x4.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$501362438, -112(%rbp)  # imm = 0x1DE22F06
	movq	%rdi, -128(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -84(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -72(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-4(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -108(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB101_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB101_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -116(%rbp)
	cmpl	$0, -116(%rbp)
	je	.LBB101_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB101_5
# %bb.4:                                # %if.then7
	movl	$4, -44(%rbp)
	jmp	.LBB101_6
.LBB101_5:                              # %if.else
	movl	$2, -44(%rbp)
.LBB101_6:                              # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB101_8
.LBB101_7:                              # %if.else10
	movl	$0, -44(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB101_8:                              # %if.end13
	movl	-72(%rbp), %eax
	addl	-44(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -36(%rbp)
.LBB101_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_11 Depth 2
	cmpl	$4, -36(%rbp)
	jge	.LBB101_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB101_9 Depth=1
	movl	$0, -28(%rbp)
.LBB101_11:                             # %for.cond20
                                        #   Parent Loop BB101_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -28(%rbp)
	jge	.LBB101_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB101_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-28(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-36(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -136(%rbp)
	movl	-28(%rbp), %eax
	addl	-80(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-136(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-36(%rbp), %eax
	addl	-84(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-136(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-144(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB101_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB101_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB101_15
.LBB101_14:                             # %cond.false
                                        #   in Loop: Header=BB101_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB101_15:                             # %cond.end
                                        #   in Loop: Header=BB101_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB101_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB101_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB101_21
.LBB101_17:                             # %cond.false65
                                        #   in Loop: Header=BB101_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB101_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB101_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB101_20
.LBB101_19:                             # %cond.false74
                                        #   in Loop: Header=BB101_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB101_20:                             # %cond.end76
                                        #   in Loop: Header=BB101_11 Depth=2
.LBB101_21:                             # %cond.end78
                                        #   in Loop: Header=BB101_11 Depth=2
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB101_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB101_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB101_24
.LBB101_23:                             # %cond.false84
                                        #   in Loop: Header=BB101_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB101_24:                             # %cond.end86
                                        #   in Loop: Header=BB101_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB101_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB101_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB101_30
.LBB101_26:                             # %cond.false91
                                        #   in Loop: Header=BB101_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB101_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB101_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB101_29
.LBB101_28:                             # %cond.false96
                                        #   in Loop: Header=BB101_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB101_29:                             # %cond.end98
                                        #   in Loop: Header=BB101_11 Depth=2
.LBB101_30:                             # %cond.end100
                                        #   in Loop: Header=BB101_11 Depth=2
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB101_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB101_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB101_33
.LBB101_32:                             # %cond.false111
                                        #   in Loop: Header=BB101_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB101_33:                             # %cond.end114
                                        #   in Loop: Header=BB101_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB101_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB101_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB101_39
.LBB101_35:                             # %cond.false119
                                        #   in Loop: Header=BB101_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB101_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB101_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB101_38
.LBB101_37:                             # %cond.false129
                                        #   in Loop: Header=BB101_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB101_38:                             # %cond.end132
                                        #   in Loop: Header=BB101_11 Depth=2
.LBB101_39:                             # %cond.end134
                                        #   in Loop: Header=BB101_11 Depth=2
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB101_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB101_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB101_42
.LBB101_41:                             # %cond.false141
                                        #   in Loop: Header=BB101_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB101_42:                             # %cond.end144
                                        #   in Loop: Header=BB101_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB101_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB101_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB101_48
.LBB101_44:                             # %cond.false149
                                        #   in Loop: Header=BB101_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB101_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB101_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB101_47
.LBB101_46:                             # %cond.false155
                                        #   in Loop: Header=BB101_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB101_47:                             # %cond.end158
                                        #   in Loop: Header=BB101_11 Depth=2
.LBB101_48:                             # %cond.end160
                                        #   in Loop: Header=BB101_11 Depth=2
	movl	%eax, -68(%rbp)
	movl	-16(%rbp), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-4(%rbp), %eax
	subl	-48(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-12(%rbp), %eax
	andl	-32(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-8(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-92(%rbp), %eax
	imull	-76(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-60(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-48(%rbp), %ecx
	imull	-76(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-88(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-56(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-92(%rbp), %ecx
	imull	-52(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-60(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-48(%rbp), %ecx
	imull	-52(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-56(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-108(%rbp), %eax
	cltd
	idivl	-64(%rbp)
	movq	-128(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -128(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB101_11 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB101_11
.LBB101_50:                             # %for.end
                                        #   in Loop: Header=BB101_9 Depth=1
	jmp	.LBB101_51
.LBB101_51:                             # %for.inc198
                                        #   in Loop: Header=BB101_9 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB101_9
.LBB101_52:                             # %for.end200
	cmpl	$501362438, -112(%rbp)  # imm = 0x1DE22F06
	jne	.LBB101_54
.LBB101_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB101_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB101_53
.Lfunc_end101:
	.size	OneComponentChromaPrediction4x4.60, .Lfunc_end101-OneComponentChromaPrediction4x4.60
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame.61  # -- Begin function writeReferenceFrame.61
	.p2align	4, 0x90
	.type	writeReferenceFrame.61,@function
writeReferenceFrame.61:                 # @writeReferenceFrame.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1472339978, -76(%rbp)  # imm = 0x57C2200A
	movl	%edi, -72(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -52(%rbp)
	movl	%r8d, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB102_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB102_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB102_4
.LBB102_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB102_4
.LBB102_4:                              # %cond.end
	movl	%ecx, -40(%rbp)
	cmpl	$0, -52(%rbp)
	je	.LBB102_6
# %bb.5:                                # %cond.true10
	movl	-40(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB102_7
.LBB102_6:                              # %cond.false13
	movl	-40(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB102_7:                              # %cond.end17
	movl	%eax, -48(%rbp)
	movl	$0, -44(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB102_9
# %bb.8:                                # %if.then
	movl	$0, -36(%rbp)
	jmp	.LBB102_18
.LBB102_9:                              # %if.end
	cmpl	$2, -48(%rbp)
	jne	.LBB102_11
# %bb.10:                               # %if.then20
	movl	$1, -44(%rbp)
.LBB102_11:                             # %if.end21
	movl	-84(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB102_16
# %bb.12:                               # %if.then28
	cmpl	$0, -44(%rbp)
	je	.LBB102_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB102_15
.LBB102_14:                             # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB102_15:                             # %if.end33
	jmp	.LBB102_17
.LBB102_16:                             # %if.else34
	movl	-72(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-68(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-80(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-52(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB102_17:                             # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB102_18:                             # %return
	movl	-36(%rbp), %ebx
	cmpl	$1472339978, -76(%rbp)  # imm = 0x57C2200A
	jne	.LBB102_20
.LBB102_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB102_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB102_19
.Lfunc_end102:
	.size	writeReferenceFrame.61, .Lfunc_end102-writeReferenceFrame.61
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8.62 # -- Begin function LumaResidualCoding8x8.62
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.62,@function
LumaResidualCoding8x8.62:               # @LumaResidualCoding8x8.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$1655881412, -128(%rbp) # imm = 0x62B2BEC4
	movq	%rdi, -112(%rbp)
	movq	%rsi, -104(%rbp)
	movl	%edx, -32(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -68(%rbp)
	movl	%r9d, -60(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -28(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -44(%rbp)
	movl	-32(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -76(%rbp)
	movl	$0, -120(%rbp)
	cmpl	$0, -68(%rbp)
	jne	.LBB103_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -60(%rbp)
	jne	.LBB103_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB103_3:                              # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB103_5
# %bb.4:                                # %if.then
	movl	$1, -120(%rbp)
.LBB103_5:                              # %if.end
	movl	$0, -64(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB103_6:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_8 Depth 2
                                        #       Child Loop BB103_11 Depth 3
                                        #         Child Loop BB103_13 Depth 4
                                        #       Child Loop BB103_19 Depth 3
                                        #         Child Loop BB103_21 Depth 4
                                        #       Child Loop BB103_29 Depth 3
                                        #         Child Loop BB103_31 Depth 4
                                        #       Child Loop BB103_40 Depth 3
                                        #         Child Loop BB103_42 Depth 4
                                        #       Child Loop BB103_57 Depth 3
                                        #         Child Loop BB103_59 Depth 4
                                        #       Child Loop BB103_67 Depth 3
                                        #         Child Loop BB103_69 Depth 4
                                        #       Child Loop BB103_84 Depth 3
                                        #         Child Loop BB103_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB103_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -72(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB103_8:                              # %for.cond9
                                        #   Parent Loop BB103_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB103_11 Depth 3
                                        #         Child Loop BB103_13 Depth 4
                                        #       Child Loop BB103_19 Depth 3
                                        #         Child Loop BB103_21 Depth 4
                                        #       Child Loop BB103_29 Depth 3
                                        #         Child Loop BB103_31 Depth 4
                                        #       Child Loop BB103_40 Depth 3
                                        #         Child Loop BB103_42 Depth 4
                                        #       Child Loop BB103_57 Depth 3
                                        #         Child Loop BB103_59 Depth 4
                                        #       Child Loop BB103_67 Depth 3
                                        #         Child Loop BB103_69 Depth 4
                                        #       Child Loop BB103_84 Depth 3
                                        #         Child Loop BB103_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB103_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB103_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB103_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-68(%rbp), %r8d
	movl	-60(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB103_11:                             # %for.cond16
                                        #   Parent Loop BB103_6 Depth=1
                                        #     Parent Loop BB103_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB103_13 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB103_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB103_11 Depth=3
	movl	$0, -16(%rbp)
.LBB103_13:                             # %for.cond20
                                        #   Parent Loop BB103_6 Depth=1
                                        #     Parent Loop BB103_8 Depth=2
                                        #       Parent Loop BB103_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB103_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB103_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB103_13 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB103_13
.LBB103_16:                             # %for.end
                                        #   in Loop: Header=BB103_11 Depth=3
	jmp	.LBB103_17
.LBB103_17:                             # %for.inc37
                                        #   in Loop: Header=BB103_11 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB103_11
.LBB103_18:                             # %for.end39
                                        #   in Loop: Header=BB103_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-68(%rbp), %r8d
	movl	-60(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB103_19:                             # %for.cond41
                                        #   Parent Loop BB103_6 Depth=1
                                        #     Parent Loop BB103_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB103_21 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB103_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB103_19 Depth=3
	movl	$0, -16(%rbp)
.LBB103_21:                             # %for.cond45
                                        #   Parent Loop BB103_6 Depth=1
                                        #     Parent Loop BB103_8 Depth=2
                                        #       Parent Loop BB103_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB103_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB103_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB103_21 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB103_21
.LBB103_24:                             # %for.end65
                                        #   in Loop: Header=BB103_19 Depth=3
	jmp	.LBB103_25
.LBB103_25:                             # %for.inc66
                                        #   in Loop: Header=BB103_19 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB103_19
.LBB103_26:                             # %for.end68
                                        #   in Loop: Header=BB103_8 Depth=2
	jmp	.LBB103_27
.LBB103_27:                             # %if.end69
                                        #   in Loop: Header=BB103_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-68(%rbp), %ecx
	movl	-60(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB103_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB103_8 Depth=2
	movl	$0, -12(%rbp)
.LBB103_29:                             # %for.cond74
                                        #   Parent Loop BB103_6 Depth=1
                                        #     Parent Loop BB103_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB103_31 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB103_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB103_29 Depth=3
	movl	$0, -16(%rbp)
.LBB103_31:                             # %for.cond78
                                        #   Parent Loop BB103_6 Depth=1
                                        #     Parent Loop BB103_8 Depth=2
                                        #       Parent Loop BB103_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB103_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB103_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB103_31 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB103_31
.LBB103_34:                             # %for.end98
                                        #   in Loop: Header=BB103_29 Depth=3
	jmp	.LBB103_35
.LBB103_35:                             # %for.inc99
                                        #   in Loop: Header=BB103_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB103_29
.LBB103_36:                             # %for.end101
                                        #   in Loop: Header=BB103_8 Depth=2
	jmp	.LBB103_37
.LBB103_37:                             # %if.end102
                                        #   in Loop: Header=BB103_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB103_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB103_8 Depth=2
	cmpl	$0, -80(%rbp)
	jne	.LBB103_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB103_8 Depth=2
	movl	$0, -12(%rbp)
.LBB103_40:                             # %for.cond108
                                        #   Parent Loop BB103_6 Depth=1
                                        #     Parent Loop BB103_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB103_42 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB103_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB103_40 Depth=3
	movl	$0, -16(%rbp)
.LBB103_42:                             # %for.cond112
                                        #   Parent Loop BB103_6 Depth=1
                                        #     Parent Loop BB103_8 Depth=2
                                        #       Parent Loop BB103_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB103_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB103_42 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB103_42 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB103_42
.LBB103_45:                             # %for.end137
                                        #   in Loop: Header=BB103_40 Depth=3
	jmp	.LBB103_46
.LBB103_46:                             # %for.inc138
                                        #   in Loop: Header=BB103_40 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB103_40
.LBB103_47:                             # %for.end140
                                        #   in Loop: Header=BB103_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB103_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB103_8 Depth=2
	cmpl	$0, -84(%rbp)
	jne	.LBB103_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB103_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB103_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB103_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-28(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -36(%rbp)
	jmp	.LBB103_52
.LBB103_51:                             # %if.else
                                        #   in Loop: Header=BB103_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-28(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -36(%rbp)
.LBB103_52:                             # %if.end151
                                        #   in Loop: Header=BB103_8 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB103_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB103_8 Depth=2
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-76(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB103_54:                             # %if.end157
                                        #   in Loop: Header=BB103_8 Depth=2
	jmp	.LBB103_55
.LBB103_55:                             # %if.end158
                                        #   in Loop: Header=BB103_8 Depth=2
	jmp	.LBB103_65
.LBB103_56:                             # %if.else159
                                        #   in Loop: Header=BB103_8 Depth=2
	movl	$0, -12(%rbp)
.LBB103_57:                             # %for.cond160
                                        #   Parent Loop BB103_6 Depth=1
                                        #     Parent Loop BB103_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB103_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB103_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB103_57 Depth=3
	movl	$0, -16(%rbp)
.LBB103_59:                             # %for.cond164
                                        #   Parent Loop BB103_6 Depth=1
                                        #     Parent Loop BB103_8 Depth=2
                                        #       Parent Loop BB103_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB103_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB103_59 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB103_59 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB103_59
.LBB103_62:                             # %for.end193
                                        #   in Loop: Header=BB103_57 Depth=3
	jmp	.LBB103_63
.LBB103_63:                             # %for.inc194
                                        #   in Loop: Header=BB103_57 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB103_57
.LBB103_64:                             # %for.end196
                                        #   in Loop: Header=BB103_8 Depth=2
	jmp	.LBB103_65
.LBB103_65:                             # %if.end197
                                        #   in Loop: Header=BB103_8 Depth=2
	jmp	.LBB103_95
.LBB103_66:                             # %if.else198
                                        #   in Loop: Header=BB103_8 Depth=2
	movl	$0, -12(%rbp)
.LBB103_67:                             # %for.cond199
                                        #   Parent Loop BB103_6 Depth=1
                                        #     Parent Loop BB103_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB103_69 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB103_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB103_67 Depth=3
	movl	$0, -16(%rbp)
.LBB103_69:                             # %for.cond203
                                        #   Parent Loop BB103_6 Depth=1
                                        #     Parent Loop BB103_8 Depth=2
                                        #       Parent Loop BB103_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB103_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB103_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-56(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-52(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-16(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-12(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -88(%rbp)
	movq	imgY_org, %rdx
	movl	-56(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-16(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -124(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-56(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -116(%rbp)
	movl	-116(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-88(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-124(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-92(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -80(%rbp)
	jne	.LBB103_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB103_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB103_73
.LBB103_72:                             # %if.else300
                                        #   in Loop: Header=BB103_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB103_73:                             # %if.end314
                                        #   in Loop: Header=BB103_69 Depth=4
	jmp	.LBB103_74
.LBB103_74:                             # %for.inc315
                                        #   in Loop: Header=BB103_69 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB103_69
.LBB103_75:                             # %for.end317
                                        #   in Loop: Header=BB103_67 Depth=3
	jmp	.LBB103_76
.LBB103_76:                             # %for.inc318
                                        #   in Loop: Header=BB103_67 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB103_67
.LBB103_77:                             # %for.end320
                                        #   in Loop: Header=BB103_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB103_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB103_8 Depth=2
	cmpl	$0, -84(%rbp)
	jne	.LBB103_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB103_8 Depth=2
	cmpl	$0, -80(%rbp)
	jne	.LBB103_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB103_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB103_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB103_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-28(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -36(%rbp)
	jmp	.LBB103_83
.LBB103_82:                             # %if.else334
                                        #   in Loop: Header=BB103_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-28(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -36(%rbp)
.LBB103_83:                             # %if.end336
                                        #   in Loop: Header=BB103_8 Depth=2
	movl	$0, -12(%rbp)
.LBB103_84:                             # %for.cond337
                                        #   Parent Loop BB103_6 Depth=1
                                        #     Parent Loop BB103_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB103_86 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB103_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB103_84 Depth=3
	movl	$0, -16(%rbp)
.LBB103_86:                             # %for.cond341
                                        #   Parent Loop BB103_6 Depth=1
                                        #     Parent Loop BB103_8 Depth=2
                                        #       Parent Loop BB103_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB103_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB103_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB103_86 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB103_86
.LBB103_89:                             # %for.end358
                                        #   in Loop: Header=BB103_84 Depth=3
	jmp	.LBB103_90
.LBB103_90:                             # %for.inc359
                                        #   in Loop: Header=BB103_84 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB103_84
.LBB103_91:                             # %for.end361
                                        #   in Loop: Header=BB103_8 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB103_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB103_8 Depth=2
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-76(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB103_93:                             # %if.end368
                                        #   in Loop: Header=BB103_8 Depth=2
	jmp	.LBB103_94
.LBB103_94:                             # %if.end369
                                        #   in Loop: Header=BB103_8 Depth=2
	jmp	.LBB103_95
.LBB103_95:                             # %if.end370
                                        #   in Loop: Header=BB103_8 Depth=2
	jmp	.LBB103_96
.LBB103_96:                             # %for.inc371
                                        #   in Loop: Header=BB103_8 Depth=2
	movl	-72(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -72(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB103_8
.LBB103_97:                             # %for.end374
                                        #   in Loop: Header=BB103_6 Depth=1
	jmp	.LBB103_98
.LBB103_98:                             # %for.inc375
                                        #   in Loop: Header=BB103_6 Depth=1
	movl	-64(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -64(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB103_6
.LBB103_99:                             # %for.end378
	cmpl	$0, -80(%rbp)
	je	.LBB103_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB103_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -84(%rbp)
	jne	.LBB103_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB103_104
# %bb.103:                              # %if.then390
	movl	-32(%rbp), %edi
	leaq	-28(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -36(%rbp)
.LBB103_104:                            # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB103_114
# %bb.105:                              # %if.then395
	movl	$0, -12(%rbp)
.LBB103_106:                            # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_108 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB103_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB103_106 Depth=1
	movl	$0, -16(%rbp)
.LBB103_108:                            # %for.cond400
                                        #   Parent Loop BB103_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB103_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB103_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-44(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-40(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB103_108 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB103_108
.LBB103_111:                            # %for.end417
                                        #   in Loop: Header=BB103_106 Depth=1
	jmp	.LBB103_112
.LBB103_112:                            # %for.inc418
                                        #   in Loop: Header=BB103_106 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB103_106
.LBB103_113:                            # %for.end420
	jmp	.LBB103_114
.LBB103_114:                            # %if.end421
	cmpl	$0, -36(%rbp)
	je	.LBB103_116
# %bb.115:                              # %if.then423
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-76(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB103_116:                            # %if.end431
	jmp	.LBB103_117
.LBB103_117:                            # %if.end432
	jmp	.LBB103_118
.LBB103_118:                            # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB103_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -84(%rbp)
	jne	.LBB103_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -28(%rbp)
	jg	.LBB103_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB103_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB103_145
.LBB103_123:                            # %if.then448
	movl	$0, -28(%rbp)
	movl	$63, %eax
	subl	-76(%rbp), %eax
	movq	-112(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-104(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB103_124:                            # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_126 Depth 2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB103_124 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB103_126:                            # %for.cond462
                                        #   Parent Loop BB103_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB103_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB103_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB103_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB103_130
.LBB103_129:                            # %if.else481
                                        #   in Loop: Header=BB103_126 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB103_130:                            # %if.end486
                                        #   in Loop: Header=BB103_126 Depth=2
	jmp	.LBB103_131
.LBB103_131:                            # %for.inc487
                                        #   in Loop: Header=BB103_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB103_126
.LBB103_132:                            # %for.end489
                                        #   in Loop: Header=BB103_124 Depth=1
	jmp	.LBB103_133
.LBB103_133:                            # %for.inc490
                                        #   in Loop: Header=BB103_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB103_124
.LBB103_134:                            # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB103_144
# %bb.135:                              # %if.then496
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB103_136:                            # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_138 Depth 2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB103_136 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB103_138:                            # %for.cond502
                                        #   Parent Loop BB103_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB103_138 Depth=2
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB103_138 Depth=2
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB103_138
.LBB103_141:                            # %for.end509
                                        #   in Loop: Header=BB103_136 Depth=1
	jmp	.LBB103_142
.LBB103_142:                            # %for.inc510
                                        #   in Loop: Header=BB103_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB103_136
.LBB103_143:                            # %for.end512
	jmp	.LBB103_144
.LBB103_144:                            # %if.end513
	jmp	.LBB103_145
.LBB103_145:                            # %if.end514
	movl	-28(%rbp), %ebx
	cmpl	$1655881412, -128(%rbp) # imm = 0x62B2BEC4
	jne	.LBB103_147
.LBB103_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB103_147:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB103_146
.Lfunc_end103:
	.size	LumaResidualCoding8x8.62, .Lfunc_end103-LumaResidualCoding8x8.62
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe.63  # -- Begin function SetModesAndRefframe.63
	.p2align	4, 0x90
	.type	SetModesAndRefframe.63,@function
SetModesAndRefframe.63:                 # @SetModesAndRefframe.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1875753754, -60(%rbp)  # imm = 0x6FCDBB1A
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -12(%rbp)
	movq	-48(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movl	$-1, (%rax)
	movq	-40(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB104_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB104_12
.LBB104_2:                              # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB104_4
# %bb.3:                                # %if.then18
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB104_11
.LBB104_4:                              # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB104_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB104_10
.LBB104_6:                              # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB104_8
# %bb.7:                                # %if.then45
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB104_9
.LBB104_8:                              # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB104_9:                              # %if.end
	jmp	.LBB104_10
.LBB104_10:                             # %if.end86
	jmp	.LBB104_11
.LBB104_11:                             # %if.end87
	jmp	.LBB104_12
.LBB104_12:                             # %if.end88
	cmpl	$1875753754, -60(%rbp)  # imm = 0x6FCDBB1A
	jne	.LBB104_14
.LBB104_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB104_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB104_13
.Lfunc_end104:
	.size	SetModesAndRefframe.63, .Lfunc_end104-SetModesAndRefframe.63
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.64     # -- Begin function start_macroblock.64
	.p2align	4, 0x90
	.type	start_macroblock.64,@function
start_macroblock.64:                    # @start_macroblock.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1086776274, -84(%rbp)  # imm = 0x40C6E3D2
	movl	%edi, -56(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB105_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB105_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -44(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-56(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -88(%rbp)
	je	.LBB105_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB105_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB105_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB105_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB105_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB105_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB105_5 Depth=1
	movq	-104(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB105_8:                              # %if.end
                                        #   in Loop: Header=BB105_5 Depth=1
	jmp	.LBB105_9
.LBB105_9:                              # %for.inc
                                        #   in Loop: Header=BB105_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_5
.LBB105_10:                             # %for.end
	jmp	.LBB105_11
.LBB105_11:                             # %if.end19
	jmp	.LBB105_12
.LBB105_12:                             # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB105_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jle	.LBB105_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB105_16
.LBB105_15:                             # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB105_16:                             # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB105_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB105_97
.LBB105_18:                             # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB105_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB105_21
.LBB105_20:                             # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB105_96
.LBB105_21:                             # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB105_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB105_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB105_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB105_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB105_34
.LBB105_26:                             # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB105_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB105_32
.LBB105_28:                             # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB105_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB105_31
.LBB105_30:                             # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB105_31:                             # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB105_33
.LBB105_32:                             # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB105_33:                             # %if.end112
	jmp	.LBB105_34
.LBB105_34:                             # %if.end113
	jmp	.LBB105_39
.LBB105_35:                             # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB105_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB105_38
.LBB105_37:                             # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB105_38:                             # %if.end125
	jmp	.LBB105_39
.LBB105_39:                             # %if.end126
	jmp	.LBB105_47
.LBB105_40:                             # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB105_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB105_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB105_44
.LBB105_43:                             # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB105_44:                             # %if.end140
	jmp	.LBB105_46
.LBB105_45:                             # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB105_46:                             # %if.end145
	jmp	.LBB105_47
.LBB105_47:                             # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB105_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB105_93
.LBB105_49:                             # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB105_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB105_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB105_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB105_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB105_74
.LBB105_54:                             # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB105_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB105_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB105_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB105_73
.LBB105_58:                             # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB105_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB105_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB105_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB105_72
.LBB105_62:                             # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB105_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB105_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB105_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB105_71
.LBB105_66:                             # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB105_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB105_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB105_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB105_70:                             # %if.end223
	jmp	.LBB105_71
.LBB105_71:                             # %if.end224
	jmp	.LBB105_72
.LBB105_72:                             # %if.end225
	jmp	.LBB105_73
.LBB105_73:                             # %if.end226
	jmp	.LBB105_74
.LBB105_74:                             # %if.end227
	jmp	.LBB105_75
.LBB105_75:                             # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB105_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB105_77:                             # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB105_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB105_82
.LBB105_79:                             # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB105_81:                             # %if.end256
	jmp	.LBB105_82
.LBB105_82:                             # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB105_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-44(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB105_88
.LBB105_84:                             # %if.else275
	movl	dq, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB105_86
# %bb.85:                               # %if.then278
	movl	-40(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB105_87
.LBB105_86:                             # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB105_87:                             # %if.end292
	jmp	.LBB105_88
.LBB105_88:                             # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB105_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB105_90:                             # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB105_92
.LBB105_91:                             # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB105_92:                             # %if.end305
	jmp	.LBB105_94
.LBB105_93:                             # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB105_94:                             # %if.end309
	jmp	.LBB105_95
.LBB105_95:                             # %if.end310
	jmp	.LBB105_96
.LBB105_96:                             # %if.end311
	jmp	.LBB105_97
.LBB105_97:                             # %if.end312
	jmp	.LBB105_102
.LBB105_98:                             # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -48(%rbp)
	cmpl	$-1, -48(%rbp)
	jle	.LBB105_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB105_101
.LBB105_100:                            # %if.else331
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB105_101:                            # %if.end335
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB105_102:                            # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB105_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB105_105
.LBB105_104:                            # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB105_105:                            # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB105_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB105_107:                            # %if.end359
	movl	$0, -20(%rbp)
.LBB105_108:                            # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_110 Depth 2
                                        #       Child Loop BB105_112 Depth 3
                                        #         Child Loop BB105_114 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB105_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB105_108 Depth=1
	movl	$0, -16(%rbp)
.LBB105_110:                            # %for.cond364
                                        #   Parent Loop BB105_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB105_112 Depth 3
                                        #         Child Loop BB105_114 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB105_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB105_110 Depth=2
	movl	$0, -12(%rbp)
.LBB105_112:                            # %for.cond368
                                        #   Parent Loop BB105_108 Depth=1
                                        #     Parent Loop BB105_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB105_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB105_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB105_112 Depth=3
	movl	$0, -36(%rbp)
.LBB105_114:                            # %for.cond372
                                        #   Parent Loop BB105_108 Depth=1
                                        #     Parent Loop BB105_110 Depth=2
                                        #       Parent Loop BB105_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB105_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB105_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB105_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB105_114
.LBB105_117:                            # %for.end388
                                        #   in Loop: Header=BB105_112 Depth=3
	jmp	.LBB105_118
.LBB105_118:                            # %for.inc389
                                        #   in Loop: Header=BB105_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_112
.LBB105_119:                            # %for.end391
                                        #   in Loop: Header=BB105_110 Depth=2
	jmp	.LBB105_120
.LBB105_120:                            # %for.inc392
                                        #   in Loop: Header=BB105_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB105_110
.LBB105_121:                            # %for.end394
                                        #   in Loop: Header=BB105_108 Depth=1
	jmp	.LBB105_122
.LBB105_122:                            # %for.inc395
                                        #   in Loop: Header=BB105_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_108
.LBB105_123:                            # %for.end397
	movl	$0, -16(%rbp)
.LBB105_124:                            # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_126 Depth 2
                                        #       Child Loop BB105_128 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB105_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB105_124 Depth=1
	movl	$0, -12(%rbp)
.LBB105_126:                            # %for.cond402
                                        #   Parent Loop BB105_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB105_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB105_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB105_126 Depth=2
	movl	$0, -20(%rbp)
.LBB105_128:                            # %for.cond406
                                        #   Parent Loop BB105_124 Depth=1
                                        #     Parent Loop BB105_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -20(%rbp)
	jge	.LBB105_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB105_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB105_128 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_128
.LBB105_131:                            # %for.end432
                                        #   in Loop: Header=BB105_126 Depth=2
	jmp	.LBB105_132
.LBB105_132:                            # %for.inc433
                                        #   in Loop: Header=BB105_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_126
.LBB105_133:                            # %for.end435
                                        #   in Loop: Header=BB105_124 Depth=1
	jmp	.LBB105_134
.LBB105_134:                            # %for.inc436
                                        #   in Loop: Header=BB105_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB105_124
.LBB105_135:                            # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -20(%rbp)
.LBB105_136:                            # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_138 Depth 2
                                        #       Child Loop BB105_140 Depth 3
                                        #         Child Loop BB105_142 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB105_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB105_136 Depth=1
	movl	$0, -16(%rbp)
.LBB105_138:                            # %for.cond443
                                        #   Parent Loop BB105_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB105_140 Depth 3
                                        #         Child Loop BB105_142 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB105_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB105_138 Depth=2
	movl	$0, -12(%rbp)
.LBB105_140:                            # %for.cond447
                                        #   Parent Loop BB105_136 Depth=1
                                        #     Parent Loop BB105_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB105_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB105_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB105_140 Depth=3
	movl	$0, -36(%rbp)
.LBB105_142:                            # %for.cond451
                                        #   Parent Loop BB105_136 Depth=1
                                        #     Parent Loop BB105_138 Depth=2
                                        #       Parent Loop BB105_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB105_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB105_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-20(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB105_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB105_142
.LBB105_145:                            # %for.end465
                                        #   in Loop: Header=BB105_140 Depth=3
	jmp	.LBB105_146
.LBB105_146:                            # %for.inc466
                                        #   in Loop: Header=BB105_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_140
.LBB105_147:                            # %for.end468
                                        #   in Loop: Header=BB105_138 Depth=2
	jmp	.LBB105_148
.LBB105_148:                            # %for.inc469
                                        #   in Loop: Header=BB105_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB105_138
.LBB105_149:                            # %for.end471
                                        #   in Loop: Header=BB105_136 Depth=1
	jmp	.LBB105_150
.LBB105_150:                            # %for.inc472
                                        #   in Loop: Header=BB105_136 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_136
.LBB105_151:                            # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB105_152:                            # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB105_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB105_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB105_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_152
.LBB105_155:                            # %for.end483
	movl	$0, -12(%rbp)
.LBB105_156:                            # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB105_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB105_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB105_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_156
.LBB105_159:                            # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB105_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB105_161:                            # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB105_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB105_166
.LBB105_163:                            # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB105_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB105_165:                            # %if.end520
	jmp	.LBB105_166
.LBB105_166:                            # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB105_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB105_168:                            # %if.end536
	cmpl	$1086776274, -84(%rbp)  # imm = 0x40C6E3D2
	jne	.LBB105_170
.LBB105_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB105_170:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB105_169
.Lfunc_end105:
	.size	start_macroblock.64, .Lfunc_end105-start_macroblock.64
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8.65    # -- Begin function writeLumaCoeff8x8.65
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.65,@function
writeLumaCoeff8x8.65:                   # @writeLumaCoeff8x8.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1280375813, -36(%rbp)  # imm = 0x4C50FC05
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	cmpl	$13, -20(%rbp)
	jne	.LBB106_2
# %bb.1:                                # %if.then
	jmp	.LBB106_2
.LBB106_2:                              # %if.end
	cmpl	$0, -28(%rbp)
	je	.LBB106_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB106_15
.LBB106_4:                              # %if.then5
	movl	$0, -16(%rbp)
.LBB106_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB106_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB106_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB106_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB106_5 Depth=1
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -28(%rbp)
	je	.LBB106_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB106_5 Depth=1
	cmpl	$13, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB106_10
.LBB106_9:                              # %cond.false
                                        #   in Loop: Header=BB106_5 Depth=1
	movl	-32(%rbp), %ecx
.LBB106_10:                             # %cond.end
                                        #   in Loop: Header=BB106_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB106_12
.LBB106_11:                             # %if.else
                                        #   in Loop: Header=BB106_5 Depth=1
	movl	-24(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-32(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB106_12:                             # %if.end17
                                        #   in Loop: Header=BB106_5 Depth=1
	jmp	.LBB106_13
.LBB106_13:                             # %for.inc
                                        #   in Loop: Header=BB106_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB106_5
.LBB106_14:                             # %for.end
	jmp	.LBB106_19
.LBB106_15:                             # %if.else18
	cmpl	$13, -20(%rbp)
	jne	.LBB106_17
# %bb.16:                               # %if.then21
	movl	-24(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB106_18
.LBB106_17:                             # %if.else24
	movl	-24(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB106_18:                             # %if.end27
	jmp	.LBB106_19
.LBB106_19:                             # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$1280375813, -36(%rbp)  # imm = 0x4C50FC05
	jne	.LBB106_21
.LBB106_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB106_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB106_20
.Lfunc_end106:
	.size	writeLumaCoeff8x8.65, .Lfunc_end106-writeLumaCoeff8x8.65
	.cfi_endproc
                                        # -- End function
	.globl	proceed2nextMacroblock.66 # -- Begin function proceed2nextMacroblock.66
	.p2align	4, 0x90
	.type	proceed2nextMacroblock.66,@function
proceed2nextMacroblock.66:              # @proceed2nextMacroblock.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1197337138, -28(%rbp)  # imm = 0x475DEA32
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1348(%rcx,%rdx,4), %eax
	movl	%eax, 1348(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1408(%rcx,%rdx,4), %eax
	movl	%eax, 1408(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1388(%rcx,%rdx,4), %eax
	movl	%eax, 1388(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1428(%rcx,%rdx,4), %eax
	movl	%eax, 1428(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	28(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1448(%rcx,%rdx,4), %eax
	movl	%eax, 1448(%rcx,%rdx,4)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB107_3
# %bb.1:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB107_3
# %bb.2:                                # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB107_9
.LBB107_3:                              # %if.then
	movq	stats, %rax
	movq	-8(%rbp), %rcx
	movslq	524(%rcx), %rcx
	movl	672(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 672(%rax,%rcx,4)
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB107_8
# %bb.4:                                # %if.then32
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB107_6
# %bb.5:                                # %if.then33
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB107_7
.LBB107_6:                              # %if.else
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB107_7:                              # %if.end
	jmp	.LBB107_8
.LBB107_8:                              # %if.end48
	jmp	.LBB107_9
.LBB107_9:                              # %if.end49
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addq	$1028, %rcx             # imm = 0x404
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movq	-8(%rbp), %rdx
	movslq	72(%rdx), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB107_35
# %bb.10:                               # %if.then67
	movq	-8(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB107_26
# %bb.11:                               # %if.then70
	movl	$0, -12(%rbp)
.LBB107_12:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB107_25
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB107_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jle	.LBB107_15
# %bb.14:                               # %if.then75
                                        #   in Loop: Header=BB107_12 Depth=1
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	472(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB107_16
.LBB107_15:                             # %if.else86
                                        #   in Loop: Header=BB107_12 Depth=1
	movq	stats, %rax
	addq	$32, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	572(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB107_16:                             # %if.end94
                                        #   in Loop: Header=BB107_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	jne	.LBB107_23
# %bb.17:                               # %if.then99
                                        #   in Loop: Header=BB107_12 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB107_19
# %bb.18:                               # %land.lhs.true
                                        #   in Loop: Header=BB107_12 Depth=1
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB107_20
.LBB107_19:                             # %lor.lhs.false105
                                        #   in Loop: Header=BB107_12 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB107_21
.LBB107_20:                             # %if.then107
                                        #   in Loop: Header=BB107_12 Depth=1
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB107_22
.LBB107_21:                             # %if.else114
                                        #   in Loop: Header=BB107_12 Depth=1
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB107_22:                             # %if.end121
                                        #   in Loop: Header=BB107_12 Depth=1
	jmp	.LBB107_23
.LBB107_23:                             # %if.end122
                                        #   in Loop: Header=BB107_12 Depth=1
	jmp	.LBB107_24
.LBB107_24:                             # %for.inc
                                        #   in Loop: Header=BB107_12 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_12
.LBB107_25:                             # %for.end
	jmp	.LBB107_34
.LBB107_26:                             # %if.else124
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jl	.LBB107_33
# %bb.27:                               # %land.lhs.true127
	movq	-8(%rbp), %rax
	cmpl	$3, 72(%rax)
	jg	.LBB107_33
# %bb.28:                               # %land.lhs.true130
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB107_33
# %bb.29:                               # %if.then134
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB107_31
# %bb.30:                               # %if.then137
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB107_32
.LBB107_31:                             # %if.else146
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB107_32:                             # %if.end155
	jmp	.LBB107_33
.LBB107_33:                             # %if.end156
	jmp	.LBB107_34
.LBB107_34:                             # %if.end157
	jmp	.LBB107_35
.LBB107_35:                             # %if.end158
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB107_37
# %bb.36:                               # %lor.lhs.false161
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB107_38
.LBB107_37:                             # %if.then164
	movq	stats, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
.LBB107_38:                             # %if.end167
	cmpl	$1197337138, -28(%rbp)  # imm = 0x475DEA32
	jne	.LBB107_40
.LBB107_39:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB107_40:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB107_39
.Lfunc_end107:
	.size	proceed2nextMacroblock.66, .Lfunc_end107-proceed2nextMacroblock.66
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16.67       # -- Begin function find_sad_16x16.67
	.p2align	4, 0x90
	.type	find_sad_16x16.67,@function
find_sad_16x16.67:                      # @find_sad_16x16.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$322562784, -80(%rbp)   # imm = 0x1339EAE0
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB108_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB108_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB108_1 Depth=1
	movl	-72(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB108_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_1
.LBB108_4:                              # %for.end
	movl	-72(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB108_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB108_20
.LBB108_6:                              # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB108_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB108_9
.LBB108_8:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB108_9
.LBB108_9:                              # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -60(%rbp)
.LBB108_10:                             # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB108_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB108_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB108_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB108_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB108_14
.LBB108_13:                             # %cond.false23
                                        #   in Loop: Header=BB108_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB108_14
.LBB108_14:                             # %cond.end24
                                        #   in Loop: Header=BB108_10 Depth=1
	andl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB108_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_10
.LBB108_16:                             # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB108_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB108_19
.LBB108_18:                             # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB108_19
.LBB108_19:                             # %cond.end39
	movl	%eax, -76(%rbp)
.LBB108_20:                             # %if.end
	movl	$999999, -64(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB108_21:                             # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_42 Depth 2
                                        #       Child Loop BB108_44 Depth 3
                                        #     Child Loop BB108_50 Depth 2
                                        #       Child Loop BB108_52 Depth 3
                                        #         Child Loop BB108_54 Depth 4
                                        #         Child Loop BB108_58 Depth 4
                                        #           Child Loop BB108_60 Depth 5
                                        #     Child Loop BB108_72 Depth 2
                                        #       Child Loop BB108_74 Depth 3
                                        #     Child Loop BB108_80 Depth 2
                                        #     Child Loop BB108_84 Depth 2
                                        #       Child Loop BB108_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB108_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB108_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB108_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB108_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB108_32
.LBB108_24:                             # %if.then46
                                        #   in Loop: Header=BB108_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB108_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB108_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB108_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB108_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB108_28
.LBB108_27:                             # %if.then51
                                        #   in Loop: Header=BB108_21 Depth=1
	jmp	.LBB108_95
.LBB108_28:                             # %if.end52
                                        #   in Loop: Header=BB108_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB108_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB108_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB108_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB108_21 Depth=1
	jmp	.LBB108_95
.LBB108_31:                             # %if.end57
                                        #   in Loop: Header=BB108_21 Depth=1
	jmp	.LBB108_32
.LBB108_32:                             # %if.end58
                                        #   in Loop: Header=BB108_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB108_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB108_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB108_40
.LBB108_34:                             # %lor.lhs.false62
                                        #   in Loop: Header=BB108_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB108_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB108_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB108_40
.LBB108_36:                             # %lor.lhs.false66
                                        #   in Loop: Header=BB108_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB108_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB108_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB108_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB108_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB108_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB108_21 Depth=1
	cmpl	$0, -76(%rbp)
	jne	.LBB108_41
.LBB108_40:                             # %if.then74
                                        #   in Loop: Header=BB108_21 Depth=1
	jmp	.LBB108_94
.LBB108_41:                             # %if.else75
                                        #   in Loop: Header=BB108_21 Depth=1
	movl	$0, -16(%rbp)
.LBB108_42:                             # %for.cond76
                                        #   Parent Loop BB108_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB108_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB108_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB108_42 Depth=2
	movl	$0, -12(%rbp)
.LBB108_44:                             # %for.cond79
                                        #   Parent Loop BB108_21 Depth=1
                                        #     Parent Loop BB108_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB108_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB108_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB108_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_44
.LBB108_47:                             # %for.end115
                                        #   in Loop: Header=BB108_42 Depth=2
	jmp	.LBB108_48
.LBB108_48:                             # %for.inc116
                                        #   in Loop: Header=BB108_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_42
.LBB108_49:                             # %for.end118
                                        #   in Loop: Header=BB108_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB108_50:                             # %for.cond119
                                        #   Parent Loop BB108_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB108_52 Depth 3
                                        #         Child Loop BB108_54 Depth 4
                                        #         Child Loop BB108_58 Depth 4
                                        #           Child Loop BB108_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB108_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB108_50 Depth=2
	movl	$0, -24(%rbp)
.LBB108_52:                             # %for.cond123
                                        #   Parent Loop BB108_21 Depth=1
                                        #     Parent Loop BB108_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB108_54 Depth 4
                                        #         Child Loop BB108_58 Depth 4
                                        #           Child Loop BB108_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB108_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB108_52 Depth=3
	movl	$0, -16(%rbp)
.LBB108_54:                             # %for.cond127
                                        #   Parent Loop BB108_21 Depth=1
                                        #     Parent Loop BB108_50 Depth=2
                                        #       Parent Loop BB108_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB108_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB108_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB108_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_54
.LBB108_57:                             # %for.end237
                                        #   in Loop: Header=BB108_52 Depth=3
	movl	$0, -12(%rbp)
.LBB108_58:                             # %for.cond238
                                        #   Parent Loop BB108_21 Depth=1
                                        #     Parent Loop BB108_50 Depth=2
                                        #       Parent Loop BB108_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB108_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB108_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB108_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB108_60:                             # %for.cond346
                                        #   Parent Loop BB108_21 Depth=1
                                        #     Parent Loop BB108_50 Depth=2
                                        #       Parent Loop BB108_52 Depth=3
                                        #         Parent Loop BB108_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB108_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB108_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB108_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB108_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB108_63:                             # %if.end363
                                        #   in Loop: Header=BB108_60 Depth=5
	jmp	.LBB108_64
.LBB108_64:                             # %for.inc364
                                        #   in Loop: Header=BB108_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_60
.LBB108_65:                             # %for.end366
                                        #   in Loop: Header=BB108_58 Depth=4
	jmp	.LBB108_66
.LBB108_66:                             # %for.inc367
                                        #   in Loop: Header=BB108_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_58
.LBB108_67:                             # %for.end369
                                        #   in Loop: Header=BB108_52 Depth=3
	jmp	.LBB108_68
.LBB108_68:                             # %for.inc370
                                        #   in Loop: Header=BB108_52 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB108_52
.LBB108_69:                             # %for.end372
                                        #   in Loop: Header=BB108_50 Depth=2
	jmp	.LBB108_70
.LBB108_70:                             # %for.inc373
                                        #   in Loop: Header=BB108_50 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB108_50
.LBB108_71:                             # %for.end375
                                        #   in Loop: Header=BB108_21 Depth=1
	movl	$0, -16(%rbp)
.LBB108_72:                             # %for.cond376
                                        #   Parent Loop BB108_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB108_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB108_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB108_72 Depth=2
	movl	$0, -12(%rbp)
.LBB108_74:                             # %for.cond380
                                        #   Parent Loop BB108_21 Depth=1
                                        #     Parent Loop BB108_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB108_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB108_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB108_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_74
.LBB108_77:                             # %for.end397
                                        #   in Loop: Header=BB108_72 Depth=2
	jmp	.LBB108_78
.LBB108_78:                             # %for.inc398
                                        #   in Loop: Header=BB108_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_72
.LBB108_79:                             # %for.end400
                                        #   in Loop: Header=BB108_21 Depth=1
	movl	$0, -16(%rbp)
.LBB108_80:                             # %for.cond401
                                        #   Parent Loop BB108_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB108_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB108_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB108_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_80
.LBB108_83:                             # %for.end463
                                        #   in Loop: Header=BB108_21 Depth=1
	movl	$0, -12(%rbp)
.LBB108_84:                             # %for.cond464
                                        #   Parent Loop BB108_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB108_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB108_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB108_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB108_86:                             # %for.cond524
                                        #   Parent Loop BB108_21 Depth=1
                                        #     Parent Loop BB108_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB108_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB108_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB108_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_86
.LBB108_89:                             # %for.end536
                                        #   in Loop: Header=BB108_84 Depth=2
	jmp	.LBB108_90
.LBB108_90:                             # %for.inc537
                                        #   in Loop: Header=BB108_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_84
.LBB108_91:                             # %for.end539
                                        #   in Loop: Header=BB108_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB108_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB108_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB108_93:                             # %if.end543
                                        #   in Loop: Header=BB108_21 Depth=1
	jmp	.LBB108_94
.LBB108_94:                             # %if.end544
                                        #   in Loop: Header=BB108_21 Depth=1
	jmp	.LBB108_95
.LBB108_95:                             # %for.inc545
                                        #   in Loop: Header=BB108_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB108_21
.LBB108_96:                             # %for.end547
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %ebx
	cmpl	$322562784, -80(%rbp)   # imm = 0x1339EAE0
	jne	.LBB108_98
.LBB108_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB108_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB108_97
.Lfunc_end108:
	.size	find_sad_16x16.67, .Lfunc_end108-find_sad_16x16.67
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe.68  # -- Begin function SetModesAndRefframe.68
	.p2align	4, 0x90
	.type	SetModesAndRefframe.68,@function
SetModesAndRefframe.68:                 # @SetModesAndRefframe.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1691700804, -60(%rbp)  # imm = 0x64D54E44
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -48(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -12(%rbp)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movl	$-1, (%rax)
	movq	-48(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB109_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB109_12
.LBB109_2:                              # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB109_4
# %bb.3:                                # %if.then18
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB109_11
.LBB109_4:                              # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB109_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB109_10
.LBB109_6:                              # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB109_8
# %bb.7:                                # %if.then45
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB109_9
.LBB109_8:                              # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB109_9:                              # %if.end
	jmp	.LBB109_10
.LBB109_10:                             # %if.end86
	jmp	.LBB109_11
.LBB109_11:                             # %if.end87
	jmp	.LBB109_12
.LBB109_12:                             # %if.end88
	cmpl	$1691700804, -60(%rbp)  # imm = 0x64D54E44
	jne	.LBB109_14
.LBB109_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB109_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB109_13
.Lfunc_end109:
	.size	SetModesAndRefframe.68, .Lfunc_end109-SetModesAndRefframe.68
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.69   # -- Begin function predict_nnz_chroma.69
	.p2align	4, 0x90
	.type	predict_nnz_chroma.69,@function
predict_nnz_chroma.69:                  # @predict_nnz_chroma.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$1010507659, -64(%rbp)  # imm = 0x3C3B1F8B
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -60(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB110_14
# %bb.1:                                # %if.then
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB110_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB110_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB110_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB110_5:                              # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB110_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB110_7:                              # %if.end19
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB110_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB110_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB110_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB110_11:                             # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB110_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB110_13:                             # %if.end57
	jmp	.LBB110_27
.LBB110_14:                             # %if.else
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB110_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB110_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB110_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB110_18:                             # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB110_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB110_20:                             # %if.end90
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB110_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB110_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB110_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB110_24:                             # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB110_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB110_26:                             # %if.end124
	jmp	.LBB110_27
.LBB110_27:                             # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB110_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB110_29:                             # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$1010507659, -64(%rbp)  # imm = 0x3C3B1F8B
	jne	.LBB110_31
.LBB110_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB110_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB110_30
.Lfunc_end110:
	.size	predict_nnz_chroma.69, .Lfunc_end110-predict_nnz_chroma.69
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.70 # -- Begin function write_one_macroblock.70
	.p2align	4, 0x90
	.type	write_one_macroblock.70,@function
write_one_macroblock.70:                # @write_one_macroblock.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$297574717, -32(%rbp)   # imm = 0x11BCA13D
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB111_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB111_2:                              # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB111_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB111_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB111_6
.LBB111_5:                              # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB111_6:                              # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB111_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB111_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -28(%rbp)
	je	.LBB111_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB111_10:                             # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB111_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB111_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB111_22
.LBB111_13:                             # %if.then22
	movl	$0, -24(%rbp)
.LBB111_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_16 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB111_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB111_14 Depth=1
	movl	$0, -20(%rbp)
.LBB111_16:                             # %for.cond24
                                        #   Parent Loop BB111_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB111_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB111_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB111_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB111_16
.LBB111_19:                             # %for.end
                                        #   in Loop: Header=BB111_14 Depth=1
	jmp	.LBB111_20
.LBB111_20:                             # %for.inc35
                                        #   in Loop: Header=BB111_14 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB111_14
.LBB111_21:                             # %for.end37
	jmp	.LBB111_22
.LBB111_22:                             # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB111_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB111_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB111_30
.LBB111_25:                             # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB111_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB111_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB111_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB111_29:                             # %if.end59
	jmp	.LBB111_30
.LBB111_30:                             # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB111_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB111_32:                             # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$297574717, -32(%rbp)   # imm = 0x11BCA13D
	jne	.LBB111_34
.LBB111_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB111_34:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB111_33
.Lfunc_end111:
	.size	write_one_macroblock.70, .Lfunc_end111-write_one_macroblock.70
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC.71 # -- Begin function writeLumaCoeff4x4_CABAC.71
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.71,@function
writeLumaCoeff4x4_CABAC.71:             # @writeLumaCoeff4x4_CABAC.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1937036319, -52(%rbp)  # imm = 0x7374D41F
	movl	%edi, -28(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -72(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB112_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB112_3
.LBB112_2:                              # %cond.false
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB112_3:                              # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB112_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB112_6
.LBB112_5:                              # %cond.false26
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB112_6:                              # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -16(%rbp)
.LBB112_7:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -16(%rbp)
	jg	.LBB112_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB112_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB112_9:                              # %land.end
                                        #   in Loop: Header=BB112_7 Depth=1
	testb	$1, %al
	jne	.LBB112_10
	jmp	.LBB112_15
.LBB112_10:                             # %for.body
                                        #   in Loop: Header=BB112_7 Depth=1
	movq	-104(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -16(%rbp)
	jne	.LBB112_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB112_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB112_13
.LBB112_12:                             # %cond.false40
                                        #   in Loop: Header=BB112_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB112_13:                             # %cond.end43
                                        #   in Loop: Header=BB112_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-88(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB112_7 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_7
.LBB112_15:                             # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$1937036319, -52(%rbp)  # imm = 0x7374D41F
	jne	.LBB112_17
.LBB112_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB112_17:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB112_16
.Lfunc_end112:
	.size	writeLumaCoeff4x4_CABAC.71, .Lfunc_end112-writeLumaCoeff4x4_CABAC.71
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode.72 # -- Begin function writeChromaIntraPredMode.72
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.72,@function
writeChromaIntraPredMode.72:            # @writeChromaIntraPredMode.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$1111163768, -36(%rbp)  # imm = 0x423B0378
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB113_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB113_3
.LBB113_2:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB113_3:                              # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-64(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$1111163768, -36(%rbp)  # imm = 0x423B0378
	jne	.LBB113_5
.LBB113_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB113_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB113_4
.Lfunc_end113:
	.size	writeChromaIntraPredMode.72, .Lfunc_end113-writeChromaIntraPredMode.72
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8.73 # -- Begin function LumaResidualCoding8x8.73
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.73,@function
LumaResidualCoding8x8.73:               # @LumaResidualCoding8x8.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$1351312099, -128(%rbp) # imm = 0x508B62E3
	movq	%rdi, -112(%rbp)
	movq	%rsi, -104(%rbp)
	movl	%edx, -36(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -80(%rbp)
	movl	%r9d, -68(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -28(%rbp)
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -40(%rbp)
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -76(%rbp)
	movl	$0, -124(%rbp)
	cmpl	$0, -80(%rbp)
	jne	.LBB114_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -68(%rbp)
	jne	.LBB114_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB114_3:                              # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB114_5
# %bb.4:                                # %if.then
	movl	$1, -124(%rbp)
.LBB114_5:                              # %if.end
	movl	$0, -64(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB114_6:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_8 Depth 2
                                        #       Child Loop BB114_11 Depth 3
                                        #         Child Loop BB114_13 Depth 4
                                        #       Child Loop BB114_19 Depth 3
                                        #         Child Loop BB114_21 Depth 4
                                        #       Child Loop BB114_29 Depth 3
                                        #         Child Loop BB114_31 Depth 4
                                        #       Child Loop BB114_40 Depth 3
                                        #         Child Loop BB114_42 Depth 4
                                        #       Child Loop BB114_57 Depth 3
                                        #         Child Loop BB114_59 Depth 4
                                        #       Child Loop BB114_67 Depth 3
                                        #         Child Loop BB114_69 Depth 4
                                        #       Child Loop BB114_84 Depth 3
                                        #         Child Loop BB114_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB114_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB114_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -60(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB114_8:                              # %for.cond9
                                        #   Parent Loop BB114_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB114_11 Depth 3
                                        #         Child Loop BB114_13 Depth 4
                                        #       Child Loop BB114_19 Depth 3
                                        #         Child Loop BB114_21 Depth 4
                                        #       Child Loop BB114_29 Depth 3
                                        #         Child Loop BB114_31 Depth 4
                                        #       Child Loop BB114_40 Depth 3
                                        #         Child Loop BB114_42 Depth 4
                                        #       Child Loop BB114_57 Depth 3
                                        #         Child Loop BB114_59 Depth 4
                                        #       Child Loop BB114_67 Depth 3
                                        #         Child Loop BB114_69 Depth 4
                                        #       Child Loop BB114_84 Depth 3
                                        #         Child Loop BB114_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB114_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB114_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB114_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB114_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movl	-68(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB114_11:                             # %for.cond16
                                        #   Parent Loop BB114_6 Depth=1
                                        #     Parent Loop BB114_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB114_13 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB114_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB114_11 Depth=3
	movl	$0, -12(%rbp)
.LBB114_13:                             # %for.cond20
                                        #   Parent Loop BB114_6 Depth=1
                                        #     Parent Loop BB114_8 Depth=2
                                        #       Parent Loop BB114_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB114_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB114_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB114_13 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB114_13
.LBB114_16:                             # %for.end
                                        #   in Loop: Header=BB114_11 Depth=3
	jmp	.LBB114_17
.LBB114_17:                             # %for.inc37
                                        #   in Loop: Header=BB114_11 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB114_11
.LBB114_18:                             # %for.end39
                                        #   in Loop: Header=BB114_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movl	-68(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB114_19:                             # %for.cond41
                                        #   Parent Loop BB114_6 Depth=1
                                        #     Parent Loop BB114_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB114_21 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB114_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB114_19 Depth=3
	movl	$0, -12(%rbp)
.LBB114_21:                             # %for.cond45
                                        #   Parent Loop BB114_6 Depth=1
                                        #     Parent Loop BB114_8 Depth=2
                                        #       Parent Loop BB114_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB114_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB114_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB114_21 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB114_21
.LBB114_24:                             # %for.end65
                                        #   in Loop: Header=BB114_19 Depth=3
	jmp	.LBB114_25
.LBB114_25:                             # %for.inc66
                                        #   in Loop: Header=BB114_19 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB114_19
.LBB114_26:                             # %for.end68
                                        #   in Loop: Header=BB114_8 Depth=2
	jmp	.LBB114_27
.LBB114_27:                             # %if.end69
                                        #   in Loop: Header=BB114_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-80(%rbp), %ecx
	movl	-68(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB114_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB114_8 Depth=2
	movl	$0, -16(%rbp)
.LBB114_29:                             # %for.cond74
                                        #   Parent Loop BB114_6 Depth=1
                                        #     Parent Loop BB114_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB114_31 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB114_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB114_29 Depth=3
	movl	$0, -12(%rbp)
.LBB114_31:                             # %for.cond78
                                        #   Parent Loop BB114_6 Depth=1
                                        #     Parent Loop BB114_8 Depth=2
                                        #       Parent Loop BB114_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB114_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB114_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB114_31 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB114_31
.LBB114_34:                             # %for.end98
                                        #   in Loop: Header=BB114_29 Depth=3
	jmp	.LBB114_35
.LBB114_35:                             # %for.inc99
                                        #   in Loop: Header=BB114_29 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB114_29
.LBB114_36:                             # %for.end101
                                        #   in Loop: Header=BB114_8 Depth=2
	jmp	.LBB114_37
.LBB114_37:                             # %if.end102
                                        #   in Loop: Header=BB114_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB114_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB114_8 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB114_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB114_8 Depth=2
	movl	$0, -16(%rbp)
.LBB114_40:                             # %for.cond108
                                        #   Parent Loop BB114_6 Depth=1
                                        #     Parent Loop BB114_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB114_42 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB114_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB114_40 Depth=3
	movl	$0, -12(%rbp)
.LBB114_42:                             # %for.cond112
                                        #   Parent Loop BB114_6 Depth=1
                                        #     Parent Loop BB114_8 Depth=2
                                        #       Parent Loop BB114_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB114_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB114_42 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB114_42 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB114_42
.LBB114_45:                             # %for.end137
                                        #   in Loop: Header=BB114_40 Depth=3
	jmp	.LBB114_46
.LBB114_46:                             # %for.inc138
                                        #   in Loop: Header=BB114_40 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB114_40
.LBB114_47:                             # %for.end140
                                        #   in Loop: Header=BB114_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB114_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB114_8 Depth=2
	cmpl	$0, -84(%rbp)
	jne	.LBB114_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB114_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB114_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB114_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-28(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -32(%rbp)
	jmp	.LBB114_52
.LBB114_51:                             # %if.else
                                        #   in Loop: Header=BB114_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-28(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -32(%rbp)
.LBB114_52:                             # %if.end151
                                        #   in Loop: Header=BB114_8 Depth=2
	cmpl	$0, -32(%rbp)
	je	.LBB114_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB114_8 Depth=2
	movl	-88(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-76(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB114_54:                             # %if.end157
                                        #   in Loop: Header=BB114_8 Depth=2
	jmp	.LBB114_55
.LBB114_55:                             # %if.end158
                                        #   in Loop: Header=BB114_8 Depth=2
	jmp	.LBB114_65
.LBB114_56:                             # %if.else159
                                        #   in Loop: Header=BB114_8 Depth=2
	movl	$0, -16(%rbp)
.LBB114_57:                             # %for.cond160
                                        #   Parent Loop BB114_6 Depth=1
                                        #     Parent Loop BB114_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB114_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB114_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB114_57 Depth=3
	movl	$0, -12(%rbp)
.LBB114_59:                             # %for.cond164
                                        #   Parent Loop BB114_6 Depth=1
                                        #     Parent Loop BB114_8 Depth=2
                                        #       Parent Loop BB114_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB114_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB114_59 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-60(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB114_59 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB114_59
.LBB114_62:                             # %for.end193
                                        #   in Loop: Header=BB114_57 Depth=3
	jmp	.LBB114_63
.LBB114_63:                             # %for.inc194
                                        #   in Loop: Header=BB114_57 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB114_57
.LBB114_64:                             # %for.end196
                                        #   in Loop: Header=BB114_8 Depth=2
	jmp	.LBB114_65
.LBB114_65:                             # %if.end197
                                        #   in Loop: Header=BB114_8 Depth=2
	jmp	.LBB114_95
.LBB114_66:                             # %if.else198
                                        #   in Loop: Header=BB114_8 Depth=2
	movl	$0, -16(%rbp)
.LBB114_67:                             # %for.cond199
                                        #   Parent Loop BB114_6 Depth=1
                                        #     Parent Loop BB114_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB114_69 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB114_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB114_67 Depth=3
	movl	$0, -12(%rbp)
.LBB114_69:                             # %for.cond203
                                        #   Parent Loop BB114_6 Depth=1
                                        #     Parent Loop BB114_8 Depth=2
                                        #       Parent Loop BB114_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB114_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB114_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-56(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-52(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-12(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-16(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -96(%rbp)
	movq	imgY_org, %rdx
	movl	-56(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-12(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-16(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -120(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-56(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -116(%rbp)
	movl	-116(%rbp), %eax
	subl	-96(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-96(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-120(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-92(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -72(%rbp)
	jne	.LBB114_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB114_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB114_73
.LBB114_72:                             # %if.else300
                                        #   in Loop: Header=BB114_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-60(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB114_73:                             # %if.end314
                                        #   in Loop: Header=BB114_69 Depth=4
	jmp	.LBB114_74
.LBB114_74:                             # %for.inc315
                                        #   in Loop: Header=BB114_69 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB114_69
.LBB114_75:                             # %for.end317
                                        #   in Loop: Header=BB114_67 Depth=3
	jmp	.LBB114_76
.LBB114_76:                             # %for.inc318
                                        #   in Loop: Header=BB114_67 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB114_67
.LBB114_77:                             # %for.end320
                                        #   in Loop: Header=BB114_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB114_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB114_8 Depth=2
	cmpl	$0, -84(%rbp)
	jne	.LBB114_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB114_8 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB114_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB114_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB114_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB114_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-28(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -32(%rbp)
	jmp	.LBB114_83
.LBB114_82:                             # %if.else334
                                        #   in Loop: Header=BB114_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-28(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -32(%rbp)
.LBB114_83:                             # %if.end336
                                        #   in Loop: Header=BB114_8 Depth=2
	movl	$0, -16(%rbp)
.LBB114_84:                             # %for.cond337
                                        #   Parent Loop BB114_6 Depth=1
                                        #     Parent Loop BB114_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB114_86 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB114_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB114_84 Depth=3
	movl	$0, -12(%rbp)
.LBB114_86:                             # %for.cond341
                                        #   Parent Loop BB114_6 Depth=1
                                        #     Parent Loop BB114_8 Depth=2
                                        #       Parent Loop BB114_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB114_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB114_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB114_86 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB114_86
.LBB114_89:                             # %for.end358
                                        #   in Loop: Header=BB114_84 Depth=3
	jmp	.LBB114_90
.LBB114_90:                             # %for.inc359
                                        #   in Loop: Header=BB114_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB114_84
.LBB114_91:                             # %for.end361
                                        #   in Loop: Header=BB114_8 Depth=2
	cmpl	$0, -32(%rbp)
	je	.LBB114_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB114_8 Depth=2
	movl	-88(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-76(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB114_93:                             # %if.end368
                                        #   in Loop: Header=BB114_8 Depth=2
	jmp	.LBB114_94
.LBB114_94:                             # %if.end369
                                        #   in Loop: Header=BB114_8 Depth=2
	jmp	.LBB114_95
.LBB114_95:                             # %if.end370
                                        #   in Loop: Header=BB114_8 Depth=2
	jmp	.LBB114_96
.LBB114_96:                             # %for.inc371
                                        #   in Loop: Header=BB114_8 Depth=2
	movl	-60(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -60(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB114_8
.LBB114_97:                             # %for.end374
                                        #   in Loop: Header=BB114_6 Depth=1
	jmp	.LBB114_98
.LBB114_98:                             # %for.inc375
                                        #   in Loop: Header=BB114_6 Depth=1
	movl	-64(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB114_6
.LBB114_99:                             # %for.end378
	cmpl	$0, -72(%rbp)
	je	.LBB114_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB114_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -84(%rbp)
	jne	.LBB114_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB114_104
# %bb.103:                              # %if.then390
	movl	-36(%rbp), %edi
	leaq	-28(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -32(%rbp)
.LBB114_104:                            # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB114_114
# %bb.105:                              # %if.then395
	movl	$0, -16(%rbp)
.LBB114_106:                            # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_108 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB114_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB114_106 Depth=1
	movl	$0, -12(%rbp)
.LBB114_108:                            # %for.cond400
                                        #   Parent Loop BB114_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB114_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB114_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-44(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB114_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB114_108
.LBB114_111:                            # %for.end417
                                        #   in Loop: Header=BB114_106 Depth=1
	jmp	.LBB114_112
.LBB114_112:                            # %for.inc418
                                        #   in Loop: Header=BB114_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB114_106
.LBB114_113:                            # %for.end420
	jmp	.LBB114_114
.LBB114_114:                            # %if.end421
	cmpl	$0, -32(%rbp)
	je	.LBB114_116
# %bb.115:                              # %if.then423
	movl	-36(%rbp), %ecx
	shll	$2, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-76(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB114_116:                            # %if.end431
	jmp	.LBB114_117
.LBB114_117:                            # %if.end432
	jmp	.LBB114_118
.LBB114_118:                            # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB114_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -84(%rbp)
	jne	.LBB114_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -28(%rbp)
	jg	.LBB114_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB114_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB114_145
.LBB114_123:                            # %if.then448
	movl	$0, -28(%rbp)
	movl	$63, %eax
	subl	-76(%rbp), %eax
	movq	-112(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-36(%rbp), %ecx
	shll	$2, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-104(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB114_124:                            # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_126 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB114_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB114_124 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB114_126:                            # %for.cond462
                                        #   Parent Loop BB114_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB114_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB114_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB114_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB114_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB114_130
.LBB114_129:                            # %if.else481
                                        #   in Loop: Header=BB114_126 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB114_130:                            # %if.end486
                                        #   in Loop: Header=BB114_126 Depth=2
	jmp	.LBB114_131
.LBB114_131:                            # %for.inc487
                                        #   in Loop: Header=BB114_126 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB114_126
.LBB114_132:                            # %for.end489
                                        #   in Loop: Header=BB114_124 Depth=1
	jmp	.LBB114_133
.LBB114_133:                            # %for.inc490
                                        #   in Loop: Header=BB114_124 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB114_124
.LBB114_134:                            # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB114_144
# %bb.135:                              # %if.then496
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB114_136:                            # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_138 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB114_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB114_136 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB114_138:                            # %for.cond502
                                        #   Parent Loop BB114_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB114_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB114_138 Depth=2
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB114_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB114_138
.LBB114_141:                            # %for.end509
                                        #   in Loop: Header=BB114_136 Depth=1
	jmp	.LBB114_142
.LBB114_142:                            # %for.inc510
                                        #   in Loop: Header=BB114_136 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB114_136
.LBB114_143:                            # %for.end512
	jmp	.LBB114_144
.LBB114_144:                            # %if.end513
	jmp	.LBB114_145
.LBB114_145:                            # %if.end514
	movl	-28(%rbp), %ebx
	cmpl	$1351312099, -128(%rbp) # imm = 0x508B62E3
	jne	.LBB114_147
.LBB114_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB114_147:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB114_146
.Lfunc_end114:
	.size	LumaResidualCoding8x8.73, .Lfunc_end114-LumaResidualCoding8x8.73
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode.74 # -- Begin function writeChromaIntraPredMode.74
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.74,@function
writeChromaIntraPredMode.74:            # @writeChromaIntraPredMode.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$905380904, -36(%rbp)   # imm = 0x35F70428
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB115_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB115_3
.LBB115_2:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB115_3:                              # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-64(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$905380904, -36(%rbp)   # imm = 0x35F70428
	jne	.LBB115_5
.LBB115_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB115_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB115_4
.Lfunc_end115:
	.size	writeChromaIntraPredMode.74, .Lfunc_end115-writeChromaIntraPredMode.74
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.75  # -- Begin function ChromaPrediction4x4.75
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.75,@function
ChromaPrediction4x4.75:                 # @ChromaPrediction4x4.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$1373406585, -68(%rbp)  # imm = 0x51DC8579
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -52(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB116_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB116_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB116_6
.LBB116_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB116_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB116_5:                              # %land.end
.LBB116_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB116_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB116_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB116_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -20(%rbp)
	jne	.LBB116_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -56(%rbp)
	jne	.LBB116_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -52(%rbp)
	jne	.LBB116_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB116_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB116_15
.LBB116_14:                             # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB116_15:                             # %cond.end
	movq	%rax, -64(%rbp)
.LBB116_16:                             # %if.end
	cmpl	$-1, -20(%rbp)
	jne	.LBB116_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-24(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB116_87
.LBB116_18:                             # %if.end30
	cmpl	$0, -20(%rbp)
	je	.LBB116_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -20(%rbp)
	jne	.LBB116_21
.LBB116_20:                             # %if.then36
	movl	-16(%rbp), %esi
	movl	-24(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB116_21:                             # %if.end37
	cmpl	$1, -20(%rbp)
	je	.LBB116_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -20(%rbp)
	jne	.LBB116_24
.LBB116_23:                             # %if.then43
	movl	-16(%rbp), %esi
	movl	-24(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB116_24:                             # %if.end44
	cmpl	$0, -72(%rbp)
	je	.LBB116_56
# %bb.25:                               # %if.then46
	cmpl	$2, -20(%rbp)
	jne	.LBB116_35
# %bb.26:                               # %if.then49
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB116_27:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_29 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB116_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB116_27 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB116_29:                             # %for.cond52
                                        #   Parent Loop BB116_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB116_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB116_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB116_29 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_29
.LBB116_32:                             # %for.end
                                        #   in Loop: Header=BB116_27 Depth=1
	jmp	.LBB116_33
.LBB116_33:                             # %for.inc99
                                        #   in Loop: Header=BB116_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_27
.LBB116_34:                             # %for.end101
	jmp	.LBB116_55
.LBB116_35:                             # %if.else
	cmpl	$0, -20(%rbp)
	jne	.LBB116_45
# %bb.36:                               # %if.then104
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB116_37:                             # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_39 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB116_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB116_37 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB116_39:                             # %for.cond109
                                        #   Parent Loop BB116_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB116_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB116_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB116_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_39
.LBB116_42:                             # %for.end139
                                        #   in Loop: Header=BB116_37 Depth=1
	jmp	.LBB116_43
.LBB116_43:                             # %for.inc140
                                        #   in Loop: Header=BB116_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_37
.LBB116_44:                             # %for.end142
	jmp	.LBB116_54
.LBB116_45:                             # %if.else143
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB116_46:                             # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_48 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB116_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB116_46 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB116_48:                             # %for.cond148
                                        #   Parent Loop BB116_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB116_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB116_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB116_48 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_48
.LBB116_51:                             # %for.end178
                                        #   in Loop: Header=BB116_46 Depth=1
	jmp	.LBB116_52
.LBB116_52:                             # %for.inc179
                                        #   in Loop: Header=BB116_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_46
.LBB116_53:                             # %for.end181
	jmp	.LBB116_54
.LBB116_54:                             # %if.end182
	jmp	.LBB116_55
.LBB116_55:                             # %if.end183
	jmp	.LBB116_87
.LBB116_56:                             # %if.else184
	cmpl	$2, -20(%rbp)
	jne	.LBB116_66
# %bb.57:                               # %if.then187
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB116_58:                             # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_60 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB116_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB116_58 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB116_60:                             # %for.cond192
                                        #   Parent Loop BB116_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB116_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB116_60 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB116_60 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_60
.LBB116_63:                             # %for.end208
                                        #   in Loop: Header=BB116_58 Depth=1
	jmp	.LBB116_64
.LBB116_64:                             # %for.inc209
                                        #   in Loop: Header=BB116_58 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_58
.LBB116_65:                             # %for.end211
	jmp	.LBB116_86
.LBB116_66:                             # %if.else212
	cmpl	$0, -20(%rbp)
	jne	.LBB116_76
# %bb.67:                               # %if.then215
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB116_68:                             # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_70 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB116_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB116_68 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB116_70:                             # %for.cond220
                                        #   Parent Loop BB116_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB116_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB116_70 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB116_70 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_70
.LBB116_73:                             # %for.end233
                                        #   in Loop: Header=BB116_68 Depth=1
	jmp	.LBB116_74
.LBB116_74:                             # %for.inc234
                                        #   in Loop: Header=BB116_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_68
.LBB116_75:                             # %for.end236
	jmp	.LBB116_85
.LBB116_76:                             # %if.else237
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB116_77:                             # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_79 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB116_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB116_77 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB116_79:                             # %for.cond242
                                        #   Parent Loop BB116_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB116_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB116_79 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB116_79 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_79
.LBB116_82:                             # %for.end255
                                        #   in Loop: Header=BB116_77 Depth=1
	jmp	.LBB116_83
.LBB116_83:                             # %for.inc256
                                        #   in Loop: Header=BB116_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_77
.LBB116_84:                             # %for.end258
	jmp	.LBB116_85
.LBB116_85:                             # %if.end259
	jmp	.LBB116_86
.LBB116_86:                             # %if.end260
	jmp	.LBB116_87
.LBB116_87:                             # %if.end261
	cmpl	$1373406585, -68(%rbp)  # imm = 0x51DC8579
	jne	.LBB116_89
.LBB116_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB116_89:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB116_88
.Lfunc_end116:
	.size	ChromaPrediction4x4.75, .Lfunc_end116-ChromaPrediction4x4.75
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.76 # -- Begin function IntraChromaPrediction4x4.76
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.76,@function
IntraChromaPrediction4x4.76:            # @IntraChromaPrediction4x4.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1286903718, -28(%rbp)  # imm = 0x4CB497A6
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -24(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB117_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_3 Depth 2
	movl	-8(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB117_1 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB117_3:                              # %for.cond1
                                        #   Parent Loop BB117_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB117_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-20(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB117_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_3
.LBB117_6:                              # %for.end
                                        #   in Loop: Header=BB117_1 Depth=1
	jmp	.LBB117_7
.LBB117_7:                              # %for.inc17
                                        #   in Loop: Header=BB117_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_1
.LBB117_8:                              # %for.end19
	cmpl	$1286903718, -28(%rbp)  # imm = 0x4CB497A6
	jne	.LBB117_10
.LBB117_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB117_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB117_9
.Lfunc_end117:
	.size	IntraChromaPrediction4x4.76, .Lfunc_end117-IntraChromaPrediction4x4.76
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.77   # -- Begin function LumaResidualCoding.77
	.p2align	4, 0x90
	.type	LumaResidualCoding.77,@function
LumaResidualCoding.77:                  # @LumaResidualCoding.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$901460269, -44(%rbp)   # imm = 0x35BB312D
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB118_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB118_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB118_1 Depth=1
	movl	-12(%rbp), %edi
	leaq	-20(%rbp), %rsi
	leaq	-48(%rbp), %rdx
	leaq	-40(%rbp), %rcx
	leaq	-22(%rbp), %r8
	leaq	-18(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-12(%rbp), %edx
	movw	-20(%rbp), %ax
	movl	-48(%rbp), %r8d
	movl	-40(%rbp), %r9d
	movw	-22(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-18(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB118_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_1
.LBB118_4:                              # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB118_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB118_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB118_33
.LBB118_7:                              # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -8(%rbp)
.LBB118_8:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_10 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB118_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB118_8 Depth=1
	movl	$0, -4(%rbp)
.LBB118_10:                             # %for.cond13
                                        #   Parent Loop BB118_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB118_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB118_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB118_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB118_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB118_14
.LBB118_13:                             # %if.else
                                        #   in Loop: Header=BB118_10 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB118_14:                             # %if.end
                                        #   in Loop: Header=BB118_10 Depth=2
	jmp	.LBB118_15
.LBB118_15:                             # %for.inc31
                                        #   in Loop: Header=BB118_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_10
.LBB118_16:                             # %for.end33
                                        #   in Loop: Header=BB118_8 Depth=1
	jmp	.LBB118_17
.LBB118_17:                             # %for.inc34
                                        #   in Loop: Header=BB118_8 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_8
.LBB118_18:                             # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB118_32
# %bb.19:                               # %if.then38
	movl	$0, -12(%rbp)
.LBB118_20:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_22 Depth 2
                                        #       Child Loop BB118_24 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB118_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB118_20 Depth=1
	movl	-12(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -36(%rbp)
	movl	-12(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB118_22:                             # %for.cond45
                                        #   Parent Loop BB118_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB118_24 Depth 3
	cmpl	$8, -8(%rbp)
	jge	.LBB118_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB118_22 Depth=2
	movl	$0, -4(%rbp)
.LBB118_24:                             # %for.cond48
                                        #   Parent Loop BB118_20 Depth=1
                                        #     Parent Loop BB118_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -4(%rbp)
	jge	.LBB118_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB118_24 Depth=3
	movl	-36(%rbp), %edi
	addl	-8(%rbp), %edi
	movl	-52(%rbp), %esi
	addl	-4(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB118_24 Depth=3
	movl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_24
.LBB118_27:                             # %for.end55
                                        #   in Loop: Header=BB118_22 Depth=2
	jmp	.LBB118_28
.LBB118_28:                             # %for.inc56
                                        #   in Loop: Header=BB118_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_22
.LBB118_29:                             # %for.end58
                                        #   in Loop: Header=BB118_20 Depth=1
	jmp	.LBB118_30
.LBB118_30:                             # %for.inc59
                                        #   in Loop: Header=BB118_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_20
.LBB118_31:                             # %for.end61
	jmp	.LBB118_32
.LBB118_32:                             # %if.end62
	jmp	.LBB118_33
.LBB118_33:                             # %if.end63
	cmpl	$901460269, -44(%rbp)   # imm = 0x35BB312D
	jne	.LBB118_35
.LBB118_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB118_35:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB118_34
.Lfunc_end118:
	.size	LumaResidualCoding.77, .Lfunc_end118-LumaResidualCoding.77
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4.78 # -- Begin function OneComponentChromaPrediction4x4.78
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.78,@function
OneComponentChromaPrediction4x4.78:     # @OneComponentChromaPrediction4x4.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$1415405781, -116(%rbp) # imm = 0x545D60D5
	movq	%rdi, -136(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -68(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -84(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-4(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -108(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB119_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB119_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -112(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB119_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB119_5
# %bb.4:                                # %if.then7
	movl	$4, -44(%rbp)
	jmp	.LBB119_6
.LBB119_5:                              # %if.else
	movl	$2, -44(%rbp)
.LBB119_6:                              # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB119_8
.LBB119_7:                              # %if.else10
	movl	$0, -44(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB119_8:                              # %if.end13
	movl	-84(%rbp), %eax
	addl	-44(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movq	-128(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -32(%rbp)
.LBB119_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_11 Depth 2
	cmpl	$4, -32(%rbp)
	jge	.LBB119_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB119_9 Depth=1
	movl	$0, -28(%rbp)
.LBB119_11:                             # %for.cond20
                                        #   Parent Loop BB119_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -28(%rbp)
	jge	.LBB119_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB119_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-28(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-32(%rbp), %ecx
	addl	-68(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -144(%rbp)
	movl	-28(%rbp), %eax
	addl	-80(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-144(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-32(%rbp), %eax
	addl	-68(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-144(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-128(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB119_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB119_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB119_15
.LBB119_14:                             # %cond.false
                                        #   in Loop: Header=BB119_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB119_15:                             # %cond.end
                                        #   in Loop: Header=BB119_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB119_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB119_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB119_21
.LBB119_17:                             # %cond.false65
                                        #   in Loop: Header=BB119_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB119_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB119_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB119_20
.LBB119_19:                             # %cond.false74
                                        #   in Loop: Header=BB119_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB119_20:                             # %cond.end76
                                        #   in Loop: Header=BB119_11 Depth=2
.LBB119_21:                             # %cond.end78
                                        #   in Loop: Header=BB119_11 Depth=2
	movl	%eax, -72(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB119_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB119_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB119_24
.LBB119_23:                             # %cond.false84
                                        #   in Loop: Header=BB119_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB119_24:                             # %cond.end86
                                        #   in Loop: Header=BB119_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB119_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB119_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB119_30
.LBB119_26:                             # %cond.false91
                                        #   in Loop: Header=BB119_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB119_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB119_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB119_29
.LBB119_28:                             # %cond.false96
                                        #   in Loop: Header=BB119_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB119_29:                             # %cond.end98
                                        #   in Loop: Header=BB119_11 Depth=2
.LBB119_30:                             # %cond.end100
                                        #   in Loop: Header=BB119_11 Depth=2
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB119_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB119_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB119_33
.LBB119_32:                             # %cond.false111
                                        #   in Loop: Header=BB119_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB119_33:                             # %cond.end114
                                        #   in Loop: Header=BB119_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB119_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB119_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB119_39
.LBB119_35:                             # %cond.false119
                                        #   in Loop: Header=BB119_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB119_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB119_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB119_38
.LBB119_37:                             # %cond.false129
                                        #   in Loop: Header=BB119_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB119_38:                             # %cond.end132
                                        #   in Loop: Header=BB119_11 Depth=2
.LBB119_39:                             # %cond.end134
                                        #   in Loop: Header=BB119_11 Depth=2
	movl	%eax, -56(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB119_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB119_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB119_42
.LBB119_41:                             # %cond.false141
                                        #   in Loop: Header=BB119_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB119_42:                             # %cond.end144
                                        #   in Loop: Header=BB119_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB119_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB119_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB119_48
.LBB119_44:                             # %cond.false149
                                        #   in Loop: Header=BB119_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB119_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB119_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB119_47
.LBB119_46:                             # %cond.false155
                                        #   in Loop: Header=BB119_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB119_47:                             # %cond.end158
                                        #   in Loop: Header=BB119_11 Depth=2
.LBB119_48:                             # %cond.end160
                                        #   in Loop: Header=BB119_11 Depth=2
	movl	%eax, -76(%rbp)
	movl	-20(%rbp), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-4(%rbp), %eax
	subl	-48(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-12(%rbp), %eax
	andl	-36(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-8(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-88(%rbp), %eax
	imull	-92(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-48(%rbp), %ecx
	imull	-92(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-60(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-56(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-88(%rbp), %ecx
	imull	-52(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-76(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-72(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-48(%rbp), %ecx
	imull	-52(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-76(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-56(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-108(%rbp), %eax
	cltd
	idivl	-64(%rbp)
	movq	-136(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -136(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB119_11 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB119_11
.LBB119_50:                             # %for.end
                                        #   in Loop: Header=BB119_9 Depth=1
	jmp	.LBB119_51
.LBB119_51:                             # %for.inc198
                                        #   in Loop: Header=BB119_9 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB119_9
.LBB119_52:                             # %for.end200
	cmpl	$1415405781, -116(%rbp) # imm = 0x545D60D5
	jne	.LBB119_54
.LBB119_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB119_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB119_53
.Lfunc_end119:
	.size	OneComponentChromaPrediction4x4.78, .Lfunc_end119-OneComponentChromaPrediction4x4.78
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff.79 # -- Begin function writeCBPandLumaCoeff.79
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.79,@function
writeCBPandLumaCoeff.79:                # @writeCBPandLumaCoeff.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1815047892, -100(%rbp) # imm = 0x6C2F6ED4
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB120_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB120_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB120_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB120_7
.LBB120_4:                              # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB120_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB120_6:                              # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB120_10
.LBB120_7:                              # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB120_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB120_9:                              # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB120_10:                             # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB120_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB120_12:                             # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB120_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB120_18
.LBB120_14:                             # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB120_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB120_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB120_18
.LBB120_17:                             # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB120_22
.LBB120_18:                             # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB120_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB120_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB120_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB120_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB120_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB120_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB120_26
.LBB120_25:                             # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB120_26:                             # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB120_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB120_29
.LBB120_28:                             # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB120_29:                             # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB120_30:                             # %if.end93
	jmp	.LBB120_31
.LBB120_31:                             # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB120_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB120_42
.LBB120_33:                             # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB120_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB120_36
.LBB120_35:                             # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB120_36:                             # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB120_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB120_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB120_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB120_41
.LBB120_40:                             # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB120_41:                             # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB120_42:                             # %if.end138
	movl	$0, -36(%rbp)
.LBB120_43:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_45 Depth 2
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB120_43 Depth=1
	movl	$0, -20(%rbp)
.LBB120_45:                             # %for.cond141
                                        #   Parent Loop BB120_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB120_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB120_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB120_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_45
.LBB120_48:                             # %for.end
                                        #   in Loop: Header=BB120_43 Depth=1
	jmp	.LBB120_49
.LBB120_49:                             # %for.inc152
                                        #   in Loop: Header=BB120_43 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB120_43
.LBB120_50:                             # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB120_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB120_52:                             # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB120_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB120_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB120_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB120_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB120_55:                             # %if.end169
                                        #   in Loop: Header=BB120_52 Depth=1
	jmp	.LBB120_56
.LBB120_56:                             # %for.inc170
                                        #   in Loop: Header=BB120_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_52
.LBB120_57:                             # %for.end172
	jmp	.LBB120_101
.LBB120_58:                             # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB120_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_70
.LBB120_60:                             # %if.else179
	movl	$1, -56(%rbp)
	movl	$0, -40(%rbp)
.LBB120_61:                             # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jg	.LBB120_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB120_61 Depth=1
	cmpl	$0, -56(%rbp)
	setne	%al
.LBB120_63:                             # %land.end184
                                        #   in Loop: Header=BB120_61 Depth=1
	testb	$1, %al
	jne	.LBB120_64
	jmp	.LBB120_69
.LBB120_64:                             # %for.body186
                                        #   in Loop: Header=BB120_61 Depth=1
	movq	-120(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -56(%rbp)
	movq	-128(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB120_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB120_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB120_67
.LBB120_66:                             # %if.else196
                                        #   in Loop: Header=BB120_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB120_67:                             # %if.end198
                                        #   in Loop: Header=BB120_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB120_61 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB120_61
.LBB120_69:                             # %for.end218
	jmp	.LBB120_70
.LBB120_70:                             # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB120_100
# %bb.71:                               # %if.then222
	movl	$0, -52(%rbp)
.LBB120_72:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_74 Depth 2
                                        #       Child Loop BB120_76 Depth 3
                                        #         Child Loop BB120_78 Depth 4
                                        #           Child Loop BB120_82 Depth 5
	cmpl	$4, -52(%rbp)
	jge	.LBB120_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB120_72 Depth=1
	movl	$0, -60(%rbp)
.LBB120_74:                             # %for.cond226
                                        #   Parent Loop BB120_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_76 Depth 3
                                        #         Child Loop BB120_78 Depth 4
                                        #           Child Loop BB120_82 Depth 5
	cmpl	$4, -60(%rbp)
	jge	.LBB120_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB120_74 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB120_76:                             # %for.cond229
                                        #   Parent Loop BB120_72 Depth=1
                                        #     Parent Loop BB120_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB120_78 Depth 4
                                        #           Child Loop BB120_82 Depth 5
	movl	-36(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB120_76 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB120_78:                             # %for.cond233
                                        #   Parent Loop BB120_72 Depth=1
                                        #     Parent Loop BB120_74 Depth=2
                                        #       Parent Loop BB120_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB120_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB120_78 Depth=4
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -72(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB120_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB120_78 Depth=4
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_91
.LBB120_81:                             # %if.else247
                                        #   in Loop: Header=BB120_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -56(%rbp)
	movl	$0, -40(%rbp)
.LBB120_82:                             # %for.cond259
                                        #   Parent Loop BB120_72 Depth=1
                                        #     Parent Loop BB120_74 Depth=2
                                        #       Parent Loop BB120_76 Depth=3
                                        #         Parent Loop BB120_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jge	.LBB120_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB120_82 Depth=5
	cmpl	$0, -56(%rbp)
	setne	%al
.LBB120_84:                             # %land.end263
                                        #   in Loop: Header=BB120_82 Depth=5
	testb	$1, %al
	jne	.LBB120_85
	jmp	.LBB120_90
.LBB120_85:                             # %for.body265
                                        #   in Loop: Header=BB120_82 Depth=5
	movq	-144(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -56(%rbp)
	movq	-136(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB120_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB120_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB120_88
.LBB120_87:                             # %if.else276
                                        #   in Loop: Header=BB120_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB120_88:                             # %if.end278
                                        #   in Loop: Header=BB120_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB120_82 Depth=5
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB120_82
.LBB120_90:                             # %for.end300
                                        #   in Loop: Header=BB120_78 Depth=4
	jmp	.LBB120_91
.LBB120_91:                             # %if.end301
                                        #   in Loop: Header=BB120_78 Depth=4
	jmp	.LBB120_92
.LBB120_92:                             # %for.inc302
                                        #   in Loop: Header=BB120_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_78
.LBB120_93:                             # %for.end304
                                        #   in Loop: Header=BB120_76 Depth=3
	jmp	.LBB120_94
.LBB120_94:                             # %for.inc305
                                        #   in Loop: Header=BB120_76 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB120_76
.LBB120_95:                             # %for.end307
                                        #   in Loop: Header=BB120_74 Depth=2
	jmp	.LBB120_96
.LBB120_96:                             # %for.inc308
                                        #   in Loop: Header=BB120_74 Depth=2
	movl	-60(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB120_74
.LBB120_97:                             # %for.end310
                                        #   in Loop: Header=BB120_72 Depth=1
	jmp	.LBB120_98
.LBB120_98:                             # %for.inc311
                                        #   in Loop: Header=BB120_72 Depth=1
	movl	-52(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB120_72
.LBB120_99:                             # %for.end313
	jmp	.LBB120_100
.LBB120_100:                            # %if.end314
	jmp	.LBB120_101
.LBB120_101:                            # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$1815047892, -100(%rbp) # imm = 0x6C2F6ED4
	jne	.LBB120_103
.LBB120_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB120_103:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB120_102
.Lfunc_end120:
	.size	writeCBPandLumaCoeff.79, .Lfunc_end120-writeCBPandLumaCoeff.79
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big.80        # -- Begin function slice_too_big.80
	.p2align	4, 0x90
	.type	slice_too_big.80,@function
slice_too_big.80:                       # @slice_too_big.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$109295272, -56(%rbp)   # imm = 0x683B6A8
	movl	%edi, -52(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB121_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB121_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB121_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB121_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB121_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB121_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB121_5:                              # %if.end
                                        #   in Loop: Header=BB121_2 Depth=1
	movq	-40(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB121_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB121_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB121_7:                              # %if.end8
                                        #   in Loop: Header=BB121_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB121_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB121_21
.LBB121_9:                              # %if.end11
                                        #   in Loop: Header=BB121_2 Depth=1
	jmp	.LBB121_10
.LBB121_10:                             # %for.inc
                                        #   in Loop: Header=BB121_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB121_2
.LBB121_11:                             # %for.end
	jmp	.LBB121_12
.LBB121_12:                             # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB121_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB121_14:                             # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB121_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB121_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB121_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB121_21
.LBB121_17:                             # %if.end27
                                        #   in Loop: Header=BB121_14 Depth=1
	jmp	.LBB121_18
.LBB121_18:                             # %for.inc28
                                        #   in Loop: Header=BB121_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB121_14
.LBB121_19:                             # %for.end30
	jmp	.LBB121_20
.LBB121_20:                             # %if.end31
	movl	$0, -20(%rbp)
.LBB121_21:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$109295272, -56(%rbp)   # imm = 0x683B6A8
	jne	.LBB121_23
.LBB121_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB121_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB121_22
.Lfunc_end121:
	.size	slice_too_big.80, .Lfunc_end121-slice_too_big.80
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode.81 # -- Begin function writeChromaIntraPredMode.81
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.81,@function
writeChromaIntraPredMode.81:            # @writeChromaIntraPredMode.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$2061303935, -36(%rbp)  # imm = 0x7ADD007F
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB122_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB122_3
.LBB122_2:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB122_3:                              # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-64(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$2061303935, -36(%rbp)  # imm = 0x7ADD007F
	jne	.LBB122_5
.LBB122_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB122_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB122_4
.Lfunc_end122:
	.size	writeChromaIntraPredMode.81, .Lfunc_end122-writeChromaIntraPredMode.81
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.82   # -- Begin function predict_nnz_chroma.82
	.p2align	4, 0x90
	.type	predict_nnz_chroma.82,@function
predict_nnz_chroma.82:                  # @predict_nnz_chroma.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$251702001, -64(%rbp)   # imm = 0xF00AAF1
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -56(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB123_14
# %bb.1:                                # %if.then
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB123_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB123_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB123_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB123_5:                              # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB123_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB123_7:                              # %if.end19
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB123_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB123_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB123_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB123_11:                             # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB123_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB123_13:                             # %if.end57
	jmp	.LBB123_27
.LBB123_14:                             # %if.else
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB123_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB123_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB123_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB123_18:                             # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB123_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB123_20:                             # %if.end90
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB123_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB123_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB123_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB123_24:                             # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB123_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB123_26:                             # %if.end124
	jmp	.LBB123_27
.LBB123_27:                             # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB123_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB123_29:                             # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$251702001, -64(%rbp)   # imm = 0xF00AAF1
	jne	.LBB123_31
.LBB123_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB123_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB123_30
.Lfunc_end123:
	.size	predict_nnz_chroma.82, .Lfunc_end123-predict_nnz_chroma.82
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.83    # -- Begin function LumaPrediction4x4.83
	.p2align	4, 0x90
	.type	LumaPrediction4x4.83,@function
LumaPrediction4x4.83:                   # @LumaPrediction4x4.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$717439933, -104(%rbp)  # imm = 0x2AC343BD
	movl	%edi, -24(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -68(%rbp)
	movl	%r8d, -60(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -64(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -76(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB124_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB124_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB124_6
.LBB124_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB124_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB124_5:                              # %land.end
.LBB124_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB124_9
# %bb.7:                                # %land.lhs.true11
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB124_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB124_10
.LBB124_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB124_10
.LBB124_10:                             # %cond.end
	movl	%ecx, -72(%rbp)
	movq	-88(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB124_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB124_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB124_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -20(%rbp)
	jne	.LBB124_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -68(%rbp)
	jne	.LBB124_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -60(%rbp)
	jne	.LBB124_20
# %bb.16:                               # %if.then
	movq	-88(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB124_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB124_19
.LBB124_18:                             # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB124_19:                             # %cond.end38
	movq	%rax, -96(%rbp)
.LBB124_20:                             # %if.end
	cmpl	$0, -20(%rbp)
	je	.LBB124_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -20(%rbp)
	jne	.LBB124_23
.LBB124_22:                             # %if.then45
	movl	-52(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-72(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB124_23:                             # %if.end58
	cmpl	$1, -20(%rbp)
	je	.LBB124_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -20(%rbp)
	jne	.LBB124_26
.LBB124_25:                             # %if.then64
	movl	-52(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-72(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB124_26:                             # %if.end77
	cmpl	$0, -100(%rbp)
	je	.LBB124_58
# %bb.27:                               # %if.then79
	cmpl	$2, -20(%rbp)
	jne	.LBB124_37
# %bb.28:                               # %if.then82
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB124_29:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_31 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB124_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB124_29 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB124_31:                             # %for.cond85
                                        #   Parent Loop BB124_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB124_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB124_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB124_31 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_31
.LBB124_34:                             # %for.end
                                        #   in Loop: Header=BB124_29 Depth=1
	jmp	.LBB124_35
.LBB124_35:                             # %for.inc125
                                        #   in Loop: Header=BB124_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_29
.LBB124_36:                             # %for.end127
	jmp	.LBB124_57
.LBB124_37:                             # %if.else
	cmpl	$0, -20(%rbp)
	jne	.LBB124_47
# %bb.38:                               # %if.then130
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB124_39:                             # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_41 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB124_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB124_39 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB124_41:                             # %for.cond135
                                        #   Parent Loop BB124_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB124_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB124_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB124_41 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_41
.LBB124_44:                             # %for.end161
                                        #   in Loop: Header=BB124_39 Depth=1
	jmp	.LBB124_45
.LBB124_45:                             # %for.inc162
                                        #   in Loop: Header=BB124_39 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_39
.LBB124_46:                             # %for.end164
	jmp	.LBB124_56
.LBB124_47:                             # %if.else165
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB124_48:                             # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_50 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB124_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB124_48 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB124_50:                             # %for.cond170
                                        #   Parent Loop BB124_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB124_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB124_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB124_50 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_50
.LBB124_53:                             # %for.end196
                                        #   in Loop: Header=BB124_48 Depth=1
	jmp	.LBB124_54
.LBB124_54:                             # %for.inc197
                                        #   in Loop: Header=BB124_48 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_48
.LBB124_55:                             # %for.end199
	jmp	.LBB124_56
.LBB124_56:                             # %if.end200
	jmp	.LBB124_57
.LBB124_57:                             # %if.end201
	jmp	.LBB124_89
.LBB124_58:                             # %if.else202
	cmpl	$2, -20(%rbp)
	jne	.LBB124_68
# %bb.59:                               # %if.then205
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB124_60:                             # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_62 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB124_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB124_60 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB124_62:                             # %for.cond210
                                        #   Parent Loop BB124_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB124_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB124_62 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB124_62 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_62
.LBB124_65:                             # %for.end226
                                        #   in Loop: Header=BB124_60 Depth=1
	jmp	.LBB124_66
.LBB124_66:                             # %for.inc227
                                        #   in Loop: Header=BB124_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_60
.LBB124_67:                             # %for.end229
	jmp	.LBB124_88
.LBB124_68:                             # %if.else230
	cmpl	$0, -20(%rbp)
	jne	.LBB124_78
# %bb.69:                               # %if.then233
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB124_70:                             # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_72 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB124_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB124_70 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB124_72:                             # %for.cond238
                                        #   Parent Loop BB124_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB124_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB124_72 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB124_72 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_72
.LBB124_75:                             # %for.end251
                                        #   in Loop: Header=BB124_70 Depth=1
	jmp	.LBB124_76
.LBB124_76:                             # %for.inc252
                                        #   in Loop: Header=BB124_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_70
.LBB124_77:                             # %for.end254
	jmp	.LBB124_87
.LBB124_78:                             # %if.else255
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB124_79:                             # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_81 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB124_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB124_79 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB124_81:                             # %for.cond260
                                        #   Parent Loop BB124_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB124_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB124_81 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB124_81 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_81
.LBB124_84:                             # %for.end273
                                        #   in Loop: Header=BB124_79 Depth=1
	jmp	.LBB124_85
.LBB124_85:                             # %for.inc274
                                        #   in Loop: Header=BB124_79 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_79
.LBB124_86:                             # %for.end276
	jmp	.LBB124_87
.LBB124_87:                             # %if.end277
	jmp	.LBB124_88
.LBB124_88:                             # %if.end278
	jmp	.LBB124_89
.LBB124_89:                             # %if.end279
	cmpl	$717439933, -104(%rbp)  # imm = 0x2AC343BD
	jne	.LBB124_91
.LBB124_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB124_91:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB124_90
.Lfunc_end124:
	.size	LumaPrediction4x4.83, .Lfunc_end124-LumaPrediction4x4.83
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi.84  # -- Begin function LumaPrediction4x4Bi.84
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.84,@function
LumaPrediction4x4Bi.84:                 # @LumaPrediction4x4Bi.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$1173940520, -80(%rbp)  # imm = 0x45F8E928
	movl	%edi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -72(%rbp)
	movl	%r8d, -84(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB125_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB125_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB125_6
.LBB125_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB125_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB125_5:                              # %land.end
.LBB125_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB125_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB125_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB125_10
.LBB125_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB125_10
.LBB125_10:                             # %cond.end
	movl	%ecx, -52(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB125_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB125_13
.LBB125_12:                             # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB125_13:                             # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB125_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB125_16
.LBB125_15:                             # %if.then
	movl	-60(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-52(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB125_16:                             # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB125_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB125_19
.LBB125_18:                             # %if.then39
	movl	-60(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-52(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB125_19:                             # %if.end52
	cmpl	$0, -76(%rbp)
	je	.LBB125_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB125_30
# %bb.21:                               # %if.then56
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB125_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_24 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB125_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB125_22 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB125_24:                             # %for.cond58
                                        #   Parent Loop BB125_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB125_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB125_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB125_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_24
.LBB125_27:                             # %for.end
                                        #   in Loop: Header=BB125_22 Depth=1
	jmp	.LBB125_28
.LBB125_28:                             # %for.inc96
                                        #   in Loop: Header=BB125_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_22
.LBB125_29:                             # %for.end98
	jmp	.LBB125_50
.LBB125_30:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB125_40
# %bb.31:                               # %if.then101
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB125_32:                             # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_34 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB125_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB125_32 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB125_34:                             # %for.cond106
                                        #   Parent Loop BB125_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB125_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB125_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB125_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_34
.LBB125_37:                             # %for.end132
                                        #   in Loop: Header=BB125_32 Depth=1
	jmp	.LBB125_38
.LBB125_38:                             # %for.inc133
                                        #   in Loop: Header=BB125_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_32
.LBB125_39:                             # %for.end135
	jmp	.LBB125_49
.LBB125_40:                             # %if.else136
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB125_41:                             # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB125_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB125_41 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB125_43:                             # %for.cond141
                                        #   Parent Loop BB125_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB125_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB125_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB125_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_43
.LBB125_46:                             # %for.end167
                                        #   in Loop: Header=BB125_41 Depth=1
	jmp	.LBB125_47
.LBB125_47:                             # %for.inc168
                                        #   in Loop: Header=BB125_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_41
.LBB125_48:                             # %for.end170
	jmp	.LBB125_49
.LBB125_49:                             # %if.end171
	jmp	.LBB125_50
.LBB125_50:                             # %if.end172
	jmp	.LBB125_82
.LBB125_51:                             # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB125_61
# %bb.52:                               # %if.then176
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB125_53:                             # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_55 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB125_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB125_53 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB125_55:                             # %for.cond181
                                        #   Parent Loop BB125_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB125_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB125_55 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB125_55 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_55
.LBB125_58:                             # %for.end197
                                        #   in Loop: Header=BB125_53 Depth=1
	jmp	.LBB125_59
.LBB125_59:                             # %for.inc198
                                        #   in Loop: Header=BB125_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_53
.LBB125_60:                             # %for.end200
	jmp	.LBB125_81
.LBB125_61:                             # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB125_71
# %bb.62:                               # %if.then204
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB125_63:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_65 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB125_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB125_63 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB125_65:                             # %for.cond209
                                        #   Parent Loop BB125_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB125_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB125_65 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB125_65 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_65
.LBB125_68:                             # %for.end222
                                        #   in Loop: Header=BB125_63 Depth=1
	jmp	.LBB125_69
.LBB125_69:                             # %for.inc223
                                        #   in Loop: Header=BB125_63 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_63
.LBB125_70:                             # %for.end225
	jmp	.LBB125_80
.LBB125_71:                             # %if.else226
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB125_72:                             # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_74 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB125_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB125_72 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB125_74:                             # %for.cond231
                                        #   Parent Loop BB125_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB125_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB125_74 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB125_74 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_74
.LBB125_77:                             # %for.end244
                                        #   in Loop: Header=BB125_72 Depth=1
	jmp	.LBB125_78
.LBB125_78:                             # %for.inc245
                                        #   in Loop: Header=BB125_72 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_72
.LBB125_79:                             # %for.end247
	jmp	.LBB125_80
.LBB125_80:                             # %if.end248
	jmp	.LBB125_81
.LBB125_81:                             # %if.end249
	jmp	.LBB125_82
.LBB125_82:                             # %if.end250
	cmpl	$1173940520, -80(%rbp)  # imm = 0x45F8E928
	jne	.LBB125_84
.LBB125_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB125_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB125_83
.Lfunc_end125:
	.size	LumaPrediction4x4Bi.84, .Lfunc_end125-LumaPrediction4x4Bi.84
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz.85          # -- Begin function predict_nnz.85
	.p2align	4, 0x90
	.type	predict_nnz.85,@function
predict_nnz.85:                         # @predict_nnz.85
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1946904639, -56(%rbp)  # imm = 0x740B683F
	movl	%edi, -44(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %edi
	movl	-44(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB126_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB126_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB126_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB126_4:                              # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB126_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB126_6:                              # %if.end14
	movl	-48(%rbp), %edi
	movl	-44(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB126_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB126_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB126_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB126_10:                             # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB126_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB126_12:                             # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB126_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB126_14:                             # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$1946904639, -56(%rbp)  # imm = 0x740B683F
	jne	.LBB126_16
.LBB126_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB126_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB126_15
.Lfunc_end126:
	.size	predict_nnz.85, .Lfunc_end126-predict_nnz.85
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding.86 # -- Begin function ChromaResidualCoding.86
	.p2align	4, 0x90
	.type	ChromaResidualCoding.86,@function
ChromaResidualCoding.86:                # @ChromaResidualCoding.86
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$423826034, -80(%rbp)   # imm = 0x19431272
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB127_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB127_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB127_3:                              # %lor.end
.LBB127_4:                              # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -68(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB127_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_7 Depth 2
                                        #       Child Loop BB127_9 Depth 3
                                        #     Child Loop BB127_16 Depth 2
                                        #       Child Loop BB127_18 Depth 3
                                        #     Child Loop BB127_33 Depth 2
                                        #       Child Loop BB127_35 Depth 3
                                        #     Child Loop BB127_43 Depth 2
                                        #       Child Loop BB127_45 Depth 3
                                        #     Child Loop BB127_58 Depth 2
                                        #       Child Loop BB127_60 Depth 3
                                        #     Child Loop BB127_87 Depth 2
                                        #       Child Loop BB127_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB127_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB127_5 Depth=1
	movl	$0, -64(%rbp)
	movl	$0, -20(%rbp)
.LBB127_7:                              # %for.cond5
                                        #   Parent Loop BB127_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB127_9 Depth 3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB127_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB127_7 Depth=2
	movl	$0, -24(%rbp)
.LBB127_9:                              # %for.cond8
                                        #   Parent Loop BB127_5 Depth=1
                                        #     Parent Loop BB127_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB127_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB127_9 Depth=3
	movslq	-68(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %edi
	leaq	-50(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	leaq	-76(%rbp), %rcx
	leaq	-54(%rbp), %r8
	leaq	-52(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-50(%rbp), %ecx
	movl	-72(%rbp), %r8d
	movl	-76(%rbp), %r9d
	movw	-54(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-52(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB127_9 Depth=3
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB127_9
.LBB127_12:                             # %for.end
                                        #   in Loop: Header=BB127_7 Depth=2
	jmp	.LBB127_13
.LBB127_13:                             # %for.inc18
                                        #   in Loop: Header=BB127_7 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB127_7
.LBB127_14:                             # %for.end20
                                        #   in Loop: Header=BB127_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB127_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB127_5 Depth=1
	movl	$0, -4(%rbp)
.LBB127_16:                             # %for.cond21
                                        #   Parent Loop BB127_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB127_18 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB127_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB127_16 Depth=2
	movl	$0, -8(%rbp)
.LBB127_18:                             # %for.cond26
                                        #   Parent Loop BB127_5 Depth=1
                                        #     Parent Loop BB127_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB127_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB127_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB127_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB127_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB127_25
.LBB127_21:                             # %if.else
                                        #   in Loop: Header=BB127_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB127_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB127_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB127_24
.LBB127_23:                             # %if.else52
                                        #   in Loop: Header=BB127_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB127_24:                             # %if.end
                                        #   in Loop: Header=BB127_18 Depth=3
	jmp	.LBB127_25
.LBB127_25:                             # %if.end57
                                        #   in Loop: Header=BB127_18 Depth=3
	jmp	.LBB127_26
.LBB127_26:                             # %for.inc58
                                        #   in Loop: Header=BB127_18 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_18
.LBB127_27:                             # %for.end59
                                        #   in Loop: Header=BB127_16 Depth=2
	jmp	.LBB127_28
.LBB127_28:                             # %for.inc60
                                        #   in Loop: Header=BB127_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_16
.LBB127_29:                             # %for.end62
                                        #   in Loop: Header=BB127_5 Depth=1
	jmp	.LBB127_74
.LBB127_30:                             # %if.else63
                                        #   in Loop: Header=BB127_5 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB127_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB127_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB127_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB127_5 Depth=1
	movl	$0, -4(%rbp)
.LBB127_33:                             # %for.cond69
                                        #   Parent Loop BB127_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB127_35 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB127_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB127_33 Depth=2
	movl	$0, -8(%rbp)
.LBB127_35:                             # %for.cond73
                                        #   Parent Loop BB127_5 Depth=1
                                        #     Parent Loop BB127_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -8(%rbp)
	jge	.LBB127_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB127_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB127_35 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_35
.LBB127_38:                             # %for.end83
                                        #   in Loop: Header=BB127_33 Depth=2
	jmp	.LBB127_39
.LBB127_39:                             # %for.inc84
                                        #   in Loop: Header=BB127_33 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_33
.LBB127_40:                             # %for.end86
                                        #   in Loop: Header=BB127_5 Depth=1
	jmp	.LBB127_73
.LBB127_41:                             # %if.else87
                                        #   in Loop: Header=BB127_5 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB127_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB127_5 Depth=1
	movl	$0, -4(%rbp)
.LBB127_43:                             # %for.cond90
                                        #   Parent Loop BB127_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB127_45 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB127_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB127_43 Depth=2
	movl	$0, -8(%rbp)
.LBB127_45:                             # %for.cond95
                                        #   Parent Loop BB127_5 Depth=1
                                        #     Parent Loop BB127_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB127_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB127_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB127_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB127_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB127_52
.LBB127_48:                             # %if.else119
                                        #   in Loop: Header=BB127_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB127_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB127_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB127_51
.LBB127_50:                             # %if.else127
                                        #   in Loop: Header=BB127_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB127_51:                             # %if.end132
                                        #   in Loop: Header=BB127_45 Depth=3
	jmp	.LBB127_52
.LBB127_52:                             # %if.end133
                                        #   in Loop: Header=BB127_45 Depth=3
	jmp	.LBB127_53
.LBB127_53:                             # %for.inc134
                                        #   in Loop: Header=BB127_45 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_45
.LBB127_54:                             # %for.end136
                                        #   in Loop: Header=BB127_43 Depth=2
	jmp	.LBB127_55
.LBB127_55:                             # %for.inc137
                                        #   in Loop: Header=BB127_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_43
.LBB127_56:                             # %for.end139
                                        #   in Loop: Header=BB127_5 Depth=1
	jmp	.LBB127_72
.LBB127_57:                             # %if.else140
                                        #   in Loop: Header=BB127_5 Depth=1
	movl	$0, -4(%rbp)
.LBB127_58:                             # %for.cond141
                                        #   Parent Loop BB127_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB127_60 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB127_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB127_58 Depth=2
	movl	$0, -8(%rbp)
.LBB127_60:                             # %for.cond146
                                        #   Parent Loop BB127_5 Depth=1
                                        #     Parent Loop BB127_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB127_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB127_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB127_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB127_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB127_67
.LBB127_63:                             # %if.else175
                                        #   in Loop: Header=BB127_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB127_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB127_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB127_66
.LBB127_65:                             # %if.else188
                                        #   in Loop: Header=BB127_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB127_66:                             # %if.end198
                                        #   in Loop: Header=BB127_60 Depth=3
	jmp	.LBB127_67
.LBB127_67:                             # %if.end199
                                        #   in Loop: Header=BB127_60 Depth=3
	jmp	.LBB127_68
.LBB127_68:                             # %for.inc200
                                        #   in Loop: Header=BB127_60 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_60
.LBB127_69:                             # %for.end202
                                        #   in Loop: Header=BB127_58 Depth=2
	jmp	.LBB127_70
.LBB127_70:                             # %for.inc203
                                        #   in Loop: Header=BB127_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_58
.LBB127_71:                             # %for.end205
                                        #   in Loop: Header=BB127_5 Depth=1
	jmp	.LBB127_72
.LBB127_72:                             # %if.end206
                                        #   in Loop: Header=BB127_5 Depth=1
	jmp	.LBB127_73
.LBB127_73:                             # %if.end207
                                        #   in Loop: Header=BB127_5 Depth=1
	jmp	.LBB127_74
.LBB127_74:                             # %if.end208
                                        #   in Loop: Header=BB127_5 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB127_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB127_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB127_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB127_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB127_100
.LBB127_77:                             # %if.else215
                                        #   in Loop: Header=BB127_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB127_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB127_5 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB127_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB127_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB127_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB127_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB127_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB127_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB127_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB127_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB127_84
.LBB127_83:                             # %if.then247
                                        #   in Loop: Header=BB127_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB127_85
.LBB127_84:                             # %if.else249
                                        #   in Loop: Header=BB127_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB127_85:                             # %if.end251
                                        #   in Loop: Header=BB127_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB127_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB127_5 Depth=1
	movl	$0, -4(%rbp)
.LBB127_87:                             # %for.cond255
                                        #   Parent Loop BB127_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB127_89 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB127_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB127_87 Depth=2
	movl	$0, -8(%rbp)
.LBB127_89:                             # %for.cond260
                                        #   Parent Loop BB127_5 Depth=1
                                        #     Parent Loop BB127_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB127_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB127_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB127_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB127_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB127_93
.LBB127_92:                             # %if.else277
                                        #   in Loop: Header=BB127_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB127_93:                             # %if.end287
                                        #   in Loop: Header=BB127_89 Depth=3
	jmp	.LBB127_94
.LBB127_94:                             # %for.inc288
                                        #   in Loop: Header=BB127_89 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_89
.LBB127_95:                             # %for.end290
                                        #   in Loop: Header=BB127_87 Depth=2
	jmp	.LBB127_96
.LBB127_96:                             # %for.inc291
                                        #   in Loop: Header=BB127_87 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_87
.LBB127_97:                             # %for.end293
                                        #   in Loop: Header=BB127_5 Depth=1
	jmp	.LBB127_98
.LBB127_98:                             # %if.end294
                                        #   in Loop: Header=BB127_5 Depth=1
	jmp	.LBB127_99
.LBB127_99:                             # %if.end295
                                        #   in Loop: Header=BB127_5 Depth=1
	jmp	.LBB127_100
.LBB127_100:                            # %if.end296
                                        #   in Loop: Header=BB127_5 Depth=1
	jmp	.LBB127_101
.LBB127_101:                            # %for.inc297
                                        #   in Loop: Header=BB127_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB127_5
.LBB127_102:                            # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB127_139
# %bb.103:                              # %if.then307
	movl	$0, -4(%rbp)
.LBB127_104:                            # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_106 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB127_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB127_104 Depth=1
	movl	$0, -8(%rbp)
.LBB127_106:                            # %for.cond312
                                        #   Parent Loop BB127_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB127_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB127_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -60(%rbp)
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-60(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB127_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB127_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB127_110
.LBB127_109:                            # %cond.false
                                        #   in Loop: Header=BB127_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB127_110:                            # %cond.end
                                        #   in Loop: Header=BB127_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB127_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB127_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB127_116
.LBB127_112:                            # %cond.false358
                                        #   in Loop: Header=BB127_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-16(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB127_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB127_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB127_115
.LBB127_114:                            # %cond.false367
                                        #   in Loop: Header=BB127_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB127_115:                            # %cond.end373
                                        #   in Loop: Header=BB127_106 Depth=2
.LBB127_116:                            # %cond.end375
                                        #   in Loop: Header=BB127_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-32(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB127_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB127_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB127_119
.LBB127_118:                            # %cond.false394
                                        #   in Loop: Header=BB127_106 Depth=2
	movl	-32(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB127_119:                            # %cond.end400
                                        #   in Loop: Header=BB127_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB127_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB127_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB127_125
.LBB127_121:                            # %cond.false406
                                        #   in Loop: Header=BB127_106 Depth=2
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB127_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB127_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB127_124
.LBB127_123:                            # %cond.false415
                                        #   in Loop: Header=BB127_106 Depth=2
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB127_124:                            # %cond.end421
                                        #   in Loop: Header=BB127_106 Depth=2
.LBB127_125:                            # %cond.end423
                                        #   in Loop: Header=BB127_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-36(%rbp), %esi
	movslq	-8(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-4(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB127_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB127_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB127_128
.LBB127_127:                            # %cond.false443
                                        #   in Loop: Header=BB127_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-36(%rbp), %ecx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB127_128:                            # %cond.end449
                                        #   in Loop: Header=BB127_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB127_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB127_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB127_134
.LBB127_130:                            # %cond.false455
                                        #   in Loop: Header=BB127_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-36(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB127_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB127_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB127_133
.LBB127_132:                            # %cond.false464
                                        #   in Loop: Header=BB127_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB127_133:                            # %cond.end470
                                        #   in Loop: Header=BB127_106 Depth=2
.LBB127_134:                            # %cond.end472
                                        #   in Loop: Header=BB127_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB127_106 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_106
.LBB127_136:                            # %for.end487
                                        #   in Loop: Header=BB127_104 Depth=1
	jmp	.LBB127_137
.LBB127_137:                            # %for.inc488
                                        #   in Loop: Header=BB127_104 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_104
.LBB127_138:                            # %for.end490
	jmp	.LBB127_139
.LBB127_139:                            # %if.end491
	cmpl	$423826034, -80(%rbp)   # imm = 0x19431272
	jne	.LBB127_141
.LBB127_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB127_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB127_140
.Lfunc_end127:
	.size	ChromaResidualCoding.86, .Lfunc_end127-ChromaResidualCoding.86
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8.87 # -- Begin function writeMotionVector8x8.87
	.p2align	4, 0x90
	.type	writeMotionVector8x8.87,@function
writeMotionVector8x8.87:                # @writeMotionVector8x8.87
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$42899928, -92(%rbp)    # imm = 0x28E99D8
	movl	%edi, -80(%rbp)
	movl	%esi, -100(%rbp)
	movl	%edx, -96(%rbp)
	movl	%ecx, -84(%rbp)
	movl	%r8d, -88(%rbp)
	movl	%r9d, -40(%rbp)
	movl	$0, -64(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB128_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB128_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB128_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -60(%rbp)
	jne	.LBB128_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB128_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB128_7
.LBB128_6:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB128_7:                              # %cond.end
	movq	%rax, -112(%rbp)
.LBB128_8:                              # %if.end
	movl	-100(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB128_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_11 Depth 2
                                        #       Child Loop BB128_13 Depth 3
                                        #         Child Loop BB128_15 Depth 4
                                        #           Child Loop BB128_17 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB128_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB128_9 Depth=1
	movl	-80(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB128_11:                             # %for.cond22
                                        #   Parent Loop BB128_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB128_13 Depth 3
                                        #         Child Loop BB128_15 Depth 4
                                        #           Child Loop BB128_17 Depth 5
	movl	-20(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB128_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB128_11 Depth=2
	movl	$0, -16(%rbp)
.LBB128_13:                             # %for.cond25
                                        #   Parent Loop BB128_9 Depth=1
                                        #     Parent Loop BB128_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB128_15 Depth 4
                                        #           Child Loop BB128_17 Depth 5
	cmpl	$2, -16(%rbp)
	jge	.LBB128_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB128_13 Depth=3
	movq	-112(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-136(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -44(%rbp)
.LBB128_15:                             # %for.cond53
                                        #   Parent Loop BB128_9 Depth=1
                                        #     Parent Loop BB128_11 Depth=2
                                        #       Parent Loop BB128_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB128_17 Depth 5
	movl	-44(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB128_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB128_15 Depth=4
	movl	$0, -36(%rbp)
.LBB128_17:                             # %for.cond57
                                        #   Parent Loop BB128_9 Depth=1
                                        #     Parent Loop BB128_11 Depth=2
                                        #       Parent Loop BB128_13 Depth=3
                                        #         Parent Loop BB128_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-36(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB128_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB128_17 Depth=5
	movl	-68(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-40(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-44(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB128_17 Depth=5
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB128_17
.LBB128_20:                             # %for.end
                                        #   in Loop: Header=BB128_15 Depth=4
	jmp	.LBB128_21
.LBB128_21:                             # %for.inc70
                                        #   in Loop: Header=BB128_15 Depth=4
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB128_15
.LBB128_22:                             # %for.end72
                                        #   in Loop: Header=BB128_13 Depth=3
	movl	-68(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB128_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB128_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB128_25
.LBB128_24:                             # %if.else
                                        #   in Loop: Header=BB128_13 Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB128_25:                             # %if.end78
                                        #   in Loop: Header=BB128_13 Depth=3
	movq	-144(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB128_13 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB128_13
.LBB128_27:                             # %for.end90
                                        #   in Loop: Header=BB128_11 Depth=2
	jmp	.LBB128_28
.LBB128_28:                             # %for.inc91
                                        #   in Loop: Header=BB128_11 Depth=2
	movl	-76(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB128_11
.LBB128_29:                             # %for.end93
                                        #   in Loop: Header=BB128_9 Depth=1
	jmp	.LBB128_30
.LBB128_30:                             # %for.inc94
                                        #   in Loop: Header=BB128_9 Depth=1
	movl	-72(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB128_9
.LBB128_31:                             # %for.end96
	movl	-64(%rbp), %ebx
	cmpl	$42899928, -92(%rbp)    # imm = 0x28E99D8
	jne	.LBB128_33
.LBB128_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB128_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB128_32
.Lfunc_end128:
	.size	writeMotionVector8x8.87, .Lfunc_end128-writeMotionVector8x8.87
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big.88        # -- Begin function slice_too_big.88
	.p2align	4, 0x90
	.type	slice_too_big.88,@function
slice_too_big.88:                       # @slice_too_big.88
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$899745154, -56(%rbp)   # imm = 0x35A10582
	movl	%edi, -52(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB129_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB129_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB129_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB129_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB129_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB129_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB129_5:                              # %if.end
                                        #   in Loop: Header=BB129_2 Depth=1
	movq	-48(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB129_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB129_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB129_7:                              # %if.end8
                                        #   in Loop: Header=BB129_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB129_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB129_21
.LBB129_9:                              # %if.end11
                                        #   in Loop: Header=BB129_2 Depth=1
	jmp	.LBB129_10
.LBB129_10:                             # %for.inc
                                        #   in Loop: Header=BB129_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB129_2
.LBB129_11:                             # %for.end
	jmp	.LBB129_12
.LBB129_12:                             # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB129_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB129_14:                             # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB129_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB129_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB129_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB129_21
.LBB129_17:                             # %if.end27
                                        #   in Loop: Header=BB129_14 Depth=1
	jmp	.LBB129_18
.LBB129_18:                             # %for.inc28
                                        #   in Loop: Header=BB129_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB129_14
.LBB129_19:                             # %for.end30
	jmp	.LBB129_20
.LBB129_20:                             # %if.end31
	movl	$0, -20(%rbp)
.LBB129_21:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$899745154, -56(%rbp)   # imm = 0x35A10582
	jne	.LBB129_23
.LBB129_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB129_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB129_22
.Lfunc_end129:
	.size	slice_too_big.88, .Lfunc_end129-slice_too_big.88
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding.89 # -- Begin function ChromaResidualCoding.89
	.p2align	4, 0x90
	.type	ChromaResidualCoding.89,@function
ChromaResidualCoding.89:                # @ChromaResidualCoding.89
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$1783904350, -80(%rbp)  # imm = 0x6A54385E
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB130_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB130_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB130_3:                              # %lor.end
.LBB130_4:                              # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -72(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB130_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB130_7 Depth 2
                                        #       Child Loop BB130_9 Depth 3
                                        #     Child Loop BB130_16 Depth 2
                                        #       Child Loop BB130_18 Depth 3
                                        #     Child Loop BB130_33 Depth 2
                                        #       Child Loop BB130_35 Depth 3
                                        #     Child Loop BB130_43 Depth 2
                                        #       Child Loop BB130_45 Depth 3
                                        #     Child Loop BB130_58 Depth 2
                                        #       Child Loop BB130_60 Depth 3
                                        #     Child Loop BB130_87 Depth 2
                                        #       Child Loop BB130_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB130_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB130_5 Depth=1
	movl	$0, -60(%rbp)
	movl	$0, -16(%rbp)
.LBB130_7:                              # %for.cond5
                                        #   Parent Loop BB130_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB130_9 Depth 3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB130_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB130_7 Depth=2
	movl	$0, -24(%rbp)
.LBB130_9:                              # %for.cond8
                                        #   Parent Loop BB130_5 Depth=1
                                        #     Parent Loop BB130_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB130_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB130_9 Depth=3
	movslq	-72(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %edi
	leaq	-52(%rbp), %rsi
	leaq	-76(%rbp), %rdx
	leaq	-68(%rbp), %rcx
	leaq	-54(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	movswl	-52(%rbp), %ecx
	movl	-76(%rbp), %r8d
	movl	-68(%rbp), %r9d
	movw	-54(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-50(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB130_9 Depth=3
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB130_9
.LBB130_12:                             # %for.end
                                        #   in Loop: Header=BB130_7 Depth=2
	jmp	.LBB130_13
.LBB130_13:                             # %for.inc18
                                        #   in Loop: Header=BB130_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB130_7
.LBB130_14:                             # %for.end20
                                        #   in Loop: Header=BB130_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB130_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB130_5 Depth=1
	movl	$0, -4(%rbp)
.LBB130_16:                             # %for.cond21
                                        #   Parent Loop BB130_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB130_18 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB130_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB130_16 Depth=2
	movl	$0, -8(%rbp)
.LBB130_18:                             # %for.cond26
                                        #   Parent Loop BB130_5 Depth=1
                                        #     Parent Loop BB130_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB130_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB130_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB130_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB130_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB130_25
.LBB130_21:                             # %if.else
                                        #   in Loop: Header=BB130_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB130_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB130_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB130_24
.LBB130_23:                             # %if.else52
                                        #   in Loop: Header=BB130_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB130_24:                             # %if.end
                                        #   in Loop: Header=BB130_18 Depth=3
	jmp	.LBB130_25
.LBB130_25:                             # %if.end57
                                        #   in Loop: Header=BB130_18 Depth=3
	jmp	.LBB130_26
.LBB130_26:                             # %for.inc58
                                        #   in Loop: Header=BB130_18 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB130_18
.LBB130_27:                             # %for.end59
                                        #   in Loop: Header=BB130_16 Depth=2
	jmp	.LBB130_28
.LBB130_28:                             # %for.inc60
                                        #   in Loop: Header=BB130_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB130_16
.LBB130_29:                             # %for.end62
                                        #   in Loop: Header=BB130_5 Depth=1
	jmp	.LBB130_74
.LBB130_30:                             # %if.else63
                                        #   in Loop: Header=BB130_5 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB130_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB130_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB130_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB130_5 Depth=1
	movl	$0, -4(%rbp)
.LBB130_33:                             # %for.cond69
                                        #   Parent Loop BB130_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB130_35 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB130_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB130_33 Depth=2
	movl	$0, -8(%rbp)
.LBB130_35:                             # %for.cond73
                                        #   Parent Loop BB130_5 Depth=1
                                        #     Parent Loop BB130_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -8(%rbp)
	jge	.LBB130_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB130_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB130_35 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB130_35
.LBB130_38:                             # %for.end83
                                        #   in Loop: Header=BB130_33 Depth=2
	jmp	.LBB130_39
.LBB130_39:                             # %for.inc84
                                        #   in Loop: Header=BB130_33 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB130_33
.LBB130_40:                             # %for.end86
                                        #   in Loop: Header=BB130_5 Depth=1
	jmp	.LBB130_73
.LBB130_41:                             # %if.else87
                                        #   in Loop: Header=BB130_5 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB130_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB130_5 Depth=1
	movl	$0, -4(%rbp)
.LBB130_43:                             # %for.cond90
                                        #   Parent Loop BB130_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB130_45 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB130_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB130_43 Depth=2
	movl	$0, -8(%rbp)
.LBB130_45:                             # %for.cond95
                                        #   Parent Loop BB130_5 Depth=1
                                        #     Parent Loop BB130_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB130_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB130_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB130_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB130_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB130_52
.LBB130_48:                             # %if.else119
                                        #   in Loop: Header=BB130_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB130_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB130_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB130_51
.LBB130_50:                             # %if.else127
                                        #   in Loop: Header=BB130_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB130_51:                             # %if.end132
                                        #   in Loop: Header=BB130_45 Depth=3
	jmp	.LBB130_52
.LBB130_52:                             # %if.end133
                                        #   in Loop: Header=BB130_45 Depth=3
	jmp	.LBB130_53
.LBB130_53:                             # %for.inc134
                                        #   in Loop: Header=BB130_45 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB130_45
.LBB130_54:                             # %for.end136
                                        #   in Loop: Header=BB130_43 Depth=2
	jmp	.LBB130_55
.LBB130_55:                             # %for.inc137
                                        #   in Loop: Header=BB130_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB130_43
.LBB130_56:                             # %for.end139
                                        #   in Loop: Header=BB130_5 Depth=1
	jmp	.LBB130_72
.LBB130_57:                             # %if.else140
                                        #   in Loop: Header=BB130_5 Depth=1
	movl	$0, -4(%rbp)
.LBB130_58:                             # %for.cond141
                                        #   Parent Loop BB130_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB130_60 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB130_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB130_58 Depth=2
	movl	$0, -8(%rbp)
.LBB130_60:                             # %for.cond146
                                        #   Parent Loop BB130_5 Depth=1
                                        #     Parent Loop BB130_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB130_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB130_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB130_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB130_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB130_67
.LBB130_63:                             # %if.else175
                                        #   in Loop: Header=BB130_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB130_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB130_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB130_66
.LBB130_65:                             # %if.else188
                                        #   in Loop: Header=BB130_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB130_66:                             # %if.end198
                                        #   in Loop: Header=BB130_60 Depth=3
	jmp	.LBB130_67
.LBB130_67:                             # %if.end199
                                        #   in Loop: Header=BB130_60 Depth=3
	jmp	.LBB130_68
.LBB130_68:                             # %for.inc200
                                        #   in Loop: Header=BB130_60 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB130_60
.LBB130_69:                             # %for.end202
                                        #   in Loop: Header=BB130_58 Depth=2
	jmp	.LBB130_70
.LBB130_70:                             # %for.inc203
                                        #   in Loop: Header=BB130_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB130_58
.LBB130_71:                             # %for.end205
                                        #   in Loop: Header=BB130_5 Depth=1
	jmp	.LBB130_72
.LBB130_72:                             # %if.end206
                                        #   in Loop: Header=BB130_5 Depth=1
	jmp	.LBB130_73
.LBB130_73:                             # %if.end207
                                        #   in Loop: Header=BB130_5 Depth=1
	jmp	.LBB130_74
.LBB130_74:                             # %if.end208
                                        #   in Loop: Header=BB130_5 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB130_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB130_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB130_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB130_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB130_100
.LBB130_77:                             # %if.else215
                                        #   in Loop: Header=BB130_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB130_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB130_5 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB130_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB130_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB130_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB130_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB130_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB130_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB130_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB130_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB130_84
.LBB130_83:                             # %if.then247
                                        #   in Loop: Header=BB130_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB130_85
.LBB130_84:                             # %if.else249
                                        #   in Loop: Header=BB130_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB130_85:                             # %if.end251
                                        #   in Loop: Header=BB130_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB130_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB130_5 Depth=1
	movl	$0, -4(%rbp)
.LBB130_87:                             # %for.cond255
                                        #   Parent Loop BB130_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB130_89 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB130_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB130_87 Depth=2
	movl	$0, -8(%rbp)
.LBB130_89:                             # %for.cond260
                                        #   Parent Loop BB130_5 Depth=1
                                        #     Parent Loop BB130_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB130_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB130_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB130_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB130_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB130_93
.LBB130_92:                             # %if.else277
                                        #   in Loop: Header=BB130_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB130_93:                             # %if.end287
                                        #   in Loop: Header=BB130_89 Depth=3
	jmp	.LBB130_94
.LBB130_94:                             # %for.inc288
                                        #   in Loop: Header=BB130_89 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB130_89
.LBB130_95:                             # %for.end290
                                        #   in Loop: Header=BB130_87 Depth=2
	jmp	.LBB130_96
.LBB130_96:                             # %for.inc291
                                        #   in Loop: Header=BB130_87 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB130_87
.LBB130_97:                             # %for.end293
                                        #   in Loop: Header=BB130_5 Depth=1
	jmp	.LBB130_98
.LBB130_98:                             # %if.end294
                                        #   in Loop: Header=BB130_5 Depth=1
	jmp	.LBB130_99
.LBB130_99:                             # %if.end295
                                        #   in Loop: Header=BB130_5 Depth=1
	jmp	.LBB130_100
.LBB130_100:                            # %if.end296
                                        #   in Loop: Header=BB130_5 Depth=1
	jmp	.LBB130_101
.LBB130_101:                            # %for.inc297
                                        #   in Loop: Header=BB130_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB130_5
.LBB130_102:                            # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB130_139
# %bb.103:                              # %if.then307
	movl	$0, -4(%rbp)
.LBB130_104:                            # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB130_106 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB130_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB130_104 Depth=1
	movl	$0, -8(%rbp)
.LBB130_106:                            # %for.cond312
                                        #   Parent Loop BB130_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB130_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB130_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -64(%rbp)
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-64(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB130_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB130_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB130_110
.LBB130_109:                            # %cond.false
                                        #   in Loop: Header=BB130_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB130_110:                            # %cond.end
                                        #   in Loop: Header=BB130_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB130_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB130_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB130_116
.LBB130_112:                            # %cond.false358
                                        #   in Loop: Header=BB130_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB130_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB130_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB130_115
.LBB130_114:                            # %cond.false367
                                        #   in Loop: Header=BB130_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB130_115:                            # %cond.end373
                                        #   in Loop: Header=BB130_106 Depth=2
.LBB130_116:                            # %cond.end375
                                        #   in Loop: Header=BB130_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-36(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB130_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB130_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB130_119
.LBB130_118:                            # %cond.false394
                                        #   in Loop: Header=BB130_106 Depth=2
	movl	-36(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB130_119:                            # %cond.end400
                                        #   in Loop: Header=BB130_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB130_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB130_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB130_125
.LBB130_121:                            # %cond.false406
                                        #   in Loop: Header=BB130_106 Depth=2
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB130_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB130_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB130_124
.LBB130_123:                            # %cond.false415
                                        #   in Loop: Header=BB130_106 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB130_124:                            # %cond.end421
                                        #   in Loop: Header=BB130_106 Depth=2
.LBB130_125:                            # %cond.end423
                                        #   in Loop: Header=BB130_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-32(%rbp), %esi
	movslq	-8(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-4(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB130_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB130_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB130_128
.LBB130_127:                            # %cond.false443
                                        #   in Loop: Header=BB130_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-32(%rbp), %ecx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB130_128:                            # %cond.end449
                                        #   in Loop: Header=BB130_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB130_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB130_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB130_134
.LBB130_130:                            # %cond.false455
                                        #   in Loop: Header=BB130_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-32(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB130_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB130_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB130_133
.LBB130_132:                            # %cond.false464
                                        #   in Loop: Header=BB130_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB130_133:                            # %cond.end470
                                        #   in Loop: Header=BB130_106 Depth=2
.LBB130_134:                            # %cond.end472
                                        #   in Loop: Header=BB130_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB130_106 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB130_106
.LBB130_136:                            # %for.end487
                                        #   in Loop: Header=BB130_104 Depth=1
	jmp	.LBB130_137
.LBB130_137:                            # %for.inc488
                                        #   in Loop: Header=BB130_104 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB130_104
.LBB130_138:                            # %for.end490
	jmp	.LBB130_139
.LBB130_139:                            # %if.end491
	cmpl	$1783904350, -80(%rbp)  # imm = 0x6A54385E
	jne	.LBB130_141
.LBB130_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB130_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB130_140
.Lfunc_end130:
	.size	ChromaResidualCoding.89, .Lfunc_end130-ChromaResidualCoding.89
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.90    # -- Begin function TransformDecision.90
	.p2align	4, 0x90
	.type	TransformDecision.90,@function
TransformDecision.90:                   # @TransformDecision.90
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$1932001555, -76(%rbp)  # imm = 0x73280113
	movl	%edi, -44(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -36(%rbp)
	cmpl	$-1, -44(%rbp)
	jne	.LBB131_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -64(%rbp)
	jmp	.LBB131_3
.LBB131_2:                              # %if.else
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
.LBB131_3:                              # %if.end
	jmp	.LBB131_4
.LBB131_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB131_6 Depth 2
                                        #       Child Loop BB131_8 Depth 3
                                        #         Child Loop BB131_10 Depth 4
                                        #           Child Loop BB131_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB131_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB131_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-52(%rbp), %rsi
	leaq	-84(%rbp), %rdx
	leaq	-80(%rbp), %rcx
	leaq	-50(%rbp), %r8
	leaq	-54(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -68(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -60(%rbp)
	movl	$0, -32(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB131_6:                              # %for.cond3
                                        #   Parent Loop BB131_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB131_8 Depth 3
                                        #         Child Loop BB131_10 Depth 4
                                        #           Child Loop BB131_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB131_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB131_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB131_8:                              # %for.cond8
                                        #   Parent Loop BB131_4 Depth=1
                                        #     Parent Loop BB131_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB131_10 Depth 4
                                        #           Child Loop BB131_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB131_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB131_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-16(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-52(%rbp), %edx
	movl	-84(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movw	-50(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-54(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-32(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -28(%rbp)
.LBB131_10:                             # %for.cond13
                                        #   Parent Loop BB131_4 Depth=1
                                        #     Parent Loop BB131_6 Depth=2
                                        #       Parent Loop BB131_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB131_12 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB131_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB131_10 Depth=4
	movl	$0, -24(%rbp)
.LBB131_12:                             # %for.cond17
                                        #   Parent Loop BB131_4 Depth=1
                                        #     Parent Loop BB131_6 Depth=2
                                        #       Parent Loop BB131_8 Depth=3
                                        #         Parent Loop BB131_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB131_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB131_12 Depth=5
	movq	imgY_org, %rax
	movl	-88(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB131_12 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB131_12
.LBB131_15:                             # %for.end
                                        #   in Loop: Header=BB131_10 Depth=4
	jmp	.LBB131_16
.LBB131_16:                             # %for.inc38
                                        #   in Loop: Header=BB131_10 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB131_10
.LBB131_17:                             # %for.end40
                                        #   in Loop: Header=BB131_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB131_8 Depth=3
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB131_8
.LBB131_19:                             # %for.end44
                                        #   in Loop: Header=BB131_6 Depth=2
	jmp	.LBB131_20
.LBB131_20:                             # %for.inc45
                                        #   in Loop: Header=BB131_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB131_6
.LBB131_21:                             # %for.end47
                                        #   in Loop: Header=BB131_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB131_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB131_4
.LBB131_23:                             # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB131_25
# %bb.24:                               # %if.then56
	movl	$1, -48(%rbp)
	jmp	.LBB131_28
.LBB131_25:                             # %if.else57
	movl	-40(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB131_27
# %bb.26:                               # %if.then60
	movl	$1, -48(%rbp)
	jmp	.LBB131_28
.LBB131_27:                             # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -48(%rbp)
.LBB131_28:                             # %return
	movl	-48(%rbp), %ebx
	cmpl	$1932001555, -76(%rbp)  # imm = 0x73280113
	jne	.LBB131_30
.LBB131_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB131_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB131_29
.Lfunc_end131:
	.size	TransformDecision.90, .Lfunc_end131-TransformDecision.90
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC.91 # -- Begin function writeLumaCoeff8x8_CABAC.91
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.91,@function
writeLumaCoeff8x8_CABAC.91:             # @writeLumaCoeff8x8_CABAC.91
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$406669663, -60(%rbp)   # imm = 0x183D495F
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -56(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-56(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -72(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -80(%rbp)
	movq	-56(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -88(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -104(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -96(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB132_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB132_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB132_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB132_3:                              # %land.end
                                        #   in Loop: Header=BB132_1 Depth=1
	testb	$1, %al
	jne	.LBB132_4
	jmp	.LBB132_12
.LBB132_4:                              # %for.body
                                        #   in Loop: Header=BB132_1 Depth=1
	movq	-104(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB132_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB132_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB132_7
.LBB132_6:                              # %cond.false
                                        #   in Loop: Header=BB132_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB132_7:                              # %cond.end
                                        #   in Loop: Header=BB132_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB132_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB132_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB132_10
.LBB132_9:                              # %if.else
                                        #   in Loop: Header=BB132_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
.LBB132_10:                             # %if.end
                                        #   in Loop: Header=BB132_1 Depth=1
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-88(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB132_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB132_1
.LBB132_12:                             # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$406669663, -60(%rbp)   # imm = 0x183D495F
	jne	.LBB132_14
.LBB132_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB132_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB132_13
.Lfunc_end132:
	.size	writeLumaCoeff8x8_CABAC.91, .Lfunc_end132-writeLumaCoeff8x8_CABAC.91
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC.92 # -- Begin function writeLumaCoeff8x8_CABAC.92
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.92,@function
writeLumaCoeff8x8_CABAC.92:             # @writeLumaCoeff8x8_CABAC.92
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$931050855, -60(%rbp)   # imm = 0x377EB567
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -48(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -80(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -72(%rbp)
	movq	-48(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -104(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -96(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -88(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB133_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB133_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB133_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB133_3:                              # %land.end
                                        #   in Loop: Header=BB133_1 Depth=1
	testb	$1, %al
	jne	.LBB133_4
	jmp	.LBB133_12
.LBB133_4:                              # %for.body
                                        #   in Loop: Header=BB133_1 Depth=1
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-88(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB133_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB133_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB133_7
.LBB133_6:                              # %cond.false
                                        #   in Loop: Header=BB133_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB133_7:                              # %cond.end
                                        #   in Loop: Header=BB133_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB133_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB133_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB133_10
.LBB133_9:                              # %if.else
                                        #   in Loop: Header=BB133_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
.LBB133_10:                             # %if.end
                                        #   in Loop: Header=BB133_1 Depth=1
	movq	-56(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB133_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB133_1
.LBB133_12:                             # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$931050855, -60(%rbp)   # imm = 0x377EB567
	jne	.LBB133_14
.LBB133_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB133_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB133_13
.Lfunc_end133:
	.size	writeLumaCoeff8x8_CABAC.92, .Lfunc_end133-writeLumaCoeff8x8_CABAC.92
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL.93  # -- Begin function writeMotionInfo2NAL.93
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.93,@function
writeMotionInfo2NAL.93:                 # @writeMotionInfo2NAL.93
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1173172939, -56(%rbp)  # imm = 0x45ED32CB
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB134_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB134_3
.LBB134_2:                              # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB134_3:                              # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB134_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB134_6
.LBB134_5:                              # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB134_6:                              # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB134_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB134_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB134_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB134_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB134_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB134_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB134_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB134_39
.LBB134_14:                             # %if.then42
	movl	$0, -12(%rbp)
.LBB134_15:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB134_17 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB134_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB134_15 Depth=1
	movl	$0, -16(%rbp)
.LBB134_17:                             # %for.cond45
                                        #   Parent Loop BB134_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB134_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB134_17 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB134_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB134_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB134_22
.LBB134_20:                             # %land.lhs.true59
                                        #   in Loop: Header=BB134_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB134_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB134_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB134_22:                             # %if.end
                                        #   in Loop: Header=BB134_17 Depth=2
	jmp	.LBB134_23
.LBB134_23:                             # %for.inc
                                        #   in Loop: Header=BB134_17 Depth=2
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB134_17
.LBB134_24:                             # %for.end
                                        #   in Loop: Header=BB134_15 Depth=1
	jmp	.LBB134_25
.LBB134_25:                             # %for.inc79
                                        #   in Loop: Header=BB134_15 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB134_15
.LBB134_26:                             # %for.end81
	movl	$0, -12(%rbp)
.LBB134_27:                             # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB134_29 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB134_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB134_27 Depth=1
	movl	$0, -16(%rbp)
.LBB134_29:                             # %for.cond86
                                        #   Parent Loop BB134_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB134_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB134_29 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB134_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB134_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB134_34
.LBB134_32:                             # %land.lhs.true103
                                        #   in Loop: Header=BB134_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB134_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB134_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB134_34:                             # %if.end126
                                        #   in Loop: Header=BB134_29 Depth=2
	jmp	.LBB134_35
.LBB134_35:                             # %for.inc127
                                        #   in Loop: Header=BB134_29 Depth=2
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB134_29
.LBB134_36:                             # %for.end129
                                        #   in Loop: Header=BB134_27 Depth=1
	jmp	.LBB134_37
.LBB134_37:                             # %for.inc130
                                        #   in Loop: Header=BB134_27 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB134_27
.LBB134_38:                             # %for.end132
	jmp	.LBB134_39
.LBB134_39:                             # %if.end133
	jmp	.LBB134_40
.LBB134_40:                             # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB134_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB134_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB134_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB134_57
# %bb.44:                               # %if.then150
	movl	$0, -12(%rbp)
.LBB134_45:                             # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB134_47 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB134_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB134_45 Depth=1
	movl	$0, -16(%rbp)
.LBB134_47:                             # %for.cond155
                                        #   Parent Loop BB134_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB134_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB134_47 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB134_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB134_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB134_52
.LBB134_50:                             # %land.lhs.true172
                                        #   in Loop: Header=BB134_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB134_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB134_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB134_52:                             # %if.end197
                                        #   in Loop: Header=BB134_47 Depth=2
	jmp	.LBB134_53
.LBB134_53:                             # %for.inc198
                                        #   in Loop: Header=BB134_47 Depth=2
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB134_47
.LBB134_54:                             # %for.end200
                                        #   in Loop: Header=BB134_45 Depth=1
	jmp	.LBB134_55
.LBB134_55:                             # %for.inc201
                                        #   in Loop: Header=BB134_45 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB134_45
.LBB134_56:                             # %for.end203
	jmp	.LBB134_57
.LBB134_57:                             # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB134_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB134_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB134_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB134_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB134_75
# %bb.62:                               # %if.then222
	movl	$0, -12(%rbp)
.LBB134_63:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB134_65 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB134_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB134_63 Depth=1
	movl	$0, -16(%rbp)
.LBB134_65:                             # %for.cond227
                                        #   Parent Loop BB134_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB134_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB134_65 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB134_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB134_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB134_70
.LBB134_68:                             # %land.lhs.true244
                                        #   in Loop: Header=BB134_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB134_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB134_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB134_70:                             # %if.end269
                                        #   in Loop: Header=BB134_65 Depth=2
	jmp	.LBB134_71
.LBB134_71:                             # %for.inc270
                                        #   in Loop: Header=BB134_65 Depth=2
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB134_65
.LBB134_72:                             # %for.end272
                                        #   in Loop: Header=BB134_63 Depth=1
	jmp	.LBB134_73
.LBB134_73:                             # %for.inc273
                                        #   in Loop: Header=BB134_63 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB134_63
.LBB134_74:                             # %for.end275
	jmp	.LBB134_75
.LBB134_75:                             # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$1173172939, -56(%rbp)  # imm = 0x45ED32CB
	jne	.LBB134_77
.LBB134_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB134_77:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB134_76
.Lfunc_end134:
	.size	writeMotionInfo2NAL.93, .Lfunc_end134-writeMotionInfo2NAL.93
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.94   # -- Begin function LumaResidualCoding.94
	.p2align	4, 0x90
	.type	LumaResidualCoding.94,@function
LumaResidualCoding.94:                  # @LumaResidualCoding.94
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$135511298, -48(%rbp)   # imm = 0x813BD02
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB135_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB135_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB135_1 Depth=1
	movl	-12(%rbp), %edi
	leaq	-20(%rbp), %rsi
	leaq	-44(%rbp), %rdx
	leaq	-40(%rbp), %rcx
	leaq	-18(%rbp), %r8
	leaq	-22(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-12(%rbp), %edx
	movw	-20(%rbp), %ax
	movl	-44(%rbp), %r8d
	movl	-40(%rbp), %r9d
	movw	-18(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-22(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB135_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB135_1
.LBB135_4:                              # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB135_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB135_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB135_33
.LBB135_7:                              # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -4(%rbp)
.LBB135_8:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB135_10 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB135_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB135_8 Depth=1
	movl	$0, -8(%rbp)
.LBB135_10:                             # %for.cond13
                                        #   Parent Loop BB135_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB135_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB135_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB135_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB135_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB135_14
.LBB135_13:                             # %if.else
                                        #   in Loop: Header=BB135_10 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB135_14:                             # %if.end
                                        #   in Loop: Header=BB135_10 Depth=2
	jmp	.LBB135_15
.LBB135_15:                             # %for.inc31
                                        #   in Loop: Header=BB135_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB135_10
.LBB135_16:                             # %for.end33
                                        #   in Loop: Header=BB135_8 Depth=1
	jmp	.LBB135_17
.LBB135_17:                             # %for.inc34
                                        #   in Loop: Header=BB135_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB135_8
.LBB135_18:                             # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB135_32
# %bb.19:                               # %if.then38
	movl	$0, -12(%rbp)
.LBB135_20:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB135_22 Depth 2
                                        #       Child Loop BB135_24 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB135_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB135_20 Depth=1
	movl	-12(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-12(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB135_22:                             # %for.cond45
                                        #   Parent Loop BB135_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB135_24 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB135_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB135_22 Depth=2
	movl	$0, -8(%rbp)
.LBB135_24:                             # %for.cond48
                                        #   Parent Loop BB135_20 Depth=1
                                        #     Parent Loop BB135_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -8(%rbp)
	jge	.LBB135_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB135_24 Depth=3
	movl	-52(%rbp), %edi
	addl	-4(%rbp), %edi
	movl	-36(%rbp), %esi
	addl	-8(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB135_24 Depth=3
	movl	-8(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB135_24
.LBB135_27:                             # %for.end55
                                        #   in Loop: Header=BB135_22 Depth=2
	jmp	.LBB135_28
.LBB135_28:                             # %for.inc56
                                        #   in Loop: Header=BB135_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB135_22
.LBB135_29:                             # %for.end58
                                        #   in Loop: Header=BB135_20 Depth=1
	jmp	.LBB135_30
.LBB135_30:                             # %for.inc59
                                        #   in Loop: Header=BB135_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB135_20
.LBB135_31:                             # %for.end61
	jmp	.LBB135_32
.LBB135_32:                             # %if.end62
	jmp	.LBB135_33
.LBB135_33:                             # %if.end63
	cmpl	$135511298, -48(%rbp)   # imm = 0x813BD02
	jne	.LBB135_35
.LBB135_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB135_35:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB135_34
.Lfunc_end135:
	.size	LumaResidualCoding.94, .Lfunc_end135-LumaResidualCoding.94
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction.95 # -- Begin function IntraChromaPrediction.95
	.p2align	4, 0x90
	.type	IntraChromaPrediction.95,@function
IntraChromaPrediction.95:               # @IntraChromaPrediction.95
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$1211194878, -164(%rbp) # imm = 0x48315DFE
	movq	%rdi, -184(%rbp)
	movq	%rsi, -192(%rbp)
	movq	%rdx, -176(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -112(%rbp)
	movl	$0, -136(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -116(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB136_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB136_1 Depth=1
	movl	-112(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB136_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_1
.LBB136_4:                              # %for.end
	movl	-112(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB136_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB136_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB136_8
.LBB136_7:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB136_8
.LBB136_8:                              # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB136_9:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB136_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB136_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB136_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB136_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB136_13
.LBB136_12:                             # %cond.false32
                                        #   in Loop: Header=BB136_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB136_13
.LBB136_13:                             # %cond.end33
                                        #   in Loop: Header=BB136_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB136_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_9
.LBB136_15:                             # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB136_16:                             # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB136_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB136_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB136_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB136_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB136_20
.LBB136_19:                             # %cond.false57
                                        #   in Loop: Header=BB136_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB136_20
.LBB136_20:                             # %cond.end58
                                        #   in Loop: Header=BB136_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB136_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_16
.LBB136_22:                             # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB136_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB136_25
.LBB136_24:                             # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB136_25
.LBB136_25:                             # %cond.end75
	movl	%eax, -92(%rbp)
.LBB136_26:                             # %if.end
	cmpq	$0, -184(%rbp)
	je	.LBB136_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB136_28:                             # %if.end79
	cmpq	$0, -192(%rbp)
	je	.LBB136_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB136_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB136_31:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB136_32:                             # %if.end86
	cmpq	$0, -176(%rbp)
	je	.LBB136_34
# %bb.33:                               # %if.then88
	movl	-92(%rbp), %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB136_34:                             # %if.end89
	movl	$0, -24(%rbp)
.LBB136_35:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB136_37 Depth 2
                                        #       Child Loop BB136_39 Depth 3
                                        #         Child Loop BB136_104 Depth 4
                                        #         Child Loop BB136_110 Depth 4
                                        #         Child Loop BB136_85 Depth 4
                                        #         Child Loop BB136_91 Depth 4
                                        #         Child Loop BB136_66 Depth 4
                                        #         Child Loop BB136_72 Depth 4
                                        #         Child Loop BB136_44 Depth 4
                                        #         Child Loop BB136_50 Depth 4
                                        #         Child Loop BB136_125 Depth 4
                                        #           Child Loop BB136_127 Depth 5
                                        #     Child Loop BB136_138 Depth 2
                                        #     Child Loop BB136_142 Depth 2
                                        #       Child Loop BB136_144 Depth 3
                                        #     Child Loop BB136_153 Depth 2
                                        #     Child Loop BB136_157 Depth 2
                                        #       Child Loop BB136_159 Depth 3
                                        #     Child Loop BB136_170 Depth 2
                                        #     Child Loop BB136_174 Depth 2
                                        #     Child Loop BB136_178 Depth 2
                                        #       Child Loop BB136_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB136_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB136_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -88(%rbp)
.LBB136_37:                             # %for.cond95
                                        #   Parent Loop BB136_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB136_39 Depth 3
                                        #         Child Loop BB136_104 Depth 4
                                        #         Child Loop BB136_110 Depth 4
                                        #         Child Loop BB136_85 Depth 4
                                        #         Child Loop BB136_91 Depth 4
                                        #         Child Loop BB136_66 Depth 4
                                        #         Child Loop BB136_72 Depth 4
                                        #         Child Loop BB136_44 Depth 4
                                        #         Child Loop BB136_50 Depth 4
                                        #         Child Loop BB136_125 Depth 4
                                        #           Child Loop BB136_127 Depth 5
	movl	-88(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB136_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB136_37 Depth=2
	movl	$0, -84(%rbp)
.LBB136_39:                             # %for.cond99
                                        #   Parent Loop BB136_35 Depth=1
                                        #     Parent Loop BB136_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB136_104 Depth 4
                                        #         Child Loop BB136_110 Depth 4
                                        #         Child Loop BB136_85 Depth 4
                                        #         Child Loop BB136_91 Depth 4
                                        #         Child Loop BB136_66 Depth 4
                                        #         Child Loop BB136_72 Depth 4
                                        #         Child Loop BB136_44 Depth 4
                                        #         Child Loop BB136_50 Depth 4
                                        #         Child Loop BB136_125 Depth 4
                                        #           Child Loop BB136_127 Depth 5
	cmpl	$4, -84(%rbp)
	jge	.LBB136_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB136_39 Depth=3
	movslq	-116(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movslq	-116(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -60(%rbp)
	movslq	-116(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-88(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB136_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB136_39 Depth=3
	movq	.LJTI136_0(,%rax,8), %rax
	jmpq	*%rax
.LBB136_42:                             # %sw.bb
                                        #   in Loop: Header=BB136_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB136_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB136_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB136_44:                             # %for.cond124
                                        #   Parent Loop BB136_35 Depth=1
                                        #     Parent Loop BB136_37 Depth=2
                                        #       Parent Loop BB136_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB136_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB136_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_44
.LBB136_47:                             # %for.end138
                                        #   in Loop: Header=BB136_39 Depth=3
	jmp	.LBB136_48
.LBB136_48:                             # %if.end139
                                        #   in Loop: Header=BB136_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB136_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB136_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB136_50:                             # %for.cond143
                                        #   Parent Loop BB136_35 Depth=1
                                        #     Parent Loop BB136_37 Depth=2
                                        #       Parent Loop BB136_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB136_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB136_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_50
.LBB136_53:                             # %for.end162
                                        #   in Loop: Header=BB136_39 Depth=3
	jmp	.LBB136_54
.LBB136_54:                             # %if.end163
                                        #   in Loop: Header=BB136_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB136_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB136_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB136_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB136_39 Depth=3
	movl	-60(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB136_63
.LBB136_57:                             # %if.else
                                        #   in Loop: Header=BB136_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB136_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB136_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB136_62
.LBB136_59:                             # %if.else174
                                        #   in Loop: Header=BB136_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB136_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB136_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB136_61:                             # %if.end180
                                        #   in Loop: Header=BB136_39 Depth=3
	jmp	.LBB136_62
.LBB136_62:                             # %if.end181
                                        #   in Loop: Header=BB136_39 Depth=3
	jmp	.LBB136_63
.LBB136_63:                             # %if.end182
                                        #   in Loop: Header=BB136_39 Depth=3
	jmp	.LBB136_124
.LBB136_64:                             # %sw.bb183
                                        #   in Loop: Header=BB136_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB136_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB136_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB136_66:                             # %for.cond186
                                        #   Parent Loop BB136_35 Depth=1
                                        #     Parent Loop BB136_37 Depth=2
                                        #       Parent Loop BB136_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB136_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB136_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_66
.LBB136_69:                             # %for.end202
                                        #   in Loop: Header=BB136_39 Depth=3
	jmp	.LBB136_77
.LBB136_70:                             # %if.else203
                                        #   in Loop: Header=BB136_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB136_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB136_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB136_72:                             # %for.cond207
                                        #   Parent Loop BB136_35 Depth=1
                                        #     Parent Loop BB136_37 Depth=2
                                        #       Parent Loop BB136_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB136_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB136_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_72
.LBB136_75:                             # %for.end226
                                        #   in Loop: Header=BB136_39 Depth=3
	jmp	.LBB136_76
.LBB136_76:                             # %if.end227
                                        #   in Loop: Header=BB136_39 Depth=3
	jmp	.LBB136_77
.LBB136_77:                             # %if.end228
                                        #   in Loop: Header=BB136_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB136_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB136_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB136_82
.LBB136_79:                             # %if.else233
                                        #   in Loop: Header=BB136_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB136_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB136_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB136_81:                             # %if.end239
                                        #   in Loop: Header=BB136_39 Depth=3
	jmp	.LBB136_82
.LBB136_82:                             # %if.end240
                                        #   in Loop: Header=BB136_39 Depth=3
	jmp	.LBB136_124
.LBB136_83:                             # %sw.bb241
                                        #   in Loop: Header=BB136_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB136_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB136_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB136_85:                             # %for.cond245
                                        #   Parent Loop BB136_35 Depth=1
                                        #     Parent Loop BB136_37 Depth=2
                                        #       Parent Loop BB136_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB136_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB136_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_85
.LBB136_88:                             # %for.end264
                                        #   in Loop: Header=BB136_39 Depth=3
	jmp	.LBB136_96
.LBB136_89:                             # %if.else265
                                        #   in Loop: Header=BB136_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB136_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB136_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB136_91:                             # %for.cond268
                                        #   Parent Loop BB136_35 Depth=1
                                        #     Parent Loop BB136_37 Depth=2
                                        #       Parent Loop BB136_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB136_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB136_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_91
.LBB136_94:                             # %for.end284
                                        #   in Loop: Header=BB136_39 Depth=3
	jmp	.LBB136_95
.LBB136_95:                             # %if.end285
                                        #   in Loop: Header=BB136_39 Depth=3
	jmp	.LBB136_96
.LBB136_96:                             # %if.end286
                                        #   in Loop: Header=BB136_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB136_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB136_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB136_101
.LBB136_98:                             # %if.else292
                                        #   in Loop: Header=BB136_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB136_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB136_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB136_100:                            # %if.end297
                                        #   in Loop: Header=BB136_39 Depth=3
	jmp	.LBB136_101
.LBB136_101:                            # %if.end298
                                        #   in Loop: Header=BB136_39 Depth=3
	jmp	.LBB136_124
.LBB136_102:                            # %sw.bb299
                                        #   in Loop: Header=BB136_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB136_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB136_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB136_104:                            # %for.cond302
                                        #   Parent Loop BB136_35 Depth=1
                                        #     Parent Loop BB136_37 Depth=2
                                        #       Parent Loop BB136_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB136_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB136_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_104
.LBB136_107:                            # %for.end318
                                        #   in Loop: Header=BB136_39 Depth=3
	jmp	.LBB136_108
.LBB136_108:                            # %if.end319
                                        #   in Loop: Header=BB136_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB136_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB136_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB136_110:                            # %for.cond323
                                        #   Parent Loop BB136_35 Depth=1
                                        #     Parent Loop BB136_37 Depth=2
                                        #       Parent Loop BB136_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB136_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB136_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_110
.LBB136_113:                            # %for.end342
                                        #   in Loop: Header=BB136_39 Depth=3
	jmp	.LBB136_114
.LBB136_114:                            # %if.end343
                                        #   in Loop: Header=BB136_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB136_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB136_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB136_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB136_39 Depth=3
	movl	-68(%rbp), %eax
	addl	-72(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB136_123
.LBB136_117:                            # %if.else352
                                        #   in Loop: Header=BB136_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB136_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB136_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB136_122
.LBB136_119:                            # %if.else357
                                        #   in Loop: Header=BB136_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB136_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB136_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB136_121:                            # %if.end363
                                        #   in Loop: Header=BB136_39 Depth=3
	jmp	.LBB136_122
.LBB136_122:                            # %if.end364
                                        #   in Loop: Header=BB136_39 Depth=3
	jmp	.LBB136_123
.LBB136_123:                            # %if.end365
                                        #   in Loop: Header=BB136_39 Depth=3
	jmp	.LBB136_124
.LBB136_124:                            # %sw.epilog
                                        #   in Loop: Header=BB136_39 Depth=3
	movl	-48(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB136_125:                            # %for.cond366
                                        #   Parent Loop BB136_35 Depth=1
                                        #     Parent Loop BB136_37 Depth=2
                                        #       Parent Loop BB136_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB136_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB136_125 Depth=4
	movl	-44(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB136_127:                            # %for.cond371
                                        #   Parent Loop BB136_35 Depth=1
                                        #     Parent Loop BB136_37 Depth=2
                                        #       Parent Loop BB136_39 Depth=3
                                        #         Parent Loop BB136_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB136_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB136_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_127
.LBB136_130:                            # %for.end386
                                        #   in Loop: Header=BB136_125 Depth=4
	jmp	.LBB136_131
.LBB136_131:                            # %for.inc387
                                        #   in Loop: Header=BB136_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB136_125
.LBB136_132:                            # %for.end389
                                        #   in Loop: Header=BB136_39 Depth=3
	jmp	.LBB136_133
.LBB136_133:                            # %for.inc390
                                        #   in Loop: Header=BB136_39 Depth=3
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB136_39
.LBB136_134:                            # %for.end392
                                        #   in Loop: Header=BB136_37 Depth=2
	jmp	.LBB136_135
.LBB136_135:                            # %for.inc393
                                        #   in Loop: Header=BB136_37 Depth=2
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB136_37
.LBB136_136:                            # %for.end395
                                        #   in Loop: Header=BB136_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB136_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB136_35 Depth=1
	movl	$0, -4(%rbp)
.LBB136_138:                            # %for.cond398
                                        #   Parent Loop BB136_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB136_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB136_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB136_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_138
.LBB136_141:                            # %for.end414
                                        #   in Loop: Header=BB136_35 Depth=1
	movl	$0, -4(%rbp)
.LBB136_142:                            # %for.cond415
                                        #   Parent Loop BB136_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB136_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB136_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB136_142 Depth=2
	movl	$0, -8(%rbp)
.LBB136_144:                            # %for.cond419
                                        #   Parent Loop BB136_35 Depth=1
                                        #     Parent Loop BB136_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB136_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB136_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB136_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB136_144
.LBB136_147:                            # %for.end436
                                        #   in Loop: Header=BB136_142 Depth=2
	jmp	.LBB136_148
.LBB136_148:                            # %for.inc437
                                        #   in Loop: Header=BB136_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_142
.LBB136_149:                            # %for.end439
                                        #   in Loop: Header=BB136_35 Depth=1
	jmp	.LBB136_150
.LBB136_150:                            # %if.end440
                                        #   in Loop: Header=BB136_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB136_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB136_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB136_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB136_35 Depth=1
	movl	$0, -4(%rbp)
.LBB136_153:                            # %for.cond447
                                        #   Parent Loop BB136_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB136_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB136_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB136_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_153
.LBB136_156:                            # %for.end468
                                        #   in Loop: Header=BB136_35 Depth=1
	movl	$0, -4(%rbp)
.LBB136_157:                            # %for.cond469
                                        #   Parent Loop BB136_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB136_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB136_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB136_157 Depth=2
	movl	$0, -8(%rbp)
.LBB136_159:                            # %for.cond473
                                        #   Parent Loop BB136_35 Depth=1
                                        #     Parent Loop BB136_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB136_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB136_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB136_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB136_159
.LBB136_162:                            # %for.end490
                                        #   in Loop: Header=BB136_157 Depth=2
	jmp	.LBB136_163
.LBB136_163:                            # %for.inc491
                                        #   in Loop: Header=BB136_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_157
.LBB136_164:                            # %for.end493
                                        #   in Loop: Header=BB136_35 Depth=1
	jmp	.LBB136_165
.LBB136_165:                            # %if.end494
                                        #   in Loop: Header=BB136_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB136_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB136_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB136_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB136_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB136_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB136_35 Depth=1
	cmpl	$0, -92(%rbp)
	je	.LBB136_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB136_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -124(%rbp)
	movl	$0, -4(%rbp)
.LBB136_170:                            # %for.cond519
                                        #   Parent Loop BB136_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB136_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB136_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-124(%rbp), %ecx
	movl	%ecx, -124(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB136_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_170
.LBB136_173:                            # %for.end540
                                        #   in Loop: Header=BB136_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -4(%rbp)
.LBB136_174:                            # %for.cond556
                                        #   Parent Loop BB136_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB136_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB136_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-120(%rbp), %ecx
	movl	%ecx, -120(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB136_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_174
.LBB136_177:                            # %for.end577
                                        #   in Loop: Header=BB136_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-124(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -104(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-120(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -100(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-272(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-336(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -8(%rbp)
.LBB136_178:                            # %for.cond606
                                        #   Parent Loop BB136_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB136_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB136_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB136_178 Depth=2
	movl	$0, -4(%rbp)
.LBB136_180:                            # %for.cond610
                                        #   Parent Loop BB136_35 Depth=1
                                        #     Parent Loop BB136_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB136_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB136_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-96(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-104(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB136_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB136_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB136_184
.LBB136_183:                            # %cond.false630
                                        #   in Loop: Header=BB136_180 Depth=3
	movl	-96(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-104(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB136_184:                            # %cond.end643
                                        #   in Loop: Header=BB136_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB136_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB136_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB136_190
.LBB136_186:                            # %cond.false648
                                        #   in Loop: Header=BB136_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-96(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-104(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB136_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB136_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB136_189
.LBB136_188:                            # %cond.false666
                                        #   in Loop: Header=BB136_180 Depth=3
	movl	-96(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-104(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB136_189:                            # %cond.end679
                                        #   in Loop: Header=BB136_180 Depth=3
.LBB136_190:                            # %cond.end681
                                        #   in Loop: Header=BB136_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB136_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_180
.LBB136_192:                            # %for.end694
                                        #   in Loop: Header=BB136_178 Depth=2
	jmp	.LBB136_193
.LBB136_193:                            # %for.inc695
                                        #   in Loop: Header=BB136_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB136_178
.LBB136_194:                            # %for.end697
                                        #   in Loop: Header=BB136_35 Depth=1
	jmp	.LBB136_195
.LBB136_195:                            # %if.end698
                                        #   in Loop: Header=BB136_35 Depth=1
	jmp	.LBB136_196
.LBB136_196:                            # %for.inc699
                                        #   in Loop: Header=BB136_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB136_35
.LBB136_197:                            # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB136_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -132(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB136_199:                            # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB136_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB136_199 Depth=1
	movl	-112(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB136_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_199
.LBB136_202:                            # %for.end712
	movl	$0, -40(%rbp)
.LBB136_203:                            # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB136_219 Depth 2
                                        #       Child Loop BB136_221 Depth 3
                                        #         Child Loop BB136_223 Depth 4
                                        #           Child Loop BB136_225 Depth 5
                                        #             Child Loop BB136_227 Depth 6
	cmpl	$3, -40(%rbp)
	jg	.LBB136_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB136_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB136_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB136_203 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB136_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB136_203 Depth=1
	jmp	.LBB136_241
.LBB136_207:                            # %if.end723
                                        #   in Loop: Header=BB136_203 Depth=1
	cmpl	$2, -40(%rbp)
	jne	.LBB136_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB136_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB136_217
.LBB136_209:                            # %lor.lhs.false
                                        #   in Loop: Header=BB136_203 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB136_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB136_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB136_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB136_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB136_217
.LBB136_212:                            # %lor.lhs.false736
                                        #   in Loop: Header=BB136_203 Depth=1
	cmpl	$3, -40(%rbp)
	jne	.LBB136_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB136_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB136_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB136_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB136_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB136_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB136_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB136_203 Depth=1
	cmpl	$0, -92(%rbp)
	jne	.LBB136_218
.LBB136_217:                            # %if.then749
                                        #   in Loop: Header=BB136_203 Depth=1
	jmp	.LBB136_241
.LBB136_218:                            # %if.end750
                                        #   in Loop: Header=BB136_203 Depth=1
	movl	$0, -108(%rbp)
	movl	$0, -24(%rbp)
.LBB136_219:                            # %for.cond751
                                        #   Parent Loop BB136_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB136_221 Depth 3
                                        #         Child Loop BB136_223 Depth 4
                                        #           Child Loop BB136_225 Depth 5
                                        #             Child Loop BB136_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB136_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB136_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -48(%rbp)
.LBB136_221:                            # %for.cond757
                                        #   Parent Loop BB136_203 Depth=1
                                        #     Parent Loop BB136_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB136_223 Depth 4
                                        #           Child Loop BB136_225 Depth 5
                                        #             Child Loop BB136_227 Depth 6
	movl	-48(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB136_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB136_221 Depth=3
	movl	$0, -44(%rbp)
.LBB136_223:                            # %for.cond761
                                        #   Parent Loop BB136_203 Depth=1
                                        #     Parent Loop BB136_219 Depth=2
                                        #       Parent Loop BB136_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB136_225 Depth 5
                                        #             Child Loop BB136_227 Depth 6
	movl	-44(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB136_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB136_223 Depth=4
	movl	$0, -128(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB136_225:                            # %for.cond765
                                        #   Parent Loop BB136_203 Depth=1
                                        #     Parent Loop BB136_219 Depth=2
                                        #       Parent Loop BB136_221 Depth=3
                                        #         Parent Loop BB136_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB136_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB136_225 Depth=5
	movl	-44(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB136_227:                            # %for.cond770
                                        #   Parent Loop BB136_203 Depth=1
                                        #     Parent Loop BB136_219 Depth=2
                                        #       Parent Loop BB136_221 Depth=3
                                        #         Parent Loop BB136_223 Depth=4
                                        #           Parent Loop BB136_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB136_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-40(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-128(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB136_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -128(%rbp)
	jmp	.LBB136_227
.LBB136_230:                            # %for.end803
                                        #   in Loop: Header=BB136_225 Depth=5
	jmp	.LBB136_231
.LBB136_231:                            # %for.inc804
                                        #   in Loop: Header=BB136_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB136_225
.LBB136_232:                            # %for.end806
                                        #   in Loop: Header=BB136_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB136_223 Depth=4
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB136_223
.LBB136_234:                            # %for.end810
                                        #   in Loop: Header=BB136_221 Depth=3
	jmp	.LBB136_235
.LBB136_235:                            # %for.inc811
                                        #   in Loop: Header=BB136_221 Depth=3
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB136_221
.LBB136_236:                            # %for.end813
                                        #   in Loop: Header=BB136_219 Depth=2
	jmp	.LBB136_237
.LBB136_237:                            # %for.inc814
                                        #   in Loop: Header=BB136_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB136_219
.LBB136_238:                            # %for.end816
                                        #   in Loop: Header=BB136_203 Depth=1
	movl	-108(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB136_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB136_203 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -132(%rbp)
.LBB136_240:                            # %if.end820
                                        #   in Loop: Header=BB136_203 Depth=1
	jmp	.LBB136_241
.LBB136_241:                            # %for.inc821
                                        #   in Loop: Header=BB136_203 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB136_203
.LBB136_242:                            # %for.end823
	movl	-136(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB136_243:                            # %if.end824
	cmpl	$1211194878, -164(%rbp) # imm = 0x48315DFE
	jne	.LBB136_245
.LBB136_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB136_245:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB136_244
.Lfunc_end136:
	.size	IntraChromaPrediction.95, .Lfunc_end136-IntraChromaPrediction.95
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI136_0:
	.quad	.LBB136_42
	.quad	.LBB136_64
	.quad	.LBB136_83
	.quad	.LBB136_102
                                        # -- End function
	.text
	.globl	ChromaPrediction4x4.96  # -- Begin function ChromaPrediction4x4.96
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.96,@function
ChromaPrediction4x4.96:                 # @ChromaPrediction4x4.96
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$1210082232, -72(%rbp)  # imm = 0x482063B8
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -52(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB137_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB137_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB137_6
.LBB137_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB137_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB137_5:                              # %land.end
.LBB137_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB137_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB137_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB137_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -16(%rbp)
	jne	.LBB137_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -56(%rbp)
	jne	.LBB137_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -52(%rbp)
	jne	.LBB137_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB137_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB137_15
.LBB137_14:                             # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB137_15:                             # %cond.end
	movq	%rax, -64(%rbp)
.LBB137_16:                             # %if.end
	cmpl	$-1, -16(%rbp)
	jne	.LBB137_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB137_87
.LBB137_18:                             # %if.end30
	cmpl	$0, -16(%rbp)
	je	.LBB137_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -16(%rbp)
	jne	.LBB137_21
.LBB137_20:                             # %if.then36
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB137_21:                             # %if.end37
	cmpl	$1, -16(%rbp)
	je	.LBB137_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -16(%rbp)
	jne	.LBB137_24
.LBB137_23:                             # %if.then43
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB137_24:                             # %if.end44
	cmpl	$0, -68(%rbp)
	je	.LBB137_56
# %bb.25:                               # %if.then46
	cmpl	$2, -16(%rbp)
	jne	.LBB137_35
# %bb.26:                               # %if.then49
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB137_27:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_29 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB137_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB137_27 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB137_29:                             # %for.cond52
                                        #   Parent Loop BB137_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB137_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB137_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB137_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB137_29
.LBB137_32:                             # %for.end
                                        #   in Loop: Header=BB137_27 Depth=1
	jmp	.LBB137_33
.LBB137_33:                             # %for.inc99
                                        #   in Loop: Header=BB137_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB137_27
.LBB137_34:                             # %for.end101
	jmp	.LBB137_55
.LBB137_35:                             # %if.else
	cmpl	$0, -16(%rbp)
	jne	.LBB137_45
# %bb.36:                               # %if.then104
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB137_37:                             # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_39 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB137_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB137_37 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB137_39:                             # %for.cond109
                                        #   Parent Loop BB137_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB137_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB137_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB137_39 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB137_39
.LBB137_42:                             # %for.end139
                                        #   in Loop: Header=BB137_37 Depth=1
	jmp	.LBB137_43
.LBB137_43:                             # %for.inc140
                                        #   in Loop: Header=BB137_37 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB137_37
.LBB137_44:                             # %for.end142
	jmp	.LBB137_54
.LBB137_45:                             # %if.else143
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB137_46:                             # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_48 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB137_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB137_46 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB137_48:                             # %for.cond148
                                        #   Parent Loop BB137_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB137_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB137_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB137_48 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB137_48
.LBB137_51:                             # %for.end178
                                        #   in Loop: Header=BB137_46 Depth=1
	jmp	.LBB137_52
.LBB137_52:                             # %for.inc179
                                        #   in Loop: Header=BB137_46 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB137_46
.LBB137_53:                             # %for.end181
	jmp	.LBB137_54
.LBB137_54:                             # %if.end182
	jmp	.LBB137_55
.LBB137_55:                             # %if.end183
	jmp	.LBB137_87
.LBB137_56:                             # %if.else184
	cmpl	$2, -16(%rbp)
	jne	.LBB137_66
# %bb.57:                               # %if.then187
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB137_58:                             # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_60 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB137_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB137_58 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB137_60:                             # %for.cond192
                                        #   Parent Loop BB137_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB137_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB137_60 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB137_60 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB137_60
.LBB137_63:                             # %for.end208
                                        #   in Loop: Header=BB137_58 Depth=1
	jmp	.LBB137_64
.LBB137_64:                             # %for.inc209
                                        #   in Loop: Header=BB137_58 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB137_58
.LBB137_65:                             # %for.end211
	jmp	.LBB137_86
.LBB137_66:                             # %if.else212
	cmpl	$0, -16(%rbp)
	jne	.LBB137_76
# %bb.67:                               # %if.then215
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB137_68:                             # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_70 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB137_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB137_68 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB137_70:                             # %for.cond220
                                        #   Parent Loop BB137_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB137_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB137_70 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB137_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB137_70
.LBB137_73:                             # %for.end233
                                        #   in Loop: Header=BB137_68 Depth=1
	jmp	.LBB137_74
.LBB137_74:                             # %for.inc234
                                        #   in Loop: Header=BB137_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB137_68
.LBB137_75:                             # %for.end236
	jmp	.LBB137_85
.LBB137_76:                             # %if.else237
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB137_77:                             # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_79 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB137_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB137_77 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB137_79:                             # %for.cond242
                                        #   Parent Loop BB137_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB137_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB137_79 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB137_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB137_79
.LBB137_82:                             # %for.end255
                                        #   in Loop: Header=BB137_77 Depth=1
	jmp	.LBB137_83
.LBB137_83:                             # %for.inc256
                                        #   in Loop: Header=BB137_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB137_77
.LBB137_84:                             # %for.end258
	jmp	.LBB137_85
.LBB137_85:                             # %if.end259
	jmp	.LBB137_86
.LBB137_86:                             # %if.end260
	jmp	.LBB137_87
.LBB137_87:                             # %if.end261
	cmpl	$1210082232, -72(%rbp)  # imm = 0x482063B8
	jne	.LBB137_89
.LBB137_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB137_89:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB137_88
.Lfunc_end137:
	.size	ChromaPrediction4x4.96, .Lfunc_end137-ChromaPrediction4x4.96
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe.97  # -- Begin function SetModesAndRefframe.97
	.p2align	4, 0x90
	.type	SetModesAndRefframe.97,@function
SetModesAndRefframe.97:                 # @SetModesAndRefframe.97
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1275699096, -60(%rbp)  # imm = 0x4C099F98
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -48(%rbp)
	movq	%r9, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -8(%rbp)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movl	$-1, (%rax)
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB138_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB138_12
.LBB138_2:                              # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB138_4
# %bb.3:                                # %if.then18
	movq	-48(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB138_11
.LBB138_4:                              # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB138_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB138_10
.LBB138_6:                              # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB138_8
# %bb.7:                                # %if.then45
	movq	-48(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB138_9
.LBB138_8:                              # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB138_9:                              # %if.end
	jmp	.LBB138_10
.LBB138_10:                             # %if.end86
	jmp	.LBB138_11
.LBB138_11:                             # %if.end87
	jmp	.LBB138_12
.LBB138_12:                             # %if.end88
	cmpl	$1275699096, -60(%rbp)  # imm = 0x4C099F98
	jne	.LBB138_14
.LBB138_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB138_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB138_13
.Lfunc_end138:
	.size	SetModesAndRefframe.97, .Lfunc_end138-SetModesAndRefframe.97
	.cfi_endproc
                                        # -- End function
	.globl	B8Mode2Value.98         # -- Begin function B8Mode2Value.98
	.p2align	4, 0x90
	.type	B8Mode2Value.98,@function
B8Mode2Value.98:                        # @B8Mode2Value.98
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$406192303, -24(%rbp)   # imm = 0x183600AF
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB139_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB139_3
.LBB139_2:                              # %if.else
	movslq	-12(%rbp), %rax
	movl	B8Mode2Value.b8start(,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	B8Mode2Value.b8inc(,%rcx,4), %ecx
	imull	-20(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
.LBB139_3:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$406192303, -24(%rbp)   # imm = 0x183600AF
	jne	.LBB139_5
.LBB139_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB139_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB139_4
.Lfunc_end139:
	.size	B8Mode2Value.98, .Lfunc_end139-B8Mode2Value.98
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.99   # -- Begin function LumaResidualCoding.99
	.p2align	4, 0x90
	.type	LumaResidualCoding.99,@function
LumaResidualCoding.99:                  # @LumaResidualCoding.99
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1579716226, -48(%rbp)  # imm = 0x5E288E82
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB140_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -8(%rbp)
	jge	.LBB140_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB140_1 Depth=1
	movl	-8(%rbp), %edi
	leaq	-22(%rbp), %rsi
	leaq	-40(%rbp), %rdx
	leaq	-44(%rbp), %rcx
	leaq	-20(%rbp), %r8
	leaq	-18(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-8(%rbp), %edx
	movw	-22(%rbp), %ax
	movl	-40(%rbp), %r8d
	movl	-44(%rbp), %r9d
	movw	-20(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-18(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB140_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB140_1
.LBB140_4:                              # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB140_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB140_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB140_33
.LBB140_7:                              # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -12(%rbp)
.LBB140_8:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB140_10 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB140_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB140_8 Depth=1
	movl	$0, -4(%rbp)
.LBB140_10:                             # %for.cond13
                                        #   Parent Loop BB140_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB140_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB140_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB140_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB140_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB140_14
.LBB140_13:                             # %if.else
                                        #   in Loop: Header=BB140_10 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB140_14:                             # %if.end
                                        #   in Loop: Header=BB140_10 Depth=2
	jmp	.LBB140_15
.LBB140_15:                             # %for.inc31
                                        #   in Loop: Header=BB140_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB140_10
.LBB140_16:                             # %for.end33
                                        #   in Loop: Header=BB140_8 Depth=1
	jmp	.LBB140_17
.LBB140_17:                             # %for.inc34
                                        #   in Loop: Header=BB140_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB140_8
.LBB140_18:                             # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB140_32
# %bb.19:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB140_20:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB140_22 Depth 2
                                        #       Child Loop BB140_24 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB140_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB140_20 Depth=1
	movl	-8(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -36(%rbp)
	movl	-8(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB140_22:                             # %for.cond45
                                        #   Parent Loop BB140_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB140_24 Depth 3
	cmpl	$8, -12(%rbp)
	jge	.LBB140_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB140_22 Depth=2
	movl	$0, -4(%rbp)
.LBB140_24:                             # %for.cond48
                                        #   Parent Loop BB140_20 Depth=1
                                        #     Parent Loop BB140_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -4(%rbp)
	jge	.LBB140_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB140_24 Depth=3
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movl	-52(%rbp), %esi
	addl	-4(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB140_24 Depth=3
	movl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB140_24
.LBB140_27:                             # %for.end55
                                        #   in Loop: Header=BB140_22 Depth=2
	jmp	.LBB140_28
.LBB140_28:                             # %for.inc56
                                        #   in Loop: Header=BB140_22 Depth=2
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB140_22
.LBB140_29:                             # %for.end58
                                        #   in Loop: Header=BB140_20 Depth=1
	jmp	.LBB140_30
.LBB140_30:                             # %for.inc59
                                        #   in Loop: Header=BB140_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB140_20
.LBB140_31:                             # %for.end61
	jmp	.LBB140_32
.LBB140_32:                             # %if.end62
	jmp	.LBB140_33
.LBB140_33:                             # %if.end63
	cmpl	$1579716226, -48(%rbp)  # imm = 0x5E288E82
	jne	.LBB140_35
.LBB140_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB140_35:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB140_34
.Lfunc_end140:
	.size	LumaResidualCoding.99, .Lfunc_end140-LumaResidualCoding.99
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.100  # -- Begin function writeIntra4x4Modes.100
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.100,@function
writeIntra4x4Modes.100:                 # @writeIntra4x4Modes.100
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$393945182, -84(%rbp)   # imm = 0x177B205E
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -16(%rbp)
.LBB141_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB141_9 Depth 2
                                        #       Child Loop BB141_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB141_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB141_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB141_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB141_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB141_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB141_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB141_8
.LBB141_5:                              # %lor.lhs.false10
                                        #   in Loop: Header=BB141_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB141_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB141_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB141_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB141_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB141_17
.LBB141_8:                              # %if.then
                                        #   in Loop: Header=BB141_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -72(%rbp)
	movl	%ecx, -80(%rbp)
	movl	-80(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -32(%rbp)
.LBB141_9:                              # %for.cond24
                                        #   Parent Loop BB141_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB141_11 Depth 3
	cmpl	$2, -32(%rbp)
	jge	.LBB141_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB141_9 Depth=2
	movl	$0, -12(%rbp)
.LBB141_11:                             # %for.cond27
                                        #   Parent Loop BB141_1 Depth=1
                                        #     Parent Loop BB141_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB141_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB141_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB141_11 Depth=3
	movl	-76(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB141_11
.LBB141_14:                             # %for.end
                                        #   in Loop: Header=BB141_9 Depth=2
	jmp	.LBB141_15
.LBB141_15:                             # %for.inc42
                                        #   in Loop: Header=BB141_9 Depth=2
	movl	-68(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB141_9
.LBB141_16:                             # %for.end44
                                        #   in Loop: Header=BB141_1 Depth=1
	jmp	.LBB141_17
.LBB141_17:                             # %if.end
                                        #   in Loop: Header=BB141_1 Depth=1
	jmp	.LBB141_18
.LBB141_18:                             # %for.inc45
                                        #   in Loop: Header=BB141_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB141_1
.LBB141_19:                             # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB141_20:                             # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB141_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB141_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB141_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB141_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB141_23:                             # %if.end57
                                        #   in Loop: Header=BB141_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB141_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB141_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB141_26
.LBB141_25:                             # %if.else
                                        #   in Loop: Header=BB141_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB141_26:                             # %if.end65
                                        #   in Loop: Header=BB141_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB141_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB141_20
.LBB141_28:                             # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$393945182, -84(%rbp)   # imm = 0x177B205E
	jne	.LBB141_30
.LBB141_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB141_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB141_29
.Lfunc_end141:
	.size	writeIntra4x4Modes.100, .Lfunc_end141-writeIntra4x4Modes.100
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.101   # -- Begin function TransformDecision.101
	.p2align	4, 0x90
	.type	TransformDecision.101,@function
TransformDecision.101:                  # @TransformDecision.101
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$1957154432, -84(%rbp)  # imm = 0x74A7CE80
	movl	%edi, -48(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$-1, -48(%rbp)
	jne	.LBB142_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -60(%rbp)
	jmp	.LBB142_3
.LBB142_2:                              # %if.else
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB142_3:                              # %if.end
	jmp	.LBB142_4
.LBB142_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB142_6 Depth 2
                                        #       Child Loop BB142_8 Depth 3
                                        #         Child Loop BB142_10 Depth 4
                                        #           Child Loop BB142_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB142_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB142_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-54(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	leaq	-80(%rbp), %rcx
	leaq	-50(%rbp), %r8
	leaq	-52(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -64(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -68(%rbp)
	movl	$0, -36(%rbp)
	movl	-64(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB142_6:                              # %for.cond3
                                        #   Parent Loop BB142_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB142_8 Depth 3
                                        #         Child Loop BB142_10 Depth 4
                                        #           Child Loop BB142_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB142_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB142_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB142_8:                              # %for.cond8
                                        #   Parent Loop BB142_4 Depth=1
                                        #     Parent Loop BB142_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB142_10 Depth 4
                                        #           Child Loop BB142_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB142_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB142_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movswl	-54(%rbp), %edx
	movl	-72(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movw	-50(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-52(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -24(%rbp)
.LBB142_10:                             # %for.cond13
                                        #   Parent Loop BB142_4 Depth=1
                                        #     Parent Loop BB142_6 Depth=2
                                        #       Parent Loop BB142_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB142_12 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB142_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB142_10 Depth=4
	movl	$0, -28(%rbp)
.LBB142_12:                             # %for.cond17
                                        #   Parent Loop BB142_4 Depth=1
                                        #     Parent Loop BB142_6 Depth=2
                                        #       Parent Loop BB142_8 Depth=3
                                        #         Parent Loop BB142_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -28(%rbp)
	jge	.LBB142_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB142_12 Depth=5
	movq	imgY_org, %rax
	movl	-88(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-76(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB142_12 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB142_12
.LBB142_15:                             # %for.end
                                        #   in Loop: Header=BB142_10 Depth=4
	jmp	.LBB142_16
.LBB142_16:                             # %for.inc38
                                        #   in Loop: Header=BB142_10 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB142_10
.LBB142_17:                             # %for.end40
                                        #   in Loop: Header=BB142_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB142_8 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB142_8
.LBB142_19:                             # %for.end44
                                        #   in Loop: Header=BB142_6 Depth=2
	jmp	.LBB142_20
.LBB142_20:                             # %for.inc45
                                        #   in Loop: Header=BB142_6 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB142_6
.LBB142_21:                             # %for.end47
                                        #   in Loop: Header=BB142_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB142_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB142_4
.LBB142_23:                             # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB142_25
# %bb.24:                               # %if.then56
	movl	$1, -44(%rbp)
	jmp	.LBB142_28
.LBB142_25:                             # %if.else57
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB142_27
# %bb.26:                               # %if.then60
	movl	$1, -44(%rbp)
	jmp	.LBB142_28
.LBB142_27:                             # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-32(%rbp), %eax
	addl	-40(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -44(%rbp)
.LBB142_28:                             # %return
	movl	-44(%rbp), %ebx
	cmpl	$1957154432, -84(%rbp)  # imm = 0x74A7CE80
	jne	.LBB142_30
.LBB142_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB142_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB142_29
.Lfunc_end142:
	.size	TransformDecision.101, .Lfunc_end142-TransformDecision.101
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8.102 # -- Begin function LumaResidualCoding8x8.102
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.102,@function
LumaResidualCoding8x8.102:              # @LumaResidualCoding8x8.102
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$344896054, -128(%rbp)  # imm = 0x148EB236
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movl	%edx, -32(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -80(%rbp)
	movl	%r9d, -60(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -28(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -44(%rbp)
	movl	-32(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -124(%rbp)
	cmpl	$0, -80(%rbp)
	jne	.LBB143_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -60(%rbp)
	jne	.LBB143_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB143_3:                              # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB143_5
# %bb.4:                                # %if.then
	movl	$1, -124(%rbp)
.LBB143_5:                              # %if.end
	movl	$0, -68(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB143_6:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB143_8 Depth 2
                                        #       Child Loop BB143_11 Depth 3
                                        #         Child Loop BB143_13 Depth 4
                                        #       Child Loop BB143_19 Depth 3
                                        #         Child Loop BB143_21 Depth 4
                                        #       Child Loop BB143_29 Depth 3
                                        #         Child Loop BB143_31 Depth 4
                                        #       Child Loop BB143_40 Depth 3
                                        #         Child Loop BB143_42 Depth 4
                                        #       Child Loop BB143_57 Depth 3
                                        #         Child Loop BB143_59 Depth 4
                                        #       Child Loop BB143_67 Depth 3
                                        #         Child Loop BB143_69 Depth 4
                                        #       Child Loop BB143_84 Depth 3
                                        #         Child Loop BB143_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB143_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB143_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -84(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB143_8:                              # %for.cond9
                                        #   Parent Loop BB143_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB143_11 Depth 3
                                        #         Child Loop BB143_13 Depth 4
                                        #       Child Loop BB143_19 Depth 3
                                        #         Child Loop BB143_21 Depth 4
                                        #       Child Loop BB143_29 Depth 3
                                        #         Child Loop BB143_31 Depth 4
                                        #       Child Loop BB143_40 Depth 3
                                        #         Child Loop BB143_42 Depth 4
                                        #       Child Loop BB143_57 Depth 3
                                        #         Child Loop BB143_59 Depth 4
                                        #       Child Loop BB143_67 Depth 3
                                        #         Child Loop BB143_69 Depth 4
                                        #       Child Loop BB143_84 Depth 3
                                        #         Child Loop BB143_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB143_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB143_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB143_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB143_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movl	-60(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB143_11:                             # %for.cond16
                                        #   Parent Loop BB143_6 Depth=1
                                        #     Parent Loop BB143_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB143_13 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB143_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB143_11 Depth=3
	movl	$0, -12(%rbp)
.LBB143_13:                             # %for.cond20
                                        #   Parent Loop BB143_6 Depth=1
                                        #     Parent Loop BB143_8 Depth=2
                                        #       Parent Loop BB143_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB143_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB143_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB143_13 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB143_13
.LBB143_16:                             # %for.end
                                        #   in Loop: Header=BB143_11 Depth=3
	jmp	.LBB143_17
.LBB143_17:                             # %for.inc37
                                        #   in Loop: Header=BB143_11 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB143_11
.LBB143_18:                             # %for.end39
                                        #   in Loop: Header=BB143_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movl	-60(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB143_19:                             # %for.cond41
                                        #   Parent Loop BB143_6 Depth=1
                                        #     Parent Loop BB143_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB143_21 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB143_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB143_19 Depth=3
	movl	$0, -12(%rbp)
.LBB143_21:                             # %for.cond45
                                        #   Parent Loop BB143_6 Depth=1
                                        #     Parent Loop BB143_8 Depth=2
                                        #       Parent Loop BB143_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB143_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB143_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB143_21 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB143_21
.LBB143_24:                             # %for.end65
                                        #   in Loop: Header=BB143_19 Depth=3
	jmp	.LBB143_25
.LBB143_25:                             # %for.inc66
                                        #   in Loop: Header=BB143_19 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB143_19
.LBB143_26:                             # %for.end68
                                        #   in Loop: Header=BB143_8 Depth=2
	jmp	.LBB143_27
.LBB143_27:                             # %if.end69
                                        #   in Loop: Header=BB143_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-80(%rbp), %ecx
	movl	-60(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB143_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB143_8 Depth=2
	movl	$0, -16(%rbp)
.LBB143_29:                             # %for.cond74
                                        #   Parent Loop BB143_6 Depth=1
                                        #     Parent Loop BB143_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB143_31 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB143_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB143_29 Depth=3
	movl	$0, -12(%rbp)
.LBB143_31:                             # %for.cond78
                                        #   Parent Loop BB143_6 Depth=1
                                        #     Parent Loop BB143_8 Depth=2
                                        #       Parent Loop BB143_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB143_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB143_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB143_31 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB143_31
.LBB143_34:                             # %for.end98
                                        #   in Loop: Header=BB143_29 Depth=3
	jmp	.LBB143_35
.LBB143_35:                             # %for.inc99
                                        #   in Loop: Header=BB143_29 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB143_29
.LBB143_36:                             # %for.end101
                                        #   in Loop: Header=BB143_8 Depth=2
	jmp	.LBB143_37
.LBB143_37:                             # %if.end102
                                        #   in Loop: Header=BB143_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB143_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB143_8 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB143_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB143_8 Depth=2
	movl	$0, -16(%rbp)
.LBB143_40:                             # %for.cond108
                                        #   Parent Loop BB143_6 Depth=1
                                        #     Parent Loop BB143_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB143_42 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB143_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB143_40 Depth=3
	movl	$0, -12(%rbp)
.LBB143_42:                             # %for.cond112
                                        #   Parent Loop BB143_6 Depth=1
                                        #     Parent Loop BB143_8 Depth=2
                                        #       Parent Loop BB143_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB143_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB143_42 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB143_42 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB143_42
.LBB143_45:                             # %for.end137
                                        #   in Loop: Header=BB143_40 Depth=3
	jmp	.LBB143_46
.LBB143_46:                             # %for.inc138
                                        #   in Loop: Header=BB143_40 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB143_40
.LBB143_47:                             # %for.end140
                                        #   in Loop: Header=BB143_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB143_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB143_8 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB143_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB143_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB143_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB143_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-28(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -36(%rbp)
	jmp	.LBB143_52
.LBB143_51:                             # %if.else
                                        #   in Loop: Header=BB143_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-28(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -36(%rbp)
.LBB143_52:                             # %if.end151
                                        #   in Loop: Header=BB143_8 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB143_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB143_8 Depth=2
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-64(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB143_54:                             # %if.end157
                                        #   in Loop: Header=BB143_8 Depth=2
	jmp	.LBB143_55
.LBB143_55:                             # %if.end158
                                        #   in Loop: Header=BB143_8 Depth=2
	jmp	.LBB143_65
.LBB143_56:                             # %if.else159
                                        #   in Loop: Header=BB143_8 Depth=2
	movl	$0, -16(%rbp)
.LBB143_57:                             # %for.cond160
                                        #   Parent Loop BB143_6 Depth=1
                                        #     Parent Loop BB143_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB143_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB143_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB143_57 Depth=3
	movl	$0, -12(%rbp)
.LBB143_59:                             # %for.cond164
                                        #   Parent Loop BB143_6 Depth=1
                                        #     Parent Loop BB143_8 Depth=2
                                        #       Parent Loop BB143_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB143_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB143_59 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB143_59 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB143_59
.LBB143_62:                             # %for.end193
                                        #   in Loop: Header=BB143_57 Depth=3
	jmp	.LBB143_63
.LBB143_63:                             # %for.inc194
                                        #   in Loop: Header=BB143_57 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB143_57
.LBB143_64:                             # %for.end196
                                        #   in Loop: Header=BB143_8 Depth=2
	jmp	.LBB143_65
.LBB143_65:                             # %if.end197
                                        #   in Loop: Header=BB143_8 Depth=2
	jmp	.LBB143_95
.LBB143_66:                             # %if.else198
                                        #   in Loop: Header=BB143_8 Depth=2
	movl	$0, -16(%rbp)
.LBB143_67:                             # %for.cond199
                                        #   Parent Loop BB143_6 Depth=1
                                        #     Parent Loop BB143_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB143_69 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB143_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB143_67 Depth=3
	movl	$0, -12(%rbp)
.LBB143_69:                             # %for.cond203
                                        #   Parent Loop BB143_6 Depth=1
                                        #     Parent Loop BB143_8 Depth=2
                                        #       Parent Loop BB143_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB143_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB143_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-56(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-52(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-12(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -88(%rbp)
	movq	imgY_org, %rdx
	movl	-56(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-12(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -116(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-56(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -120(%rbp)
	movl	-120(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-88(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-116(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-92(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -72(%rbp)
	jne	.LBB143_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB143_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB143_73
.LBB143_72:                             # %if.else300
                                        #   in Loop: Header=BB143_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB143_73:                             # %if.end314
                                        #   in Loop: Header=BB143_69 Depth=4
	jmp	.LBB143_74
.LBB143_74:                             # %for.inc315
                                        #   in Loop: Header=BB143_69 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB143_69
.LBB143_75:                             # %for.end317
                                        #   in Loop: Header=BB143_67 Depth=3
	jmp	.LBB143_76
.LBB143_76:                             # %for.inc318
                                        #   in Loop: Header=BB143_67 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB143_67
.LBB143_77:                             # %for.end320
                                        #   in Loop: Header=BB143_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB143_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB143_8 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB143_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB143_8 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB143_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB143_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB143_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB143_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-28(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -36(%rbp)
	jmp	.LBB143_83
.LBB143_82:                             # %if.else334
                                        #   in Loop: Header=BB143_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-28(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -36(%rbp)
.LBB143_83:                             # %if.end336
                                        #   in Loop: Header=BB143_8 Depth=2
	movl	$0, -16(%rbp)
.LBB143_84:                             # %for.cond337
                                        #   Parent Loop BB143_6 Depth=1
                                        #     Parent Loop BB143_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB143_86 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB143_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB143_84 Depth=3
	movl	$0, -12(%rbp)
.LBB143_86:                             # %for.cond341
                                        #   Parent Loop BB143_6 Depth=1
                                        #     Parent Loop BB143_8 Depth=2
                                        #       Parent Loop BB143_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB143_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB143_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB143_86 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB143_86
.LBB143_89:                             # %for.end358
                                        #   in Loop: Header=BB143_84 Depth=3
	jmp	.LBB143_90
.LBB143_90:                             # %for.inc359
                                        #   in Loop: Header=BB143_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB143_84
.LBB143_91:                             # %for.end361
                                        #   in Loop: Header=BB143_8 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB143_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB143_8 Depth=2
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-64(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB143_93:                             # %if.end368
                                        #   in Loop: Header=BB143_8 Depth=2
	jmp	.LBB143_94
.LBB143_94:                             # %if.end369
                                        #   in Loop: Header=BB143_8 Depth=2
	jmp	.LBB143_95
.LBB143_95:                             # %if.end370
                                        #   in Loop: Header=BB143_8 Depth=2
	jmp	.LBB143_96
.LBB143_96:                             # %for.inc371
                                        #   in Loop: Header=BB143_8 Depth=2
	movl	-84(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB143_8
.LBB143_97:                             # %for.end374
                                        #   in Loop: Header=BB143_6 Depth=1
	jmp	.LBB143_98
.LBB143_98:                             # %for.inc375
                                        #   in Loop: Header=BB143_6 Depth=1
	movl	-68(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -68(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB143_6
.LBB143_99:                             # %for.end378
	cmpl	$0, -72(%rbp)
	je	.LBB143_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB143_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -76(%rbp)
	jne	.LBB143_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB143_104
# %bb.103:                              # %if.then390
	movl	-32(%rbp), %edi
	leaq	-28(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -36(%rbp)
.LBB143_104:                            # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB143_114
# %bb.105:                              # %if.then395
	movl	$0, -16(%rbp)
.LBB143_106:                            # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB143_108 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB143_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB143_106 Depth=1
	movl	$0, -12(%rbp)
.LBB143_108:                            # %for.cond400
                                        #   Parent Loop BB143_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB143_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB143_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-40(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB143_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB143_108
.LBB143_111:                            # %for.end417
                                        #   in Loop: Header=BB143_106 Depth=1
	jmp	.LBB143_112
.LBB143_112:                            # %for.inc418
                                        #   in Loop: Header=BB143_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB143_106
.LBB143_113:                            # %for.end420
	jmp	.LBB143_114
.LBB143_114:                            # %if.end421
	cmpl	$0, -36(%rbp)
	je	.LBB143_116
# %bb.115:                              # %if.then423
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-64(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB143_116:                            # %if.end431
	jmp	.LBB143_117
.LBB143_117:                            # %if.end432
	jmp	.LBB143_118
.LBB143_118:                            # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB143_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -76(%rbp)
	jne	.LBB143_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -28(%rbp)
	jg	.LBB143_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB143_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB143_145
.LBB143_123:                            # %if.then448
	movl	$0, -28(%rbp)
	movl	$63, %eax
	subl	-64(%rbp), %eax
	movq	-104(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-112(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB143_124:                            # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB143_126 Depth 2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB143_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB143_124 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB143_126:                            # %for.cond462
                                        #   Parent Loop BB143_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB143_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB143_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB143_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB143_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB143_130
.LBB143_129:                            # %if.else481
                                        #   in Loop: Header=BB143_126 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB143_130:                            # %if.end486
                                        #   in Loop: Header=BB143_126 Depth=2
	jmp	.LBB143_131
.LBB143_131:                            # %for.inc487
                                        #   in Loop: Header=BB143_126 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB143_126
.LBB143_132:                            # %for.end489
                                        #   in Loop: Header=BB143_124 Depth=1
	jmp	.LBB143_133
.LBB143_133:                            # %for.inc490
                                        #   in Loop: Header=BB143_124 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB143_124
.LBB143_134:                            # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB143_144
# %bb.135:                              # %if.then496
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB143_136:                            # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB143_138 Depth 2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB143_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB143_136 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB143_138:                            # %for.cond502
                                        #   Parent Loop BB143_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB143_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB143_138 Depth=2
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB143_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB143_138
.LBB143_141:                            # %for.end509
                                        #   in Loop: Header=BB143_136 Depth=1
	jmp	.LBB143_142
.LBB143_142:                            # %for.inc510
                                        #   in Loop: Header=BB143_136 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB143_136
.LBB143_143:                            # %for.end512
	jmp	.LBB143_144
.LBB143_144:                            # %if.end513
	jmp	.LBB143_145
.LBB143_145:                            # %if.end514
	movl	-28(%rbp), %ebx
	cmpl	$344896054, -128(%rbp)  # imm = 0x148EB236
	jne	.LBB143_147
.LBB143_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB143_147:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB143_146
.Lfunc_end143:
	.size	LumaResidualCoding8x8.102, .Lfunc_end143-LumaResidualCoding8x8.102
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame.103 # -- Begin function writeReferenceFrame.103
	.p2align	4, 0x90
	.type	writeReferenceFrame.103,@function
writeReferenceFrame.103:                # @writeReferenceFrame.103
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1113471669, -72(%rbp)  # imm = 0x425E3AB5
	movl	%edi, -68(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -52(%rbp)
	movl	%r8d, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB144_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB144_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB144_4
.LBB144_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB144_4
.LBB144_4:                              # %cond.end
	movl	%ecx, -36(%rbp)
	cmpl	$0, -52(%rbp)
	je	.LBB144_6
# %bb.5:                                # %cond.true10
	movl	-36(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB144_7
.LBB144_6:                              # %cond.false13
	movl	-36(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB144_7:                              # %cond.end17
	movl	%eax, -48(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB144_9
# %bb.8:                                # %if.then
	movl	$0, -44(%rbp)
	jmp	.LBB144_18
.LBB144_9:                              # %if.end
	cmpl	$2, -48(%rbp)
	jne	.LBB144_11
# %bb.10:                               # %if.then20
	movl	$1, -40(%rbp)
.LBB144_11:                             # %if.end21
	movl	-84(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB144_16
# %bb.12:                               # %if.then28
	cmpl	$0, -40(%rbp)
	je	.LBB144_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB144_15
.LBB144_14:                             # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB144_15:                             # %if.end33
	jmp	.LBB144_17
.LBB144_16:                             # %if.else34
	movl	-68(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-76(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-80(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-52(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB144_17:                             # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB144_18:                             # %return
	movl	-44(%rbp), %ebx
	cmpl	$1113471669, -72(%rbp)  # imm = 0x425E3AB5
	jne	.LBB144_20
.LBB144_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB144_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB144_19
.Lfunc_end144:
	.size	writeReferenceFrame.103, .Lfunc_end144-writeReferenceFrame.103
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL.104 # -- Begin function writeMotionInfo2NAL.104
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.104,@function
writeMotionInfo2NAL.104:                # @writeMotionInfo2NAL.104
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$351536212, -56(%rbp)   # imm = 0x14F40454
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB145_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB145_3
.LBB145_2:                              # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB145_3:                              # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB145_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB145_6
.LBB145_5:                              # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB145_6:                              # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB145_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB145_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB145_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB145_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB145_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB145_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB145_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB145_39
.LBB145_14:                             # %if.then42
	movl	$0, -12(%rbp)
.LBB145_15:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB145_17 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB145_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB145_15 Depth=1
	movl	$0, -16(%rbp)
.LBB145_17:                             # %for.cond45
                                        #   Parent Loop BB145_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB145_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB145_17 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB145_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB145_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB145_22
.LBB145_20:                             # %land.lhs.true59
                                        #   in Loop: Header=BB145_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB145_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB145_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB145_22:                             # %if.end
                                        #   in Loop: Header=BB145_17 Depth=2
	jmp	.LBB145_23
.LBB145_23:                             # %for.inc
                                        #   in Loop: Header=BB145_17 Depth=2
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB145_17
.LBB145_24:                             # %for.end
                                        #   in Loop: Header=BB145_15 Depth=1
	jmp	.LBB145_25
.LBB145_25:                             # %for.inc79
                                        #   in Loop: Header=BB145_15 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB145_15
.LBB145_26:                             # %for.end81
	movl	$0, -12(%rbp)
.LBB145_27:                             # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB145_29 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB145_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB145_27 Depth=1
	movl	$0, -16(%rbp)
.LBB145_29:                             # %for.cond86
                                        #   Parent Loop BB145_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB145_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB145_29 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB145_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB145_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB145_34
.LBB145_32:                             # %land.lhs.true103
                                        #   in Loop: Header=BB145_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB145_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB145_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB145_34:                             # %if.end126
                                        #   in Loop: Header=BB145_29 Depth=2
	jmp	.LBB145_35
.LBB145_35:                             # %for.inc127
                                        #   in Loop: Header=BB145_29 Depth=2
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB145_29
.LBB145_36:                             # %for.end129
                                        #   in Loop: Header=BB145_27 Depth=1
	jmp	.LBB145_37
.LBB145_37:                             # %for.inc130
                                        #   in Loop: Header=BB145_27 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB145_27
.LBB145_38:                             # %for.end132
	jmp	.LBB145_39
.LBB145_39:                             # %if.end133
	jmp	.LBB145_40
.LBB145_40:                             # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB145_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB145_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB145_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB145_57
# %bb.44:                               # %if.then150
	movl	$0, -12(%rbp)
.LBB145_45:                             # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB145_47 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB145_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB145_45 Depth=1
	movl	$0, -16(%rbp)
.LBB145_47:                             # %for.cond155
                                        #   Parent Loop BB145_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB145_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB145_47 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB145_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB145_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB145_52
.LBB145_50:                             # %land.lhs.true172
                                        #   in Loop: Header=BB145_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB145_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB145_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB145_52:                             # %if.end197
                                        #   in Loop: Header=BB145_47 Depth=2
	jmp	.LBB145_53
.LBB145_53:                             # %for.inc198
                                        #   in Loop: Header=BB145_47 Depth=2
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB145_47
.LBB145_54:                             # %for.end200
                                        #   in Loop: Header=BB145_45 Depth=1
	jmp	.LBB145_55
.LBB145_55:                             # %for.inc201
                                        #   in Loop: Header=BB145_45 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB145_45
.LBB145_56:                             # %for.end203
	jmp	.LBB145_57
.LBB145_57:                             # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB145_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB145_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB145_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB145_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB145_75
# %bb.62:                               # %if.then222
	movl	$0, -12(%rbp)
.LBB145_63:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB145_65 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB145_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB145_63 Depth=1
	movl	$0, -16(%rbp)
.LBB145_65:                             # %for.cond227
                                        #   Parent Loop BB145_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB145_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB145_65 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB145_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB145_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB145_70
.LBB145_68:                             # %land.lhs.true244
                                        #   in Loop: Header=BB145_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB145_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB145_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB145_70:                             # %if.end269
                                        #   in Loop: Header=BB145_65 Depth=2
	jmp	.LBB145_71
.LBB145_71:                             # %for.inc270
                                        #   in Loop: Header=BB145_65 Depth=2
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB145_65
.LBB145_72:                             # %for.end272
                                        #   in Loop: Header=BB145_63 Depth=1
	jmp	.LBB145_73
.LBB145_73:                             # %for.inc273
                                        #   in Loop: Header=BB145_63 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB145_63
.LBB145_74:                             # %for.end275
	jmp	.LBB145_75
.LBB145_75:                             # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$351536212, -56(%rbp)   # imm = 0x14F40454
	jne	.LBB145_77
.LBB145_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB145_77:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB145_76
.Lfunc_end145:
	.size	writeMotionInfo2NAL.104, .Lfunc_end145-writeMotionInfo2NAL.104
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8.105 # -- Begin function writeMotionVector8x8.105
	.p2align	4, 0x90
	.type	writeMotionVector8x8.105,@function
writeMotionVector8x8.105:               # @writeMotionVector8x8.105
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$1293474964, -84(%rbp)  # imm = 0x4D18DC94
	movl	%edi, -100(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -92(%rbp)
	movl	%ecx, -88(%rbp)
	movl	%r8d, -96(%rbp)
	movl	%r9d, -36(%rbp)
	movl	$0, -60(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -128(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -144(%rbp)
	movl	-96(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB146_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB146_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB146_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -64(%rbp)
	jne	.LBB146_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB146_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB146_7
.LBB146_6:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB146_7:                              # %cond.end
	movq	%rax, -120(%rbp)
.LBB146_8:                              # %if.end
	movl	-80(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB146_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB146_11 Depth 2
                                        #       Child Loop BB146_13 Depth 3
                                        #         Child Loop BB146_15 Depth 4
                                        #           Child Loop BB146_17 Depth 5
	movl	-16(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jge	.LBB146_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB146_9 Depth=1
	movl	-100(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB146_11:                             # %for.cond22
                                        #   Parent Loop BB146_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB146_13 Depth 3
                                        #         Child Loop BB146_15 Depth 4
                                        #           Child Loop BB146_17 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jge	.LBB146_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB146_11 Depth=2
	movl	$0, -20(%rbp)
.LBB146_13:                             # %for.cond25
                                        #   Parent Loop BB146_9 Depth=1
                                        #     Parent Loop BB146_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB146_15 Depth 4
                                        #           Child Loop BB146_17 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB146_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB146_13 Depth=3
	movq	-120(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-136(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -44(%rbp)
.LBB146_15:                             # %for.cond53
                                        #   Parent Loop BB146_9 Depth=1
                                        #     Parent Loop BB146_11 Depth=2
                                        #       Parent Loop BB146_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB146_17 Depth 5
	movl	-44(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB146_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB146_15 Depth=4
	movl	$0, -40(%rbp)
.LBB146_17:                             # %for.cond57
                                        #   Parent Loop BB146_9 Depth=1
                                        #     Parent Loop BB146_11 Depth=2
                                        #       Parent Loop BB146_13 Depth=3
                                        #         Parent Loop BB146_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-40(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB146_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB146_17 Depth=5
	movl	-68(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-36(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-44(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-40(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB146_17 Depth=5
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB146_17
.LBB146_20:                             # %for.end
                                        #   in Loop: Header=BB146_15 Depth=4
	jmp	.LBB146_21
.LBB146_21:                             # %for.inc70
                                        #   in Loop: Header=BB146_15 Depth=4
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB146_15
.LBB146_22:                             # %for.end72
                                        #   in Loop: Header=BB146_13 Depth=3
	movl	-68(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB146_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB146_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB146_25
.LBB146_24:                             # %if.else
                                        #   in Loop: Header=BB146_13 Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB146_25:                             # %if.end78
                                        #   in Loop: Header=BB146_13 Depth=3
	movq	-152(%rbp), %rax
	movq	24(%rax), %rax
	movq	-144(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-112(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-128(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB146_13 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB146_13
.LBB146_27:                             # %for.end90
                                        #   in Loop: Header=BB146_11 Depth=2
	jmp	.LBB146_28
.LBB146_28:                             # %for.inc91
                                        #   in Loop: Header=BB146_11 Depth=2
	movl	-72(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB146_11
.LBB146_29:                             # %for.end93
                                        #   in Loop: Header=BB146_9 Depth=1
	jmp	.LBB146_30
.LBB146_30:                             # %for.inc94
                                        #   in Loop: Header=BB146_9 Depth=1
	movl	-76(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB146_9
.LBB146_31:                             # %for.end96
	movl	-60(%rbp), %ebx
	cmpl	$1293474964, -84(%rbp)  # imm = 0x4D18DC94
	jne	.LBB146_33
.LBB146_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB146_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB146_32
.Lfunc_end146:
	.size	writeMotionVector8x8.105, .Lfunc_end146-writeMotionVector8x8.105
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.106  # -- Begin function LumaResidualCoding.106
	.p2align	4, 0x90
	.type	LumaResidualCoding.106,@function
LumaResidualCoding.106:                 # @LumaResidualCoding.106
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$345228068, -36(%rbp)   # imm = 0x1493C324
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB147_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -8(%rbp)
	jge	.LBB147_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB147_1 Depth=1
	movl	-8(%rbp), %edi
	leaq	-22(%rbp), %rsi
	leaq	-52(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	leaq	-18(%rbp), %r8
	leaq	-20(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-8(%rbp), %edx
	movw	-22(%rbp), %ax
	movl	-52(%rbp), %r8d
	movl	-48(%rbp), %r9d
	movw	-18(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-20(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB147_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB147_1
.LBB147_4:                              # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB147_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB147_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB147_33
.LBB147_7:                              # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -4(%rbp)
.LBB147_8:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB147_10 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB147_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB147_8 Depth=1
	movl	$0, -12(%rbp)
.LBB147_10:                             # %for.cond13
                                        #   Parent Loop BB147_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -12(%rbp)
	jge	.LBB147_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB147_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB147_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB147_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB147_14
.LBB147_13:                             # %if.else
                                        #   in Loop: Header=BB147_10 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB147_14:                             # %if.end
                                        #   in Loop: Header=BB147_10 Depth=2
	jmp	.LBB147_15
.LBB147_15:                             # %for.inc31
                                        #   in Loop: Header=BB147_10 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB147_10
.LBB147_16:                             # %for.end33
                                        #   in Loop: Header=BB147_8 Depth=1
	jmp	.LBB147_17
.LBB147_17:                             # %for.inc34
                                        #   in Loop: Header=BB147_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB147_8
.LBB147_18:                             # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB147_32
# %bb.19:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB147_20:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB147_22 Depth 2
                                        #       Child Loop BB147_24 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB147_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB147_20 Depth=1
	movl	-8(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-8(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB147_22:                             # %for.cond45
                                        #   Parent Loop BB147_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB147_24 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB147_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB147_22 Depth=2
	movl	$0, -12(%rbp)
.LBB147_24:                             # %for.cond48
                                        #   Parent Loop BB147_20 Depth=1
                                        #     Parent Loop BB147_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -12(%rbp)
	jge	.LBB147_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB147_24 Depth=3
	movl	-40(%rbp), %edi
	addl	-4(%rbp), %edi
	movl	-44(%rbp), %esi
	addl	-12(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB147_24 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB147_24
.LBB147_27:                             # %for.end55
                                        #   in Loop: Header=BB147_22 Depth=2
	jmp	.LBB147_28
.LBB147_28:                             # %for.inc56
                                        #   in Loop: Header=BB147_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB147_22
.LBB147_29:                             # %for.end58
                                        #   in Loop: Header=BB147_20 Depth=1
	jmp	.LBB147_30
.LBB147_30:                             # %for.inc59
                                        #   in Loop: Header=BB147_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB147_20
.LBB147_31:                             # %for.end61
	jmp	.LBB147_32
.LBB147_32:                             # %if.end62
	jmp	.LBB147_33
.LBB147_33:                             # %if.end63
	cmpl	$345228068, -36(%rbp)   # imm = 0x1493C324
	jne	.LBB147_35
.LBB147_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB147_35:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB147_34
.Lfunc_end147:
	.size	LumaResidualCoding.106, .Lfunc_end147-LumaResidualCoding.106
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff.107 # -- Begin function writeCBPandLumaCoeff.107
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.107,@function
writeCBPandLumaCoeff.107:               # @writeCBPandLumaCoeff.107
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$2008000184, -108(%rbp) # imm = 0x77AFA6B8
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB148_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB148_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB148_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB148_7
.LBB148_4:                              # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB148_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB148_6:                              # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB148_10
.LBB148_7:                              # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB148_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB148_9:                              # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB148_10:                             # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB148_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB148_12:                             # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB148_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB148_18
.LBB148_14:                             # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB148_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB148_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB148_18
.LBB148_17:                             # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB148_22
.LBB148_18:                             # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB148_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB148_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB148_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB148_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -100(%rbp)
	je	.LBB148_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB148_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB148_26
.LBB148_25:                             # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB148_26:                             # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB148_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB148_29
.LBB148_28:                             # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB148_29:                             # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB148_30:                             # %if.end93
	jmp	.LBB148_31
.LBB148_31:                             # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB148_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB148_42
.LBB148_33:                             # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB148_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB148_36
.LBB148_35:                             # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB148_36:                             # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB148_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB148_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB148_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB148_41
.LBB148_40:                             # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB148_41:                             # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB148_42:                             # %if.end138
	movl	$0, -36(%rbp)
.LBB148_43:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB148_45 Depth 2
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB148_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB148_43 Depth=1
	movl	$0, -20(%rbp)
.LBB148_45:                             # %for.cond141
                                        #   Parent Loop BB148_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB148_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB148_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB148_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB148_45
.LBB148_48:                             # %for.end
                                        #   in Loop: Header=BB148_43 Depth=1
	jmp	.LBB148_49
.LBB148_49:                             # %for.inc152
                                        #   in Loop: Header=BB148_43 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB148_43
.LBB148_50:                             # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB148_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB148_52:                             # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB148_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB148_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB148_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB148_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB148_55:                             # %if.end169
                                        #   in Loop: Header=BB148_52 Depth=1
	jmp	.LBB148_56
.LBB148_56:                             # %for.inc170
                                        #   in Loop: Header=BB148_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB148_52
.LBB148_57:                             # %for.end172
	jmp	.LBB148_101
.LBB148_58:                             # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB148_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB148_70
.LBB148_60:                             # %if.else179
	movl	$1, -52(%rbp)
	movl	$0, -40(%rbp)
.LBB148_61:                             # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jg	.LBB148_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB148_61 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB148_63:                             # %land.end184
                                        #   in Loop: Header=BB148_61 Depth=1
	testb	$1, %al
	jne	.LBB148_64
	jmp	.LBB148_69
.LBB148_64:                             # %for.body186
                                        #   in Loop: Header=BB148_61 Depth=1
	movq	-136(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-144(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -104(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB148_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB148_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB148_67
.LBB148_66:                             # %if.else196
                                        #   in Loop: Header=BB148_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB148_67:                             # %if.end198
                                        #   in Loop: Header=BB148_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB148_61 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB148_61
.LBB148_69:                             # %for.end218
	jmp	.LBB148_70
.LBB148_70:                             # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB148_100
# %bb.71:                               # %if.then222
	movl	$0, -60(%rbp)
.LBB148_72:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB148_74 Depth 2
                                        #       Child Loop BB148_76 Depth 3
                                        #         Child Loop BB148_78 Depth 4
                                        #           Child Loop BB148_82 Depth 5
	cmpl	$4, -60(%rbp)
	jge	.LBB148_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB148_72 Depth=1
	movl	$0, -56(%rbp)
.LBB148_74:                             # %for.cond226
                                        #   Parent Loop BB148_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB148_76 Depth 3
                                        #         Child Loop BB148_78 Depth 4
                                        #           Child Loop BB148_82 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB148_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB148_74 Depth=2
	movl	-60(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB148_76:                             # %for.cond229
                                        #   Parent Loop BB148_72 Depth=1
                                        #     Parent Loop BB148_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB148_78 Depth 4
                                        #           Child Loop BB148_82 Depth 5
	movl	-36(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB148_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB148_76 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB148_78:                             # %for.cond233
                                        #   Parent Loop BB148_72 Depth=1
                                        #     Parent Loop BB148_74 Depth=2
                                        #       Parent Loop BB148_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB148_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB148_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB148_78 Depth=4
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -72(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB148_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB148_78 Depth=4
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB148_91
.LBB148_81:                             # %if.else247
                                        #   in Loop: Header=BB148_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -52(%rbp)
	movl	$0, -40(%rbp)
.LBB148_82:                             # %for.cond259
                                        #   Parent Loop BB148_72 Depth=1
                                        #     Parent Loop BB148_74 Depth=2
                                        #       Parent Loop BB148_76 Depth=3
                                        #         Parent Loop BB148_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jge	.LBB148_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB148_82 Depth=5
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB148_84:                             # %land.end263
                                        #   in Loop: Header=BB148_82 Depth=5
	testb	$1, %al
	jne	.LBB148_85
	jmp	.LBB148_90
.LBB148_85:                             # %for.body265
                                        #   in Loop: Header=BB148_82 Depth=5
	movq	-120(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-128(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -104(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB148_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB148_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB148_88
.LBB148_87:                             # %if.else276
                                        #   in Loop: Header=BB148_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB148_88:                             # %if.end278
                                        #   in Loop: Header=BB148_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB148_82 Depth=5
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB148_82
.LBB148_90:                             # %for.end300
                                        #   in Loop: Header=BB148_78 Depth=4
	jmp	.LBB148_91
.LBB148_91:                             # %if.end301
                                        #   in Loop: Header=BB148_78 Depth=4
	jmp	.LBB148_92
.LBB148_92:                             # %for.inc302
                                        #   in Loop: Header=BB148_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB148_78
.LBB148_93:                             # %for.end304
                                        #   in Loop: Header=BB148_76 Depth=3
	jmp	.LBB148_94
.LBB148_94:                             # %for.inc305
                                        #   in Loop: Header=BB148_76 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB148_76
.LBB148_95:                             # %for.end307
                                        #   in Loop: Header=BB148_74 Depth=2
	jmp	.LBB148_96
.LBB148_96:                             # %for.inc308
                                        #   in Loop: Header=BB148_74 Depth=2
	movl	-56(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB148_74
.LBB148_97:                             # %for.end310
                                        #   in Loop: Header=BB148_72 Depth=1
	jmp	.LBB148_98
.LBB148_98:                             # %for.inc311
                                        #   in Loop: Header=BB148_72 Depth=1
	movl	-60(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB148_72
.LBB148_99:                             # %for.end313
	jmp	.LBB148_100
.LBB148_100:                            # %if.end314
	jmp	.LBB148_101
.LBB148_101:                            # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$2008000184, -108(%rbp) # imm = 0x77AFA6B8
	jne	.LBB148_103
.LBB148_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB148_103:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB148_102
.Lfunc_end148:
	.size	writeCBPandLumaCoeff.107, .Lfunc_end148-writeCBPandLumaCoeff.107
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef.108             # -- Begin function ZeroRef.108
	.p2align	4, 0x90
	.type	ZeroRef.108,@function
ZeroRef.108:                            # @ZeroRef.108
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1136856904, -24(%rbp)  # imm = 0x43C30F48
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB149_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB149_3 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB149_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB149_1 Depth=1
	movl	$0, -12(%rbp)
.LBB149_3:                              # %for.cond1
                                        #   Parent Loop BB149_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB149_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB149_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB149_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB149_11
.LBB149_6:                              # %if.end
                                        #   in Loop: Header=BB149_3 Depth=2
	jmp	.LBB149_7
.LBB149_7:                              # %for.inc
                                        #   in Loop: Header=BB149_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB149_3
.LBB149_8:                              # %for.end
                                        #   in Loop: Header=BB149_1 Depth=1
	jmp	.LBB149_9
.LBB149_9:                              # %for.inc10
                                        #   in Loop: Header=BB149_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB149_1
.LBB149_10:                             # %for.end12
	movl	$1, -20(%rbp)
.LBB149_11:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1136856904, -24(%rbp)  # imm = 0x43C30F48
	jne	.LBB149_13
.LBB149_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB149_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB149_12
.Lfunc_end149:
	.size	ZeroRef.108, .Lfunc_end149-ZeroRef.108
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode.109 # -- Begin function writeChromaIntraPredMode.109
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.109,@function
writeChromaIntraPredMode.109:           # @writeChromaIntraPredMode.109
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$1534404415, -36(%rbp)  # imm = 0x5B75273F
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB150_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB150_3
.LBB150_2:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB150_3:                              # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-56(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-64(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$1534404415, -36(%rbp)  # imm = 0x5B75273F
	jne	.LBB150_5
.LBB150_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB150_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB150_4
.Lfunc_end150:
	.size	writeChromaIntraPredMode.109, .Lfunc_end150-writeChromaIntraPredMode.109
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.110  # -- Begin function predict_nnz_chroma.110
	.p2align	4, 0x90
	.type	predict_nnz_chroma.110,@function
predict_nnz_chroma.110:                 # @predict_nnz_chroma.110
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$1016607080, -64(%rbp)  # imm = 0x3C983168
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -56(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB151_14
# %bb.1:                                # %if.then
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB151_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB151_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB151_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB151_5:                              # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB151_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB151_7:                              # %if.end19
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB151_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB151_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB151_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB151_11:                             # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB151_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB151_13:                             # %if.end57
	jmp	.LBB151_27
.LBB151_14:                             # %if.else
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB151_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB151_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB151_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB151_18:                             # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB151_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB151_20:                             # %if.end90
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB151_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB151_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB151_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB151_24:                             # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB151_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB151_26:                             # %if.end124
	jmp	.LBB151_27
.LBB151_27:                             # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB151_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB151_29:                             # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$1016607080, -64(%rbp)  # imm = 0x3C983168
	jne	.LBB151_31
.LBB151_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB151_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB151_30
.Lfunc_end151:
	.size	predict_nnz_chroma.110, .Lfunc_end151-predict_nnz_chroma.110
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction.111 # -- Begin function IntraChromaPrediction.111
	.p2align	4, 0x90
	.type	IntraChromaPrediction.111,@function
IntraChromaPrediction.111:              # @IntraChromaPrediction.111
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$1068237035, -164(%rbp) # imm = 0x3FAC00EB
	movq	%rdi, -184(%rbp)
	movq	%rsi, -176(%rbp)
	movq	%rdx, -192(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -116(%rbp)
	movl	$0, -132(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -112(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB152_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB152_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB152_1 Depth=1
	movl	-116(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB152_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB152_1
.LBB152_4:                              # %for.end
	movl	-116(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB152_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB152_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB152_8
.LBB152_7:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB152_8
.LBB152_8:                              # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB152_9:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB152_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB152_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB152_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB152_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB152_13
.LBB152_12:                             # %cond.false32
                                        #   in Loop: Header=BB152_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB152_13
.LBB152_13:                             # %cond.end33
                                        #   in Loop: Header=BB152_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB152_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB152_9
.LBB152_15:                             # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB152_16:                             # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB152_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB152_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB152_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB152_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB152_20
.LBB152_19:                             # %cond.false57
                                        #   in Loop: Header=BB152_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB152_20
.LBB152_20:                             # %cond.end58
                                        #   in Loop: Header=BB152_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB152_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB152_16
.LBB152_22:                             # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB152_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB152_25
.LBB152_24:                             # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB152_25
.LBB152_25:                             # %cond.end75
	movl	%eax, -92(%rbp)
.LBB152_26:                             # %if.end
	cmpq	$0, -184(%rbp)
	je	.LBB152_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB152_28:                             # %if.end79
	cmpq	$0, -176(%rbp)
	je	.LBB152_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB152_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB152_31:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB152_32:                             # %if.end86
	cmpq	$0, -192(%rbp)
	je	.LBB152_34
# %bb.33:                               # %if.then88
	movl	-92(%rbp), %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB152_34:                             # %if.end89
	movl	$0, -24(%rbp)
.LBB152_35:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB152_37 Depth 2
                                        #       Child Loop BB152_39 Depth 3
                                        #         Child Loop BB152_104 Depth 4
                                        #         Child Loop BB152_110 Depth 4
                                        #         Child Loop BB152_85 Depth 4
                                        #         Child Loop BB152_91 Depth 4
                                        #         Child Loop BB152_66 Depth 4
                                        #         Child Loop BB152_72 Depth 4
                                        #         Child Loop BB152_44 Depth 4
                                        #         Child Loop BB152_50 Depth 4
                                        #         Child Loop BB152_125 Depth 4
                                        #           Child Loop BB152_127 Depth 5
                                        #     Child Loop BB152_138 Depth 2
                                        #     Child Loop BB152_142 Depth 2
                                        #       Child Loop BB152_144 Depth 3
                                        #     Child Loop BB152_153 Depth 2
                                        #     Child Loop BB152_157 Depth 2
                                        #       Child Loop BB152_159 Depth 3
                                        #     Child Loop BB152_170 Depth 2
                                        #     Child Loop BB152_174 Depth 2
                                        #     Child Loop BB152_178 Depth 2
                                        #       Child Loop BB152_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB152_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB152_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -84(%rbp)
.LBB152_37:                             # %for.cond95
                                        #   Parent Loop BB152_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB152_39 Depth 3
                                        #         Child Loop BB152_104 Depth 4
                                        #         Child Loop BB152_110 Depth 4
                                        #         Child Loop BB152_85 Depth 4
                                        #         Child Loop BB152_91 Depth 4
                                        #         Child Loop BB152_66 Depth 4
                                        #         Child Loop BB152_72 Depth 4
                                        #         Child Loop BB152_44 Depth 4
                                        #         Child Loop BB152_50 Depth 4
                                        #         Child Loop BB152_125 Depth 4
                                        #           Child Loop BB152_127 Depth 5
	movl	-84(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB152_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB152_37 Depth=2
	movl	$0, -88(%rbp)
.LBB152_39:                             # %for.cond99
                                        #   Parent Loop BB152_35 Depth=1
                                        #     Parent Loop BB152_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB152_104 Depth 4
                                        #         Child Loop BB152_110 Depth 4
                                        #         Child Loop BB152_85 Depth 4
                                        #         Child Loop BB152_91 Depth 4
                                        #         Child Loop BB152_66 Depth 4
                                        #         Child Loop BB152_72 Depth 4
                                        #         Child Loop BB152_44 Depth 4
                                        #         Child Loop BB152_50 Depth 4
                                        #         Child Loop BB152_125 Depth 4
                                        #           Child Loop BB152_127 Depth 5
	cmpl	$4, -88(%rbp)
	jge	.LBB152_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB152_39 Depth=3
	movslq	-112(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movslq	-112(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -60(%rbp)
	movslq	-112(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-84(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-88(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB152_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB152_39 Depth=3
	movq	.LJTI152_0(,%rax,8), %rax
	jmpq	*%rax
.LBB152_42:                             # %sw.bb
                                        #   in Loop: Header=BB152_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB152_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB152_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB152_44:                             # %for.cond124
                                        #   Parent Loop BB152_35 Depth=1
                                        #     Parent Loop BB152_37 Depth=2
                                        #       Parent Loop BB152_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB152_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB152_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB152_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB152_44
.LBB152_47:                             # %for.end138
                                        #   in Loop: Header=BB152_39 Depth=3
	jmp	.LBB152_48
.LBB152_48:                             # %if.end139
                                        #   in Loop: Header=BB152_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB152_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB152_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB152_50:                             # %for.cond143
                                        #   Parent Loop BB152_35 Depth=1
                                        #     Parent Loop BB152_37 Depth=2
                                        #       Parent Loop BB152_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB152_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB152_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB152_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB152_50
.LBB152_53:                             # %for.end162
                                        #   in Loop: Header=BB152_39 Depth=3
	jmp	.LBB152_54
.LBB152_54:                             # %if.end163
                                        #   in Loop: Header=BB152_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB152_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB152_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB152_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB152_39 Depth=3
	movl	-60(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB152_63
.LBB152_57:                             # %if.else
                                        #   in Loop: Header=BB152_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB152_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB152_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB152_62
.LBB152_59:                             # %if.else174
                                        #   in Loop: Header=BB152_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB152_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB152_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB152_61:                             # %if.end180
                                        #   in Loop: Header=BB152_39 Depth=3
	jmp	.LBB152_62
.LBB152_62:                             # %if.end181
                                        #   in Loop: Header=BB152_39 Depth=3
	jmp	.LBB152_63
.LBB152_63:                             # %if.end182
                                        #   in Loop: Header=BB152_39 Depth=3
	jmp	.LBB152_124
.LBB152_64:                             # %sw.bb183
                                        #   in Loop: Header=BB152_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB152_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB152_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB152_66:                             # %for.cond186
                                        #   Parent Loop BB152_35 Depth=1
                                        #     Parent Loop BB152_37 Depth=2
                                        #       Parent Loop BB152_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB152_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB152_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB152_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB152_66
.LBB152_69:                             # %for.end202
                                        #   in Loop: Header=BB152_39 Depth=3
	jmp	.LBB152_77
.LBB152_70:                             # %if.else203
                                        #   in Loop: Header=BB152_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB152_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB152_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB152_72:                             # %for.cond207
                                        #   Parent Loop BB152_35 Depth=1
                                        #     Parent Loop BB152_37 Depth=2
                                        #       Parent Loop BB152_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB152_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB152_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB152_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB152_72
.LBB152_75:                             # %for.end226
                                        #   in Loop: Header=BB152_39 Depth=3
	jmp	.LBB152_76
.LBB152_76:                             # %if.end227
                                        #   in Loop: Header=BB152_39 Depth=3
	jmp	.LBB152_77
.LBB152_77:                             # %if.end228
                                        #   in Loop: Header=BB152_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB152_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB152_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB152_82
.LBB152_79:                             # %if.else233
                                        #   in Loop: Header=BB152_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB152_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB152_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB152_81:                             # %if.end239
                                        #   in Loop: Header=BB152_39 Depth=3
	jmp	.LBB152_82
.LBB152_82:                             # %if.end240
                                        #   in Loop: Header=BB152_39 Depth=3
	jmp	.LBB152_124
.LBB152_83:                             # %sw.bb241
                                        #   in Loop: Header=BB152_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB152_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB152_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB152_85:                             # %for.cond245
                                        #   Parent Loop BB152_35 Depth=1
                                        #     Parent Loop BB152_37 Depth=2
                                        #       Parent Loop BB152_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB152_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB152_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB152_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB152_85
.LBB152_88:                             # %for.end264
                                        #   in Loop: Header=BB152_39 Depth=3
	jmp	.LBB152_96
.LBB152_89:                             # %if.else265
                                        #   in Loop: Header=BB152_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB152_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB152_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB152_91:                             # %for.cond268
                                        #   Parent Loop BB152_35 Depth=1
                                        #     Parent Loop BB152_37 Depth=2
                                        #       Parent Loop BB152_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB152_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB152_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB152_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB152_91
.LBB152_94:                             # %for.end284
                                        #   in Loop: Header=BB152_39 Depth=3
	jmp	.LBB152_95
.LBB152_95:                             # %if.end285
                                        #   in Loop: Header=BB152_39 Depth=3
	jmp	.LBB152_96
.LBB152_96:                             # %if.end286
                                        #   in Loop: Header=BB152_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB152_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB152_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB152_101
.LBB152_98:                             # %if.else292
                                        #   in Loop: Header=BB152_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB152_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB152_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB152_100:                            # %if.end297
                                        #   in Loop: Header=BB152_39 Depth=3
	jmp	.LBB152_101
.LBB152_101:                            # %if.end298
                                        #   in Loop: Header=BB152_39 Depth=3
	jmp	.LBB152_124
.LBB152_102:                            # %sw.bb299
                                        #   in Loop: Header=BB152_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB152_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB152_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB152_104:                            # %for.cond302
                                        #   Parent Loop BB152_35 Depth=1
                                        #     Parent Loop BB152_37 Depth=2
                                        #       Parent Loop BB152_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB152_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB152_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB152_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB152_104
.LBB152_107:                            # %for.end318
                                        #   in Loop: Header=BB152_39 Depth=3
	jmp	.LBB152_108
.LBB152_108:                            # %if.end319
                                        #   in Loop: Header=BB152_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB152_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB152_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB152_110:                            # %for.cond323
                                        #   Parent Loop BB152_35 Depth=1
                                        #     Parent Loop BB152_37 Depth=2
                                        #       Parent Loop BB152_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB152_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB152_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB152_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB152_110
.LBB152_113:                            # %for.end342
                                        #   in Loop: Header=BB152_39 Depth=3
	jmp	.LBB152_114
.LBB152_114:                            # %if.end343
                                        #   in Loop: Header=BB152_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB152_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB152_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB152_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB152_39 Depth=3
	movl	-68(%rbp), %eax
	addl	-72(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB152_123
.LBB152_117:                            # %if.else352
                                        #   in Loop: Header=BB152_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB152_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB152_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB152_122
.LBB152_119:                            # %if.else357
                                        #   in Loop: Header=BB152_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB152_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB152_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB152_121:                            # %if.end363
                                        #   in Loop: Header=BB152_39 Depth=3
	jmp	.LBB152_122
.LBB152_122:                            # %if.end364
                                        #   in Loop: Header=BB152_39 Depth=3
	jmp	.LBB152_123
.LBB152_123:                            # %if.end365
                                        #   in Loop: Header=BB152_39 Depth=3
	jmp	.LBB152_124
.LBB152_124:                            # %sw.epilog
                                        #   in Loop: Header=BB152_39 Depth=3
	movl	-48(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB152_125:                            # %for.cond366
                                        #   Parent Loop BB152_35 Depth=1
                                        #     Parent Loop BB152_37 Depth=2
                                        #       Parent Loop BB152_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB152_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB152_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB152_125 Depth=4
	movl	-40(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB152_127:                            # %for.cond371
                                        #   Parent Loop BB152_35 Depth=1
                                        #     Parent Loop BB152_37 Depth=2
                                        #       Parent Loop BB152_39 Depth=3
                                        #         Parent Loop BB152_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB152_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB152_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB152_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB152_127
.LBB152_130:                            # %for.end386
                                        #   in Loop: Header=BB152_125 Depth=4
	jmp	.LBB152_131
.LBB152_131:                            # %for.inc387
                                        #   in Loop: Header=BB152_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB152_125
.LBB152_132:                            # %for.end389
                                        #   in Loop: Header=BB152_39 Depth=3
	jmp	.LBB152_133
.LBB152_133:                            # %for.inc390
                                        #   in Loop: Header=BB152_39 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB152_39
.LBB152_134:                            # %for.end392
                                        #   in Loop: Header=BB152_37 Depth=2
	jmp	.LBB152_135
.LBB152_135:                            # %for.inc393
                                        #   in Loop: Header=BB152_37 Depth=2
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB152_37
.LBB152_136:                            # %for.end395
                                        #   in Loop: Header=BB152_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB152_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB152_35 Depth=1
	movl	$0, -4(%rbp)
.LBB152_138:                            # %for.cond398
                                        #   Parent Loop BB152_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB152_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB152_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB152_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB152_138
.LBB152_141:                            # %for.end414
                                        #   in Loop: Header=BB152_35 Depth=1
	movl	$0, -4(%rbp)
.LBB152_142:                            # %for.cond415
                                        #   Parent Loop BB152_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB152_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB152_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB152_142 Depth=2
	movl	$0, -8(%rbp)
.LBB152_144:                            # %for.cond419
                                        #   Parent Loop BB152_35 Depth=1
                                        #     Parent Loop BB152_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB152_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB152_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB152_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB152_144
.LBB152_147:                            # %for.end436
                                        #   in Loop: Header=BB152_142 Depth=2
	jmp	.LBB152_148
.LBB152_148:                            # %for.inc437
                                        #   in Loop: Header=BB152_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB152_142
.LBB152_149:                            # %for.end439
                                        #   in Loop: Header=BB152_35 Depth=1
	jmp	.LBB152_150
.LBB152_150:                            # %if.end440
                                        #   in Loop: Header=BB152_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB152_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB152_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB152_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB152_35 Depth=1
	movl	$0, -4(%rbp)
.LBB152_153:                            # %for.cond447
                                        #   Parent Loop BB152_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB152_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB152_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB152_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB152_153
.LBB152_156:                            # %for.end468
                                        #   in Loop: Header=BB152_35 Depth=1
	movl	$0, -4(%rbp)
.LBB152_157:                            # %for.cond469
                                        #   Parent Loop BB152_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB152_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB152_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB152_157 Depth=2
	movl	$0, -8(%rbp)
.LBB152_159:                            # %for.cond473
                                        #   Parent Loop BB152_35 Depth=1
                                        #     Parent Loop BB152_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB152_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB152_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB152_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB152_159
.LBB152_162:                            # %for.end490
                                        #   in Loop: Header=BB152_157 Depth=2
	jmp	.LBB152_163
.LBB152_163:                            # %for.inc491
                                        #   in Loop: Header=BB152_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB152_157
.LBB152_164:                            # %for.end493
                                        #   in Loop: Header=BB152_35 Depth=1
	jmp	.LBB152_165
.LBB152_165:                            # %if.end494
                                        #   in Loop: Header=BB152_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB152_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB152_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB152_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB152_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB152_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB152_35 Depth=1
	cmpl	$0, -92(%rbp)
	je	.LBB152_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB152_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -4(%rbp)
.LBB152_170:                            # %for.cond519
                                        #   Parent Loop BB152_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB152_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB152_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-120(%rbp), %ecx
	movl	%ecx, -120(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB152_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB152_170
.LBB152_173:                            # %for.end540
                                        #   in Loop: Header=BB152_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -124(%rbp)
	movl	$0, -4(%rbp)
.LBB152_174:                            # %for.cond556
                                        #   Parent Loop BB152_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB152_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB152_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-124(%rbp), %ecx
	movl	%ecx, -124(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB152_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB152_174
.LBB152_177:                            # %for.end577
                                        #   in Loop: Header=BB152_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-120(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -108(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-124(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -104(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-272(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-336(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -8(%rbp)
.LBB152_178:                            # %for.cond606
                                        #   Parent Loop BB152_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB152_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB152_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB152_178 Depth=2
	movl	$0, -4(%rbp)
.LBB152_180:                            # %for.cond610
                                        #   Parent Loop BB152_35 Depth=1
                                        #     Parent Loop BB152_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB152_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB152_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-96(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-108(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-104(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB152_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB152_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB152_184
.LBB152_183:                            # %cond.false630
                                        #   in Loop: Header=BB152_180 Depth=3
	movl	-96(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-108(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-104(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB152_184:                            # %cond.end643
                                        #   in Loop: Header=BB152_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB152_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB152_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB152_190
.LBB152_186:                            # %cond.false648
                                        #   in Loop: Header=BB152_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-96(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-108(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-104(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB152_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB152_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB152_189
.LBB152_188:                            # %cond.false666
                                        #   in Loop: Header=BB152_180 Depth=3
	movl	-96(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-108(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-104(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB152_189:                            # %cond.end679
                                        #   in Loop: Header=BB152_180 Depth=3
.LBB152_190:                            # %cond.end681
                                        #   in Loop: Header=BB152_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB152_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB152_180
.LBB152_192:                            # %for.end694
                                        #   in Loop: Header=BB152_178 Depth=2
	jmp	.LBB152_193
.LBB152_193:                            # %for.inc695
                                        #   in Loop: Header=BB152_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB152_178
.LBB152_194:                            # %for.end697
                                        #   in Loop: Header=BB152_35 Depth=1
	jmp	.LBB152_195
.LBB152_195:                            # %if.end698
                                        #   in Loop: Header=BB152_35 Depth=1
	jmp	.LBB152_196
.LBB152_196:                            # %for.inc699
                                        #   in Loop: Header=BB152_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB152_35
.LBB152_197:                            # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB152_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -136(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB152_199:                            # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB152_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB152_199 Depth=1
	movl	-116(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB152_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB152_199
.LBB152_202:                            # %for.end712
	movl	$0, -44(%rbp)
.LBB152_203:                            # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB152_219 Depth 2
                                        #       Child Loop BB152_221 Depth 3
                                        #         Child Loop BB152_223 Depth 4
                                        #           Child Loop BB152_225 Depth 5
                                        #             Child Loop BB152_227 Depth 6
	cmpl	$3, -44(%rbp)
	jg	.LBB152_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB152_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB152_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB152_203 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB152_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB152_203 Depth=1
	jmp	.LBB152_241
.LBB152_207:                            # %if.end723
                                        #   in Loop: Header=BB152_203 Depth=1
	cmpl	$2, -44(%rbp)
	jne	.LBB152_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB152_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB152_217
.LBB152_209:                            # %lor.lhs.false
                                        #   in Loop: Header=BB152_203 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB152_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB152_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB152_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB152_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB152_217
.LBB152_212:                            # %lor.lhs.false736
                                        #   in Loop: Header=BB152_203 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB152_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB152_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB152_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB152_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB152_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB152_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB152_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB152_203 Depth=1
	cmpl	$0, -92(%rbp)
	jne	.LBB152_218
.LBB152_217:                            # %if.then749
                                        #   in Loop: Header=BB152_203 Depth=1
	jmp	.LBB152_241
.LBB152_218:                            # %if.end750
                                        #   in Loop: Header=BB152_203 Depth=1
	movl	$0, -100(%rbp)
	movl	$0, -24(%rbp)
.LBB152_219:                            # %for.cond751
                                        #   Parent Loop BB152_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB152_221 Depth 3
                                        #         Child Loop BB152_223 Depth 4
                                        #           Child Loop BB152_225 Depth 5
                                        #             Child Loop BB152_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB152_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB152_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -48(%rbp)
.LBB152_221:                            # %for.cond757
                                        #   Parent Loop BB152_203 Depth=1
                                        #     Parent Loop BB152_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB152_223 Depth 4
                                        #           Child Loop BB152_225 Depth 5
                                        #             Child Loop BB152_227 Depth 6
	movl	-48(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB152_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB152_221 Depth=3
	movl	$0, -40(%rbp)
.LBB152_223:                            # %for.cond761
                                        #   Parent Loop BB152_203 Depth=1
                                        #     Parent Loop BB152_219 Depth=2
                                        #       Parent Loop BB152_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB152_225 Depth 5
                                        #             Child Loop BB152_227 Depth 6
	movl	-40(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB152_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB152_223 Depth=4
	movl	$0, -128(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB152_225:                            # %for.cond765
                                        #   Parent Loop BB152_203 Depth=1
                                        #     Parent Loop BB152_219 Depth=2
                                        #       Parent Loop BB152_221 Depth=3
                                        #         Parent Loop BB152_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB152_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB152_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB152_225 Depth=5
	movl	-40(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB152_227:                            # %for.cond770
                                        #   Parent Loop BB152_203 Depth=1
                                        #     Parent Loop BB152_219 Depth=2
                                        #       Parent Loop BB152_221 Depth=3
                                        #         Parent Loop BB152_223 Depth=4
                                        #           Parent Loop BB152_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB152_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB152_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-128(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB152_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -128(%rbp)
	jmp	.LBB152_227
.LBB152_230:                            # %for.end803
                                        #   in Loop: Header=BB152_225 Depth=5
	jmp	.LBB152_231
.LBB152_231:                            # %for.inc804
                                        #   in Loop: Header=BB152_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB152_225
.LBB152_232:                            # %for.end806
                                        #   in Loop: Header=BB152_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-100(%rbp), %eax
	movl	%eax, -100(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB152_223 Depth=4
	movl	-40(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB152_223
.LBB152_234:                            # %for.end810
                                        #   in Loop: Header=BB152_221 Depth=3
	jmp	.LBB152_235
.LBB152_235:                            # %for.inc811
                                        #   in Loop: Header=BB152_221 Depth=3
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB152_221
.LBB152_236:                            # %for.end813
                                        #   in Loop: Header=BB152_219 Depth=2
	jmp	.LBB152_237
.LBB152_237:                            # %for.inc814
                                        #   in Loop: Header=BB152_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB152_219
.LBB152_238:                            # %for.end816
                                        #   in Loop: Header=BB152_203 Depth=1
	movl	-100(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB152_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB152_203 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-100(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB152_240:                            # %if.end820
                                        #   in Loop: Header=BB152_203 Depth=1
	jmp	.LBB152_241
.LBB152_241:                            # %for.inc821
                                        #   in Loop: Header=BB152_203 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB152_203
.LBB152_242:                            # %for.end823
	movl	-132(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB152_243:                            # %if.end824
	cmpl	$1068237035, -164(%rbp) # imm = 0x3FAC00EB
	jne	.LBB152_245
.LBB152_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB152_245:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB152_244
.Lfunc_end152:
	.size	IntraChromaPrediction.111, .Lfunc_end152-IntraChromaPrediction.111
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI152_0:
	.quad	.LBB152_42
	.quad	.LBB152_64
	.quad	.LBB152_83
	.quad	.LBB152_102
                                        # -- End function
	.text
	.globl	writeReferenceFrame.112 # -- Begin function writeReferenceFrame.112
	.p2align	4, 0x90
	.type	writeReferenceFrame.112,@function
writeReferenceFrame.112:                # @writeReferenceFrame.112
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1364512212, -80(%rbp)  # imm = 0x5154CDD4
	movl	%edi, -72(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -44(%rbp)
	movl	%r8d, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB153_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB153_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB153_4
.LBB153_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB153_4
.LBB153_4:                              # %cond.end
	movl	%ecx, -40(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB153_6
# %bb.5:                                # %cond.true10
	movl	-40(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB153_7
.LBB153_6:                              # %cond.false13
	movl	-40(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB153_7:                              # %cond.end17
	movl	%eax, -48(%rbp)
	movl	$0, -52(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB153_9
# %bb.8:                                # %if.then
	movl	$0, -36(%rbp)
	jmp	.LBB153_18
.LBB153_9:                              # %if.end
	cmpl	$2, -48(%rbp)
	jne	.LBB153_11
# %bb.10:                               # %if.then20
	movl	$1, -52(%rbp)
.LBB153_11:                             # %if.end21
	movl	-68(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB153_16
# %bb.12:                               # %if.then28
	cmpl	$0, -52(%rbp)
	je	.LBB153_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB153_15
.LBB153_14:                             # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB153_15:                             # %if.end33
	jmp	.LBB153_17
.LBB153_16:                             # %if.else34
	movl	-72(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-76(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-84(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-44(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB153_17:                             # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB153_18:                             # %return
	movl	-36(%rbp), %ebx
	cmpl	$1364512212, -80(%rbp)  # imm = 0x5154CDD4
	jne	.LBB153_20
.LBB153_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB153_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB153_19
.Lfunc_end153:
	.size	writeReferenceFrame.112, .Lfunc_end153-writeReferenceFrame.112
	.cfi_endproc
                                        # -- End function
	.globl	B8Mode2Value.113        # -- Begin function B8Mode2Value.113
	.p2align	4, 0x90
	.type	B8Mode2Value.113,@function
B8Mode2Value.113:                       # @B8Mode2Value.113
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1045231715, -24(%rbp)  # imm = 0x3E4CF863
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB154_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB154_3
.LBB154_2:                              # %if.else
	movslq	-12(%rbp), %rax
	movl	B8Mode2Value.b8start(,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	B8Mode2Value.b8inc(,%rcx,4), %ecx
	imull	-20(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
.LBB154_3:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$1045231715, -24(%rbp)  # imm = 0x3E4CF863
	jne	.LBB154_5
.LBB154_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB154_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB154_4
.Lfunc_end154:
	.size	B8Mode2Value.113, .Lfunc_end154-B8Mode2Value.113
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit.114 # -- Begin function write_terminating_bit.114
	.p2align	4, 0x90
	.type	write_terminating_bit.114,@function
write_terminating_bit.114:              # @write_terminating_bit.114
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1575574398, -8(%rbp)   # imm = 0x5DE95B7E
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$1575574398, -8(%rbp)   # imm = 0x5DE95B7E
	jne	.LBB155_2
.LBB155_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB155_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB155_1
.Lfunc_end155:
	.size	write_terminating_bit.114, .Lfunc_end155-write_terminating_bit.114
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4.115 # -- Begin function OneComponentChromaPrediction4x4.115
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.115,@function
OneComponentChromaPrediction4x4.115:    # @OneComponentChromaPrediction4x4.115
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$615899587, -116(%rbp)  # imm = 0x24B5E1C3
	movq	%rdi, -128(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -80(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -64(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-4(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -108(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB156_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB156_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -112(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB156_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB156_5
# %bb.4:                                # %if.then7
	movl	$4, -52(%rbp)
	jmp	.LBB156_6
.LBB156_5:                              # %if.else
	movl	$2, -52(%rbp)
.LBB156_6:                              # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB156_8
.LBB156_7:                              # %if.else10
	movl	$0, -52(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB156_8:                              # %if.end13
	movl	-64(%rbp), %eax
	addl	-52(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -32(%rbp)
.LBB156_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB156_11 Depth 2
	cmpl	$4, -32(%rbp)
	jge	.LBB156_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB156_9 Depth=1
	movl	$0, -28(%rbp)
.LBB156_11:                             # %for.cond20
                                        #   Parent Loop BB156_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -28(%rbp)
	jge	.LBB156_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB156_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-28(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-32(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -136(%rbp)
	movl	-28(%rbp), %eax
	addl	-84(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-136(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-32(%rbp), %eax
	addl	-80(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-136(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-144(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB156_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB156_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB156_15
.LBB156_14:                             # %cond.false
                                        #   in Loop: Header=BB156_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB156_15:                             # %cond.end
                                        #   in Loop: Header=BB156_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB156_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB156_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB156_21
.LBB156_17:                             # %cond.false65
                                        #   in Loop: Header=BB156_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB156_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB156_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB156_20
.LBB156_19:                             # %cond.false74
                                        #   in Loop: Header=BB156_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB156_20:                             # %cond.end76
                                        #   in Loop: Header=BB156_11 Depth=2
.LBB156_21:                             # %cond.end78
                                        #   in Loop: Header=BB156_11 Depth=2
	movl	%eax, -88(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB156_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB156_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB156_24
.LBB156_23:                             # %cond.false84
                                        #   in Loop: Header=BB156_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB156_24:                             # %cond.end86
                                        #   in Loop: Header=BB156_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB156_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB156_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB156_30
.LBB156_26:                             # %cond.false91
                                        #   in Loop: Header=BB156_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB156_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB156_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB156_29
.LBB156_28:                             # %cond.false96
                                        #   in Loop: Header=BB156_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB156_29:                             # %cond.end98
                                        #   in Loop: Header=BB156_11 Depth=2
.LBB156_30:                             # %cond.end100
                                        #   in Loop: Header=BB156_11 Depth=2
	movl	%eax, -92(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB156_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB156_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB156_33
.LBB156_32:                             # %cond.false111
                                        #   in Loop: Header=BB156_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB156_33:                             # %cond.end114
                                        #   in Loop: Header=BB156_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB156_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB156_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB156_39
.LBB156_35:                             # %cond.false119
                                        #   in Loop: Header=BB156_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB156_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB156_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB156_38
.LBB156_37:                             # %cond.false129
                                        #   in Loop: Header=BB156_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB156_38:                             # %cond.end132
                                        #   in Loop: Header=BB156_11 Depth=2
.LBB156_39:                             # %cond.end134
                                        #   in Loop: Header=BB156_11 Depth=2
	movl	%eax, -68(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB156_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB156_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB156_42
.LBB156_41:                             # %cond.false141
                                        #   in Loop: Header=BB156_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB156_42:                             # %cond.end144
                                        #   in Loop: Header=BB156_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB156_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB156_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB156_48
.LBB156_44:                             # %cond.false149
                                        #   in Loop: Header=BB156_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB156_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB156_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB156_47
.LBB156_46:                             # %cond.false155
                                        #   in Loop: Header=BB156_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB156_47:                             # %cond.end158
                                        #   in Loop: Header=BB156_11 Depth=2
.LBB156_48:                             # %cond.end160
                                        #   in Loop: Header=BB156_11 Depth=2
	movl	%eax, -72(%rbp)
	movl	-16(%rbp), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-4(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-12(%rbp), %eax
	andl	-36(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-8(%rbp), %eax
	subl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-76(%rbp), %eax
	imull	-56(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-88(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-44(%rbp), %ecx
	imull	-56(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-92(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-68(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-76(%rbp), %ecx
	imull	-48(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-72(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-88(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-44(%rbp), %ecx
	imull	-48(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-72(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-68(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-108(%rbp), %eax
	cltd
	idivl	-60(%rbp)
	movq	-128(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -128(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB156_11 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB156_11
.LBB156_50:                             # %for.end
                                        #   in Loop: Header=BB156_9 Depth=1
	jmp	.LBB156_51
.LBB156_51:                             # %for.inc198
                                        #   in Loop: Header=BB156_9 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB156_9
.LBB156_52:                             # %for.end200
	cmpl	$615899587, -116(%rbp)  # imm = 0x24B5E1C3
	jne	.LBB156_54
.LBB156_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB156_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB156_53
.Lfunc_end156:
	.size	OneComponentChromaPrediction4x4.115, .Lfunc_end156-OneComponentChromaPrediction4x4.115
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi.116 # -- Begin function LumaPrediction4x4Bi.116
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.116,@function
LumaPrediction4x4Bi.116:                # @LumaPrediction4x4Bi.116
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$1004019154, -76(%rbp)  # imm = 0x3BD81DD2
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -80(%rbp)
	movl	%r8d, -84(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -60(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB157_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB157_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB157_6
.LBB157_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB157_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB157_5:                              # %land.end
.LBB157_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB157_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB157_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB157_10
.LBB157_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB157_10
.LBB157_10:                             # %cond.end
	movl	%ecx, -52(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB157_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB157_13
.LBB157_12:                             # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB157_13:                             # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB157_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB157_16
.LBB157_15:                             # %if.then
	movl	-64(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-80(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-52(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB157_16:                             # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB157_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB157_19
.LBB157_18:                             # %if.then39
	movl	-64(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-52(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB157_19:                             # %if.end52
	cmpl	$0, -72(%rbp)
	je	.LBB157_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB157_30
# %bb.21:                               # %if.then56
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB157_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB157_24 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB157_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB157_22 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB157_24:                             # %for.cond58
                                        #   Parent Loop BB157_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB157_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB157_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB157_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB157_24
.LBB157_27:                             # %for.end
                                        #   in Loop: Header=BB157_22 Depth=1
	jmp	.LBB157_28
.LBB157_28:                             # %for.inc96
                                        #   in Loop: Header=BB157_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB157_22
.LBB157_29:                             # %for.end98
	jmp	.LBB157_50
.LBB157_30:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB157_40
# %bb.31:                               # %if.then101
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB157_32:                             # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB157_34 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB157_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB157_32 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB157_34:                             # %for.cond106
                                        #   Parent Loop BB157_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB157_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB157_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB157_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB157_34
.LBB157_37:                             # %for.end132
                                        #   in Loop: Header=BB157_32 Depth=1
	jmp	.LBB157_38
.LBB157_38:                             # %for.inc133
                                        #   in Loop: Header=BB157_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB157_32
.LBB157_39:                             # %for.end135
	jmp	.LBB157_49
.LBB157_40:                             # %if.else136
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB157_41:                             # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB157_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB157_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB157_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB157_43:                             # %for.cond141
                                        #   Parent Loop BB157_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB157_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB157_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB157_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB157_43
.LBB157_46:                             # %for.end167
                                        #   in Loop: Header=BB157_41 Depth=1
	jmp	.LBB157_47
.LBB157_47:                             # %for.inc168
                                        #   in Loop: Header=BB157_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB157_41
.LBB157_48:                             # %for.end170
	jmp	.LBB157_49
.LBB157_49:                             # %if.end171
	jmp	.LBB157_50
.LBB157_50:                             # %if.end172
	jmp	.LBB157_82
.LBB157_51:                             # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB157_61
# %bb.52:                               # %if.then176
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB157_53:                             # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB157_55 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB157_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB157_53 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB157_55:                             # %for.cond181
                                        #   Parent Loop BB157_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB157_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB157_55 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB157_55 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB157_55
.LBB157_58:                             # %for.end197
                                        #   in Loop: Header=BB157_53 Depth=1
	jmp	.LBB157_59
.LBB157_59:                             # %for.inc198
                                        #   in Loop: Header=BB157_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB157_53
.LBB157_60:                             # %for.end200
	jmp	.LBB157_81
.LBB157_61:                             # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB157_71
# %bb.62:                               # %if.then204
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB157_63:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB157_65 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB157_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB157_63 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB157_65:                             # %for.cond209
                                        #   Parent Loop BB157_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB157_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB157_65 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB157_65 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB157_65
.LBB157_68:                             # %for.end222
                                        #   in Loop: Header=BB157_63 Depth=1
	jmp	.LBB157_69
.LBB157_69:                             # %for.inc223
                                        #   in Loop: Header=BB157_63 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB157_63
.LBB157_70:                             # %for.end225
	jmp	.LBB157_80
.LBB157_71:                             # %if.else226
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB157_72:                             # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB157_74 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB157_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB157_72 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB157_74:                             # %for.cond231
                                        #   Parent Loop BB157_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB157_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB157_74 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB157_74 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB157_74
.LBB157_77:                             # %for.end244
                                        #   in Loop: Header=BB157_72 Depth=1
	jmp	.LBB157_78
.LBB157_78:                             # %for.inc245
                                        #   in Loop: Header=BB157_72 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB157_72
.LBB157_79:                             # %for.end247
	jmp	.LBB157_80
.LBB157_80:                             # %if.end248
	jmp	.LBB157_81
.LBB157_81:                             # %if.end249
	jmp	.LBB157_82
.LBB157_82:                             # %if.end250
	cmpl	$1004019154, -76(%rbp)  # imm = 0x3BD81DD2
	jne	.LBB157_84
.LBB157_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB157_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB157_83
.Lfunc_end157:
	.size	LumaPrediction4x4Bi.116, .Lfunc_end157-LumaPrediction4x4Bi.116
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.117 # -- Begin function write_one_macroblock.117
	.p2align	4, 0x90
	.type	write_one_macroblock.117,@function
write_one_macroblock.117:               # @write_one_macroblock.117
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2023894966, -32(%rbp)  # imm = 0x78A22FB6
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB158_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB158_2:                              # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB158_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB158_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB158_6
.LBB158_5:                              # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB158_6:                              # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB158_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB158_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -28(%rbp)
	je	.LBB158_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB158_10:                             # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB158_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB158_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB158_22
.LBB158_13:                             # %if.then22
	movl	$0, -24(%rbp)
.LBB158_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB158_16 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB158_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB158_14 Depth=1
	movl	$0, -20(%rbp)
.LBB158_16:                             # %for.cond24
                                        #   Parent Loop BB158_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB158_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB158_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB158_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB158_16
.LBB158_19:                             # %for.end
                                        #   in Loop: Header=BB158_14 Depth=1
	jmp	.LBB158_20
.LBB158_20:                             # %for.inc35
                                        #   in Loop: Header=BB158_14 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB158_14
.LBB158_21:                             # %for.end37
	jmp	.LBB158_22
.LBB158_22:                             # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB158_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB158_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB158_30
.LBB158_25:                             # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB158_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB158_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB158_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB158_29:                             # %if.end59
	jmp	.LBB158_30
.LBB158_30:                             # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB158_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB158_32:                             # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$2023894966, -32(%rbp)  # imm = 0x78A22FB6
	jne	.LBB158_34
.LBB158_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB158_34:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB158_33
.Lfunc_end158:
	.size	write_one_macroblock.117, .Lfunc_end158-write_one_macroblock.117
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame.118 # -- Begin function writeReferenceFrame.118
	.p2align	4, 0x90
	.type	writeReferenceFrame.118,@function
writeReferenceFrame.118:                # @writeReferenceFrame.118
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$323064776, -76(%rbp)   # imm = 0x134193C8
	movl	%edi, -72(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -48(%rbp)
	movl	%r8d, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB159_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB159_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB159_4
.LBB159_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB159_4
.LBB159_4:                              # %cond.end
	movl	%ecx, -36(%rbp)
	cmpl	$0, -48(%rbp)
	je	.LBB159_6
# %bb.5:                                # %cond.true10
	movl	-36(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB159_7
.LBB159_6:                              # %cond.false13
	movl	-36(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB159_7:                              # %cond.end17
	movl	%eax, -40(%rbp)
	movl	$0, -52(%rbp)
	cmpl	$1, -40(%rbp)
	jne	.LBB159_9
# %bb.8:                                # %if.then
	movl	$0, -44(%rbp)
	jmp	.LBB159_18
.LBB159_9:                              # %if.end
	cmpl	$2, -40(%rbp)
	jne	.LBB159_11
# %bb.10:                               # %if.then20
	movl	$1, -52(%rbp)
.LBB159_11:                             # %if.end21
	movl	-68(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB159_16
# %bb.12:                               # %if.then28
	cmpl	$0, -52(%rbp)
	je	.LBB159_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB159_15
.LBB159_14:                             # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB159_15:                             # %if.end33
	jmp	.LBB159_17
.LBB159_16:                             # %if.else34
	movl	-72(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-84(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-80(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-48(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB159_17:                             # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB159_18:                             # %return
	movl	-44(%rbp), %ebx
	cmpl	$323064776, -76(%rbp)   # imm = 0x134193C8
	jne	.LBB159_20
.LBB159_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB159_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB159_19
.Lfunc_end159:
	.size	writeReferenceFrame.118, .Lfunc_end159-writeReferenceFrame.118
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4.119 # -- Begin function OneComponentChromaPrediction4x4.119
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.119,@function
OneComponentChromaPrediction4x4.119:    # @OneComponentChromaPrediction4x4.119
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$1412666160, -108(%rbp) # imm = 0x54339330
	movq	%rdi, -128(%rbp)
	movl	%esi, -88(%rbp)
	movl	%edx, -60(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -68(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-4(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -112(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB160_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB160_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -116(%rbp)
	cmpl	$0, -116(%rbp)
	je	.LBB160_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB160_5
# %bb.4:                                # %if.then7
	movl	$4, -48(%rbp)
	jmp	.LBB160_6
.LBB160_5:                              # %if.else
	movl	$2, -48(%rbp)
.LBB160_6:                              # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB160_8
.LBB160_7:                              # %if.else10
	movl	$0, -48(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB160_8:                              # %if.end13
	movl	-68(%rbp), %eax
	addl	-48(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -28(%rbp)
.LBB160_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB160_11 Depth 2
	cmpl	$4, -28(%rbp)
	jge	.LBB160_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB160_9 Depth=1
	movl	$0, -32(%rbp)
.LBB160_11:                             # %for.cond20
                                        #   Parent Loop BB160_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -32(%rbp)
	jge	.LBB160_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB160_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-32(%rbp), %ecx
	addl	-88(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-28(%rbp), %ecx
	addl	-60(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -136(%rbp)
	movl	-32(%rbp), %eax
	addl	-88(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-136(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-28(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-136(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-144(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB160_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB160_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB160_15
.LBB160_14:                             # %cond.false
                                        #   in Loop: Header=BB160_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB160_15:                             # %cond.end
                                        #   in Loop: Header=BB160_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB160_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB160_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB160_21
.LBB160_17:                             # %cond.false65
                                        #   in Loop: Header=BB160_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB160_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB160_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB160_20
.LBB160_19:                             # %cond.false74
                                        #   in Loop: Header=BB160_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB160_20:                             # %cond.end76
                                        #   in Loop: Header=BB160_11 Depth=2
.LBB160_21:                             # %cond.end78
                                        #   in Loop: Header=BB160_11 Depth=2
	movl	%eax, -80(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB160_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB160_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB160_24
.LBB160_23:                             # %cond.false84
                                        #   in Loop: Header=BB160_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB160_24:                             # %cond.end86
                                        #   in Loop: Header=BB160_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB160_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB160_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB160_30
.LBB160_26:                             # %cond.false91
                                        #   in Loop: Header=BB160_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB160_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB160_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB160_29
.LBB160_28:                             # %cond.false96
                                        #   in Loop: Header=BB160_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB160_29:                             # %cond.end98
                                        #   in Loop: Header=BB160_11 Depth=2
.LBB160_30:                             # %cond.end100
                                        #   in Loop: Header=BB160_11 Depth=2
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB160_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB160_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB160_33
.LBB160_32:                             # %cond.false111
                                        #   in Loop: Header=BB160_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB160_33:                             # %cond.end114
                                        #   in Loop: Header=BB160_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB160_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB160_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB160_39
.LBB160_35:                             # %cond.false119
                                        #   in Loop: Header=BB160_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB160_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB160_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB160_38
.LBB160_37:                             # %cond.false129
                                        #   in Loop: Header=BB160_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB160_38:                             # %cond.end132
                                        #   in Loop: Header=BB160_11 Depth=2
.LBB160_39:                             # %cond.end134
                                        #   in Loop: Header=BB160_11 Depth=2
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB160_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB160_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB160_42
.LBB160_41:                             # %cond.false141
                                        #   in Loop: Header=BB160_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB160_42:                             # %cond.end144
                                        #   in Loop: Header=BB160_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB160_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB160_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB160_48
.LBB160_44:                             # %cond.false149
                                        #   in Loop: Header=BB160_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB160_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB160_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB160_47
.LBB160_46:                             # %cond.false155
                                        #   in Loop: Header=BB160_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB160_47:                             # %cond.end158
                                        #   in Loop: Header=BB160_11 Depth=2
.LBB160_48:                             # %cond.end160
                                        #   in Loop: Header=BB160_11 Depth=2
	movl	%eax, -56(%rbp)
	movl	-16(%rbp), %eax
	andl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-4(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-12(%rbp), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-8(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-92(%rbp), %eax
	imull	-84(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-44(%rbp), %ecx
	imull	-84(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-72(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-64(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-92(%rbp), %ecx
	imull	-52(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-80(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-44(%rbp), %ecx
	imull	-52(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-64(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-112(%rbp), %eax
	cltd
	idivl	-76(%rbp)
	movq	-128(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -128(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB160_11 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB160_11
.LBB160_50:                             # %for.end
                                        #   in Loop: Header=BB160_9 Depth=1
	jmp	.LBB160_51
.LBB160_51:                             # %for.inc198
                                        #   in Loop: Header=BB160_9 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB160_9
.LBB160_52:                             # %for.end200
	cmpl	$1412666160, -108(%rbp) # imm = 0x54339330
	jne	.LBB160_54
.LBB160_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB160_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB160_53
.Lfunc_end160:
	.size	OneComponentChromaPrediction4x4.119, .Lfunc_end160-OneComponentChromaPrediction4x4.119
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.120 # -- Begin function write_one_macroblock.120
	.p2align	4, 0x90
	.type	write_one_macroblock.120,@function
write_one_macroblock.120:               # @write_one_macroblock.120
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$688916095, -32(%rbp)   # imm = 0x2910067F
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB161_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB161_2:                              # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB161_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB161_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB161_6
.LBB161_5:                              # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB161_6:                              # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB161_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB161_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -28(%rbp)
	je	.LBB161_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB161_10:                             # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB161_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB161_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB161_22
.LBB161_13:                             # %if.then22
	movl	$0, -24(%rbp)
.LBB161_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB161_16 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB161_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB161_14 Depth=1
	movl	$0, -20(%rbp)
.LBB161_16:                             # %for.cond24
                                        #   Parent Loop BB161_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB161_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB161_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB161_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB161_16
.LBB161_19:                             # %for.end
                                        #   in Loop: Header=BB161_14 Depth=1
	jmp	.LBB161_20
.LBB161_20:                             # %for.inc35
                                        #   in Loop: Header=BB161_14 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB161_14
.LBB161_21:                             # %for.end37
	jmp	.LBB161_22
.LBB161_22:                             # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB161_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB161_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB161_30
.LBB161_25:                             # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB161_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB161_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB161_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB161_29:                             # %if.end59
	jmp	.LBB161_30
.LBB161_30:                             # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB161_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB161_32:                             # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$688916095, -32(%rbp)   # imm = 0x2910067F
	jne	.LBB161_34
.LBB161_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB161_34:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB161_33
.Lfunc_end161:
	.size	write_one_macroblock.120, .Lfunc_end161-write_one_macroblock.120
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.121 # -- Begin function write_one_macroblock.121
	.p2align	4, 0x90
	.type	write_one_macroblock.121,@function
write_one_macroblock.121:               # @write_one_macroblock.121
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$111054329, -32(%rbp)   # imm = 0x69E8DF9
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB162_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB162_2:                              # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB162_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB162_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB162_6
.LBB162_5:                              # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB162_6:                              # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB162_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB162_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -28(%rbp)
	je	.LBB162_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB162_10:                             # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB162_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB162_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB162_22
.LBB162_13:                             # %if.then22
	movl	$0, -20(%rbp)
.LBB162_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB162_16 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB162_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB162_14 Depth=1
	movl	$0, -24(%rbp)
.LBB162_16:                             # %for.cond24
                                        #   Parent Loop BB162_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB162_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB162_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB162_16 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB162_16
.LBB162_19:                             # %for.end
                                        #   in Loop: Header=BB162_14 Depth=1
	jmp	.LBB162_20
.LBB162_20:                             # %for.inc35
                                        #   in Loop: Header=BB162_14 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB162_14
.LBB162_21:                             # %for.end37
	jmp	.LBB162_22
.LBB162_22:                             # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB162_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB162_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB162_30
.LBB162_25:                             # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB162_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB162_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB162_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB162_29:                             # %if.end59
	jmp	.LBB162_30
.LBB162_30:                             # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB162_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB162_32:                             # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$111054329, -32(%rbp)   # imm = 0x69E8DF9
	jne	.LBB162_34
.LBB162_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB162_34:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB162_33
.Lfunc_end162:
	.size	write_one_macroblock.121, .Lfunc_end162-write_one_macroblock.121
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock.122 # -- Begin function terminate_macroblock.122
	.p2align	4, 0x90
	.type	terminate_macroblock.122,@function
terminate_macroblock.122:               # @terminate_macroblock.122
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1009159233, -112(%rbp) # imm = 0x3C268C41
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-104(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB163_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB163_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB163_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB163_5
.LBB163_4:                              # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB163_8
.LBB163_5:                              # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB163_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB163_7:                              # %if.end
	jmp	.LBB163_8
.LBB163_8:                              # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB163_45
# %bb.9:                                # %if.end18
	movq	.LJTI163_0(,%rax,8), %rax
	jmpq	*%rax
.LBB163_10:                             # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB163_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB163_12:                             # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB163_46
.LBB163_13:                             # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB163_46
.LBB163_14:                             # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB163_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB163_16:                             # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB163_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB163_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB163_22
.LBB163_19:                             # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB163_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB163_21:                             # %if.end64
	jmp	.LBB163_22
.LBB163_22:                             # %if.end65
	jmp	.LBB163_23
.LBB163_23:                             # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB163_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB163_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB163_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB163_27:                             # %if.end79
	jmp	.LBB163_28
.LBB163_28:                             # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB163_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB163_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB163_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB163_32:                             # %if.end89
	jmp	.LBB163_33
.LBB163_33:                             # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB163_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB163_35:                             # %if.end95
	jmp	.LBB163_46
.LBB163_36:                             # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB163_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB163_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB163_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB163_40:                             # %if.end106
	jmp	.LBB163_41
.LBB163_41:                             # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB163_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB163_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB163_44:                             # %if.end118
	jmp	.LBB163_46
.LBB163_45:                             # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB163_46:                             # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB163_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB163_48:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB163_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB163_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB163_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB163_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB163_51:                             # %if.end139
                                        #   in Loop: Header=BB163_48 Depth=1
	jmp	.LBB163_52
.LBB163_52:                             # %for.inc
                                        #   in Loop: Header=BB163_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB163_48
.LBB163_53:                             # %for.end
	jmp	.LBB163_54
.LBB163_54:                             # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB163_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB163_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB163_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB163_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB163_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-104(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB163_60:                             # %if.end174
	jmp	.LBB163_62
.LBB163_61:                             # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB163_62:                             # %if.end188
	jmp	.LBB163_63
.LBB163_63:                             # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB163_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB163_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -108(%rbp)
	jne	.LBB163_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-104(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB163_67:                             # %if.end218
	cmpl	$1009159233, -112(%rbp) # imm = 0x3C268C41
	jne	.LBB163_69
.LBB163_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB163_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB163_68
.Lfunc_end163:
	.size	terminate_macroblock.122, .Lfunc_end163-terminate_macroblock.122
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI163_0:
	.quad	.LBB163_10
	.quad	.LBB163_13
	.quad	.LBB163_14
	.quad	.LBB163_36
                                        # -- End function
	.text
	.globl	writeMBLayer.123        # -- Begin function writeMBLayer.123
	.p2align	4, 0x90
	.type	writeMBLayer.123,@function
writeMBLayer.123:                       # @writeMBLayer.123
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$945969202, -100(%rbp)  # imm = 0x38625832
	movl	%edi, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-64(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB164_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-64(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB164_3
.LBB164_2:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB164_3
.LBB164_3:                              # %cond.end
	movq	%rax, -128(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB164_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB164_9
.LBB164_5:                              # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB164_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB164_8
.LBB164_7:                              # %cond.false13
	movl	$1, %eax
	jmp	.LBB164_8
.LBB164_8:                              # %cond.end14
.LBB164_9:                              # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -68(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB164_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB164_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -68(%rbp)
	jmp	.LBB164_24
.LBB164_12:                             # %if.else
	movq	-128(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB164_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB164_17
	jmp	.LBB164_18
.LBB164_14:                             # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB164_16
# %bb.15:                               # %cond.true28
	movq	-128(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB164_18
	jmp	.LBB164_17
.LBB164_16:                             # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB164_17
	jmp	.LBB164_18
.LBB164_17:                             # %if.then32
	movl	$1, -60(%rbp)
.LBB164_18:                             # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB164_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB164_23
.LBB164_20:                             # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB164_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB164_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB164_23:                             # %if.end50
	jmp	.LBB164_24
.LBB164_24:                             # %if.end51
	jmp	.LBB164_25
.LBB164_25:                             # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB164_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB164_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB164_28:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-120(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB164_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB164_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB164_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB164_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB164_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB164_35
.LBB164_34:                             # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB164_35:                             # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB164_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB164_38
.LBB164_37:                             # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB164_38:                             # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB164_39:                             # %if.end96
	jmp	.LBB164_40
.LBB164_40:                             # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB164_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB164_43
.LBB164_42:                             # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB164_43:                             # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB164_89
.LBB164_44:                             # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB164_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB164_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB164_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -68(%rbp)
	je	.LBB164_49
.LBB164_48:                             # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -92(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-92(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB164_49:                             # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB164_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB164_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB164_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB164_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB164_55
.LBB164_54:                             # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB164_55:                             # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB164_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB164_58
.LBB164_57:                             # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB164_58:                             # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB164_59:                             # %if.end198
	jmp	.LBB164_60
.LBB164_60:                             # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB164_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB164_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB164_64
.LBB164_63:                             # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB164_64:                             # %if.end226
	jmp	.LBB164_88
.LBB164_65:                             # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB164_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB164_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB164_76
.LBB164_68:                             # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB164_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB164_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB164_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB164_72:                             # %if.end281
	jmp	.LBB164_73
.LBB164_73:                             # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB164_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB164_75:                             # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB164_87
.LBB164_76:                             # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -72(%rbp)
.LBB164_77:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB164_79 Depth 2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB164_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB164_77 Depth=1
	movl	$0, -44(%rbp)
.LBB164_79:                             # %for.cond310
                                        #   Parent Loop BB164_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB164_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB164_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB164_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB164_79
.LBB164_82:                             # %for.end
                                        #   in Loop: Header=BB164_77 Depth=1
	jmp	.LBB164_83
.LBB164_83:                             # %for.inc322
                                        #   in Loop: Header=BB164_77 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB164_77
.LBB164_84:                             # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB164_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB164_86:                             # %if.end345
	jmp	.LBB164_87
.LBB164_87:                             # %if.end346
	jmp	.LBB164_88
.LBB164_88:                             # %if.end347
	jmp	.LBB164_89
.LBB164_89:                             # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB164_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB164_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB164_92:                             # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB164_104
# %bb.93:                               # %if.then366
	movq	-120(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB164_94:                             # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB164_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB164_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB164_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB164_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB164_98
.LBB164_97:                             # %if.else380
                                        #   in Loop: Header=BB164_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB164_98:                             # %if.end382
                                        #   in Loop: Header=BB164_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB164_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB164_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB164_101
.LBB164_100:                            # %lor.rhs409
                                        #   in Loop: Header=BB164_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB164_101:                            # %lor.end415
                                        #   in Loop: Header=BB164_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB164_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB164_94
.LBB164_103:                            # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB164_104:                            # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB164_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB164_114
.LBB164_106:                            # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB164_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB164_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB164_110
.LBB164_109:                            # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB164_110:                            # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB164_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB164_113
.LBB164_112:                            # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB164_113:                            # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB164_114:                            # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB164_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB164_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB164_120
.LBB164_117:                            # %if.else480
	cmpl	$0, -96(%rbp)
	jne	.LBB164_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB164_119:                            # %if.end483
	jmp	.LBB164_120
.LBB164_120:                            # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB164_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB164_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB164_123:                            # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB164_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB164_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB164_129
.LBB164_126:                            # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB164_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB164_128:                            # %if.end516
	jmp	.LBB164_129
.LBB164_129:                            # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$945969202, -100(%rbp)  # imm = 0x38625832
	jne	.LBB164_131
.LBB164_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB164_131:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB164_130
.Lfunc_end164:
	.size	writeMBLayer.123, .Lfunc_end164-writeMBLayer.123
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value.124        # -- Begin function MBType2Value.124
	.p2align	4, 0x90
	.type	MBType2Value.124,@function
MBType2Value.124:                       # @MBType2Value.124
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1667353040, -36(%rbp)  # imm = 0x6361C9D0
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB165_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB165_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB165_4
.LBB165_3:                              # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB165_26
.LBB165_4:                              # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB165_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB165_26
.LBB165_6:                              # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB165_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB165_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB165_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB165_26
.LBB165_10:                             # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB165_26
.LBB165_11:                             # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB165_26
.LBB165_12:                             # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB165_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB165_26
.LBB165_14:                             # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB165_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB165_17
.LBB165_16:                             # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB165_26
.LBB165_17:                             # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB165_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB165_26
.LBB165_19:                             # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB165_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB165_26
.LBB165_21:                             # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB165_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB165_26
.LBB165_23:                             # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB165_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB165_26
.LBB165_25:                             # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB165_26:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$1667353040, -36(%rbp)  # imm = 0x6361C9D0
	jne	.LBB165_28
.LBB165_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB165_28:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB165_27
.Lfunc_end165:
	.size	MBType2Value.124, .Lfunc_end165-MBType2Value.124
	.cfi_endproc
                                        # -- End function
	.globl	copyblock4x4.125        # -- Begin function copyblock4x4.125
	.p2align	4, 0x90
	.type	copyblock4x4.125,@function
copyblock4x4.125:                       # @copyblock4x4.125
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1540810333, -20(%rbp)  # imm = 0x5BD6E65D
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	48(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	cmpl	$1540810333, -20(%rbp)  # imm = 0x5BD6E65D
	jne	.LBB166_2
.LBB166_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB166_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB166_1
.Lfunc_end166:
	.size	copyblock4x4.125, .Lfunc_end166-copyblock4x4.125
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef.126             # -- Begin function ZeroRef.126
	.p2align	4, 0x90
	.type	ZeroRef.126,@function
ZeroRef.126:                            # @ZeroRef.126
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$428137744, -24(%rbp)   # imm = 0x1984DD10
	movq	%rdi, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB167_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB167_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB167_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB167_1 Depth=1
	movl	$0, -16(%rbp)
.LBB167_3:                              # %for.cond1
                                        #   Parent Loop BB167_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB167_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB167_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB167_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB167_11
.LBB167_6:                              # %if.end
                                        #   in Loop: Header=BB167_3 Depth=2
	jmp	.LBB167_7
.LBB167_7:                              # %for.inc
                                        #   in Loop: Header=BB167_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB167_3
.LBB167_8:                              # %for.end
                                        #   in Loop: Header=BB167_1 Depth=1
	jmp	.LBB167_9
.LBB167_9:                              # %for.inc10
                                        #   in Loop: Header=BB167_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB167_1
.LBB167_10:                             # %for.end12
	movl	$1, -20(%rbp)
.LBB167_11:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$428137744, -24(%rbp)   # imm = 0x1984DD10
	jne	.LBB167_13
.LBB167_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB167_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB167_12
.Lfunc_end167:
	.size	ZeroRef.126, .Lfunc_end167-ZeroRef.126
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz.127         # -- Begin function predict_nnz.127
	.p2align	4, 0x90
	.type	predict_nnz.127,@function
predict_nnz.127:                        # @predict_nnz.127
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1524558291, -56(%rbp)  # imm = 0x5ADEE9D3
	movl	%edi, -48(%rbp)
	movl	%esi, -44(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %edi
	movl	-48(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB168_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB168_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB168_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB168_4:                              # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB168_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB168_6:                              # %if.end14
	movl	-52(%rbp), %edi
	movl	-48(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB168_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB168_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB168_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB168_10:                             # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB168_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB168_12:                             # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB168_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB168_14:                             # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$1524558291, -56(%rbp)  # imm = 0x5ADEE9D3
	jne	.LBB168_16
.LBB168_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB168_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB168_15
.Lfunc_end168:
	.size	predict_nnz.127, .Lfunc_end168-predict_nnz.127
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.128  # -- Begin function predict_nnz_chroma.128
	.p2align	4, 0x90
	.type	predict_nnz_chroma.128,@function
predict_nnz_chroma.128:                 # @predict_nnz_chroma.128
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$763392929, -64(%rbp)   # imm = 0x2D8073A1
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -60(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB169_14
# %bb.1:                                # %if.then
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB169_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB169_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB169_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB169_5:                              # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB169_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB169_7:                              # %if.end19
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB169_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB169_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB169_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB169_11:                             # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB169_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB169_13:                             # %if.end57
	jmp	.LBB169_27
.LBB169_14:                             # %if.else
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB169_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB169_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB169_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB169_18:                             # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB169_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB169_20:                             # %if.end90
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB169_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB169_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB169_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB169_24:                             # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB169_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB169_26:                             # %if.end124
	jmp	.LBB169_27
.LBB169_27:                             # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB169_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB169_29:                             # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$763392929, -64(%rbp)   # imm = 0x2D8073A1
	jne	.LBB169_31
.LBB169_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB169_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB169_30
.Lfunc_end169:
	.size	predict_nnz_chroma.128, .Lfunc_end169-predict_nnz_chroma.128
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value.129        # -- Begin function MBType2Value.129
	.p2align	4, 0x90
	.type	MBType2Value.129,@function
MBType2Value.129:                       # @MBType2Value.129
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$65239429, -36(%rbp)    # imm = 0x3E37985
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB170_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB170_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB170_4
.LBB170_3:                              # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB170_26
.LBB170_4:                              # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB170_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB170_26
.LBB170_6:                              # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB170_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB170_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB170_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB170_26
.LBB170_10:                             # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB170_26
.LBB170_11:                             # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB170_26
.LBB170_12:                             # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB170_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB170_26
.LBB170_14:                             # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB170_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB170_17
.LBB170_16:                             # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB170_26
.LBB170_17:                             # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB170_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB170_26
.LBB170_19:                             # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB170_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB170_26
.LBB170_21:                             # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB170_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB170_26
.LBB170_23:                             # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB170_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB170_26
.LBB170_25:                             # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB170_26:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$65239429, -36(%rbp)    # imm = 0x3E37985
	jne	.LBB170_28
.LBB170_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB170_28:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB170_27
.Lfunc_end170:
	.size	MBType2Value.129, .Lfunc_end170-MBType2Value.129
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff.130    # -- Begin function writeChromaCoeff.130
	.p2align	4, 0x90
	.type	writeChromaCoeff.130,@function
writeChromaCoeff.130:                   # @writeChromaCoeff.130
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$335431090, -84(%rbp)   # imm = 0x13FE45B2
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB171_24
# %bb.1:                                # %if.then
	movl	$0, -24(%rbp)
.LBB171_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB171_6 Depth 2
	cmpl	$2, -24(%rbp)
	jge	.LBB171_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB171_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB171_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB171_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB171_21
.LBB171_5:                              # %if.else
                                        #   in Loop: Header=BB171_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -20(%rbp)
.LBB171_6:                              # %for.cond18
                                        #   Parent Loop BB171_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-20(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB171_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB171_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB171_8:                              # %land.end
                                        #   in Loop: Header=BB171_6 Depth=2
	testb	$1, %al
	jne	.LBB171_9
	jmp	.LBB171_20
.LBB171_9:                              # %for.body21
                                        #   in Loop: Header=BB171_6 Depth=2
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB171_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB171_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB171_12
.LBB171_11:                             # %if.else29
                                        #   in Loop: Header=BB171_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB171_12:                             # %if.end
                                        #   in Loop: Header=BB171_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB171_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB171_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB171_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB171_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB171_15:                             # %lor.end
                                        #   in Loop: Header=BB171_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB171_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB171_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB171_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB171_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB171_18:                             # %lor.end45
                                        #   in Loop: Header=BB171_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB171_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB171_6
.LBB171_20:                             # %for.end
                                        #   in Loop: Header=BB171_2 Depth=1
	jmp	.LBB171_21
.LBB171_21:                             # %if.end58
                                        #   in Loop: Header=BB171_2 Depth=1
	jmp	.LBB171_22
.LBB171_22:                             # %for.inc59
                                        #   in Loop: Header=BB171_2 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB171_2
.LBB171_23:                             # %for.end61
	jmp	.LBB171_24
.LBB171_24:                             # %if.end62
	movl	$-1, -24(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB171_52
# %bb.25:                               # %if.then64
	movl	$4, -28(%rbp)
.LBB171_26:                             # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB171_28 Depth 2
                                        #       Child Loop BB171_32 Depth 3
	movl	-28(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB171_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB171_26 Depth=1
	movl	$0, -36(%rbp)
.LBB171_28:                             # %for.cond69
                                        #   Parent Loop BB171_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB171_32 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB171_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB171_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB171_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB171_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %esi
	movl	-36(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB171_47
.LBB171_31:                             # %if.else84
                                        #   in Loop: Header=BB171_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movl	$1, -52(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -20(%rbp)
.LBB171_32:                             # %for.cond115
                                        #   Parent Loop BB171_26 Depth=1
                                        #     Parent Loop BB171_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -20(%rbp)
	jge	.LBB171_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB171_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB171_34:                             # %land.end121
                                        #   in Loop: Header=BB171_32 Depth=3
	testb	$1, %al
	jne	.LBB171_35
	jmp	.LBB171_46
.LBB171_35:                             # %for.body122
                                        #   in Loop: Header=BB171_32 Depth=3
	movq	-144(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB171_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB171_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB171_38
.LBB171_37:                             # %if.else134
                                        #   in Loop: Header=BB171_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB171_38:                             # %if.end136
                                        #   in Loop: Header=BB171_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB171_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB171_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB171_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB171_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB171_41:                             # %lor.end149
                                        #   in Loop: Header=BB171_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB171_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB171_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB171_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB171_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB171_44:                             # %lor.end164
                                        #   in Loop: Header=BB171_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB171_32 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB171_32
.LBB171_46:                             # %for.end189
                                        #   in Loop: Header=BB171_28 Depth=2
	jmp	.LBB171_47
.LBB171_47:                             # %if.end190
                                        #   in Loop: Header=BB171_28 Depth=2
	jmp	.LBB171_48
.LBB171_48:                             # %for.inc191
                                        #   in Loop: Header=BB171_28 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB171_28
.LBB171_49:                             # %for.end193
                                        #   in Loop: Header=BB171_26 Depth=1
	jmp	.LBB171_50
.LBB171_50:                             # %for.inc194
                                        #   in Loop: Header=BB171_26 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB171_26
.LBB171_51:                             # %for.end196
	jmp	.LBB171_52
.LBB171_52:                             # %if.end197
	movl	-32(%rbp), %ebx
	cmpl	$335431090, -84(%rbp)   # imm = 0x13FE45B2
	jne	.LBB171_54
.LBB171_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB171_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB171_53
.Lfunc_end171:
	.size	writeChromaCoeff.130, .Lfunc_end171-writeChromaCoeff.130
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit.131 # -- Begin function write_terminating_bit.131
	.p2align	4, 0x90
	.type	write_terminating_bit.131,@function
write_terminating_bit.131:              # @write_terminating_bit.131
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1503659919, -8(%rbp)   # imm = 0x59A0078F
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$1503659919, -8(%rbp)   # imm = 0x59A0078F
	jne	.LBB172_2
.LBB172_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB172_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB172_1
.Lfunc_end172:
	.size	write_terminating_bit.131, .Lfunc_end172-write_terminating_bit.131
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.132 # -- Begin function writeCoeff4x4_CAVLC.132
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.132,@function
writeCoeff4x4_CAVLC.132:                # @writeCoeff4x4_CAVLC.132
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$1284484678, -172(%rbp) # imm = 0x4C8FAE46
	movl	%edi, -168(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -52(%rbp)
	movl	%ecx, -68(%rbp)
	movl	$0, -40(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -208(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -80(%rbp)
	movl	$0, -156(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -120(%rbp)
	movq	$0, -136(%rbp)
	movl	-168(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB173_22
# %bb.1:                                # %entry
	movq	.LJTI173_0(,%rax,8), %rax
	jmpq	*%rax
.LBB173_2:                              # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -72(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB173_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB173_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB173_6
.LBB173_5:                              # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB173_7
.LBB173_6:                              # %if.else
	movl	$14, -24(%rbp)
.LBB173_7:                              # %if.end
	jmp	.LBB173_23
.LBB173_8:                              # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -72(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB173_23
.LBB173_9:                              # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -72(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB173_23
.LBB173_10:                             # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -80(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-68(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-68(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB173_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB173_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB173_14
.LBB173_13:                             # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB173_15
.LBB173_14:                             # %if.else66
	movl	$13, -24(%rbp)
.LBB173_15:                             # %if.end67
	jmp	.LBB173_23
.LBB173_16:                             # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -72(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -156(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB173_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB173_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB173_20
.LBB173_19:                             # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB173_21
.LBB173_20:                             # %if.else92
	movl	$15, -24(%rbp)
.LBB173_21:                             # %if.end93
	jmp	.LBB173_23
.LBB173_22:                             # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB173_23:                             # %sw.epilog
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -160(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -108(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB173_24:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -80(%rbp)
	je	.LBB173_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB173_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB173_27
.LBB173_26:                             # %cond.false
                                        #   in Loop: Header=BB173_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB173_27
.LBB173_27:                             # %cond.end
                                        #   in Loop: Header=BB173_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB173_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB173_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB173_29:                             # %land.end
                                        #   in Loop: Header=BB173_24 Depth=1
	testb	$1, %dl
	jne	.LBB173_30
	jmp	.LBB173_41
.LBB173_30:                             # %for.body
                                        #   in Loop: Header=BB173_24 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB173_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB173_24 Depth=1
	cmpl	$0, -100(%rbp)
	je	.LBB173_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB173_24 Depth=1
	movl	-100(%rbp), %eax
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
.LBB173_33:                             # %if.end110
                                        #   in Loop: Header=BB173_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB173_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB173_24 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-160(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -160(%rbp)
	cmpl	$3, -28(%rbp)
	jle	.LBB173_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB173_24 Depth=1
	movl	$3, -28(%rbp)
.LBB173_36:                             # %if.end117
                                        #   in Loop: Header=BB173_24 Depth=1
	jmp	.LBB173_38
.LBB173_37:                             # %if.else118
                                        #   in Loop: Header=BB173_24 Depth=1
	movl	$0, -28(%rbp)
.LBB173_38:                             # %if.end119
                                        #   in Loop: Header=BB173_24 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -76(%rbp)
.LBB173_39:                             # %if.end121
                                        #   in Loop: Header=BB173_24 Depth=1
	jmp	.LBB173_40
.LBB173_40:                             # %for.inc
                                        #   in Loop: Header=BB173_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB173_24
.LBB173_41:                             # %for.end
	cmpl	$0, -80(%rbp)
	jne	.LBB173_61
# %bb.42:                               # %if.then124
	cmpl	$0, -156(%rbp)
	jne	.LBB173_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB173_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB173_46
.LBB173_45:                             # %cond.false132
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB173_46:                             # %cond.end136
	movl	%eax, -104(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB173_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB173_49
.LBB173_48:                             # %cond.false142
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB173_49:                             # %cond.end145
	movl	%eax, -96(%rbp)
	movl	-104(%rbp), %edi
	movl	-96(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -112(%rbp)
	jmp	.LBB173_51
.LBB173_50:                             # %if.else148
	movl	-68(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -104(%rbp)
	movl	-68(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -96(%rbp)
	movl	-104(%rbp), %edi
	movl	-96(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -112(%rbp)
.LBB173_51:                             # %if.end151
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-104(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-96(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -112(%rbp)
	jge	.LBB173_53
# %bb.52:                               # %if.then160
	movl	$0, -92(%rbp)
	jmp	.LBB173_60
.LBB173_53:                             # %if.else161
	cmpl	$4, -112(%rbp)
	jge	.LBB173_55
# %bb.54:                               # %if.then163
	movl	$1, -92(%rbp)
	jmp	.LBB173_59
.LBB173_55:                             # %if.else164
	cmpl	$8, -112(%rbp)
	jge	.LBB173_57
# %bb.56:                               # %if.then166
	movl	$2, -92(%rbp)
	jmp	.LBB173_58
.LBB173_57:                             # %if.else167
	movl	$3, -92(%rbp)
.LBB173_58:                             # %if.end168
	jmp	.LBB173_59
.LBB173_59:                             # %if.end169
	jmp	.LBB173_60
.LBB173_60:                             # %if.end170
	jmp	.LBB173_62
.LBB173_61:                             # %if.else171
	movl	$0, -92(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -96(%rbp)
.LBB173_62:                             # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-92(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -80(%rbp)
	jne	.LBB173_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB173_65
.LBB173_64:                             # %if.else177
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB173_65:                             # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -36(%rbp)
	jne	.LBB173_67
# %bb.66:                               # %if.then189
	movl	-40(%rbp), %eax
	movl	%eax, -164(%rbp)
	jmp	.LBB173_122
.LBB173_67:                             # %if.end190
	cmpl	$0, -36(%rbp)
	je	.LBB173_121
# %bb.68:                               # %if.then192
	movl	$0, -88(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB173_69:                             # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-76(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB173_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB173_69 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB173_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB173_72:                             # %if.end202
                                        #   in Loop: Header=BB173_69 Depth=1
	movl	-88(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -88(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB173_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB173_69 Depth=1
	movl	-88(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -88(%rbp)
.LBB173_74:                             # %if.end205
                                        #   in Loop: Header=BB173_69 Depth=1
	jmp	.LBB173_75
.LBB173_75:                             # %for.inc206
                                        #   in Loop: Header=BB173_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB173_69
.LBB173_76:                             # %for.end207
	cmpl	$0, -28(%rbp)
	je	.LBB173_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-88(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB173_78:                             # %if.end223
	movl	$1, -140(%rbp)
	cmpl	$3, -36(%rbp)
	jle	.LBB173_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -28(%rbp)
	jne	.LBB173_81
# %bb.80:                               # %if.then226
	movl	$0, -140(%rbp)
.LBB173_81:                             # %if.end227
	cmpl	$10, -36(%rbp)
	jle	.LBB173_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -28(%rbp)
	jge	.LBB173_84
# %bb.83:                               # %if.then231
	movl	$1, -32(%rbp)
	jmp	.LBB173_85
.LBB173_84:                             # %if.else232
	movl	$0, -32(%rbp)
.LBB173_85:                             # %if.end233
	movl	-76(%rbp), %eax
	subl	-28(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB173_86:                             # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB173_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB173_86 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -140(%rbp)
	je	.LBB173_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB173_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB173_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB173_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB173_91
.LBB173_90:                             # %if.else249
                                        #   in Loop: Header=BB173_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB173_91:                             # %if.end252
                                        #   in Loop: Header=BB173_86 Depth=1
	movl	$0, -140(%rbp)
.LBB173_92:                             # %if.end253
                                        #   in Loop: Header=BB173_86 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB173_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB173_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB173_95
.LBB173_94:                             # %if.else257
                                        #   in Loop: Header=BB173_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-32(%rbp), %esi
	movq	-128(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB173_95:                             # %if.end259
                                        #   in Loop: Header=BB173_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-32(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB173_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB173_86 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
.LBB173_97:                             # %if.end266
                                        #   in Loop: Header=BB173_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-76(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB173_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB173_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB173_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB173_86 Depth=1
	movl	$2, -32(%rbp)
.LBB173_100:                            # %if.end273
                                        #   in Loop: Header=BB173_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB173_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB173_86
.LBB173_102:                            # %for.end285
	movl	-36(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB173_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-108(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -80(%rbp)
	jne	.LBB173_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB173_106
.LBB173_105:                            # %if.else295
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB173_106:                            # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB173_107:                            # %if.end307
	movl	-108(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB173_108:                            # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB173_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB173_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB173_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB173_108 Depth=1
	cmpl	$0, -84(%rbp)
	jne	.LBB173_112
.LBB173_111:                            # %if.then318
	jmp	.LBB173_120
.LBB173_112:                            # %if.end319
                                        #   in Loop: Header=BB173_108 Depth=1
	cmpl	$1, -144(%rbp)
	jle	.LBB173_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB173_108 Depth=1
	cmpl	$0, -84(%rbp)
	je	.LBB173_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB173_108 Depth=1
	movl	-84(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$6, -32(%rbp)
	jle	.LBB173_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB173_108 Depth=1
	movl	$6, -32(%rbp)
.LBB173_116:                            # %if.end327
                                        #   in Loop: Header=BB173_108 Depth=1
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-100(%rbp), %eax
	movl	-84(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -84(%rbp)
	movl	-144(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -144(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB173_117:                            # %if.end341
                                        #   in Loop: Header=BB173_108 Depth=1
	jmp	.LBB173_118
.LBB173_118:                            # %for.inc342
                                        #   in Loop: Header=BB173_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB173_108
.LBB173_119:                            # %for.end344.loopexit
	jmp	.LBB173_120
.LBB173_120:                            # %for.end344
	jmp	.LBB173_121
.LBB173_121:                            # %if.end345
	movl	-40(%rbp), %eax
	movl	%eax, -164(%rbp)
.LBB173_122:                            # %return
	movl	-164(%rbp), %ebx
	cmpl	$1284484678, -172(%rbp) # imm = 0x4C8FAE46
	jne	.LBB173_124
.LBB173_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB173_124:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB173_123
.Lfunc_end173:
	.size	writeCoeff4x4_CAVLC.132, .Lfunc_end173-writeCoeff4x4_CAVLC.132
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI173_0:
	.quad	.LBB173_2
	.quad	.LBB173_8
	.quad	.LBB173_9
	.quad	.LBB173_22
	.quad	.LBB173_22
	.quad	.LBB173_22
	.quad	.LBB173_10
	.quad	.LBB173_16
                                        # -- End function
	.text
	.globl	ZeroRef.133             # -- Begin function ZeroRef.133
	.p2align	4, 0x90
	.type	ZeroRef.133,@function
ZeroRef.133:                            # @ZeroRef.133
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$96029987, -24(%rbp)    # imm = 0x5B94D23
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB174_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB174_3 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB174_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB174_1 Depth=1
	movl	$0, -12(%rbp)
.LBB174_3:                              # %for.cond1
                                        #   Parent Loop BB174_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB174_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB174_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB174_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB174_11
.LBB174_6:                              # %if.end
                                        #   in Loop: Header=BB174_3 Depth=2
	jmp	.LBB174_7
.LBB174_7:                              # %for.inc
                                        #   in Loop: Header=BB174_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB174_3
.LBB174_8:                              # %for.end
                                        #   in Loop: Header=BB174_1 Depth=1
	jmp	.LBB174_9
.LBB174_9:                              # %for.inc10
                                        #   in Loop: Header=BB174_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB174_1
.LBB174_10:                             # %for.end12
	movl	$1, -20(%rbp)
.LBB174_11:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$96029987, -24(%rbp)    # imm = 0x5B94D23
	jne	.LBB174_13
.LBB174_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB174_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB174_12
.Lfunc_end174:
	.size	ZeroRef.133, .Lfunc_end174-ZeroRef.133
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.134    # -- Begin function start_macroblock.134
	.p2align	4, 0x90
	.type	start_macroblock.134,@function
start_macroblock.134:                   # @start_macroblock.134
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$283528619, -88(%rbp)   # imm = 0x10E64DAB
	movl	%edi, -56(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB175_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB175_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -40(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-56(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -84(%rbp)
	je	.LBB175_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB175_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB175_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB175_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB175_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB175_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB175_5 Depth=1
	movq	-104(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB175_8:                              # %if.end
                                        #   in Loop: Header=BB175_5 Depth=1
	jmp	.LBB175_9
.LBB175_9:                              # %for.inc
                                        #   in Loop: Header=BB175_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB175_5
.LBB175_10:                             # %for.end
	jmp	.LBB175_11
.LBB175_11:                             # %if.end19
	jmp	.LBB175_12
.LBB175_12:                             # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB175_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jle	.LBB175_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB175_16
.LBB175_15:                             # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB175_16:                             # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB175_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB175_97
.LBB175_18:                             # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB175_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB175_21
.LBB175_20:                             # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB175_96
.LBB175_21:                             # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB175_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB175_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB175_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB175_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB175_34
.LBB175_26:                             # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB175_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB175_32
.LBB175_28:                             # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB175_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB175_31
.LBB175_30:                             # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB175_31:                             # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB175_33
.LBB175_32:                             # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB175_33:                             # %if.end112
	jmp	.LBB175_34
.LBB175_34:                             # %if.end113
	jmp	.LBB175_39
.LBB175_35:                             # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB175_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB175_38
.LBB175_37:                             # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB175_38:                             # %if.end125
	jmp	.LBB175_39
.LBB175_39:                             # %if.end126
	jmp	.LBB175_47
.LBB175_40:                             # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB175_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB175_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB175_44
.LBB175_43:                             # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB175_44:                             # %if.end140
	jmp	.LBB175_46
.LBB175_45:                             # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB175_46:                             # %if.end145
	jmp	.LBB175_47
.LBB175_47:                             # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB175_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB175_93
.LBB175_49:                             # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB175_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB175_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB175_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB175_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB175_74
.LBB175_54:                             # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB175_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB175_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB175_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB175_73
.LBB175_58:                             # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB175_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB175_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB175_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB175_72
.LBB175_62:                             # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB175_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB175_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB175_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB175_71
.LBB175_66:                             # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB175_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB175_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB175_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB175_70:                             # %if.end223
	jmp	.LBB175_71
.LBB175_71:                             # %if.end224
	jmp	.LBB175_72
.LBB175_72:                             # %if.end225
	jmp	.LBB175_73
.LBB175_73:                             # %if.end226
	jmp	.LBB175_74
.LBB175_74:                             # %if.end227
	jmp	.LBB175_75
.LBB175_75:                             # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB175_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB175_77:                             # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB175_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB175_82
.LBB175_79:                             # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB175_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB175_81:                             # %if.end256
	jmp	.LBB175_82
.LBB175_82:                             # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB175_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-40(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB175_88
.LBB175_84:                             # %if.else275
	movl	dq, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB175_86
# %bb.85:                               # %if.then278
	movl	-44(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB175_87
.LBB175_86:                             # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB175_87:                             # %if.end292
	jmp	.LBB175_88
.LBB175_88:                             # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB175_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB175_90:                             # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB175_92
.LBB175_91:                             # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB175_92:                             # %if.end305
	jmp	.LBB175_94
.LBB175_93:                             # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB175_94:                             # %if.end309
	jmp	.LBB175_95
.LBB175_95:                             # %if.end310
	jmp	.LBB175_96
.LBB175_96:                             # %if.end311
	jmp	.LBB175_97
.LBB175_97:                             # %if.end312
	jmp	.LBB175_102
.LBB175_98:                             # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -48(%rbp)
	cmpl	$-1, -48(%rbp)
	jle	.LBB175_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB175_101
.LBB175_100:                            # %if.else331
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB175_101:                            # %if.end335
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB175_102:                            # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB175_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB175_105
.LBB175_104:                            # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB175_105:                            # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB175_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB175_107:                            # %if.end359
	movl	$0, -20(%rbp)
.LBB175_108:                            # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB175_110 Depth 2
                                        #       Child Loop BB175_112 Depth 3
                                        #         Child Loop BB175_114 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB175_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB175_108 Depth=1
	movl	$0, -16(%rbp)
.LBB175_110:                            # %for.cond364
                                        #   Parent Loop BB175_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB175_112 Depth 3
                                        #         Child Loop BB175_114 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB175_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB175_110 Depth=2
	movl	$0, -12(%rbp)
.LBB175_112:                            # %for.cond368
                                        #   Parent Loop BB175_108 Depth=1
                                        #     Parent Loop BB175_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB175_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB175_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB175_112 Depth=3
	movl	$0, -36(%rbp)
.LBB175_114:                            # %for.cond372
                                        #   Parent Loop BB175_108 Depth=1
                                        #     Parent Loop BB175_110 Depth=2
                                        #       Parent Loop BB175_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB175_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB175_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB175_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB175_114
.LBB175_117:                            # %for.end388
                                        #   in Loop: Header=BB175_112 Depth=3
	jmp	.LBB175_118
.LBB175_118:                            # %for.inc389
                                        #   in Loop: Header=BB175_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB175_112
.LBB175_119:                            # %for.end391
                                        #   in Loop: Header=BB175_110 Depth=2
	jmp	.LBB175_120
.LBB175_120:                            # %for.inc392
                                        #   in Loop: Header=BB175_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB175_110
.LBB175_121:                            # %for.end394
                                        #   in Loop: Header=BB175_108 Depth=1
	jmp	.LBB175_122
.LBB175_122:                            # %for.inc395
                                        #   in Loop: Header=BB175_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB175_108
.LBB175_123:                            # %for.end397
	movl	$0, -16(%rbp)
.LBB175_124:                            # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB175_126 Depth 2
                                        #       Child Loop BB175_128 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB175_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB175_124 Depth=1
	movl	$0, -12(%rbp)
.LBB175_126:                            # %for.cond402
                                        #   Parent Loop BB175_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB175_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB175_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB175_126 Depth=2
	movl	$0, -20(%rbp)
.LBB175_128:                            # %for.cond406
                                        #   Parent Loop BB175_124 Depth=1
                                        #     Parent Loop BB175_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -20(%rbp)
	jge	.LBB175_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB175_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB175_128 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB175_128
.LBB175_131:                            # %for.end432
                                        #   in Loop: Header=BB175_126 Depth=2
	jmp	.LBB175_132
.LBB175_132:                            # %for.inc433
                                        #   in Loop: Header=BB175_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB175_126
.LBB175_133:                            # %for.end435
                                        #   in Loop: Header=BB175_124 Depth=1
	jmp	.LBB175_134
.LBB175_134:                            # %for.inc436
                                        #   in Loop: Header=BB175_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB175_124
.LBB175_135:                            # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -20(%rbp)
.LBB175_136:                            # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB175_138 Depth 2
                                        #       Child Loop BB175_140 Depth 3
                                        #         Child Loop BB175_142 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB175_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB175_136 Depth=1
	movl	$0, -16(%rbp)
.LBB175_138:                            # %for.cond443
                                        #   Parent Loop BB175_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB175_140 Depth 3
                                        #         Child Loop BB175_142 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB175_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB175_138 Depth=2
	movl	$0, -12(%rbp)
.LBB175_140:                            # %for.cond447
                                        #   Parent Loop BB175_136 Depth=1
                                        #     Parent Loop BB175_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB175_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB175_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB175_140 Depth=3
	movl	$0, -36(%rbp)
.LBB175_142:                            # %for.cond451
                                        #   Parent Loop BB175_136 Depth=1
                                        #     Parent Loop BB175_138 Depth=2
                                        #       Parent Loop BB175_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB175_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB175_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-20(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB175_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB175_142
.LBB175_145:                            # %for.end465
                                        #   in Loop: Header=BB175_140 Depth=3
	jmp	.LBB175_146
.LBB175_146:                            # %for.inc466
                                        #   in Loop: Header=BB175_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB175_140
.LBB175_147:                            # %for.end468
                                        #   in Loop: Header=BB175_138 Depth=2
	jmp	.LBB175_148
.LBB175_148:                            # %for.inc469
                                        #   in Loop: Header=BB175_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB175_138
.LBB175_149:                            # %for.end471
                                        #   in Loop: Header=BB175_136 Depth=1
	jmp	.LBB175_150
.LBB175_150:                            # %for.inc472
                                        #   in Loop: Header=BB175_136 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB175_136
.LBB175_151:                            # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB175_152:                            # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB175_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB175_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB175_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB175_152
.LBB175_155:                            # %for.end483
	movl	$0, -12(%rbp)
.LBB175_156:                            # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB175_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB175_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB175_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB175_156
.LBB175_159:                            # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB175_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB175_161:                            # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB175_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB175_166
.LBB175_163:                            # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB175_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB175_165:                            # %if.end520
	jmp	.LBB175_166
.LBB175_166:                            # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB175_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB175_168:                            # %if.end536
	cmpl	$283528619, -88(%rbp)   # imm = 0x10E64DAB
	jne	.LBB175_170
.LBB175_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB175_170:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB175_169
.Lfunc_end175:
	.size	start_macroblock.134, .Lfunc_end175-start_macroblock.134
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff.135    # -- Begin function writeChromaCoeff.135
	.p2align	4, 0x90
	.type	writeChromaCoeff.135,@function
writeChromaCoeff.135:                   # @writeChromaCoeff.135
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$697721355, -84(%rbp)   # imm = 0x2996620B
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB176_24
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB176_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB176_6 Depth 2
	cmpl	$2, -20(%rbp)
	jge	.LBB176_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB176_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB176_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB176_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB176_21
.LBB176_5:                              # %if.else
                                        #   in Loop: Header=BB176_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -24(%rbp)
.LBB176_6:                              # %for.cond18
                                        #   Parent Loop BB176_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB176_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB176_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB176_8:                              # %land.end
                                        #   in Loop: Header=BB176_6 Depth=2
	testb	$1, %al
	jne	.LBB176_9
	jmp	.LBB176_20
.LBB176_9:                              # %for.body21
                                        #   in Loop: Header=BB176_6 Depth=2
	movq	-120(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-144(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB176_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB176_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB176_12
.LBB176_11:                             # %if.else29
                                        #   in Loop: Header=BB176_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB176_12:                             # %if.end
                                        #   in Loop: Header=BB176_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB176_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB176_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB176_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB176_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB176_15:                             # %lor.end
                                        #   in Loop: Header=BB176_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB176_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB176_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB176_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB176_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB176_18:                             # %lor.end45
                                        #   in Loop: Header=BB176_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB176_6 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB176_6
.LBB176_20:                             # %for.end
                                        #   in Loop: Header=BB176_2 Depth=1
	jmp	.LBB176_21
.LBB176_21:                             # %if.end58
                                        #   in Loop: Header=BB176_2 Depth=1
	jmp	.LBB176_22
.LBB176_22:                             # %for.inc59
                                        #   in Loop: Header=BB176_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB176_2
.LBB176_23:                             # %for.end61
	jmp	.LBB176_24
.LBB176_24:                             # %if.end62
	movl	$-1, -20(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB176_52
# %bb.25:                               # %if.then64
	movl	$4, -28(%rbp)
.LBB176_26:                             # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB176_28 Depth 2
                                        #       Child Loop BB176_32 Depth 3
	movl	-28(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB176_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB176_26 Depth=1
	movl	$0, -36(%rbp)
.LBB176_28:                             # %for.cond69
                                        #   Parent Loop BB176_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB176_32 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB176_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB176_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB176_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB176_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %esi
	movl	-36(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB176_47
.LBB176_31:                             # %if.else84
                                        #   in Loop: Header=BB176_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movl	$1, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -24(%rbp)
.LBB176_32:                             # %for.cond115
                                        #   Parent Loop BB176_26 Depth=1
                                        #     Parent Loop BB176_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -24(%rbp)
	jge	.LBB176_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB176_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB176_34:                             # %land.end121
                                        #   in Loop: Header=BB176_32 Depth=3
	testb	$1, %al
	jne	.LBB176_35
	jmp	.LBB176_46
.LBB176_35:                             # %for.body122
                                        #   in Loop: Header=BB176_32 Depth=3
	movq	-128(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-136(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB176_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB176_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB176_38
.LBB176_37:                             # %if.else134
                                        #   in Loop: Header=BB176_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB176_38:                             # %if.end136
                                        #   in Loop: Header=BB176_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB176_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB176_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB176_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB176_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB176_41:                             # %lor.end149
                                        #   in Loop: Header=BB176_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB176_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB176_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB176_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB176_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB176_44:                             # %lor.end164
                                        #   in Loop: Header=BB176_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB176_32 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB176_32
.LBB176_46:                             # %for.end189
                                        #   in Loop: Header=BB176_28 Depth=2
	jmp	.LBB176_47
.LBB176_47:                             # %if.end190
                                        #   in Loop: Header=BB176_28 Depth=2
	jmp	.LBB176_48
.LBB176_48:                             # %for.inc191
                                        #   in Loop: Header=BB176_28 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB176_28
.LBB176_49:                             # %for.end193
                                        #   in Loop: Header=BB176_26 Depth=1
	jmp	.LBB176_50
.LBB176_50:                             # %for.inc194
                                        #   in Loop: Header=BB176_26 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB176_26
.LBB176_51:                             # %for.end196
	jmp	.LBB176_52
.LBB176_52:                             # %if.end197
	movl	-32(%rbp), %ebx
	cmpl	$697721355, -84(%rbp)   # imm = 0x2996620B
	jne	.LBB176_54
.LBB176_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB176_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB176_53
.Lfunc_end176:
	.size	writeChromaCoeff.135, .Lfunc_end176-writeChromaCoeff.135
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer.136        # -- Begin function writeMBLayer.136
	.p2align	4, 0x90
	.type	writeMBLayer.136,@function
writeMBLayer.136:                       # @writeMBLayer.136
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$358813483, -96(%rbp)   # imm = 0x15630F2B
	movl	%edi, -100(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-72(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB177_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-72(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB177_3
.LBB177_2:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB177_3
.LBB177_3:                              # %cond.end
	movq	%rax, -120(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB177_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB177_9
.LBB177_5:                              # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB177_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB177_8
.LBB177_7:                              # %cond.false13
	movl	$1, %eax
	jmp	.LBB177_8
.LBB177_8:                              # %cond.end14
.LBB177_9:                              # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -64(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB177_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB177_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -64(%rbp)
	jmp	.LBB177_24
.LBB177_12:                             # %if.else
	movq	-120(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB177_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB177_17
	jmp	.LBB177_18
.LBB177_14:                             # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB177_16
# %bb.15:                               # %cond.true28
	movq	-120(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB177_18
	jmp	.LBB177_17
.LBB177_16:                             # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB177_17
	jmp	.LBB177_18
.LBB177_17:                             # %if.then32
	movl	$1, -60(%rbp)
.LBB177_18:                             # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB177_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB177_23
.LBB177_20:                             # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB177_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB177_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
.LBB177_23:                             # %if.end50
	jmp	.LBB177_24
.LBB177_24:                             # %if.end51
	jmp	.LBB177_25
.LBB177_25:                             # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB177_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB177_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB177_28:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB177_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB177_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB177_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB177_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB177_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB177_35
.LBB177_34:                             # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB177_35:                             # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB177_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB177_38
.LBB177_37:                             # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB177_38:                             # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB177_39:                             # %if.end96
	jmp	.LBB177_40
.LBB177_40:                             # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB177_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB177_43
.LBB177_42:                             # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB177_43:                             # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB177_89
.LBB177_44:                             # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB177_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB177_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB177_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -64(%rbp)
	je	.LBB177_49
.LBB177_48:                             # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -92(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-92(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB177_49:                             # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB177_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB177_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB177_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB177_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB177_55
.LBB177_54:                             # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB177_55:                             # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB177_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB177_58
.LBB177_57:                             # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB177_58:                             # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB177_59:                             # %if.end198
	jmp	.LBB177_60
.LBB177_60:                             # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB177_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB177_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB177_64
.LBB177_63:                             # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB177_64:                             # %if.end226
	jmp	.LBB177_88
.LBB177_65:                             # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB177_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB177_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB177_76
.LBB177_68:                             # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB177_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB177_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB177_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB177_72:                             # %if.end281
	jmp	.LBB177_73
.LBB177_73:                             # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB177_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB177_75:                             # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB177_87
.LBB177_76:                             # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -68(%rbp)
.LBB177_77:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB177_79 Depth 2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB177_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB177_77 Depth=1
	movl	$0, -44(%rbp)
.LBB177_79:                             # %for.cond310
                                        #   Parent Loop BB177_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB177_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB177_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB177_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB177_79
.LBB177_82:                             # %for.end
                                        #   in Loop: Header=BB177_77 Depth=1
	jmp	.LBB177_83
.LBB177_83:                             # %for.inc322
                                        #   in Loop: Header=BB177_77 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB177_77
.LBB177_84:                             # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB177_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB177_86:                             # %if.end345
	jmp	.LBB177_87
.LBB177_87:                             # %if.end346
	jmp	.LBB177_88
.LBB177_88:                             # %if.end347
	jmp	.LBB177_89
.LBB177_89:                             # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB177_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB177_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB177_92:                             # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB177_104
# %bb.93:                               # %if.then366
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB177_94:                             # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB177_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB177_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB177_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB177_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB177_98
.LBB177_97:                             # %if.else380
                                        #   in Loop: Header=BB177_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB177_98:                             # %if.end382
                                        #   in Loop: Header=BB177_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB177_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB177_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB177_101
.LBB177_100:                            # %lor.rhs409
                                        #   in Loop: Header=BB177_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB177_101:                            # %lor.end415
                                        #   in Loop: Header=BB177_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB177_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB177_94
.LBB177_103:                            # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB177_104:                            # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB177_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB177_114
.LBB177_106:                            # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB177_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB177_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB177_110
.LBB177_109:                            # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB177_110:                            # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB177_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB177_113
.LBB177_112:                            # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB177_113:                            # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB177_114:                            # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB177_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB177_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB177_120
.LBB177_117:                            # %if.else480
	cmpl	$0, -100(%rbp)
	jne	.LBB177_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB177_119:                            # %if.end483
	jmp	.LBB177_120
.LBB177_120:                            # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB177_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB177_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB177_123:                            # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB177_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB177_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB177_129
.LBB177_126:                            # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB177_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB177_128:                            # %if.end516
	jmp	.LBB177_129
.LBB177_129:                            # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$358813483, -96(%rbp)   # imm = 0x15630F2B
	jne	.LBB177_131
.LBB177_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB177_131:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB177_130
.Lfunc_end177:
	.size	writeMBLayer.136, .Lfunc_end177-writeMBLayer.136
	.cfi_endproc
                                        # -- End function
	.globl	proceed2nextMacroblock.137 # -- Begin function proceed2nextMacroblock.137
	.p2align	4, 0x90
	.type	proceed2nextMacroblock.137,@function
proceed2nextMacroblock.137:             # @proceed2nextMacroblock.137
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$532080092, -28(%rbp)   # imm = 0x1FB6E5DC
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1348(%rcx,%rdx,4), %eax
	movl	%eax, 1348(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1408(%rcx,%rdx,4), %eax
	movl	%eax, 1408(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1388(%rcx,%rdx,4), %eax
	movl	%eax, 1388(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1428(%rcx,%rdx,4), %eax
	movl	%eax, 1428(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	28(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1448(%rcx,%rdx,4), %eax
	movl	%eax, 1448(%rcx,%rdx,4)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB178_3
# %bb.1:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB178_3
# %bb.2:                                # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB178_9
.LBB178_3:                              # %if.then
	movq	stats, %rax
	movq	-8(%rbp), %rcx
	movslq	524(%rcx), %rcx
	movl	672(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 672(%rax,%rcx,4)
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB178_8
# %bb.4:                                # %if.then32
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB178_6
# %bb.5:                                # %if.then33
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB178_7
.LBB178_6:                              # %if.else
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB178_7:                              # %if.end
	jmp	.LBB178_8
.LBB178_8:                              # %if.end48
	jmp	.LBB178_9
.LBB178_9:                              # %if.end49
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addq	$1028, %rcx             # imm = 0x404
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movq	-8(%rbp), %rdx
	movslq	72(%rdx), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB178_35
# %bb.10:                               # %if.then67
	movq	-8(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB178_26
# %bb.11:                               # %if.then70
	movl	$0, -12(%rbp)
.LBB178_12:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB178_25
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB178_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jle	.LBB178_15
# %bb.14:                               # %if.then75
                                        #   in Loop: Header=BB178_12 Depth=1
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	472(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB178_16
.LBB178_15:                             # %if.else86
                                        #   in Loop: Header=BB178_12 Depth=1
	movq	stats, %rax
	addq	$32, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	572(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB178_16:                             # %if.end94
                                        #   in Loop: Header=BB178_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	jne	.LBB178_23
# %bb.17:                               # %if.then99
                                        #   in Loop: Header=BB178_12 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB178_19
# %bb.18:                               # %land.lhs.true
                                        #   in Loop: Header=BB178_12 Depth=1
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB178_20
.LBB178_19:                             # %lor.lhs.false105
                                        #   in Loop: Header=BB178_12 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB178_21
.LBB178_20:                             # %if.then107
                                        #   in Loop: Header=BB178_12 Depth=1
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB178_22
.LBB178_21:                             # %if.else114
                                        #   in Loop: Header=BB178_12 Depth=1
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB178_22:                             # %if.end121
                                        #   in Loop: Header=BB178_12 Depth=1
	jmp	.LBB178_23
.LBB178_23:                             # %if.end122
                                        #   in Loop: Header=BB178_12 Depth=1
	jmp	.LBB178_24
.LBB178_24:                             # %for.inc
                                        #   in Loop: Header=BB178_12 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB178_12
.LBB178_25:                             # %for.end
	jmp	.LBB178_34
.LBB178_26:                             # %if.else124
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jl	.LBB178_33
# %bb.27:                               # %land.lhs.true127
	movq	-8(%rbp), %rax
	cmpl	$3, 72(%rax)
	jg	.LBB178_33
# %bb.28:                               # %land.lhs.true130
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB178_33
# %bb.29:                               # %if.then134
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB178_31
# %bb.30:                               # %if.then137
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB178_32
.LBB178_31:                             # %if.else146
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB178_32:                             # %if.end155
	jmp	.LBB178_33
.LBB178_33:                             # %if.end156
	jmp	.LBB178_34
.LBB178_34:                             # %if.end157
	jmp	.LBB178_35
.LBB178_35:                             # %if.end158
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB178_37
# %bb.36:                               # %lor.lhs.false161
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB178_38
.LBB178_37:                             # %if.then164
	movq	stats, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
.LBB178_38:                             # %if.end167
	cmpl	$532080092, -28(%rbp)   # imm = 0x1FB6E5DC
	jne	.LBB178_40
.LBB178_39:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB178_40:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB178_39
.Lfunc_end178:
	.size	proceed2nextMacroblock.137, .Lfunc_end178-proceed2nextMacroblock.137
	.cfi_endproc
                                        # -- End function
	.globl	proceed2nextMacroblock.138 # -- Begin function proceed2nextMacroblock.138
	.p2align	4, 0x90
	.type	proceed2nextMacroblock.138,@function
proceed2nextMacroblock.138:             # @proceed2nextMacroblock.138
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1909292073, -28(%rbp)  # imm = 0x71CD7C29
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1348(%rcx,%rdx,4), %eax
	movl	%eax, 1348(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1408(%rcx,%rdx,4), %eax
	movl	%eax, 1408(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1388(%rcx,%rdx,4), %eax
	movl	%eax, 1388(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1428(%rcx,%rdx,4), %eax
	movl	%eax, 1428(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	28(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1448(%rcx,%rdx,4), %eax
	movl	%eax, 1448(%rcx,%rdx,4)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB179_3
# %bb.1:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB179_3
# %bb.2:                                # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB179_9
.LBB179_3:                              # %if.then
	movq	stats, %rax
	movq	-8(%rbp), %rcx
	movslq	524(%rcx), %rcx
	movl	672(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 672(%rax,%rcx,4)
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB179_8
# %bb.4:                                # %if.then32
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB179_6
# %bb.5:                                # %if.then33
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB179_7
.LBB179_6:                              # %if.else
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB179_7:                              # %if.end
	jmp	.LBB179_8
.LBB179_8:                              # %if.end48
	jmp	.LBB179_9
.LBB179_9:                              # %if.end49
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addq	$1028, %rcx             # imm = 0x404
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movq	-8(%rbp), %rdx
	movslq	72(%rdx), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB179_35
# %bb.10:                               # %if.then67
	movq	-8(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB179_26
# %bb.11:                               # %if.then70
	movl	$0, -12(%rbp)
.LBB179_12:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB179_25
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB179_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jle	.LBB179_15
# %bb.14:                               # %if.then75
                                        #   in Loop: Header=BB179_12 Depth=1
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	472(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB179_16
.LBB179_15:                             # %if.else86
                                        #   in Loop: Header=BB179_12 Depth=1
	movq	stats, %rax
	addq	$32, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	572(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB179_16:                             # %if.end94
                                        #   in Loop: Header=BB179_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	jne	.LBB179_23
# %bb.17:                               # %if.then99
                                        #   in Loop: Header=BB179_12 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB179_19
# %bb.18:                               # %land.lhs.true
                                        #   in Loop: Header=BB179_12 Depth=1
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB179_20
.LBB179_19:                             # %lor.lhs.false105
                                        #   in Loop: Header=BB179_12 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB179_21
.LBB179_20:                             # %if.then107
                                        #   in Loop: Header=BB179_12 Depth=1
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB179_22
.LBB179_21:                             # %if.else114
                                        #   in Loop: Header=BB179_12 Depth=1
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB179_22:                             # %if.end121
                                        #   in Loop: Header=BB179_12 Depth=1
	jmp	.LBB179_23
.LBB179_23:                             # %if.end122
                                        #   in Loop: Header=BB179_12 Depth=1
	jmp	.LBB179_24
.LBB179_24:                             # %for.inc
                                        #   in Loop: Header=BB179_12 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB179_12
.LBB179_25:                             # %for.end
	jmp	.LBB179_34
.LBB179_26:                             # %if.else124
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jl	.LBB179_33
# %bb.27:                               # %land.lhs.true127
	movq	-8(%rbp), %rax
	cmpl	$3, 72(%rax)
	jg	.LBB179_33
# %bb.28:                               # %land.lhs.true130
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB179_33
# %bb.29:                               # %if.then134
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB179_31
# %bb.30:                               # %if.then137
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB179_32
.LBB179_31:                             # %if.else146
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB179_32:                             # %if.end155
	jmp	.LBB179_33
.LBB179_33:                             # %if.end156
	jmp	.LBB179_34
.LBB179_34:                             # %if.end157
	jmp	.LBB179_35
.LBB179_35:                             # %if.end158
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB179_37
# %bb.36:                               # %lor.lhs.false161
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB179_38
.LBB179_37:                             # %if.then164
	movq	stats, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
.LBB179_38:                             # %if.end167
	cmpl	$1909292073, -28(%rbp)  # imm = 0x71CD7C29
	jne	.LBB179_40
.LBB179_39:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB179_40:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB179_39
.Lfunc_end179:
	.size	proceed2nextMacroblock.138, .Lfunc_end179-proceed2nextMacroblock.138
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.139 # -- Begin function writeCoeff4x4_CAVLC.139
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.139,@function
writeCoeff4x4_CAVLC.139:                # @writeCoeff4x4_CAVLC.139
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$343922823, -168(%rbp)  # imm = 0x147FD887
	movl	%edi, -172(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -48(%rbp)
	movl	%ecx, -76(%rbp)
	movl	$0, -40(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -208(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -84(%rbp)
	movl	$0, -160(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -128(%rbp)
	movq	$0, -136(%rbp)
	movl	-172(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB180_22
# %bb.1:                                # %entry
	movq	.LJTI180_0(,%rax,8), %rax
	jmpq	*%rax
.LBB180_2:                              # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -72(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB180_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB180_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB180_6
.LBB180_5:                              # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB180_7
.LBB180_6:                              # %if.else
	movl	$14, -24(%rbp)
.LBB180_7:                              # %if.end
	jmp	.LBB180_23
.LBB180_8:                              # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -72(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB180_23
.LBB180_9:                              # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -72(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB180_23
.LBB180_10:                             # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$6, -52(%rbp)
	movl	$1, -84(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-76(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-76(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB180_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB180_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB180_14
.LBB180_13:                             # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB180_15
.LBB180_14:                             # %if.else66
	movl	$13, -24(%rbp)
.LBB180_15:                             # %if.end67
	jmp	.LBB180_23
.LBB180_16:                             # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -72(%rbp)
	movl	$6, -52(%rbp)
	movl	$1, -160(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB180_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB180_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB180_20
.LBB180_19:                             # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB180_21
.LBB180_20:                             # %if.else92
	movl	$15, -24(%rbp)
.LBB180_21:                             # %if.end93
	jmp	.LBB180_23
.LBB180_22:                             # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB180_23:                             # %sw.epilog
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -156(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -112(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB180_24:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -84(%rbp)
	je	.LBB180_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB180_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB180_27
.LBB180_26:                             # %cond.false
                                        #   in Loop: Header=BB180_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB180_27
.LBB180_27:                             # %cond.end
                                        #   in Loop: Header=BB180_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB180_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB180_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB180_29:                             # %land.end
                                        #   in Loop: Header=BB180_24 Depth=1
	testb	$1, %dl
	jne	.LBB180_30
	jmp	.LBB180_41
.LBB180_30:                             # %for.body
                                        #   in Loop: Header=BB180_24 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -88(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB180_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB180_24 Depth=1
	cmpl	$0, -88(%rbp)
	je	.LBB180_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB180_24 Depth=1
	movl	-88(%rbp), %eax
	addl	-112(%rbp), %eax
	movl	%eax, -112(%rbp)
.LBB180_33:                             # %if.end110
                                        #   in Loop: Header=BB180_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB180_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB180_24 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-156(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -156(%rbp)
	cmpl	$3, -32(%rbp)
	jle	.LBB180_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB180_24 Depth=1
	movl	$3, -32(%rbp)
.LBB180_36:                             # %if.end117
                                        #   in Loop: Header=BB180_24 Depth=1
	jmp	.LBB180_38
.LBB180_37:                             # %if.else118
                                        #   in Loop: Header=BB180_24 Depth=1
	movl	$0, -32(%rbp)
.LBB180_38:                             # %if.end119
                                        #   in Loop: Header=BB180_24 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB180_39:                             # %if.end121
                                        #   in Loop: Header=BB180_24 Depth=1
	jmp	.LBB180_40
.LBB180_40:                             # %for.inc
                                        #   in Loop: Header=BB180_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB180_24
.LBB180_41:                             # %for.end
	cmpl	$0, -84(%rbp)
	jne	.LBB180_61
# %bb.42:                               # %if.then124
	cmpl	$0, -160(%rbp)
	jne	.LBB180_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB180_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-48(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB180_46
.LBB180_45:                             # %cond.false132
	movl	-48(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB180_46:                             # %cond.end136
	movl	%eax, -80(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB180_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-48(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB180_49
.LBB180_48:                             # %cond.false142
	movl	-48(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB180_49:                             # %cond.end145
	movl	%eax, -96(%rbp)
	movl	-80(%rbp), %edi
	movl	-96(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -108(%rbp)
	jmp	.LBB180_51
.LBB180_50:                             # %if.else148
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -80(%rbp)
	movl	-76(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -96(%rbp)
	movl	-80(%rbp), %edi
	movl	-96(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -108(%rbp)
.LBB180_51:                             # %if.end151
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-96(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -108(%rbp)
	jge	.LBB180_53
# %bb.52:                               # %if.then160
	movl	$0, -92(%rbp)
	jmp	.LBB180_60
.LBB180_53:                             # %if.else161
	cmpl	$4, -108(%rbp)
	jge	.LBB180_55
# %bb.54:                               # %if.then163
	movl	$1, -92(%rbp)
	jmp	.LBB180_59
.LBB180_55:                             # %if.else164
	cmpl	$8, -108(%rbp)
	jge	.LBB180_57
# %bb.56:                               # %if.then166
	movl	$2, -92(%rbp)
	jmp	.LBB180_58
.LBB180_57:                             # %if.else167
	movl	$3, -92(%rbp)
.LBB180_58:                             # %if.end168
	jmp	.LBB180_59
.LBB180_59:                             # %if.end169
	jmp	.LBB180_60
.LBB180_60:                             # %if.end170
	jmp	.LBB180_62
.LBB180_61:                             # %if.else171
	movl	$0, -92(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -96(%rbp)
.LBB180_62:                             # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-92(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -84(%rbp)
	jne	.LBB180_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB180_65
.LBB180_64:                             # %if.else177
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB180_65:                             # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -36(%rbp)
	jne	.LBB180_67
# %bb.66:                               # %if.then189
	movl	-40(%rbp), %eax
	movl	%eax, -164(%rbp)
	jmp	.LBB180_122
.LBB180_67:                             # %if.end190
	cmpl	$0, -36(%rbp)
	je	.LBB180_121
# %bb.68:                               # %if.then192
	movl	$0, -104(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB180_69:                             # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	subl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB180_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB180_69 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB180_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB180_72:                             # %if.end202
                                        #   in Loop: Header=BB180_69 Depth=1
	movl	-104(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB180_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB180_69 Depth=1
	movl	-104(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -104(%rbp)
.LBB180_74:                             # %if.end205
                                        #   in Loop: Header=BB180_69 Depth=1
	jmp	.LBB180_75
.LBB180_75:                             # %for.inc206
                                        #   in Loop: Header=BB180_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB180_69
.LBB180_76:                             # %for.end207
	cmpl	$0, -32(%rbp)
	je	.LBB180_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-104(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB180_78:                             # %if.end223
	movl	$1, -144(%rbp)
	cmpl	$3, -36(%rbp)
	jle	.LBB180_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -32(%rbp)
	jne	.LBB180_81
# %bb.80:                               # %if.then226
	movl	$0, -144(%rbp)
.LBB180_81:                             # %if.end227
	cmpl	$10, -36(%rbp)
	jle	.LBB180_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -32(%rbp)
	jge	.LBB180_84
# %bb.83:                               # %if.then231
	movl	$1, -28(%rbp)
	jmp	.LBB180_85
.LBB180_84:                             # %if.else232
	movl	$0, -28(%rbp)
.LBB180_85:                             # %if.end233
	movl	-68(%rbp), %eax
	subl	-32(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB180_86:                             # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB180_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB180_86 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -144(%rbp)
	je	.LBB180_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB180_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB180_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB180_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB180_91
.LBB180_90:                             # %if.else249
                                        #   in Loop: Header=BB180_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB180_91:                             # %if.end252
                                        #   in Loop: Header=BB180_86 Depth=1
	movl	$0, -144(%rbp)
.LBB180_92:                             # %if.end253
                                        #   in Loop: Header=BB180_86 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB180_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB180_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB180_95
.LBB180_94:                             # %if.else257
                                        #   in Loop: Header=BB180_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-28(%rbp), %esi
	movq	-120(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB180_95:                             # %if.end259
                                        #   in Loop: Header=BB180_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB180_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB180_86 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
.LBB180_97:                             # %if.end266
                                        #   in Loop: Header=BB180_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	subl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB180_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB180_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB180_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB180_86 Depth=1
	movl	$2, -28(%rbp)
.LBB180_100:                            # %if.end273
                                        #   in Loop: Header=BB180_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB180_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB180_86
.LBB180_102:                            # %for.end285
	movl	-36(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB180_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-112(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -84(%rbp)
	jne	.LBB180_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB180_106
.LBB180_105:                            # %if.else295
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB180_106:                            # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB180_107:                            # %if.end307
	movl	-112(%rbp), %eax
	movl	%eax, -100(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB180_108:                            # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB180_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB180_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB180_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB180_108 Depth=1
	cmpl	$0, -100(%rbp)
	jne	.LBB180_112
.LBB180_111:                            # %if.then318
	jmp	.LBB180_120
.LBB180_112:                            # %if.end319
                                        #   in Loop: Header=BB180_108 Depth=1
	cmpl	$1, -140(%rbp)
	jle	.LBB180_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB180_108 Depth=1
	cmpl	$0, -100(%rbp)
	je	.LBB180_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB180_108 Depth=1
	movl	-100(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	cmpl	$6, -28(%rbp)
	jle	.LBB180_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB180_108 Depth=1
	movl	$6, -28(%rbp)
.LBB180_116:                            # %if.end327
                                        #   in Loop: Header=BB180_108 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-88(%rbp), %eax
	movl	-100(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -100(%rbp)
	movl	-140(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -140(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB180_117:                            # %if.end341
                                        #   in Loop: Header=BB180_108 Depth=1
	jmp	.LBB180_118
.LBB180_118:                            # %for.inc342
                                        #   in Loop: Header=BB180_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB180_108
.LBB180_119:                            # %for.end344.loopexit
	jmp	.LBB180_120
.LBB180_120:                            # %for.end344
	jmp	.LBB180_121
.LBB180_121:                            # %if.end345
	movl	-40(%rbp), %eax
	movl	%eax, -164(%rbp)
.LBB180_122:                            # %return
	movl	-164(%rbp), %ebx
	cmpl	$343922823, -168(%rbp)  # imm = 0x147FD887
	jne	.LBB180_124
.LBB180_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB180_124:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB180_123
.Lfunc_end180:
	.size	writeCoeff4x4_CAVLC.139, .Lfunc_end180-writeCoeff4x4_CAVLC.139
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI180_0:
	.quad	.LBB180_2
	.quad	.LBB180_8
	.quad	.LBB180_9
	.quad	.LBB180_22
	.quad	.LBB180_22
	.quad	.LBB180_22
	.quad	.LBB180_10
	.quad	.LBB180_16
                                        # -- End function
	.text
	.globl	writeChromaCoeff.140    # -- Begin function writeChromaCoeff.140
	.p2align	4, 0x90
	.type	writeChromaCoeff.140,@function
writeChromaCoeff.140:                   # @writeChromaCoeff.140
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$1011905137, -84(%rbp)  # imm = 0x3C507271
	movl	$0, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB181_24
# %bb.1:                                # %if.then
	movl	$0, -24(%rbp)
.LBB181_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB181_6 Depth 2
	cmpl	$2, -24(%rbp)
	jge	.LBB181_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB181_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB181_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB181_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB181_21
.LBB181_5:                              # %if.else
                                        #   in Loop: Header=BB181_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -20(%rbp)
.LBB181_6:                              # %for.cond18
                                        #   Parent Loop BB181_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-20(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB181_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB181_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB181_8:                              # %land.end
                                        #   in Loop: Header=BB181_6 Depth=2
	testb	$1, %al
	jne	.LBB181_9
	jmp	.LBB181_20
.LBB181_9:                              # %for.body21
                                        #   in Loop: Header=BB181_6 Depth=2
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-144(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB181_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB181_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB181_12
.LBB181_11:                             # %if.else29
                                        #   in Loop: Header=BB181_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB181_12:                             # %if.end
                                        #   in Loop: Header=BB181_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB181_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB181_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB181_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB181_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB181_15:                             # %lor.end
                                        #   in Loop: Header=BB181_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB181_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB181_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB181_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB181_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB181_18:                             # %lor.end45
                                        #   in Loop: Header=BB181_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB181_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB181_6
.LBB181_20:                             # %for.end
                                        #   in Loop: Header=BB181_2 Depth=1
	jmp	.LBB181_21
.LBB181_21:                             # %if.end58
                                        #   in Loop: Header=BB181_2 Depth=1
	jmp	.LBB181_22
.LBB181_22:                             # %for.inc59
                                        #   in Loop: Header=BB181_2 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB181_2
.LBB181_23:                             # %for.end61
	jmp	.LBB181_24
.LBB181_24:                             # %if.end62
	movl	$-1, -24(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB181_52
# %bb.25:                               # %if.then64
	movl	$4, -32(%rbp)
.LBB181_26:                             # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB181_28 Depth 2
                                        #       Child Loop BB181_32 Depth 3
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB181_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB181_26 Depth=1
	movl	$0, -36(%rbp)
.LBB181_28:                             # %for.cond69
                                        #   Parent Loop BB181_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB181_32 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB181_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB181_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB181_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB181_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-32(%rbp), %esi
	movl	-36(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB181_47
.LBB181_31:                             # %if.else84
                                        #   in Loop: Header=BB181_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movl	$1, -52(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -20(%rbp)
.LBB181_32:                             # %for.cond115
                                        #   Parent Loop BB181_26 Depth=1
                                        #     Parent Loop BB181_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -20(%rbp)
	jge	.LBB181_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB181_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB181_34:                             # %land.end121
                                        #   in Loop: Header=BB181_32 Depth=3
	testb	$1, %al
	jne	.LBB181_35
	jmp	.LBB181_46
.LBB181_35:                             # %for.body122
                                        #   in Loop: Header=BB181_32 Depth=3
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB181_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB181_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB181_38
.LBB181_37:                             # %if.else134
                                        #   in Loop: Header=BB181_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB181_38:                             # %if.end136
                                        #   in Loop: Header=BB181_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB181_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB181_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB181_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB181_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB181_41:                             # %lor.end149
                                        #   in Loop: Header=BB181_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB181_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB181_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB181_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB181_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB181_44:                             # %lor.end164
                                        #   in Loop: Header=BB181_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB181_32 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB181_32
.LBB181_46:                             # %for.end189
                                        #   in Loop: Header=BB181_28 Depth=2
	jmp	.LBB181_47
.LBB181_47:                             # %if.end190
                                        #   in Loop: Header=BB181_28 Depth=2
	jmp	.LBB181_48
.LBB181_48:                             # %for.inc191
                                        #   in Loop: Header=BB181_28 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB181_28
.LBB181_49:                             # %for.end193
                                        #   in Loop: Header=BB181_26 Depth=1
	jmp	.LBB181_50
.LBB181_50:                             # %for.inc194
                                        #   in Loop: Header=BB181_26 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB181_26
.LBB181_51:                             # %for.end196
	jmp	.LBB181_52
.LBB181_52:                             # %if.end197
	movl	-28(%rbp), %ebx
	cmpl	$1011905137, -84(%rbp)  # imm = 0x3C507271
	jne	.LBB181_54
.LBB181_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB181_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB181_53
.Lfunc_end181:
	.size	writeChromaCoeff.140, .Lfunc_end181-writeChromaCoeff.140
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big.141       # -- Begin function slice_too_big.141
	.p2align	4, 0x90
	.type	slice_too_big.141,@function
slice_too_big.141:                      # @slice_too_big.141
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1968303254, -56(%rbp)  # imm = 0x7551EC96
	movl	%edi, -52(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB182_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB182_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB182_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB182_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB182_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB182_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB182_5:                              # %if.end
                                        #   in Loop: Header=BB182_2 Depth=1
	movq	-48(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB182_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB182_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB182_7:                              # %if.end8
                                        #   in Loop: Header=BB182_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB182_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB182_21
.LBB182_9:                              # %if.end11
                                        #   in Loop: Header=BB182_2 Depth=1
	jmp	.LBB182_10
.LBB182_10:                             # %for.inc
                                        #   in Loop: Header=BB182_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB182_2
.LBB182_11:                             # %for.end
	jmp	.LBB182_12
.LBB182_12:                             # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB182_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB182_14:                             # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB182_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB182_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB182_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB182_21
.LBB182_17:                             # %if.end27
                                        #   in Loop: Header=BB182_14 Depth=1
	jmp	.LBB182_18
.LBB182_18:                             # %for.inc28
                                        #   in Loop: Header=BB182_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB182_14
.LBB182_19:                             # %for.end30
	jmp	.LBB182_20
.LBB182_20:                             # %if.end31
	movl	$0, -20(%rbp)
.LBB182_21:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1968303254, -56(%rbp)  # imm = 0x7551EC96
	jne	.LBB182_23
.LBB182_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB182_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB182_22
.Lfunc_end182:
	.size	slice_too_big.141, .Lfunc_end182-slice_too_big.141
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.142    # -- Begin function start_macroblock.142
	.p2align	4, 0x90
	.type	start_macroblock.142,@function
start_macroblock.142:                   # @start_macroblock.142
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1530563903, -84(%rbp)  # imm = 0x5B3A8D3F
	movl	%edi, -52(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB183_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB183_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -44(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-52(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -88(%rbp)
	je	.LBB183_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB183_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB183_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB183_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB183_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB183_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB183_5 Depth=1
	movq	-96(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB183_8:                              # %if.end
                                        #   in Loop: Header=BB183_5 Depth=1
	jmp	.LBB183_9
.LBB183_9:                              # %for.inc
                                        #   in Loop: Header=BB183_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB183_5
.LBB183_10:                             # %for.end
	jmp	.LBB183_11
.LBB183_11:                             # %if.end19
	jmp	.LBB183_12
.LBB183_12:                             # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB183_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -48(%rbp)
	cmpl	$-1, -48(%rbp)
	jle	.LBB183_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB183_16
.LBB183_15:                             # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB183_16:                             # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB183_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB183_97
.LBB183_18:                             # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB183_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB183_21
.LBB183_20:                             # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB183_96
.LBB183_21:                             # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB183_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB183_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB183_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB183_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB183_34
.LBB183_26:                             # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB183_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB183_32
.LBB183_28:                             # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB183_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB183_31
.LBB183_30:                             # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB183_31:                             # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB183_33
.LBB183_32:                             # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB183_33:                             # %if.end112
	jmp	.LBB183_34
.LBB183_34:                             # %if.end113
	jmp	.LBB183_39
.LBB183_35:                             # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB183_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB183_38
.LBB183_37:                             # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB183_38:                             # %if.end125
	jmp	.LBB183_39
.LBB183_39:                             # %if.end126
	jmp	.LBB183_47
.LBB183_40:                             # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB183_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB183_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB183_44
.LBB183_43:                             # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB183_44:                             # %if.end140
	jmp	.LBB183_46
.LBB183_45:                             # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB183_46:                             # %if.end145
	jmp	.LBB183_47
.LBB183_47:                             # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB183_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB183_93
.LBB183_49:                             # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB183_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB183_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB183_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB183_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB183_74
.LBB183_54:                             # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB183_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB183_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB183_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB183_73
.LBB183_58:                             # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB183_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB183_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB183_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB183_72
.LBB183_62:                             # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB183_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB183_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB183_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB183_71
.LBB183_66:                             # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB183_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB183_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB183_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB183_70:                             # %if.end223
	jmp	.LBB183_71
.LBB183_71:                             # %if.end224
	jmp	.LBB183_72
.LBB183_72:                             # %if.end225
	jmp	.LBB183_73
.LBB183_73:                             # %if.end226
	jmp	.LBB183_74
.LBB183_74:                             # %if.end227
	jmp	.LBB183_75
.LBB183_75:                             # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB183_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB183_77:                             # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB183_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB183_82
.LBB183_79:                             # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB183_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB183_81:                             # %if.end256
	jmp	.LBB183_82
.LBB183_82:                             # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB183_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-44(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB183_88
.LBB183_84:                             # %if.else275
	movl	dq, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB183_86
# %bb.85:                               # %if.then278
	movl	-40(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB183_87
.LBB183_86:                             # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB183_87:                             # %if.end292
	jmp	.LBB183_88
.LBB183_88:                             # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB183_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB183_90:                             # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB183_92
.LBB183_91:                             # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB183_92:                             # %if.end305
	jmp	.LBB183_94
.LBB183_93:                             # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB183_94:                             # %if.end309
	jmp	.LBB183_95
.LBB183_95:                             # %if.end310
	jmp	.LBB183_96
.LBB183_96:                             # %if.end311
	jmp	.LBB183_97
.LBB183_97:                             # %if.end312
	jmp	.LBB183_102
.LBB183_98:                             # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -56(%rbp)
	cmpl	$-1, -56(%rbp)
	jle	.LBB183_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB183_101
.LBB183_100:                            # %if.else331
	movq	-104(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB183_101:                            # %if.end335
	movq	-104(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB183_102:                            # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB183_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB183_105
.LBB183_104:                            # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB183_105:                            # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB183_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB183_107:                            # %if.end359
	movl	$0, -16(%rbp)
.LBB183_108:                            # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB183_110 Depth 2
                                        #       Child Loop BB183_112 Depth 3
                                        #         Child Loop BB183_114 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB183_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB183_108 Depth=1
	movl	$0, -20(%rbp)
.LBB183_110:                            # %for.cond364
                                        #   Parent Loop BB183_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB183_112 Depth 3
                                        #         Child Loop BB183_114 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB183_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB183_110 Depth=2
	movl	$0, -12(%rbp)
.LBB183_112:                            # %for.cond368
                                        #   Parent Loop BB183_108 Depth=1
                                        #     Parent Loop BB183_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB183_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB183_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB183_112 Depth=3
	movl	$0, -36(%rbp)
.LBB183_114:                            # %for.cond372
                                        #   Parent Loop BB183_108 Depth=1
                                        #     Parent Loop BB183_110 Depth=2
                                        #       Parent Loop BB183_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB183_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB183_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB183_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB183_114
.LBB183_117:                            # %for.end388
                                        #   in Loop: Header=BB183_112 Depth=3
	jmp	.LBB183_118
.LBB183_118:                            # %for.inc389
                                        #   in Loop: Header=BB183_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB183_112
.LBB183_119:                            # %for.end391
                                        #   in Loop: Header=BB183_110 Depth=2
	jmp	.LBB183_120
.LBB183_120:                            # %for.inc392
                                        #   in Loop: Header=BB183_110 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB183_110
.LBB183_121:                            # %for.end394
                                        #   in Loop: Header=BB183_108 Depth=1
	jmp	.LBB183_122
.LBB183_122:                            # %for.inc395
                                        #   in Loop: Header=BB183_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB183_108
.LBB183_123:                            # %for.end397
	movl	$0, -20(%rbp)
.LBB183_124:                            # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB183_126 Depth 2
                                        #       Child Loop BB183_128 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB183_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB183_124 Depth=1
	movl	$0, -12(%rbp)
.LBB183_126:                            # %for.cond402
                                        #   Parent Loop BB183_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB183_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB183_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB183_126 Depth=2
	movl	$0, -16(%rbp)
.LBB183_128:                            # %for.cond406
                                        #   Parent Loop BB183_124 Depth=1
                                        #     Parent Loop BB183_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -16(%rbp)
	jge	.LBB183_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB183_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB183_128 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB183_128
.LBB183_131:                            # %for.end432
                                        #   in Loop: Header=BB183_126 Depth=2
	jmp	.LBB183_132
.LBB183_132:                            # %for.inc433
                                        #   in Loop: Header=BB183_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB183_126
.LBB183_133:                            # %for.end435
                                        #   in Loop: Header=BB183_124 Depth=1
	jmp	.LBB183_134
.LBB183_134:                            # %for.inc436
                                        #   in Loop: Header=BB183_124 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB183_124
.LBB183_135:                            # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -16(%rbp)
.LBB183_136:                            # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB183_138 Depth 2
                                        #       Child Loop BB183_140 Depth 3
                                        #         Child Loop BB183_142 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB183_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB183_136 Depth=1
	movl	$0, -20(%rbp)
.LBB183_138:                            # %for.cond443
                                        #   Parent Loop BB183_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB183_140 Depth 3
                                        #         Child Loop BB183_142 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB183_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB183_138 Depth=2
	movl	$0, -12(%rbp)
.LBB183_140:                            # %for.cond447
                                        #   Parent Loop BB183_136 Depth=1
                                        #     Parent Loop BB183_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB183_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB183_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB183_140 Depth=3
	movl	$0, -36(%rbp)
.LBB183_142:                            # %for.cond451
                                        #   Parent Loop BB183_136 Depth=1
                                        #     Parent Loop BB183_138 Depth=2
                                        #       Parent Loop BB183_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB183_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB183_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-16(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB183_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB183_142
.LBB183_145:                            # %for.end465
                                        #   in Loop: Header=BB183_140 Depth=3
	jmp	.LBB183_146
.LBB183_146:                            # %for.inc466
                                        #   in Loop: Header=BB183_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB183_140
.LBB183_147:                            # %for.end468
                                        #   in Loop: Header=BB183_138 Depth=2
	jmp	.LBB183_148
.LBB183_148:                            # %for.inc469
                                        #   in Loop: Header=BB183_138 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB183_138
.LBB183_149:                            # %for.end471
                                        #   in Loop: Header=BB183_136 Depth=1
	jmp	.LBB183_150
.LBB183_150:                            # %for.inc472
                                        #   in Loop: Header=BB183_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB183_136
.LBB183_151:                            # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB183_152:                            # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB183_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB183_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB183_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB183_152
.LBB183_155:                            # %for.end483
	movl	$0, -12(%rbp)
.LBB183_156:                            # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB183_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB183_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB183_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB183_156
.LBB183_159:                            # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB183_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB183_161:                            # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB183_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB183_166
.LBB183_163:                            # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB183_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB183_165:                            # %if.end520
	jmp	.LBB183_166
.LBB183_166:                            # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB183_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB183_168:                            # %if.end536
	cmpl	$1530563903, -84(%rbp)  # imm = 0x5B3A8D3F
	jne	.LBB183_170
.LBB183_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB183_170:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB183_169
.Lfunc_end183:
	.size	start_macroblock.142, .Lfunc_end183-start_macroblock.142
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value.143        # -- Begin function MBType2Value.143
	.p2align	4, 0x90
	.type	MBType2Value.143,@function
MBType2Value.143:                       # @MBType2Value.143
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1992894881, -36(%rbp)  # imm = 0x76C929A1
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB184_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB184_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB184_4
.LBB184_3:                              # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB184_26
.LBB184_4:                              # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB184_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB184_26
.LBB184_6:                              # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB184_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB184_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB184_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB184_26
.LBB184_10:                             # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB184_26
.LBB184_11:                             # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB184_26
.LBB184_12:                             # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB184_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB184_26
.LBB184_14:                             # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB184_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB184_17
.LBB184_16:                             # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB184_26
.LBB184_17:                             # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB184_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB184_26
.LBB184_19:                             # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB184_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB184_26
.LBB184_21:                             # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB184_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB184_26
.LBB184_23:                             # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB184_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB184_26
.LBB184_25:                             # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB184_26:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$1992894881, -36(%rbp)  # imm = 0x76C929A1
	jne	.LBB184_28
.LBB184_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB184_28:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB184_27
.Lfunc_end184:
	.size	MBType2Value.143, .Lfunc_end184-MBType2Value.143
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.144 # -- Begin function writeCoeff4x4_CAVLC.144
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.144,@function
writeCoeff4x4_CAVLC.144:                # @writeCoeff4x4_CAVLC.144
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$1814652280, -168(%rbp) # imm = 0x6C296578
	movl	%edi, -172(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -52(%rbp)
	movl	%ecx, -76(%rbp)
	movl	$0, -36(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -208(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -96(%rbp)
	movl	$0, -156(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -120(%rbp)
	movq	$0, -136(%rbp)
	movl	-172(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB185_22
# %bb.1:                                # %entry
	movq	.LJTI185_0(,%rax,8), %rax
	jmpq	*%rax
.LBB185_2:                              # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -72(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB185_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB185_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB185_6
.LBB185_5:                              # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB185_7
.LBB185_6:                              # %if.else
	movl	$14, -24(%rbp)
.LBB185_7:                              # %if.end
	jmp	.LBB185_23
.LBB185_8:                              # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -72(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB185_23
.LBB185_9:                              # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -72(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB185_23
.LBB185_10:                             # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -96(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-76(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-76(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB185_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB185_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB185_14
.LBB185_13:                             # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB185_15
.LBB185_14:                             # %if.else66
	movl	$13, -24(%rbp)
.LBB185_15:                             # %if.end67
	jmp	.LBB185_23
.LBB185_16:                             # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -72(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -156(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB185_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB185_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB185_20
.LBB185_19:                             # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB185_21
.LBB185_20:                             # %if.else92
	movl	$15, -24(%rbp)
.LBB185_21:                             # %if.end93
	jmp	.LBB185_23
.LBB185_22:                             # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB185_23:                             # %sw.epilog
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -160(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -108(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB185_24:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -96(%rbp)
	je	.LBB185_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB185_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB185_27
.LBB185_26:                             # %cond.false
                                        #   in Loop: Header=BB185_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB185_27
.LBB185_27:                             # %cond.end
                                        #   in Loop: Header=BB185_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB185_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB185_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB185_29:                             # %land.end
                                        #   in Loop: Header=BB185_24 Depth=1
	testb	$1, %dl
	jne	.LBB185_30
	jmp	.LBB185_41
.LBB185_30:                             # %for.body
                                        #   in Loop: Header=BB185_24 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -84(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB185_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB185_24 Depth=1
	cmpl	$0, -84(%rbp)
	je	.LBB185_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB185_24 Depth=1
	movl	-84(%rbp), %eax
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
.LBB185_33:                             # %if.end110
                                        #   in Loop: Header=BB185_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB185_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB185_24 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-160(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -160(%rbp)
	cmpl	$3, -32(%rbp)
	jle	.LBB185_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB185_24 Depth=1
	movl	$3, -32(%rbp)
.LBB185_36:                             # %if.end117
                                        #   in Loop: Header=BB185_24 Depth=1
	jmp	.LBB185_38
.LBB185_37:                             # %if.else118
                                        #   in Loop: Header=BB185_24 Depth=1
	movl	$0, -32(%rbp)
.LBB185_38:                             # %if.end119
                                        #   in Loop: Header=BB185_24 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB185_39:                             # %if.end121
                                        #   in Loop: Header=BB185_24 Depth=1
	jmp	.LBB185_40
.LBB185_40:                             # %for.inc
                                        #   in Loop: Header=BB185_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB185_24
.LBB185_41:                             # %for.end
	cmpl	$0, -96(%rbp)
	jne	.LBB185_61
# %bb.42:                               # %if.then124
	cmpl	$0, -156(%rbp)
	jne	.LBB185_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB185_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB185_46
.LBB185_45:                             # %cond.false132
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB185_46:                             # %cond.end136
	movl	%eax, -92(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB185_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB185_49
.LBB185_48:                             # %cond.false142
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB185_49:                             # %cond.end145
	movl	%eax, -100(%rbp)
	movl	-92(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -112(%rbp)
	jmp	.LBB185_51
.LBB185_50:                             # %if.else148
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -92(%rbp)
	movl	-76(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -100(%rbp)
	movl	-92(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -112(%rbp)
.LBB185_51:                             # %if.end151
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-92(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -112(%rbp)
	jge	.LBB185_53
# %bb.52:                               # %if.then160
	movl	$0, -104(%rbp)
	jmp	.LBB185_60
.LBB185_53:                             # %if.else161
	cmpl	$4, -112(%rbp)
	jge	.LBB185_55
# %bb.54:                               # %if.then163
	movl	$1, -104(%rbp)
	jmp	.LBB185_59
.LBB185_55:                             # %if.else164
	cmpl	$8, -112(%rbp)
	jge	.LBB185_57
# %bb.56:                               # %if.then166
	movl	$2, -104(%rbp)
	jmp	.LBB185_58
.LBB185_57:                             # %if.else167
	movl	$3, -104(%rbp)
.LBB185_58:                             # %if.end168
	jmp	.LBB185_59
.LBB185_59:                             # %if.end169
	jmp	.LBB185_60
.LBB185_60:                             # %if.end170
	jmp	.LBB185_62
.LBB185_61:                             # %if.else171
	movl	$0, -104(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB185_62:                             # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-104(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -96(%rbp)
	jne	.LBB185_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB185_65
.LBB185_64:                             # %if.else177
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB185_65:                             # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -40(%rbp)
	jne	.LBB185_67
# %bb.66:                               # %if.then189
	movl	-36(%rbp), %eax
	movl	%eax, -164(%rbp)
	jmp	.LBB185_122
.LBB185_67:                             # %if.end190
	cmpl	$0, -40(%rbp)
	je	.LBB185_121
# %bb.68:                               # %if.then192
	movl	$0, -80(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB185_69:                             # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	subl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB185_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB185_69 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB185_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB185_72:                             # %if.end202
                                        #   in Loop: Header=BB185_69 Depth=1
	movl	-80(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB185_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB185_69 Depth=1
	movl	-80(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -80(%rbp)
.LBB185_74:                             # %if.end205
                                        #   in Loop: Header=BB185_69 Depth=1
	jmp	.LBB185_75
.LBB185_75:                             # %for.inc206
                                        #   in Loop: Header=BB185_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB185_69
.LBB185_76:                             # %for.end207
	cmpl	$0, -32(%rbp)
	je	.LBB185_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB185_78:                             # %if.end223
	movl	$1, -140(%rbp)
	cmpl	$3, -40(%rbp)
	jle	.LBB185_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -32(%rbp)
	jne	.LBB185_81
# %bb.80:                               # %if.then226
	movl	$0, -140(%rbp)
.LBB185_81:                             # %if.end227
	cmpl	$10, -40(%rbp)
	jle	.LBB185_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -32(%rbp)
	jge	.LBB185_84
# %bb.83:                               # %if.then231
	movl	$1, -28(%rbp)
	jmp	.LBB185_85
.LBB185_84:                             # %if.else232
	movl	$0, -28(%rbp)
.LBB185_85:                             # %if.end233
	movl	-68(%rbp), %eax
	subl	-32(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB185_86:                             # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB185_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB185_86 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -140(%rbp)
	je	.LBB185_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB185_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB185_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB185_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB185_91
.LBB185_90:                             # %if.else249
                                        #   in Loop: Header=BB185_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB185_91:                             # %if.end252
                                        #   in Loop: Header=BB185_86 Depth=1
	movl	$0, -140(%rbp)
.LBB185_92:                             # %if.end253
                                        #   in Loop: Header=BB185_86 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB185_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB185_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB185_95
.LBB185_94:                             # %if.else257
                                        #   in Loop: Header=BB185_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-28(%rbp), %esi
	movq	-128(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB185_95:                             # %if.end259
                                        #   in Loop: Header=BB185_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB185_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB185_86 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
.LBB185_97:                             # %if.end266
                                        #   in Loop: Header=BB185_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	subl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB185_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB185_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB185_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB185_86 Depth=1
	movl	$2, -28(%rbp)
.LBB185_100:                            # %if.end273
                                        #   in Loop: Header=BB185_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB185_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB185_86
.LBB185_102:                            # %for.end285
	movl	-40(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB185_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-108(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-40(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -96(%rbp)
	jne	.LBB185_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB185_106
.LBB185_105:                            # %if.else295
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB185_106:                            # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB185_107:                            # %if.end307
	movl	-108(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB185_108:                            # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB185_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB185_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -40(%rbp)
	jle	.LBB185_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB185_108 Depth=1
	cmpl	$0, -88(%rbp)
	jne	.LBB185_112
.LBB185_111:                            # %if.then318
	jmp	.LBB185_120
.LBB185_112:                            # %if.end319
                                        #   in Loop: Header=BB185_108 Depth=1
	cmpl	$1, -144(%rbp)
	jle	.LBB185_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB185_108 Depth=1
	cmpl	$0, -88(%rbp)
	je	.LBB185_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB185_108 Depth=1
	movl	-88(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	cmpl	$6, -28(%rbp)
	jle	.LBB185_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB185_108 Depth=1
	movl	$6, -28(%rbp)
.LBB185_116:                            # %if.end327
                                        #   in Loop: Header=BB185_108 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-84(%rbp), %eax
	movl	-88(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -88(%rbp)
	movl	-144(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -144(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB185_117:                            # %if.end341
                                        #   in Loop: Header=BB185_108 Depth=1
	jmp	.LBB185_118
.LBB185_118:                            # %for.inc342
                                        #   in Loop: Header=BB185_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB185_108
.LBB185_119:                            # %for.end344.loopexit
	jmp	.LBB185_120
.LBB185_120:                            # %for.end344
	jmp	.LBB185_121
.LBB185_121:                            # %if.end345
	movl	-36(%rbp), %eax
	movl	%eax, -164(%rbp)
.LBB185_122:                            # %return
	movl	-164(%rbp), %ebx
	cmpl	$1814652280, -168(%rbp) # imm = 0x6C296578
	jne	.LBB185_124
.LBB185_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB185_124:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB185_123
.Lfunc_end185:
	.size	writeCoeff4x4_CAVLC.144, .Lfunc_end185-writeCoeff4x4_CAVLC.144
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI185_0:
	.quad	.LBB185_2
	.quad	.LBB185_8
	.quad	.LBB185_9
	.quad	.LBB185_22
	.quad	.LBB185_22
	.quad	.LBB185_22
	.quad	.LBB185_10
	.quad	.LBB185_16
                                        # -- End function
	.text
	.globl	slice_too_big.145       # -- Begin function slice_too_big.145
	.p2align	4, 0x90
	.type	slice_too_big.145,@function
slice_too_big.145:                      # @slice_too_big.145
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1270607636, -52(%rbp)  # imm = 0x4BBBEF14
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB186_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB186_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB186_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB186_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB186_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB186_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB186_5:                              # %if.end
                                        #   in Loop: Header=BB186_2 Depth=1
	movq	-40(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB186_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB186_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB186_7:                              # %if.end8
                                        #   in Loop: Header=BB186_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB186_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB186_21
.LBB186_9:                              # %if.end11
                                        #   in Loop: Header=BB186_2 Depth=1
	jmp	.LBB186_10
.LBB186_10:                             # %for.inc
                                        #   in Loop: Header=BB186_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB186_2
.LBB186_11:                             # %for.end
	jmp	.LBB186_12
.LBB186_12:                             # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB186_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB186_14:                             # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB186_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB186_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB186_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB186_21
.LBB186_17:                             # %if.end27
                                        #   in Loop: Header=BB186_14 Depth=1
	jmp	.LBB186_18
.LBB186_18:                             # %for.inc28
                                        #   in Loop: Header=BB186_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB186_14
.LBB186_19:                             # %for.end30
	jmp	.LBB186_20
.LBB186_20:                             # %if.end31
	movl	$0, -20(%rbp)
.LBB186_21:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1270607636, -52(%rbp)  # imm = 0x4BBBEF14
	jne	.LBB186_23
.LBB186_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB186_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB186_22
.Lfunc_end186:
	.size	slice_too_big.145, .Lfunc_end186-slice_too_big.145
	.cfi_endproc
                                        # -- End function
	.globl	proceed2nextMacroblock.146 # -- Begin function proceed2nextMacroblock.146
	.p2align	4, 0x90
	.type	proceed2nextMacroblock.146,@function
proceed2nextMacroblock.146:             # @proceed2nextMacroblock.146
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2102299110, -28(%rbp)  # imm = 0x7D4E89E6
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1348(%rcx,%rdx,4), %eax
	movl	%eax, 1348(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1408(%rcx,%rdx,4), %eax
	movl	%eax, 1408(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1388(%rcx,%rdx,4), %eax
	movl	%eax, 1388(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1428(%rcx,%rdx,4), %eax
	movl	%eax, 1428(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	28(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1448(%rcx,%rdx,4), %eax
	movl	%eax, 1448(%rcx,%rdx,4)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB187_3
# %bb.1:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB187_3
# %bb.2:                                # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB187_9
.LBB187_3:                              # %if.then
	movq	stats, %rax
	movq	-8(%rbp), %rcx
	movslq	524(%rcx), %rcx
	movl	672(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 672(%rax,%rcx,4)
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB187_8
# %bb.4:                                # %if.then32
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB187_6
# %bb.5:                                # %if.then33
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB187_7
.LBB187_6:                              # %if.else
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB187_7:                              # %if.end
	jmp	.LBB187_8
.LBB187_8:                              # %if.end48
	jmp	.LBB187_9
.LBB187_9:                              # %if.end49
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addq	$1028, %rcx             # imm = 0x404
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movq	-8(%rbp), %rdx
	movslq	72(%rdx), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB187_35
# %bb.10:                               # %if.then67
	movq	-8(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB187_26
# %bb.11:                               # %if.then70
	movl	$0, -12(%rbp)
.LBB187_12:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB187_25
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB187_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jle	.LBB187_15
# %bb.14:                               # %if.then75
                                        #   in Loop: Header=BB187_12 Depth=1
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	472(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB187_16
.LBB187_15:                             # %if.else86
                                        #   in Loop: Header=BB187_12 Depth=1
	movq	stats, %rax
	addq	$32, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	572(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB187_16:                             # %if.end94
                                        #   in Loop: Header=BB187_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	jne	.LBB187_23
# %bb.17:                               # %if.then99
                                        #   in Loop: Header=BB187_12 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB187_19
# %bb.18:                               # %land.lhs.true
                                        #   in Loop: Header=BB187_12 Depth=1
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB187_20
.LBB187_19:                             # %lor.lhs.false105
                                        #   in Loop: Header=BB187_12 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB187_21
.LBB187_20:                             # %if.then107
                                        #   in Loop: Header=BB187_12 Depth=1
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB187_22
.LBB187_21:                             # %if.else114
                                        #   in Loop: Header=BB187_12 Depth=1
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB187_22:                             # %if.end121
                                        #   in Loop: Header=BB187_12 Depth=1
	jmp	.LBB187_23
.LBB187_23:                             # %if.end122
                                        #   in Loop: Header=BB187_12 Depth=1
	jmp	.LBB187_24
.LBB187_24:                             # %for.inc
                                        #   in Loop: Header=BB187_12 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB187_12
.LBB187_25:                             # %for.end
	jmp	.LBB187_34
.LBB187_26:                             # %if.else124
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jl	.LBB187_33
# %bb.27:                               # %land.lhs.true127
	movq	-8(%rbp), %rax
	cmpl	$3, 72(%rax)
	jg	.LBB187_33
# %bb.28:                               # %land.lhs.true130
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB187_33
# %bb.29:                               # %if.then134
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB187_31
# %bb.30:                               # %if.then137
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB187_32
.LBB187_31:                             # %if.else146
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB187_32:                             # %if.end155
	jmp	.LBB187_33
.LBB187_33:                             # %if.end156
	jmp	.LBB187_34
.LBB187_34:                             # %if.end157
	jmp	.LBB187_35
.LBB187_35:                             # %if.end158
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB187_37
# %bb.36:                               # %lor.lhs.false161
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB187_38
.LBB187_37:                             # %if.then164
	movq	stats, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
.LBB187_38:                             # %if.end167
	cmpl	$2102299110, -28(%rbp)  # imm = 0x7D4E89E6
	jne	.LBB187_40
.LBB187_39:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB187_40:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB187_39
.Lfunc_end187:
	.size	proceed2nextMacroblock.146, .Lfunc_end187-proceed2nextMacroblock.146
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz.147         # -- Begin function predict_nnz.147
	.p2align	4, 0x90
	.type	predict_nnz.147,@function
predict_nnz.147:                        # @predict_nnz.147
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1034777422, -56(%rbp)  # imm = 0x3DAD734E
	movl	%edi, -52(%rbp)
	movl	%esi, -44(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %edi
	movl	-52(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB188_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB188_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB188_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB188_4:                              # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB188_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB188_6:                              # %if.end14
	movl	-48(%rbp), %edi
	movl	-52(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB188_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB188_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB188_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB188_10:                             # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB188_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB188_12:                             # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB188_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB188_14:                             # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$1034777422, -56(%rbp)  # imm = 0x3DAD734E
	jne	.LBB188_16
.LBB188_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB188_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB188_15
.Lfunc_end188:
	.size	predict_nnz.147, .Lfunc_end188-predict_nnz.147
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff.148 # -- Begin function writeCBPandLumaCoeff.148
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.148,@function
writeCBPandLumaCoeff.148:               # @writeCBPandLumaCoeff.148
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$348919892, -108(%rbp)  # imm = 0x14CC1854
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB189_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB189_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB189_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB189_7
.LBB189_4:                              # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB189_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB189_6:                              # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB189_10
.LBB189_7:                              # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB189_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB189_9:                              # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB189_10:                             # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB189_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB189_12:                             # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB189_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB189_18
.LBB189_14:                             # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB189_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB189_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB189_18
.LBB189_17:                             # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB189_22
.LBB189_18:                             # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB189_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB189_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB189_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB189_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -100(%rbp)
	je	.LBB189_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB189_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB189_26
.LBB189_25:                             # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB189_26:                             # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB189_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB189_29
.LBB189_28:                             # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB189_29:                             # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB189_30:                             # %if.end93
	jmp	.LBB189_31
.LBB189_31:                             # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB189_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB189_42
.LBB189_33:                             # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB189_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB189_36
.LBB189_35:                             # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB189_36:                             # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB189_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB189_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB189_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB189_41
.LBB189_40:                             # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB189_41:                             # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB189_42:                             # %if.end138
	movl	$0, -40(%rbp)
.LBB189_43:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB189_45 Depth 2
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB189_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB189_43 Depth=1
	movl	$0, -20(%rbp)
.LBB189_45:                             # %for.cond141
                                        #   Parent Loop BB189_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB189_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB189_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB189_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB189_45
.LBB189_48:                             # %for.end
                                        #   in Loop: Header=BB189_43 Depth=1
	jmp	.LBB189_49
.LBB189_49:                             # %for.inc152
                                        #   in Loop: Header=BB189_43 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB189_43
.LBB189_50:                             # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB189_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB189_52:                             # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB189_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB189_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB189_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB189_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB189_55:                             # %if.end169
                                        #   in Loop: Header=BB189_52 Depth=1
	jmp	.LBB189_56
.LBB189_56:                             # %for.inc170
                                        #   in Loop: Header=BB189_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB189_52
.LBB189_57:                             # %for.end172
	jmp	.LBB189_101
.LBB189_58:                             # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB189_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB189_70
.LBB189_60:                             # %if.else179
	movl	$1, -56(%rbp)
	movl	$0, -36(%rbp)
.LBB189_61:                             # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jg	.LBB189_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB189_61 Depth=1
	cmpl	$0, -56(%rbp)
	setne	%al
.LBB189_63:                             # %land.end184
                                        #   in Loop: Header=BB189_61 Depth=1
	testb	$1, %al
	jne	.LBB189_64
	jmp	.LBB189_69
.LBB189_64:                             # %for.body186
                                        #   in Loop: Header=BB189_61 Depth=1
	movq	-144(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -56(%rbp)
	movq	-120(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -104(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB189_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB189_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB189_67
.LBB189_66:                             # %if.else196
                                        #   in Loop: Header=BB189_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB189_67:                             # %if.end198
                                        #   in Loop: Header=BB189_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB189_61 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB189_61
.LBB189_69:                             # %for.end218
	jmp	.LBB189_70
.LBB189_70:                             # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB189_100
# %bb.71:                               # %if.then222
	movl	$0, -60(%rbp)
.LBB189_72:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB189_74 Depth 2
                                        #       Child Loop BB189_76 Depth 3
                                        #         Child Loop BB189_78 Depth 4
                                        #           Child Loop BB189_82 Depth 5
	cmpl	$4, -60(%rbp)
	jge	.LBB189_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB189_72 Depth=1
	movl	$0, -52(%rbp)
.LBB189_74:                             # %for.cond226
                                        #   Parent Loop BB189_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB189_76 Depth 3
                                        #         Child Loop BB189_78 Depth 4
                                        #           Child Loop BB189_82 Depth 5
	cmpl	$4, -52(%rbp)
	jge	.LBB189_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB189_74 Depth=2
	movl	-60(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB189_76:                             # %for.cond229
                                        #   Parent Loop BB189_72 Depth=1
                                        #     Parent Loop BB189_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB189_78 Depth 4
                                        #           Child Loop BB189_82 Depth 5
	movl	-40(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB189_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB189_76 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB189_78:                             # %for.cond233
                                        #   Parent Loop BB189_72 Depth=1
                                        #     Parent Loop BB189_74 Depth=2
                                        #       Parent Loop BB189_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB189_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB189_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB189_78 Depth=4
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -68(%rbp)
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -72(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB189_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB189_78 Depth=4
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB189_91
.LBB189_81:                             # %if.else247
                                        #   in Loop: Header=BB189_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -56(%rbp)
	movl	$0, -36(%rbp)
.LBB189_82:                             # %for.cond259
                                        #   Parent Loop BB189_72 Depth=1
                                        #     Parent Loop BB189_74 Depth=2
                                        #       Parent Loop BB189_76 Depth=3
                                        #         Parent Loop BB189_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jge	.LBB189_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB189_82 Depth=5
	cmpl	$0, -56(%rbp)
	setne	%al
.LBB189_84:                             # %land.end263
                                        #   in Loop: Header=BB189_82 Depth=5
	testb	$1, %al
	jne	.LBB189_85
	jmp	.LBB189_90
.LBB189_85:                             # %for.body265
                                        #   in Loop: Header=BB189_82 Depth=5
	movq	-136(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -56(%rbp)
	movq	-128(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -104(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB189_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB189_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB189_88
.LBB189_87:                             # %if.else276
                                        #   in Loop: Header=BB189_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB189_88:                             # %if.end278
                                        #   in Loop: Header=BB189_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB189_82 Depth=5
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB189_82
.LBB189_90:                             # %for.end300
                                        #   in Loop: Header=BB189_78 Depth=4
	jmp	.LBB189_91
.LBB189_91:                             # %if.end301
                                        #   in Loop: Header=BB189_78 Depth=4
	jmp	.LBB189_92
.LBB189_92:                             # %for.inc302
                                        #   in Loop: Header=BB189_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB189_78
.LBB189_93:                             # %for.end304
                                        #   in Loop: Header=BB189_76 Depth=3
	jmp	.LBB189_94
.LBB189_94:                             # %for.inc305
                                        #   in Loop: Header=BB189_76 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB189_76
.LBB189_95:                             # %for.end307
                                        #   in Loop: Header=BB189_74 Depth=2
	jmp	.LBB189_96
.LBB189_96:                             # %for.inc308
                                        #   in Loop: Header=BB189_74 Depth=2
	movl	-52(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB189_74
.LBB189_97:                             # %for.end310
                                        #   in Loop: Header=BB189_72 Depth=1
	jmp	.LBB189_98
.LBB189_98:                             # %for.inc311
                                        #   in Loop: Header=BB189_72 Depth=1
	movl	-60(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB189_72
.LBB189_99:                             # %for.end313
	jmp	.LBB189_100
.LBB189_100:                            # %if.end314
	jmp	.LBB189_101
.LBB189_101:                            # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$348919892, -108(%rbp)  # imm = 0x14CC1854
	jne	.LBB189_103
.LBB189_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB189_103:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB189_102
.Lfunc_end189:
	.size	writeCBPandLumaCoeff.148, .Lfunc_end189-writeCBPandLumaCoeff.148
	.cfi_endproc
                                        # -- End function
	.type	MODTAB,@object          # @MODTAB
	.section	.rodata,"a",@progbits
	.globl	MODTAB
	.p2align	4
MODTAB:
	.long	0                       # 0x0
	.long	4                       # 0x4
	.long	16                      # 0x10
	.long	12                      # 0xc
	.long	8                       # 0x8
	.long	20                      # 0x14
	.size	MODTAB, 24

	.type	NCBP,@object            # @NCBP
	.globl	NCBP
	.p2align	4
NCBP:
	.asciz	"\001"
	.ascii	"\n\001"
	.ascii	"\013\002"
	.ascii	"\006\005"
	.ascii	"\f\003"
	.ascii	"\007\006"
	.zero	2,14
	.ascii	"\002\n"
	.ascii	"\r\004"
	.zero	2,15
	.ascii	"\b\007"
	.ascii	"\003\013"
	.ascii	"\t\b"
	.ascii	"\004\f"
	.ascii	"\005\r"
	.ascii	"\000\t"
	.zero	64
	.asciz	"\003"
	.ascii	"\035\002"
	.ascii	"\036\003"
	.ascii	"\021\007"
	.ascii	"\037\004"
	.ascii	"\022\b"
	.ascii	"%\021"
	.ascii	"\b\r"
	.ascii	" \005"
	.ascii	"&\022"
	.ascii	"\023\t"
	.ascii	"\t\016"
	.ascii	"\024\n"
	.ascii	"\n\017"
	.ascii	"\013\020"
	.ascii	"\002\013"
	.ascii	"\020\001"
	.ascii	"! "
	.ascii	"\"!"
	.ascii	"\025$"
	.ascii	"#\""
	.ascii	"\026%"
	.ascii	"',"
	.ascii	"\004("
	.ascii	"$#"
	.ascii	"(-"
	.ascii	"\027&"
	.ascii	"\005)"
	.ascii	"\030'"
	.ascii	"\006*"
	.ascii	"\007+"
	.ascii	"\001\023"
	.ascii	")\006"
	.ascii	"*\030"
	.ascii	"+\031"
	.ascii	"\031\024"
	.ascii	",\032"
	.ascii	"\032\025"
	.zero	2,46
	.ascii	"\f\034"
	.ascii	"-\033"
	.zero	2,47
	.ascii	"\033\026"
	.ascii	"\r\035"
	.ascii	"\034\027"
	.ascii	"\016\036"
	.ascii	"\017\037"
	.ascii	"\000\f"
	.size	NCBP, 192

	.type	subblk_offset_x,@object # @subblk_offset_x
	.globl	subblk_offset_x
	.p2align	4
subblk_offset_x:
	.ascii	"\000\004\000\004"
	.ascii	"\000\004\000\004"
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\000\004\000\004"
	.ascii	"\000\004\000\004"
	.ascii	"\000\004\000\004"
	.ascii	"\000\004\000\004"
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\000\004\000\004"
	.ascii	"\b\f\b\f"
	.ascii	"\000\004\000\004"
	.ascii	"\b\f\b\f"
	.ascii	"\000\004\000\004"
	.ascii	"\b\f\b\f"
	.ascii	"\000\004\000\004"
	.ascii	"\b\f\b\f"
	.size	subblk_offset_x, 96

	.type	subblk_offset_y,@object # @subblk_offset_y
	.globl	subblk_offset_y
	.p2align	4
subblk_offset_y:
	.ascii	"\000\000\004\004"
	.ascii	"\000\000\004\004"
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\000\000\004\004"
	.ascii	"\b\b\f\f"
	.ascii	"\000\000\004\004"
	.ascii	"\b\b\f\f"
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\000\000\004\004"
	.ascii	"\000\000\004\004"
	.ascii	"\b\b\f\f"
	.ascii	"\b\b\f\f"
	.ascii	"\000\000\004\004"
	.ascii	"\000\000\004\004"
	.ascii	"\b\b\f\f"
	.ascii	"\b\b\f\f"
	.size	subblk_offset_y, 96

	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	dq,@object              # @dq
	.comm	dq,4,4
	.type	predict_error,@object   # @predict_error
	.comm	predict_error,4,4
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	terminate_macroblock.skip,@object # @terminate_macroblock.skip
	.local	terminate_macroblock.skip
	.comm	terminate_macroblock.skip,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"Slice Mode %d not supported"
	.size	.L.str, 28

	.type	LumaPrediction4x4.fw_pred,@object # @LumaPrediction4x4.fw_pred
	.local	LumaPrediction4x4.fw_pred
	.comm	LumaPrediction4x4.fw_pred,64,16
	.type	LumaPrediction4x4.bw_pred,@object # @LumaPrediction4x4.bw_pred
	.local	LumaPrediction4x4.bw_pred
	.comm	LumaPrediction4x4.bw_pred,64,16
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	LumaPrediction4x4Bi.fw_pred,@object # @LumaPrediction4x4Bi.fw_pred
	.local	LumaPrediction4x4Bi.fw_pred
	.comm	LumaPrediction4x4Bi.fw_pred,64,16
	.type	LumaPrediction4x4Bi.bw_pred,@object # @LumaPrediction4x4Bi.bw_pred
	.local	LumaPrediction4x4Bi.bw_pred
	.comm	LumaPrediction4x4Bi.bw_pred,64,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	ChromaPrediction4x4.fw_pred,@object # @ChromaPrediction4x4.fw_pred
	.local	ChromaPrediction4x4.fw_pred
	.comm	ChromaPrediction4x4.fw_pred,64,16
	.type	ChromaPrediction4x4.bw_pred,@object # @ChromaPrediction4x4.bw_pred
	.local	ChromaPrediction4x4.bw_pred
	.comm	ChromaPrediction4x4.bw_pred,64,16
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	.L__const.ChromaResidualCoding.block8x8_idx,@object # @__const.ChromaResidualCoding.block8x8_idx
	.section	.rodata,"a",@progbits
	.p2align	4
.L__const.ChromaResidualCoding.block8x8_idx:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	3                       # 0x3
	.size	.L__const.ChromaResidualCoding.block8x8_idx, 192

	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	.L__const.IntraChromaPrediction.block_pos,@object # @__const.IntraChromaPrediction.block_pos
	.p2align	4
.L__const.IntraChromaPrediction.block_pos:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.zero	16
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	3                       # 0x3
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.size	.L__const.IntraChromaPrediction.block_pos, 192

	.type	MBType2Value.dir1offset,@object # @MBType2Value.dir1offset
	.p2align	2
MBType2Value.dir1offset:
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.size	MBType2Value.dir1offset, 12

	.type	MBType2Value.dir2offset,@object # @MBType2Value.dir2offset
	.p2align	4
MBType2Value.dir2offset:
	.long	0                       # 0x0
	.long	4                       # 0x4
	.long	8                       # 0x8
	.long	6                       # 0x6
	.long	2                       # 0x2
	.long	10                      # 0xa
	.long	12                      # 0xc
	.long	14                      # 0xe
	.long	16                      # 0x10
	.size	MBType2Value.dir2offset, 36

	.type	B8Mode2Value.b8start,@object # @B8Mode2Value.b8start
	.p2align	4
B8Mode2Value.b8start:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	10                      # 0xa
	.size	B8Mode2Value.b8start, 32

	.type	B8Mode2Value.b8inc,@object # @B8Mode2Value.b8inc
	.p2align	4
B8Mode2Value.b8inc:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	1                       # 0x1
	.size	B8Mode2Value.b8inc, 32

	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	.L__const.writeChromaCoeff.chroma_dc_context,@object # @__const.writeChromaCoeff.chroma_dc_context
	.p2align	2
.L__const.writeChromaCoeff.chroma_dc_context:
	.long	6                       # 0x6
	.long	8                       # 0x8
	.long	9                       # 0x9
	.size	.L__const.writeChromaCoeff.chroma_dc_context, 12

	.type	writeChromaCoeff.chroma_ac_param,@object # @writeChromaCoeff.chroma_ac_param
	.data
	.p2align	4
writeChromaCoeff.chroma_ac_param:
	.ascii	"\004\024\005\025"
	.ascii	"$4%5"
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\004\024\005\025"
	.ascii	"\006\026\007\027"
	.ascii	"$4%5"
	.ascii	"&6'7"
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\004\024\005\025"
	.ascii	"$4%5"
	.ascii	"\006\026\007\027"
	.ascii	"&6'7"
	.ascii	"\b\030\t\031"
	.ascii	"(8)9"
	.ascii	"\n\032\013\033"
	.ascii	"*:+;"
	.size	writeChromaCoeff.chroma_ac_param, 96

	.type	.L__const.predict_nnz_chroma.j_off_tab,@object # @__const.predict_nnz_chroma.j_off_tab
	.section	.rodata,"a",@progbits
	.p2align	4
.L__const.predict_nnz_chroma.j_off_tab:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	8                       # 0x8
	.long	8                       # 0x8
	.long	8                       # 0x8
	.long	8                       # 0x8
	.size	.L__const.predict_nnz_chroma.j_off_tab, 48

	.type	.L__const.writeCoeff4x4_CAVLC.incVlc,@object # @__const.writeCoeff4x4_CAVLC.incVlc
	.p2align	4
.L__const.writeCoeff4x4_CAVLC.incVlc:
	.long	0                       # 0x0
	.long	3                       # 0x3
	.long	6                       # 0x6
	.long	12                      # 0xc
	.long	24                      # 0x18
	.long	48                      # 0x30
	.long	32768                   # 0x8000
	.size	.L__const.writeCoeff4x4_CAVLC.incVlc, 28

	.type	.L.str.1,@object        # @.str.1
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.1:
	.asciz	"%s"
	.size	.L.str.1, 3

	.type	.L.str.2,@object        # @.str.2
.L.str.2:
	.asciz	"Luma"
	.size	.L.str.2, 5

	.type	.L.str.3,@object        # @.str.3
.L.str.3:
	.asciz	"Lum16DC"
	.size	.L.str.3, 8

	.type	.L.str.4,@object        # @.str.4
.L.str.4:
	.asciz	"Lum16AC"
	.size	.L.str.4, 8

	.type	.L.str.5,@object        # @.str.5
.L.str.5:
	.asciz	"ChrDC"
	.size	.L.str.5, 6

	.type	.L.str.6,@object        # @.str.6
.L.str.6:
	.asciz	"ChrAC"
	.size	.L.str.6, 6

	.type	.L.str.7,@object        # @.str.7
.L.str.7:
	.asciz	"writeCoeff4x4_CAVLC: Invalid block type"
	.size	.L.str.7, 40

	.type	.L.str.8,@object        # @.str.8
.L.str.8:
	.asciz	"ERROR: level > 1\n"
	.size	.L.str.8, 18

	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4
	.type	bit_rate,@object        # @bit_rate
	.comm	bit_rate,8,8
	.type	frame_rate,@object      # @frame_rate
	.comm	frame_rate,8,8
	.type	GAMMAP,@object          # @GAMMAP
	.comm	GAMMAP,8,8
	.type	BETAP,@object           # @BETAP
	.comm	BETAP,8,8
	.type	RC_MAX_QUANT,@object    # @RC_MAX_QUANT
	.comm	RC_MAX_QUANT,4,4
	.type	RC_MIN_QUANT,@object    # @RC_MIN_QUANT
	.comm	RC_MIN_QUANT,4,4
	.type	BufferSize,@object      # @BufferSize
	.comm	BufferSize,8,8
	.type	GOPTargetBufferLevel,@object # @GOPTargetBufferLevel
	.comm	GOPTargetBufferLevel,8,8
	.type	CurrentBufferFullness,@object # @CurrentBufferFullness
	.comm	CurrentBufferFullness,8,8
	.type	TargetBufferLevel,@object # @TargetBufferLevel
	.comm	TargetBufferLevel,8,8
	.type	PreviousBit_Rate,@object # @PreviousBit_Rate
	.comm	PreviousBit_Rate,8,8
	.type	AWp,@object             # @AWp
	.comm	AWp,8,8
	.type	AWb,@object             # @AWb
	.comm	AWb,8,8
	.type	MyInitialQp,@object     # @MyInitialQp
	.comm	MyInitialQp,4,4
	.type	PAverageQp,@object      # @PAverageQp
	.comm	PAverageQp,4,4
	.type	PreviousPictureMAD,@object # @PreviousPictureMAD
	.comm	PreviousPictureMAD,8,8
	.type	MADPictureC1,@object    # @MADPictureC1
	.comm	MADPictureC1,8,8
	.type	MADPictureC2,@object    # @MADPictureC2
	.comm	MADPictureC2,8,8
	.type	PMADPictureC1,@object   # @PMADPictureC1
	.comm	PMADPictureC1,8,8
	.type	PMADPictureC2,@object   # @PMADPictureC2
	.comm	PMADPictureC2,8,8
	.type	PictureRejected,@object # @PictureRejected
	.comm	PictureRejected,84,16
	.type	PPictureMAD,@object     # @PPictureMAD
	.comm	PPictureMAD,168,16
	.type	PictureMAD,@object      # @PictureMAD
	.comm	PictureMAD,168,16
	.type	ReferenceMAD,@object    # @ReferenceMAD
	.comm	ReferenceMAD,168,16
	.type	m_rgRejected,@object    # @m_rgRejected
	.comm	m_rgRejected,84,16
	.type	m_rgQp,@object          # @m_rgQp
	.comm	m_rgQp,168,16
	.type	m_rgRp,@object          # @m_rgRp
	.comm	m_rgRp,168,16
	.type	m_X1,@object            # @m_X1
	.comm	m_X1,8,8
	.type	m_X2,@object            # @m_X2
	.comm	m_X2,8,8
	.type	m_Qc,@object            # @m_Qc
	.comm	m_Qc,4,4
	.type	m_Qstep,@object         # @m_Qstep
	.comm	m_Qstep,8,8
	.type	m_Qp,@object            # @m_Qp
	.comm	m_Qp,4,4
	.type	Pm_Qp,@object           # @Pm_Qp
	.comm	Pm_Qp,4,4
	.type	PreAveMBHeader,@object  # @PreAveMBHeader
	.comm	PreAveMBHeader,4,4
	.type	CurAveMBHeader,@object  # @CurAveMBHeader
	.comm	CurAveMBHeader,4,4
	.type	PPreHeader,@object      # @PPreHeader
	.comm	PPreHeader,4,4
	.type	PreviousQp1,@object     # @PreviousQp1
	.comm	PreviousQp1,4,4
	.type	PreviousQp2,@object     # @PreviousQp2
	.comm	PreviousQp2,4,4
	.type	NumberofBFrames,@object # @NumberofBFrames
	.comm	NumberofBFrames,4,4
	.type	TotalFrameQP,@object    # @TotalFrameQP
	.comm	TotalFrameQP,4,4
	.type	NumberofBasicUnit,@object # @NumberofBasicUnit
	.comm	NumberofBasicUnit,4,4
	.type	PAveHeaderBits1,@object # @PAveHeaderBits1
	.comm	PAveHeaderBits1,4,4
	.type	PAveHeaderBits2,@object # @PAveHeaderBits2
	.comm	PAveHeaderBits2,4,4
	.type	PAveHeaderBits3,@object # @PAveHeaderBits3
	.comm	PAveHeaderBits3,4,4
	.type	PAveFrameQP,@object     # @PAveFrameQP
	.comm	PAveFrameQP,4,4
	.type	TotalNumberofBasicUnit,@object # @TotalNumberofBasicUnit
	.comm	TotalNumberofBasicUnit,4,4
	.type	CodedBasicUnit,@object  # @CodedBasicUnit
	.comm	CodedBasicUnit,4,4
	.type	MINVALUE,@object        # @MINVALUE
	.comm	MINVALUE,8,8
	.type	CurrentFrameMAD,@object # @CurrentFrameMAD
	.comm	CurrentFrameMAD,8,8
	.type	CurrentBUMAD,@object    # @CurrentBUMAD
	.comm	CurrentBUMAD,8,8
	.type	TotalBUMAD,@object      # @TotalBUMAD
	.comm	TotalBUMAD,8,8
	.type	PreviousFrameMAD,@object # @PreviousFrameMAD
	.comm	PreviousFrameMAD,8,8
	.type	m_Hp,@object            # @m_Hp
	.comm	m_Hp,4,4
	.type	m_windowSize,@object    # @m_windowSize
	.comm	m_windowSize,4,4
	.type	MADm_windowSize,@object # @MADm_windowSize
	.comm	MADm_windowSize,4,4
	.type	DDquant,@object         # @DDquant
	.comm	DDquant,4,4
	.type	MBPerRow,@object        # @MBPerRow
	.comm	MBPerRow,4,4
	.type	AverageMADPreviousFrame,@object # @AverageMADPreviousFrame
	.comm	AverageMADPreviousFrame,8,8
	.type	TotalBasicUnitBits,@object # @TotalBasicUnitBits
	.comm	TotalBasicUnitBits,4,4
	.type	QPLastPFrame,@object    # @QPLastPFrame
	.comm	QPLastPFrame,4,4
	.type	QPLastGOP,@object       # @QPLastGOP
	.comm	QPLastGOP,4,4
	.type	Pm_rgQp,@object         # @Pm_rgQp
	.comm	Pm_rgQp,160,16
	.type	Pm_rgRp,@object         # @Pm_rgRp
	.comm	Pm_rgRp,160,16
	.type	Pm_X1,@object           # @Pm_X1
	.comm	Pm_X1,8,8
	.type	Pm_X2,@object           # @Pm_X2
	.comm	Pm_X2,8,8
	.type	Pm_Hp,@object           # @Pm_Hp
	.comm	Pm_Hp,4,4
	.type	FieldQPBuffer,@object   # @FieldQPBuffer
	.comm	FieldQPBuffer,4,4
	.type	FrameQPBuffer,@object   # @FrameQPBuffer
	.comm	FrameQPBuffer,4,4
	.type	FrameAveHeaderBits,@object # @FrameAveHeaderBits
	.comm	FrameAveHeaderBits,4,4
	.type	FieldAveHeaderBits,@object # @FieldAveHeaderBits
	.comm	FieldAveHeaderBits,4,4
	.type	BUPFMAD,@object         # @BUPFMAD
	.comm	BUPFMAD,8,8
	.type	BUCFMAD,@object         # @BUCFMAD
	.comm	BUCFMAD,8,8
	.type	FCBUCFMAD,@object       # @FCBUCFMAD
	.comm	FCBUCFMAD,8,8
	.type	FCBUPFMAD,@object       # @FCBUPFMAD
	.comm	FCBUPFMAD,8,8
	.type	GOPOverdue,@object      # @GOPOverdue
	.comm	GOPOverdue,4,4
	.type	diffy,@object           # @diffy
	.comm	diffy,1024,16
	.type	diffyy,@object          # @diffyy
	.comm	diffyy,1024,16
	.type	diffy8,@object          # @diffy8
	.comm	diffy8,1024,16

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
