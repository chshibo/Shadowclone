	.text
	.file	"rdopt.c"
	.globl	clear_rdopt             # -- Begin function clear_rdopt
	.p2align	4, 0x90
	.type	clear_rdopt,@function
clear_rdopt:                            # @clear_rdopt
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	cofDC, %rdi
	callq	free_mem_DCcoeff
	movq	cofAC, %rdi
	callq	free_mem_ACcoeff
	movq	cofAC8x8, %rdi
	callq	free_mem_ACcoeff
	movq	cofAC4x4intern, %rdi
	callq	free_mem_ACcoeff
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB0_2
# %bb.1:                                # %if.then
	movq	cofAC_8x8ts, %rdi
	callq	free_mem_ACcoeff
.LBB0_2:                                # %if.end
	movq	cs_mb, %rdi
	callq	delete_coding_state
	movq	cs_b8, %rdi
	callq	delete_coding_state
	movq	cs_cm, %rdi
	callq	delete_coding_state
	movq	cs_imb, %rdi
	callq	delete_coding_state
	movq	cs_ib8, %rdi
	callq	delete_coding_state
	movq	cs_ib4, %rdi
	callq	delete_coding_state
	movq	cs_pc, %rdi
	callq	delete_coding_state
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end0:
	.size	clear_rdopt, .Lfunc_end0-clear_rdopt
	.cfi_endproc
                                        # -- End function
	.globl	init_rdopt              # -- Begin function init_rdopt
	.p2align	4, 0x90
	.type	init_rdopt,@function
init_rdopt:                             # @init_rdopt
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	$0, rdopt
	movabsq	$cofDC, %rdi
	callq	get_mem_DCcoeff
	movabsq	$cofAC, %rdi
	callq	get_mem_ACcoeff
	movabsq	$cofAC8x8, %rdi
	callq	get_mem_ACcoeff
	movabsq	$cofAC4x4intern, %rdi
	callq	get_mem_ACcoeff
	movq	cofAC4x4intern, %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, cofAC4x4
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB1_2
# %bb.1:                                # %if.then
	movabsq	$cofAC_8x8ts, %rdi
	callq	get_mem_ACcoeff
.LBB1_2:                                # %if.end
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_mb
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_b8
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_cm
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_imb
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_ib8
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_ib4
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_pc
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end1:
	.size	init_rdopt, .Lfunc_end1-init_rdopt
	.cfi_endproc
                                        # -- End function
	.globl	UpdatePixelMap          # -- Begin function UpdatePixelMap
	.p2align	4, 0x90
	.type	UpdatePixelMap,@function
UpdatePixelMap:                         # @UpdatePixelMap
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB2_5
# %bb.1:                                # %func_UpdatePixelMap.25
	callq	UpdatePixelMap.25
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_UpdatePixelMap.42
	.cfi_def_cfa %rbp, 16
	callq	UpdatePixelMap.42
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_3:                                # %func_UpdatePixelMap.47
	.cfi_def_cfa %rbp, 16
	callq	UpdatePixelMap.47
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_4:                                # %func_UpdatePixelMap.79
	.cfi_def_cfa %rbp, 16
	callq	UpdatePixelMap.79
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB2_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB2_3
	jmp	.LBB2_4
.Lfunc_end2:
	.size	UpdatePixelMap, .Lfunc_end2-UpdatePixelMap
	.cfi_endproc
                                        # -- End function
	.globl	CheckReliabilityOfRef   # -- Begin function CheckReliabilityOfRef
	.p2align	4, 0x90
	.type	CheckReliabilityOfRef,@function
CheckReliabilityOfRef:                  # @CheckReliabilityOfRef
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%ecx, %r14d
	movl	%edx, %r15d
	movl	%esi, %r12d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB3_5
# %bb.1:                                # %func_CheckReliabilityOfRef.56
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	CheckReliabilityOfRef.56
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_CheckReliabilityOfRef.61
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	CheckReliabilityOfRef.61
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_CheckReliabilityOfRef.89
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	CheckReliabilityOfRef.89
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_CheckReliabilityOfRef.99
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	CheckReliabilityOfRef.99
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
	jmp	.LBB3_4
.Lfunc_end3:
	.size	CheckReliabilityOfRef, .Lfunc_end3-CheckReliabilityOfRef
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4IntraBlocks # -- Begin function RDCost_for_4x4IntraBlocks
	.p2align	4, 0x90
	.type	RDCost_for_4x4IntraBlocks,@function
RDCost_for_4x4IntraBlocks:              # @RDCost_for_4x4IntraBlocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	vmovsd	%xmm1, -56(%rbp)        # 8-byte Spill
	vmovsd	%xmm0, -48(%rbp)        # 8-byte Spill
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB4_5
# %bb.1:                                # %func_RDCost_for_4x4IntraBlocks.1
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	vmovsd	-48(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	movl	%r14d, %r8d
	callq	RDCost_for_4x4IntraBlocks.1
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_2:                                # %func_RDCost_for_4x4IntraBlocks.23
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	RDCost_for_4x4IntraBlocks.23
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_3:                                # %func_RDCost_for_4x4IntraBlocks.39
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	RDCost_for_4x4IntraBlocks.39
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_4:                                # %func_RDCost_for_4x4IntraBlocks.51
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	RDCost_for_4x4IntraBlocks.51
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-48(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB4_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB4_3
	jmp	.LBB4_4
.Lfunc_end4:
	.size	RDCost_for_4x4IntraBlocks, .Lfunc_end4-RDCost_for_4x4IntraBlocks
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4Blocks_Chroma # -- Begin function RDCost_for_4x4Blocks_Chroma
	.p2align	4, 0x90
	.type	RDCost_for_4x4Blocks_Chroma,@function
RDCost_for_4x4Blocks_Chroma:            # @RDCost_for_4x4Blocks_Chroma
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB5_5
# %bb.1:                                # %func_RDCost_for_4x4Blocks_Chroma.20
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	RDCost_for_4x4Blocks_Chroma.20
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_RDCost_for_4x4Blocks_Chroma.55
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	RDCost_for_4x4Blocks_Chroma.55
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_RDCost_for_4x4Blocks_Chroma.84
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	RDCost_for_4x4Blocks_Chroma.84
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_RDCost_for_4x4Blocks_Chroma.98
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	RDCost_for_4x4Blocks_Chroma.98
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
	jmp	.LBB5_4
.Lfunc_end5:
	.size	RDCost_for_4x4Blocks_Chroma, .Lfunc_end5-RDCost_for_4x4Blocks_Chroma
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_4x4IntraBlocks # -- Begin function Mode_Decision_for_4x4IntraBlocks
	.p2align	4, 0x90
	.type	Mode_Decision_for_4x4IntraBlocks,@function
Mode_Decision_for_4x4IntraBlocks:       # @Mode_Decision_for_4x4IntraBlocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB6_5
# %bb.1:                                # %func_Mode_Decision_for_4x4IntraBlocks.37
	movl	%ebx, %edi
	movl	%r15d, %esi
	vmovsd	-32(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movq	%r14, %rdx
	callq	Mode_Decision_for_4x4IntraBlocks.37
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_Mode_Decision_for_4x4IntraBlocks.66
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	Mode_Decision_for_4x4IntraBlocks.66
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_Mode_Decision_for_4x4IntraBlocks.81
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	Mode_Decision_for_4x4IntraBlocks.81
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_Mode_Decision_for_4x4IntraBlocks.95
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	Mode_Decision_for_4x4IntraBlocks.95
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-32(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
	jmp	.LBB6_4
.Lfunc_end6:
	.size	Mode_Decision_for_4x4IntraBlocks, .Lfunc_end6-Mode_Decision_for_4x4IntraBlocks
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_8x8IntraBlocks # -- Begin function Mode_Decision_for_8x8IntraBlocks
	.p2align	4, 0x90
	.type	Mode_Decision_for_8x8IntraBlocks,@function
Mode_Decision_for_8x8IntraBlocks:       # @Mode_Decision_for_8x8IntraBlocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$16, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	vmovsd	%xmm0, -24(%rbp)        # 8-byte Spill
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB7_5
# %bb.1:                                # %func_Mode_Decision_for_8x8IntraBlocks.22
	movl	%ebx, %edi
	vmovsd	-24(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movq	%r14, %rsi
	callq	Mode_Decision_for_8x8IntraBlocks.22
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_Mode_Decision_for_8x8IntraBlocks.32
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	Mode_Decision_for_8x8IntraBlocks.32
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_Mode_Decision_for_8x8IntraBlocks.41
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	Mode_Decision_for_8x8IntraBlocks.41
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_Mode_Decision_for_8x8IntraBlocks.49
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	Mode_Decision_for_8x8IntraBlocks.49
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-24(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB7_3
	jmp	.LBB7_4
.Lfunc_end7:
	.size	Mode_Decision_for_8x8IntraBlocks, .Lfunc_end7-Mode_Decision_for_8x8IntraBlocks
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_Intra4x4Macroblock # -- Begin function Mode_Decision_for_Intra4x4Macroblock
	.p2align	4, 0x90
	.type	Mode_Decision_for_Intra4x4Macroblock,@function
Mode_Decision_for_Intra4x4Macroblock:   # @Mode_Decision_for_Intra4x4Macroblock
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	vmovsd	%xmm0, -16(%rbp)        # 8-byte Spill
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB8_5
# %bb.1:                                # %func_Mode_Decision_for_Intra4x4Macroblock.18
	vmovsd	-16(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movq	%rbx, %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock.18
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_2:                                # %func_Mode_Decision_for_Intra4x4Macroblock.44
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock.44
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_3:                                # %func_Mode_Decision_for_Intra4x4Macroblock.57
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock.57
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_4:                                # %func_Mode_Decision_for_Intra4x4Macroblock.72
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock.72
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-16(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB8_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB8_3
	jmp	.LBB8_4
.Lfunc_end8:
	.size	Mode_Decision_for_Intra4x4Macroblock, .Lfunc_end8-Mode_Decision_for_Intra4x4Macroblock
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_8x8blocks    # -- Begin function RDCost_for_8x8blocks
	.p2align	4, 0x90
	.type	RDCost_for_8x8blocks,@function
RDCost_for_8x8blocks:                   # @RDCost_for_8x8blocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	vmovsd	%xmm0, -56(%rbp)        # 8-byte Spill
	movq	%rsi, %r15
	movq	%rdi, %r14
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB9_5
# %bb.1:                                # %func_RDCost_for_8x8blocks.27
	movq	%r14, %rdi
	movq	%r15, %rsi
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movswl	%r12w, %r8d
	movswl	-44(%rbp), %r9d         # 2-byte Folded Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks.27
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_2:                                # %func_RDCost_for_8x8blocks.38
	.cfi_def_cfa %rbp, 16
	movq	%r14, %rdi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movswl	%r12w, %r8d
	movswl	%r15w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks.38
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_3:                                # %func_RDCost_for_8x8blocks.64
	.cfi_def_cfa %rbp, 16
	movq	%r14, %rdi
	movswl	%r12w, %r8d
	movswl	%r15w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks.64
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_4:                                # %func_RDCost_for_8x8blocks.93
	.cfi_def_cfa %rbp, 16
	movq	%r14, %rdi
	movswl	%r12w, %r8d
	movswl	%r15w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks.93
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rsi
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movw	16(%rbp), %r10w
	movl	-44(%rbp), %r15d        # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB9_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r13d, %ecx
	movl	%ebx, %edx
	je	.LBB9_3
	jmp	.LBB9_4
.Lfunc_end9:
	.size	RDCost_for_8x8blocks, .Lfunc_end9-RDCost_for_8x8blocks
	.cfi_endproc
                                        # -- End function
	.globl	I16Offset               # -- Begin function I16Offset
	.p2align	4, 0x90
	.type	I16Offset,@function
I16Offset:                              # @I16Offset
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB10_2
# %bb.1:                                # %func_I16Offset.30
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	I16Offset.30
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_2:                               # %func_I16Offset.36
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	I16Offset.36
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end10:
	.size	I16Offset, .Lfunc_end10-I16Offset
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframeForBlocks # -- Begin function SetModesAndRefframeForBlocks
	.p2align	4, 0x90
	.type	SetModesAndRefframeForBlocks,@function
SetModesAndRefframeForBlocks:           # @SetModesAndRefframeForBlocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB11_5
# %bb.1:                                # %func_SetModesAndRefframeForBlocks.54
	movl	%ebx, %edi
	callq	SetModesAndRefframeForBlocks.54
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_2:                               # %func_SetModesAndRefframeForBlocks.77
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	SetModesAndRefframeForBlocks.77
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_3:                               # %func_SetModesAndRefframeForBlocks.80
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	SetModesAndRefframeForBlocks.80
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_4:                               # %func_SetModesAndRefframeForBlocks.88
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	SetModesAndRefframeForBlocks.88
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB11_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB11_3
	jmp	.LBB11_4
.Lfunc_end11:
	.size	SetModesAndRefframeForBlocks, .Lfunc_end11-SetModesAndRefframeForBlocks
	.cfi_endproc
                                        # -- End function
	.globl	Intra16x16_Mode_Decision # -- Begin function Intra16x16_Mode_Decision
	.p2align	4, 0x90
	.type	Intra16x16_Mode_Decision,@function
Intra16x16_Mode_Decision:               # @Intra16x16_Mode_Decision
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB12_5
# %bb.1:                                # %func_Intra16x16_Mode_Decision.68
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	Intra16x16_Mode_Decision.68
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_2:                               # %func_Intra16x16_Mode_Decision.90
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	Intra16x16_Mode_Decision.90
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_3:                               # %func_Intra16x16_Mode_Decision.96
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	Intra16x16_Mode_Decision.96
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_4:                               # %func_Intra16x16_Mode_Decision.97
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	Intra16x16_Mode_Decision.97
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB12_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB12_3
	jmp	.LBB12_4
.Lfunc_end12:
	.size	Intra16x16_Mode_Decision, .Lfunc_end12-Intra16x16_Mode_Decision
	.cfi_endproc
                                        # -- End function
	.globl	SetCoeffAndReconstruction8x8 # -- Begin function SetCoeffAndReconstruction8x8
	.p2align	4, 0x90
	.type	SetCoeffAndReconstruction8x8,@function
SetCoeffAndReconstruction8x8:           # @SetCoeffAndReconstruction8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB13_5
# %bb.1:                                # %func_SetCoeffAndReconstruction8x8.21
	movq	%rbx, %rdi
	callq	SetCoeffAndReconstruction8x8.21
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_2:                               # %func_SetCoeffAndReconstruction8x8.52
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	SetCoeffAndReconstruction8x8.52
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_3:                               # %func_SetCoeffAndReconstruction8x8.86
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	SetCoeffAndReconstruction8x8.86
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_4:                               # %func_SetCoeffAndReconstruction8x8.100
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	SetCoeffAndReconstruction8x8.100
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB13_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB13_3
	jmp	.LBB13_4
.Lfunc_end13:
	.size	SetCoeffAndReconstruction8x8, .Lfunc_end13-SetCoeffAndReconstruction8x8
	.cfi_endproc
                                        # -- End function
	.globl	StoreMV8x8              # -- Begin function StoreMV8x8
	.p2align	4, 0x90
	.type	StoreMV8x8,@function
StoreMV8x8:                             # @StoreMV8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB14_5
# %bb.1:                                # %func_StoreMV8x8.5
	movl	%ebx, %edi
	callq	StoreMV8x8.5
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_2:                               # %func_StoreMV8x8.48
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	StoreMV8x8.48
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_3:                               # %func_StoreMV8x8.70
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	StoreMV8x8.70
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_4:                               # %func_StoreMV8x8.78
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	StoreMV8x8.78
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB14_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB14_3
	jmp	.LBB14_4
.Lfunc_end14:
	.size	StoreMV8x8, .Lfunc_end14-StoreMV8x8
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMV8x8            # -- Begin function RestoreMV8x8
	.p2align	4, 0x90
	.type	RestoreMV8x8,@function
RestoreMV8x8:                           # @RestoreMV8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB15_5
# %bb.1:                                # %func_RestoreMV8x8.8
	movl	%ebx, %edi
	callq	RestoreMV8x8.8
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_2:                               # %func_RestoreMV8x8.14
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	RestoreMV8x8.14
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_3:                               # %func_RestoreMV8x8.43
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	RestoreMV8x8.43
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_4:                               # %func_RestoreMV8x8.71
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	RestoreMV8x8.71
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB15_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB15_3
	jmp	.LBB15_4
.Lfunc_end15:
	.size	RestoreMV8x8, .Lfunc_end15-RestoreMV8x8
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorsMB      # -- Begin function SetMotionVectorsMB
	.p2align	4, 0x90
	.type	SetMotionVectorsMB,@function
SetMotionVectorsMB:                     # @SetMotionVectorsMB
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB16_5
# %bb.1:                                # %func_SetMotionVectorsMB.7
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SetMotionVectorsMB.7
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_2:                               # %func_SetMotionVectorsMB.33
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SetMotionVectorsMB.33
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_3:                               # %func_SetMotionVectorsMB.34
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SetMotionVectorsMB.34
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_4:                               # %func_SetMotionVectorsMB.75
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SetMotionVectorsMB.75
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB16_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB16_3
	jmp	.LBB16_4
.Lfunc_end16:
	.size	SetMotionVectorsMB, .Lfunc_end16-SetMotionVectorsMB
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_macroblocks  # -- Begin function RDCost_for_macroblocks
	.p2align	4, 0x90
	.type	RDCost_for_macroblocks,@function
RDCost_for_macroblocks:                 # @RDCost_for_macroblocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movq	%rsi, %r15
	movl	%edi, %ebx
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB17_5
# %bb.1:                                # %func_RDCost_for_macroblocks.10
	vmovsd	-32(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movl	%ebx, %edi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	RDCost_for_macroblocks.10
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_2:                               # %func_RDCost_for_macroblocks.24
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	RDCost_for_macroblocks.24
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_3:                               # %func_RDCost_for_macroblocks.29
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	RDCost_for_macroblocks.29
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_4:                               # %func_RDCost_for_macroblocks.63
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	RDCost_for_macroblocks.63
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-32(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB17_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB17_3
	jmp	.LBB17_4
.Lfunc_end17:
	.size	RDCost_for_macroblocks, .Lfunc_end17-RDCost_for_macroblocks
	.cfi_endproc
                                        # -- End function
	.globl	store_macroblock_parameters # -- Begin function store_macroblock_parameters
	.p2align	4, 0x90
	.type	store_macroblock_parameters,@function
store_macroblock_parameters:            # @store_macroblock_parameters
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB18_5
# %bb.1:                                # %func_store_macroblock_parameters.28
	movl	%ebx, %edi
	callq	store_macroblock_parameters.28
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_2:                               # %func_store_macroblock_parameters.45
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	store_macroblock_parameters.45
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_3:                               # %func_store_macroblock_parameters.67
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	store_macroblock_parameters.67
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_4:                               # %func_store_macroblock_parameters.69
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	store_macroblock_parameters.69
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB18_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB18_3
	jmp	.LBB18_4
.Lfunc_end18:
	.size	store_macroblock_parameters, .Lfunc_end18-store_macroblock_parameters
	.cfi_endproc
                                        # -- End function
	.globl	set_stored_macroblock_parameters # -- Begin function set_stored_macroblock_parameters
	.p2align	4, 0x90
	.type	set_stored_macroblock_parameters,@function
set_stored_macroblock_parameters:       # @set_stored_macroblock_parameters
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB19_5
# %bb.1:                                # %func_set_stored_macroblock_parameters.9
	callq	set_stored_macroblock_parameters.9
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_2:                               # %func_set_stored_macroblock_parameters.35
	.cfi_def_cfa %rbp, 16
	callq	set_stored_macroblock_parameters.35
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_3:                               # %func_set_stored_macroblock_parameters.58
	.cfi_def_cfa %rbp, 16
	callq	set_stored_macroblock_parameters.58
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_4:                               # %func_set_stored_macroblock_parameters.59
	.cfi_def_cfa %rbp, 16
	callq	set_stored_macroblock_parameters.59
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB19_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB19_3
	jmp	.LBB19_4
.Lfunc_end19:
	.size	set_stored_macroblock_parameters, .Lfunc_end19-set_stored_macroblock_parameters
	.cfi_endproc
                                        # -- End function
	.globl	SetRefAndMotionVectors  # -- Begin function SetRefAndMotionVectors
	.p2align	4, 0x90
	.type	SetRefAndMotionVectors,@function
SetRefAndMotionVectors:                 # @SetRefAndMotionVectors
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB20_5
# %bb.1:                                # %func_SetRefAndMotionVectors.3
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	SetRefAndMotionVectors.3
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_2:                               # %func_SetRefAndMotionVectors.13
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	SetRefAndMotionVectors.13
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_3:                               # %func_SetRefAndMotionVectors.16
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	SetRefAndMotionVectors.16
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_4:                               # %func_SetRefAndMotionVectors.19
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	SetRefAndMotionVectors.19
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB20_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB20_3
	jmp	.LBB20_4
.Lfunc_end20:
	.size	SetRefAndMotionVectors, .Lfunc_end20-SetRefAndMotionVectors
	.cfi_endproc
                                        # -- End function
	.globl	field_flag_inference    # -- Begin function field_flag_inference
	.p2align	4, 0x90
	.type	field_flag_inference,@function
field_flag_inference:                   # @field_flag_inference
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB21_2
# %bb.1:                                # %func_field_flag_inference.15
	callq	field_flag_inference.15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_2:                               # %func_field_flag_inference.40
	.cfi_def_cfa %rbp, 16
	callq	field_flag_inference.40
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end21:
	.size	field_flag_inference, .Lfunc_end21-field_flag_inference
	.cfi_endproc
                                        # -- End function
	.globl	StoreMVBlock8x8         # -- Begin function StoreMVBlock8x8
	.p2align	4, 0x90
	.type	StoreMVBlock8x8,@function
StoreMVBlock8x8:                        # @StoreMVBlock8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB22_5
# %bb.1:                                # %func_StoreMVBlock8x8.4
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8.4
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_2:                               # %func_StoreMVBlock8x8.6
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	%r10d, (%rsp)
	callq	StoreMVBlock8x8.6
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_3:                               # %func_StoreMVBlock8x8.26
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8.26
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_4:                               # %func_StoreMVBlock8x8.31
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8.31
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	16(%rbp), %r10d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB22_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r10d, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r15d, %edi
	je	.LBB22_3
	jmp	.LBB22_4
.Lfunc_end22:
	.size	StoreMVBlock8x8, .Lfunc_end22-StoreMVBlock8x8
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMVBlock8x8       # -- Begin function RestoreMVBlock8x8
	.p2align	4, 0x90
	.type	RestoreMVBlock8x8,@function
RestoreMVBlock8x8:                      # @RestoreMVBlock8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB23_5
# %bb.1:                                # %func_RestoreMVBlock8x8.17
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8.17
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_2:                               # %func_RestoreMVBlock8x8.60
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	%r10d, (%rsp)
	callq	RestoreMVBlock8x8.60
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_3:                               # %func_RestoreMVBlock8x8.62
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8.62
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_4:                               # %func_RestoreMVBlock8x8.65
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8.65
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	16(%rbp), %r10d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB23_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r10d, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r15d, %edi
	je	.LBB23_3
	jmp	.LBB23_4
.Lfunc_end23:
	.size	RestoreMVBlock8x8, .Lfunc_end23-RestoreMVBlock8x8
	.cfi_endproc
                                        # -- End function
	.globl	StoreNewMotionVectorsBlock8x8 # -- Begin function StoreNewMotionVectorsBlock8x8
	.p2align	4, 0x90
	.type	StoreNewMotionVectorsBlock8x8,@function
StoreNewMotionVectorsBlock8x8:          # @StoreNewMotionVectorsBlock8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB24_5
# %bb.1:                                # %func_StoreNewMotionVectorsBlock8x8.11
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8.11
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_2:                               # %func_StoreNewMotionVectorsBlock8x8.12
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	%r10d, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8.12
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_3:                               # %func_StoreNewMotionVectorsBlock8x8.85
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8.85
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_4:                               # %func_StoreNewMotionVectorsBlock8x8.94
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8.94
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	16(%rbp), %r10d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB24_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r10d, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r15d, %edi
	je	.LBB24_3
	jmp	.LBB24_4
.Lfunc_end24:
	.size	StoreNewMotionVectorsBlock8x8, .Lfunc_end24-StoreNewMotionVectorsBlock8x8
	.cfi_endproc
                                        # -- End function
	.globl	GetBestTransformP8x8    # -- Begin function GetBestTransformP8x8
	.p2align	4, 0x90
	.type	GetBestTransformP8x8,@function
GetBestTransformP8x8:                   # @GetBestTransformP8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB25_5
# %bb.1:                                # %func_GetBestTransformP8x8.2
	callq	GetBestTransformP8x8.2
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_2:                               # %func_GetBestTransformP8x8.50
	.cfi_def_cfa %rbp, 16
	callq	GetBestTransformP8x8.50
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_3:                               # %func_GetBestTransformP8x8.74
	.cfi_def_cfa %rbp, 16
	callq	GetBestTransformP8x8.74
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_4:                               # %func_GetBestTransformP8x8.82
	.cfi_def_cfa %rbp, 16
	callq	GetBestTransformP8x8.82
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB25_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB25_3
	jmp	.LBB25_4
.Lfunc_end25:
	.size	GetBestTransformP8x8, .Lfunc_end25-GetBestTransformP8x8
	.cfi_endproc
                                        # -- End function
	.globl	encode_one_macroblock   # -- Begin function encode_one_macroblock
	.p2align	4, 0x90
	.type	encode_one_macroblock,@function
encode_one_macroblock:                  # @encode_one_macroblock
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB26_5
# %bb.1:                                # %func_encode_one_macroblock.53
	callq	encode_one_macroblock.53
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_2:                               # %func_encode_one_macroblock.76
	.cfi_def_cfa %rbp, 16
	callq	encode_one_macroblock.76
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_3:                               # %func_encode_one_macroblock.91
	.cfi_def_cfa %rbp, 16
	callq	encode_one_macroblock.91
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_4:                               # %func_encode_one_macroblock.92
	.cfi_def_cfa %rbp, 16
	callq	encode_one_macroblock.92
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB26_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB26_3
	jmp	.LBB26_4
.Lfunc_end26:
	.size	encode_one_macroblock, .Lfunc_end26-encode_one_macroblock
	.cfi_endproc
                                        # -- End function
	.globl	set_mbaff_parameters    # -- Begin function set_mbaff_parameters
	.p2align	4, 0x90
	.type	set_mbaff_parameters,@function
set_mbaff_parameters:                   # @set_mbaff_parameters
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB27_5
# %bb.1:                                # %func_set_mbaff_parameters.46
	callq	set_mbaff_parameters.46
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_2:                               # %func_set_mbaff_parameters.73
	.cfi_def_cfa %rbp, 16
	callq	set_mbaff_parameters.73
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_3:                               # %func_set_mbaff_parameters.83
	.cfi_def_cfa %rbp, 16
	callq	set_mbaff_parameters.83
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_4:                               # %func_set_mbaff_parameters.87
	.cfi_def_cfa %rbp, 16
	callq	set_mbaff_parameters.87
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB27_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB27_3
	jmp	.LBB27_4
.Lfunc_end27:
	.size	set_mbaff_parameters, .Lfunc_end27-set_mbaff_parameters
	.cfi_endproc
                                        # -- End function
	.globl	store_coding_state_cs_cm # -- Begin function store_coding_state_cs_cm
	.p2align	4, 0x90
	.type	store_coding_state_cs_cm,@function
store_coding_state_cs_cm:               # @store_coding_state_cs_cm
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	cs_cm, %rdi
	callq	store_coding_state
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end28:
	.size	store_coding_state_cs_cm, .Lfunc_end28-store_coding_state_cs_cm
	.cfi_endproc
                                        # -- End function
	.globl	reset_coding_state_cs_cm # -- Begin function reset_coding_state_cs_cm
	.p2align	4, 0x90
	.type	reset_coding_state_cs_cm,@function
reset_coding_state_cs_cm:               # @reset_coding_state_cs_cm
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	cs_cm, %rdi
	callq	reset_coding_state
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end29:
	.size	reset_coding_state_cs_cm, .Lfunc_end29-reset_coding_state_cs_cm
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4IntraBlocks.1 # -- Begin function RDCost_for_4x4IntraBlocks.1
	.p2align	4, 0x90
	.type	RDCost_for_4x4IntraBlocks.1,@function
RDCost_for_4x4IntraBlocks.1:            # @RDCost_for_4x4IntraBlocks.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$1586401592, -72(%rbp)  # imm = 0x5E8E9138
	movq	%rdi, -152(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -8(%rbp)
	movl	%ecx, -36(%rbp)
	vmovsd	%xmm0, -144(%rbp)
	vmovsd	%xmm1, -160(%rbp)
	movl	%r8d, -48(%rbp)
	movl	$0, -44(%rbp)
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -52(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -40(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-88(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -76(%rbp)
	movl	-52(%rbp), %edi
	movl	-40(%rbp), %esi
	leaq	-76(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB30_10
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB30_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_4 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB30_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB30_2 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB30_4:                               # %for.cond15
                                        #   Parent Loop BB30_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_7
# %bb.5:                                # %for.body18
                                        #   in Loop: Header=BB30_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-68(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-120(%rbp), %rdx
	movl	-80(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB30_4 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_4
.LBB30_7:                               # %for.end
                                        #   in Loop: Header=BB30_2 Depth=1
	jmp	.LBB30_8
.LBB30_8:                               # %for.inc33
                                        #   in Loop: Header=BB30_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB30_2
.LBB30_9:                               # %for.end35
	jmp	.LBB30_10
.LBB30_10:                              # %if.end
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-48(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB30_12
# %bb.11:                               # %cond.true
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB30_16
.LBB30_12:                              # %cond.false
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB30_14
# %bb.13:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB30_15
.LBB30_14:                              # %cond.false41
	movl	-36(%rbp), %eax
	subl	$1, %eax
.LBB30_15:                              # %cond.end
.LBB30_16:                              # %cond.end43
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movl	$4, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB30_18
# %bb.17:                               # %if.then49
	movq	-32(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB30_18:                              # %if.end50
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB30_20
# %bb.19:                               # %if.then57
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB30_21
.LBB30_20:                              # %if.else
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB30_21:                              # %if.end60
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-88(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB30_23
# %bb.22:                               # %if.then66
	movl	-12(%rbp), %esi
	movl	-8(%rbp), %edx
	xorl	%edi, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_24
.LBB30_23:                              # %if.else69
	movl	-12(%rbp), %edi
	movl	-8(%rbp), %esi
	movl	$1, %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB30_24:                              # %if.end72
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vcvtsi2sdl	-44(%rbp), %xmm0, %xmm0
	vmovsd	-144(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -136(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB30_26
# %bb.25:                               # %if.then79
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -96(%rbp)
	jmp	.LBB30_27
.LBB30_26:                              # %if.else81
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -96(%rbp)
.LBB30_27:                              # %return
	vmovsd	-96(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1586401592, -72(%rbp)  # imm = 0x5E8E9138
	jne	.LBB30_29
.LBB30_28:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_29:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -104(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-104(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB30_28
.Lfunc_end30:
	.size	RDCost_for_4x4IntraBlocks.1, .Lfunc_end30-RDCost_for_4x4IntraBlocks.1
	.cfi_endproc
                                        # -- End function
	.globl	GetBestTransformP8x8.2  # -- Begin function GetBestTransformP8x8.2
	.p2align	4, 0x90
	.type	GetBestTransformP8x8.2,@function
GetBestTransformP8x8.2:                 # @GetBestTransformP8x8.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$584, %rsp              # imm = 0x248
	.cfi_offset %rbx, -24
	movl	$432114550, -64(%rbp)   # imm = 0x19C18B76
	movl	$0, -36(%rbp)
	movl	$0, -44(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB31_2
# %bb.1:                                # %if.then
	movl	$1, -40(%rbp)
	jmp	.LBB31_25
.LBB31_2:                               # %if.end
	movl	$0, -28(%rbp)
.LBB31_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_5 Depth 2
                                        #       Child Loop BB31_7 Depth 3
                                        #         Child Loop BB31_9 Depth 4
                                        #           Child Loop BB31_11 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB31_22
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB31_3 Depth=1
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -56(%rbp)
	movl	$0, -32(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB31_5:                               # %for.cond3
                                        #   Parent Loop BB31_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_7 Depth 3
                                        #         Child Loop BB31_9 Depth 4
                                        #           Child Loop BB31_11 Depth 5
	movl	-20(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_20
# %bb.6:                                # %for.body5
                                        #   in Loop: Header=BB31_5 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-56(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB31_7:                               # %for.cond7
                                        #   Parent Loop BB31_3 Depth=1
                                        #     Parent Loop BB31_5 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB31_9 Depth 4
                                        #           Child Loop BB31_11 Depth 5
	movl	-24(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_18
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB31_7 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-32(%rbp), %rax
	shlq	$2, %rax
	leaq	-336(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -72(%rbp)
	movl	$0, -16(%rbp)
.LBB31_9:                               # %for.cond12
                                        #   Parent Loop BB31_3 Depth=1
                                        #     Parent Loop BB31_5 Depth=2
                                        #       Parent Loop BB31_7 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB31_11 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB31_16
# %bb.10:                               # %for.body14
                                        #   in Loop: Header=BB31_9 Depth=4
	movl	$0, -12(%rbp)
.LBB31_11:                              # %for.cond15
                                        #   Parent Loop BB31_3 Depth=1
                                        #     Parent Loop BB31_5 Depth=2
                                        #       Parent Loop BB31_7 Depth=3
                                        #         Parent Loop BB31_9 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -12(%rbp)
	jge	.LBB31_14
# %bb.12:                               # %for.body17
                                        #   in Loop: Header=BB31_11 Depth=5
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB31_11 Depth=5
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB31_11
.LBB31_14:                              # %for.end
                                        #   in Loop: Header=BB31_9 Depth=4
	jmp	.LBB31_15
.LBB31_15:                              # %for.inc51
                                        #   in Loop: Header=BB31_9 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_9
.LBB31_16:                              # %for.end53
                                        #   in Loop: Header=BB31_7 Depth=3
	movq	-72(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
# %bb.17:                               # %for.inc55
                                        #   in Loop: Header=BB31_7 Depth=3
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB31_7
.LBB31_18:                              # %for.end57
                                        #   in Loop: Header=BB31_5 Depth=2
	jmp	.LBB31_19
.LBB31_19:                              # %for.inc58
                                        #   in Loop: Header=BB31_5 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB31_5
.LBB31_20:                              # %for.end60
                                        #   in Loop: Header=BB31_3 Depth=1
	leaq	-592(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.21:                               # %for.inc64
                                        #   in Loop: Header=BB31_3 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB31_3
.LBB31_22:                              # %for.end66
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB31_24
# %bb.23:                               # %if.then69
	movl	$1, -40(%rbp)
	jmp	.LBB31_25
.LBB31_24:                              # %if.else
	movl	$0, -40(%rbp)
.LBB31_25:                              # %return
	movl	-40(%rbp), %ebx
	cmpl	$432114550, -64(%rbp)   # imm = 0x19C18B76
	jne	.LBB31_27
.LBB31_26:
	movl	%ebx, %eax
	addq	$584, %rsp              # imm = 0x248
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_27:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB31_26
.Lfunc_end31:
	.size	GetBestTransformP8x8.2, .Lfunc_end31-GetBestTransformP8x8.2
	.cfi_endproc
                                        # -- End function
	.globl	SetRefAndMotionVectors.3 # -- Begin function SetRefAndMotionVectors.3
	.p2align	4, 0x90
	.type	SetRefAndMotionVectors.3,@function
SetRefAndMotionVectors.3:               # @SetRefAndMotionVectors.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$2035231093, -68(%rbp)  # imm = 0x794F2975
	movl	%edi, -48(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -36(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	cmpl	$1, -12(%rbp)
	je	.LBB32_3
# %bb.1:                                # %lor.lhs.false
	cmpl	$2, -12(%rbp)
	je	.LBB32_3
# %bb.2:                                # %lor.lhs.false5
	cmpl	$3, -12(%rbp)
	jne	.LBB32_4
.LBB32_3:                               # %cond.true
	movl	-12(%rbp), %eax
	jmp	.LBB32_5
.LBB32_4:                               # %cond.false
	movl	$4, %eax
	jmp	.LBB32_5
.LBB32_5:                               # %cond.end
	movl	%eax, -52(%rbp)
	movl	-48(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -32(%rbp)
	movl	-28(%rbp), %eax
	movq	input, %rcx
	movslq	-52(%rbp), %rdx
	addl	148(%rcx,%rdx,8), %eax
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	movq	input, %rcx
	movslq	-52(%rbp), %rdx
	addl	144(%rcx,%rdx,8), %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB32_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB32_8
# %bb.7:                                # %cond.true18
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB32_9
.LBB32_8:                               # %cond.false23
	xorl	%ecx, %ecx
	jmp	.LBB32_9
.LBB32_9:                               # %cond.end24
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	cmpl	$0, -16(%rbp)
	jge	.LBB32_19
# %bb.10:                               # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB32_11:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB32_18
# %bb.12:                               # %for.body
                                        #   in Loop: Header=BB32_11 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB32_13:                              # %for.cond34
                                        #   Parent Loop BB32_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB32_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB32_13 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB32_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_13
.LBB32_16:                              # %for.end
                                        #   in Loop: Header=BB32_11 Depth=1
	jmp	.LBB32_17
.LBB32_17:                              # %for.inc117
                                        #   in Loop: Header=BB32_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_11
.LBB32_18:                              # %for.end119
	jmp	.LBB32_64
.LBB32_19:                              # %if.end
	cmpl	$0, -72(%rbp)
	jne	.LBB32_29
# %bb.20:                               # %if.then121
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB32_21:                              # %for.cond122
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_23 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB32_28
# %bb.22:                               # %for.body125
                                        #   in Loop: Header=BB32_21 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB32_23:                              # %for.cond126
                                        #   Parent Loop BB32_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB32_26
# %bb.24:                               # %for.body129
                                        #   in Loop: Header=BB32_23 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.25:                               # %for.inc209
                                        #   in Loop: Header=BB32_23 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_23
.LBB32_26:                              # %for.end211
                                        #   in Loop: Header=BB32_21 Depth=1
	jmp	.LBB32_27
.LBB32_27:                              # %for.inc212
                                        #   in Loop: Header=BB32_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_21
.LBB32_28:                              # %for.end214
	jmp	.LBB32_64
.LBB32_29:                              # %if.else
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB32_30:                              # %for.cond215
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_32 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB32_63
# %bb.31:                               # %for.body218
                                        #   in Loop: Header=BB32_30 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB32_32:                              # %for.cond219
                                        #   Parent Loop BB32_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB32_61
# %bb.33:                               # %for.body222
                                        #   in Loop: Header=BB32_32 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB32_35
# %bb.34:                               # %if.then225
                                        #   in Loop: Header=BB32_32 Depth=2
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
.LBB32_35:                              # %if.end255
                                        #   in Loop: Header=BB32_32 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB32_37
# %bb.36:                               # %lor.lhs.false258
                                        #   in Loop: Header=BB32_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB32_46
.LBB32_37:                              # %if.then261
                                        #   in Loop: Header=BB32_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB32_44
# %bb.38:                               # %land.lhs.true263
                                        #   in Loop: Header=BB32_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB32_44
# %bb.39:                               # %land.lhs.true266
                                        #   in Loop: Header=BB32_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB32_44
# %bb.40:                               # %if.then269
                                        #   in Loop: Header=BB32_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB32_42
# %bb.41:                               # %cond.true273
                                        #   in Loop: Header=BB32_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB32_43
.LBB32_42:                              # %cond.false274
                                        #   in Loop: Header=BB32_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB32_43:                              # %cond.end275
                                        #   in Loop: Header=BB32_32 Depth=2
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB32_45
.LBB32_44:                              # %if.else342
                                        #   in Loop: Header=BB32_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB32_45:                              # %if.end424
                                        #   in Loop: Header=BB32_32 Depth=2
	jmp	.LBB32_47
.LBB32_46:                              # %if.else425
                                        #   in Loop: Header=BB32_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB32_47:                              # %if.end468
                                        #   in Loop: Header=BB32_32 Depth=2
	cmpl	$1, -16(%rbp)
	je	.LBB32_49
# %bb.48:                               # %lor.lhs.false471
                                        #   in Loop: Header=BB32_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB32_58
.LBB32_49:                              # %if.then474
                                        #   in Loop: Header=BB32_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB32_56
# %bb.50:                               # %land.lhs.true477
                                        #   in Loop: Header=BB32_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB32_56
# %bb.51:                               # %land.lhs.true480
                                        #   in Loop: Header=BB32_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB32_56
# %bb.52:                               # %if.then483
                                        #   in Loop: Header=BB32_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB32_54
# %bb.53:                               # %cond.true488
                                        #   in Loop: Header=BB32_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB32_55
.LBB32_54:                              # %cond.false490
                                        #   in Loop: Header=BB32_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB32_55:                              # %cond.end492
                                        #   in Loop: Header=BB32_32 Depth=2
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB32_57
.LBB32_56:                              # %if.else559
                                        #   in Loop: Header=BB32_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-36(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB32_57:                              # %if.end641
                                        #   in Loop: Header=BB32_32 Depth=2
	jmp	.LBB32_59
.LBB32_58:                              # %if.else642
                                        #   in Loop: Header=BB32_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB32_59:                              # %if.end685
                                        #   in Loop: Header=BB32_32 Depth=2
	jmp	.LBB32_60
.LBB32_60:                              # %for.inc686
                                        #   in Loop: Header=BB32_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_32
.LBB32_61:                              # %for.end688
                                        #   in Loop: Header=BB32_30 Depth=1
	jmp	.LBB32_62
.LBB32_62:                              # %for.inc689
                                        #   in Loop: Header=BB32_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_30
.LBB32_63:                              # %for.end691
	jmp	.LBB32_64
.LBB32_64:                              # %if.end692
	cmpl	$2035231093, -68(%rbp)  # imm = 0x794F2975
	jne	.LBB32_66
.LBB32_65:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_66:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_65
.Lfunc_end32:
	.size	SetRefAndMotionVectors.3, .Lfunc_end32-SetRefAndMotionVectors.3
	.cfi_endproc
                                        # -- End function
	.globl	StoreMVBlock8x8.4       # -- Begin function StoreMVBlock8x8.4
	.p2align	4, 0x90
	.type	StoreMVBlock8x8.4,@function
StoreMVBlock8x8.4:                      # @StoreMVBlock8x8.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$1716657077, -68(%rbp)  # imm = 0x66521BB5
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -32(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB33_12
# %bb.1:                                # %if.then
	cmpl	$0, -60(%rbp)
	jl	.LBB33_11
# %bb.2:                                # %if.then5
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB33_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_5 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB33_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB33_3 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB33_5:                               # %for.cond7
                                        #   Parent Loop BB33_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB33_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB33_5 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB33_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_5
.LBB33_8:                               # %for.end
                                        #   in Loop: Header=BB33_3 Depth=1
	jmp	.LBB33_9
.LBB33_9:                               # %for.inc76
                                        #   in Loop: Header=BB33_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_3
.LBB33_10:                              # %for.end78
	jmp	.LBB33_11
.LBB33_11:                              # %if.end
	jmp	.LBB33_46
.LBB33_12:                              # %if.else
	cmpl	$0, -60(%rbp)
	jne	.LBB33_22
# %bb.13:                               # %if.then80
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB33_14:                              # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_16 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB33_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB33_14 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB33_16:                              # %for.cond84
                                        #   Parent Loop BB33_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB33_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB33_16 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB33_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_16
.LBB33_19:                              # %for.end161
                                        #   in Loop: Header=BB33_14 Depth=1
	jmp	.LBB33_20
.LBB33_20:                              # %for.inc162
                                        #   in Loop: Header=BB33_14 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_14
.LBB33_21:                              # %for.end164
	jmp	.LBB33_45
.LBB33_22:                              # %if.else165
	cmpl	$1, -60(%rbp)
	jne	.LBB33_32
# %bb.23:                               # %if.then167
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB33_24:                              # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_26 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB33_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB33_24 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB33_26:                              # %for.cond171
                                        #   Parent Loop BB33_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB33_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB33_26 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB33_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_26
.LBB33_29:                              # %for.end248
                                        #   in Loop: Header=BB33_24 Depth=1
	jmp	.LBB33_30
.LBB33_30:                              # %for.inc249
                                        #   in Loop: Header=BB33_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_24
.LBB33_31:                              # %for.end251
	jmp	.LBB33_44
.LBB33_32:                              # %if.else252
	cmpl	$2, -60(%rbp)
	jne	.LBB33_42
# %bb.33:                               # %if.then254
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB33_34:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_36 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB33_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB33_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB33_36:                              # %for.cond258
                                        #   Parent Loop BB33_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB33_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB33_36 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rsi,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%ax, 2(%rsi,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	(%rax), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, 2(%rdi,%rsi,4)
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addq	$64, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	addq	%rsi, %rcx
	addq	$64, %rcx
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	movw	%dx, 2(%rcx,%rsi,4)
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB33_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_36
.LBB33_39:                              # %for.end407
                                        #   in Loop: Header=BB33_34 Depth=1
	jmp	.LBB33_40
.LBB33_40:                              # %for.inc408
                                        #   in Loop: Header=BB33_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_34
.LBB33_41:                              # %for.end410
	jmp	.LBB33_43
.LBB33_42:                              # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB33_43:                              # %if.end412
	jmp	.LBB33_44
.LBB33_44:                              # %if.end413
	jmp	.LBB33_45
.LBB33_45:                              # %if.end414
	jmp	.LBB33_46
.LBB33_46:                              # %if.end415
	cmpl	$1716657077, -68(%rbp)  # imm = 0x66521BB5
	jne	.LBB33_48
.LBB33_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB33_47
.Lfunc_end33:
	.size	StoreMVBlock8x8.4, .Lfunc_end33-StoreMVBlock8x8.4
	.cfi_endproc
                                        # -- End function
	.globl	StoreMV8x8.5            # -- Begin function StoreMV8x8.5
	.p2align	4, 0x90
	.type	StoreMV8x8.5,@function
StoreMV8x8.5:                           # @StoreMV8x8.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1428863977, -12(%rbp)  # imm = 0x552ABBE9
	movl	%edi, -8(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB34_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB34_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	-8(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_1
.LBB34_4:                               # %for.end
	cmpl	$1428863977, -12(%rbp)  # imm = 0x552ABBE9
	jne	.LBB34_6
.LBB34_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB34_5
.Lfunc_end34:
	.size	StoreMV8x8.5, .Lfunc_end34-StoreMV8x8.5
	.cfi_endproc
                                        # -- End function
	.globl	StoreMVBlock8x8.6       # -- Begin function StoreMVBlock8x8.6
	.p2align	4, 0x90
	.type	StoreMVBlock8x8.6,@function
StoreMVBlock8x8.6:                      # @StoreMVBlock8x8.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$981956054, -68(%rbp)   # imm = 0x3A8775D6
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -40(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -28(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB35_12
# %bb.1:                                # %if.then
	cmpl	$0, -60(%rbp)
	jl	.LBB35_11
# %bb.2:                                # %if.then5
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB35_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_5 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB35_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB35_3 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB35_5:                               # %for.cond7
                                        #   Parent Loop BB35_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB35_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB35_5 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB35_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_5
.LBB35_8:                               # %for.end
                                        #   in Loop: Header=BB35_3 Depth=1
	jmp	.LBB35_9
.LBB35_9:                               # %for.inc76
                                        #   in Loop: Header=BB35_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_3
.LBB35_10:                              # %for.end78
	jmp	.LBB35_11
.LBB35_11:                              # %if.end
	jmp	.LBB35_46
.LBB35_12:                              # %if.else
	cmpl	$0, -60(%rbp)
	jne	.LBB35_22
# %bb.13:                               # %if.then80
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB35_14:                              # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_16 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB35_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB35_14 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB35_16:                              # %for.cond84
                                        #   Parent Loop BB35_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB35_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB35_16 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB35_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_16
.LBB35_19:                              # %for.end161
                                        #   in Loop: Header=BB35_14 Depth=1
	jmp	.LBB35_20
.LBB35_20:                              # %for.inc162
                                        #   in Loop: Header=BB35_14 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_14
.LBB35_21:                              # %for.end164
	jmp	.LBB35_45
.LBB35_22:                              # %if.else165
	cmpl	$1, -60(%rbp)
	jne	.LBB35_32
# %bb.23:                               # %if.then167
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB35_24:                              # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_26 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB35_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB35_24 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB35_26:                              # %for.cond171
                                        #   Parent Loop BB35_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB35_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB35_26 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB35_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_26
.LBB35_29:                              # %for.end248
                                        #   in Loop: Header=BB35_24 Depth=1
	jmp	.LBB35_30
.LBB35_30:                              # %for.inc249
                                        #   in Loop: Header=BB35_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_24
.LBB35_31:                              # %for.end251
	jmp	.LBB35_44
.LBB35_32:                              # %if.else252
	cmpl	$2, -60(%rbp)
	jne	.LBB35_42
# %bb.33:                               # %if.then254
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB35_34:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_36 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB35_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB35_34 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB35_36:                              # %for.cond258
                                        #   Parent Loop BB35_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB35_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB35_36 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rsi,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%ax, 2(%rsi,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	(%rax), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, 2(%rdi,%rsi,4)
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addq	$64, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	addq	%rsi, %rcx
	addq	$64, %rcx
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	movw	%dx, 2(%rcx,%rsi,4)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB35_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_36
.LBB35_39:                              # %for.end407
                                        #   in Loop: Header=BB35_34 Depth=1
	jmp	.LBB35_40
.LBB35_40:                              # %for.inc408
                                        #   in Loop: Header=BB35_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_34
.LBB35_41:                              # %for.end410
	jmp	.LBB35_43
.LBB35_42:                              # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB35_43:                              # %if.end412
	jmp	.LBB35_44
.LBB35_44:                              # %if.end413
	jmp	.LBB35_45
.LBB35_45:                              # %if.end414
	jmp	.LBB35_46
.LBB35_46:                              # %if.end415
	cmpl	$981956054, -68(%rbp)   # imm = 0x3A8775D6
	jne	.LBB35_48
.LBB35_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB35_47
.Lfunc_end35:
	.size	StoreMVBlock8x8.6, .Lfunc_end35-StoreMVBlock8x8.6
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorsMB.7    # -- Begin function SetMotionVectorsMB.7
	.p2align	4, 0x90
	.type	SetMotionVectorsMB.7,@function
SetMotionVectorsMB.7:                   # @SetMotionVectorsMB.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$4810441, -68(%rbp)     # imm = 0x4966C9
	movq	%rdi, -64(%rbp)
	movl	%esi, -72(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -8(%rbp)
.LBB36_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB36_33
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -4(%rbp)
.LBB36_3:                               # %for.cond3
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB36_31
# %bb.4:                                # %for.body5
                                        #   in Loop: Header=BB36_3 Depth=2
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB36_11
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB36_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB36_11
# %bb.6:                                # %land.lhs.true31
                                        #   in Loop: Header=BB36_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB36_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB36_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB36_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB36_3 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB36_10
.LBB36_9:                               # %cond.false
                                        #   in Loop: Header=BB36_3 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB36_10:                              # %cond.end
                                        #   in Loop: Header=BB36_3 Depth=2
	movq	%rax, -48(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -56(%rbp)
.LBB36_11:                              # %if.end
                                        #   in Loop: Header=BB36_3 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB36_16
# %bb.12:                               # %if.then38
                                        #   in Loop: Header=BB36_3 Depth=2
	cmpl	$0, -52(%rbp)
	jl	.LBB36_14
# %bb.13:                               # %if.then41
                                        #   in Loop: Header=BB36_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB36_15
.LBB36_14:                              # %if.else
                                        #   in Loop: Header=BB36_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB36_15:                              # %if.end89
                                        #   in Loop: Header=BB36_3 Depth=2
	jmp	.LBB36_29
.LBB36_16:                              # %if.else90
                                        #   in Loop: Header=BB36_3 Depth=2
	cmpl	$-1, -52(%rbp)
	jne	.LBB36_18
# %bb.17:                               # %if.then93
                                        #   in Loop: Header=BB36_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB36_28
.LBB36_18:                              # %if.else122
                                        #   in Loop: Header=BB36_3 Depth=2
	cmpl	$0, -52(%rbp)
	jne	.LBB36_20
# %bb.19:                               # %if.then125
                                        #   in Loop: Header=BB36_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB36_27
.LBB36_20:                              # %if.else174
                                        #   in Loop: Header=BB36_3 Depth=2
	cmpl	$1, -52(%rbp)
	jne	.LBB36_22
# %bb.21:                               # %if.then177
                                        #   in Loop: Header=BB36_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB36_26
.LBB36_22:                              # %if.else226
                                        #   in Loop: Header=BB36_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB36_24
# %bb.23:                               # %if.then229
                                        #   in Loop: Header=BB36_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB36_25
.LBB36_24:                              # %if.else298
                                        #   in Loop: Header=BB36_3 Depth=2
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB36_25:                              # %if.end299
                                        #   in Loop: Header=BB36_3 Depth=2
	jmp	.LBB36_26
.LBB36_26:                              # %if.end300
                                        #   in Loop: Header=BB36_3 Depth=2
	jmp	.LBB36_27
.LBB36_27:                              # %if.end301
                                        #   in Loop: Header=BB36_3 Depth=2
	jmp	.LBB36_28
.LBB36_28:                              # %if.end302
                                        #   in Loop: Header=BB36_3 Depth=2
	jmp	.LBB36_29
.LBB36_29:                              # %if.end303
                                        #   in Loop: Header=BB36_3 Depth=2
	jmp	.LBB36_30
.LBB36_30:                              # %for.inc
                                        #   in Loop: Header=BB36_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_3
.LBB36_31:                              # %for.end
                                        #   in Loop: Header=BB36_1 Depth=1
	jmp	.LBB36_32
.LBB36_32:                              # %for.inc304
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_1
.LBB36_33:                              # %for.end306
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB36_55
# %bb.34:                               # %if.then308
	movl	$0, -4(%rbp)
.LBB36_35:                              # %for.cond309
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_37 Depth 2
                                        #       Child Loop BB36_39 Depth 3
                                        #         Child Loop BB36_41 Depth 4
                                        #           Child Loop BB36_43 Depth 5
	cmpl	$4, -4(%rbp)
	jge	.LBB36_54
# %bb.36:                               # %for.body312
                                        #   in Loop: Header=BB36_35 Depth=1
	movl	$0, -8(%rbp)
.LBB36_37:                              # %for.cond313
                                        #   Parent Loop BB36_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_39 Depth 3
                                        #         Child Loop BB36_41 Depth 4
                                        #           Child Loop BB36_43 Depth 5
	cmpl	$4, -8(%rbp)
	jge	.LBB36_52
# %bb.38:                               # %for.body316
                                        #   in Loop: Header=BB36_37 Depth=2
	movl	$0, -20(%rbp)
.LBB36_39:                              # %for.cond317
                                        #   Parent Loop BB36_35 Depth=1
                                        #     Parent Loop BB36_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB36_41 Depth 4
                                        #           Child Loop BB36_43 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB36_50
# %bb.40:                               # %for.body320
                                        #   in Loop: Header=BB36_39 Depth=3
	movl	$0, -24(%rbp)
.LBB36_41:                              # %for.cond321
                                        #   Parent Loop BB36_35 Depth=1
                                        #     Parent Loop BB36_37 Depth=2
                                        #       Parent Loop BB36_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB36_43 Depth 5
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB36_48
# %bb.42:                               # %for.body324
                                        #   in Loop: Header=BB36_41 Depth=4
	movl	$0, -28(%rbp)
.LBB36_43:                              # %for.cond325
                                        #   Parent Loop BB36_35 Depth=1
                                        #     Parent Loop BB36_37 Depth=2
                                        #       Parent Loop BB36_39 Depth=3
                                        #         Parent Loop BB36_41 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$9, -28(%rbp)
	jge	.LBB36_46
# %bb.44:                               # %for.body328
                                        #   in Loop: Header=BB36_43 Depth=5
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.45:                               # %for.inc421
                                        #   in Loop: Header=BB36_43 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB36_43
.LBB36_46:                              # %for.end423
                                        #   in Loop: Header=BB36_41 Depth=4
	jmp	.LBB36_47
.LBB36_47:                              # %for.inc424
                                        #   in Loop: Header=BB36_41 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB36_41
.LBB36_48:                              # %for.end426
                                        #   in Loop: Header=BB36_39 Depth=3
	jmp	.LBB36_49
.LBB36_49:                              # %for.inc427
                                        #   in Loop: Header=BB36_39 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB36_39
.LBB36_50:                              # %for.end429
                                        #   in Loop: Header=BB36_37 Depth=2
	jmp	.LBB36_51
.LBB36_51:                              # %for.inc430
                                        #   in Loop: Header=BB36_37 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_37
.LBB36_52:                              # %for.end432
                                        #   in Loop: Header=BB36_35 Depth=1
	jmp	.LBB36_53
.LBB36_53:                              # %for.inc433
                                        #   in Loop: Header=BB36_35 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_35
.LBB36_54:                              # %for.end435
	jmp	.LBB36_55
.LBB36_55:                              # %if.end436
	cmpl	$4810441, -68(%rbp)     # imm = 0x4966C9
	jne	.LBB36_57
.LBB36_56:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_57:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB36_56
.Lfunc_end36:
	.size	SetMotionVectorsMB.7, .Lfunc_end36-SetMotionVectorsMB.7
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMV8x8.8          # -- Begin function RestoreMV8x8.8
	.p2align	4, 0x90
	.type	RestoreMV8x8.8,@function
RestoreMV8x8.8:                         # @RestoreMV8x8.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$53761266, -12(%rbp)    # imm = 0x33454F2
	movl	%edi, -8(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB37_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB37_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	-8(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_1
.LBB37_4:                               # %for.end
	cmpl	$53761266, -12(%rbp)    # imm = 0x33454F2
	jne	.LBB37_6
.LBB37_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_5
.Lfunc_end37:
	.size	RestoreMV8x8.8, .Lfunc_end37-RestoreMV8x8.8
	.cfi_endproc
                                        # -- End function
	.globl	set_stored_macroblock_parameters.9 # -- Begin function set_stored_macroblock_parameters.9
	.p2align	4, 0x90
	.type	set_stored_macroblock_parameters.9,@function
set_stored_macroblock_parameters.9:     # @set_stored_macroblock_parameters.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$146603996, -52(%rbp)   # imm = 0x8BCFFDC
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB38_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB38_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB38_4
.LBB38_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB38_4
.LBB38_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB38_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_7 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB38_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB38_5 Depth=1
	movl	$0, -4(%rbp)
.LBB38_7:                               # %for.cond9
                                        #   Parent Loop BB38_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB38_12
# %bb.8:                                # %for.body12
                                        #   in Loop: Header=BB38_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-104(%rbp), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB38_10
# %bb.9:                                # %if.then
                                        #   in Loop: Header=BB38_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB38_10:                              # %if.end
                                        #   in Loop: Header=BB38_7 Depth=2
	jmp	.LBB38_11
.LBB38_11:                              # %for.inc
                                        #   in Loop: Header=BB38_7 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_7
.LBB38_12:                              # %for.end
                                        #   in Loop: Header=BB38_5 Depth=1
	jmp	.LBB38_13
.LBB38_13:                              # %for.inc33
                                        #   in Loop: Header=BB38_5 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_5
.LBB38_14:                              # %for.end35
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB38_26
# %bb.15:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB38_16:                              # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_18 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB38_25
# %bb.17:                               # %for.body42
                                        #   in Loop: Header=BB38_16 Depth=1
	movl	$0, -4(%rbp)
.LBB38_18:                              # %for.cond43
                                        #   Parent Loop BB38_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB38_23
# %bb.19:                               # %for.body46
                                        #   in Loop: Header=BB38_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-72(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-72(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB38_21
# %bb.20:                               # %if.then73
                                        #   in Loop: Header=BB38_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB38_21:                              # %if.end92
                                        #   in Loop: Header=BB38_18 Depth=2
	jmp	.LBB38_22
.LBB38_22:                              # %for.inc93
                                        #   in Loop: Header=BB38_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_18
.LBB38_23:                              # %for.end95
                                        #   in Loop: Header=BB38_16 Depth=1
	jmp	.LBB38_24
.LBB38_24:                              # %for.inc96
                                        #   in Loop: Header=BB38_16 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_16
.LBB38_25:                              # %for.end98
	jmp	.LBB38_26
.LBB38_26:                              # %if.end99
	movq	cofAC, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-88(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-96(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movl	cbp, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB38_56
# %bb.27:                               # %if.then104
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movl	cbp, %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	cbp_blk, %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	592(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3348(%rcx)
	movq	-24(%rbp), %rax
	movl	596(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3352(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3344(%rcx)
	movl	$0, -4(%rbp)
.LBB38_28:                              # %for.cond113
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_30 Depth 2
                                        #       Child Loop BB38_32 Depth 3
                                        #         Child Loop BB38_34 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_43
# %bb.29:                               # %for.body117
                                        #   in Loop: Header=BB38_28 Depth=1
	movl	$0, -8(%rbp)
.LBB38_30:                              # %for.cond118
                                        #   Parent Loop BB38_28 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_32 Depth 3
                                        #         Child Loop BB38_34 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB38_41
# %bb.31:                               # %for.body121
                                        #   in Loop: Header=BB38_30 Depth=2
	movl	$0, -12(%rbp)
.LBB38_32:                              # %for.cond122
                                        #   Parent Loop BB38_28 Depth=1
                                        #     Parent Loop BB38_30 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB38_34 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB38_39
# %bb.33:                               # %for.body125
                                        #   in Loop: Header=BB38_32 Depth=3
	movl	$0, -28(%rbp)
.LBB38_34:                              # %for.cond126
                                        #   Parent Loop BB38_28 Depth=1
                                        #     Parent Loop BB38_30 Depth=2
                                        #       Parent Loop BB38_32 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -28(%rbp)
	jge	.LBB38_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB38_34 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc148
                                        #   in Loop: Header=BB38_34 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB38_34
.LBB38_37:                              # %for.end150
                                        #   in Loop: Header=BB38_32 Depth=3
	jmp	.LBB38_38
.LBB38_38:                              # %for.inc151
                                        #   in Loop: Header=BB38_32 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_32
.LBB38_39:                              # %for.end153
                                        #   in Loop: Header=BB38_30 Depth=2
	jmp	.LBB38_40
.LBB38_40:                              # %for.inc154
                                        #   in Loop: Header=BB38_30 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_30
.LBB38_41:                              # %for.end156
                                        #   in Loop: Header=BB38_28 Depth=1
	jmp	.LBB38_42
.LBB38_42:                              # %for.inc157
                                        #   in Loop: Header=BB38_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_28
.LBB38_43:                              # %for.end159
	movl	$0, -4(%rbp)
.LBB38_44:                              # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_46 Depth 2
                                        #       Child Loop BB38_48 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB38_55
# %bb.45:                               # %for.body163
                                        #   in Loop: Header=BB38_44 Depth=1
	movl	$0, -12(%rbp)
.LBB38_46:                              # %for.cond164
                                        #   Parent Loop BB38_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_48 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB38_53
# %bb.47:                               # %for.body167
                                        #   in Loop: Header=BB38_46 Depth=2
	movl	$0, -28(%rbp)
.LBB38_48:                              # %for.cond168
                                        #   Parent Loop BB38_44 Depth=1
                                        #     Parent Loop BB38_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -28(%rbp)
	jge	.LBB38_51
# %bb.49:                               # %for.body171
                                        #   in Loop: Header=BB38_48 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.50:                               # %for.inc186
                                        #   in Loop: Header=BB38_48 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB38_48
.LBB38_51:                              # %for.end188
                                        #   in Loop: Header=BB38_46 Depth=2
	jmp	.LBB38_52
.LBB38_52:                              # %for.inc189
                                        #   in Loop: Header=BB38_46 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_46
.LBB38_53:                              # %for.end191
                                        #   in Loop: Header=BB38_44 Depth=1
	jmp	.LBB38_54
.LBB38_54:                              # %for.inc192
                                        #   in Loop: Header=BB38_44 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_44
.LBB38_55:                              # %for.end194
	jmp	.LBB38_56
.LBB38_56:                              # %if.end195
	movl	$0, -4(%rbp)
.LBB38_57:                              # %for.cond196
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB38_62
# %bb.58:                               # %for.body199
                                        #   in Loop: Header=BB38_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB38_60
# %bb.59:                               # %if.then212
                                        #   in Loop: Header=BB38_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
.LBB38_60:                              # %if.end225
                                        #   in Loop: Header=BB38_57 Depth=1
	jmp	.LBB38_61
.LBB38_61:                              # %for.inc226
                                        #   in Loop: Header=BB38_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_57
.LBB38_62:                              # %for.end228
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB38_64
# %bb.63:                               # %if.then232
	movl	bi_pred_me, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB38_65
.LBB38_64:                              # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB38_65:                              # %if.end234
	cmpl	$8, -32(%rbp)
	jne	.LBB38_69
# %bb.66:                               # %land.lhs.true237
	cmpl	$0, luma_transform_size_8x8_flag
	jne	.LBB38_69
# %bb.67:                               # %land.lhs.true239
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB38_69
# %bb.68:                               # %if.then241
	movl	$1, %edi
	callq	RestoreMV8x8
.LBB38_69:                              # %if.end242
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB38_73
# %bb.70:                               # %land.lhs.true246
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB38_73
# %bb.71:                               # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB38_73
# %bb.72:                               # %if.then253
	movq	-24(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB38_74
.LBB38_73:                              # %if.else254
	movl	luma_transform_size_8x8_flag, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB38_74:                              # %if.end256
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB38_77
# %bb.75:                               # %land.lhs.true261
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB38_77
# %bb.76:                               # %if.then265
	movl	-32(%rbp), %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movq	img, %rdx
	movslq	136(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	140(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
.LBB38_77:                              # %if.end271
	movl	$0, -8(%rbp)
.LBB38_78:                              # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_80 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB38_112
# %bb.79:                               # %for.body275
                                        #   in Loop: Header=BB38_78 Depth=1
	movl	$0, -4(%rbp)
.LBB38_80:                              # %for.cond276
                                        #   Parent Loop BB38_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB38_110
# %bb.81:                               # %for.body279
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$1, 488(%rsi,%rax,4)
	je	.LBB38_85
# %bb.82:                               # %lor.lhs.false287
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB38_85
# %bb.83:                               # %lor.lhs.false291
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB38_85
# %bb.84:                               # %lor.lhs.false295
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB38_88
.LBB38_85:                              # %if.then299
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB38_87
# %bb.86:                               # %if.then339
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB38_87:                              # %if.end345
                                        #   in Loop: Header=BB38_80 Depth=2
	jmp	.LBB38_101
.LBB38_88:                              # %if.else346
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB38_97
# %bb.89:                               # %land.lhs.true349
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB38_97
# %bb.90:                               # %land.lhs.true359
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB38_97
# %bb.91:                               # %if.then363
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB38_93
# %bb.92:                               # %cond.true367
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB38_94
.LBB38_93:                              # %cond.false368
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB38_94:                              # %cond.end369
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	%rax, -64(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB38_96
# %bb.95:                               # %if.then451
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB38_96:                              # %if.end458
                                        #   in Loop: Header=BB38_80 Depth=2
	jmp	.LBB38_100
.LBB38_97:                              # %if.else459
                                        #   in Loop: Header=BB38_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB38_99
# %bb.98:                               # %if.then567
                                        #   in Loop: Header=BB38_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB38_99:                              # %if.end578
                                        #   in Loop: Header=BB38_80 Depth=2
	jmp	.LBB38_100
.LBB38_100:                             # %if.end579
                                        #   in Loop: Header=BB38_80 Depth=2
	jmp	.LBB38_101
.LBB38_101:                             # %if.end580
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	je	.LBB38_105
# %bb.102:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB38_105
# %bb.103:                              # %lor.lhs.false594
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB38_105
# %bb.104:                              # %lor.lhs.false598
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB38_108
.LBB38_105:                             # %if.then602
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB38_107
# %bb.106:                              # %if.then647
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB38_107:                             # %if.end654
                                        #   in Loop: Header=BB38_80 Depth=2
	jmp	.LBB38_108
.LBB38_108:                             # %if.end655
                                        #   in Loop: Header=BB38_80 Depth=2
	jmp	.LBB38_109
.LBB38_109:                             # %for.inc656
                                        #   in Loop: Header=BB38_80 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_80
.LBB38_110:                             # %for.end658
                                        #   in Loop: Header=BB38_78 Depth=1
	jmp	.LBB38_111
.LBB38_111:                             # %for.inc659
                                        #   in Loop: Header=BB38_78 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_78
.LBB38_112:                             # %for.end661
	cmpl	$0, -40(%rbp)
	je	.LBB38_142
# %bb.113:                              # %if.then663
	movl	$0, -8(%rbp)
.LBB38_114:                             # %for.cond664
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_116 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB38_141
# %bb.115:                              # %for.body667
                                        #   in Loop: Header=BB38_114 Depth=1
	movl	$0, -4(%rbp)
.LBB38_116:                             # %for.cond668
                                        #   Parent Loop BB38_114 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB38_139
# %bb.117:                              # %for.body671
                                        #   in Loop: Header=BB38_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB38_121
# %bb.118:                              # %lor.lhs.false675
                                        #   in Loop: Header=BB38_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB38_121
# %bb.119:                              # %lor.lhs.false679
                                        #   in Loop: Header=BB38_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB38_121
# %bb.120:                              # %lor.lhs.false683
                                        #   in Loop: Header=BB38_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	jne	.LBB38_124
.LBB38_121:                             # %if.then693
                                        #   in Loop: Header=BB38_116 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB38_123
# %bb.122:                              # %if.then738
                                        #   in Loop: Header=BB38_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB38_123:                             # %if.end745
                                        #   in Loop: Header=BB38_116 Depth=2
	jmp	.LBB38_137
.LBB38_124:                             # %if.else746
                                        #   in Loop: Header=BB38_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB38_133
# %bb.125:                              # %land.lhs.true749
                                        #   in Loop: Header=BB38_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB38_133
# %bb.126:                              # %land.lhs.true759
                                        #   in Loop: Header=BB38_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB38_133
# %bb.127:                              # %if.then763
                                        #   in Loop: Header=BB38_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB38_129
# %bb.128:                              # %cond.true768
                                        #   in Loop: Header=BB38_116 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB38_130
.LBB38_129:                             # %cond.false770
                                        #   in Loop: Header=BB38_116 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB38_130:                             # %cond.end772
                                        #   in Loop: Header=BB38_116 Depth=2
	movq	%rax, -80(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB38_132
# %bb.131:                              # %if.then855
                                        #   in Loop: Header=BB38_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB38_132:                             # %if.end862
                                        #   in Loop: Header=BB38_116 Depth=2
	jmp	.LBB38_136
.LBB38_133:                             # %if.else863
                                        #   in Loop: Header=BB38_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB38_135
# %bb.134:                              # %if.then972
                                        #   in Loop: Header=BB38_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB38_135:                             # %if.end983
                                        #   in Loop: Header=BB38_116 Depth=2
	jmp	.LBB38_136
.LBB38_136:                             # %if.end984
                                        #   in Loop: Header=BB38_116 Depth=2
	jmp	.LBB38_137
.LBB38_137:                             # %if.end985
                                        #   in Loop: Header=BB38_116 Depth=2
	jmp	.LBB38_138
.LBB38_138:                             # %for.inc986
                                        #   in Loop: Header=BB38_116 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_116
.LBB38_139:                             # %for.end988
                                        #   in Loop: Header=BB38_114 Depth=1
	jmp	.LBB38_140
.LBB38_140:                             # %for.inc989
                                        #   in Loop: Header=BB38_114 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_114
.LBB38_141:                             # %for.end991
	jmp	.LBB38_142
.LBB38_142:                             # %if.end992
	movl	best_c_imode, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	best_i16offset, %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB38_152
# %bb.143:                              # %if.then997
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB38_144:                             # %for.cond998
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_146 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB38_151
# %bb.145:                              # %for.body1001
                                        #   in Loop: Header=BB38_144 Depth=1
	movl	$0, -8(%rbp)
.LBB38_146:                             # %for.cond1002
                                        #   Parent Loop BB38_144 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB38_149
# %bb.147:                              # %for.body1005
                                        #   in Loop: Header=BB38_146 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.148:                              # %for.inc1027
                                        #   in Loop: Header=BB38_146 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_146
.LBB38_149:                             # %for.end1030
                                        #   in Loop: Header=BB38_144 Depth=1
	jmp	.LBB38_150
.LBB38_150:                             # %for.inc1031
                                        #   in Loop: Header=BB38_144 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_144
.LBB38_151:                             # %for.end1033
	jmp	.LBB38_175
.LBB38_152:                             # %if.else1034
	cmpl	$9, -32(%rbp)
	je	.LBB38_163
# %bb.153:                              # %land.lhs.true1037
	cmpl	$13, -32(%rbp)
	je	.LBB38_163
# %bb.154:                              # %if.then1040
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB38_155:                             # %for.cond1042
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_157 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_162
# %bb.156:                              # %for.body1047
                                        #   in Loop: Header=BB38_155 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB38_157:                             # %for.cond1049
                                        #   Parent Loop BB38_155 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_160
# %bb.158:                              # %for.body1054
                                        #   in Loop: Header=BB38_157 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.159:                              # %for.inc1062
                                        #   in Loop: Header=BB38_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_157
.LBB38_160:                             # %for.end1065
                                        #   in Loop: Header=BB38_155 Depth=1
	jmp	.LBB38_161
.LBB38_161:                             # %for.inc1066
                                        #   in Loop: Header=BB38_155 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_155
.LBB38_162:                             # %for.end1068
	jmp	.LBB38_174
.LBB38_163:                             # %if.else1069
	cmpl	$9, -32(%rbp)
	jne	.LBB38_173
# %bb.164:                              # %if.then1072
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB38_165:                             # %for.cond1074
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_167 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_172
# %bb.166:                              # %for.body1079
                                        #   in Loop: Header=BB38_165 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB38_167:                             # %for.cond1081
                                        #   Parent Loop BB38_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_170
# %bb.168:                              # %for.body1086
                                        #   in Loop: Header=BB38_167 Depth=2
	movslq	-12(%rbp), %rax
	movl	b4_ipredmode(,%rax,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b4_intra_pred_modes(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.169:                              # %for.inc1098
                                        #   in Loop: Header=BB38_167 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_167
.LBB38_170:                             # %for.end1101
                                        #   in Loop: Header=BB38_165 Depth=1
	jmp	.LBB38_171
.LBB38_171:                             # %for.inc1102
                                        #   in Loop: Header=BB38_165 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_165
.LBB38_172:                             # %for.end1104
	jmp	.LBB38_173
.LBB38_173:                             # %if.end1105
	jmp	.LBB38_174
.LBB38_174:                             # %if.end1106
	jmp	.LBB38_175
.LBB38_175:                             # %if.end1107
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB38_185
# %bb.176:                              # %if.then1111
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB38_177:                             # %for.cond1112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_179 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB38_184
# %bb.178:                              # %for.body1115
                                        #   in Loop: Header=BB38_177 Depth=1
	movl	$0, -8(%rbp)
.LBB38_179:                             # %for.cond1116
                                        #   Parent Loop BB38_177 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB38_182
# %bb.180:                              # %for.body1119
                                        #   in Loop: Header=BB38_179 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$b8_ipredmode8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b8_intra_pred_modes8x8(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.181:                              # %for.inc1138
                                        #   in Loop: Header=BB38_179 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_179
.LBB38_182:                             # %for.end1141
                                        #   in Loop: Header=BB38_177 Depth=1
	jmp	.LBB38_183
.LBB38_183:                             # %for.inc1142
                                        #   in Loop: Header=BB38_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_177
.LBB38_184:                             # %for.end1144
	jmp	.LBB38_185
.LBB38_185:                             # %if.end1145
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB38_195
# %bb.186:                              # %if.then1148
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB38_187:                             # %for.cond1150
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_189 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_194
# %bb.188:                              # %for.body1155
                                        #   in Loop: Header=BB38_187 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB38_189:                             # %for.cond1157
                                        #   Parent Loop BB38_187 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_192
# %bb.190:                              # %for.body1162
                                        #   in Loop: Header=BB38_189 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.191:                              # %for.inc1178
                                        #   in Loop: Header=BB38_189 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_189
.LBB38_192:                             # %for.end1181
                                        #   in Loop: Header=BB38_187 Depth=1
	jmp	.LBB38_193
.LBB38_193:                             # %for.inc1182
                                        #   in Loop: Header=BB38_187 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_187
.LBB38_194:                             # %for.end1184
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3332(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
.LBB38_195:                             # %if.end1189
	movq	-24(%rbp), %rdi
	movl	-40(%rbp), %esi
	callq	SetMotionVectorsMB
	cmpl	$146603996, -52(%rbp)   # imm = 0x8BCFFDC
	jne	.LBB38_197
.LBB38_196:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_197:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_196
.Lfunc_end38:
	.size	set_stored_macroblock_parameters.9, .Lfunc_end38-set_stored_macroblock_parameters.9
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_macroblocks.10
.LCPI39_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	RDCost_for_macroblocks.10
	.p2align	4, 0x90
	.type	RDCost_for_macroblocks.10,@function
RDCost_for_macroblocks.10:              # @RDCost_for_macroblocks.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$32192733, -96(%rbp)    # imm = 0x1EB38DD
	vmovsd	%xmm0, -88(%rbp)
	movl	%edi, -24(%rbp)
	movq	%rsi, -128(%rbp)
	movl	%edx, -64(%rbp)
	movl	$0, -36(%rbp)
	movq	$0, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB39_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB39_3
.LBB39_2:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB39_3
.LBB39_3:                               # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -120(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -76(%rbp)
	movq	img, %rcx
	cmpl	$2, 24(%rcx)
	je	.LBB39_5
# %bb.4:                                # %land.rhs
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	setne	%al
.LBB39_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -40(%rbp)
	movl	-24(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$0, -76(%rbp)
	je	.LBB39_18
# %bb.6:                                # %land.lhs.true
	cmpl	$0, -24(%rbp)
	jne	.LBB39_18
# %bb.7:                                # %if.then
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -92(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -16(%rbp)
.LBB39_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_10 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB39_17
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB39_8 Depth=1
	movl	$0, -12(%rbp)
.LBB39_10:                              # %for.cond17
                                        #   Parent Loop BB39_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB39_15
# %bb.11:                               # %for.body20
                                        #   in Loop: Header=BB39_10 Depth=2
	movq	direct_pdir, %rax
	movl	-92(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-100(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB39_13
# %bb.12:                               # %if.then29
	movl	$0, -60(%rbp)
	jmp	.LBB39_177
.LBB39_13:                              # %if.end
                                        #   in Loop: Header=BB39_10 Depth=2
	jmp	.LBB39_14
.LBB39_14:                              # %for.inc
                                        #   in Loop: Header=BB39_10 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_10
.LBB39_15:                              # %for.end
                                        #   in Loop: Header=BB39_8 Depth=1
	jmp	.LBB39_16
.LBB39_16:                              # %for.inc30
                                        #   in Loop: Header=BB39_8 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_8
.LBB39_17:                              # %for.end32
	jmp	.LBB39_18
.LBB39_18:                              # %if.end33
	cmpl	$8, -24(%rbp)
	jge	.LBB39_24
# %bb.19:                               # %if.then36
	movb	$0, %al
	callq	LumaResidualCoding
	cmpl	$0, -24(%rbp)
	jne	.LBB39_23
# %bb.20:                               # %land.lhs.true39
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB39_23
# %bb.21:                               # %land.lhs.true42
	movq	-48(%rbp), %rax
	cmpl	$1, 572(%rax)
	jne	.LBB39_23
# %bb.22:                               # %if.then45
	movl	$0, -60(%rbp)
	jmp	.LBB39_177
.LBB39_23:                              # %if.end46
	jmp	.LBB39_76
.LBB39_24:                              # %if.else
	cmpl	$8, -24(%rbp)
	jne	.LBB39_26
# %bb.25:                               # %if.then49
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	jmp	.LBB39_75
.LBB39_26:                              # %if.else50
	cmpl	$9, -24(%rbp)
	jne	.LBB39_48
# %bb.27:                               # %if.then53
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-32(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB39_47
# %bb.28:                               # %if.then56
	movl	$0, -16(%rbp)
.LBB39_29:                              # %for.cond57
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_31 Depth 2
                                        #       Child Loop BB39_33 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB39_42
# %bb.30:                               # %for.body60
                                        #   in Loop: Header=BB39_29 Depth=1
	movl	$0, -12(%rbp)
.LBB39_31:                              # %for.cond61
                                        #   Parent Loop BB39_29 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_33 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB39_40
# %bb.32:                               # %for.body64
                                        #   in Loop: Header=BB39_31 Depth=2
	movl	$0, -20(%rbp)
.LBB39_33:                              # %for.cond65
                                        #   Parent Loop BB39_29 Depth=1
                                        #     Parent Loop BB39_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB39_38
# %bb.34:                               # %for.body68
                                        #   in Loop: Header=BB39_33 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB39_36
# %bb.35:                               # %if.then76
                                        #   in Loop: Header=BB39_33 Depth=3
	movl	$2, -40(%rbp)
.LBB39_36:                              # %if.end77
                                        #   in Loop: Header=BB39_33 Depth=3
	jmp	.LBB39_37
.LBB39_37:                              # %for.inc78
                                        #   in Loop: Header=BB39_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB39_33
.LBB39_38:                              # %for.end80
                                        #   in Loop: Header=BB39_31 Depth=2
	jmp	.LBB39_39
.LBB39_39:                              # %for.inc81
                                        #   in Loop: Header=BB39_31 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_31
.LBB39_40:                              # %for.end83
                                        #   in Loop: Header=BB39_29 Depth=1
	jmp	.LBB39_41
.LBB39_41:                              # %for.inc84
                                        #   in Loop: Header=BB39_29 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_29
.LBB39_42:                              # %for.end86
	movl	$0, -28(%rbp)
.LBB39_43:                              # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -28(%rbp)
	jge	.LBB39_46
# %bb.44:                               # %for.body90
                                        #   in Loop: Header=BB39_43 Depth=1
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.45:                               # %for.inc92
                                        #   in Loop: Header=BB39_43 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB39_43
.LBB39_46:                              # %for.end94
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB39_47:                              # %if.end97
	jmp	.LBB39_74
.LBB39_48:                              # %if.else98
	cmpl	$10, -24(%rbp)
	jne	.LBB39_50
# %bb.49:                               # %if.then101
	movq	-48(%rbp), %rdi
	leaq	-64(%rbp), %rsi
	callq	Intra16x16_Mode_Decision
	jmp	.LBB39_73
.LBB39_50:                              # %if.else102
	cmpl	$13, -24(%rbp)
	jne	.LBB39_72
# %bb.51:                               # %if.then105
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-32(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB39_71
# %bb.52:                               # %if.then110
	movl	$0, -16(%rbp)
.LBB39_53:                              # %for.cond111
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_55 Depth 2
                                        #       Child Loop BB39_57 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB39_66
# %bb.54:                               # %for.body114
                                        #   in Loop: Header=BB39_53 Depth=1
	movl	$0, -12(%rbp)
.LBB39_55:                              # %for.cond115
                                        #   Parent Loop BB39_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_57 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB39_64
# %bb.56:                               # %for.body118
                                        #   in Loop: Header=BB39_55 Depth=2
	movl	$0, -20(%rbp)
.LBB39_57:                              # %for.cond119
                                        #   Parent Loop BB39_53 Depth=1
                                        #     Parent Loop BB39_55 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB39_62
# %bb.58:                               # %for.body122
                                        #   in Loop: Header=BB39_57 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB39_60
# %bb.59:                               # %if.then130
                                        #   in Loop: Header=BB39_57 Depth=3
	movl	$2, -40(%rbp)
.LBB39_60:                              # %if.end131
                                        #   in Loop: Header=BB39_57 Depth=3
	jmp	.LBB39_61
.LBB39_61:                              # %for.inc132
                                        #   in Loop: Header=BB39_57 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB39_57
.LBB39_62:                              # %for.end134
                                        #   in Loop: Header=BB39_55 Depth=2
	jmp	.LBB39_63
.LBB39_63:                              # %for.inc135
                                        #   in Loop: Header=BB39_55 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_55
.LBB39_64:                              # %for.end137
                                        #   in Loop: Header=BB39_53 Depth=1
	jmp	.LBB39_65
.LBB39_65:                              # %for.inc138
                                        #   in Loop: Header=BB39_53 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_53
.LBB39_66:                              # %for.end140
	movl	$0, -28(%rbp)
.LBB39_67:                              # %for.cond141
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -28(%rbp)
	jge	.LBB39_70
# %bb.68:                               # %for.body144
                                        #   in Loop: Header=BB39_67 Depth=1
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.69:                               # %for.inc146
                                        #   in Loop: Header=BB39_67 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB39_67
.LBB39_70:                              # %for.end148
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB39_71:                              # %if.end152
	jmp	.LBB39_72
.LBB39_72:                              # %if.end153
	jmp	.LBB39_73
.LBB39_73:                              # %if.end154
	jmp	.LBB39_74
.LBB39_74:                              # %if.end155
	jmp	.LBB39_75
.LBB39_75:                              # %if.end156
	jmp	.LBB39_76
.LBB39_76:                              # %if.end157
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB39_82
# %bb.77:                               # %land.lhs.true160
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB39_82
# %bb.78:                               # %if.then164
	cmpl	$10, -24(%rbp)
	jne	.LBB39_80
# %bb.79:                               # %cond.true167
	movl	-64(%rbp), %edi
	jmp	.LBB39_81
.LBB39_80:                              # %cond.false168
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	jmp	.LBB39_81
.LBB39_81:                              # %cond.end169
	callq	compute_residue_mb
.LBB39_82:                              # %if.end171
	cmpl	$10, -24(%rbp)
	jne	.LBB39_92
# %bb.83:                               # %if.then174
	movl	$0, -16(%rbp)
.LBB39_84:                              # %for.cond175
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_86 Depth 2
	cmpl	$16, -16(%rbp)
	jge	.LBB39_91
# %bb.85:                               # %for.body178
                                        #   in Loop: Header=BB39_84 Depth=1
	movl	$0, -12(%rbp)
.LBB39_86:                              # %for.cond179
                                        #   Parent Loop BB39_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -12(%rbp)
	jge	.LBB39_89
# %bb.87:                               # %for.body182
                                        #   in Loop: Header=BB39_86 Depth=2
	movq	img, %rax
	addq	$4792, %rax             # imm = 0x12B8
	movslq	-64(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc194
                                        #   in Loop: Header=BB39_86 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_86
.LBB39_89:                              # %for.end196
                                        #   in Loop: Header=BB39_84 Depth=1
	jmp	.LBB39_90
.LBB39_90:                              # %for.inc197
                                        #   in Loop: Header=BB39_84 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_84
.LBB39_91:                              # %for.end199
	jmp	.LBB39_101
.LBB39_92:                              # %if.else200
	movl	$0, -16(%rbp)
.LBB39_93:                              # %for.cond201
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_95 Depth 2
	cmpl	$16, -16(%rbp)
	jge	.LBB39_100
# %bb.94:                               # %for.body204
                                        #   in Loop: Header=BB39_93 Depth=1
	movl	$0, -12(%rbp)
.LBB39_95:                              # %for.cond205
                                        #   Parent Loop BB39_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -12(%rbp)
	jge	.LBB39_98
# %bb.96:                               # %for.body208
                                        #   in Loop: Header=BB39_95 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.97:                               # %for.inc218
                                        #   in Loop: Header=BB39_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_95
.LBB39_98:                              # %for.end220
                                        #   in Loop: Header=BB39_93 Depth=1
	jmp	.LBB39_99
.LBB39_99:                              # %for.inc221
                                        #   in Loop: Header=BB39_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_93
.LBB39_100:                             # %for.end223
	jmp	.LBB39_101
.LBB39_101:                             # %if.end224
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB39_105
# %bb.102:                              # %land.lhs.true227
	cmpl	$9, -24(%rbp)
	je	.LBB39_107
# %bb.103:                              # %lor.lhs.false
	cmpl	$10, -24(%rbp)
	je	.LBB39_107
# %bb.104:                              # %lor.lhs.false232
	cmpl	$13, -24(%rbp)
	je	.LBB39_107
.LBB39_105:                             # %land.lhs.true235
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB39_107
# %bb.106:                              # %if.then238
	leaq	-32(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB39_107:                             # %if.end239
	cmpl	$10, -24(%rbp)
	jne	.LBB39_109
# %bb.108:                              # %if.then242
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-64(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB39_109:                             # %if.end246
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB39_124
# %bb.110:                              # %land.lhs.true250
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB39_124
# %bb.111:                              # %if.then254
	movl	$0, -20(%rbp)
.LBB39_112:                             # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_114 Depth 2
                                        #       Child Loop BB39_116 Depth 3
	movl	-20(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB39_123
# %bb.113:                              # %for.body258
                                        #   in Loop: Header=BB39_112 Depth=1
	movl	-20(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	decode_one_mb
	movl	$0, -12(%rbp)
.LBB39_114:                             # %for.cond259
                                        #   Parent Loop BB39_112 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_116 Depth 3
	cmpl	$16, -12(%rbp)
	jge	.LBB39_121
# %bb.115:                              # %for.body262
                                        #   in Loop: Header=BB39_114 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -16(%rbp)
.LBB39_116:                             # %for.cond263
                                        #   Parent Loop BB39_112 Depth=1
                                        #     Parent Loop BB39_114 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB39_119
# %bb.117:                              # %for.body268
                                        #   in Loop: Header=BB39_116 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	172(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.118:                              # %for.inc289
                                        #   in Loop: Header=BB39_116 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_116
.LBB39_119:                             # %for.end291
                                        #   in Loop: Header=BB39_114 Depth=2
	jmp	.LBB39_120
.LBB39_120:                             # %for.inc292
                                        #   in Loop: Header=BB39_114 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_114
.LBB39_121:                             # %for.end294
                                        #   in Loop: Header=BB39_112 Depth=1
	jmp	.LBB39_122
.LBB39_122:                             # %for.inc295
                                        #   in Loop: Header=BB39_112 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB39_112
.LBB39_123:                             # %for.end297
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-56(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -56(%rbp)
	jmp	.LBB39_133
.LBB39_124:                             # %if.else300
	movl	$0, -12(%rbp)
.LBB39_125:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_127 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB39_132
# %bb.126:                              # %for.body304
                                        #   in Loop: Header=BB39_125 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -16(%rbp)
.LBB39_127:                             # %for.cond306
                                        #   Parent Loop BB39_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB39_130
# %bb.128:                              # %for.body311
                                        #   in Loop: Header=BB39_127 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-12(%rbp), %edx
	movq	img, %rsi
	addl	172(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.129:                              # %for.inc332
                                        #   in Loop: Header=BB39_127 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_127
.LBB39_130:                             # %for.end334
                                        #   in Loop: Header=BB39_125 Depth=1
	jmp	.LBB39_131
.LBB39_131:                             # %for.inc335
                                        #   in Loop: Header=BB39_125 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_125
.LBB39_132:                             # %for.end337
	jmp	.LBB39_133
.LBB39_133:                             # %if.end338
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB39_143
# %bb.134:                              # %if.then342
	movl	$0, -12(%rbp)
.LBB39_135:                             # %for.cond343
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_137 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB39_142
# %bb.136:                              # %for.body346
                                        #   in Loop: Header=BB39_135 Depth=1
	movq	img, %rax
	movl	176(%rax), %eax
	movl	%eax, -16(%rbp)
.LBB39_137:                             # %for.cond347
                                        #   Parent Loop BB39_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	movq	img, %rdx
	addl	72708(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB39_140
# %bb.138:                              # %for.body352
                                        #   in Loop: Header=BB39_137 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-12(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-12(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.139:                              # %for.inc396
                                        #   in Loop: Header=BB39_137 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_137
.LBB39_140:                             # %for.end398
                                        #   in Loop: Header=BB39_135 Depth=1
	jmp	.LBB39_141
.LBB39_141:                             # %for.inc399
                                        #   in Loop: Header=BB39_135 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_135
.LBB39_142:                             # %for.end401
	jmp	.LBB39_143
.LBB39_143:                             # %if.end402
	movq	cs_cm, %rdi
	callq	store_coding_state
	cmpl	$0, -104(%rbp)
	je	.LBB39_150
# %bb.144:                              # %if.then404
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB39_147
# %bb.145:                              # %lor.lhs.false407
	cmpl	$0, -76(%rbp)
	je	.LBB39_148
# %bb.146:                              # %land.lhs.true409
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB39_148
.LBB39_147:                             # %if.then413
	movq	img, %rax
	movl	120(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -36(%rbp)
	movl	-72(%rbp), %edi
	movl	-32(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-32(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-36(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	movl	-72(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 120(%rcx)
	jmp	.LBB39_149
.LBB39_148:                             # %if.else417
	movq	img, %rax
	movl	120(%rax), %edi
	addl	$1, %edi
	movl	-32(%rbp), %esi
	leaq	-36(%rbp), %rdx
	leaq	-32(%rbp), %rcx
	callq	ue_linfo
	movq	img, %rax
	movl	120(%rax), %edi
	movl	-32(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-32(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-36(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -36(%rbp)
.LBB39_149:                             # %if.end422
	jmp	.LBB39_151
.LBB39_150:                             # %if.else423
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -36(%rbp)
.LBB39_151:                             # %if.end425
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vmovsd	.LCPI39_0(%rip), %xmm2  # xmm2 = mem[0],zero
	vcvtsi2sdq	-56(%rbp), %xmm0, %xmm0
	vmovsd	-88(%rbp), %xmm1        # xmm1 = mem[0],zero
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm3
	vucomisd	%xmm3, %xmm2
	jbe	.LBB39_153
# %bb.152:                              # %cond.true430
	vmovsd	.LCPI39_0(%rip), %xmm2  # xmm2 = mem[0],zero
	jmp	.LBB39_154
.LBB39_153:                             # %cond.false431
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm2
.LBB39_154:                             # %cond.end433
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -112(%rbp)
	vmovsd	-112(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-128(%rbp), %rax
	vucomisd	(%rax), %xmm0
	jae	.LBB39_158
# %bb.155:                              # %lor.lhs.false438
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB39_159
# %bb.156:                              # %land.lhs.true442
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	jne	.LBB39_159
# %bb.157:                              # %land.lhs.true445
	cmpq	$0, -56(%rbp)
	je	.LBB39_159
.LBB39_158:                             # %if.then448
	movl	$0, -60(%rbp)
	jmp	.LBB39_177
.LBB39_159:                             # %if.end449
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB39_176
# %bb.160:                              # %land.lhs.true451
	cmpl	$0, -24(%rbp)
	je	.LBB39_162
# %bb.161:                              # %cond.true453
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB39_165
	jmp	.LBB39_176
.LBB39_162:                             # %cond.false454
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB39_164
# %bb.163:                              # %cond.true458
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB39_176
	jmp	.LBB39_165
.LBB39_164:                             # %cond.false461
	movb	$1, %al
	testb	$1, %al
	jne	.LBB39_165
	jmp	.LBB39_176
.LBB39_165:                             # %if.then462
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB39_175
# %bb.166:                              # %if.then465
	movq	-120(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB39_168
# %bb.167:                              # %cond.true468
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB39_171
	jmp	.LBB39_174
.LBB39_168:                             # %cond.false469
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB39_170
# %bb.169:                              # %cond.true473
	movq	-120(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB39_174
	jmp	.LBB39_171
.LBB39_170:                             # %cond.false476
	movb	$1, %al
	testb	$1, %al
	jne	.LBB39_171
	jmp	.LBB39_174
.LBB39_171:                             # %if.then477
	callq	field_flag_inference
	movq	-48(%rbp), %rcx
	cmpl	532(%rcx), %eax
	je	.LBB39_173
# %bb.172:                              # %if.then481
	movl	$0, -60(%rbp)
	jmp	.LBB39_177
.LBB39_173:                             # %if.end482
	jmp	.LBB39_174
.LBB39_174:                             # %if.end483
	jmp	.LBB39_175
.LBB39_175:                             # %if.end484
	jmp	.LBB39_176
.LBB39_176:                             # %if.end485
	vmovsd	-112(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-128(%rbp), %rax
	vmovsd	%xmm0, (%rax)
	movl	$1, -60(%rbp)
.LBB39_177:                             # %return
	movl	-60(%rbp), %ebx
	cmpl	$32192733, -96(%rbp)    # imm = 0x1EB38DD
	jne	.LBB39_179
.LBB39_178:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_179:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_178
.Lfunc_end39:
	.size	RDCost_for_macroblocks.10, .Lfunc_end39-RDCost_for_macroblocks.10
	.cfi_endproc
                                        # -- End function
	.globl	StoreNewMotionVectorsBlock8x8.11 # -- Begin function StoreNewMotionVectorsBlock8x8.11
	.p2align	4, 0x90
	.type	StoreNewMotionVectorsBlock8x8.11,@function
StoreNewMotionVectorsBlock8x8.11:       # @StoreNewMotionVectorsBlock8x8.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$1667406716, -72(%rbp)  # imm = 0x63629B7C
	movl	%edi, -12(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -44(%rbp)
	movl	%r9d, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -24(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -40(%rbp)
	jge	.LBB40_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB40_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB40_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB40_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB40_4:                               # %for.cond6
                                        #   Parent Loop BB40_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB40_7
# %bb.5:                                # %for.body8
                                        #   in Loop: Header=BB40_4 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	$0, 2(%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	$0, 2(%rax,%rcx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB40_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_4
.LBB40_7:                               # %for.end
                                        #   in Loop: Header=BB40_2 Depth=1
	jmp	.LBB40_8
.LBB40_8:                               # %for.inc39
                                        #   in Loop: Header=BB40_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_2
.LBB40_9:                               # %for.end41
	jmp	.LBB40_61
.LBB40_10:                              # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB40_20
# %bb.11:                               # %if.then42
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB40_12:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_14 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB40_19
# %bb.13:                               # %for.body45
                                        #   in Loop: Header=BB40_12 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB40_14:                              # %for.cond46
                                        #   Parent Loop BB40_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB40_17
# %bb.15:                               # %for.body48
                                        #   in Loop: Header=BB40_14 Depth=2
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.16:                               # %for.inc117
                                        #   in Loop: Header=BB40_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_14
.LBB40_17:                              # %for.end119
                                        #   in Loop: Header=BB40_12 Depth=1
	jmp	.LBB40_18
.LBB40_18:                              # %for.inc120
                                        #   in Loop: Header=BB40_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_12
.LBB40_19:                              # %for.end122
	jmp	.LBB40_61
.LBB40_20:                              # %if.else
	cmpl	$0, -40(%rbp)
	je	.LBB40_22
# %bb.21:                               # %lor.lhs.false
	cmpl	$2, -40(%rbp)
	jne	.LBB40_31
.LBB40_22:                              # %if.then125
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB40_23:                              # %for.cond126
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_25 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB40_30
# %bb.24:                               # %for.body128
                                        #   in Loop: Header=BB40_23 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB40_25:                              # %for.cond129
                                        #   Parent Loop BB40_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB40_28
# %bb.26:                               # %for.body131
                                        #   in Loop: Header=BB40_25 Depth=2
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.27:                               # %for.inc204
                                        #   in Loop: Header=BB40_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_25
.LBB40_28:                              # %for.end206
                                        #   in Loop: Header=BB40_23 Depth=1
	jmp	.LBB40_29
.LBB40_29:                              # %for.inc207
                                        #   in Loop: Header=BB40_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_23
.LBB40_30:                              # %for.end209
	jmp	.LBB40_40
.LBB40_31:                              # %if.else210
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB40_32:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_34 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB40_39
# %bb.33:                               # %for.body213
                                        #   in Loop: Header=BB40_32 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB40_34:                              # %for.cond214
                                        #   Parent Loop BB40_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB40_37
# %bb.35:                               # %for.body216
                                        #   in Loop: Header=BB40_34 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.36:                               # %for.inc233
                                        #   in Loop: Header=BB40_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_34
.LBB40_37:                              # %for.end235
                                        #   in Loop: Header=BB40_32 Depth=1
	jmp	.LBB40_38
.LBB40_38:                              # %for.inc236
                                        #   in Loop: Header=BB40_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_32
.LBB40_39:                              # %for.end238
	jmp	.LBB40_40
.LBB40_40:                              # %if.end239
	cmpl	$1, -40(%rbp)
	je	.LBB40_42
# %bb.41:                               # %lor.lhs.false241
	cmpl	$2, -40(%rbp)
	jne	.LBB40_51
.LBB40_42:                              # %if.then243
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB40_43:                              # %for.cond244
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_45 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB40_50
# %bb.44:                               # %for.body246
                                        #   in Loop: Header=BB40_43 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB40_45:                              # %for.cond247
                                        #   Parent Loop BB40_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB40_48
# %bb.46:                               # %for.body249
                                        #   in Loop: Header=BB40_45 Depth=2
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.47:                               # %for.inc322
                                        #   in Loop: Header=BB40_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_45
.LBB40_48:                              # %for.end324
                                        #   in Loop: Header=BB40_43 Depth=1
	jmp	.LBB40_49
.LBB40_49:                              # %for.inc325
                                        #   in Loop: Header=BB40_43 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_43
.LBB40_50:                              # %for.end327
	jmp	.LBB40_60
.LBB40_51:                              # %if.else328
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB40_52:                              # %for.cond329
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB40_59
# %bb.53:                               # %for.body331
                                        #   in Loop: Header=BB40_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB40_54:                              # %for.cond332
                                        #   Parent Loop BB40_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB40_57
# %bb.55:                               # %for.body334
                                        #   in Loop: Header=BB40_54 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	addq	$64, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.56:                               # %for.inc351
                                        #   in Loop: Header=BB40_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_54
.LBB40_57:                              # %for.end353
                                        #   in Loop: Header=BB40_52 Depth=1
	jmp	.LBB40_58
.LBB40_58:                              # %for.inc354
                                        #   in Loop: Header=BB40_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_52
.LBB40_59:                              # %for.end356
	jmp	.LBB40_60
.LBB40_60:                              # %if.end357
	jmp	.LBB40_61
.LBB40_61:                              # %if.end358
	cmpl	$1667406716, -72(%rbp)  # imm = 0x63629B7C
	jne	.LBB40_63
.LBB40_62:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_62
.Lfunc_end40:
	.size	StoreNewMotionVectorsBlock8x8.11, .Lfunc_end40-StoreNewMotionVectorsBlock8x8.11
	.cfi_endproc
                                        # -- End function
	.globl	StoreNewMotionVectorsBlock8x8.12 # -- Begin function StoreNewMotionVectorsBlock8x8.12
	.p2align	4, 0x90
	.type	StoreNewMotionVectorsBlock8x8.12,@function
StoreNewMotionVectorsBlock8x8.12:       # @StoreNewMotionVectorsBlock8x8.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$1983476730, -72(%rbp)  # imm = 0x763973FA
	movl	%edi, -12(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -44(%rbp)
	movl	%r9d, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -24(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -40(%rbp)
	jge	.LBB41_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB41_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB41_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB41_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB41_4:                               # %for.cond6
                                        #   Parent Loop BB41_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB41_7
# %bb.5:                                # %for.body8
                                        #   in Loop: Header=BB41_4 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	$0, 2(%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	$0, 2(%rax,%rcx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB41_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_4
.LBB41_7:                               # %for.end
                                        #   in Loop: Header=BB41_2 Depth=1
	jmp	.LBB41_8
.LBB41_8:                               # %for.inc39
                                        #   in Loop: Header=BB41_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_2
.LBB41_9:                               # %for.end41
	jmp	.LBB41_61
.LBB41_10:                              # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB41_20
# %bb.11:                               # %if.then42
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB41_12:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_14 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB41_19
# %bb.13:                               # %for.body45
                                        #   in Loop: Header=BB41_12 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB41_14:                              # %for.cond46
                                        #   Parent Loop BB41_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB41_17
# %bb.15:                               # %for.body48
                                        #   in Loop: Header=BB41_14 Depth=2
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.16:                               # %for.inc117
                                        #   in Loop: Header=BB41_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_14
.LBB41_17:                              # %for.end119
                                        #   in Loop: Header=BB41_12 Depth=1
	jmp	.LBB41_18
.LBB41_18:                              # %for.inc120
                                        #   in Loop: Header=BB41_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_12
.LBB41_19:                              # %for.end122
	jmp	.LBB41_61
.LBB41_20:                              # %if.else
	cmpl	$0, -40(%rbp)
	je	.LBB41_22
# %bb.21:                               # %lor.lhs.false
	cmpl	$2, -40(%rbp)
	jne	.LBB41_31
.LBB41_22:                              # %if.then125
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB41_23:                              # %for.cond126
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_25 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB41_30
# %bb.24:                               # %for.body128
                                        #   in Loop: Header=BB41_23 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB41_25:                              # %for.cond129
                                        #   Parent Loop BB41_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB41_28
# %bb.26:                               # %for.body131
                                        #   in Loop: Header=BB41_25 Depth=2
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.27:                               # %for.inc204
                                        #   in Loop: Header=BB41_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_25
.LBB41_28:                              # %for.end206
                                        #   in Loop: Header=BB41_23 Depth=1
	jmp	.LBB41_29
.LBB41_29:                              # %for.inc207
                                        #   in Loop: Header=BB41_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_23
.LBB41_30:                              # %for.end209
	jmp	.LBB41_40
.LBB41_31:                              # %if.else210
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB41_32:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_34 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB41_39
# %bb.33:                               # %for.body213
                                        #   in Loop: Header=BB41_32 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB41_34:                              # %for.cond214
                                        #   Parent Loop BB41_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB41_37
# %bb.35:                               # %for.body216
                                        #   in Loop: Header=BB41_34 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.36:                               # %for.inc233
                                        #   in Loop: Header=BB41_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_34
.LBB41_37:                              # %for.end235
                                        #   in Loop: Header=BB41_32 Depth=1
	jmp	.LBB41_38
.LBB41_38:                              # %for.inc236
                                        #   in Loop: Header=BB41_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_32
.LBB41_39:                              # %for.end238
	jmp	.LBB41_40
.LBB41_40:                              # %if.end239
	cmpl	$1, -40(%rbp)
	je	.LBB41_42
# %bb.41:                               # %lor.lhs.false241
	cmpl	$2, -40(%rbp)
	jne	.LBB41_51
.LBB41_42:                              # %if.then243
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB41_43:                              # %for.cond244
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_45 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB41_50
# %bb.44:                               # %for.body246
                                        #   in Loop: Header=BB41_43 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB41_45:                              # %for.cond247
                                        #   Parent Loop BB41_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB41_48
# %bb.46:                               # %for.body249
                                        #   in Loop: Header=BB41_45 Depth=2
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.47:                               # %for.inc322
                                        #   in Loop: Header=BB41_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_45
.LBB41_48:                              # %for.end324
                                        #   in Loop: Header=BB41_43 Depth=1
	jmp	.LBB41_49
.LBB41_49:                              # %for.inc325
                                        #   in Loop: Header=BB41_43 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_43
.LBB41_50:                              # %for.end327
	jmp	.LBB41_60
.LBB41_51:                              # %if.else328
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB41_52:                              # %for.cond329
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB41_59
# %bb.53:                               # %for.body331
                                        #   in Loop: Header=BB41_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB41_54:                              # %for.cond332
                                        #   Parent Loop BB41_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB41_57
# %bb.55:                               # %for.body334
                                        #   in Loop: Header=BB41_54 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	addq	$64, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.56:                               # %for.inc351
                                        #   in Loop: Header=BB41_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_54
.LBB41_57:                              # %for.end353
                                        #   in Loop: Header=BB41_52 Depth=1
	jmp	.LBB41_58
.LBB41_58:                              # %for.inc354
                                        #   in Loop: Header=BB41_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_52
.LBB41_59:                              # %for.end356
	jmp	.LBB41_60
.LBB41_60:                              # %if.end357
	jmp	.LBB41_61
.LBB41_61:                              # %if.end358
	cmpl	$1983476730, -72(%rbp)  # imm = 0x763973FA
	jne	.LBB41_63
.LBB41_62:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_62
.Lfunc_end41:
	.size	StoreNewMotionVectorsBlock8x8.12, .Lfunc_end41-StoreNewMotionVectorsBlock8x8.12
	.cfi_endproc
                                        # -- End function
	.globl	SetRefAndMotionVectors.13 # -- Begin function SetRefAndMotionVectors.13
	.p2align	4, 0x90
	.type	SetRefAndMotionVectors.13,@function
SetRefAndMotionVectors.13:              # @SetRefAndMotionVectors.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1970052411, -68(%rbp)  # imm = 0x756C9D3B
	movl	%edi, -48(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -36(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	cmpl	$1, -12(%rbp)
	je	.LBB42_3
# %bb.1:                                # %lor.lhs.false
	cmpl	$2, -12(%rbp)
	je	.LBB42_3
# %bb.2:                                # %lor.lhs.false5
	cmpl	$3, -12(%rbp)
	jne	.LBB42_4
.LBB42_3:                               # %cond.true
	movl	-12(%rbp), %eax
	jmp	.LBB42_5
.LBB42_4:                               # %cond.false
	movl	$4, %eax
	jmp	.LBB42_5
.LBB42_5:                               # %cond.end
	movl	%eax, -52(%rbp)
	movl	-48(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -32(%rbp)
	movl	-28(%rbp), %eax
	movq	input, %rcx
	movslq	-52(%rbp), %rdx
	addl	148(%rcx,%rdx,8), %eax
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	movq	input, %rcx
	movslq	-52(%rbp), %rdx
	addl	144(%rcx,%rdx,8), %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB42_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB42_8
# %bb.7:                                # %cond.true18
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB42_9
.LBB42_8:                               # %cond.false23
	xorl	%ecx, %ecx
	jmp	.LBB42_9
.LBB42_9:                               # %cond.end24
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	cmpl	$0, -16(%rbp)
	jge	.LBB42_19
# %bb.10:                               # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB42_11:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB42_18
# %bb.12:                               # %for.body
                                        #   in Loop: Header=BB42_11 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB42_13:                              # %for.cond34
                                        #   Parent Loop BB42_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB42_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB42_13 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB42_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_13
.LBB42_16:                              # %for.end
                                        #   in Loop: Header=BB42_11 Depth=1
	jmp	.LBB42_17
.LBB42_17:                              # %for.inc117
                                        #   in Loop: Header=BB42_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_11
.LBB42_18:                              # %for.end119
	jmp	.LBB42_64
.LBB42_19:                              # %if.end
	cmpl	$0, -72(%rbp)
	jne	.LBB42_29
# %bb.20:                               # %if.then121
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB42_21:                              # %for.cond122
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_23 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB42_28
# %bb.22:                               # %for.body125
                                        #   in Loop: Header=BB42_21 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB42_23:                              # %for.cond126
                                        #   Parent Loop BB42_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB42_26
# %bb.24:                               # %for.body129
                                        #   in Loop: Header=BB42_23 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.25:                               # %for.inc209
                                        #   in Loop: Header=BB42_23 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_23
.LBB42_26:                              # %for.end211
                                        #   in Loop: Header=BB42_21 Depth=1
	jmp	.LBB42_27
.LBB42_27:                              # %for.inc212
                                        #   in Loop: Header=BB42_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_21
.LBB42_28:                              # %for.end214
	jmp	.LBB42_64
.LBB42_29:                              # %if.else
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB42_30:                              # %for.cond215
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_32 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB42_63
# %bb.31:                               # %for.body218
                                        #   in Loop: Header=BB42_30 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB42_32:                              # %for.cond219
                                        #   Parent Loop BB42_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB42_61
# %bb.33:                               # %for.body222
                                        #   in Loop: Header=BB42_32 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB42_35
# %bb.34:                               # %if.then225
                                        #   in Loop: Header=BB42_32 Depth=2
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
.LBB42_35:                              # %if.end255
                                        #   in Loop: Header=BB42_32 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB42_37
# %bb.36:                               # %lor.lhs.false258
                                        #   in Loop: Header=BB42_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB42_46
.LBB42_37:                              # %if.then261
                                        #   in Loop: Header=BB42_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB42_44
# %bb.38:                               # %land.lhs.true263
                                        #   in Loop: Header=BB42_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB42_44
# %bb.39:                               # %land.lhs.true266
                                        #   in Loop: Header=BB42_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB42_44
# %bb.40:                               # %if.then269
                                        #   in Loop: Header=BB42_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB42_42
# %bb.41:                               # %cond.true273
                                        #   in Loop: Header=BB42_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB42_43
.LBB42_42:                              # %cond.false274
                                        #   in Loop: Header=BB42_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB42_43:                              # %cond.end275
                                        #   in Loop: Header=BB42_32 Depth=2
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB42_45
.LBB42_44:                              # %if.else342
                                        #   in Loop: Header=BB42_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB42_45:                              # %if.end424
                                        #   in Loop: Header=BB42_32 Depth=2
	jmp	.LBB42_47
.LBB42_46:                              # %if.else425
                                        #   in Loop: Header=BB42_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB42_47:                              # %if.end468
                                        #   in Loop: Header=BB42_32 Depth=2
	cmpl	$1, -16(%rbp)
	je	.LBB42_49
# %bb.48:                               # %lor.lhs.false471
                                        #   in Loop: Header=BB42_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB42_58
.LBB42_49:                              # %if.then474
                                        #   in Loop: Header=BB42_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB42_56
# %bb.50:                               # %land.lhs.true477
                                        #   in Loop: Header=BB42_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB42_56
# %bb.51:                               # %land.lhs.true480
                                        #   in Loop: Header=BB42_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB42_56
# %bb.52:                               # %if.then483
                                        #   in Loop: Header=BB42_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB42_54
# %bb.53:                               # %cond.true488
                                        #   in Loop: Header=BB42_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB42_55
.LBB42_54:                              # %cond.false490
                                        #   in Loop: Header=BB42_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB42_55:                              # %cond.end492
                                        #   in Loop: Header=BB42_32 Depth=2
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB42_57
.LBB42_56:                              # %if.else559
                                        #   in Loop: Header=BB42_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-36(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB42_57:                              # %if.end641
                                        #   in Loop: Header=BB42_32 Depth=2
	jmp	.LBB42_59
.LBB42_58:                              # %if.else642
                                        #   in Loop: Header=BB42_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB42_59:                              # %if.end685
                                        #   in Loop: Header=BB42_32 Depth=2
	jmp	.LBB42_60
.LBB42_60:                              # %for.inc686
                                        #   in Loop: Header=BB42_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_32
.LBB42_61:                              # %for.end688
                                        #   in Loop: Header=BB42_30 Depth=1
	jmp	.LBB42_62
.LBB42_62:                              # %for.inc689
                                        #   in Loop: Header=BB42_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_30
.LBB42_63:                              # %for.end691
	jmp	.LBB42_64
.LBB42_64:                              # %if.end692
	cmpl	$1970052411, -68(%rbp)  # imm = 0x756C9D3B
	jne	.LBB42_66
.LBB42_65:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_66:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_65
.Lfunc_end42:
	.size	SetRefAndMotionVectors.13, .Lfunc_end42-SetRefAndMotionVectors.13
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMV8x8.14         # -- Begin function RestoreMV8x8.14
	.p2align	4, 0x90
	.type	RestoreMV8x8.14,@function
RestoreMV8x8.14:                        # @RestoreMV8x8.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$664220117, -12(%rbp)   # imm = 0x279731D5
	movl	%edi, -16(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB43_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB43_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	-16(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-8(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_1
.LBB43_4:                               # %for.end
	cmpl	$664220117, -12(%rbp)   # imm = 0x279731D5
	jne	.LBB43_6
.LBB43_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_5
.Lfunc_end43:
	.size	RestoreMV8x8.14, .Lfunc_end43-RestoreMV8x8.14
	.cfi_endproc
                                        # -- End function
	.globl	field_flag_inference.15 # -- Begin function field_flag_inference.15
	.p2align	4, 0x90
	.type	field_flag_inference.15,@function
field_flag_inference.15:                # @field_flag_inference.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$417191843, -28(%rbp)   # imm = 0x18DDD7A3
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 552(%rax)
	je	.LBB44_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	536(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	532(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_6
.LBB44_2:                               # %if.else
	movq	-24(%rbp), %rax
	cmpl	$0, 556(%rax)
	je	.LBB44_4
# %bb.3:                                # %if.then6
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	540(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	532(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_5
.LBB44_4:                               # %if.else11
	movl	$0, -12(%rbp)
.LBB44_5:                               # %if.end
	jmp	.LBB44_6
.LBB44_6:                               # %if.end12
	movl	-12(%rbp), %ebx
	cmpl	$417191843, -28(%rbp)   # imm = 0x18DDD7A3
	jne	.LBB44_8
.LBB44_7:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_7
.Lfunc_end44:
	.size	field_flag_inference.15, .Lfunc_end44-field_flag_inference.15
	.cfi_endproc
                                        # -- End function
	.globl	SetRefAndMotionVectors.16 # -- Begin function SetRefAndMotionVectors.16
	.p2align	4, 0x90
	.type	SetRefAndMotionVectors.16,@function
SetRefAndMotionVectors.16:              # @SetRefAndMotionVectors.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$978856785, -72(%rbp)   # imm = 0x3A582B51
	movl	%edi, -48(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -36(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$1, -12(%rbp)
	je	.LBB45_3
# %bb.1:                                # %lor.lhs.false
	cmpl	$2, -12(%rbp)
	je	.LBB45_3
# %bb.2:                                # %lor.lhs.false5
	cmpl	$3, -12(%rbp)
	jne	.LBB45_4
.LBB45_3:                               # %cond.true
	movl	-12(%rbp), %eax
	jmp	.LBB45_5
.LBB45_4:                               # %cond.false
	movl	$4, %eax
	jmp	.LBB45_5
.LBB45_5:                               # %cond.end
	movl	%eax, -52(%rbp)
	movl	-48(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -28(%rbp)
	movl	-32(%rbp), %eax
	movq	input, %rcx
	movslq	-52(%rbp), %rdx
	addl	148(%rcx,%rdx,8), %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	movq	input, %rcx
	movslq	-52(%rbp), %rdx
	addl	144(%rcx,%rdx,8), %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB45_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB45_8
# %bb.7:                                # %cond.true18
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB45_9
.LBB45_8:                               # %cond.false23
	xorl	%ecx, %ecx
	jmp	.LBB45_9
.LBB45_9:                               # %cond.end24
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	cmpl	$0, -16(%rbp)
	jge	.LBB45_19
# %bb.10:                               # %if.then
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB45_11:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB45_18
# %bb.12:                               # %for.body
                                        #   in Loop: Header=BB45_11 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB45_13:                              # %for.cond34
                                        #   Parent Loop BB45_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB45_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB45_13 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB45_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_13
.LBB45_16:                              # %for.end
                                        #   in Loop: Header=BB45_11 Depth=1
	jmp	.LBB45_17
.LBB45_17:                              # %for.inc117
                                        #   in Loop: Header=BB45_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_11
.LBB45_18:                              # %for.end119
	jmp	.LBB45_64
.LBB45_19:                              # %if.end
	cmpl	$0, -68(%rbp)
	jne	.LBB45_29
# %bb.20:                               # %if.then121
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB45_21:                              # %for.cond122
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_23 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB45_28
# %bb.22:                               # %for.body125
                                        #   in Loop: Header=BB45_21 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB45_23:                              # %for.cond126
                                        #   Parent Loop BB45_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB45_26
# %bb.24:                               # %for.body129
                                        #   in Loop: Header=BB45_23 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.25:                               # %for.inc209
                                        #   in Loop: Header=BB45_23 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_23
.LBB45_26:                              # %for.end211
                                        #   in Loop: Header=BB45_21 Depth=1
	jmp	.LBB45_27
.LBB45_27:                              # %for.inc212
                                        #   in Loop: Header=BB45_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_21
.LBB45_28:                              # %for.end214
	jmp	.LBB45_64
.LBB45_29:                              # %if.else
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB45_30:                              # %for.cond215
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_32 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB45_63
# %bb.31:                               # %for.body218
                                        #   in Loop: Header=BB45_30 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB45_32:                              # %for.cond219
                                        #   Parent Loop BB45_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB45_61
# %bb.33:                               # %for.body222
                                        #   in Loop: Header=BB45_32 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB45_35
# %bb.34:                               # %if.then225
                                        #   in Loop: Header=BB45_32 Depth=2
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
.LBB45_35:                              # %if.end255
                                        #   in Loop: Header=BB45_32 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB45_37
# %bb.36:                               # %lor.lhs.false258
                                        #   in Loop: Header=BB45_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB45_46
.LBB45_37:                              # %if.then261
                                        #   in Loop: Header=BB45_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB45_44
# %bb.38:                               # %land.lhs.true263
                                        #   in Loop: Header=BB45_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB45_44
# %bb.39:                               # %land.lhs.true266
                                        #   in Loop: Header=BB45_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB45_44
# %bb.40:                               # %if.then269
                                        #   in Loop: Header=BB45_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB45_42
# %bb.41:                               # %cond.true273
                                        #   in Loop: Header=BB45_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB45_43
.LBB45_42:                              # %cond.false274
                                        #   in Loop: Header=BB45_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB45_43:                              # %cond.end275
                                        #   in Loop: Header=BB45_32 Depth=2
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB45_45
.LBB45_44:                              # %if.else342
                                        #   in Loop: Header=BB45_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB45_45:                              # %if.end424
                                        #   in Loop: Header=BB45_32 Depth=2
	jmp	.LBB45_47
.LBB45_46:                              # %if.else425
                                        #   in Loop: Header=BB45_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB45_47:                              # %if.end468
                                        #   in Loop: Header=BB45_32 Depth=2
	cmpl	$1, -16(%rbp)
	je	.LBB45_49
# %bb.48:                               # %lor.lhs.false471
                                        #   in Loop: Header=BB45_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB45_58
.LBB45_49:                              # %if.then474
                                        #   in Loop: Header=BB45_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB45_56
# %bb.50:                               # %land.lhs.true477
                                        #   in Loop: Header=BB45_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB45_56
# %bb.51:                               # %land.lhs.true480
                                        #   in Loop: Header=BB45_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB45_56
# %bb.52:                               # %if.then483
                                        #   in Loop: Header=BB45_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB45_54
# %bb.53:                               # %cond.true488
                                        #   in Loop: Header=BB45_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB45_55
.LBB45_54:                              # %cond.false490
                                        #   in Loop: Header=BB45_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB45_55:                              # %cond.end492
                                        #   in Loop: Header=BB45_32 Depth=2
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB45_57
.LBB45_56:                              # %if.else559
                                        #   in Loop: Header=BB45_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-36(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB45_57:                              # %if.end641
                                        #   in Loop: Header=BB45_32 Depth=2
	jmp	.LBB45_59
.LBB45_58:                              # %if.else642
                                        #   in Loop: Header=BB45_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB45_59:                              # %if.end685
                                        #   in Loop: Header=BB45_32 Depth=2
	jmp	.LBB45_60
.LBB45_60:                              # %for.inc686
                                        #   in Loop: Header=BB45_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_32
.LBB45_61:                              # %for.end688
                                        #   in Loop: Header=BB45_30 Depth=1
	jmp	.LBB45_62
.LBB45_62:                              # %for.inc689
                                        #   in Loop: Header=BB45_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_30
.LBB45_63:                              # %for.end691
	jmp	.LBB45_64
.LBB45_64:                              # %if.end692
	cmpl	$978856785, -72(%rbp)   # imm = 0x3A582B51
	jne	.LBB45_66
.LBB45_65:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_66:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_65
.Lfunc_end45:
	.size	SetRefAndMotionVectors.16, .Lfunc_end45-SetRefAndMotionVectors.16
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMVBlock8x8.17    # -- Begin function RestoreMVBlock8x8.17
	.p2align	4, 0x90
	.type	RestoreMVBlock8x8.17,@function
RestoreMVBlock8x8.17:                   # @RestoreMVBlock8x8.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$164057117, -68(%rbp)   # imm = 0x9C7501D
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -56(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -40(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -32(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB46_12
# %bb.1:                                # %if.then
	cmpl	$0, -56(%rbp)
	jl	.LBB46_11
# %bb.2:                                # %if.then5
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB46_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_5 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB46_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB46_3 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB46_5:                               # %for.cond7
                                        #   Parent Loop BB46_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB46_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB46_5 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB46_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_5
.LBB46_8:                               # %for.end
                                        #   in Loop: Header=BB46_3 Depth=1
	jmp	.LBB46_9
.LBB46_9:                               # %for.inc76
                                        #   in Loop: Header=BB46_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_3
.LBB46_10:                              # %for.end78
	jmp	.LBB46_11
.LBB46_11:                              # %if.end
	jmp	.LBB46_46
.LBB46_12:                              # %if.else
	cmpl	$0, -56(%rbp)
	jne	.LBB46_22
# %bb.13:                               # %if.then80
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB46_14:                              # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_16 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB46_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB46_14 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB46_16:                              # %for.cond84
                                        #   Parent Loop BB46_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB46_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB46_16 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB46_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_16
.LBB46_19:                              # %for.end161
                                        #   in Loop: Header=BB46_14 Depth=1
	jmp	.LBB46_20
.LBB46_20:                              # %for.inc162
                                        #   in Loop: Header=BB46_14 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_14
.LBB46_21:                              # %for.end164
	jmp	.LBB46_45
.LBB46_22:                              # %if.else165
	cmpl	$1, -56(%rbp)
	jne	.LBB46_32
# %bb.23:                               # %if.then167
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB46_24:                              # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_26 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB46_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB46_24 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB46_26:                              # %for.cond171
                                        #   Parent Loop BB46_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB46_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB46_26 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB46_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_26
.LBB46_29:                              # %for.end248
                                        #   in Loop: Header=BB46_24 Depth=1
	jmp	.LBB46_30
.LBB46_30:                              # %for.inc249
                                        #   in Loop: Header=BB46_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_24
.LBB46_31:                              # %for.end251
	jmp	.LBB46_44
.LBB46_32:                              # %if.else252
	cmpl	$2, -56(%rbp)
	jne	.LBB46_42
# %bb.33:                               # %if.then254
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB46_34:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_36 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB46_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB46_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB46_36:                              # %for.cond258
                                        #   Parent Loop BB46_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB46_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB46_36 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	2(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, 2(%rdx)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-40(%rbp), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	2(%rsi,%rdx,4), %dx
	movq	-40(%rbp), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, 2(%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-48(%rbp), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	8(%rsi), %rsi
	movslq	-24(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	addq	$64, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	2(%rcx,%rdx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB46_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_36
.LBB46_39:                              # %for.end407
                                        #   in Loop: Header=BB46_34 Depth=1
	jmp	.LBB46_40
.LBB46_40:                              # %for.inc408
                                        #   in Loop: Header=BB46_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_34
.LBB46_41:                              # %for.end410
	jmp	.LBB46_43
.LBB46_42:                              # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB46_43:                              # %if.end412
	jmp	.LBB46_44
.LBB46_44:                              # %if.end413
	jmp	.LBB46_45
.LBB46_45:                              # %if.end414
	jmp	.LBB46_46
.LBB46_46:                              # %if.end415
	cmpl	$164057117, -68(%rbp)   # imm = 0x9C7501D
	jne	.LBB46_48
.LBB46_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_47
.Lfunc_end46:
	.size	RestoreMVBlock8x8.17, .Lfunc_end46-RestoreMVBlock8x8.17
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_Intra4x4Macroblock.18 # -- Begin function Mode_Decision_for_Intra4x4Macroblock.18
	.p2align	4, 0x90
	.type	Mode_Decision_for_Intra4x4Macroblock.18,@function
Mode_Decision_for_Intra4x4Macroblock.18: # @Mode_Decision_for_Intra4x4Macroblock.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1619376351, -24(%rbp)  # imm = 0x6085B8DF
	vmovsd	%xmm0, -40(%rbp)
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB47_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB47_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-12(%rbp), %edi
	vmovsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-20(%rbp), %rsi
	callq	Mode_Decision_for_8x8IntraBlocks
	cmpl	$0, %eax
	je	.LBB47_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-12(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB47_4:                               # %if.end
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-20(%rbp), %eax
	movq	-32(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_1
.LBB47_6:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$1619376351, -24(%rbp)  # imm = 0x6085B8DF
	jne	.LBB47_8
.LBB47_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_7
.Lfunc_end47:
	.size	Mode_Decision_for_Intra4x4Macroblock.18, .Lfunc_end47-Mode_Decision_for_Intra4x4Macroblock.18
	.cfi_endproc
                                        # -- End function
	.globl	SetRefAndMotionVectors.19 # -- Begin function SetRefAndMotionVectors.19
	.p2align	4, 0x90
	.type	SetRefAndMotionVectors.19,@function
SetRefAndMotionVectors.19:              # @SetRefAndMotionVectors.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1659363656, -68(%rbp)  # imm = 0x62E7E148
	movl	%edi, -48(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -32(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	cmpl	$1, -12(%rbp)
	je	.LBB48_3
# %bb.1:                                # %lor.lhs.false
	cmpl	$2, -12(%rbp)
	je	.LBB48_3
# %bb.2:                                # %lor.lhs.false5
	cmpl	$3, -12(%rbp)
	jne	.LBB48_4
.LBB48_3:                               # %cond.true
	movl	-12(%rbp), %eax
	jmp	.LBB48_5
.LBB48_4:                               # %cond.false
	movl	$4, %eax
	jmp	.LBB48_5
.LBB48_5:                               # %cond.end
	movl	%eax, -52(%rbp)
	movl	-48(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -36(%rbp)
	movl	-28(%rbp), %eax
	movq	input, %rcx
	movslq	-52(%rbp), %rdx
	addl	148(%rcx,%rdx,8), %eax
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	movq	input, %rcx
	movslq	-52(%rbp), %rdx
	addl	144(%rcx,%rdx,8), %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB48_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB48_8
# %bb.7:                                # %cond.true18
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB48_9
.LBB48_8:                               # %cond.false23
	xorl	%ecx, %ecx
	jmp	.LBB48_9
.LBB48_9:                               # %cond.end24
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	cmpl	$0, -16(%rbp)
	jge	.LBB48_19
# %bb.10:                               # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB48_11:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB48_18
# %bb.12:                               # %for.body
                                        #   in Loop: Header=BB48_11 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB48_13:                              # %for.cond34
                                        #   Parent Loop BB48_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB48_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB48_13 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB48_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_13
.LBB48_16:                              # %for.end
                                        #   in Loop: Header=BB48_11 Depth=1
	jmp	.LBB48_17
.LBB48_17:                              # %for.inc117
                                        #   in Loop: Header=BB48_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_11
.LBB48_18:                              # %for.end119
	jmp	.LBB48_64
.LBB48_19:                              # %if.end
	cmpl	$0, -72(%rbp)
	jne	.LBB48_29
# %bb.20:                               # %if.then121
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB48_21:                              # %for.cond122
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_23 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB48_28
# %bb.22:                               # %for.body125
                                        #   in Loop: Header=BB48_21 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB48_23:                              # %for.cond126
                                        #   Parent Loop BB48_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB48_26
# %bb.24:                               # %for.body129
                                        #   in Loop: Header=BB48_23 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.25:                               # %for.inc209
                                        #   in Loop: Header=BB48_23 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_23
.LBB48_26:                              # %for.end211
                                        #   in Loop: Header=BB48_21 Depth=1
	jmp	.LBB48_27
.LBB48_27:                              # %for.inc212
                                        #   in Loop: Header=BB48_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_21
.LBB48_28:                              # %for.end214
	jmp	.LBB48_64
.LBB48_29:                              # %if.else
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB48_30:                              # %for.cond215
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_32 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB48_63
# %bb.31:                               # %for.body218
                                        #   in Loop: Header=BB48_30 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB48_32:                              # %for.cond219
                                        #   Parent Loop BB48_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB48_61
# %bb.33:                               # %for.body222
                                        #   in Loop: Header=BB48_32 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB48_35
# %bb.34:                               # %if.then225
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
.LBB48_35:                              # %if.end255
                                        #   in Loop: Header=BB48_32 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB48_37
# %bb.36:                               # %lor.lhs.false258
                                        #   in Loop: Header=BB48_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB48_46
.LBB48_37:                              # %if.then261
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB48_44
# %bb.38:                               # %land.lhs.true263
                                        #   in Loop: Header=BB48_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB48_44
# %bb.39:                               # %land.lhs.true266
                                        #   in Loop: Header=BB48_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB48_44
# %bb.40:                               # %if.then269
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB48_42
# %bb.41:                               # %cond.true273
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB48_43
.LBB48_42:                              # %cond.false274
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB48_43:                              # %cond.end275
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB48_45
.LBB48_44:                              # %if.else342
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB48_45:                              # %if.end424
                                        #   in Loop: Header=BB48_32 Depth=2
	jmp	.LBB48_47
.LBB48_46:                              # %if.else425
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB48_47:                              # %if.end468
                                        #   in Loop: Header=BB48_32 Depth=2
	cmpl	$1, -16(%rbp)
	je	.LBB48_49
# %bb.48:                               # %lor.lhs.false471
                                        #   in Loop: Header=BB48_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB48_58
.LBB48_49:                              # %if.then474
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB48_56
# %bb.50:                               # %land.lhs.true477
                                        #   in Loop: Header=BB48_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB48_56
# %bb.51:                               # %land.lhs.true480
                                        #   in Loop: Header=BB48_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB48_56
# %bb.52:                               # %if.then483
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB48_54
# %bb.53:                               # %cond.true488
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB48_55
.LBB48_54:                              # %cond.false490
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB48_55:                              # %cond.end492
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB48_57
.LBB48_56:                              # %if.else559
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-32(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB48_57:                              # %if.end641
                                        #   in Loop: Header=BB48_32 Depth=2
	jmp	.LBB48_59
.LBB48_58:                              # %if.else642
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB48_59:                              # %if.end685
                                        #   in Loop: Header=BB48_32 Depth=2
	jmp	.LBB48_60
.LBB48_60:                              # %for.inc686
                                        #   in Loop: Header=BB48_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_32
.LBB48_61:                              # %for.end688
                                        #   in Loop: Header=BB48_30 Depth=1
	jmp	.LBB48_62
.LBB48_62:                              # %for.inc689
                                        #   in Loop: Header=BB48_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_30
.LBB48_63:                              # %for.end691
	jmp	.LBB48_64
.LBB48_64:                              # %if.end692
	cmpl	$1659363656, -68(%rbp)  # imm = 0x62E7E148
	jne	.LBB48_66
.LBB48_65:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_66:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_65
.Lfunc_end48:
	.size	SetRefAndMotionVectors.19, .Lfunc_end48-SetRefAndMotionVectors.19
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4Blocks_Chroma.20 # -- Begin function RDCost_for_4x4Blocks_Chroma.20
	.p2align	4, 0x90
	.type	RDCost_for_4x4Blocks_Chroma.20,@function
RDCost_for_4x4Blocks_Chroma.20:         # @RDCost_for_4x4Blocks_Chroma.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$922549122, -56(%rbp)   # imm = 0x36FCFB82
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -60(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	cmpl	$7, -16(%rbp)
	jle	.LBB49_2
# %bb.1:                                # %if.then
	movl	$1, -32(%rbp)
	jmp	.LBB49_3
.LBB49_2:                               # %if.else
	movl	$0, -32(%rbp)
.LBB49_3:                               # %if.end
	movl	-60(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-32(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-32(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB49_5
# %bb.4:                                # %if.then21
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	shll	$4, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %edi
	shll	$1, %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %edi
	orl	%edi, %ecx
	movl	$7, %edi
	movl	%r8d, %edx
	callq	writeCoeff4x4_CAVLC
	movl	%eax, -36(%rbp)
	jmp	.LBB49_18
.LBB49_5:                               # %if.else31
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$1, -52(%rbp)
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rax
	movl	%edx, 72(%rax)
	movl	$0, -28(%rbp)
.LBB49_6:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$17, -28(%rbp)
	jge	.LBB49_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB49_6 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB49_8:                               # %land.end
                                        #   in Loop: Header=BB49_6 Depth=1
	testb	$1, %al
	jne	.LBB49_9
	jmp	.LBB49_17
.LBB49_9:                               # %for.body
                                        #   in Loop: Header=BB49_6 Depth=1
	movq	-112(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -116(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB49_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB49_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB49_12
.LBB49_11:                              # %if.else54
                                        #   in Loop: Header=BB49_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB49_12:                              # %if.end55
                                        #   in Loop: Header=BB49_6 Depth=1
	movq	-24(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-24(%rbp), %rax
	movl	$10, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB49_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB49_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB49_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB49_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB49_15:                              # %lor.end
                                        #   in Loop: Header=BB49_6 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-88(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.16:                               # %for.inc
                                        #   in Loop: Header=BB49_6 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB49_6
.LBB49_17:                              # %for.end
	jmp	.LBB49_18
.LBB49_18:                              # %if.end73
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	-36(%rbp), %ebx
	cmpl	$922549122, -56(%rbp)   # imm = 0x36FCFB82
	jne	.LBB49_20
.LBB49_19:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_19
.Lfunc_end49:
	.size	RDCost_for_4x4Blocks_Chroma.20, .Lfunc_end49-RDCost_for_4x4Blocks_Chroma.20
	.cfi_endproc
                                        # -- End function
	.globl	SetCoeffAndReconstruction8x8.21 # -- Begin function SetCoeffAndReconstruction8x8.21
	.p2align	4, 0x90
	.type	SetCoeffAndReconstruction8x8.21,@function
SetCoeffAndReconstruction8x8.21:        # @SetCoeffAndReconstruction8x8.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1858194904, -36(%rbp)  # imm = 0x6EC1CDD8
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB50_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB50_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB50_4
.LBB50_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB50_4
.LBB50_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB50_104
# %bb.5:                                # %if.then
	movl	$0, -4(%rbp)
.LBB50_6:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB50_9
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB50_6 Depth=1
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB50_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_6
.LBB50_9:                               # %for.end
	cmpl	$0, -32(%rbp)
	je	.LBB50_19
# %bb.10:                               # %if.then15
	movl	$0, -8(%rbp)
.LBB50_11:                              # %for.cond16
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB50_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB50_11 Depth=1
	movl	$0, -4(%rbp)
.LBB50_13:                              # %for.cond20
                                        #   Parent Loop BB50_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB50_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB50_13 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	movw	part8x8bwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.15:                               # %for.inc50
                                        #   in Loop: Header=BB50_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_13
.LBB50_16:                              # %for.end52
                                        #   in Loop: Header=BB50_11 Depth=1
	jmp	.LBB50_17
.LBB50_17:                              # %for.inc53
                                        #   in Loop: Header=BB50_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_11
.LBB50_18:                              # %for.end55
	jmp	.LBB50_28
.LBB50_19:                              # %if.else
	movl	$0, -8(%rbp)
.LBB50_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_22 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB50_27
# %bb.21:                               # %for.body59
                                        #   in Loop: Header=BB50_20 Depth=1
	movl	$0, -4(%rbp)
.LBB50_22:                              # %for.cond60
                                        #   Parent Loop BB50_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB50_25
# %bb.23:                               # %for.body63
                                        #   in Loop: Header=BB50_22 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.24:                               # %for.inc84
                                        #   in Loop: Header=BB50_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_22
.LBB50_25:                              # %for.end86
                                        #   in Loop: Header=BB50_20 Depth=1
	jmp	.LBB50_26
.LBB50_26:                              # %for.inc87
                                        #   in Loop: Header=BB50_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_20
.LBB50_27:                              # %for.end89
	jmp	.LBB50_28
.LBB50_28:                              # %if.end
	movl	$0, -8(%rbp)
.LBB50_29:                              # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_31 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB50_39
# %bb.30:                               # %for.body93
                                        #   in Loop: Header=BB50_29 Depth=1
	movl	$0, -4(%rbp)
.LBB50_31:                              # %for.cond94
                                        #   Parent Loop BB50_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB50_37
# %bb.32:                               # %for.body97
                                        #   in Loop: Header=BB50_31 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB50_34
# %bb.33:                               # %cond.true111
                                        #   in Loop: Header=BB50_31 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB50_35
.LBB50_34:                              # %cond.false127
                                        #   in Loop: Header=BB50_31 Depth=2
	movq	$-1, %rax
	jmp	.LBB50_35
.LBB50_35:                              # %cond.end128
                                        #   in Loop: Header=BB50_31 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.36:                               # %for.inc139
                                        #   in Loop: Header=BB50_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_31
.LBB50_37:                              # %for.end141
                                        #   in Loop: Header=BB50_29 Depth=1
	jmp	.LBB50_38
.LBB50_38:                              # %for.inc142
                                        #   in Loop: Header=BB50_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_29
.LBB50_39:                              # %for.end144
	cmpl	$0, -32(%rbp)
	je	.LBB50_52
# %bb.40:                               # %if.then146
	movl	$0, -8(%rbp)
.LBB50_41:                              # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_43 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB50_51
# %bb.42:                               # %for.body150
                                        #   in Loop: Header=BB50_41 Depth=1
	movl	$0, -4(%rbp)
.LBB50_43:                              # %for.cond151
                                        #   Parent Loop BB50_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB50_49
# %bb.44:                               # %for.body154
                                        #   in Loop: Header=BB50_43 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB50_46
# %bb.45:                               # %cond.true168
                                        #   in Loop: Header=BB50_43 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB50_47
.LBB50_46:                              # %cond.false185
                                        #   in Loop: Header=BB50_43 Depth=2
	movq	$-1, %rax
	jmp	.LBB50_47
.LBB50_47:                              # %cond.end186
                                        #   in Loop: Header=BB50_43 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.48:                               # %for.inc198
                                        #   in Loop: Header=BB50_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_43
.LBB50_49:                              # %for.end200
                                        #   in Loop: Header=BB50_41 Depth=1
	jmp	.LBB50_50
.LBB50_50:                              # %for.inc201
                                        #   in Loop: Header=BB50_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_41
.LBB50_51:                              # %for.end203
	jmp	.LBB50_52
.LBB50_52:                              # %if.end204
	movl	$1, %edi
	callq	StoreMV8x8
	xorl	%edi, %edi
	callq	RestoreMV8x8
	movl	$0, -16(%rbp)
.LBB50_53:                              # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_55 Depth 2
                                        #       Child Loop BB50_57 Depth 3
                                        #         Child Loop BB50_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB50_68
# %bb.54:                               # %for.body208
                                        #   in Loop: Header=BB50_53 Depth=1
	movl	$0, -12(%rbp)
.LBB50_55:                              # %for.cond209
                                        #   Parent Loop BB50_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_57 Depth 3
                                        #         Child Loop BB50_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB50_66
# %bb.56:                               # %for.body212
                                        #   in Loop: Header=BB50_55 Depth=2
	movl	$0, -8(%rbp)
.LBB50_57:                              # %for.cond213
                                        #   Parent Loop BB50_53 Depth=1
                                        #     Parent Loop BB50_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB50_59 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB50_64
# %bb.58:                               # %for.body216
                                        #   in Loop: Header=BB50_57 Depth=3
	movl	$0, -4(%rbp)
.LBB50_59:                              # %for.cond217
                                        #   Parent Loop BB50_53 Depth=1
                                        #     Parent Loop BB50_55 Depth=2
                                        #       Parent Loop BB50_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB50_62
# %bb.60:                               # %for.body220
                                        #   in Loop: Header=BB50_59 Depth=4
	movq	cofAC_8x8ts, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc237
                                        #   in Loop: Header=BB50_59 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_59
.LBB50_62:                              # %for.end239
                                        #   in Loop: Header=BB50_57 Depth=3
	jmp	.LBB50_63
.LBB50_63:                              # %for.inc240
                                        #   in Loop: Header=BB50_57 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_57
.LBB50_64:                              # %for.end242
                                        #   in Loop: Header=BB50_55 Depth=2
	jmp	.LBB50_65
.LBB50_65:                              # %for.inc243
                                        #   in Loop: Header=BB50_55 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_55
.LBB50_66:                              # %for.end245
                                        #   in Loop: Header=BB50_53 Depth=1
	jmp	.LBB50_67
.LBB50_67:                              # %for.inc246
                                        #   in Loop: Header=BB50_53 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_53
.LBB50_68:                              # %for.end248
	cmpl	$5, cnt_nonz8_8x8ts
	jg	.LBB50_83
# %bb.69:                               # %land.lhs.true251
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB50_71
# %bb.70:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB50_83
.LBB50_71:                              # %if.then257
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB50_72:                              # %for.cond258
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_74 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB50_82
# %bb.73:                               # %for.body261
                                        #   in Loop: Header=BB50_72 Depth=1
	movl	$0, -4(%rbp)
.LBB50_74:                              # %for.cond262
                                        #   Parent Loop BB50_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB50_80
# %bb.75:                               # %for.body265
                                        #   in Loop: Header=BB50_74 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB50_77
# %bb.76:                               # %if.then267
                                        #   in Loop: Header=BB50_74 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB50_78
.LBB50_77:                              # %if.else278
                                        #   in Loop: Header=BB50_74 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB50_78:                              # %if.end283
                                        #   in Loop: Header=BB50_74 Depth=2
	jmp	.LBB50_79
.LBB50_79:                              # %for.inc284
                                        #   in Loop: Header=BB50_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_74
.LBB50_80:                              # %for.end286
                                        #   in Loop: Header=BB50_72 Depth=1
	jmp	.LBB50_81
.LBB50_81:                              # %for.inc287
                                        #   in Loop: Header=BB50_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_72
.LBB50_82:                              # %for.end289
	jmp	.LBB50_95
.LBB50_83:                              # %if.else290
	movl	cbp8_8x8ts, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk8_8x8ts, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB50_84:                              # %for.cond293
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_86 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB50_94
# %bb.85:                               # %for.body296
                                        #   in Loop: Header=BB50_84 Depth=1
	movl	$0, -4(%rbp)
.LBB50_86:                              # %for.cond297
                                        #   Parent Loop BB50_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB50_92
# %bb.87:                               # %for.body300
                                        #   in Loop: Header=BB50_86 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB50_89
# %bb.88:                               # %if.then303
                                        #   in Loop: Header=BB50_86 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB50_90
.LBB50_89:                              # %if.else317
                                        #   in Loop: Header=BB50_86 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB50_90:                              # %if.end326
                                        #   in Loop: Header=BB50_86 Depth=2
	jmp	.LBB50_91
.LBB50_91:                              # %for.inc327
                                        #   in Loop: Header=BB50_86 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_86
.LBB50_92:                              # %for.end329
                                        #   in Loop: Header=BB50_84 Depth=1
	jmp	.LBB50_93
.LBB50_93:                              # %for.inc330
                                        #   in Loop: Header=BB50_84 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_84
.LBB50_94:                              # %for.end332
	jmp	.LBB50_95
.LBB50_95:                              # %if.end333
	movl	$0, -8(%rbp)
.LBB50_96:                              # %for.cond334
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_98 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB50_103
# %bb.97:                               # %for.body337
                                        #   in Loop: Header=BB50_96 Depth=1
	movl	$0, -4(%rbp)
.LBB50_98:                              # %for.cond338
                                        #   Parent Loop BB50_96 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB50_101
# %bb.99:                               # %for.body341
                                        #   in Loop: Header=BB50_98 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.100:                              # %for.inc382
                                        #   in Loop: Header=BB50_98 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_98
.LBB50_101:                             # %for.end384
                                        #   in Loop: Header=BB50_96 Depth=1
	jmp	.LBB50_102
.LBB50_102:                             # %for.inc385
                                        #   in Loop: Header=BB50_96 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_96
.LBB50_103:                             # %for.end387
	jmp	.LBB50_157
.LBB50_104:                             # %if.else388
	movl	$0, -16(%rbp)
.LBB50_105:                             # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_107 Depth 2
                                        #       Child Loop BB50_109 Depth 3
                                        #         Child Loop BB50_111 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_120
# %bb.106:                              # %for.body393
                                        #   in Loop: Header=BB50_105 Depth=1
	movl	$0, -12(%rbp)
.LBB50_107:                             # %for.cond394
                                        #   Parent Loop BB50_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_109 Depth 3
                                        #         Child Loop BB50_111 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB50_118
# %bb.108:                              # %for.body397
                                        #   in Loop: Header=BB50_107 Depth=2
	movl	$0, -8(%rbp)
.LBB50_109:                             # %for.cond398
                                        #   Parent Loop BB50_105 Depth=1
                                        #     Parent Loop BB50_107 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB50_111 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB50_116
# %bb.110:                              # %for.body401
                                        #   in Loop: Header=BB50_109 Depth=3
	movl	$0, -4(%rbp)
.LBB50_111:                             # %for.cond402
                                        #   Parent Loop BB50_105 Depth=1
                                        #     Parent Loop BB50_107 Depth=2
                                        #       Parent Loop BB50_109 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB50_114
# %bb.112:                              # %for.body405
                                        #   in Loop: Header=BB50_111 Depth=4
	movq	cofAC8x8, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.113:                              # %for.inc423
                                        #   in Loop: Header=BB50_111 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_111
.LBB50_114:                             # %for.end425
                                        #   in Loop: Header=BB50_109 Depth=3
	jmp	.LBB50_115
.LBB50_115:                             # %for.inc426
                                        #   in Loop: Header=BB50_109 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_109
.LBB50_116:                             # %for.end428
                                        #   in Loop: Header=BB50_107 Depth=2
	jmp	.LBB50_117
.LBB50_117:                             # %for.inc429
                                        #   in Loop: Header=BB50_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_107
.LBB50_118:                             # %for.end431
                                        #   in Loop: Header=BB50_105 Depth=1
	jmp	.LBB50_119
.LBB50_119:                             # %for.inc432
                                        #   in Loop: Header=BB50_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_105
.LBB50_120:                             # %for.end434
	cmpl	$5, cnt_nonz_8x8
	jg	.LBB50_136
# %bb.121:                              # %land.lhs.true437
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB50_136
# %bb.122:                              # %land.lhs.true441
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB50_124
# %bb.123:                              # %lor.lhs.false447
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB50_136
.LBB50_124:                             # %if.then451
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB50_125:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_127 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB50_135
# %bb.126:                              # %for.body457
                                        #   in Loop: Header=BB50_125 Depth=1
	movl	$0, -4(%rbp)
.LBB50_127:                             # %for.cond458
                                        #   Parent Loop BB50_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB50_133
# %bb.128:                              # %for.body461
                                        #   in Loop: Header=BB50_127 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB50_130
# %bb.129:                              # %if.then464
                                        #   in Loop: Header=BB50_127 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB50_131
.LBB50_130:                             # %if.else478
                                        #   in Loop: Header=BB50_127 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB50_131:                             # %if.end483
                                        #   in Loop: Header=BB50_127 Depth=2
	jmp	.LBB50_132
.LBB50_132:                             # %for.inc484
                                        #   in Loop: Header=BB50_127 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_127
.LBB50_133:                             # %for.end486
                                        #   in Loop: Header=BB50_125 Depth=1
	jmp	.LBB50_134
.LBB50_134:                             # %for.inc487
                                        #   in Loop: Header=BB50_125 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_125
.LBB50_135:                             # %for.end489
	jmp	.LBB50_148
.LBB50_136:                             # %if.else490
	movl	cbp8x8, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movslq	cbp_blk8x8, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB50_137:                             # %for.cond494
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_139 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB50_147
# %bb.138:                              # %for.body497
                                        #   in Loop: Header=BB50_137 Depth=1
	movl	$0, -4(%rbp)
.LBB50_139:                             # %for.cond498
                                        #   Parent Loop BB50_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB50_145
# %bb.140:                              # %for.body501
                                        #   in Loop: Header=BB50_139 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB50_142
# %bb.141:                              # %if.then504
                                        #   in Loop: Header=BB50_139 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB50_143
.LBB50_142:                             # %if.else518
                                        #   in Loop: Header=BB50_139 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB50_143:                             # %if.end527
                                        #   in Loop: Header=BB50_139 Depth=2
	jmp	.LBB50_144
.LBB50_144:                             # %for.inc528
                                        #   in Loop: Header=BB50_139 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_139
.LBB50_145:                             # %for.end530
                                        #   in Loop: Header=BB50_137 Depth=1
	jmp	.LBB50_146
.LBB50_146:                             # %for.inc531
                                        #   in Loop: Header=BB50_137 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_137
.LBB50_147:                             # %for.end533
	jmp	.LBB50_148
.LBB50_148:                             # %if.end534
	movl	$0, -8(%rbp)
.LBB50_149:                             # %for.cond535
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_151 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB50_156
# %bb.150:                              # %for.body538
                                        #   in Loop: Header=BB50_149 Depth=1
	movl	$0, -4(%rbp)
.LBB50_151:                             # %for.cond539
                                        #   Parent Loop BB50_149 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB50_154
# %bb.152:                              # %for.body542
                                        #   in Loop: Header=BB50_151 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.153:                              # %for.inc583
                                        #   in Loop: Header=BB50_151 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_151
.LBB50_154:                             # %for.end585
                                        #   in Loop: Header=BB50_149 Depth=1
	jmp	.LBB50_155
.LBB50_155:                             # %for.inc586
                                        #   in Loop: Header=BB50_149 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_149
.LBB50_156:                             # %for.end588
	jmp	.LBB50_157
.LBB50_157:                             # %if.end589
	cmpl	$1858194904, -36(%rbp)  # imm = 0x6EC1CDD8
	jne	.LBB50_159
.LBB50_158:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_159:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_158
.Lfunc_end50:
	.size	SetCoeffAndReconstruction8x8.21, .Lfunc_end50-SetCoeffAndReconstruction8x8.21
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_8x8IntraBlocks.22
.LCPI51_0:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI51_1:
	.quad	4618441417868443648     # double 6
	.text
	.globl	Mode_Decision_for_8x8IntraBlocks.22
	.p2align	4, 0x90
	.type	Mode_Decision_for_8x8IntraBlocks.22,@function
Mode_Decision_for_8x8IntraBlocks.22:    # @Mode_Decision_for_8x8IntraBlocks.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI51_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI51_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$2145422259, -24(%rbp)  # imm = 0x7FE08BB3
	movl	%edi, -28(%rbp)
	vmovsd	%xmm0, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	$0, -16(%rbp)
	vmulsd	-40(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -12(%rbp)
.LBB51_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB51_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	-28(%rbp), %edi
	movl	-12(%rbp), %esi
	vmovsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-20(%rbp), %rdx
	callq	Mode_Decision_for_4x4IntraBlocks
	cmpl	$0, %eax
	je	.LBB51_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$1, -16(%rbp)
.LBB51_4:                               # %if.end
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	-20(%rbp), %eax
	movq	-48(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_1
.LBB51_6:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$2145422259, -24(%rbp)  # imm = 0x7FE08BB3
	jne	.LBB51_8
.LBB51_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_7
.Lfunc_end51:
	.size	Mode_Decision_for_8x8IntraBlocks.22, .Lfunc_end51-Mode_Decision_for_8x8IntraBlocks.22
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4IntraBlocks.23 # -- Begin function RDCost_for_4x4IntraBlocks.23
	.p2align	4, 0x90
	.type	RDCost_for_4x4IntraBlocks.23,@function
RDCost_for_4x4IntraBlocks.23:           # @RDCost_for_4x4IntraBlocks.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$983561178, -68(%rbp)   # imm = 0x3A9FF3DA
	movq	%rdi, -112(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -36(%rbp)
	vmovsd	%xmm0, -136(%rbp)
	vmovsd	%xmm1, -160(%rbp)
	movl	%r8d, -56(%rbp)
	movl	$0, -44(%rbp)
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -48(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -40(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-88(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -120(%rbp)
	movl	$0, -76(%rbp)
	movl	-48(%rbp), %edi
	movl	-40(%rbp), %esi
	leaq	-76(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB52_10
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB52_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_4 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB52_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB52_2 Depth=1
	movl	-52(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB52_4:                               # %for.cond15
                                        #   Parent Loop BB52_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_7
# %bb.5:                                # %for.body18
                                        #   in Loop: Header=BB52_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-72(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-152(%rbp), %rdx
	movl	-80(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB52_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_4
.LBB52_7:                               # %for.end
                                        #   in Loop: Header=BB52_2 Depth=1
	jmp	.LBB52_8
.LBB52_8:                               # %for.inc33
                                        #   in Loop: Header=BB52_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_2
.LBB52_9:                               # %for.end35
	jmp	.LBB52_10
.LBB52_10:                              # %if.end
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-56(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB52_12
# %bb.11:                               # %cond.true
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB52_16
.LBB52_12:                              # %cond.false
	movl	-36(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB52_14
# %bb.13:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB52_15
.LBB52_14:                              # %cond.false41
	movl	-36(%rbp), %eax
	subl	$1, %eax
.LBB52_15:                              # %cond.end
.LBB52_16:                              # %cond.end43
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movl	$4, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB52_18
# %bb.17:                               # %if.then49
	movq	-32(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB52_18:                              # %if.end50
	movq	-144(%rbp), %rax
	movq	24(%rax), %rax
	movq	-120(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB52_20
# %bb.19:                               # %if.then57
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB52_21
.LBB52_20:                              # %if.else
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB52_21:                              # %if.end60
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-88(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB52_23
# %bb.22:                               # %if.then66
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	xorl	%edi, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_24
.LBB52_23:                              # %if.else69
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	$1, %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB52_24:                              # %if.end72
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vcvtsi2sdl	-44(%rbp), %xmm0, %xmm0
	vmovsd	-136(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -128(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB52_26
# %bb.25:                               # %if.then79
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -96(%rbp)
	jmp	.LBB52_27
.LBB52_26:                              # %if.else81
	vmovsd	-128(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -96(%rbp)
.LBB52_27:                              # %return
	vmovsd	-96(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$983561178, -68(%rbp)   # imm = 0x3A9FF3DA
	jne	.LBB52_29
.LBB52_28:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_29:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -104(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-104(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB52_28
.Lfunc_end52:
	.size	RDCost_for_4x4IntraBlocks.23, .Lfunc_end52-RDCost_for_4x4IntraBlocks.23
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_macroblocks.24
.LCPI53_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	RDCost_for_macroblocks.24
	.p2align	4, 0x90
	.type	RDCost_for_macroblocks.24,@function
RDCost_for_macroblocks.24:              # @RDCost_for_macroblocks.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$1409778792, -96(%rbp)  # imm = 0x54078468
	vmovsd	%xmm0, -88(%rbp)
	movl	%edi, -20(%rbp)
	movq	%rsi, -128(%rbp)
	movl	%edx, -64(%rbp)
	movl	$0, -32(%rbp)
	movq	$0, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB53_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB53_3
.LBB53_2:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB53_3
.LBB53_3:                               # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -112(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -72(%rbp)
	movq	img, %rcx
	cmpl	$2, 24(%rcx)
	je	.LBB53_5
# %bb.4:                                # %land.rhs
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	setne	%al
.LBB53_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -92(%rbp)
	movl	$0, -40(%rbp)
	movl	-20(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$0, -72(%rbp)
	je	.LBB53_18
# %bb.6:                                # %land.lhs.true
	cmpl	$0, -20(%rbp)
	jne	.LBB53_18
# %bb.7:                                # %if.then
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -104(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
.LBB53_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_10 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB53_17
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB53_8 Depth=1
	movl	$0, -16(%rbp)
.LBB53_10:                              # %for.cond17
                                        #   Parent Loop BB53_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB53_15
# %bb.11:                               # %for.body20
                                        #   in Loop: Header=BB53_10 Depth=2
	movq	direct_pdir, %rax
	movl	-104(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-100(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB53_13
# %bb.12:                               # %if.then29
	movl	$0, -60(%rbp)
	jmp	.LBB53_177
.LBB53_13:                              # %if.end
                                        #   in Loop: Header=BB53_10 Depth=2
	jmp	.LBB53_14
.LBB53_14:                              # %for.inc
                                        #   in Loop: Header=BB53_10 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_10
.LBB53_15:                              # %for.end
                                        #   in Loop: Header=BB53_8 Depth=1
	jmp	.LBB53_16
.LBB53_16:                              # %for.inc30
                                        #   in Loop: Header=BB53_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_8
.LBB53_17:                              # %for.end32
	jmp	.LBB53_18
.LBB53_18:                              # %if.end33
	cmpl	$8, -20(%rbp)
	jge	.LBB53_24
# %bb.19:                               # %if.then36
	movb	$0, %al
	callq	LumaResidualCoding
	cmpl	$0, -20(%rbp)
	jne	.LBB53_23
# %bb.20:                               # %land.lhs.true39
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB53_23
# %bb.21:                               # %land.lhs.true42
	movq	-48(%rbp), %rax
	cmpl	$1, 572(%rax)
	jne	.LBB53_23
# %bb.22:                               # %if.then45
	movl	$0, -60(%rbp)
	jmp	.LBB53_177
.LBB53_23:                              # %if.end46
	jmp	.LBB53_76
.LBB53_24:                              # %if.else
	cmpl	$8, -20(%rbp)
	jne	.LBB53_26
# %bb.25:                               # %if.then49
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	jmp	.LBB53_75
.LBB53_26:                              # %if.else50
	cmpl	$9, -20(%rbp)
	jne	.LBB53_48
# %bb.27:                               # %if.then53
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-28(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB53_47
# %bb.28:                               # %if.then56
	movl	$0, -12(%rbp)
.LBB53_29:                              # %for.cond57
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_31 Depth 2
                                        #       Child Loop BB53_33 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB53_42
# %bb.30:                               # %for.body60
                                        #   in Loop: Header=BB53_29 Depth=1
	movl	$0, -16(%rbp)
.LBB53_31:                              # %for.cond61
                                        #   Parent Loop BB53_29 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_33 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB53_40
# %bb.32:                               # %for.body64
                                        #   in Loop: Header=BB53_31 Depth=2
	movl	$0, -24(%rbp)
.LBB53_33:                              # %for.cond65
                                        #   Parent Loop BB53_29 Depth=1
                                        #     Parent Loop BB53_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB53_38
# %bb.34:                               # %for.body68
                                        #   in Loop: Header=BB53_33 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB53_36
# %bb.35:                               # %if.then76
                                        #   in Loop: Header=BB53_33 Depth=3
	movl	$2, -40(%rbp)
.LBB53_36:                              # %if.end77
                                        #   in Loop: Header=BB53_33 Depth=3
	jmp	.LBB53_37
.LBB53_37:                              # %for.inc78
                                        #   in Loop: Header=BB53_33 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB53_33
.LBB53_38:                              # %for.end80
                                        #   in Loop: Header=BB53_31 Depth=2
	jmp	.LBB53_39
.LBB53_39:                              # %for.inc81
                                        #   in Loop: Header=BB53_31 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_31
.LBB53_40:                              # %for.end83
                                        #   in Loop: Header=BB53_29 Depth=1
	jmp	.LBB53_41
.LBB53_41:                              # %for.inc84
                                        #   in Loop: Header=BB53_29 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_29
.LBB53_42:                              # %for.end86
	movl	$0, -36(%rbp)
.LBB53_43:                              # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -36(%rbp)
	jge	.LBB53_46
# %bb.44:                               # %for.body90
                                        #   in Loop: Header=BB53_43 Depth=1
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.45:                               # %for.inc92
                                        #   in Loop: Header=BB53_43 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB53_43
.LBB53_46:                              # %for.end94
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB53_47:                              # %if.end97
	jmp	.LBB53_74
.LBB53_48:                              # %if.else98
	cmpl	$10, -20(%rbp)
	jne	.LBB53_50
# %bb.49:                               # %if.then101
	movq	-48(%rbp), %rdi
	leaq	-64(%rbp), %rsi
	callq	Intra16x16_Mode_Decision
	jmp	.LBB53_73
.LBB53_50:                              # %if.else102
	cmpl	$13, -20(%rbp)
	jne	.LBB53_72
# %bb.51:                               # %if.then105
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-28(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB53_71
# %bb.52:                               # %if.then110
	movl	$0, -12(%rbp)
.LBB53_53:                              # %for.cond111
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_55 Depth 2
                                        #       Child Loop BB53_57 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB53_66
# %bb.54:                               # %for.body114
                                        #   in Loop: Header=BB53_53 Depth=1
	movl	$0, -16(%rbp)
.LBB53_55:                              # %for.cond115
                                        #   Parent Loop BB53_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_57 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB53_64
# %bb.56:                               # %for.body118
                                        #   in Loop: Header=BB53_55 Depth=2
	movl	$0, -24(%rbp)
.LBB53_57:                              # %for.cond119
                                        #   Parent Loop BB53_53 Depth=1
                                        #     Parent Loop BB53_55 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB53_62
# %bb.58:                               # %for.body122
                                        #   in Loop: Header=BB53_57 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB53_60
# %bb.59:                               # %if.then130
                                        #   in Loop: Header=BB53_57 Depth=3
	movl	$2, -40(%rbp)
.LBB53_60:                              # %if.end131
                                        #   in Loop: Header=BB53_57 Depth=3
	jmp	.LBB53_61
.LBB53_61:                              # %for.inc132
                                        #   in Loop: Header=BB53_57 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB53_57
.LBB53_62:                              # %for.end134
                                        #   in Loop: Header=BB53_55 Depth=2
	jmp	.LBB53_63
.LBB53_63:                              # %for.inc135
                                        #   in Loop: Header=BB53_55 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_55
.LBB53_64:                              # %for.end137
                                        #   in Loop: Header=BB53_53 Depth=1
	jmp	.LBB53_65
.LBB53_65:                              # %for.inc138
                                        #   in Loop: Header=BB53_53 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_53
.LBB53_66:                              # %for.end140
	movl	$0, -36(%rbp)
.LBB53_67:                              # %for.cond141
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -36(%rbp)
	jge	.LBB53_70
# %bb.68:                               # %for.body144
                                        #   in Loop: Header=BB53_67 Depth=1
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.69:                               # %for.inc146
                                        #   in Loop: Header=BB53_67 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB53_67
.LBB53_70:                              # %for.end148
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB53_71:                              # %if.end152
	jmp	.LBB53_72
.LBB53_72:                              # %if.end153
	jmp	.LBB53_73
.LBB53_73:                              # %if.end154
	jmp	.LBB53_74
.LBB53_74:                              # %if.end155
	jmp	.LBB53_75
.LBB53_75:                              # %if.end156
	jmp	.LBB53_76
.LBB53_76:                              # %if.end157
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB53_82
# %bb.77:                               # %land.lhs.true160
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB53_82
# %bb.78:                               # %if.then164
	cmpl	$10, -20(%rbp)
	jne	.LBB53_80
# %bb.79:                               # %cond.true167
	movl	-64(%rbp), %edi
	jmp	.LBB53_81
.LBB53_80:                              # %cond.false168
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	jmp	.LBB53_81
.LBB53_81:                              # %cond.end169
	callq	compute_residue_mb
.LBB53_82:                              # %if.end171
	cmpl	$10, -20(%rbp)
	jne	.LBB53_92
# %bb.83:                               # %if.then174
	movl	$0, -12(%rbp)
.LBB53_84:                              # %for.cond175
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_86 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB53_91
# %bb.85:                               # %for.body178
                                        #   in Loop: Header=BB53_84 Depth=1
	movl	$0, -16(%rbp)
.LBB53_86:                              # %for.cond179
                                        #   Parent Loop BB53_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB53_89
# %bb.87:                               # %for.body182
                                        #   in Loop: Header=BB53_86 Depth=2
	movq	img, %rax
	addq	$4792, %rax             # imm = 0x12B8
	movslq	-64(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc194
                                        #   in Loop: Header=BB53_86 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_86
.LBB53_89:                              # %for.end196
                                        #   in Loop: Header=BB53_84 Depth=1
	jmp	.LBB53_90
.LBB53_90:                              # %for.inc197
                                        #   in Loop: Header=BB53_84 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_84
.LBB53_91:                              # %for.end199
	jmp	.LBB53_101
.LBB53_92:                              # %if.else200
	movl	$0, -12(%rbp)
.LBB53_93:                              # %for.cond201
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_95 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB53_100
# %bb.94:                               # %for.body204
                                        #   in Loop: Header=BB53_93 Depth=1
	movl	$0, -16(%rbp)
.LBB53_95:                              # %for.cond205
                                        #   Parent Loop BB53_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB53_98
# %bb.96:                               # %for.body208
                                        #   in Loop: Header=BB53_95 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.97:                               # %for.inc218
                                        #   in Loop: Header=BB53_95 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_95
.LBB53_98:                              # %for.end220
                                        #   in Loop: Header=BB53_93 Depth=1
	jmp	.LBB53_99
.LBB53_99:                              # %for.inc221
                                        #   in Loop: Header=BB53_93 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_93
.LBB53_100:                             # %for.end223
	jmp	.LBB53_101
.LBB53_101:                             # %if.end224
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB53_105
# %bb.102:                              # %land.lhs.true227
	cmpl	$9, -20(%rbp)
	je	.LBB53_107
# %bb.103:                              # %lor.lhs.false
	cmpl	$10, -20(%rbp)
	je	.LBB53_107
# %bb.104:                              # %lor.lhs.false232
	cmpl	$13, -20(%rbp)
	je	.LBB53_107
.LBB53_105:                             # %land.lhs.true235
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB53_107
# %bb.106:                              # %if.then238
	leaq	-28(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB53_107:                             # %if.end239
	cmpl	$10, -20(%rbp)
	jne	.LBB53_109
# %bb.108:                              # %if.then242
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-64(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB53_109:                             # %if.end246
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB53_124
# %bb.110:                              # %land.lhs.true250
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB53_124
# %bb.111:                              # %if.then254
	movl	$0, -24(%rbp)
.LBB53_112:                             # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_114 Depth 2
                                        #       Child Loop BB53_116 Depth 3
	movl	-24(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB53_123
# %bb.113:                              # %for.body258
                                        #   in Loop: Header=BB53_112 Depth=1
	movl	-24(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	decode_one_mb
	movl	$0, -16(%rbp)
.LBB53_114:                             # %for.cond259
                                        #   Parent Loop BB53_112 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_116 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB53_121
# %bb.115:                              # %for.body262
                                        #   in Loop: Header=BB53_114 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB53_116:                             # %for.cond263
                                        #   Parent Loop BB53_112 Depth=1
                                        #     Parent Loop BB53_114 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_119
# %bb.117:                              # %for.body268
                                        #   in Loop: Header=BB53_116 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	172(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.118:                              # %for.inc289
                                        #   in Loop: Header=BB53_116 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_116
.LBB53_119:                             # %for.end291
                                        #   in Loop: Header=BB53_114 Depth=2
	jmp	.LBB53_120
.LBB53_120:                             # %for.inc292
                                        #   in Loop: Header=BB53_114 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_114
.LBB53_121:                             # %for.end294
                                        #   in Loop: Header=BB53_112 Depth=1
	jmp	.LBB53_122
.LBB53_122:                             # %for.inc295
                                        #   in Loop: Header=BB53_112 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB53_112
.LBB53_123:                             # %for.end297
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-56(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -56(%rbp)
	jmp	.LBB53_133
.LBB53_124:                             # %if.else300
	movl	$0, -16(%rbp)
.LBB53_125:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_127 Depth 2
	cmpl	$16, -16(%rbp)
	jge	.LBB53_132
# %bb.126:                              # %for.body304
                                        #   in Loop: Header=BB53_125 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB53_127:                             # %for.cond306
                                        #   Parent Loop BB53_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_130
# %bb.128:                              # %for.body311
                                        #   in Loop: Header=BB53_127 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	172(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.129:                              # %for.inc332
                                        #   in Loop: Header=BB53_127 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_127
.LBB53_130:                             # %for.end334
                                        #   in Loop: Header=BB53_125 Depth=1
	jmp	.LBB53_131
.LBB53_131:                             # %for.inc335
                                        #   in Loop: Header=BB53_125 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_125
.LBB53_132:                             # %for.end337
	jmp	.LBB53_133
.LBB53_133:                             # %if.end338
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB53_143
# %bb.134:                              # %if.then342
	movl	$0, -16(%rbp)
.LBB53_135:                             # %for.cond343
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_137 Depth 2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB53_142
# %bb.136:                              # %for.body346
                                        #   in Loop: Header=BB53_135 Depth=1
	movq	img, %rax
	movl	176(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB53_137:                             # %for.cond347
                                        #   Parent Loop BB53_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	movq	img, %rdx
	addl	72708(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_140
# %bb.138:                              # %for.body352
                                        #   in Loop: Header=BB53_137 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.139:                              # %for.inc396
                                        #   in Loop: Header=BB53_137 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_137
.LBB53_140:                             # %for.end398
                                        #   in Loop: Header=BB53_135 Depth=1
	jmp	.LBB53_141
.LBB53_141:                             # %for.inc399
                                        #   in Loop: Header=BB53_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_135
.LBB53_142:                             # %for.end401
	jmp	.LBB53_143
.LBB53_143:                             # %if.end402
	movq	cs_cm, %rdi
	callq	store_coding_state
	cmpl	$0, -92(%rbp)
	je	.LBB53_150
# %bb.144:                              # %if.then404
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB53_147
# %bb.145:                              # %lor.lhs.false407
	cmpl	$0, -72(%rbp)
	je	.LBB53_148
# %bb.146:                              # %land.lhs.true409
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB53_148
.LBB53_147:                             # %if.then413
	movq	img, %rax
	movl	120(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -32(%rbp)
	movl	-76(%rbp), %edi
	movl	-28(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-28(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-32(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -32(%rbp)
	movl	-76(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 120(%rcx)
	jmp	.LBB53_149
.LBB53_148:                             # %if.else417
	movq	img, %rax
	movl	120(%rax), %edi
	addl	$1, %edi
	movl	-28(%rbp), %esi
	leaq	-32(%rbp), %rdx
	leaq	-28(%rbp), %rcx
	callq	ue_linfo
	movq	img, %rax
	movl	120(%rax), %edi
	movl	-28(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-28(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-32(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -32(%rbp)
.LBB53_149:                             # %if.end422
	jmp	.LBB53_151
.LBB53_150:                             # %if.else423
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -32(%rbp)
.LBB53_151:                             # %if.end425
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vmovsd	.LCPI53_0(%rip), %xmm2  # xmm2 = mem[0],zero
	vcvtsi2sdq	-56(%rbp), %xmm0, %xmm0
	vmovsd	-88(%rbp), %xmm1        # xmm1 = mem[0],zero
	vcvtsi2sdl	-32(%rbp), %xmm0, %xmm3
	vucomisd	%xmm3, %xmm2
	jbe	.LBB53_153
# %bb.152:                              # %cond.true430
	vmovsd	.LCPI53_0(%rip), %xmm2  # xmm2 = mem[0],zero
	jmp	.LBB53_154
.LBB53_153:                             # %cond.false431
	vcvtsi2sdl	-32(%rbp), %xmm0, %xmm2
.LBB53_154:                             # %cond.end433
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -120(%rbp)
	vmovsd	-120(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-128(%rbp), %rax
	vucomisd	(%rax), %xmm0
	jae	.LBB53_158
# %bb.155:                              # %lor.lhs.false438
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB53_159
# %bb.156:                              # %land.lhs.true442
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	jne	.LBB53_159
# %bb.157:                              # %land.lhs.true445
	cmpq	$0, -56(%rbp)
	je	.LBB53_159
.LBB53_158:                             # %if.then448
	movl	$0, -60(%rbp)
	jmp	.LBB53_177
.LBB53_159:                             # %if.end449
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB53_176
# %bb.160:                              # %land.lhs.true451
	cmpl	$0, -20(%rbp)
	je	.LBB53_162
# %bb.161:                              # %cond.true453
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB53_165
	jmp	.LBB53_176
.LBB53_162:                             # %cond.false454
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB53_164
# %bb.163:                              # %cond.true458
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB53_176
	jmp	.LBB53_165
.LBB53_164:                             # %cond.false461
	movb	$1, %al
	testb	$1, %al
	jne	.LBB53_165
	jmp	.LBB53_176
.LBB53_165:                             # %if.then462
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB53_175
# %bb.166:                              # %if.then465
	movq	-112(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB53_168
# %bb.167:                              # %cond.true468
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB53_171
	jmp	.LBB53_174
.LBB53_168:                             # %cond.false469
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB53_170
# %bb.169:                              # %cond.true473
	movq	-112(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB53_174
	jmp	.LBB53_171
.LBB53_170:                             # %cond.false476
	movb	$1, %al
	testb	$1, %al
	jne	.LBB53_171
	jmp	.LBB53_174
.LBB53_171:                             # %if.then477
	callq	field_flag_inference
	movq	-48(%rbp), %rcx
	cmpl	532(%rcx), %eax
	je	.LBB53_173
# %bb.172:                              # %if.then481
	movl	$0, -60(%rbp)
	jmp	.LBB53_177
.LBB53_173:                             # %if.end482
	jmp	.LBB53_174
.LBB53_174:                             # %if.end483
	jmp	.LBB53_175
.LBB53_175:                             # %if.end484
	jmp	.LBB53_176
.LBB53_176:                             # %if.end485
	vmovsd	-120(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-128(%rbp), %rax
	vmovsd	%xmm0, (%rax)
	movl	$1, -60(%rbp)
.LBB53_177:                             # %return
	movl	-60(%rbp), %ebx
	cmpl	$1409778792, -96(%rbp)  # imm = 0x54078468
	jne	.LBB53_179
.LBB53_178:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_179:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_178
.Lfunc_end53:
	.size	RDCost_for_macroblocks.24, .Lfunc_end53-RDCost_for_macroblocks.24
	.cfi_endproc
                                        # -- End function
	.globl	UpdatePixelMap.25       # -- Begin function UpdatePixelMap.25
	.p2align	4, 0x90
	.type	UpdatePixelMap.25,@function
UpdatePixelMap.25:                      # @UpdatePixelMap.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$956297206, -28(%rbp)   # imm = 0x38FFEFF6
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB54_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_4 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB54_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB54_2 Depth=1
	movl	$0, -4(%rbp)
.LBB54_4:                               # %for.cond2
                                        #   Parent Loop BB54_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB54_7
# %bb.5:                                # %for.body4
                                        #   in Loop: Header=BB54_4 Depth=2
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB54_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_4
.LBB54_7:                               # %for.end
                                        #   in Loop: Header=BB54_2 Depth=1
	jmp	.LBB54_8
.LBB54_8:                               # %for.inc7
                                        #   in Loop: Header=BB54_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_2
.LBB54_9:                               # %for.end9
	jmp	.LBB54_41
.LBB54_10:                              # %if.else
	movl	$0, -16(%rbp)
.LBB54_11:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_13 Depth 2
                                        #       Child Loop BB54_16 Depth 3
                                        #         Child Loop BB54_18 Depth 4
                                        #       Child Loop BB54_25 Depth 3
                                        #         Child Loop BB54_27 Depth 4
	movl	-16(%rbp), %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB54_40
# %bb.12:                               # %for.body13
                                        #   in Loop: Header=BB54_11 Depth=1
	movl	$0, -12(%rbp)
.LBB54_13:                              # %for.cond14
                                        #   Parent Loop BB54_11 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_16 Depth 3
                                        #         Child Loop BB54_18 Depth 4
                                        #       Child Loop BB54_25 Depth 3
                                        #         Child Loop BB54_27 Depth 4
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB54_38
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB54_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-12(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movq	refresh_map, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB54_24
# %bb.15:                               # %if.then25
                                        #   in Loop: Header=BB54_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB54_16:                              # %for.cond27
                                        #   Parent Loop BB54_11 Depth=1
                                        #     Parent Loop BB54_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB54_18 Depth 4
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB54_23
# %bb.17:                               # %for.body29
                                        #   in Loop: Header=BB54_16 Depth=3
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB54_18:                              # %for.cond31
                                        #   Parent Loop BB54_11 Depth=1
                                        #     Parent Loop BB54_13 Depth=2
                                        #       Parent Loop BB54_16 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB54_21
# %bb.19:                               # %for.body33
                                        #   in Loop: Header=BB54_18 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.20:                               # %for.inc38
                                        #   in Loop: Header=BB54_18 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_18
.LBB54_21:                              # %for.end40
                                        #   in Loop: Header=BB54_16 Depth=3
	jmp	.LBB54_22
.LBB54_22:                              # %for.inc41
                                        #   in Loop: Header=BB54_16 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_16
.LBB54_23:                              # %for.end43
                                        #   in Loop: Header=BB54_13 Depth=2
	jmp	.LBB54_36
.LBB54_24:                              # %if.else44
                                        #   in Loop: Header=BB54_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB54_25:                              # %for.cond46
                                        #   Parent Loop BB54_11 Depth=1
                                        #     Parent Loop BB54_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB54_27 Depth 4
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB54_35
# %bb.26:                               # %for.body48
                                        #   in Loop: Header=BB54_25 Depth=3
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB54_27:                              # %for.cond50
                                        #   Parent Loop BB54_11 Depth=1
                                        #     Parent Loop BB54_13 Depth=2
                                        #       Parent Loop BB54_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB54_33
# %bb.28:                               # %for.body52
                                        #   in Loop: Header=BB54_27 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	movq	input, %rcx
	movl	36(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_30
# %bb.29:                               # %cond.true
                                        #   in Loop: Header=BB54_27 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	jmp	.LBB54_31
.LBB54_30:                              # %cond.false
                                        #   in Loop: Header=BB54_27 Depth=4
	movq	input, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
.LBB54_31:                              # %cond.end
                                        #   in Loop: Header=BB54_27 Depth=4
	movq	pixel_map, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.32:                               # %for.inc74
                                        #   in Loop: Header=BB54_27 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_27
.LBB54_33:                              # %for.end76
                                        #   in Loop: Header=BB54_25 Depth=3
	jmp	.LBB54_34
.LBB54_34:                              # %for.inc77
                                        #   in Loop: Header=BB54_25 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_25
.LBB54_35:                              # %for.end79
                                        #   in Loop: Header=BB54_13 Depth=2
	jmp	.LBB54_36
.LBB54_36:                              # %if.end
                                        #   in Loop: Header=BB54_13 Depth=2
	jmp	.LBB54_37
.LBB54_37:                              # %for.inc80
                                        #   in Loop: Header=BB54_13 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_13
.LBB54_38:                              # %for.end82
                                        #   in Loop: Header=BB54_11 Depth=1
	jmp	.LBB54_39
.LBB54_39:                              # %for.inc83
                                        #   in Loop: Header=BB54_11 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_11
.LBB54_40:                              # %for.end85
	jmp	.LBB54_41
.LBB54_41:                              # %if.end86
	cmpl	$956297206, -28(%rbp)   # imm = 0x38FFEFF6
	jne	.LBB54_43
.LBB54_42:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_43:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_42
.Lfunc_end54:
	.size	UpdatePixelMap.25, .Lfunc_end54-UpdatePixelMap.25
	.cfi_endproc
                                        # -- End function
	.globl	StoreMVBlock8x8.26      # -- Begin function StoreMVBlock8x8.26
	.p2align	4, 0x90
	.type	StoreMVBlock8x8.26,@function
StoreMVBlock8x8.26:                     # @StoreMVBlock8x8.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$459769, -68(%rbp)      # imm = 0x703F9
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -52(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -28(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB55_12
# %bb.1:                                # %if.then
	cmpl	$0, -52(%rbp)
	jl	.LBB55_11
# %bb.2:                                # %if.then5
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB55_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_5 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB55_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB55_3 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB55_5:                               # %for.cond7
                                        #   Parent Loop BB55_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB55_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB55_5 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB55_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_5
.LBB55_8:                               # %for.end
                                        #   in Loop: Header=BB55_3 Depth=1
	jmp	.LBB55_9
.LBB55_9:                               # %for.inc76
                                        #   in Loop: Header=BB55_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_3
.LBB55_10:                              # %for.end78
	jmp	.LBB55_11
.LBB55_11:                              # %if.end
	jmp	.LBB55_46
.LBB55_12:                              # %if.else
	cmpl	$0, -52(%rbp)
	jne	.LBB55_22
# %bb.13:                               # %if.then80
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB55_14:                              # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_16 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB55_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB55_14 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB55_16:                              # %for.cond84
                                        #   Parent Loop BB55_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB55_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB55_16 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB55_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_16
.LBB55_19:                              # %for.end161
                                        #   in Loop: Header=BB55_14 Depth=1
	jmp	.LBB55_20
.LBB55_20:                              # %for.inc162
                                        #   in Loop: Header=BB55_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_14
.LBB55_21:                              # %for.end164
	jmp	.LBB55_45
.LBB55_22:                              # %if.else165
	cmpl	$1, -52(%rbp)
	jne	.LBB55_32
# %bb.23:                               # %if.then167
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB55_24:                              # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_26 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB55_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB55_24 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB55_26:                              # %for.cond171
                                        #   Parent Loop BB55_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB55_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB55_26 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB55_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_26
.LBB55_29:                              # %for.end248
                                        #   in Loop: Header=BB55_24 Depth=1
	jmp	.LBB55_30
.LBB55_30:                              # %for.inc249
                                        #   in Loop: Header=BB55_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_24
.LBB55_31:                              # %for.end251
	jmp	.LBB55_44
.LBB55_32:                              # %if.else252
	cmpl	$2, -52(%rbp)
	jne	.LBB55_42
# %bb.33:                               # %if.then254
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB55_34:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_36 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB55_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB55_34 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB55_36:                              # %for.cond258
                                        #   Parent Loop BB55_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB55_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB55_36 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rsi,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%ax, 2(%rsi,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	(%rax), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movw	%dx, 2(%rdi,%rsi,4)
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addq	$64, %rdi
	movslq	-8(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	addq	%rsi, %rcx
	addq	$64, %rcx
	movslq	-8(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	movw	%dx, 2(%rcx,%rsi,4)
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB55_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_36
.LBB55_39:                              # %for.end407
                                        #   in Loop: Header=BB55_34 Depth=1
	jmp	.LBB55_40
.LBB55_40:                              # %for.inc408
                                        #   in Loop: Header=BB55_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_34
.LBB55_41:                              # %for.end410
	jmp	.LBB55_43
.LBB55_42:                              # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB55_43:                              # %if.end412
	jmp	.LBB55_44
.LBB55_44:                              # %if.end413
	jmp	.LBB55_45
.LBB55_45:                              # %if.end414
	jmp	.LBB55_46
.LBB55_46:                              # %if.end415
	cmpl	$459769, -68(%rbp)      # imm = 0x703F9
	jne	.LBB55_48
.LBB55_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_47
.Lfunc_end55:
	.size	StoreMVBlock8x8.26, .Lfunc_end55-StoreMVBlock8x8.26
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_8x8blocks.27
.LCPI56_0:
	.quad	4906019910204099648     # double 1.0E+20
	.text
	.globl	RDCost_for_8x8blocks.27
	.p2align	4, 0x90
	.type	RDCost_for_8x8blocks.27,@function
RDCost_for_8x8blocks.27:                # @RDCost_for_8x8blocks.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movw	16(%rbp), %ax
	xorl	%r10d, %r10d
	movl	$1917405641, -156(%rbp) # imm = 0x724949C9
	movq	%rdi, -136(%rbp)
	movq	%rsi, -200(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movl	%edx, -40(%rbp)
	movl	%ecx, -36(%rbp)
	movw	%r8w, -18(%rbp)
	movw	%r9w, -42(%rbp)
	movl	$0, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -116(%rbp)
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -52(%rbp)
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -172(%rbp)
	cmpl	$0, -172(%rbp)
	je	.LBB56_2
# %bb.1:                                # %land.rhs
	cmpl	$0, -36(%rbp)
	sete	%r10b
.LBB56_2:                               # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -128(%rbp)
	movl	-36(%rbp), %edi
	movswl	-18(%rbp), %esi
	callq	B8Mode2Value
	movl	%eax, -120(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-112(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -184(%rbp)
	movq	-112(%rbp), %rax
	movl	$0, 580(%rax)
	cmpl	$0, -128(%rbp)
	je	.LBB56_10
# %bb.3:                                # %if.then
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB56_5
# %bb.4:                                # %if.then20
	vmovsd	.LCPI56_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	%xmm0, -208(%rbp)
	jmp	.LBB56_139
.LBB56_5:                               # %if.else
	xorl	%r8d, %r8d
	movq	-200(%rbp), %rsi
	movl	-40(%rbp), %edx
	movq	direct_pdir, %rcx
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rcx,%rdi,8), %rcx
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movw	(%rcx,%rdi,2), %r9w
	movq	direct_ref_idx, %rdi
	movq	(%rdi), %rdi
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-32(%rbp), %eax
	cltq
	movq	(%rdi,%rax,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %eax
	cmpl	%eax, %r8d
	jle	.LBB56_7
# %bb.6:                                # %cond.true
	xorl	%r10d, %r10d
	jmp	.LBB56_8
.LBB56_7:                               # %cond.false
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rax,%rdi,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %r10d
.LBB56_8:                               # %cond.end
	movq	direct_ref_idx, %rdi
	movq	8(%rdi), %rdi
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rdi,%rcx,8), %r11
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rbx
	leaq	-116(%rbp), %rdi
	movswl	%r9w, %ecx
	movl	$0, %r8d
	movl	$0, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	(%r11,%rbx,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-136(%rbp), %rcx
	movl	%eax, (%rcx)
# %bb.9:                                # %if.end
	jmp	.LBB56_19
.LBB56_10:                              # %if.else62
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB56_12
# %bb.11:                               # %lor.lhs.false
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB56_13
.LBB56_12:                              # %cond.true69
	movl	-36(%rbp), %eax
	jmp	.LBB56_14
.LBB56_13:                              # %cond.false70
	xorl	%eax, %eax
	jmp	.LBB56_14
.LBB56_14:                              # %cond.end71
	movl	%eax, -160(%rbp)
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB56_16
# %bb.15:                               # %lor.lhs.false76
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB56_17
.LBB56_16:                              # %cond.true80
	movl	-36(%rbp), %eax
	jmp	.LBB56_18
.LBB56_17:                              # %cond.false81
	xorl	%eax, %eax
	jmp	.LBB56_18
.LBB56_18:                              # %cond.end82
	movl	%eax, -168(%rbp)
	movq	-200(%rbp), %rsi
	movl	-40(%rbp), %edx
	movw	-18(%rbp), %ax
	movl	-160(%rbp), %r8d
	movl	-168(%rbp), %r9d
	movw	-42(%rbp), %bx
	leaq	-116(%rbp), %rdi
	movswl	%ax, %ecx
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	16(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-136(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB56_19:                              # %if.end85
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB56_84
# %bb.20:                               # %if.then87
	movl	$0, -56(%rbp)
.LBB56_21:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_23 Depth 2
                                        #       Child Loop BB56_25 Depth 3
                                        #     Child Loop BB56_31 Depth 2
                                        #       Child Loop BB56_33 Depth 3
                                        #     Child Loop BB56_39 Depth 2
                                        #       Child Loop BB56_41 Depth 3
	cmpl	$4, -56(%rbp)
	jge	.LBB56_48
# %bb.22:                               # %for.body
                                        #   in Loop: Header=BB56_21 Depth=1
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -92(%rbp)
	movl	-48(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -88(%rbp)
	movl	$0, -16(%rbp)
.LBB56_23:                              # %for.cond96
                                        #   Parent Loop BB56_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_25 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB56_30
# %bb.24:                               # %for.body99
                                        #   in Loop: Header=BB56_23 Depth=2
	movl	$0, -12(%rbp)
.LBB56_25:                              # %for.cond100
                                        #   Parent Loop BB56_21 Depth=1
                                        #     Parent Loop BB56_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB56_28
# %bb.26:                               # %for.body103
                                        #   in Loop: Header=BB56_25 Depth=3
	movl	-12(%rbp), %eax
	addl	-92(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-88(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB56_25 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_25
.LBB56_28:                              # %for.end
                                        #   in Loop: Header=BB56_23 Depth=2
	jmp	.LBB56_29
.LBB56_29:                              # %for.inc114
                                        #   in Loop: Header=BB56_23 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_23
.LBB56_30:                              # %for.end116
                                        #   in Loop: Header=BB56_21 Depth=1
	movl	-40(%rbp), %edi
	addl	$4, %edi
	movl	-56(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB56_31:                              # %for.cond120
                                        #   Parent Loop BB56_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_33 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB56_38
# %bb.32:                               # %for.body123
                                        #   in Loop: Header=BB56_31 Depth=2
	movl	$0, -12(%rbp)
.LBB56_33:                              # %for.cond124
                                        #   Parent Loop BB56_21 Depth=1
                                        #     Parent Loop BB56_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB56_36
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB56_33 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-92(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-88(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-12(%rbp), %eax
	addl	-92(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-88(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc150
                                        #   in Loop: Header=BB56_33 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_33
.LBB56_36:                              # %for.end152
                                        #   in Loop: Header=BB56_31 Depth=2
	jmp	.LBB56_37
.LBB56_37:                              # %for.inc153
                                        #   in Loop: Header=BB56_31 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_31
.LBB56_38:                              # %for.end155
                                        #   in Loop: Header=BB56_21 Depth=1
	movl	-40(%rbp), %edi
	addl	$8, %edi
	movl	-56(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB56_39:                              # %for.cond159
                                        #   Parent Loop BB56_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB56_46
# %bb.40:                               # %for.body162
                                        #   in Loop: Header=BB56_39 Depth=2
	movl	$0, -12(%rbp)
.LBB56_41:                              # %for.cond163
                                        #   Parent Loop BB56_21 Depth=1
                                        #     Parent Loop BB56_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB56_44
# %bb.42:                               # %for.body166
                                        #   in Loop: Header=BB56_41 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-92(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-88(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc178
                                        #   in Loop: Header=BB56_41 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_41
.LBB56_44:                              # %for.end180
                                        #   in Loop: Header=BB56_39 Depth=2
	jmp	.LBB56_45
.LBB56_45:                              # %for.inc181
                                        #   in Loop: Header=BB56_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_39
.LBB56_46:                              # %for.end183
                                        #   in Loop: Header=BB56_21 Depth=1
	jmp	.LBB56_47
.LBB56_47:                              # %for.inc184
                                        #   in Loop: Header=BB56_21 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB56_21
.LBB56_48:                              # %for.end186
	movl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB56_49:                              # %for.cond187
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_51 Depth 2
	movl	-16(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_83
# %bb.50:                               # %for.body191
                                        #   in Loop: Header=BB56_49 Depth=1
	movl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB56_51:                              # %for.cond192
                                        #   Parent Loop BB56_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_81
# %bb.52:                               # %for.body196
                                        #   in Loop: Header=BB56_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -124(%rbp)
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rbx
	movslq	-16(%rbp), %rdx
	movl	(%rbx,%rdx,4), %edx
	addl	-124(%rbp), %edx
	movl	%edx, -84(%rbp)
	movl	-124(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resR, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -76(%rbp)
	movl	-76(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rbx
	movslq	-16(%rbp), %rsi
	addl	(%rbx,%rsi,4), %edx
	movl	%edx, -80(%rbp)
	movq	img, %rdx
	movl	72688(%rdx), %edx
	movl	-76(%rbp), %esi
	movslq	-12(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movslq	-16(%rbp), %rdi
	addl	(%rcx,%rdi,4), %esi
	cmpl	%esi, %eax
	jle	.LBB56_54
# %bb.53:                               # %cond.true228
                                        #   in Loop: Header=BB56_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB56_55
.LBB56_54:                              # %cond.false229
                                        #   in Loop: Header=BB56_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB56_55:                              # %cond.end235
                                        #   in Loop: Header=BB56_51 Depth=2
	cmpl	%eax, %edx
	jge	.LBB56_57
# %bb.56:                               # %cond.true239
                                        #   in Loop: Header=BB56_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB56_61
.LBB56_57:                              # %cond.false241
                                        #   in Loop: Header=BB56_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-76(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB56_59
# %bb.58:                               # %cond.true249
                                        #   in Loop: Header=BB56_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB56_60
.LBB56_59:                              # %cond.false250
                                        #   in Loop: Header=BB56_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB56_60:                              # %cond.end256
                                        #   in Loop: Header=BB56_51 Depth=2
.LBB56_61:                              # %cond.end258
                                        #   in Loop: Header=BB56_51 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-84(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB56_63
# %bb.62:                               # %cond.true275
                                        #   in Loop: Header=BB56_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB56_64
.LBB56_63:                              # %cond.false276
                                        #   in Loop: Header=BB56_51 Depth=2
	movl	-84(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB56_64:                              # %cond.end282
                                        #   in Loop: Header=BB56_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB56_66
# %bb.65:                               # %cond.true286
                                        #   in Loop: Header=BB56_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_70
.LBB56_66:                              # %cond.false288
                                        #   in Loop: Header=BB56_51 Depth=2
	xorl	%eax, %eax
	movl	-84(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB56_68
# %bb.67:                               # %cond.true296
                                        #   in Loop: Header=BB56_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB56_69
.LBB56_68:                              # %cond.false297
                                        #   in Loop: Header=BB56_51 Depth=2
	movl	-84(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB56_69:                              # %cond.end303
                                        #   in Loop: Header=BB56_51 Depth=2
.LBB56_70:                              # %cond.end305
                                        #   in Loop: Header=BB56_51 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-80(%rbp), %esi
	movslq	-12(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-16(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB56_72
# %bb.71:                               # %cond.true324
                                        #   in Loop: Header=BB56_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB56_73
.LBB56_72:                              # %cond.false325
                                        #   in Loop: Header=BB56_51 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-80(%rbp), %ecx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB56_73:                              # %cond.end331
                                        #   in Loop: Header=BB56_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB56_75
# %bb.74:                               # %cond.true335
                                        #   in Loop: Header=BB56_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB56_79
.LBB56_75:                              # %cond.false337
                                        #   in Loop: Header=BB56_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-80(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB56_77
# %bb.76:                               # %cond.true345
                                        #   in Loop: Header=BB56_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB56_78
.LBB56_77:                              # %cond.false346
                                        #   in Loop: Header=BB56_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-80(%rbp), %eax
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB56_78:                              # %cond.end352
                                        #   in Loop: Header=BB56_51 Depth=2
.LBB56_79:                              # %cond.end354
                                        #   in Loop: Header=BB56_51 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.80:                               # %for.inc367
                                        #   in Loop: Header=BB56_51 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_51
.LBB56_81:                              # %for.end369
                                        #   in Loop: Header=BB56_49 Depth=1
	jmp	.LBB56_82
.LBB56_82:                              # %for.inc370
                                        #   in Loop: Header=BB56_49 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_49
.LBB56_83:                              # %for.end372
	jmp	.LBB56_84
.LBB56_84:                              # %if.end373
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB56_87
# %bb.85:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB56_87
# %bb.86:                               # %if.then379
	movl	-40(%rbp), %edi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	compute_residue_b8block
.LBB56_87:                              # %if.end380
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB56_102
# %bb.88:                               # %land.lhs.true384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB56_102
# %bb.89:                               # %if.then388
	movl	$0, -68(%rbp)
.LBB56_90:                              # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_92 Depth 2
                                        #       Child Loop BB56_94 Depth 3
	movl	-68(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB56_101
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB56_90 Depth=1
	movl	-68(%rbp), %edi
	movl	-40(%rbp), %edx
	movl	-36(%rbp), %ecx
	movswl	-42(%rbp), %r8d
	movl	$8, %esi
	callq	decode_one_b8block
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB56_92:                              # %for.cond395
                                        #   Parent Loop BB56_90 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_94 Depth 3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_99
# %bb.93:                               # %for.body401
                                        #   in Loop: Header=BB56_92 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB56_94:                              # %for.cond403
                                        #   Parent Loop BB56_90 Depth=1
                                        #     Parent Loop BB56_92 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_97
# %bb.95:                               # %for.body409
                                        #   in Loop: Header=BB56_94 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
# %bb.96:                               # %for.inc427
                                        #   in Loop: Header=BB56_94 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_94
.LBB56_97:                              # %for.end429
                                        #   in Loop: Header=BB56_92 Depth=2
	jmp	.LBB56_98
.LBB56_98:                              # %for.inc430
                                        #   in Loop: Header=BB56_92 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_92
.LBB56_99:                              # %for.end432
                                        #   in Loop: Header=BB56_90 Depth=1
	jmp	.LBB56_100
.LBB56_100:                             # %for.inc433
                                        #   in Loop: Header=BB56_90 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB56_90
.LBB56_101:                             # %for.end435
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-64(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -64(%rbp)
	jmp	.LBB56_113
.LBB56_102:                             # %if.else439
	movl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB56_103:                             # %for.cond440
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_105 Depth 2
	movl	-16(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_112
# %bb.104:                              # %for.body444
                                        #   in Loop: Header=BB56_103 Depth=1
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB56_105:                             # %for.cond447
                                        #   Parent Loop BB56_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_110
# %bb.106:                              # %for.body453
                                        #   in Loop: Header=BB56_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB56_108
# %bb.107:                              # %if.then477
                                        #   in Loop: Header=BB56_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB56_108:                             # %if.end524
                                        #   in Loop: Header=BB56_105 Depth=2
	jmp	.LBB56_109
.LBB56_109:                             # %for.inc525
                                        #   in Loop: Header=BB56_105 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_105
.LBB56_110:                             # %for.end527
                                        #   in Loop: Header=BB56_103 Depth=1
	jmp	.LBB56_111
.LBB56_111:                             # %for.inc528
                                        #   in Loop: Header=BB56_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_103
.LBB56_112:                             # %for.end530
	jmp	.LBB56_113
.LBB56_113:                             # %if.end531
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB56_115
# %bb.114:                              # %if.then534
	movl	-120(%rbp), %edi
	movl	-164(%rbp), %esi
	leaq	-72(%rbp), %rdx
	leaq	-164(%rbp), %rcx
	callq	ue_linfo
	movl	-72(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_116
.LBB56_115:                             # %if.else536
	movl	-120(%rbp), %eax
	movq	-104(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-104(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-104(%rbp), %rax
	movl	$2, (%rax)
	movq	-192(%rbp), %rax
	movq	24(%rax), %rax
	movq	-184(%rbp), %rcx
	movq	-104(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movq	112(%rax), %rax
	movq	-104(%rbp), %rdi
	movq	-144(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-104(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -104(%rbp)
	movq	-112(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB56_116:                             # %if.end547
	cmpl	$0, -128(%rbp)
	jne	.LBB56_134
# %bb.117:                              # %if.then549
	movq	img, %rax
	cmpl	$1, 72000(%rax)
	jle	.LBB56_121
# %bb.118:                              # %land.lhs.true552
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB56_120
# %bb.119:                              # %lor.lhs.false556
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB56_121
.LBB56_120:                             # %if.then560
	movl	-36(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movswl	-42(%rbp), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB56_121:                             # %if.end564
	movq	img, %rax
	cmpl	$1, 72004(%rax)
	jle	.LBB56_127
# %bb.122:                              # %land.lhs.true567
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB56_127
# %bb.123:                              # %if.then571
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB56_125
# %bb.124:                              # %lor.lhs.false575
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB56_126
.LBB56_125:                             # %if.then579
	movl	-36(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movswl	16(%rbp), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB56_126:                             # %if.end583
	jmp	.LBB56_127
.LBB56_127:                             # %if.end584
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB56_129
# %bb.128:                              # %lor.lhs.false588
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB56_130
.LBB56_129:                             # %if.then592
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	addl	$2, %edx
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movswl	-42(%rbp), %r8d
	movl	-36(%rbp), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB56_130:                             # %if.end598
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB56_132
# %bb.131:                              # %lor.lhs.false602
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB56_133
.LBB56_132:                             # %if.then606
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	addl	$2, %edx
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movswl	16(%rbp), %r8d
	movl	-36(%rbp), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB56_133:                             # %if.end612
	jmp	.LBB56_134
.LBB56_134:                             # %if.end613
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB56_136
# %bb.135:                              # %if.then617
	movq	-192(%rbp), %rax
	movq	24(%rax), %rax
	movq	-184(%rbp), %rcx
	movslq	44(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	xorl	%esi, %esi
	movl	%eax, -72(%rbp)
	movl	-40(%rbp), %edi
	movq	-136(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovgl	%eax, %esi
	movl	cbp8x8, %edx
	movq	-112(%rbp), %rcx
	movq	-152(%rbp), %r9
	movl	$1, %r8d
	callq	writeCBP_BIT_CABAC
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	subl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB56_136:                             # %if.end629
	movq	-136(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB56_138
# %bb.137:                              # %if.then631
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	movq	-112(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB56_138:                             # %if.end634
	vcvtsi2sdq	-64(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-24(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp)
.LBB56_139:                             # %return
	vmovsd	-208(%rbp), %xmm0       # xmm0 = mem[0],zero
	cmpl	$1917405641, -156(%rbp) # imm = 0x724949C9
	jne	.LBB56_141
.LBB56_140:
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_141:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -216(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-216(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB56_140
.Lfunc_end56:
	.size	RDCost_for_8x8blocks.27, .Lfunc_end56-RDCost_for_8x8blocks.27
	.cfi_endproc
                                        # -- End function
	.globl	store_macroblock_parameters.28 # -- Begin function store_macroblock_parameters.28
	.p2align	4, 0x90
	.type	store_macroblock_parameters.28,@function
store_macroblock_parameters.28:         # @store_macroblock_parameters.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1246758225, -36(%rbp)  # imm = 0x4A500551
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, best_mode
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movl	%eax, best_c_imode
	movq	img, %rax
	movl	72380(%rax), %eax
	movl	%eax, best_i16offset
	cmpl	$1, -28(%rbp)
	jne	.LBB57_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movl	%eax, bi_pred_me
	jmp	.LBB57_3
.LBB57_2:                               # %if.else
	movl	$0, bi_pred_me
.LBB57_3:                               # %if.end
	movl	$0, -4(%rbp)
.LBB57_4:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB57_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB57_4 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8mode(,%rcx,2)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8pdir(,%rcx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB57_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_4
.LBB57_7:                               # %for.end
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB57_8:                               # %for.cond15
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_10 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_15
# %bb.9:                                # %for.body19
                                        #   in Loop: Header=BB57_8 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB57_10:                              # %for.cond20
                                        #   Parent Loop BB57_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_13
# %bb.11:                               # %for.body25
                                        #   in Loop: Header=BB57_10 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_ipredmode(,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_intra_pred_modes(,%rcx,4)
# %bb.12:                               # %for.inc36
                                        #   in Loop: Header=BB57_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_10
.LBB57_13:                              # %for.end39
                                        #   in Loop: Header=BB57_8 Depth=1
	jmp	.LBB57_14
.LBB57_14:                              # %for.inc40
                                        #   in Loop: Header=BB57_8 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_8
.LBB57_15:                              # %for.end42
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB57_16:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_18 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB57_23
# %bb.17:                               # %for.body46
                                        #   in Loop: Header=BB57_16 Depth=1
	movl	$0, -8(%rbp)
.LBB57_18:                              # %for.cond47
                                        #   Parent Loop BB57_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB57_21
# %bb.19:                               # %for.body50
                                        #   in Loop: Header=BB57_18 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$b8_ipredmode8x8, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b8_intra_pred_modes8x8(,%rcx,4)
# %bb.20:                               # %for.inc67
                                        #   in Loop: Header=BB57_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_18
.LBB57_21:                              # %for.end70
                                        #   in Loop: Header=BB57_16 Depth=1
	jmp	.LBB57_22
.LBB57_22:                              # %for.inc71
                                        #   in Loop: Header=BB57_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_16
.LBB57_23:                              # %for.end73
	movl	$0, -8(%rbp)
.LBB57_24:                              # %for.cond74
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_26 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_31
# %bb.25:                               # %for.body77
                                        #   in Loop: Header=BB57_24 Depth=1
	movl	$0, -4(%rbp)
.LBB57_26:                              # %for.cond78
                                        #   Parent Loop BB57_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_29
# %bb.27:                               # %for.body81
                                        #   in Loop: Header=BB57_26 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.28:                               # %for.inc92
                                        #   in Loop: Header=BB57_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_26
.LBB57_29:                              # %for.end94
                                        #   in Loop: Header=BB57_24 Depth=1
	jmp	.LBB57_30
.LBB57_30:                              # %for.inc95
                                        #   in Loop: Header=BB57_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_24
.LBB57_31:                              # %for.end97
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB57_41
# %bb.32:                               # %if.then100
	movl	$0, -8(%rbp)
.LBB57_33:                              # %for.cond101
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_35 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB57_40
# %bb.34:                               # %for.body104
                                        #   in Loop: Header=BB57_33 Depth=1
	movl	$0, -4(%rbp)
.LBB57_35:                              # %for.cond105
                                        #   Parent Loop BB57_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB57_38
# %bb.36:                               # %for.body108
                                        #   in Loop: Header=BB57_35 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbU, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbV, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.37:                               # %for.inc134
                                        #   in Loop: Header=BB57_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_35
.LBB57_38:                              # %for.end136
                                        #   in Loop: Header=BB57_33 Depth=1
	jmp	.LBB57_39
.LBB57_39:                              # %for.inc137
                                        #   in Loop: Header=BB57_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_33
.LBB57_40:                              # %for.end139
	jmp	.LBB57_41
.LBB57_41:                              # %if.end140
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB57_56
# %bb.42:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB57_56
# %bb.43:                               # %if.then146
	movl	$0, -12(%rbp)
.LBB57_44:                              # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_46 Depth 2
                                        #       Child Loop BB57_48 Depth 3
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB57_55
# %bb.45:                               # %for.body150
                                        #   in Loop: Header=BB57_44 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB57_46:                              # %for.cond152
                                        #   Parent Loop BB57_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_48 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_53
# %bb.47:                               # %for.body157
                                        #   in Loop: Header=BB57_46 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB57_48:                              # %for.cond159
                                        #   Parent Loop BB57_44 Depth=1
                                        #     Parent Loop BB57_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_51
# %bb.49:                               # %for.body164
                                        #   in Loop: Header=BB57_48 Depth=3
	movq	decs, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	24(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc177
                                        #   in Loop: Header=BB57_48 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_48
.LBB57_51:                              # %for.end179
                                        #   in Loop: Header=BB57_46 Depth=2
	jmp	.LBB57_52
.LBB57_52:                              # %for.inc180
                                        #   in Loop: Header=BB57_46 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_46
.LBB57_53:                              # %for.end182
                                        #   in Loop: Header=BB57_44 Depth=1
	jmp	.LBB57_54
.LBB57_54:                              # %for.inc183
                                        #   in Loop: Header=BB57_44 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_44
.LBB57_55:                              # %for.end185
	jmp	.LBB57_56
.LBB57_56:                              # %if.end186
	cmpl	$0, -28(%rbp)
	jne	.LBB57_58
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -32(%rbp)
	je	.LBB57_59
.LBB57_58:                              # %if.then188
	movq	cofAC, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-48(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-56(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, cbp
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	%rax, cbp_blk
	jmp	.LBB57_60
.LBB57_59:                              # %if.else191
	movl	$0, cbp
	movq	$0, cbp_blk
.LBB57_60:                              # %if.end192
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, luma_transform_size_8x8_flag
	movl	$0, -8(%rbp)
.LBB57_61:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB57_70
# %bb.62:                               # %for.body196
                                        #   in Loop: Header=BB57_61 Depth=1
	movl	$0, -4(%rbp)
.LBB57_63:                              # %for.cond197
                                        #   Parent Loop BB57_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB57_68
# %bb.64:                               # %for.body200
                                        #   in Loop: Header=BB57_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$frefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -32(%rbp)
	je	.LBB57_66
# %bb.65:                               # %if.then215
                                        #   in Loop: Header=BB57_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$brefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB57_66:                              # %if.end230
                                        #   in Loop: Header=BB57_63 Depth=2
	jmp	.LBB57_67
.LBB57_67:                              # %for.inc231
                                        #   in Loop: Header=BB57_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_63
.LBB57_68:                              # %for.end233
                                        #   in Loop: Header=BB57_61 Depth=1
	jmp	.LBB57_69
.LBB57_69:                              # %for.inc234
                                        #   in Loop: Header=BB57_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_61
.LBB57_70:                              # %for.end236
	cmpl	$1246758225, -36(%rbp)  # imm = 0x4A500551
	jne	.LBB57_72
.LBB57_71:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_72:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_71
.Lfunc_end57:
	.size	store_macroblock_parameters.28, .Lfunc_end57-store_macroblock_parameters.28
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_macroblocks.29
.LCPI58_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	RDCost_for_macroblocks.29
	.p2align	4, 0x90
	.type	RDCost_for_macroblocks.29,@function
RDCost_for_macroblocks.29:              # @RDCost_for_macroblocks.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$708578674, -100(%rbp)  # imm = 0x2A3C0D72
	vmovsd	%xmm0, -88(%rbp)
	movl	%edi, -20(%rbp)
	movq	%rsi, -112(%rbp)
	movl	%edx, -64(%rbp)
	movl	$0, -32(%rbp)
	movq	$0, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB58_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB58_3
.LBB58_2:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB58_3
.LBB58_3:                               # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -72(%rbp)
	movq	img, %rcx
	cmpl	$2, 24(%rcx)
	je	.LBB58_5
# %bb.4:                                # %land.rhs
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	setne	%al
.LBB58_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -40(%rbp)
	movl	-20(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$0, -72(%rbp)
	je	.LBB58_18
# %bb.6:                                # %land.lhs.true
	cmpl	$0, -20(%rbp)
	jne	.LBB58_18
# %bb.7:                                # %if.then
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -92(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -16(%rbp)
.LBB58_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_10 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB58_17
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB58_8 Depth=1
	movl	$0, -12(%rbp)
.LBB58_10:                              # %for.cond17
                                        #   Parent Loop BB58_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB58_15
# %bb.11:                               # %for.body20
                                        #   in Loop: Header=BB58_10 Depth=2
	movq	direct_pdir, %rax
	movl	-92(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-104(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB58_13
# %bb.12:                               # %if.then29
	movl	$0, -60(%rbp)
	jmp	.LBB58_177
.LBB58_13:                              # %if.end
                                        #   in Loop: Header=BB58_10 Depth=2
	jmp	.LBB58_14
.LBB58_14:                              # %for.inc
                                        #   in Loop: Header=BB58_10 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_10
.LBB58_15:                              # %for.end
                                        #   in Loop: Header=BB58_8 Depth=1
	jmp	.LBB58_16
.LBB58_16:                              # %for.inc30
                                        #   in Loop: Header=BB58_8 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_8
.LBB58_17:                              # %for.end32
	jmp	.LBB58_18
.LBB58_18:                              # %if.end33
	cmpl	$8, -20(%rbp)
	jge	.LBB58_24
# %bb.19:                               # %if.then36
	movb	$0, %al
	callq	LumaResidualCoding
	cmpl	$0, -20(%rbp)
	jne	.LBB58_23
# %bb.20:                               # %land.lhs.true39
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB58_23
# %bb.21:                               # %land.lhs.true42
	movq	-48(%rbp), %rax
	cmpl	$1, 572(%rax)
	jne	.LBB58_23
# %bb.22:                               # %if.then45
	movl	$0, -60(%rbp)
	jmp	.LBB58_177
.LBB58_23:                              # %if.end46
	jmp	.LBB58_76
.LBB58_24:                              # %if.else
	cmpl	$8, -20(%rbp)
	jne	.LBB58_26
# %bb.25:                               # %if.then49
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	jmp	.LBB58_75
.LBB58_26:                              # %if.else50
	cmpl	$9, -20(%rbp)
	jne	.LBB58_48
# %bb.27:                               # %if.then53
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-28(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB58_47
# %bb.28:                               # %if.then56
	movl	$0, -16(%rbp)
.LBB58_29:                              # %for.cond57
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_31 Depth 2
                                        #       Child Loop BB58_33 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB58_42
# %bb.30:                               # %for.body60
                                        #   in Loop: Header=BB58_29 Depth=1
	movl	$0, -12(%rbp)
.LBB58_31:                              # %for.cond61
                                        #   Parent Loop BB58_29 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_33 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB58_40
# %bb.32:                               # %for.body64
                                        #   in Loop: Header=BB58_31 Depth=2
	movl	$0, -24(%rbp)
.LBB58_33:                              # %for.cond65
                                        #   Parent Loop BB58_29 Depth=1
                                        #     Parent Loop BB58_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB58_38
# %bb.34:                               # %for.body68
                                        #   in Loop: Header=BB58_33 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB58_36
# %bb.35:                               # %if.then76
                                        #   in Loop: Header=BB58_33 Depth=3
	movl	$2, -40(%rbp)
.LBB58_36:                              # %if.end77
                                        #   in Loop: Header=BB58_33 Depth=3
	jmp	.LBB58_37
.LBB58_37:                              # %for.inc78
                                        #   in Loop: Header=BB58_33 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB58_33
.LBB58_38:                              # %for.end80
                                        #   in Loop: Header=BB58_31 Depth=2
	jmp	.LBB58_39
.LBB58_39:                              # %for.inc81
                                        #   in Loop: Header=BB58_31 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_31
.LBB58_40:                              # %for.end83
                                        #   in Loop: Header=BB58_29 Depth=1
	jmp	.LBB58_41
.LBB58_41:                              # %for.inc84
                                        #   in Loop: Header=BB58_29 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_29
.LBB58_42:                              # %for.end86
	movl	$0, -36(%rbp)
.LBB58_43:                              # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -36(%rbp)
	jge	.LBB58_46
# %bb.44:                               # %for.body90
                                        #   in Loop: Header=BB58_43 Depth=1
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.45:                               # %for.inc92
                                        #   in Loop: Header=BB58_43 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB58_43
.LBB58_46:                              # %for.end94
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB58_47:                              # %if.end97
	jmp	.LBB58_74
.LBB58_48:                              # %if.else98
	cmpl	$10, -20(%rbp)
	jne	.LBB58_50
# %bb.49:                               # %if.then101
	movq	-48(%rbp), %rdi
	leaq	-64(%rbp), %rsi
	callq	Intra16x16_Mode_Decision
	jmp	.LBB58_73
.LBB58_50:                              # %if.else102
	cmpl	$13, -20(%rbp)
	jne	.LBB58_72
# %bb.51:                               # %if.then105
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-28(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB58_71
# %bb.52:                               # %if.then110
	movl	$0, -16(%rbp)
.LBB58_53:                              # %for.cond111
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_55 Depth 2
                                        #       Child Loop BB58_57 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB58_66
# %bb.54:                               # %for.body114
                                        #   in Loop: Header=BB58_53 Depth=1
	movl	$0, -12(%rbp)
.LBB58_55:                              # %for.cond115
                                        #   Parent Loop BB58_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_57 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB58_64
# %bb.56:                               # %for.body118
                                        #   in Loop: Header=BB58_55 Depth=2
	movl	$0, -24(%rbp)
.LBB58_57:                              # %for.cond119
                                        #   Parent Loop BB58_53 Depth=1
                                        #     Parent Loop BB58_55 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB58_62
# %bb.58:                               # %for.body122
                                        #   in Loop: Header=BB58_57 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB58_60
# %bb.59:                               # %if.then130
                                        #   in Loop: Header=BB58_57 Depth=3
	movl	$2, -40(%rbp)
.LBB58_60:                              # %if.end131
                                        #   in Loop: Header=BB58_57 Depth=3
	jmp	.LBB58_61
.LBB58_61:                              # %for.inc132
                                        #   in Loop: Header=BB58_57 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB58_57
.LBB58_62:                              # %for.end134
                                        #   in Loop: Header=BB58_55 Depth=2
	jmp	.LBB58_63
.LBB58_63:                              # %for.inc135
                                        #   in Loop: Header=BB58_55 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_55
.LBB58_64:                              # %for.end137
                                        #   in Loop: Header=BB58_53 Depth=1
	jmp	.LBB58_65
.LBB58_65:                              # %for.inc138
                                        #   in Loop: Header=BB58_53 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_53
.LBB58_66:                              # %for.end140
	movl	$0, -36(%rbp)
.LBB58_67:                              # %for.cond141
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -36(%rbp)
	jge	.LBB58_70
# %bb.68:                               # %for.body144
                                        #   in Loop: Header=BB58_67 Depth=1
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.69:                               # %for.inc146
                                        #   in Loop: Header=BB58_67 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB58_67
.LBB58_70:                              # %for.end148
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB58_71:                              # %if.end152
	jmp	.LBB58_72
.LBB58_72:                              # %if.end153
	jmp	.LBB58_73
.LBB58_73:                              # %if.end154
	jmp	.LBB58_74
.LBB58_74:                              # %if.end155
	jmp	.LBB58_75
.LBB58_75:                              # %if.end156
	jmp	.LBB58_76
.LBB58_76:                              # %if.end157
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB58_82
# %bb.77:                               # %land.lhs.true160
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB58_82
# %bb.78:                               # %if.then164
	cmpl	$10, -20(%rbp)
	jne	.LBB58_80
# %bb.79:                               # %cond.true167
	movl	-64(%rbp), %edi
	jmp	.LBB58_81
.LBB58_80:                              # %cond.false168
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	jmp	.LBB58_81
.LBB58_81:                              # %cond.end169
	callq	compute_residue_mb
.LBB58_82:                              # %if.end171
	cmpl	$10, -20(%rbp)
	jne	.LBB58_92
# %bb.83:                               # %if.then174
	movl	$0, -16(%rbp)
.LBB58_84:                              # %for.cond175
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_86 Depth 2
	cmpl	$16, -16(%rbp)
	jge	.LBB58_91
# %bb.85:                               # %for.body178
                                        #   in Loop: Header=BB58_84 Depth=1
	movl	$0, -12(%rbp)
.LBB58_86:                              # %for.cond179
                                        #   Parent Loop BB58_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -12(%rbp)
	jge	.LBB58_89
# %bb.87:                               # %for.body182
                                        #   in Loop: Header=BB58_86 Depth=2
	movq	img, %rax
	addq	$4792, %rax             # imm = 0x12B8
	movslq	-64(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc194
                                        #   in Loop: Header=BB58_86 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_86
.LBB58_89:                              # %for.end196
                                        #   in Loop: Header=BB58_84 Depth=1
	jmp	.LBB58_90
.LBB58_90:                              # %for.inc197
                                        #   in Loop: Header=BB58_84 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_84
.LBB58_91:                              # %for.end199
	jmp	.LBB58_101
.LBB58_92:                              # %if.else200
	movl	$0, -16(%rbp)
.LBB58_93:                              # %for.cond201
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_95 Depth 2
	cmpl	$16, -16(%rbp)
	jge	.LBB58_100
# %bb.94:                               # %for.body204
                                        #   in Loop: Header=BB58_93 Depth=1
	movl	$0, -12(%rbp)
.LBB58_95:                              # %for.cond205
                                        #   Parent Loop BB58_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -12(%rbp)
	jge	.LBB58_98
# %bb.96:                               # %for.body208
                                        #   in Loop: Header=BB58_95 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.97:                               # %for.inc218
                                        #   in Loop: Header=BB58_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_95
.LBB58_98:                              # %for.end220
                                        #   in Loop: Header=BB58_93 Depth=1
	jmp	.LBB58_99
.LBB58_99:                              # %for.inc221
                                        #   in Loop: Header=BB58_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_93
.LBB58_100:                             # %for.end223
	jmp	.LBB58_101
.LBB58_101:                             # %if.end224
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB58_105
# %bb.102:                              # %land.lhs.true227
	cmpl	$9, -20(%rbp)
	je	.LBB58_107
# %bb.103:                              # %lor.lhs.false
	cmpl	$10, -20(%rbp)
	je	.LBB58_107
# %bb.104:                              # %lor.lhs.false232
	cmpl	$13, -20(%rbp)
	je	.LBB58_107
.LBB58_105:                             # %land.lhs.true235
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB58_107
# %bb.106:                              # %if.then238
	leaq	-28(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB58_107:                             # %if.end239
	cmpl	$10, -20(%rbp)
	jne	.LBB58_109
# %bb.108:                              # %if.then242
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-64(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB58_109:                             # %if.end246
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB58_124
# %bb.110:                              # %land.lhs.true250
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB58_124
# %bb.111:                              # %if.then254
	movl	$0, -24(%rbp)
.LBB58_112:                             # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_114 Depth 2
                                        #       Child Loop BB58_116 Depth 3
	movl	-24(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB58_123
# %bb.113:                              # %for.body258
                                        #   in Loop: Header=BB58_112 Depth=1
	movl	-24(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	decode_one_mb
	movl	$0, -12(%rbp)
.LBB58_114:                             # %for.cond259
                                        #   Parent Loop BB58_112 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_116 Depth 3
	cmpl	$16, -12(%rbp)
	jge	.LBB58_121
# %bb.115:                              # %for.body262
                                        #   in Loop: Header=BB58_114 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -16(%rbp)
.LBB58_116:                             # %for.cond263
                                        #   Parent Loop BB58_112 Depth=1
                                        #     Parent Loop BB58_114 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_119
# %bb.117:                              # %for.body268
                                        #   in Loop: Header=BB58_116 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	172(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.118:                              # %for.inc289
                                        #   in Loop: Header=BB58_116 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_116
.LBB58_119:                             # %for.end291
                                        #   in Loop: Header=BB58_114 Depth=2
	jmp	.LBB58_120
.LBB58_120:                             # %for.inc292
                                        #   in Loop: Header=BB58_114 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_114
.LBB58_121:                             # %for.end294
                                        #   in Loop: Header=BB58_112 Depth=1
	jmp	.LBB58_122
.LBB58_122:                             # %for.inc295
                                        #   in Loop: Header=BB58_112 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB58_112
.LBB58_123:                             # %for.end297
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-56(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -56(%rbp)
	jmp	.LBB58_133
.LBB58_124:                             # %if.else300
	movl	$0, -12(%rbp)
.LBB58_125:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_127 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB58_132
# %bb.126:                              # %for.body304
                                        #   in Loop: Header=BB58_125 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -16(%rbp)
.LBB58_127:                             # %for.cond306
                                        #   Parent Loop BB58_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_130
# %bb.128:                              # %for.body311
                                        #   in Loop: Header=BB58_127 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-12(%rbp), %edx
	movq	img, %rsi
	addl	172(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.129:                              # %for.inc332
                                        #   in Loop: Header=BB58_127 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_127
.LBB58_130:                             # %for.end334
                                        #   in Loop: Header=BB58_125 Depth=1
	jmp	.LBB58_131
.LBB58_131:                             # %for.inc335
                                        #   in Loop: Header=BB58_125 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_125
.LBB58_132:                             # %for.end337
	jmp	.LBB58_133
.LBB58_133:                             # %if.end338
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB58_143
# %bb.134:                              # %if.then342
	movl	$0, -12(%rbp)
.LBB58_135:                             # %for.cond343
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_137 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB58_142
# %bb.136:                              # %for.body346
                                        #   in Loop: Header=BB58_135 Depth=1
	movq	img, %rax
	movl	176(%rax), %eax
	movl	%eax, -16(%rbp)
.LBB58_137:                             # %for.cond347
                                        #   Parent Loop BB58_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	movq	img, %rdx
	addl	72708(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_140
# %bb.138:                              # %for.body352
                                        #   in Loop: Header=BB58_137 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-12(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-12(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.139:                              # %for.inc396
                                        #   in Loop: Header=BB58_137 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_137
.LBB58_140:                             # %for.end398
                                        #   in Loop: Header=BB58_135 Depth=1
	jmp	.LBB58_141
.LBB58_141:                             # %for.inc399
                                        #   in Loop: Header=BB58_135 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_135
.LBB58_142:                             # %for.end401
	jmp	.LBB58_143
.LBB58_143:                             # %if.end402
	movq	cs_cm, %rdi
	callq	store_coding_state
	cmpl	$0, -96(%rbp)
	je	.LBB58_150
# %bb.144:                              # %if.then404
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB58_147
# %bb.145:                              # %lor.lhs.false407
	cmpl	$0, -72(%rbp)
	je	.LBB58_148
# %bb.146:                              # %land.lhs.true409
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB58_148
.LBB58_147:                             # %if.then413
	movq	img, %rax
	movl	120(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -32(%rbp)
	movl	-76(%rbp), %edi
	movl	-28(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-28(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-32(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -32(%rbp)
	movl	-76(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 120(%rcx)
	jmp	.LBB58_149
.LBB58_148:                             # %if.else417
	movq	img, %rax
	movl	120(%rax), %edi
	addl	$1, %edi
	movl	-28(%rbp), %esi
	leaq	-32(%rbp), %rdx
	leaq	-28(%rbp), %rcx
	callq	ue_linfo
	movq	img, %rax
	movl	120(%rax), %edi
	movl	-28(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-28(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-32(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -32(%rbp)
.LBB58_149:                             # %if.end422
	jmp	.LBB58_151
.LBB58_150:                             # %if.else423
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -32(%rbp)
.LBB58_151:                             # %if.end425
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vmovsd	.LCPI58_0(%rip), %xmm2  # xmm2 = mem[0],zero
	vcvtsi2sdq	-56(%rbp), %xmm0, %xmm0
	vmovsd	-88(%rbp), %xmm1        # xmm1 = mem[0],zero
	vcvtsi2sdl	-32(%rbp), %xmm0, %xmm3
	vucomisd	%xmm3, %xmm2
	jbe	.LBB58_153
# %bb.152:                              # %cond.true430
	vmovsd	.LCPI58_0(%rip), %xmm2  # xmm2 = mem[0],zero
	jmp	.LBB58_154
.LBB58_153:                             # %cond.false431
	vcvtsi2sdl	-32(%rbp), %xmm0, %xmm2
.LBB58_154:                             # %cond.end433
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -120(%rbp)
	vmovsd	-120(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-112(%rbp), %rax
	vucomisd	(%rax), %xmm0
	jae	.LBB58_158
# %bb.155:                              # %lor.lhs.false438
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB58_159
# %bb.156:                              # %land.lhs.true442
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	jne	.LBB58_159
# %bb.157:                              # %land.lhs.true445
	cmpq	$0, -56(%rbp)
	je	.LBB58_159
.LBB58_158:                             # %if.then448
	movl	$0, -60(%rbp)
	jmp	.LBB58_177
.LBB58_159:                             # %if.end449
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB58_176
# %bb.160:                              # %land.lhs.true451
	cmpl	$0, -20(%rbp)
	je	.LBB58_162
# %bb.161:                              # %cond.true453
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB58_165
	jmp	.LBB58_176
.LBB58_162:                             # %cond.false454
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB58_164
# %bb.163:                              # %cond.true458
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB58_176
	jmp	.LBB58_165
.LBB58_164:                             # %cond.false461
	movb	$1, %al
	testb	$1, %al
	jne	.LBB58_165
	jmp	.LBB58_176
.LBB58_165:                             # %if.then462
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB58_175
# %bb.166:                              # %if.then465
	movq	-128(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB58_168
# %bb.167:                              # %cond.true468
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB58_171
	jmp	.LBB58_174
.LBB58_168:                             # %cond.false469
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB58_170
# %bb.169:                              # %cond.true473
	movq	-128(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB58_174
	jmp	.LBB58_171
.LBB58_170:                             # %cond.false476
	movb	$1, %al
	testb	$1, %al
	jne	.LBB58_171
	jmp	.LBB58_174
.LBB58_171:                             # %if.then477
	callq	field_flag_inference
	movq	-48(%rbp), %rcx
	cmpl	532(%rcx), %eax
	je	.LBB58_173
# %bb.172:                              # %if.then481
	movl	$0, -60(%rbp)
	jmp	.LBB58_177
.LBB58_173:                             # %if.end482
	jmp	.LBB58_174
.LBB58_174:                             # %if.end483
	jmp	.LBB58_175
.LBB58_175:                             # %if.end484
	jmp	.LBB58_176
.LBB58_176:                             # %if.end485
	vmovsd	-120(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-112(%rbp), %rax
	vmovsd	%xmm0, (%rax)
	movl	$1, -60(%rbp)
.LBB58_177:                             # %return
	movl	-60(%rbp), %ebx
	cmpl	$708578674, -100(%rbp)  # imm = 0x2A3C0D72
	jne	.LBB58_179
.LBB58_178:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_179:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_178
.Lfunc_end58:
	.size	RDCost_for_macroblocks.29, .Lfunc_end58-RDCost_for_macroblocks.29
	.cfi_endproc
                                        # -- End function
	.globl	I16Offset.30            # -- Begin function I16Offset.30
	.p2align	4, 0x90
	.type	I16Offset.30,@function
I16Offset.30:                           # @I16Offset.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1099048945, -20(%rbp)  # imm = 0x418227F1
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	-12(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	movl	$13, %eax
	movl	$1, %ebx
	cmovnel	%eax, %ebx
	addl	-16(%rbp), %ebx
	movl	-12(%rbp), %eax
	andl	$48, %eax
	sarl	$2, %eax
	addl	%eax, %ebx
	cmpl	$1099048945, -20(%rbp)  # imm = 0x418227F1
	jne	.LBB59_2
.LBB59_1:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_1
.Lfunc_end59:
	.size	I16Offset.30, .Lfunc_end59-I16Offset.30
	.cfi_endproc
                                        # -- End function
	.globl	StoreMVBlock8x8.31      # -- Begin function StoreMVBlock8x8.31
	.p2align	4, 0x90
	.type	StoreMVBlock8x8.31,@function
StoreMVBlock8x8.31:                     # @StoreMVBlock8x8.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$393550447, -68(%rbp)   # imm = 0x17751A6F
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -56(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -28(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB60_12
# %bb.1:                                # %if.then
	cmpl	$0, -56(%rbp)
	jl	.LBB60_11
# %bb.2:                                # %if.then5
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB60_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_5 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB60_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB60_3 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB60_5:                               # %for.cond7
                                        #   Parent Loop BB60_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB60_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB60_5 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB60_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_5
.LBB60_8:                               # %for.end
                                        #   in Loop: Header=BB60_3 Depth=1
	jmp	.LBB60_9
.LBB60_9:                               # %for.inc76
                                        #   in Loop: Header=BB60_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_3
.LBB60_10:                              # %for.end78
	jmp	.LBB60_11
.LBB60_11:                              # %if.end
	jmp	.LBB60_46
.LBB60_12:                              # %if.else
	cmpl	$0, -56(%rbp)
	jne	.LBB60_22
# %bb.13:                               # %if.then80
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB60_14:                              # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_16 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB60_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB60_14 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB60_16:                              # %for.cond84
                                        #   Parent Loop BB60_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB60_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB60_16 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB60_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_16
.LBB60_19:                              # %for.end161
                                        #   in Loop: Header=BB60_14 Depth=1
	jmp	.LBB60_20
.LBB60_20:                              # %for.inc162
                                        #   in Loop: Header=BB60_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_14
.LBB60_21:                              # %for.end164
	jmp	.LBB60_45
.LBB60_22:                              # %if.else165
	cmpl	$1, -56(%rbp)
	jne	.LBB60_32
# %bb.23:                               # %if.then167
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB60_24:                              # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_26 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB60_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB60_24 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB60_26:                              # %for.cond171
                                        #   Parent Loop BB60_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB60_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB60_26 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB60_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_26
.LBB60_29:                              # %for.end248
                                        #   in Loop: Header=BB60_24 Depth=1
	jmp	.LBB60_30
.LBB60_30:                              # %for.inc249
                                        #   in Loop: Header=BB60_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_24
.LBB60_31:                              # %for.end251
	jmp	.LBB60_44
.LBB60_32:                              # %if.else252
	cmpl	$2, -56(%rbp)
	jne	.LBB60_42
# %bb.33:                               # %if.then254
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB60_34:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_36 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB60_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB60_34 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB60_36:                              # %for.cond258
                                        #   Parent Loop BB60_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB60_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB60_36 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rsi,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%ax, 2(%rsi,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	(%rax), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movw	%dx, 2(%rdi,%rsi,4)
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addq	$64, %rdi
	movslq	-8(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	addq	%rsi, %rcx
	addq	$64, %rcx
	movslq	-8(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	movw	%dx, 2(%rcx,%rsi,4)
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB60_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_36
.LBB60_39:                              # %for.end407
                                        #   in Loop: Header=BB60_34 Depth=1
	jmp	.LBB60_40
.LBB60_40:                              # %for.inc408
                                        #   in Loop: Header=BB60_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_34
.LBB60_41:                              # %for.end410
	jmp	.LBB60_43
.LBB60_42:                              # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB60_43:                              # %if.end412
	jmp	.LBB60_44
.LBB60_44:                              # %if.end413
	jmp	.LBB60_45
.LBB60_45:                              # %if.end414
	jmp	.LBB60_46
.LBB60_46:                              # %if.end415
	cmpl	$393550447, -68(%rbp)   # imm = 0x17751A6F
	jne	.LBB60_48
.LBB60_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_47
.Lfunc_end60:
	.size	StoreMVBlock8x8.31, .Lfunc_end60-StoreMVBlock8x8.31
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_8x8IntraBlocks.32
.LCPI61_0:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI61_1:
	.quad	4618441417868443648     # double 6
	.text
	.globl	Mode_Decision_for_8x8IntraBlocks.32
	.p2align	4, 0x90
	.type	Mode_Decision_for_8x8IntraBlocks.32,@function
Mode_Decision_for_8x8IntraBlocks.32:    # @Mode_Decision_for_8x8IntraBlocks.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI61_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI61_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$6772359, -28(%rbp)     # imm = 0x675687
	movl	%edi, -24(%rbp)
	vmovsd	%xmm0, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	$0, -16(%rbp)
	vmulsd	-40(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -12(%rbp)
.LBB61_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB61_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB61_1 Depth=1
	movl	-24(%rbp), %edi
	movl	-12(%rbp), %esi
	vmovsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-20(%rbp), %rdx
	callq	Mode_Decision_for_4x4IntraBlocks
	cmpl	$0, %eax
	je	.LBB61_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB61_1 Depth=1
	movl	$1, -16(%rbp)
.LBB61_4:                               # %if.end
                                        #   in Loop: Header=BB61_1 Depth=1
	movl	-20(%rbp), %eax
	movq	-48(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB61_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_1
.LBB61_6:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$6772359, -28(%rbp)     # imm = 0x675687
	jne	.LBB61_8
.LBB61_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_7
.Lfunc_end61:
	.size	Mode_Decision_for_8x8IntraBlocks.32, .Lfunc_end61-Mode_Decision_for_8x8IntraBlocks.32
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorsMB.33   # -- Begin function SetMotionVectorsMB.33
	.p2align	4, 0x90
	.type	SetMotionVectorsMB.33,@function
SetMotionVectorsMB.33:                  # @SetMotionVectorsMB.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1344099033, -72(%rbp)  # imm = 0x501D52D9
	movq	%rdi, -64(%rbp)
	movl	%esi, -68(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -8(%rbp)
.LBB62_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB62_33
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	$0, -4(%rbp)
.LBB62_3:                               # %for.cond3
                                        #   Parent Loop BB62_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB62_31
# %bb.4:                                # %for.body5
                                        #   in Loop: Header=BB62_3 Depth=2
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB62_11
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB62_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB62_11
# %bb.6:                                # %land.lhs.true31
                                        #   in Loop: Header=BB62_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB62_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB62_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB62_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB62_3 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB62_10
.LBB62_9:                               # %cond.false
                                        #   in Loop: Header=BB62_3 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB62_10:                              # %cond.end
                                        #   in Loop: Header=BB62_3 Depth=2
	movq	%rax, -48(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -56(%rbp)
.LBB62_11:                              # %if.end
                                        #   in Loop: Header=BB62_3 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB62_16
# %bb.12:                               # %if.then38
                                        #   in Loop: Header=BB62_3 Depth=2
	cmpl	$0, -52(%rbp)
	jl	.LBB62_14
# %bb.13:                               # %if.then41
                                        #   in Loop: Header=BB62_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB62_15
.LBB62_14:                              # %if.else
                                        #   in Loop: Header=BB62_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB62_15:                              # %if.end89
                                        #   in Loop: Header=BB62_3 Depth=2
	jmp	.LBB62_29
.LBB62_16:                              # %if.else90
                                        #   in Loop: Header=BB62_3 Depth=2
	cmpl	$-1, -52(%rbp)
	jne	.LBB62_18
# %bb.17:                               # %if.then93
                                        #   in Loop: Header=BB62_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB62_28
.LBB62_18:                              # %if.else122
                                        #   in Loop: Header=BB62_3 Depth=2
	cmpl	$0, -52(%rbp)
	jne	.LBB62_20
# %bb.19:                               # %if.then125
                                        #   in Loop: Header=BB62_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB62_27
.LBB62_20:                              # %if.else174
                                        #   in Loop: Header=BB62_3 Depth=2
	cmpl	$1, -52(%rbp)
	jne	.LBB62_22
# %bb.21:                               # %if.then177
                                        #   in Loop: Header=BB62_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB62_26
.LBB62_22:                              # %if.else226
                                        #   in Loop: Header=BB62_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB62_24
# %bb.23:                               # %if.then229
                                        #   in Loop: Header=BB62_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB62_25
.LBB62_24:                              # %if.else298
                                        #   in Loop: Header=BB62_3 Depth=2
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB62_25:                              # %if.end299
                                        #   in Loop: Header=BB62_3 Depth=2
	jmp	.LBB62_26
.LBB62_26:                              # %if.end300
                                        #   in Loop: Header=BB62_3 Depth=2
	jmp	.LBB62_27
.LBB62_27:                              # %if.end301
                                        #   in Loop: Header=BB62_3 Depth=2
	jmp	.LBB62_28
.LBB62_28:                              # %if.end302
                                        #   in Loop: Header=BB62_3 Depth=2
	jmp	.LBB62_29
.LBB62_29:                              # %if.end303
                                        #   in Loop: Header=BB62_3 Depth=2
	jmp	.LBB62_30
.LBB62_30:                              # %for.inc
                                        #   in Loop: Header=BB62_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_3
.LBB62_31:                              # %for.end
                                        #   in Loop: Header=BB62_1 Depth=1
	jmp	.LBB62_32
.LBB62_32:                              # %for.inc304
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_1
.LBB62_33:                              # %for.end306
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB62_55
# %bb.34:                               # %if.then308
	movl	$0, -4(%rbp)
.LBB62_35:                              # %for.cond309
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_37 Depth 2
                                        #       Child Loop BB62_39 Depth 3
                                        #         Child Loop BB62_41 Depth 4
                                        #           Child Loop BB62_43 Depth 5
	cmpl	$4, -4(%rbp)
	jge	.LBB62_54
# %bb.36:                               # %for.body312
                                        #   in Loop: Header=BB62_35 Depth=1
	movl	$0, -8(%rbp)
.LBB62_37:                              # %for.cond313
                                        #   Parent Loop BB62_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_39 Depth 3
                                        #         Child Loop BB62_41 Depth 4
                                        #           Child Loop BB62_43 Depth 5
	cmpl	$4, -8(%rbp)
	jge	.LBB62_52
# %bb.38:                               # %for.body316
                                        #   in Loop: Header=BB62_37 Depth=2
	movl	$0, -20(%rbp)
.LBB62_39:                              # %for.cond317
                                        #   Parent Loop BB62_35 Depth=1
                                        #     Parent Loop BB62_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB62_41 Depth 4
                                        #           Child Loop BB62_43 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB62_50
# %bb.40:                               # %for.body320
                                        #   in Loop: Header=BB62_39 Depth=3
	movl	$0, -24(%rbp)
.LBB62_41:                              # %for.cond321
                                        #   Parent Loop BB62_35 Depth=1
                                        #     Parent Loop BB62_37 Depth=2
                                        #       Parent Loop BB62_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB62_43 Depth 5
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB62_48
# %bb.42:                               # %for.body324
                                        #   in Loop: Header=BB62_41 Depth=4
	movl	$0, -28(%rbp)
.LBB62_43:                              # %for.cond325
                                        #   Parent Loop BB62_35 Depth=1
                                        #     Parent Loop BB62_37 Depth=2
                                        #       Parent Loop BB62_39 Depth=3
                                        #         Parent Loop BB62_41 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$9, -28(%rbp)
	jge	.LBB62_46
# %bb.44:                               # %for.body328
                                        #   in Loop: Header=BB62_43 Depth=5
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.45:                               # %for.inc421
                                        #   in Loop: Header=BB62_43 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB62_43
.LBB62_46:                              # %for.end423
                                        #   in Loop: Header=BB62_41 Depth=4
	jmp	.LBB62_47
.LBB62_47:                              # %for.inc424
                                        #   in Loop: Header=BB62_41 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB62_41
.LBB62_48:                              # %for.end426
                                        #   in Loop: Header=BB62_39 Depth=3
	jmp	.LBB62_49
.LBB62_49:                              # %for.inc427
                                        #   in Loop: Header=BB62_39 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB62_39
.LBB62_50:                              # %for.end429
                                        #   in Loop: Header=BB62_37 Depth=2
	jmp	.LBB62_51
.LBB62_51:                              # %for.inc430
                                        #   in Loop: Header=BB62_37 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_37
.LBB62_52:                              # %for.end432
                                        #   in Loop: Header=BB62_35 Depth=1
	jmp	.LBB62_53
.LBB62_53:                              # %for.inc433
                                        #   in Loop: Header=BB62_35 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_35
.LBB62_54:                              # %for.end435
	jmp	.LBB62_55
.LBB62_55:                              # %if.end436
	cmpl	$1344099033, -72(%rbp)  # imm = 0x501D52D9
	jne	.LBB62_57
.LBB62_56:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_57:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_56
.Lfunc_end62:
	.size	SetMotionVectorsMB.33, .Lfunc_end62-SetMotionVectorsMB.33
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorsMB.34   # -- Begin function SetMotionVectorsMB.34
	.p2align	4, 0x90
	.type	SetMotionVectorsMB.34,@function
SetMotionVectorsMB.34:                  # @SetMotionVectorsMB.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1188696334, -68(%rbp)  # imm = 0x46DA110E
	movq	%rdi, -64(%rbp)
	movl	%esi, -72(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -8(%rbp)
.LBB63_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB63_33
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -4(%rbp)
.LBB63_3:                               # %for.cond3
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB63_31
# %bb.4:                                # %for.body5
                                        #   in Loop: Header=BB63_3 Depth=2
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB63_11
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB63_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB63_11
# %bb.6:                                # %land.lhs.true31
                                        #   in Loop: Header=BB63_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB63_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB63_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB63_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB63_3 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB63_10
.LBB63_9:                               # %cond.false
                                        #   in Loop: Header=BB63_3 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB63_10:                              # %cond.end
                                        #   in Loop: Header=BB63_3 Depth=2
	movq	%rax, -48(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -56(%rbp)
.LBB63_11:                              # %if.end
                                        #   in Loop: Header=BB63_3 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB63_16
# %bb.12:                               # %if.then38
                                        #   in Loop: Header=BB63_3 Depth=2
	cmpl	$0, -52(%rbp)
	jl	.LBB63_14
# %bb.13:                               # %if.then41
                                        #   in Loop: Header=BB63_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB63_15
.LBB63_14:                              # %if.else
                                        #   in Loop: Header=BB63_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB63_15:                              # %if.end89
                                        #   in Loop: Header=BB63_3 Depth=2
	jmp	.LBB63_29
.LBB63_16:                              # %if.else90
                                        #   in Loop: Header=BB63_3 Depth=2
	cmpl	$-1, -52(%rbp)
	jne	.LBB63_18
# %bb.17:                               # %if.then93
                                        #   in Loop: Header=BB63_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB63_28
.LBB63_18:                              # %if.else122
                                        #   in Loop: Header=BB63_3 Depth=2
	cmpl	$0, -52(%rbp)
	jne	.LBB63_20
# %bb.19:                               # %if.then125
                                        #   in Loop: Header=BB63_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB63_27
.LBB63_20:                              # %if.else174
                                        #   in Loop: Header=BB63_3 Depth=2
	cmpl	$1, -52(%rbp)
	jne	.LBB63_22
# %bb.21:                               # %if.then177
                                        #   in Loop: Header=BB63_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB63_26
.LBB63_22:                              # %if.else226
                                        #   in Loop: Header=BB63_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB63_24
# %bb.23:                               # %if.then229
                                        #   in Loop: Header=BB63_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB63_25
.LBB63_24:                              # %if.else298
                                        #   in Loop: Header=BB63_3 Depth=2
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB63_25:                              # %if.end299
                                        #   in Loop: Header=BB63_3 Depth=2
	jmp	.LBB63_26
.LBB63_26:                              # %if.end300
                                        #   in Loop: Header=BB63_3 Depth=2
	jmp	.LBB63_27
.LBB63_27:                              # %if.end301
                                        #   in Loop: Header=BB63_3 Depth=2
	jmp	.LBB63_28
.LBB63_28:                              # %if.end302
                                        #   in Loop: Header=BB63_3 Depth=2
	jmp	.LBB63_29
.LBB63_29:                              # %if.end303
                                        #   in Loop: Header=BB63_3 Depth=2
	jmp	.LBB63_30
.LBB63_30:                              # %for.inc
                                        #   in Loop: Header=BB63_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_3
.LBB63_31:                              # %for.end
                                        #   in Loop: Header=BB63_1 Depth=1
	jmp	.LBB63_32
.LBB63_32:                              # %for.inc304
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_1
.LBB63_33:                              # %for.end306
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB63_55
# %bb.34:                               # %if.then308
	movl	$0, -4(%rbp)
.LBB63_35:                              # %for.cond309
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_37 Depth 2
                                        #       Child Loop BB63_39 Depth 3
                                        #         Child Loop BB63_41 Depth 4
                                        #           Child Loop BB63_43 Depth 5
	cmpl	$4, -4(%rbp)
	jge	.LBB63_54
# %bb.36:                               # %for.body312
                                        #   in Loop: Header=BB63_35 Depth=1
	movl	$0, -8(%rbp)
.LBB63_37:                              # %for.cond313
                                        #   Parent Loop BB63_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_39 Depth 3
                                        #         Child Loop BB63_41 Depth 4
                                        #           Child Loop BB63_43 Depth 5
	cmpl	$4, -8(%rbp)
	jge	.LBB63_52
# %bb.38:                               # %for.body316
                                        #   in Loop: Header=BB63_37 Depth=2
	movl	$0, -20(%rbp)
.LBB63_39:                              # %for.cond317
                                        #   Parent Loop BB63_35 Depth=1
                                        #     Parent Loop BB63_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB63_41 Depth 4
                                        #           Child Loop BB63_43 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB63_50
# %bb.40:                               # %for.body320
                                        #   in Loop: Header=BB63_39 Depth=3
	movl	$0, -24(%rbp)
.LBB63_41:                              # %for.cond321
                                        #   Parent Loop BB63_35 Depth=1
                                        #     Parent Loop BB63_37 Depth=2
                                        #       Parent Loop BB63_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB63_43 Depth 5
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB63_48
# %bb.42:                               # %for.body324
                                        #   in Loop: Header=BB63_41 Depth=4
	movl	$0, -28(%rbp)
.LBB63_43:                              # %for.cond325
                                        #   Parent Loop BB63_35 Depth=1
                                        #     Parent Loop BB63_37 Depth=2
                                        #       Parent Loop BB63_39 Depth=3
                                        #         Parent Loop BB63_41 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$9, -28(%rbp)
	jge	.LBB63_46
# %bb.44:                               # %for.body328
                                        #   in Loop: Header=BB63_43 Depth=5
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.45:                               # %for.inc421
                                        #   in Loop: Header=BB63_43 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB63_43
.LBB63_46:                              # %for.end423
                                        #   in Loop: Header=BB63_41 Depth=4
	jmp	.LBB63_47
.LBB63_47:                              # %for.inc424
                                        #   in Loop: Header=BB63_41 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB63_41
.LBB63_48:                              # %for.end426
                                        #   in Loop: Header=BB63_39 Depth=3
	jmp	.LBB63_49
.LBB63_49:                              # %for.inc427
                                        #   in Loop: Header=BB63_39 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB63_39
.LBB63_50:                              # %for.end429
                                        #   in Loop: Header=BB63_37 Depth=2
	jmp	.LBB63_51
.LBB63_51:                              # %for.inc430
                                        #   in Loop: Header=BB63_37 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_37
.LBB63_52:                              # %for.end432
                                        #   in Loop: Header=BB63_35 Depth=1
	jmp	.LBB63_53
.LBB63_53:                              # %for.inc433
                                        #   in Loop: Header=BB63_35 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_35
.LBB63_54:                              # %for.end435
	jmp	.LBB63_55
.LBB63_55:                              # %if.end436
	cmpl	$1188696334, -68(%rbp)  # imm = 0x46DA110E
	jne	.LBB63_57
.LBB63_56:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_57:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_56
.Lfunc_end63:
	.size	SetMotionVectorsMB.34, .Lfunc_end63-SetMotionVectorsMB.34
	.cfi_endproc
                                        # -- End function
	.globl	set_stored_macroblock_parameters.35 # -- Begin function set_stored_macroblock_parameters.35
	.p2align	4, 0x90
	.type	set_stored_macroblock_parameters.35,@function
set_stored_macroblock_parameters.35:    # @set_stored_macroblock_parameters.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$884747331, -52(%rbp)   # imm = 0x34BC2C43
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB64_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB64_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB64_4
.LBB64_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB64_4
.LBB64_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB64_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_7 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB64_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB64_5 Depth=1
	movl	$0, -4(%rbp)
.LBB64_7:                               # %for.cond9
                                        #   Parent Loop BB64_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB64_12
# %bb.8:                                # %for.body12
                                        #   in Loop: Header=BB64_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-88(%rbp), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB64_10
# %bb.9:                                # %if.then
                                        #   in Loop: Header=BB64_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB64_10:                              # %if.end
                                        #   in Loop: Header=BB64_7 Depth=2
	jmp	.LBB64_11
.LBB64_11:                              # %for.inc
                                        #   in Loop: Header=BB64_7 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_7
.LBB64_12:                              # %for.end
                                        #   in Loop: Header=BB64_5 Depth=1
	jmp	.LBB64_13
.LBB64_13:                              # %for.inc33
                                        #   in Loop: Header=BB64_5 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_5
.LBB64_14:                              # %for.end35
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB64_26
# %bb.15:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB64_16:                              # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_18 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB64_25
# %bb.17:                               # %for.body42
                                        #   in Loop: Header=BB64_16 Depth=1
	movl	$0, -4(%rbp)
.LBB64_18:                              # %for.cond43
                                        #   Parent Loop BB64_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB64_23
# %bb.19:                               # %for.body46
                                        #   in Loop: Header=BB64_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-64(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-64(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB64_21
# %bb.20:                               # %if.then73
                                        #   in Loop: Header=BB64_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB64_21:                              # %if.end92
                                        #   in Loop: Header=BB64_18 Depth=2
	jmp	.LBB64_22
.LBB64_22:                              # %for.inc93
                                        #   in Loop: Header=BB64_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_18
.LBB64_23:                              # %for.end95
                                        #   in Loop: Header=BB64_16 Depth=1
	jmp	.LBB64_24
.LBB64_24:                              # %for.inc96
                                        #   in Loop: Header=BB64_16 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_16
.LBB64_25:                              # %for.end98
	jmp	.LBB64_26
.LBB64_26:                              # %if.end99
	movq	cofAC, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-104(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-96(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movl	cbp, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB64_56
# %bb.27:                               # %if.then104
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movl	cbp, %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	cbp_blk, %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	592(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3348(%rcx)
	movq	-24(%rbp), %rax
	movl	596(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3352(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3344(%rcx)
	movl	$0, -4(%rbp)
.LBB64_28:                              # %for.cond113
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_30 Depth 2
                                        #       Child Loop BB64_32 Depth 3
                                        #         Child Loop BB64_34 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_43
# %bb.29:                               # %for.body117
                                        #   in Loop: Header=BB64_28 Depth=1
	movl	$0, -8(%rbp)
.LBB64_30:                              # %for.cond118
                                        #   Parent Loop BB64_28 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_32 Depth 3
                                        #         Child Loop BB64_34 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB64_41
# %bb.31:                               # %for.body121
                                        #   in Loop: Header=BB64_30 Depth=2
	movl	$0, -12(%rbp)
.LBB64_32:                              # %for.cond122
                                        #   Parent Loop BB64_28 Depth=1
                                        #     Parent Loop BB64_30 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB64_34 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB64_39
# %bb.33:                               # %for.body125
                                        #   in Loop: Header=BB64_32 Depth=3
	movl	$0, -28(%rbp)
.LBB64_34:                              # %for.cond126
                                        #   Parent Loop BB64_28 Depth=1
                                        #     Parent Loop BB64_30 Depth=2
                                        #       Parent Loop BB64_32 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -28(%rbp)
	jge	.LBB64_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB64_34 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc148
                                        #   in Loop: Header=BB64_34 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB64_34
.LBB64_37:                              # %for.end150
                                        #   in Loop: Header=BB64_32 Depth=3
	jmp	.LBB64_38
.LBB64_38:                              # %for.inc151
                                        #   in Loop: Header=BB64_32 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_32
.LBB64_39:                              # %for.end153
                                        #   in Loop: Header=BB64_30 Depth=2
	jmp	.LBB64_40
.LBB64_40:                              # %for.inc154
                                        #   in Loop: Header=BB64_30 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_30
.LBB64_41:                              # %for.end156
                                        #   in Loop: Header=BB64_28 Depth=1
	jmp	.LBB64_42
.LBB64_42:                              # %for.inc157
                                        #   in Loop: Header=BB64_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_28
.LBB64_43:                              # %for.end159
	movl	$0, -4(%rbp)
.LBB64_44:                              # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_46 Depth 2
                                        #       Child Loop BB64_48 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB64_55
# %bb.45:                               # %for.body163
                                        #   in Loop: Header=BB64_44 Depth=1
	movl	$0, -12(%rbp)
.LBB64_46:                              # %for.cond164
                                        #   Parent Loop BB64_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_48 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB64_53
# %bb.47:                               # %for.body167
                                        #   in Loop: Header=BB64_46 Depth=2
	movl	$0, -28(%rbp)
.LBB64_48:                              # %for.cond168
                                        #   Parent Loop BB64_44 Depth=1
                                        #     Parent Loop BB64_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -28(%rbp)
	jge	.LBB64_51
# %bb.49:                               # %for.body171
                                        #   in Loop: Header=BB64_48 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.50:                               # %for.inc186
                                        #   in Loop: Header=BB64_48 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB64_48
.LBB64_51:                              # %for.end188
                                        #   in Loop: Header=BB64_46 Depth=2
	jmp	.LBB64_52
.LBB64_52:                              # %for.inc189
                                        #   in Loop: Header=BB64_46 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_46
.LBB64_53:                              # %for.end191
                                        #   in Loop: Header=BB64_44 Depth=1
	jmp	.LBB64_54
.LBB64_54:                              # %for.inc192
                                        #   in Loop: Header=BB64_44 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_44
.LBB64_55:                              # %for.end194
	jmp	.LBB64_56
.LBB64_56:                              # %if.end195
	movl	$0, -4(%rbp)
.LBB64_57:                              # %for.cond196
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB64_62
# %bb.58:                               # %for.body199
                                        #   in Loop: Header=BB64_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB64_60
# %bb.59:                               # %if.then212
                                        #   in Loop: Header=BB64_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
.LBB64_60:                              # %if.end225
                                        #   in Loop: Header=BB64_57 Depth=1
	jmp	.LBB64_61
.LBB64_61:                              # %for.inc226
                                        #   in Loop: Header=BB64_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_57
.LBB64_62:                              # %for.end228
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB64_64
# %bb.63:                               # %if.then232
	movl	bi_pred_me, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB64_65
.LBB64_64:                              # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB64_65:                              # %if.end234
	cmpl	$8, -32(%rbp)
	jne	.LBB64_69
# %bb.66:                               # %land.lhs.true237
	cmpl	$0, luma_transform_size_8x8_flag
	jne	.LBB64_69
# %bb.67:                               # %land.lhs.true239
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB64_69
# %bb.68:                               # %if.then241
	movl	$1, %edi
	callq	RestoreMV8x8
.LBB64_69:                              # %if.end242
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB64_73
# %bb.70:                               # %land.lhs.true246
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB64_73
# %bb.71:                               # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB64_73
# %bb.72:                               # %if.then253
	movq	-24(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB64_74
.LBB64_73:                              # %if.else254
	movl	luma_transform_size_8x8_flag, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB64_74:                              # %if.end256
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB64_77
# %bb.75:                               # %land.lhs.true261
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB64_77
# %bb.76:                               # %if.then265
	movl	-32(%rbp), %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movq	img, %rdx
	movslq	136(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	140(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
.LBB64_77:                              # %if.end271
	movl	$0, -8(%rbp)
.LBB64_78:                              # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_80 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB64_112
# %bb.79:                               # %for.body275
                                        #   in Loop: Header=BB64_78 Depth=1
	movl	$0, -4(%rbp)
.LBB64_80:                              # %for.cond276
                                        #   Parent Loop BB64_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB64_110
# %bb.81:                               # %for.body279
                                        #   in Loop: Header=BB64_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$1, 488(%rsi,%rax,4)
	je	.LBB64_85
# %bb.82:                               # %lor.lhs.false287
                                        #   in Loop: Header=BB64_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB64_85
# %bb.83:                               # %lor.lhs.false291
                                        #   in Loop: Header=BB64_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB64_85
# %bb.84:                               # %lor.lhs.false295
                                        #   in Loop: Header=BB64_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB64_88
.LBB64_85:                              # %if.then299
                                        #   in Loop: Header=BB64_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB64_87
# %bb.86:                               # %if.then339
                                        #   in Loop: Header=BB64_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB64_87:                              # %if.end345
                                        #   in Loop: Header=BB64_80 Depth=2
	jmp	.LBB64_101
.LBB64_88:                              # %if.else346
                                        #   in Loop: Header=BB64_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB64_97
# %bb.89:                               # %land.lhs.true349
                                        #   in Loop: Header=BB64_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB64_97
# %bb.90:                               # %land.lhs.true359
                                        #   in Loop: Header=BB64_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB64_97
# %bb.91:                               # %if.then363
                                        #   in Loop: Header=BB64_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB64_93
# %bb.92:                               # %cond.true367
                                        #   in Loop: Header=BB64_80 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB64_94
.LBB64_93:                              # %cond.false368
                                        #   in Loop: Header=BB64_80 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB64_94:                              # %cond.end369
                                        #   in Loop: Header=BB64_80 Depth=2
	movq	%rax, -72(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB64_96
# %bb.95:                               # %if.then451
                                        #   in Loop: Header=BB64_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB64_96:                              # %if.end458
                                        #   in Loop: Header=BB64_80 Depth=2
	jmp	.LBB64_100
.LBB64_97:                              # %if.else459
                                        #   in Loop: Header=BB64_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB64_99
# %bb.98:                               # %if.then567
                                        #   in Loop: Header=BB64_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB64_99:                              # %if.end578
                                        #   in Loop: Header=BB64_80 Depth=2
	jmp	.LBB64_100
.LBB64_100:                             # %if.end579
                                        #   in Loop: Header=BB64_80 Depth=2
	jmp	.LBB64_101
.LBB64_101:                             # %if.end580
                                        #   in Loop: Header=BB64_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	je	.LBB64_105
# %bb.102:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB64_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB64_105
# %bb.103:                              # %lor.lhs.false594
                                        #   in Loop: Header=BB64_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB64_105
# %bb.104:                              # %lor.lhs.false598
                                        #   in Loop: Header=BB64_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB64_108
.LBB64_105:                             # %if.then602
                                        #   in Loop: Header=BB64_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB64_107
# %bb.106:                              # %if.then647
                                        #   in Loop: Header=BB64_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB64_107:                             # %if.end654
                                        #   in Loop: Header=BB64_80 Depth=2
	jmp	.LBB64_108
.LBB64_108:                             # %if.end655
                                        #   in Loop: Header=BB64_80 Depth=2
	jmp	.LBB64_109
.LBB64_109:                             # %for.inc656
                                        #   in Loop: Header=BB64_80 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_80
.LBB64_110:                             # %for.end658
                                        #   in Loop: Header=BB64_78 Depth=1
	jmp	.LBB64_111
.LBB64_111:                             # %for.inc659
                                        #   in Loop: Header=BB64_78 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_78
.LBB64_112:                             # %for.end661
	cmpl	$0, -40(%rbp)
	je	.LBB64_142
# %bb.113:                              # %if.then663
	movl	$0, -8(%rbp)
.LBB64_114:                             # %for.cond664
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_116 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB64_141
# %bb.115:                              # %for.body667
                                        #   in Loop: Header=BB64_114 Depth=1
	movl	$0, -4(%rbp)
.LBB64_116:                             # %for.cond668
                                        #   Parent Loop BB64_114 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB64_139
# %bb.117:                              # %for.body671
                                        #   in Loop: Header=BB64_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB64_121
# %bb.118:                              # %lor.lhs.false675
                                        #   in Loop: Header=BB64_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB64_121
# %bb.119:                              # %lor.lhs.false679
                                        #   in Loop: Header=BB64_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB64_121
# %bb.120:                              # %lor.lhs.false683
                                        #   in Loop: Header=BB64_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	jne	.LBB64_124
.LBB64_121:                             # %if.then693
                                        #   in Loop: Header=BB64_116 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB64_123
# %bb.122:                              # %if.then738
                                        #   in Loop: Header=BB64_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB64_123:                             # %if.end745
                                        #   in Loop: Header=BB64_116 Depth=2
	jmp	.LBB64_137
.LBB64_124:                             # %if.else746
                                        #   in Loop: Header=BB64_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB64_133
# %bb.125:                              # %land.lhs.true749
                                        #   in Loop: Header=BB64_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB64_133
# %bb.126:                              # %land.lhs.true759
                                        #   in Loop: Header=BB64_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB64_133
# %bb.127:                              # %if.then763
                                        #   in Loop: Header=BB64_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB64_129
# %bb.128:                              # %cond.true768
                                        #   in Loop: Header=BB64_116 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB64_130
.LBB64_129:                             # %cond.false770
                                        #   in Loop: Header=BB64_116 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB64_130:                             # %cond.end772
                                        #   in Loop: Header=BB64_116 Depth=2
	movq	%rax, -80(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB64_132
# %bb.131:                              # %if.then855
                                        #   in Loop: Header=BB64_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB64_132:                             # %if.end862
                                        #   in Loop: Header=BB64_116 Depth=2
	jmp	.LBB64_136
.LBB64_133:                             # %if.else863
                                        #   in Loop: Header=BB64_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB64_135
# %bb.134:                              # %if.then972
                                        #   in Loop: Header=BB64_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB64_135:                             # %if.end983
                                        #   in Loop: Header=BB64_116 Depth=2
	jmp	.LBB64_136
.LBB64_136:                             # %if.end984
                                        #   in Loop: Header=BB64_116 Depth=2
	jmp	.LBB64_137
.LBB64_137:                             # %if.end985
                                        #   in Loop: Header=BB64_116 Depth=2
	jmp	.LBB64_138
.LBB64_138:                             # %for.inc986
                                        #   in Loop: Header=BB64_116 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_116
.LBB64_139:                             # %for.end988
                                        #   in Loop: Header=BB64_114 Depth=1
	jmp	.LBB64_140
.LBB64_140:                             # %for.inc989
                                        #   in Loop: Header=BB64_114 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_114
.LBB64_141:                             # %for.end991
	jmp	.LBB64_142
.LBB64_142:                             # %if.end992
	movl	best_c_imode, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	best_i16offset, %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB64_152
# %bb.143:                              # %if.then997
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB64_144:                             # %for.cond998
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_146 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB64_151
# %bb.145:                              # %for.body1001
                                        #   in Loop: Header=BB64_144 Depth=1
	movl	$0, -8(%rbp)
.LBB64_146:                             # %for.cond1002
                                        #   Parent Loop BB64_144 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB64_149
# %bb.147:                              # %for.body1005
                                        #   in Loop: Header=BB64_146 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.148:                              # %for.inc1027
                                        #   in Loop: Header=BB64_146 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_146
.LBB64_149:                             # %for.end1030
                                        #   in Loop: Header=BB64_144 Depth=1
	jmp	.LBB64_150
.LBB64_150:                             # %for.inc1031
                                        #   in Loop: Header=BB64_144 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_144
.LBB64_151:                             # %for.end1033
	jmp	.LBB64_175
.LBB64_152:                             # %if.else1034
	cmpl	$9, -32(%rbp)
	je	.LBB64_163
# %bb.153:                              # %land.lhs.true1037
	cmpl	$13, -32(%rbp)
	je	.LBB64_163
# %bb.154:                              # %if.then1040
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB64_155:                             # %for.cond1042
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_157 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_162
# %bb.156:                              # %for.body1047
                                        #   in Loop: Header=BB64_155 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB64_157:                             # %for.cond1049
                                        #   Parent Loop BB64_155 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_160
# %bb.158:                              # %for.body1054
                                        #   in Loop: Header=BB64_157 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.159:                              # %for.inc1062
                                        #   in Loop: Header=BB64_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_157
.LBB64_160:                             # %for.end1065
                                        #   in Loop: Header=BB64_155 Depth=1
	jmp	.LBB64_161
.LBB64_161:                             # %for.inc1066
                                        #   in Loop: Header=BB64_155 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_155
.LBB64_162:                             # %for.end1068
	jmp	.LBB64_174
.LBB64_163:                             # %if.else1069
	cmpl	$9, -32(%rbp)
	jne	.LBB64_173
# %bb.164:                              # %if.then1072
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB64_165:                             # %for.cond1074
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_167 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_172
# %bb.166:                              # %for.body1079
                                        #   in Loop: Header=BB64_165 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB64_167:                             # %for.cond1081
                                        #   Parent Loop BB64_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_170
# %bb.168:                              # %for.body1086
                                        #   in Loop: Header=BB64_167 Depth=2
	movslq	-12(%rbp), %rax
	movl	b4_ipredmode(,%rax,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b4_intra_pred_modes(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.169:                              # %for.inc1098
                                        #   in Loop: Header=BB64_167 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_167
.LBB64_170:                             # %for.end1101
                                        #   in Loop: Header=BB64_165 Depth=1
	jmp	.LBB64_171
.LBB64_171:                             # %for.inc1102
                                        #   in Loop: Header=BB64_165 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_165
.LBB64_172:                             # %for.end1104
	jmp	.LBB64_173
.LBB64_173:                             # %if.end1105
	jmp	.LBB64_174
.LBB64_174:                             # %if.end1106
	jmp	.LBB64_175
.LBB64_175:                             # %if.end1107
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB64_185
# %bb.176:                              # %if.then1111
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB64_177:                             # %for.cond1112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_179 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB64_184
# %bb.178:                              # %for.body1115
                                        #   in Loop: Header=BB64_177 Depth=1
	movl	$0, -8(%rbp)
.LBB64_179:                             # %for.cond1116
                                        #   Parent Loop BB64_177 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB64_182
# %bb.180:                              # %for.body1119
                                        #   in Loop: Header=BB64_179 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$b8_ipredmode8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b8_intra_pred_modes8x8(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.181:                              # %for.inc1138
                                        #   in Loop: Header=BB64_179 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_179
.LBB64_182:                             # %for.end1141
                                        #   in Loop: Header=BB64_177 Depth=1
	jmp	.LBB64_183
.LBB64_183:                             # %for.inc1142
                                        #   in Loop: Header=BB64_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_177
.LBB64_184:                             # %for.end1144
	jmp	.LBB64_185
.LBB64_185:                             # %if.end1145
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB64_195
# %bb.186:                              # %if.then1148
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB64_187:                             # %for.cond1150
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_189 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_194
# %bb.188:                              # %for.body1155
                                        #   in Loop: Header=BB64_187 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB64_189:                             # %for.cond1157
                                        #   Parent Loop BB64_187 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_192
# %bb.190:                              # %for.body1162
                                        #   in Loop: Header=BB64_189 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.191:                              # %for.inc1178
                                        #   in Loop: Header=BB64_189 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_189
.LBB64_192:                             # %for.end1181
                                        #   in Loop: Header=BB64_187 Depth=1
	jmp	.LBB64_193
.LBB64_193:                             # %for.inc1182
                                        #   in Loop: Header=BB64_187 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_187
.LBB64_194:                             # %for.end1184
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3332(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
.LBB64_195:                             # %if.end1189
	movq	-24(%rbp), %rdi
	movl	-40(%rbp), %esi
	callq	SetMotionVectorsMB
	cmpl	$884747331, -52(%rbp)   # imm = 0x34BC2C43
	jne	.LBB64_197
.LBB64_196:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_197:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_196
.Lfunc_end64:
	.size	set_stored_macroblock_parameters.35, .Lfunc_end64-set_stored_macroblock_parameters.35
	.cfi_endproc
                                        # -- End function
	.globl	I16Offset.36            # -- Begin function I16Offset.36
	.p2align	4, 0x90
	.type	I16Offset.36,@function
I16Offset.36:                           # @I16Offset.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$587227689, -20(%rbp)   # imm = 0x23006229
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	-12(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	movl	$13, %eax
	movl	$1, %ebx
	cmovnel	%eax, %ebx
	addl	-16(%rbp), %ebx
	movl	-12(%rbp), %eax
	andl	$48, %eax
	sarl	$2, %eax
	addl	%eax, %ebx
	cmpl	$587227689, -20(%rbp)   # imm = 0x23006229
	jne	.LBB65_2
.LBB65_1:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_1
.Lfunc_end65:
	.size	I16Offset.36, .Lfunc_end65-I16Offset.36
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_4x4IntraBlocks.37
.LCPI66_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI66_1:
	.quad	4616189618054758400     # double 4
	.text
	.globl	Mode_Decision_for_4x4IntraBlocks.37
	.p2align	4, 0x90
	.type	Mode_Decision_for_4x4IntraBlocks.37,@function
Mode_Decision_for_4x4IntraBlocks.37:    # @Mode_Decision_for_4x4IntraBlocks.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$488, %rsp              # imm = 0x1E8
	.cfi_offset %rbx, -24
	vmovsd	.LCPI66_0(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$17053124, -164(%rbp)   # imm = 0x10435C4
	movl	%edi, -32(%rbp)
	movl	%esi, -28(%rbp)
	vmovsd	%xmm0, -144(%rbp)
	movq	%rdx, -152(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -180(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -156(%rbp)
	vmovsd	%xmm1, -128(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rax
	movl	524(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %esi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-232(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-40(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB66_8
# %bb.1:                                # %if.then
	cmpl	$0, -232(%rbp)
	je	.LBB66_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-228(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB66_4
.LBB66_3:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB66_4
.LBB66_4:                               # %cond.end
	movl	%eax, -232(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB66_6
# %bb.5:                                # %cond.true25
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-204(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB66_7
.LBB66_6:                               # %cond.false30
	xorl	%eax, %eax
	jmp	.LBB66_7
.LBB66_7:                               # %cond.end31
	movl	%eax, -208(%rbp)
.LBB66_8:                               # %if.end
	cmpl	$0, -208(%rbp)
	je	.LBB66_10
# %bb.9:                                # %cond.true36
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB66_11
.LBB66_10:                              # %cond.false41
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB66_11
.LBB66_11:                              # %cond.end42
	movl	%eax, -112(%rbp)
	cmpl	$0, -232(%rbp)
	je	.LBB66_13
# %bb.12:                               # %cond.true46
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-216(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-212(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB66_14
.LBB66_13:                              # %cond.false54
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB66_14
.LBB66_14:                              # %cond.end55
	movl	%eax, -116(%rbp)
	cmpl	$0, -112(%rbp)
	jl	.LBB66_16
# %bb.15:                               # %lor.lhs.false
	cmpl	$0, -116(%rbp)
	jge	.LBB66_17
.LBB66_16:                              # %cond.true58
	movl	$2, %eax
	jmp	.LBB66_21
.LBB66_17:                              # %cond.false59
	movl	-112(%rbp), %eax
	cmpl	-116(%rbp), %eax
	jge	.LBB66_19
# %bb.18:                               # %cond.true61
	movl	-112(%rbp), %eax
	jmp	.LBB66_20
.LBB66_19:                              # %cond.false62
	movl	-116(%rbp), %eax
.LBB66_20:                              # %cond.end63
.LBB66_21:                              # %cond.end65
	movl	%eax, -96(%rbp)
	movq	-152(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	-64(%rbp), %edi
	movl	-48(%rbp), %esi
	leaq	-184(%rbp), %rdx
	leaq	-172(%rbp), %rcx
	leaq	-160(%rbp), %r8
	callq	intrapred_luma
	movl	$0, -44(%rbp)
.LBB66_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_49 Depth 2
                                        #       Child Loop BB66_51 Depth 3
                                        #     Child Loop BB66_64 Depth 2
                                        #       Child Loop BB66_66 Depth 3
                                        #     Child Loop BB66_73 Depth 2
                                        #       Child Loop BB66_75 Depth 3
                                        #     Child Loop BB66_81 Depth 2
                                        #       Child Loop BB66_83 Depth 3
                                        #     Child Loop BB66_91 Depth 2
                                        #       Child Loop BB66_93 Depth 3
                                        #     Child Loop BB66_99 Depth 2
                                        #       Child Loop BB66_101 Depth 3
                                        #     Child Loop BB66_107 Depth 2
                                        #       Child Loop BB66_109 Depth 3
                                        #     Child Loop BB66_115 Depth 2
                                        #       Child Loop BB66_117 Depth 3
                                        #     Child Loop BB66_123 Depth 2
                                        #       Child Loop BB66_125 Depth 3
                                        #     Child Loop BB66_131 Depth 2
                                        #       Child Loop BB66_133 Depth 3
                                        #     Child Loop BB66_166 Depth 2
                                        #       Child Loop BB66_168 Depth 3
                                        #     Child Loop BB66_175 Depth 2
                                        #       Child Loop BB66_177 Depth 3
                                        #     Child Loop BB66_183 Depth 2
                                        #       Child Loop BB66_185 Depth 3
                                        #     Child Loop BB66_191 Depth 2
                                        #       Child Loop BB66_193 Depth 3
                                        #     Child Loop BB66_199 Depth 2
                                        #       Child Loop BB66_201 Depth 3
                                        #         Child Loop BB66_203 Depth 4
                                        #     Child Loop BB66_211 Depth 2
                                        #       Child Loop BB66_213 Depth 3
	cmpl	$9, -44(%rbp)
	jge	.LBB66_224
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$2, -44(%rbp)
	movb	$1, %al
	je	.LBB66_32
# %bb.24:                               # %lor.lhs.false69
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB66_27
# %bb.25:                               # %lor.lhs.false71
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$7, -44(%rbp)
	je	.LBB66_27
# %bb.26:                               # %lor.lhs.false73
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB66_28
.LBB66_27:                              # %land.lhs.true
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$0, -172(%rbp)
	movb	$1, %al
	jne	.LBB66_32
.LBB66_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$1, -44(%rbp)
	je	.LBB66_30
# %bb.29:                               # %lor.lhs.false78
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$8, -44(%rbp)
	jne	.LBB66_31
.LBB66_30:                              # %land.lhs.true80
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$0, -184(%rbp)
	movb	$1, %al
	jne	.LBB66_32
.LBB66_31:                              # %lor.rhs
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$0, -160(%rbp)
	setne	%al
.LBB66_32:                              # %lor.end
                                        #   in Loop: Header=BB66_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -168(%rbp)
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB66_34
# %bb.33:                               # %lor.lhs.false84
                                        #   in Loop: Header=BB66_22 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB66_46
.LBB66_34:                              # %if.then86
                                        #   in Loop: Header=BB66_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2400(%rax)
	je	.LBB66_38
# %bb.35:                               # %land.lhs.true88
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB66_37
# %bb.36:                               # %lor.lhs.false90
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB66_38
.LBB66_37:                              # %if.then92
                                        #   in Loop: Header=BB66_22 Depth=1
	jmp	.LBB66_223
.LBB66_38:                              # %if.end93
                                        #   in Loop: Header=BB66_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2404(%rax)
	je	.LBB66_42
# %bb.39:                               # %land.lhs.true95
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$3, -44(%rbp)
	je	.LBB66_41
# %bb.40:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$4, -44(%rbp)
	jne	.LBB66_42
.LBB66_41:                              # %if.then99
                                        #   in Loop: Header=BB66_22 Depth=1
	jmp	.LBB66_223
.LBB66_42:                              # %if.end100
                                        #   in Loop: Header=BB66_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2408(%rax)
	je	.LBB66_45
# %bb.43:                               # %land.lhs.true102
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$5, -44(%rbp)
	jl	.LBB66_45
# %bb.44:                               # %if.then104
                                        #   in Loop: Header=BB66_22 Depth=1
	jmp	.LBB66_223
.LBB66_45:                              # %if.end105
                                        #   in Loop: Header=BB66_22 Depth=1
	jmp	.LBB66_46
.LBB66_46:                              # %if.end106
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$0, -168(%rbp)
	je	.LBB66_222
# %bb.47:                               # %if.then108
                                        #   in Loop: Header=BB66_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB66_62
# %bb.48:                               # %if.then110
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -16(%rbp)
	movl	$0, -108(%rbp)
.LBB66_49:                              # %for.cond111
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_51 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB66_56
# %bb.50:                               # %for.body113
                                        #   in Loop: Header=BB66_49 Depth=2
	movl	$0, -12(%rbp)
.LBB66_51:                              # %for.cond114
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB66_54
# %bb.52:                               # %for.body116
                                        #   in Loop: Header=BB66_51 Depth=3
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-108(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.53:                               # %for.inc
                                        #   in Loop: Header=BB66_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB66_51
.LBB66_54:                              # %for.end
                                        #   in Loop: Header=BB66_49 Depth=2
	jmp	.LBB66_55
.LBB66_55:                              # %for.inc133
                                        #   in Loop: Header=BB66_49 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_49
.LBB66_56:                              # %for.end135
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	-44(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jne	.LBB66_58
# %bb.57:                               # %cond.true138
                                        #   in Loop: Header=BB66_22 Depth=1
	xorl	%eax, %eax
	jmp	.LBB66_59
.LBB66_58:                              # %cond.false139
                                        #   in Loop: Header=BB66_22 Depth=1
	vmovsd	.LCPI66_1(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-144(%rbp), %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB66_59:                              # %cond.end142
                                        #   in Loop: Header=BB66_22 Depth=1
	leaq	-368(%rbp), %rdi
	movl	%eax, -104(%rbp)
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-104(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB66_61
# %bb.60:                               # %if.then147
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB66_61:                              # %if.end148
                                        #   in Loop: Header=BB66_22 Depth=1
	jmp	.LBB66_221
.LBB66_62:                              # %if.else
                                        #   in Loop: Header=BB66_22 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB66_90
# %bb.63:                               # %if.then150
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -16(%rbp)
.LBB66_64:                              # %for.cond151
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_66 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB66_71
# %bb.65:                               # %for.body154
                                        #   in Loop: Header=BB66_64 Depth=2
	movl	$0, -12(%rbp)
.LBB66_66:                              # %for.cond155
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_64 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB66_69
# %bb.67:                               # %for.body158
                                        #   in Loop: Header=BB66_66 Depth=3
	movq	img, %rax
	addq	$184, %rax
	movslq	-44(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc192
                                        #   in Loop: Header=BB66_66 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_66
.LBB66_69:                              # %for.end194
                                        #   in Loop: Header=BB66_64 Depth=2
	jmp	.LBB66_70
.LBB66_70:                              # %for.inc195
                                        #   in Loop: Header=BB66_64 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_64
.LBB66_71:                              # %for.end197
                                        #   in Loop: Header=BB66_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-96(%rbp), %r8d
	leaq	-120(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vmovsd	%xmm0, -136(%rbp)
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB66_89
# %bb.72:                               # %if.then201
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -16(%rbp)
.LBB66_73:                              # %for.cond202
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_75 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB66_80
# %bb.74:                               # %for.body205
                                        #   in Loop: Header=BB66_73 Depth=2
	movl	$0, -12(%rbp)
.LBB66_75:                              # %for.cond206
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_73 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB66_78
# %bb.76:                               # %for.body209
                                        #   in Loop: Header=BB66_75 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.77:                               # %for.inc222
                                        #   in Loop: Header=BB66_75 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_75
.LBB66_78:                              # %for.end224
                                        #   in Loop: Header=BB66_73 Depth=2
	jmp	.LBB66_79
.LBB66_79:                              # %for.inc225
                                        #   in Loop: Header=BB66_73 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_73
.LBB66_80:                              # %for.end227
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -20(%rbp)
.LBB66_81:                              # %for.cond228
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_83 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB66_88
# %bb.82:                               # %for.body231
                                        #   in Loop: Header=BB66_81 Depth=2
	movl	$0, -24(%rbp)
.LBB66_83:                              # %for.cond232
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_81 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB66_86
# %bb.84:                               # %for.body235
                                        #   in Loop: Header=BB66_83 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-20(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.85:                               # %for.inc247
                                        #   in Loop: Header=BB66_83 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB66_83
.LBB66_86:                              # %for.end249
                                        #   in Loop: Header=BB66_81 Depth=2
	jmp	.LBB66_87
.LBB66_87:                              # %for.inc250
                                        #   in Loop: Header=BB66_81 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_81
.LBB66_88:                              # %for.end252
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	-120(%rbp), %eax
	movl	%eax, -92(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB66_89:                              # %if.end253
                                        #   in Loop: Header=BB66_22 Depth=1
	movq	cs_cm, %rdi
	callq	reset_coding_state
	jmp	.LBB66_220
.LBB66_90:                              # %if.else254
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -16(%rbp)
.LBB66_91:                              # %for.cond255
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_93 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB66_98
# %bb.92:                               # %for.body258
                                        #   in Loop: Header=BB66_91 Depth=2
	movl	$0, -12(%rbp)
.LBB66_93:                              # %for.cond259
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_91 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB66_96
# %bb.94:                               # %for.body262
                                        #   in Loop: Header=BB66_93 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.95:                               # %for.inc343
                                        #   in Loop: Header=BB66_93 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_93
.LBB66_96:                              # %for.end345
                                        #   in Loop: Header=BB66_91 Depth=2
	jmp	.LBB66_97
.LBB66_97:                              # %for.inc346
                                        #   in Loop: Header=BB66_91 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_91
.LBB66_98:                              # %for.end348
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -16(%rbp)
.LBB66_99:                              # %for.cond349
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_101 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB66_106
# %bb.100:                              # %for.body352
                                        #   in Loop: Header=BB66_99 Depth=2
	movl	$0, -12(%rbp)
.LBB66_101:                             # %for.cond353
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_99 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB66_104
# %bb.102:                              # %for.body356
                                        #   in Loop: Header=BB66_101 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.103:                              # %for.inc366
                                        #   in Loop: Header=BB66_101 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_101
.LBB66_104:                             # %for.end368
                                        #   in Loop: Header=BB66_99 Depth=2
	jmp	.LBB66_105
.LBB66_105:                             # %for.inc369
                                        #   in Loop: Header=BB66_99 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_99
.LBB66_106:                             # %for.end371
                                        #   in Loop: Header=BB66_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-96(%rbp), %r8d
	leaq	-120(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -100(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB66_107:                             # %for.cond374
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_109 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB66_114
# %bb.108:                              # %for.body377
                                        #   in Loop: Header=BB66_107 Depth=2
	movl	$0, -12(%rbp)
.LBB66_109:                             # %for.cond378
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB66_112
# %bb.110:                              # %for.body381
                                        #   in Loop: Header=BB66_109 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc400
                                        #   in Loop: Header=BB66_109 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_109
.LBB66_112:                             # %for.end402
                                        #   in Loop: Header=BB66_107 Depth=2
	jmp	.LBB66_113
.LBB66_113:                             # %for.inc403
                                        #   in Loop: Header=BB66_107 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_107
.LBB66_114:                             # %for.end405
                                        #   in Loop: Header=BB66_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-32(%rbp), %edi
	addl	$4, %edi
	movl	-28(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-100(%rbp), %eax
	movl	%eax, -100(%rbp)
	movl	$0, -16(%rbp)
.LBB66_115:                             # %for.cond409
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_117 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB66_122
# %bb.116:                              # %for.body412
                                        #   in Loop: Header=BB66_115 Depth=2
	movl	$0, -12(%rbp)
.LBB66_117:                             # %for.cond413
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB66_120
# %bb.118:                              # %for.body416
                                        #   in Loop: Header=BB66_117 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc435
                                        #   in Loop: Header=BB66_117 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_117
.LBB66_120:                             # %for.end437
                                        #   in Loop: Header=BB66_115 Depth=2
	jmp	.LBB66_121
.LBB66_121:                             # %for.inc438
                                        #   in Loop: Header=BB66_115 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_115
.LBB66_122:                             # %for.end440
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	-32(%rbp), %edi
	addl	$8, %edi
	movl	-28(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-100(%rbp), %eax
	movl	%eax, -100(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB66_123:                             # %for.cond444
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_125 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB66_130
# %bb.124:                              # %for.body447
                                        #   in Loop: Header=BB66_123 Depth=2
	movl	$0, -12(%rbp)
.LBB66_125:                             # %for.cond448
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB66_128
# %bb.126:                              # %for.body451
                                        #   in Loop: Header=BB66_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.127:                              # %for.inc461
                                        #   in Loop: Header=BB66_125 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_125
.LBB66_128:                             # %for.end463
                                        #   in Loop: Header=BB66_123 Depth=2
	jmp	.LBB66_129
.LBB66_129:                             # %for.inc464
                                        #   in Loop: Header=BB66_123 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_123
.LBB66_130:                             # %for.end466
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -16(%rbp)
.LBB66_131:                             # %for.cond467
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_133 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB66_165
# %bb.132:                              # %for.body470
                                        #   in Loop: Header=BB66_131 Depth=2
	movl	$0, -12(%rbp)
.LBB66_133:                             # %for.cond471
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_131 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB66_163
# %bb.134:                              # %for.body474
                                        #   in Loop: Header=BB66_133 Depth=3
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -72(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -68(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB66_136
# %bb.135:                              # %cond.true515
                                        #   in Loop: Header=BB66_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB66_137
.LBB66_136:                             # %cond.false516
                                        #   in Loop: Header=BB66_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB66_137:                             # %cond.end529
                                        #   in Loop: Header=BB66_133 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB66_139
# %bb.138:                              # %cond.true533
                                        #   in Loop: Header=BB66_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB66_143
.LBB66_139:                             # %cond.false535
                                        #   in Loop: Header=BB66_133 Depth=3
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB66_141
# %bb.140:                              # %cond.true550
                                        #   in Loop: Header=BB66_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB66_142
.LBB66_141:                             # %cond.false551
                                        #   in Loop: Header=BB66_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB66_142:                             # %cond.end564
                                        #   in Loop: Header=BB66_133 Depth=3
.LBB66_143:                             # %cond.end566
                                        #   in Loop: Header=BB66_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-44(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB66_145
# %bb.144:                              # %cond.true587
                                        #   in Loop: Header=BB66_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB66_146
.LBB66_145:                             # %cond.false588
                                        #   in Loop: Header=BB66_133 Depth=3
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB66_146:                             # %cond.end598
                                        #   in Loop: Header=BB66_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB66_148
# %bb.147:                              # %cond.true602
                                        #   in Loop: Header=BB66_133 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_152
.LBB66_148:                             # %cond.false604
                                        #   in Loop: Header=BB66_133 Depth=3
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB66_150
# %bb.149:                              # %cond.true616
                                        #   in Loop: Header=BB66_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB66_151
.LBB66_150:                             # %cond.false617
                                        #   in Loop: Header=BB66_133 Depth=3
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB66_151:                             # %cond.end627
                                        #   in Loop: Header=BB66_133 Depth=3
.LBB66_152:                             # %cond.end629
                                        #   in Loop: Header=BB66_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB66_154
# %bb.153:                              # %cond.true654
                                        #   in Loop: Header=BB66_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB66_155
.LBB66_154:                             # %cond.false655
                                        #   in Loop: Header=BB66_133 Depth=3
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB66_155:                             # %cond.end668
                                        #   in Loop: Header=BB66_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB66_157
# %bb.156:                              # %cond.true672
                                        #   in Loop: Header=BB66_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB66_161
.LBB66_157:                             # %cond.false674
                                        #   in Loop: Header=BB66_133 Depth=3
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB66_159
# %bb.158:                              # %cond.true689
                                        #   in Loop: Header=BB66_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB66_160
.LBB66_159:                             # %cond.false690
                                        #   in Loop: Header=BB66_133 Depth=3
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB66_160:                             # %cond.end703
                                        #   in Loop: Header=BB66_133 Depth=3
.LBB66_161:                             # %cond.end705
                                        #   in Loop: Header=BB66_133 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.162:                              # %for.inc716
                                        #   in Loop: Header=BB66_133 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_133
.LBB66_163:                             # %for.end718
                                        #   in Loop: Header=BB66_131 Depth=2
	jmp	.LBB66_164
.LBB66_164:                             # %for.inc719
                                        #   in Loop: Header=BB66_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_131
.LBB66_165:                             # %for.end721
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -88(%rbp)
	movl	$0, -20(%rbp)
.LBB66_166:                             # %for.cond722
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_168 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB66_173
# %bb.167:                              # %for.body725
                                        #   in Loop: Header=BB66_166 Depth=2
	movl	-64(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB66_168:                             # %for.cond726
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_166 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-24(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_171
# %bb.169:                              # %for.body730
                                        #   in Loop: Header=BB66_168 Depth=3
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgY_org, %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
# %bb.170:                              # %for.inc829
                                        #   in Loop: Header=BB66_168 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB66_168
.LBB66_171:                             # %for.end831
                                        #   in Loop: Header=BB66_166 Depth=2
	jmp	.LBB66_172
.LBB66_172:                             # %for.inc832
                                        #   in Loop: Header=BB66_166 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_166
.LBB66_173:                             # %for.end834
                                        #   in Loop: Header=BB66_22 Depth=1
	vcvtsi2sdl	-88(%rbp), %xmm0, %xmm0
	vmovsd	-144(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-100(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -136(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB66_219
# %bb.174:                              # %if.then841
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -16(%rbp)
.LBB66_175:                             # %for.cond842
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_177 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB66_182
# %bb.176:                              # %for.body845
                                        #   in Loop: Header=BB66_175 Depth=2
	movl	$0, -12(%rbp)
.LBB66_177:                             # %for.cond846
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_175 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB66_180
# %bb.178:                              # %for.body849
                                        #   in Loop: Header=BB66_177 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.179:                              # %for.inc863
                                        #   in Loop: Header=BB66_177 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_177
.LBB66_180:                             # %for.end865
                                        #   in Loop: Header=BB66_175 Depth=2
	jmp	.LBB66_181
.LBB66_181:                             # %for.inc866
                                        #   in Loop: Header=BB66_175 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_175
.LBB66_182:                             # %for.end868
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -16(%rbp)
.LBB66_183:                             # %for.cond869
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_185 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB66_190
# %bb.184:                              # %for.body872
                                        #   in Loop: Header=BB66_183 Depth=2
	movl	$0, -12(%rbp)
.LBB66_185:                             # %for.cond873
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_183 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB66_188
# %bb.186:                              # %for.body876
                                        #   in Loop: Header=BB66_185 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-32(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	movabsq	$cofAC4x4_chroma, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.187:                              # %for.inc891
                                        #   in Loop: Header=BB66_185 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_185
.LBB66_188:                             # %for.end893
                                        #   in Loop: Header=BB66_183 Depth=2
	jmp	.LBB66_189
.LBB66_189:                             # %for.inc894
                                        #   in Loop: Header=BB66_183 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_183
.LBB66_190:                             # %for.end896
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -16(%rbp)
.LBB66_191:                             # %for.cond897
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_193 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB66_198
# %bb.192:                              # %for.body900
                                        #   in Loop: Header=BB66_191 Depth=2
	movl	$0, -12(%rbp)
.LBB66_193:                             # %for.cond901
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_191 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB66_196
# %bb.194:                              # %for.body904
                                        #   in Loop: Header=BB66_193 Depth=3
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-32(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	imulq	$72, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.195:                              # %for.inc919
                                        #   in Loop: Header=BB66_193 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_193
.LBB66_196:                             # %for.end921
                                        #   in Loop: Header=BB66_191 Depth=2
	jmp	.LBB66_197
.LBB66_197:                             # %for.inc922
                                        #   in Loop: Header=BB66_191 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_191
.LBB66_198:                             # %for.end924
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -12(%rbp)
.LBB66_199:                             # %for.cond925
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_201 Depth 3
                                        #         Child Loop BB66_203 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB66_210
# %bb.200:                              # %for.body928
                                        #   in Loop: Header=BB66_199 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movl	$0, -20(%rbp)
.LBB66_201:                             # %for.cond985
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_199 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB66_203 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB66_208
# %bb.202:                              # %for.body988
                                        #   in Loop: Header=BB66_201 Depth=3
	movl	$0, -24(%rbp)
.LBB66_203:                             # %for.cond989
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_199 Depth=2
                                        #       Parent Loop BB66_201 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -24(%rbp)
	jge	.LBB66_206
# %bb.204:                              # %for.body992
                                        #   in Loop: Header=BB66_203 Depth=4
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-496(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.205:                              # %for.inc1009
                                        #   in Loop: Header=BB66_203 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB66_203
.LBB66_206:                             # %for.end1011
                                        #   in Loop: Header=BB66_201 Depth=3
	jmp	.LBB66_207
.LBB66_207:                             # %for.inc1012
                                        #   in Loop: Header=BB66_201 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_201
.LBB66_208:                             # %for.end1014
                                        #   in Loop: Header=BB66_199 Depth=2
	jmp	.LBB66_209
.LBB66_209:                             # %for.inc1015
                                        #   in Loop: Header=BB66_199 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_199
.LBB66_210:                             # %for.end1017
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -20(%rbp)
.LBB66_211:                             # %for.cond1018
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_213 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB66_218
# %bb.212:                              # %for.body1021
                                        #   in Loop: Header=BB66_211 Depth=2
	movl	$0, -24(%rbp)
.LBB66_213:                             # %for.cond1022
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB66_216
# %bb.214:                              # %for.body1025
                                        #   in Loop: Header=BB66_213 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-20(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.215:                              # %for.inc1038
                                        #   in Loop: Header=BB66_213 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB66_213
.LBB66_216:                             # %for.end1040
                                        #   in Loop: Header=BB66_211 Depth=2
	jmp	.LBB66_217
.LBB66_217:                             # %for.inc1041
                                        #   in Loop: Header=BB66_211 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_211
.LBB66_218:                             # %for.end1043
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	-120(%rbp), %eax
	movl	%eax, -92(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB66_219:                             # %if.end1044
                                        #   in Loop: Header=BB66_22 Depth=1
	jmp	.LBB66_220
.LBB66_220:                             # %if.end1045
                                        #   in Loop: Header=BB66_22 Depth=1
	jmp	.LBB66_221
.LBB66_221:                             # %if.end1046
                                        #   in Loop: Header=BB66_22 Depth=1
	jmp	.LBB66_222
.LBB66_222:                             # %if.end1047
                                        #   in Loop: Header=BB66_22 Depth=1
	jmp	.LBB66_223
.LBB66_223:                             # %for.inc1048
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB66_22
.LBB66_224:                             # %for.end1050
	movl	-60(%rbp), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-180(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-156(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-96(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB66_226
# %bb.225:                              # %cond.true1058
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB66_230
.LBB66_226:                             # %cond.false1059
	movl	-60(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB66_228
# %bb.227:                              # %cond.true1062
	movl	-60(%rbp), %eax
	jmp	.LBB66_229
.LBB66_228:                             # %cond.false1063
	movl	-60(%rbp), %eax
	subl	$1, %eax
.LBB66_229:                             # %cond.end1065
.LBB66_230:                             # %cond.end1067
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movl	-32(%rbp), %edx
	shll	$2, %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, 332(%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB66_318
# %bb.231:                              # %if.then1079
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB66_241
# %bb.232:                              # %if.then1082
	movl	$0, -16(%rbp)
.LBB66_233:                             # %for.cond1083
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_235 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB66_240
# %bb.234:                              # %for.body1086
                                        #   in Loop: Header=BB66_233 Depth=1
	movl	$0, -12(%rbp)
.LBB66_235:                             # %for.cond1087
                                        #   Parent Loop BB66_233 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB66_238
# %bb.236:                              # %for.body1090
                                        #   in Loop: Header=BB66_235 Depth=2
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.237:                              # %for.inc1126
                                        #   in Loop: Header=BB66_235 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_235
.LBB66_238:                             # %for.end1128
                                        #   in Loop: Header=BB66_233 Depth=1
	jmp	.LBB66_239
.LBB66_239:                             # %for.inc1129
                                        #   in Loop: Header=BB66_233 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_233
.LBB66_240:                             # %for.end1131
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	leaq	-176(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -92(%rbp)
	jmp	.LBB66_317
.LBB66_241:                             # %if.else1133
	movl	$0, -16(%rbp)
.LBB66_242:                             # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_244 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB66_249
# %bb.243:                              # %for.body1137
                                        #   in Loop: Header=BB66_242 Depth=1
	movl	$0, -12(%rbp)
.LBB66_244:                             # %for.cond1138
                                        #   Parent Loop BB66_242 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB66_247
# %bb.245:                              # %for.body1141
                                        #   in Loop: Header=BB66_244 Depth=2
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.246:                              # %for.inc1224
                                        #   in Loop: Header=BB66_244 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_244
.LBB66_247:                             # %for.end1226
                                        #   in Loop: Header=BB66_242 Depth=1
	jmp	.LBB66_248
.LBB66_248:                             # %for.inc1227
                                        #   in Loop: Header=BB66_242 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_242
.LBB66_249:                             # %for.end1229
	movl	$0, -16(%rbp)
.LBB66_250:                             # %for.cond1230
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_252 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB66_257
# %bb.251:                              # %for.body1233
                                        #   in Loop: Header=BB66_250 Depth=1
	movl	$0, -12(%rbp)
.LBB66_252:                             # %for.cond1234
                                        #   Parent Loop BB66_250 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB66_255
# %bb.253:                              # %for.body1237
                                        #   in Loop: Header=BB66_252 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.254:                              # %for.inc1247
                                        #   in Loop: Header=BB66_252 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_252
.LBB66_255:                             # %for.end1249
                                        #   in Loop: Header=BB66_250 Depth=1
	jmp	.LBB66_256
.LBB66_256:                             # %for.inc1250
                                        #   in Loop: Header=BB66_250 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_250
.LBB66_257:                             # %for.end1252
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	leaq	-176(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -92(%rbp)
	movl	$0, -16(%rbp)
.LBB66_258:                             # %for.cond1254
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_260 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB66_265
# %bb.259:                              # %for.body1257
                                        #   in Loop: Header=BB66_258 Depth=1
	movl	$0, -12(%rbp)
.LBB66_260:                             # %for.cond1258
                                        #   Parent Loop BB66_258 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB66_263
# %bb.261:                              # %for.body1261
                                        #   in Loop: Header=BB66_260 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.262:                              # %for.inc1280
                                        #   in Loop: Header=BB66_260 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_260
.LBB66_263:                             # %for.end1282
                                        #   in Loop: Header=BB66_258 Depth=1
	jmp	.LBB66_264
.LBB66_264:                             # %for.inc1283
                                        #   in Loop: Header=BB66_258 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_258
.LBB66_265:                             # %for.end1285
	movl	-32(%rbp), %esi
	addl	$4, %esi
	movl	-28(%rbp), %edx
	xorl	%edi, %edi
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%edx, %esi
	shll	$1, %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %esi
	shll	$1, %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rbx,%rax,4)
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level_temp, %rsi
	addq	%rax, %rsi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rsi,%rax,4), %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%rbx,%rax,4)
	movl	$0, -16(%rbp)
.LBB66_266:                             # %for.cond1324
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_268 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB66_273
# %bb.267:                              # %for.body1327
                                        #   in Loop: Header=BB66_266 Depth=1
	movl	$0, -12(%rbp)
.LBB66_268:                             # %for.cond1328
                                        #   Parent Loop BB66_266 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB66_271
# %bb.269:                              # %for.body1331
                                        #   in Loop: Header=BB66_268 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.270:                              # %for.inc1350
                                        #   in Loop: Header=BB66_268 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_268
.LBB66_271:                             # %for.end1352
                                        #   in Loop: Header=BB66_266 Depth=1
	jmp	.LBB66_272
.LBB66_272:                             # %for.inc1353
                                        #   in Loop: Header=BB66_266 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_266
.LBB66_273:                             # %for.end1355
	movl	-32(%rbp), %esi
	addl	$8, %esi
	movl	-28(%rbp), %edx
	movl	$1, %edi
	callq	dct_chroma4x4
	movl	%eax, %r9d
	movabsq	$dc_level, %r8
	addq	$64, %r8
	movabsq	$dc_level_temp, %rdi
	addq	$64, %rdi
	movabsq	$cbp_chroma_block, %rcx
	addq	$64, %rcx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%r9d, (%rcx,%rax,4)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%r8,%rax,4)
	movl	$0, -16(%rbp)
.LBB66_274:                             # %for.cond1394
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_276 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB66_281
# %bb.275:                              # %for.body1397
                                        #   in Loop: Header=BB66_274 Depth=1
	movl	$0, -12(%rbp)
.LBB66_276:                             # %for.cond1398
                                        #   Parent Loop BB66_274 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB66_279
# %bb.277:                              # %for.body1401
                                        #   in Loop: Header=BB66_276 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.278:                              # %for.inc1411
                                        #   in Loop: Header=BB66_276 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_276
.LBB66_279:                             # %for.end1413
                                        #   in Loop: Header=BB66_274 Depth=1
	jmp	.LBB66_280
.LBB66_280:                             # %for.inc1414
                                        #   in Loop: Header=BB66_274 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_274
.LBB66_281:                             # %for.end1416
	movl	$0, -16(%rbp)
.LBB66_282:                             # %for.cond1417
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_284 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB66_316
# %bb.283:                              # %for.body1420
                                        #   in Loop: Header=BB66_282 Depth=1
	movl	$0, -12(%rbp)
.LBB66_284:                             # %for.cond1421
                                        #   Parent Loop BB66_282 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB66_314
# %bb.285:                              # %for.body1424
                                        #   in Loop: Header=BB66_284 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -72(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -68(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB66_287
# %bb.286:                              # %cond.true1466
                                        #   in Loop: Header=BB66_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB66_288
.LBB66_287:                             # %cond.false1467
                                        #   in Loop: Header=BB66_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB66_288:                             # %cond.end1480
                                        #   in Loop: Header=BB66_284 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB66_290
# %bb.289:                              # %cond.true1484
                                        #   in Loop: Header=BB66_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB66_294
.LBB66_290:                             # %cond.false1486
                                        #   in Loop: Header=BB66_284 Depth=2
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB66_292
# %bb.291:                              # %cond.true1501
                                        #   in Loop: Header=BB66_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB66_293
.LBB66_292:                             # %cond.false1502
                                        #   in Loop: Header=BB66_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB66_293:                             # %cond.end1515
                                        #   in Loop: Header=BB66_284 Depth=2
.LBB66_294:                             # %cond.end1517
                                        #   in Loop: Header=BB66_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-60(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB66_296
# %bb.295:                              # %cond.true1540
                                        #   in Loop: Header=BB66_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB66_297
.LBB66_296:                             # %cond.false1541
                                        #   in Loop: Header=BB66_284 Depth=2
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB66_297:                             # %cond.end1551
                                        #   in Loop: Header=BB66_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB66_299
# %bb.298:                              # %cond.true1555
                                        #   in Loop: Header=BB66_284 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_303
.LBB66_299:                             # %cond.false1557
                                        #   in Loop: Header=BB66_284 Depth=2
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB66_301
# %bb.300:                              # %cond.true1569
                                        #   in Loop: Header=BB66_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB66_302
.LBB66_301:                             # %cond.false1570
                                        #   in Loop: Header=BB66_284 Depth=2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB66_302:                             # %cond.end1580
                                        #   in Loop: Header=BB66_284 Depth=2
.LBB66_303:                             # %cond.end1582
                                        #   in Loop: Header=BB66_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB66_305
# %bb.304:                              # %cond.true1607
                                        #   in Loop: Header=BB66_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB66_306
.LBB66_305:                             # %cond.false1608
                                        #   in Loop: Header=BB66_284 Depth=2
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB66_306:                             # %cond.end1621
                                        #   in Loop: Header=BB66_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB66_308
# %bb.307:                              # %cond.true1625
                                        #   in Loop: Header=BB66_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB66_312
.LBB66_308:                             # %cond.false1627
                                        #   in Loop: Header=BB66_284 Depth=2
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB66_310
# %bb.309:                              # %cond.true1642
                                        #   in Loop: Header=BB66_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB66_311
.LBB66_310:                             # %cond.false1643
                                        #   in Loop: Header=BB66_284 Depth=2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB66_311:                             # %cond.end1656
                                        #   in Loop: Header=BB66_284 Depth=2
.LBB66_312:                             # %cond.end1658
                                        #   in Loop: Header=BB66_284 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.313:                              # %for.inc1669
                                        #   in Loop: Header=BB66_284 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_284
.LBB66_314:                             # %for.end1671
                                        #   in Loop: Header=BB66_282 Depth=1
	jmp	.LBB66_315
.LBB66_315:                             # %for.inc1672
                                        #   in Loop: Header=BB66_282 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_282
.LBB66_316:                             # %for.end1674
	jmp	.LBB66_317
.LBB66_317:                             # %if.end1675
	jmp	.LBB66_367
.LBB66_318:                             # %if.else1676
	movl	$0, -16(%rbp)
.LBB66_319:                             # %for.cond1677
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_321 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB66_326
# %bb.320:                              # %for.body1680
                                        #   in Loop: Header=BB66_319 Depth=1
	movl	$0, -12(%rbp)
.LBB66_321:                             # %for.cond1681
                                        #   Parent Loop BB66_319 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB66_324
# %bb.322:                              # %for.body1684
                                        #   in Loop: Header=BB66_321 Depth=2
	movq	cofAC4x4, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.323:                              # %for.inc1698
                                        #   in Loop: Header=BB66_321 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_321
.LBB66_324:                             # %for.end1700
                                        #   in Loop: Header=BB66_319 Depth=1
	jmp	.LBB66_325
.LBB66_325:                             # %for.inc1701
                                        #   in Loop: Header=BB66_319 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_319
.LBB66_326:                             # %for.end1703
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB66_344
# %bb.327:                              # %if.then1706
	movl	$0, -16(%rbp)
.LBB66_328:                             # %for.cond1707
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_330 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB66_335
# %bb.329:                              # %for.body1710
                                        #   in Loop: Header=BB66_328 Depth=1
	movl	$0, -12(%rbp)
.LBB66_330:                             # %for.cond1711
                                        #   Parent Loop BB66_328 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB66_333
# %bb.331:                              # %for.body1714
                                        #   in Loop: Header=BB66_330 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$72, %rax, %rax
	movabsq	$cofAC4x4_chroma, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-32(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.332:                              # %for.inc1729
                                        #   in Loop: Header=BB66_330 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_330
.LBB66_333:                             # %for.end1731
                                        #   in Loop: Header=BB66_328 Depth=1
	jmp	.LBB66_334
.LBB66_334:                             # %for.inc1732
                                        #   in Loop: Header=BB66_328 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_328
.LBB66_335:                             # %for.end1734
	movl	$0, -16(%rbp)
.LBB66_336:                             # %for.cond1735
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_338 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB66_343
# %bb.337:                              # %for.body1738
                                        #   in Loop: Header=BB66_336 Depth=1
	movl	$0, -12(%rbp)
.LBB66_338:                             # %for.cond1739
                                        #   Parent Loop BB66_336 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB66_341
# %bb.339:                              # %for.body1742
                                        #   in Loop: Header=BB66_338 Depth=2
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-32(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.340:                              # %for.inc1757
                                        #   in Loop: Header=BB66_338 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_338
.LBB66_341:                             # %for.end1759
                                        #   in Loop: Header=BB66_336 Depth=1
	jmp	.LBB66_342
.LBB66_342:                             # %for.inc1760
                                        #   in Loop: Header=BB66_336 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_336
.LBB66_343:                             # %for.end1762
	jmp	.LBB66_344
.LBB66_344:                             # %if.end1763
	movl	$0, -20(%rbp)
.LBB66_345:                             # %for.cond1764
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_347 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB66_352
# %bb.346:                              # %for.body1767
                                        #   in Loop: Header=BB66_345 Depth=1
	movl	$0, -24(%rbp)
.LBB66_347:                             # %for.cond1768
                                        #   Parent Loop BB66_345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB66_350
# %bb.348:                              # %for.body1771
                                        #   in Loop: Header=BB66_347 Depth=2
	movslq	-20(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.349:                              # %for.inc1798
                                        #   in Loop: Header=BB66_347 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB66_347
.LBB66_350:                             # %for.end1800
                                        #   in Loop: Header=BB66_345 Depth=1
	jmp	.LBB66_351
.LBB66_351:                             # %for.inc1801
                                        #   in Loop: Header=BB66_345 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_345
.LBB66_352:                             # %for.end1803
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB66_366
# %bb.353:                              # %if.then1806
	movl	$0, -12(%rbp)
.LBB66_354:                             # %for.cond1807
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_356 Depth 2
                                        #       Child Loop BB66_358 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB66_365
# %bb.355:                              # %for.body1810
                                        #   in Loop: Header=BB66_354 Depth=1
	movl	$0, -20(%rbp)
.LBB66_356:                             # %for.cond1811
                                        #   Parent Loop BB66_354 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_358 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB66_363
# %bb.357:                              # %for.body1814
                                        #   in Loop: Header=BB66_356 Depth=2
	movl	$0, -24(%rbp)
.LBB66_358:                             # %for.cond1815
                                        #   Parent Loop BB66_354 Depth=1
                                        #     Parent Loop BB66_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB66_361
# %bb.359:                              # %for.body1818
                                        #   in Loop: Header=BB66_358 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	leaq	-496(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.360:                              # %for.inc1835
                                        #   in Loop: Header=BB66_358 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB66_358
.LBB66_361:                             # %for.end1837
                                        #   in Loop: Header=BB66_356 Depth=2
	jmp	.LBB66_362
.LBB66_362:                             # %for.inc1838
                                        #   in Loop: Header=BB66_356 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_356
.LBB66_363:                             # %for.end1840
                                        #   in Loop: Header=BB66_354 Depth=1
	jmp	.LBB66_364
.LBB66_364:                             # %for.inc1841
                                        #   in Loop: Header=BB66_354 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_354
.LBB66_365:                             # %for.end1843
	jmp	.LBB66_366
.LBB66_366:                             # %if.end1844
	jmp	.LBB66_367
.LBB66_367:                             # %if.end1845
	movl	-92(%rbp), %ebx
	cmpl	$17053124, -164(%rbp)   # imm = 0x10435C4
	jne	.LBB66_369
.LBB66_368:
	movl	%ebx, %eax
	addq	$488, %rsp              # imm = 0x1E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_369:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_368
.Lfunc_end66:
	.size	Mode_Decision_for_4x4IntraBlocks.37, .Lfunc_end66-Mode_Decision_for_4x4IntraBlocks.37
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_8x8blocks.38
.LCPI67_0:
	.quad	4906019910204099648     # double 1.0E+20
	.text
	.globl	RDCost_for_8x8blocks.38
	.p2align	4, 0x90
	.type	RDCost_for_8x8blocks.38,@function
RDCost_for_8x8blocks.38:                # @RDCost_for_8x8blocks.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movw	16(%rbp), %ax
	xorl	%r10d, %r10d
	movl	$2063419165, -172(%rbp) # imm = 0x7AFD471D
	movq	%rdi, -144(%rbp)
	movq	%rsi, -208(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movl	%edx, -40(%rbp)
	movl	%ecx, -36(%rbp)
	movw	%r8w, -18(%rbp)
	movw	%r9w, -42(%rbp)
	movl	$0, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -124(%rbp)
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -52(%rbp)
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -156(%rbp)
	cmpl	$0, -156(%rbp)
	je	.LBB67_2
# %bb.1:                                # %land.rhs
	cmpl	$0, -36(%rbp)
	sete	%r10b
.LBB67_2:                               # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -120(%rbp)
	movl	-36(%rbp), %edi
	movswl	-18(%rbp), %esi
	callq	B8Mode2Value
	movl	%eax, -128(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-112(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -184(%rbp)
	movq	-112(%rbp), %rax
	movl	$0, 580(%rax)
	cmpl	$0, -120(%rbp)
	je	.LBB67_10
# %bb.3:                                # %if.then
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB67_5
# %bb.4:                                # %if.then20
	vmovsd	.LCPI67_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	%xmm0, -200(%rbp)
	jmp	.LBB67_139
.LBB67_5:                               # %if.else
	xorl	%r8d, %r8d
	movq	-208(%rbp), %rsi
	movl	-40(%rbp), %edx
	movq	direct_pdir, %rcx
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rcx,%rdi,8), %rcx
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movw	(%rcx,%rdi,2), %r9w
	movq	direct_ref_idx, %rdi
	movq	(%rdi), %rdi
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-32(%rbp), %eax
	cltq
	movq	(%rdi,%rax,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %eax
	cmpl	%eax, %r8d
	jle	.LBB67_7
# %bb.6:                                # %cond.true
	xorl	%r10d, %r10d
	jmp	.LBB67_8
.LBB67_7:                               # %cond.false
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rax,%rdi,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %r10d
.LBB67_8:                               # %cond.end
	movq	direct_ref_idx, %rdi
	movq	8(%rdi), %rdi
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rdi,%rcx,8), %r11
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rbx
	leaq	-124(%rbp), %rdi
	movswl	%r9w, %ecx
	movl	$0, %r8d
	movl	$0, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	(%r11,%rbx,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
# %bb.9:                                # %if.end
	jmp	.LBB67_19
.LBB67_10:                              # %if.else62
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB67_12
# %bb.11:                               # %lor.lhs.false
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB67_13
.LBB67_12:                              # %cond.true69
	movl	-36(%rbp), %eax
	jmp	.LBB67_14
.LBB67_13:                              # %cond.false70
	xorl	%eax, %eax
	jmp	.LBB67_14
.LBB67_14:                              # %cond.end71
	movl	%eax, -160(%rbp)
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB67_16
# %bb.15:                               # %lor.lhs.false76
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB67_17
.LBB67_16:                              # %cond.true80
	movl	-36(%rbp), %eax
	jmp	.LBB67_18
.LBB67_17:                              # %cond.false81
	xorl	%eax, %eax
	jmp	.LBB67_18
.LBB67_18:                              # %cond.end82
	movl	%eax, -168(%rbp)
	movq	-208(%rbp), %rsi
	movl	-40(%rbp), %edx
	movw	-18(%rbp), %ax
	movl	-160(%rbp), %r8d
	movl	-168(%rbp), %r9d
	movw	-42(%rbp), %bx
	leaq	-124(%rbp), %rdi
	movswl	%ax, %ecx
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	16(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB67_19:                              # %if.end85
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB67_84
# %bb.20:                               # %if.then87
	movl	$0, -56(%rbp)
.LBB67_21:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_23 Depth 2
                                        #       Child Loop BB67_25 Depth 3
                                        #     Child Loop BB67_31 Depth 2
                                        #       Child Loop BB67_33 Depth 3
                                        #     Child Loop BB67_39 Depth 2
                                        #       Child Loop BB67_41 Depth 3
	cmpl	$4, -56(%rbp)
	jge	.LBB67_48
# %bb.22:                               # %for.body
                                        #   in Loop: Header=BB67_21 Depth=1
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -84(%rbp)
	movl	-48(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -88(%rbp)
	movl	$0, -12(%rbp)
.LBB67_23:                              # %for.cond96
                                        #   Parent Loop BB67_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_25 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB67_30
# %bb.24:                               # %for.body99
                                        #   in Loop: Header=BB67_23 Depth=2
	movl	$0, -16(%rbp)
.LBB67_25:                              # %for.cond100
                                        #   Parent Loop BB67_21 Depth=1
                                        #     Parent Loop BB67_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB67_28
# %bb.26:                               # %for.body103
                                        #   in Loop: Header=BB67_25 Depth=3
	movl	-16(%rbp), %eax
	addl	-84(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-88(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB67_25 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_25
.LBB67_28:                              # %for.end
                                        #   in Loop: Header=BB67_23 Depth=2
	jmp	.LBB67_29
.LBB67_29:                              # %for.inc114
                                        #   in Loop: Header=BB67_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_23
.LBB67_30:                              # %for.end116
                                        #   in Loop: Header=BB67_21 Depth=1
	movl	-40(%rbp), %edi
	addl	$4, %edi
	movl	-56(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -12(%rbp)
.LBB67_31:                              # %for.cond120
                                        #   Parent Loop BB67_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_33 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB67_38
# %bb.32:                               # %for.body123
                                        #   in Loop: Header=BB67_31 Depth=2
	movl	$0, -16(%rbp)
.LBB67_33:                              # %for.cond124
                                        #   Parent Loop BB67_21 Depth=1
                                        #     Parent Loop BB67_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB67_36
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB67_33 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-88(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-16(%rbp), %eax
	addl	-84(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-88(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc150
                                        #   in Loop: Header=BB67_33 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_33
.LBB67_36:                              # %for.end152
                                        #   in Loop: Header=BB67_31 Depth=2
	jmp	.LBB67_37
.LBB67_37:                              # %for.inc153
                                        #   in Loop: Header=BB67_31 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_31
.LBB67_38:                              # %for.end155
                                        #   in Loop: Header=BB67_21 Depth=1
	movl	-40(%rbp), %edi
	addl	$8, %edi
	movl	-56(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -12(%rbp)
.LBB67_39:                              # %for.cond159
                                        #   Parent Loop BB67_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB67_46
# %bb.40:                               # %for.body162
                                        #   in Loop: Header=BB67_39 Depth=2
	movl	$0, -16(%rbp)
.LBB67_41:                              # %for.cond163
                                        #   Parent Loop BB67_21 Depth=1
                                        #     Parent Loop BB67_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB67_44
# %bb.42:                               # %for.body166
                                        #   in Loop: Header=BB67_41 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-88(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc178
                                        #   in Loop: Header=BB67_41 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_41
.LBB67_44:                              # %for.end180
                                        #   in Loop: Header=BB67_39 Depth=2
	jmp	.LBB67_45
.LBB67_45:                              # %for.inc181
                                        #   in Loop: Header=BB67_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_39
.LBB67_46:                              # %for.end183
                                        #   in Loop: Header=BB67_21 Depth=1
	jmp	.LBB67_47
.LBB67_47:                              # %for.inc184
                                        #   in Loop: Header=BB67_21 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB67_21
.LBB67_48:                              # %for.end186
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB67_49:                              # %for.cond187
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_51 Depth 2
	movl	-12(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_83
# %bb.50:                               # %for.body191
                                        #   in Loop: Header=BB67_49 Depth=1
	movl	-52(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB67_51:                              # %for.cond192
                                        #   Parent Loop BB67_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_81
# %bb.52:                               # %for.body196
                                        #   in Loop: Header=BB67_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-12(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -116(%rbp)
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rbx
	movslq	-12(%rbp), %rdx
	movl	(%rbx,%rdx,4), %edx
	addl	-116(%rbp), %edx
	movl	%edx, -92(%rbp)
	movl	-116(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resR, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-12(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -68(%rbp)
	movl	-68(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rbx
	movslq	-12(%rbp), %rsi
	addl	(%rbx,%rsi,4), %edx
	movl	%edx, -80(%rbp)
	movq	img, %rdx
	movl	72688(%rdx), %edx
	movl	-68(%rbp), %esi
	movslq	-16(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movslq	-12(%rbp), %rdi
	addl	(%rcx,%rdi,4), %esi
	cmpl	%esi, %eax
	jle	.LBB67_54
# %bb.53:                               # %cond.true228
                                        #   in Loop: Header=BB67_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB67_55
.LBB67_54:                              # %cond.false229
                                        #   in Loop: Header=BB67_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-68(%rbp), %eax
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-12(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB67_55:                              # %cond.end235
                                        #   in Loop: Header=BB67_51 Depth=2
	cmpl	%eax, %edx
	jge	.LBB67_57
# %bb.56:                               # %cond.true239
                                        #   in Loop: Header=BB67_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB67_61
.LBB67_57:                              # %cond.false241
                                        #   in Loop: Header=BB67_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-68(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-12(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB67_59
# %bb.58:                               # %cond.true249
                                        #   in Loop: Header=BB67_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB67_60
.LBB67_59:                              # %cond.false250
                                        #   in Loop: Header=BB67_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-68(%rbp), %eax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB67_60:                              # %cond.end256
                                        #   in Loop: Header=BB67_51 Depth=2
.LBB67_61:                              # %cond.end258
                                        #   in Loop: Header=BB67_51 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-92(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-12(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB67_63
# %bb.62:                               # %cond.true275
                                        #   in Loop: Header=BB67_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB67_64
.LBB67_63:                              # %cond.false276
                                        #   in Loop: Header=BB67_51 Depth=2
	movl	-92(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB67_64:                              # %cond.end282
                                        #   in Loop: Header=BB67_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB67_66
# %bb.65:                               # %cond.true286
                                        #   in Loop: Header=BB67_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_70
.LBB67_66:                              # %cond.false288
                                        #   in Loop: Header=BB67_51 Depth=2
	xorl	%eax, %eax
	movl	-92(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB67_68
# %bb.67:                               # %cond.true296
                                        #   in Loop: Header=BB67_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB67_69
.LBB67_68:                              # %cond.false297
                                        #   in Loop: Header=BB67_51 Depth=2
	movl	-92(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB67_69:                              # %cond.end303
                                        #   in Loop: Header=BB67_51 Depth=2
.LBB67_70:                              # %cond.end305
                                        #   in Loop: Header=BB67_51 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-80(%rbp), %esi
	movslq	-16(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-12(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB67_72
# %bb.71:                               # %cond.true324
                                        #   in Loop: Header=BB67_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB67_73
.LBB67_72:                              # %cond.false325
                                        #   in Loop: Header=BB67_51 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-80(%rbp), %ecx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB67_73:                              # %cond.end331
                                        #   in Loop: Header=BB67_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB67_75
# %bb.74:                               # %cond.true335
                                        #   in Loop: Header=BB67_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB67_79
.LBB67_75:                              # %cond.false337
                                        #   in Loop: Header=BB67_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-80(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-12(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB67_77
# %bb.76:                               # %cond.true345
                                        #   in Loop: Header=BB67_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB67_78
.LBB67_77:                              # %cond.false346
                                        #   in Loop: Header=BB67_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-80(%rbp), %eax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB67_78:                              # %cond.end352
                                        #   in Loop: Header=BB67_51 Depth=2
.LBB67_79:                              # %cond.end354
                                        #   in Loop: Header=BB67_51 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.80:                               # %for.inc367
                                        #   in Loop: Header=BB67_51 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_51
.LBB67_81:                              # %for.end369
                                        #   in Loop: Header=BB67_49 Depth=1
	jmp	.LBB67_82
.LBB67_82:                              # %for.inc370
                                        #   in Loop: Header=BB67_49 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_49
.LBB67_83:                              # %for.end372
	jmp	.LBB67_84
.LBB67_84:                              # %if.end373
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB67_87
# %bb.85:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB67_87
# %bb.86:                               # %if.then379
	movl	-40(%rbp), %edi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	compute_residue_b8block
.LBB67_87:                              # %if.end380
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB67_102
# %bb.88:                               # %land.lhs.true384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB67_102
# %bb.89:                               # %if.then388
	movl	$0, -72(%rbp)
.LBB67_90:                              # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_92 Depth 2
                                        #       Child Loop BB67_94 Depth 3
	movl	-72(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB67_101
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB67_90 Depth=1
	movl	-72(%rbp), %edi
	movl	-40(%rbp), %edx
	movl	-36(%rbp), %ecx
	movswl	-42(%rbp), %r8d
	movl	$8, %esi
	callq	decode_one_b8block
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB67_92:                              # %for.cond395
                                        #   Parent Loop BB67_90 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_94 Depth 3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_99
# %bb.93:                               # %for.body401
                                        #   in Loop: Header=BB67_92 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB67_94:                              # %for.cond403
                                        #   Parent Loop BB67_90 Depth=1
                                        #     Parent Loop BB67_92 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_97
# %bb.95:                               # %for.body409
                                        #   in Loop: Header=BB67_94 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-72(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
# %bb.96:                               # %for.inc427
                                        #   in Loop: Header=BB67_94 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_94
.LBB67_97:                              # %for.end429
                                        #   in Loop: Header=BB67_92 Depth=2
	jmp	.LBB67_98
.LBB67_98:                              # %for.inc430
                                        #   in Loop: Header=BB67_92 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_92
.LBB67_99:                              # %for.end432
                                        #   in Loop: Header=BB67_90 Depth=1
	jmp	.LBB67_100
.LBB67_100:                             # %for.inc433
                                        #   in Loop: Header=BB67_90 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB67_90
.LBB67_101:                             # %for.end435
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-64(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -64(%rbp)
	jmp	.LBB67_113
.LBB67_102:                             # %if.else439
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB67_103:                             # %for.cond440
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_105 Depth 2
	movl	-12(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_112
# %bb.104:                              # %for.body444
                                        #   in Loop: Header=BB67_103 Depth=1
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB67_105:                             # %for.cond447
                                        #   Parent Loop BB67_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_110
# %bb.106:                              # %for.body453
                                        #   in Loop: Header=BB67_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB67_108
# %bb.107:                              # %if.then477
                                        #   in Loop: Header=BB67_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB67_108:                             # %if.end524
                                        #   in Loop: Header=BB67_105 Depth=2
	jmp	.LBB67_109
.LBB67_109:                             # %for.inc525
                                        #   in Loop: Header=BB67_105 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_105
.LBB67_110:                             # %for.end527
                                        #   in Loop: Header=BB67_103 Depth=1
	jmp	.LBB67_111
.LBB67_111:                             # %for.inc528
                                        #   in Loop: Header=BB67_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_103
.LBB67_112:                             # %for.end530
	jmp	.LBB67_113
.LBB67_113:                             # %if.end531
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB67_115
# %bb.114:                              # %if.then534
	movl	-128(%rbp), %edi
	movl	-164(%rbp), %esi
	leaq	-76(%rbp), %rdx
	leaq	-164(%rbp), %rcx
	callq	ue_linfo
	movl	-76(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_116
.LBB67_115:                             # %if.else536
	movl	-128(%rbp), %eax
	movq	-104(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-104(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-104(%rbp), %rax
	movl	$2, (%rax)
	movq	-192(%rbp), %rax
	movq	24(%rax), %rax
	movq	-184(%rbp), %rcx
	movq	-104(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movq	112(%rax), %rax
	movq	-104(%rbp), %rdi
	movq	-136(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-104(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -104(%rbp)
	movq	-112(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB67_116:                             # %if.end547
	cmpl	$0, -120(%rbp)
	jne	.LBB67_134
# %bb.117:                              # %if.then549
	movq	img, %rax
	cmpl	$1, 72000(%rax)
	jle	.LBB67_121
# %bb.118:                              # %land.lhs.true552
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB67_120
# %bb.119:                              # %lor.lhs.false556
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB67_121
.LBB67_120:                             # %if.then560
	movl	-36(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movswl	-42(%rbp), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB67_121:                             # %if.end564
	movq	img, %rax
	cmpl	$1, 72004(%rax)
	jle	.LBB67_127
# %bb.122:                              # %land.lhs.true567
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB67_127
# %bb.123:                              # %if.then571
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB67_125
# %bb.124:                              # %lor.lhs.false575
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB67_126
.LBB67_125:                             # %if.then579
	movl	-36(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movswl	16(%rbp), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB67_126:                             # %if.end583
	jmp	.LBB67_127
.LBB67_127:                             # %if.end584
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB67_129
# %bb.128:                              # %lor.lhs.false588
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB67_130
.LBB67_129:                             # %if.then592
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	addl	$2, %edx
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movswl	-42(%rbp), %r8d
	movl	-36(%rbp), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB67_130:                             # %if.end598
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB67_132
# %bb.131:                              # %lor.lhs.false602
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB67_133
.LBB67_132:                             # %if.then606
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	addl	$2, %edx
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movswl	16(%rbp), %r8d
	movl	-36(%rbp), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB67_133:                             # %if.end612
	jmp	.LBB67_134
.LBB67_134:                             # %if.end613
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB67_136
# %bb.135:                              # %if.then617
	movq	-192(%rbp), %rax
	movq	24(%rax), %rax
	movq	-184(%rbp), %rcx
	movslq	44(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	xorl	%esi, %esi
	movl	%eax, -76(%rbp)
	movl	-40(%rbp), %edi
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovgl	%eax, %esi
	movl	cbp8x8, %edx
	movq	-112(%rbp), %rcx
	movq	-152(%rbp), %r9
	movl	$1, %r8d
	callq	writeCBP_BIT_CABAC
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	subl	-76(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB67_136:                             # %if.end629
	movq	-144(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB67_138
# %bb.137:                              # %if.then631
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	movq	-112(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB67_138:                             # %if.end634
	vcvtsi2sdq	-64(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-24(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
.LBB67_139:                             # %return
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	cmpl	$2063419165, -172(%rbp) # imm = 0x7AFD471D
	jne	.LBB67_141
.LBB67_140:
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_141:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -216(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-216(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB67_140
.Lfunc_end67:
	.size	RDCost_for_8x8blocks.38, .Lfunc_end67-RDCost_for_8x8blocks.38
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4IntraBlocks.39 # -- Begin function RDCost_for_4x4IntraBlocks.39
	.p2align	4, 0x90
	.type	RDCost_for_4x4IntraBlocks.39,@function
RDCost_for_4x4IntraBlocks.39:           # @RDCost_for_4x4IntraBlocks.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$684495345, -72(%rbp)   # imm = 0x28CC91F1
	movq	%rdi, -144(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -8(%rbp)
	movl	%ecx, -36(%rbp)
	vmovsd	%xmm0, -112(%rbp)
	vmovsd	%xmm1, -160(%rbp)
	movl	%r8d, -52(%rbp)
	movl	$0, -40(%rbp)
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -44(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-96(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -136(%rbp)
	movl	$0, -76(%rbp)
	movl	-56(%rbp), %edi
	movl	-44(%rbp), %esi
	leaq	-76(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB68_10
# %bb.1:                                # %if.then
	movl	$0, -16(%rbp)
.LBB68_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_4 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB68_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB68_2 Depth=1
	movl	-48(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB68_4:                               # %for.cond15
                                        #   Parent Loop BB68_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB68_7
# %bb.5:                                # %for.body18
                                        #   in Loop: Header=BB68_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-68(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-128(%rbp), %rdx
	movl	-80(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB68_4 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB68_4
.LBB68_7:                               # %for.end
                                        #   in Loop: Header=BB68_2 Depth=1
	jmp	.LBB68_8
.LBB68_8:                               # %for.inc33
                                        #   in Loop: Header=BB68_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_2
.LBB68_9:                               # %for.end35
	jmp	.LBB68_10
.LBB68_10:                              # %if.end
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-52(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB68_12
# %bb.11:                               # %cond.true
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB68_16
.LBB68_12:                              # %cond.false
	movl	-36(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB68_14
# %bb.13:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB68_15
.LBB68_14:                              # %cond.false41
	movl	-36(%rbp), %eax
	subl	$1, %eax
.LBB68_15:                              # %cond.end
.LBB68_16:                              # %cond.end43
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movl	$4, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB68_18
# %bb.17:                               # %if.then49
	movq	-32(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB68_18:                              # %if.end50
	movq	-152(%rbp), %rax
	movq	24(%rax), %rax
	movq	-136(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB68_20
# %bb.19:                               # %if.then57
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB68_21
.LBB68_20:                              # %if.else
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB68_21:                              # %if.end60
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-96(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB68_23
# %bb.22:                               # %if.then66
	movl	-12(%rbp), %esi
	movl	-8(%rbp), %edx
	xorl	%edi, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_24
.LBB68_23:                              # %if.else69
	movl	-12(%rbp), %edi
	movl	-8(%rbp), %esi
	movl	$1, %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB68_24:                              # %if.end72
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm0
	vmovsd	-112(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -120(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB68_26
# %bb.25:                               # %if.then79
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -88(%rbp)
	jmp	.LBB68_27
.LBB68_26:                              # %if.else81
	vmovsd	-120(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -88(%rbp)
.LBB68_27:                              # %return
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$684495345, -72(%rbp)   # imm = 0x28CC91F1
	jne	.LBB68_29
.LBB68_28:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_29:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -104(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-104(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB68_28
.Lfunc_end68:
	.size	RDCost_for_4x4IntraBlocks.39, .Lfunc_end68-RDCost_for_4x4IntraBlocks.39
	.cfi_endproc
                                        # -- End function
	.globl	field_flag_inference.40 # -- Begin function field_flag_inference.40
	.p2align	4, 0x90
	.type	field_flag_inference.40,@function
field_flag_inference.40:                # @field_flag_inference.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1428484384, -28(%rbp)  # imm = 0x5524F120
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 552(%rax)
	je	.LBB69_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	536(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	532(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_6
.LBB69_2:                               # %if.else
	movq	-24(%rbp), %rax
	cmpl	$0, 556(%rax)
	je	.LBB69_4
# %bb.3:                                # %if.then6
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	540(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	532(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_5
.LBB69_4:                               # %if.else11
	movl	$0, -12(%rbp)
.LBB69_5:                               # %if.end
	jmp	.LBB69_6
.LBB69_6:                               # %if.end12
	movl	-12(%rbp), %ebx
	cmpl	$1428484384, -28(%rbp)  # imm = 0x5524F120
	jne	.LBB69_8
.LBB69_7:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_7
.Lfunc_end69:
	.size	field_flag_inference.40, .Lfunc_end69-field_flag_inference.40
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_8x8IntraBlocks.41
.LCPI70_0:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI70_1:
	.quad	4618441417868443648     # double 6
	.text
	.globl	Mode_Decision_for_8x8IntraBlocks.41
	.p2align	4, 0x90
	.type	Mode_Decision_for_8x8IntraBlocks.41,@function
Mode_Decision_for_8x8IntraBlocks.41:    # @Mode_Decision_for_8x8IntraBlocks.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI70_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI70_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$1949954859, -24(%rbp)  # imm = 0x7439F32B
	movl	%edi, -20(%rbp)
	vmovsd	%xmm0, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -16(%rbp)
	vmulsd	-48(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -12(%rbp)
.LBB70_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB70_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB70_1 Depth=1
	movl	-20(%rbp), %edi
	movl	-12(%rbp), %esi
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-28(%rbp), %rdx
	callq	Mode_Decision_for_4x4IntraBlocks
	cmpl	$0, %eax
	je	.LBB70_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB70_1 Depth=1
	movl	$1, -16(%rbp)
.LBB70_4:                               # %if.end
                                        #   in Loop: Header=BB70_1 Depth=1
	movl	-28(%rbp), %eax
	movq	-40(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB70_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_1
.LBB70_6:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$1949954859, -24(%rbp)  # imm = 0x7439F32B
	jne	.LBB70_8
.LBB70_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_7
.Lfunc_end70:
	.size	Mode_Decision_for_8x8IntraBlocks.41, .Lfunc_end70-Mode_Decision_for_8x8IntraBlocks.41
	.cfi_endproc
                                        # -- End function
	.globl	UpdatePixelMap.42       # -- Begin function UpdatePixelMap.42
	.p2align	4, 0x90
	.type	UpdatePixelMap.42,@function
UpdatePixelMap.42:                      # @UpdatePixelMap.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1499165010, -28(%rbp)  # imm = 0x595B7152
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB71_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_4 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB71_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB71_2 Depth=1
	movl	$0, -8(%rbp)
.LBB71_4:                               # %for.cond2
                                        #   Parent Loop BB71_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB71_7
# %bb.5:                                # %for.body4
                                        #   in Loop: Header=BB71_4 Depth=2
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB71_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_4
.LBB71_7:                               # %for.end
                                        #   in Loop: Header=BB71_2 Depth=1
	jmp	.LBB71_8
.LBB71_8:                               # %for.inc7
                                        #   in Loop: Header=BB71_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_2
.LBB71_9:                               # %for.end9
	jmp	.LBB71_41
.LBB71_10:                              # %if.else
	movl	$0, -16(%rbp)
.LBB71_11:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_13 Depth 2
                                        #       Child Loop BB71_16 Depth 3
                                        #         Child Loop BB71_18 Depth 4
                                        #       Child Loop BB71_25 Depth 3
                                        #         Child Loop BB71_27 Depth 4
	movl	-16(%rbp), %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB71_40
# %bb.12:                               # %for.body13
                                        #   in Loop: Header=BB71_11 Depth=1
	movl	$0, -12(%rbp)
.LBB71_13:                              # %for.cond14
                                        #   Parent Loop BB71_11 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_16 Depth 3
                                        #         Child Loop BB71_18 Depth 4
                                        #       Child Loop BB71_25 Depth 3
                                        #         Child Loop BB71_27 Depth 4
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB71_38
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB71_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-12(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movq	refresh_map, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB71_24
# %bb.15:                               # %if.then25
                                        #   in Loop: Header=BB71_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB71_16:                              # %for.cond27
                                        #   Parent Loop BB71_11 Depth=1
                                        #     Parent Loop BB71_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB71_18 Depth 4
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB71_23
# %bb.17:                               # %for.body29
                                        #   in Loop: Header=BB71_16 Depth=3
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB71_18:                              # %for.cond31
                                        #   Parent Loop BB71_11 Depth=1
                                        #     Parent Loop BB71_13 Depth=2
                                        #       Parent Loop BB71_16 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB71_21
# %bb.19:                               # %for.body33
                                        #   in Loop: Header=BB71_18 Depth=4
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.20:                               # %for.inc38
                                        #   in Loop: Header=BB71_18 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_18
.LBB71_21:                              # %for.end40
                                        #   in Loop: Header=BB71_16 Depth=3
	jmp	.LBB71_22
.LBB71_22:                              # %for.inc41
                                        #   in Loop: Header=BB71_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_16
.LBB71_23:                              # %for.end43
                                        #   in Loop: Header=BB71_13 Depth=2
	jmp	.LBB71_36
.LBB71_24:                              # %if.else44
                                        #   in Loop: Header=BB71_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB71_25:                              # %for.cond46
                                        #   Parent Loop BB71_11 Depth=1
                                        #     Parent Loop BB71_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB71_27 Depth 4
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB71_35
# %bb.26:                               # %for.body48
                                        #   in Loop: Header=BB71_25 Depth=3
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB71_27:                              # %for.cond50
                                        #   Parent Loop BB71_11 Depth=1
                                        #     Parent Loop BB71_13 Depth=2
                                        #       Parent Loop BB71_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB71_33
# %bb.28:                               # %for.body52
                                        #   in Loop: Header=BB71_27 Depth=4
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	movq	input, %rcx
	movl	36(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_30
# %bb.29:                               # %cond.true
                                        #   in Loop: Header=BB71_27 Depth=4
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	jmp	.LBB71_31
.LBB71_30:                              # %cond.false
                                        #   in Loop: Header=BB71_27 Depth=4
	movq	input, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
.LBB71_31:                              # %cond.end
                                        #   in Loop: Header=BB71_27 Depth=4
	movq	pixel_map, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.32:                               # %for.inc74
                                        #   in Loop: Header=BB71_27 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_27
.LBB71_33:                              # %for.end76
                                        #   in Loop: Header=BB71_25 Depth=3
	jmp	.LBB71_34
.LBB71_34:                              # %for.inc77
                                        #   in Loop: Header=BB71_25 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_25
.LBB71_35:                              # %for.end79
                                        #   in Loop: Header=BB71_13 Depth=2
	jmp	.LBB71_36
.LBB71_36:                              # %if.end
                                        #   in Loop: Header=BB71_13 Depth=2
	jmp	.LBB71_37
.LBB71_37:                              # %for.inc80
                                        #   in Loop: Header=BB71_13 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_13
.LBB71_38:                              # %for.end82
                                        #   in Loop: Header=BB71_11 Depth=1
	jmp	.LBB71_39
.LBB71_39:                              # %for.inc83
                                        #   in Loop: Header=BB71_11 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_11
.LBB71_40:                              # %for.end85
	jmp	.LBB71_41
.LBB71_41:                              # %if.end86
	cmpl	$1499165010, -28(%rbp)  # imm = 0x595B7152
	jne	.LBB71_43
.LBB71_42:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_43:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_42
.Lfunc_end71:
	.size	UpdatePixelMap.42, .Lfunc_end71-UpdatePixelMap.42
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMV8x8.43         # -- Begin function RestoreMV8x8.43
	.p2align	4, 0x90
	.type	RestoreMV8x8.43,@function
RestoreMV8x8.43:                        # @RestoreMV8x8.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2009670702, -16(%rbp)  # imm = 0x77C9242E
	movl	%edi, -12(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB72_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB72_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	-12(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-8(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_1
.LBB72_4:                               # %for.end
	cmpl	$2009670702, -16(%rbp)  # imm = 0x77C9242E
	jne	.LBB72_6
.LBB72_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_5
.Lfunc_end72:
	.size	RestoreMV8x8.43, .Lfunc_end72-RestoreMV8x8.43
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_Intra4x4Macroblock.44 # -- Begin function Mode_Decision_for_Intra4x4Macroblock.44
	.p2align	4, 0x90
	.type	Mode_Decision_for_Intra4x4Macroblock.44,@function
Mode_Decision_for_Intra4x4Macroblock.44: # @Mode_Decision_for_Intra4x4Macroblock.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$946613756, -24(%rbp)   # imm = 0x386C2DFC
	vmovsd	%xmm0, -40(%rbp)
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB73_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB73_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	-12(%rbp), %edi
	vmovsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-20(%rbp), %rsi
	callq	Mode_Decision_for_8x8IntraBlocks
	cmpl	$0, %eax
	je	.LBB73_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	-12(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB73_4:                               # %if.end
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	-20(%rbp), %eax
	movq	-32(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_1
.LBB73_6:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$946613756, -24(%rbp)   # imm = 0x386C2DFC
	jne	.LBB73_8
.LBB73_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_7
.Lfunc_end73:
	.size	Mode_Decision_for_Intra4x4Macroblock.44, .Lfunc_end73-Mode_Decision_for_Intra4x4Macroblock.44
	.cfi_endproc
                                        # -- End function
	.globl	store_macroblock_parameters.45 # -- Begin function store_macroblock_parameters.45
	.p2align	4, 0x90
	.type	store_macroblock_parameters.45,@function
store_macroblock_parameters.45:         # @store_macroblock_parameters.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1489371510, -36(%rbp)  # imm = 0x58C60176
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, best_mode
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movl	%eax, best_c_imode
	movq	img, %rax
	movl	72380(%rax), %eax
	movl	%eax, best_i16offset
	cmpl	$1, -28(%rbp)
	jne	.LBB74_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movl	%eax, bi_pred_me
	jmp	.LBB74_3
.LBB74_2:                               # %if.else
	movl	$0, bi_pred_me
.LBB74_3:                               # %if.end
	movl	$0, -4(%rbp)
.LBB74_4:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB74_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB74_4 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8mode(,%rcx,2)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8pdir(,%rcx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB74_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_4
.LBB74_7:                               # %for.end
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB74_8:                               # %for.cond15
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_10 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_15
# %bb.9:                                # %for.body19
                                        #   in Loop: Header=BB74_8 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB74_10:                              # %for.cond20
                                        #   Parent Loop BB74_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_13
# %bb.11:                               # %for.body25
                                        #   in Loop: Header=BB74_10 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_ipredmode(,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_intra_pred_modes(,%rcx,4)
# %bb.12:                               # %for.inc36
                                        #   in Loop: Header=BB74_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_10
.LBB74_13:                              # %for.end39
                                        #   in Loop: Header=BB74_8 Depth=1
	jmp	.LBB74_14
.LBB74_14:                              # %for.inc40
                                        #   in Loop: Header=BB74_8 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_8
.LBB74_15:                              # %for.end42
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB74_16:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_18 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB74_23
# %bb.17:                               # %for.body46
                                        #   in Loop: Header=BB74_16 Depth=1
	movl	$0, -8(%rbp)
.LBB74_18:                              # %for.cond47
                                        #   Parent Loop BB74_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB74_21
# %bb.19:                               # %for.body50
                                        #   in Loop: Header=BB74_18 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$b8_ipredmode8x8, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b8_intra_pred_modes8x8(,%rcx,4)
# %bb.20:                               # %for.inc67
                                        #   in Loop: Header=BB74_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_18
.LBB74_21:                              # %for.end70
                                        #   in Loop: Header=BB74_16 Depth=1
	jmp	.LBB74_22
.LBB74_22:                              # %for.inc71
                                        #   in Loop: Header=BB74_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_16
.LBB74_23:                              # %for.end73
	movl	$0, -8(%rbp)
.LBB74_24:                              # %for.cond74
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_26 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB74_31
# %bb.25:                               # %for.body77
                                        #   in Loop: Header=BB74_24 Depth=1
	movl	$0, -4(%rbp)
.LBB74_26:                              # %for.cond78
                                        #   Parent Loop BB74_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB74_29
# %bb.27:                               # %for.body81
                                        #   in Loop: Header=BB74_26 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.28:                               # %for.inc92
                                        #   in Loop: Header=BB74_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_26
.LBB74_29:                              # %for.end94
                                        #   in Loop: Header=BB74_24 Depth=1
	jmp	.LBB74_30
.LBB74_30:                              # %for.inc95
                                        #   in Loop: Header=BB74_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_24
.LBB74_31:                              # %for.end97
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB74_41
# %bb.32:                               # %if.then100
	movl	$0, -8(%rbp)
.LBB74_33:                              # %for.cond101
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_35 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB74_40
# %bb.34:                               # %for.body104
                                        #   in Loop: Header=BB74_33 Depth=1
	movl	$0, -4(%rbp)
.LBB74_35:                              # %for.cond105
                                        #   Parent Loop BB74_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB74_38
# %bb.36:                               # %for.body108
                                        #   in Loop: Header=BB74_35 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbU, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbV, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.37:                               # %for.inc134
                                        #   in Loop: Header=BB74_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_35
.LBB74_38:                              # %for.end136
                                        #   in Loop: Header=BB74_33 Depth=1
	jmp	.LBB74_39
.LBB74_39:                              # %for.inc137
                                        #   in Loop: Header=BB74_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_33
.LBB74_40:                              # %for.end139
	jmp	.LBB74_41
.LBB74_41:                              # %if.end140
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB74_56
# %bb.42:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB74_56
# %bb.43:                               # %if.then146
	movl	$0, -12(%rbp)
.LBB74_44:                              # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_46 Depth 2
                                        #       Child Loop BB74_48 Depth 3
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB74_55
# %bb.45:                               # %for.body150
                                        #   in Loop: Header=BB74_44 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB74_46:                              # %for.cond152
                                        #   Parent Loop BB74_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_48 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_53
# %bb.47:                               # %for.body157
                                        #   in Loop: Header=BB74_46 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB74_48:                              # %for.cond159
                                        #   Parent Loop BB74_44 Depth=1
                                        #     Parent Loop BB74_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_51
# %bb.49:                               # %for.body164
                                        #   in Loop: Header=BB74_48 Depth=3
	movq	decs, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	24(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc177
                                        #   in Loop: Header=BB74_48 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_48
.LBB74_51:                              # %for.end179
                                        #   in Loop: Header=BB74_46 Depth=2
	jmp	.LBB74_52
.LBB74_52:                              # %for.inc180
                                        #   in Loop: Header=BB74_46 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_46
.LBB74_53:                              # %for.end182
                                        #   in Loop: Header=BB74_44 Depth=1
	jmp	.LBB74_54
.LBB74_54:                              # %for.inc183
                                        #   in Loop: Header=BB74_44 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_44
.LBB74_55:                              # %for.end185
	jmp	.LBB74_56
.LBB74_56:                              # %if.end186
	cmpl	$0, -28(%rbp)
	jne	.LBB74_58
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -32(%rbp)
	je	.LBB74_59
.LBB74_58:                              # %if.then188
	movq	cofAC, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-48(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-56(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, cbp
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	%rax, cbp_blk
	jmp	.LBB74_60
.LBB74_59:                              # %if.else191
	movl	$0, cbp
	movq	$0, cbp_blk
.LBB74_60:                              # %if.end192
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, luma_transform_size_8x8_flag
	movl	$0, -8(%rbp)
.LBB74_61:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB74_70
# %bb.62:                               # %for.body196
                                        #   in Loop: Header=BB74_61 Depth=1
	movl	$0, -4(%rbp)
.LBB74_63:                              # %for.cond197
                                        #   Parent Loop BB74_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB74_68
# %bb.64:                               # %for.body200
                                        #   in Loop: Header=BB74_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$frefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -32(%rbp)
	je	.LBB74_66
# %bb.65:                               # %if.then215
                                        #   in Loop: Header=BB74_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$brefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB74_66:                              # %if.end230
                                        #   in Loop: Header=BB74_63 Depth=2
	jmp	.LBB74_67
.LBB74_67:                              # %for.inc231
                                        #   in Loop: Header=BB74_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_63
.LBB74_68:                              # %for.end233
                                        #   in Loop: Header=BB74_61 Depth=1
	jmp	.LBB74_69
.LBB74_69:                              # %for.inc234
                                        #   in Loop: Header=BB74_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_61
.LBB74_70:                              # %for.end236
	cmpl	$1489371510, -36(%rbp)  # imm = 0x58C60176
	jne	.LBB74_72
.LBB74_71:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_72:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_71
.Lfunc_end74:
	.size	store_macroblock_parameters.45, .Lfunc_end74-store_macroblock_parameters.45
	.cfi_endproc
                                        # -- End function
	.globl	set_mbaff_parameters.46 # -- Begin function set_mbaff_parameters.46
	.p2align	4, 0x90
	.type	set_mbaff_parameters.46,@function
set_mbaff_parameters.46:                # @set_mbaff_parameters.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$550090111, -36(%rbp)   # imm = 0x20C9B57F
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB75_2
# %bb.1:                                # %if.then
	jmp	.LBB75_82
.LBB75_2:                               # %if.end
	movl	$0, -8(%rbp)
.LBB75_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_5 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB75_3 Depth=1
	movl	$0, -4(%rbp)
.LBB75_5:                               # %for.cond3
                                        #   Parent Loop BB75_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_8
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB75_5 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB75_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_5
.LBB75_8:                               # %for.end
                                        #   in Loop: Header=BB75_3 Depth=1
	jmp	.LBB75_9
.LBB75_9:                               # %for.inc17
                                        #   in Loop: Header=BB75_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_3
.LBB75_10:                              # %for.end19
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB75_20
# %bb.11:                               # %if.then22
	movl	$0, -8(%rbp)
.LBB75_12:                              # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_14 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB75_19
# %bb.13:                               # %for.body26
                                        #   in Loop: Header=BB75_12 Depth=1
	movl	$0, -4(%rbp)
.LBB75_14:                              # %for.cond27
                                        #   Parent Loop BB75_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB75_17
# %bb.15:                               # %for.body30
                                        #   in Loop: Header=BB75_14 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.16:                               # %for.inc58
                                        #   in Loop: Header=BB75_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_14
.LBB75_17:                              # %for.end60
                                        #   in Loop: Header=BB75_12 Depth=1
	jmp	.LBB75_18
.LBB75_18:                              # %for.inc61
                                        #   in Loop: Header=BB75_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_12
.LBB75_19:                              # %for.end63
	jmp	.LBB75_20
.LBB75_20:                              # %if.end64
	movl	-28(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	rdopt, %rax
	cmpl	$0, 3096(%rax)
	jne	.LBB75_23
# %bb.21:                               # %land.lhs.true
	cmpl	$0, -28(%rbp)
	je	.LBB75_23
# %bb.22:                               # %if.then76
	movl	$0, -28(%rbp)
	movq	rdopt, %rax
	movl	$0, 3224(%rax)
.LBB75_23:                              # %if.end78
	movl	$0, -4(%rbp)
.LBB75_24:                              # %for.cond79
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_26 Depth 2
                                        #       Child Loop BB75_28 Depth 3
                                        #         Child Loop BB75_30 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_39
# %bb.25:                               # %for.body83
                                        #   in Loop: Header=BB75_24 Depth=1
	movl	$0, -8(%rbp)
.LBB75_26:                              # %for.cond84
                                        #   Parent Loop BB75_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_28 Depth 3
                                        #         Child Loop BB75_30 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB75_37
# %bb.27:                               # %for.body87
                                        #   in Loop: Header=BB75_26 Depth=2
	movl	$0, -12(%rbp)
.LBB75_28:                              # %for.cond88
                                        #   Parent Loop BB75_24 Depth=1
                                        #     Parent Loop BB75_26 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB75_30 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB75_35
# %bb.29:                               # %for.body91
                                        #   in Loop: Header=BB75_28 Depth=3
	movl	$0, -16(%rbp)
.LBB75_30:                              # %for.cond92
                                        #   Parent Loop BB75_24 Depth=1
                                        #     Parent Loop BB75_26 Depth=2
                                        #       Parent Loop BB75_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB75_33
# %bb.31:                               # %for.body95
                                        #   in Loop: Header=BB75_30 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc113
                                        #   in Loop: Header=BB75_30 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_30
.LBB75_33:                              # %for.end115
                                        #   in Loop: Header=BB75_28 Depth=3
	jmp	.LBB75_34
.LBB75_34:                              # %for.inc116
                                        #   in Loop: Header=BB75_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_28
.LBB75_35:                              # %for.end118
                                        #   in Loop: Header=BB75_26 Depth=2
	jmp	.LBB75_36
.LBB75_36:                              # %for.inc119
                                        #   in Loop: Header=BB75_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_26
.LBB75_37:                              # %for.end121
                                        #   in Loop: Header=BB75_24 Depth=1
	jmp	.LBB75_38
.LBB75_38:                              # %for.inc122
                                        #   in Loop: Header=BB75_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_24
.LBB75_39:                              # %for.end124
	movl	$0, -4(%rbp)
.LBB75_40:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_42 Depth 2
                                        #       Child Loop BB75_44 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB75_51
# %bb.41:                               # %for.body128
                                        #   in Loop: Header=BB75_40 Depth=1
	movl	$0, -12(%rbp)
.LBB75_42:                              # %for.cond129
                                        #   Parent Loop BB75_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_44 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB75_49
# %bb.43:                               # %for.body132
                                        #   in Loop: Header=BB75_42 Depth=2
	movl	$0, -16(%rbp)
.LBB75_44:                              # %for.cond133
                                        #   Parent Loop BB75_40 Depth=1
                                        #     Parent Loop BB75_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB75_47
# %bb.45:                               # %for.body136
                                        #   in Loop: Header=BB75_44 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.46:                               # %for.inc150
                                        #   in Loop: Header=BB75_44 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_44
.LBB75_47:                              # %for.end152
                                        #   in Loop: Header=BB75_42 Depth=2
	jmp	.LBB75_48
.LBB75_48:                              # %for.inc153
                                        #   in Loop: Header=BB75_42 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_42
.LBB75_49:                              # %for.end155
                                        #   in Loop: Header=BB75_40 Depth=1
	jmp	.LBB75_50
.LBB75_50:                              # %for.inc156
                                        #   in Loop: Header=BB75_40 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_40
.LBB75_51:                              # %for.end158
	movl	$0, -4(%rbp)
.LBB75_52:                              # %for.cond159
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB75_55
# %bb.53:                               # %for.body162
                                        #   in Loop: Header=BB75_52 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
# %bb.54:                               # %for.inc173
                                        #   in Loop: Header=BB75_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_52
.LBB75_55:                              # %for.end175
	movl	$0, -8(%rbp)
.LBB75_56:                              # %for.cond176
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_58 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB75_63
# %bb.57:                               # %for.body179
                                        #   in Loop: Header=BB75_56 Depth=1
	movl	$0, -4(%rbp)
.LBB75_58:                              # %for.cond180
                                        #   Parent Loop BB75_56 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB75_61
# %bb.59:                               # %for.body183
                                        #   in Loop: Header=BB75_58 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc196
                                        #   in Loop: Header=BB75_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_58
.LBB75_61:                              # %for.end198
                                        #   in Loop: Header=BB75_56 Depth=1
	jmp	.LBB75_62
.LBB75_62:                              # %for.inc199
                                        #   in Loop: Header=BB75_56 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_56
.LBB75_63:                              # %for.end201
	cmpl	$0, -32(%rbp)
	je	.LBB75_73
# %bb.64:                               # %if.then203
	movl	$0, -8(%rbp)
.LBB75_65:                              # %for.cond204
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_67 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB75_72
# %bb.66:                               # %for.body207
                                        #   in Loop: Header=BB75_65 Depth=1
	movl	$0, -4(%rbp)
.LBB75_67:                              # %for.cond208
                                        #   Parent Loop BB75_65 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB75_70
# %bb.68:                               # %for.body211
                                        #   in Loop: Header=BB75_67 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc228
                                        #   in Loop: Header=BB75_67 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_67
.LBB75_70:                              # %for.end230
                                        #   in Loop: Header=BB75_65 Depth=1
	jmp	.LBB75_71
.LBB75_71:                              # %for.inc231
                                        #   in Loop: Header=BB75_65 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_65
.LBB75_72:                              # %for.end233
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3100(%rcx)
.LBB75_73:                              # %if.end235
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB75_74:                              # %for.cond237
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_76 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_81
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB75_74 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB75_76:                              # %for.cond244
                                        #   Parent Loop BB75_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_79
# %bb.77:                               # %for.body249
                                        #   in Loop: Header=BB75_76 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.78:                               # %for.inc264
                                        #   in Loop: Header=BB75_76 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_76
.LBB75_79:                              # %for.end267
                                        #   in Loop: Header=BB75_74 Depth=1
	jmp	.LBB75_80
.LBB75_80:                              # %for.inc268
                                        #   in Loop: Header=BB75_74 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_74
.LBB75_81:                              # %for.end270.loopexit
	jmp	.LBB75_82
.LBB75_82:                              # %for.end270
	cmpl	$550090111, -36(%rbp)   # imm = 0x20C9B57F
	jne	.LBB75_84
.LBB75_83:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_83
.Lfunc_end75:
	.size	set_mbaff_parameters.46, .Lfunc_end75-set_mbaff_parameters.46
	.cfi_endproc
                                        # -- End function
	.globl	UpdatePixelMap.47       # -- Begin function UpdatePixelMap.47
	.p2align	4, 0x90
	.type	UpdatePixelMap.47,@function
UpdatePixelMap.47:                      # @UpdatePixelMap.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1199220855, -28(%rbp)  # imm = 0x477AA877
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB76_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_4 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB76_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB76_2 Depth=1
	movl	$0, -8(%rbp)
.LBB76_4:                               # %for.cond2
                                        #   Parent Loop BB76_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB76_7
# %bb.5:                                # %for.body4
                                        #   in Loop: Header=BB76_4 Depth=2
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB76_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_4
.LBB76_7:                               # %for.end
                                        #   in Loop: Header=BB76_2 Depth=1
	jmp	.LBB76_8
.LBB76_8:                               # %for.inc7
                                        #   in Loop: Header=BB76_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_2
.LBB76_9:                               # %for.end9
	jmp	.LBB76_41
.LBB76_10:                              # %if.else
	movl	$0, -12(%rbp)
.LBB76_11:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_13 Depth 2
                                        #       Child Loop BB76_16 Depth 3
                                        #         Child Loop BB76_18 Depth 4
                                        #       Child Loop BB76_25 Depth 3
                                        #         Child Loop BB76_27 Depth 4
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB76_40
# %bb.12:                               # %for.body13
                                        #   in Loop: Header=BB76_11 Depth=1
	movl	$0, -16(%rbp)
.LBB76_13:                              # %for.cond14
                                        #   Parent Loop BB76_11 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_16 Depth 3
                                        #         Child Loop BB76_18 Depth 4
                                        #       Child Loop BB76_25 Depth 3
                                        #         Child Loop BB76_27 Depth 4
	movl	-16(%rbp), %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB76_38
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB76_13 Depth=2
	movl	-12(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movq	refresh_map, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB76_24
# %bb.15:                               # %if.then25
                                        #   in Loop: Header=BB76_13 Depth=2
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB76_16:                              # %for.cond27
                                        #   Parent Loop BB76_11 Depth=1
                                        #     Parent Loop BB76_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB76_18 Depth 4
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB76_23
# %bb.17:                               # %for.body29
                                        #   in Loop: Header=BB76_16 Depth=3
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB76_18:                              # %for.cond31
                                        #   Parent Loop BB76_11 Depth=1
                                        #     Parent Loop BB76_13 Depth=2
                                        #       Parent Loop BB76_16 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB76_21
# %bb.19:                               # %for.body33
                                        #   in Loop: Header=BB76_18 Depth=4
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.20:                               # %for.inc38
                                        #   in Loop: Header=BB76_18 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_18
.LBB76_21:                              # %for.end40
                                        #   in Loop: Header=BB76_16 Depth=3
	jmp	.LBB76_22
.LBB76_22:                              # %for.inc41
                                        #   in Loop: Header=BB76_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_16
.LBB76_23:                              # %for.end43
                                        #   in Loop: Header=BB76_13 Depth=2
	jmp	.LBB76_36
.LBB76_24:                              # %if.else44
                                        #   in Loop: Header=BB76_13 Depth=2
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB76_25:                              # %for.cond46
                                        #   Parent Loop BB76_11 Depth=1
                                        #     Parent Loop BB76_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB76_27 Depth 4
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB76_35
# %bb.26:                               # %for.body48
                                        #   in Loop: Header=BB76_25 Depth=3
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB76_27:                              # %for.cond50
                                        #   Parent Loop BB76_11 Depth=1
                                        #     Parent Loop BB76_13 Depth=2
                                        #       Parent Loop BB76_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB76_33
# %bb.28:                               # %for.body52
                                        #   in Loop: Header=BB76_27 Depth=4
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	movq	input, %rcx
	movl	36(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_30
# %bb.29:                               # %cond.true
                                        #   in Loop: Header=BB76_27 Depth=4
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	jmp	.LBB76_31
.LBB76_30:                              # %cond.false
                                        #   in Loop: Header=BB76_27 Depth=4
	movq	input, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
.LBB76_31:                              # %cond.end
                                        #   in Loop: Header=BB76_27 Depth=4
	movq	pixel_map, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.32:                               # %for.inc74
                                        #   in Loop: Header=BB76_27 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_27
.LBB76_33:                              # %for.end76
                                        #   in Loop: Header=BB76_25 Depth=3
	jmp	.LBB76_34
.LBB76_34:                              # %for.inc77
                                        #   in Loop: Header=BB76_25 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_25
.LBB76_35:                              # %for.end79
                                        #   in Loop: Header=BB76_13 Depth=2
	jmp	.LBB76_36
.LBB76_36:                              # %if.end
                                        #   in Loop: Header=BB76_13 Depth=2
	jmp	.LBB76_37
.LBB76_37:                              # %for.inc80
                                        #   in Loop: Header=BB76_13 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_13
.LBB76_38:                              # %for.end82
                                        #   in Loop: Header=BB76_11 Depth=1
	jmp	.LBB76_39
.LBB76_39:                              # %for.inc83
                                        #   in Loop: Header=BB76_11 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_11
.LBB76_40:                              # %for.end85
	jmp	.LBB76_41
.LBB76_41:                              # %if.end86
	cmpl	$1199220855, -28(%rbp)  # imm = 0x477AA877
	jne	.LBB76_43
.LBB76_42:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_43:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_42
.Lfunc_end76:
	.size	UpdatePixelMap.47, .Lfunc_end76-UpdatePixelMap.47
	.cfi_endproc
                                        # -- End function
	.globl	StoreMV8x8.48           # -- Begin function StoreMV8x8.48
	.p2align	4, 0x90
	.type	StoreMV8x8.48,@function
StoreMV8x8.48:                          # @StoreMV8x8.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1833811967, -12(%rbp)  # imm = 0x6D4DBFFF
	movl	%edi, -16(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB77_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB77_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	-16(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-8(%rbp), %eax
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_1
.LBB77_4:                               # %for.end
	cmpl	$1833811967, -12(%rbp)  # imm = 0x6D4DBFFF
	jne	.LBB77_6
.LBB77_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_5
.Lfunc_end77:
	.size	StoreMV8x8.48, .Lfunc_end77-StoreMV8x8.48
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_8x8IntraBlocks.49
.LCPI78_0:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI78_1:
	.quad	4618441417868443648     # double 6
	.text
	.globl	Mode_Decision_for_8x8IntraBlocks.49
	.p2align	4, 0x90
	.type	Mode_Decision_for_8x8IntraBlocks.49,@function
Mode_Decision_for_8x8IntraBlocks.49:    # @Mode_Decision_for_8x8IntraBlocks.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI78_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI78_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$855834461, -28(%rbp)   # imm = 0x3302FF5D
	movl	%edi, -20(%rbp)
	vmovsd	%xmm0, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -16(%rbp)
	vmulsd	-48(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -12(%rbp)
.LBB78_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB78_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	-20(%rbp), %edi
	movl	-12(%rbp), %esi
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-24(%rbp), %rdx
	callq	Mode_Decision_for_4x4IntraBlocks
	cmpl	$0, %eax
	je	.LBB78_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$1, -16(%rbp)
.LBB78_4:                               # %if.end
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	-24(%rbp), %eax
	movq	-40(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB78_1
.LBB78_6:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$855834461, -28(%rbp)   # imm = 0x3302FF5D
	jne	.LBB78_8
.LBB78_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_7
.Lfunc_end78:
	.size	Mode_Decision_for_8x8IntraBlocks.49, .Lfunc_end78-Mode_Decision_for_8x8IntraBlocks.49
	.cfi_endproc
                                        # -- End function
	.globl	GetBestTransformP8x8.50 # -- Begin function GetBestTransformP8x8.50
	.p2align	4, 0x90
	.type	GetBestTransformP8x8.50,@function
GetBestTransformP8x8.50:                # @GetBestTransformP8x8.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$584, %rsp              # imm = 0x248
	.cfi_offset %rbx, -24
	movl	$1143116601, -64(%rbp)  # imm = 0x44229339
	movl	$0, -36(%rbp)
	movl	$0, -40(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB79_2
# %bb.1:                                # %if.then
	movl	$1, -44(%rbp)
	jmp	.LBB79_25
.LBB79_2:                               # %if.end
	movl	$0, -28(%rbp)
.LBB79_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_5 Depth 2
                                        #       Child Loop BB79_7 Depth 3
                                        #         Child Loop BB79_9 Depth 4
                                        #           Child Loop BB79_11 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB79_22
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB79_3 Depth=1
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -48(%rbp)
	movl	$0, -32(%rbp)
	movl	-52(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB79_5:                               # %for.cond3
                                        #   Parent Loop BB79_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_7 Depth 3
                                        #         Child Loop BB79_9 Depth 4
                                        #           Child Loop BB79_11 Depth 5
	movl	-20(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_20
# %bb.6:                                # %for.body5
                                        #   in Loop: Header=BB79_5 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB79_7:                               # %for.cond7
                                        #   Parent Loop BB79_3 Depth=1
                                        #     Parent Loop BB79_5 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB79_9 Depth 4
                                        #           Child Loop BB79_11 Depth 5
	movl	-24(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_18
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB79_7 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-32(%rbp), %rax
	shlq	$2, %rax
	leaq	-336(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB79_9:                               # %for.cond12
                                        #   Parent Loop BB79_3 Depth=1
                                        #     Parent Loop BB79_5 Depth=2
                                        #       Parent Loop BB79_7 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB79_11 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB79_16
# %bb.10:                               # %for.body14
                                        #   in Loop: Header=BB79_9 Depth=4
	movl	$0, -16(%rbp)
.LBB79_11:                              # %for.cond15
                                        #   Parent Loop BB79_3 Depth=1
                                        #     Parent Loop BB79_5 Depth=2
                                        #       Parent Loop BB79_7 Depth=3
                                        #         Parent Loop BB79_9 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB79_14
# %bb.12:                               # %for.body17
                                        #   in Loop: Header=BB79_11 Depth=5
	movq	imgY_org, %rax
	movl	-60(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
	movq	imgY_org, %rax
	movl	-60(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB79_11 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB79_11
.LBB79_14:                              # %for.end
                                        #   in Loop: Header=BB79_9 Depth=4
	jmp	.LBB79_15
.LBB79_15:                              # %for.inc51
                                        #   in Loop: Header=BB79_9 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_9
.LBB79_16:                              # %for.end53
                                        #   in Loop: Header=BB79_7 Depth=3
	movq	-72(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.17:                               # %for.inc55
                                        #   in Loop: Header=BB79_7 Depth=3
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB79_7
.LBB79_18:                              # %for.end57
                                        #   in Loop: Header=BB79_5 Depth=2
	jmp	.LBB79_19
.LBB79_19:                              # %for.inc58
                                        #   in Loop: Header=BB79_5 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB79_5
.LBB79_20:                              # %for.end60
                                        #   in Loop: Header=BB79_3 Depth=1
	leaq	-592(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.21:                               # %for.inc64
                                        #   in Loop: Header=BB79_3 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB79_3
.LBB79_22:                              # %for.end66
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB79_24
# %bb.23:                               # %if.then69
	movl	$1, -44(%rbp)
	jmp	.LBB79_25
.LBB79_24:                              # %if.else
	movl	$0, -44(%rbp)
.LBB79_25:                              # %return
	movl	-44(%rbp), %ebx
	cmpl	$1143116601, -64(%rbp)  # imm = 0x44229339
	jne	.LBB79_27
.LBB79_26:
	movl	%ebx, %eax
	addq	$584, %rsp              # imm = 0x248
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_27:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_26
.Lfunc_end79:
	.size	GetBestTransformP8x8.50, .Lfunc_end79-GetBestTransformP8x8.50
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4IntraBlocks.51 # -- Begin function RDCost_for_4x4IntraBlocks.51
	.p2align	4, 0x90
	.type	RDCost_for_4x4IntraBlocks.51,@function
RDCost_for_4x4IntraBlocks.51:           # @RDCost_for_4x4IntraBlocks.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$697029424, -80(%rbp)   # imm = 0x298BD330
	movq	%rdi, -136(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -8(%rbp)
	movl	%ecx, -36(%rbp)
	vmovsd	%xmm0, -112(%rbp)
	vmovsd	%xmm1, -160(%rbp)
	movl	%r8d, -52(%rbp)
	movl	$0, -44(%rbp)
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -40(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-96(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -120(%rbp)
	movl	$0, -76(%rbp)
	movl	-56(%rbp), %edi
	movl	-40(%rbp), %esi
	leaq	-76(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movq	-136(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB80_10
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB80_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_4 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB80_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB80_2 Depth=1
	movl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB80_4:                               # %for.cond15
                                        #   Parent Loop BB80_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_7
# %bb.5:                                # %for.body18
                                        #   in Loop: Header=BB80_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-68(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-128(%rbp), %rdx
	movl	-72(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB80_4 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_4
.LBB80_7:                               # %for.end
                                        #   in Loop: Header=BB80_2 Depth=1
	jmp	.LBB80_8
.LBB80_8:                               # %for.inc33
                                        #   in Loop: Header=BB80_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB80_2
.LBB80_9:                               # %for.end35
	jmp	.LBB80_10
.LBB80_10:                              # %if.end
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-52(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB80_12
# %bb.11:                               # %cond.true
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB80_16
.LBB80_12:                              # %cond.false
	movl	-36(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB80_14
# %bb.13:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB80_15
.LBB80_14:                              # %cond.false41
	movl	-36(%rbp), %eax
	subl	$1, %eax
.LBB80_15:                              # %cond.end
.LBB80_16:                              # %cond.end43
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movl	$4, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB80_18
# %bb.17:                               # %if.then49
	movq	-32(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB80_18:                              # %if.end50
	movq	-144(%rbp), %rax
	movq	24(%rax), %rax
	movq	-120(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB80_20
# %bb.19:                               # %if.then57
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB80_21
.LBB80_20:                              # %if.else
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB80_21:                              # %if.end60
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-96(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB80_23
# %bb.22:                               # %if.then66
	movl	-12(%rbp), %esi
	movl	-8(%rbp), %edx
	xorl	%edi, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_24
.LBB80_23:                              # %if.else69
	movl	-12(%rbp), %edi
	movl	-8(%rbp), %esi
	movl	$1, %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB80_24:                              # %if.end72
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vcvtsi2sdl	-44(%rbp), %xmm0, %xmm0
	vmovsd	-112(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -152(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB80_26
# %bb.25:                               # %if.then79
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -88(%rbp)
	jmp	.LBB80_27
.LBB80_26:                              # %if.else81
	vmovsd	-152(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -88(%rbp)
.LBB80_27:                              # %return
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$697029424, -80(%rbp)   # imm = 0x298BD330
	jne	.LBB80_29
.LBB80_28:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_29:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -104(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-104(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB80_28
.Lfunc_end80:
	.size	RDCost_for_4x4IntraBlocks.51, .Lfunc_end80-RDCost_for_4x4IntraBlocks.51
	.cfi_endproc
                                        # -- End function
	.globl	SetCoeffAndReconstruction8x8.52 # -- Begin function SetCoeffAndReconstruction8x8.52
	.p2align	4, 0x90
	.type	SetCoeffAndReconstruction8x8.52,@function
SetCoeffAndReconstruction8x8.52:        # @SetCoeffAndReconstruction8x8.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$931212434, -40(%rbp)   # imm = 0x37812C92
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB81_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB81_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB81_4
.LBB81_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB81_4
.LBB81_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB81_104
# %bb.5:                                # %if.then
	movl	$0, -4(%rbp)
.LBB81_6:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB81_9
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB81_6 Depth=1
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB81_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_6
.LBB81_9:                               # %for.end
	cmpl	$0, -32(%rbp)
	je	.LBB81_19
# %bb.10:                               # %if.then15
	movl	$0, -8(%rbp)
.LBB81_11:                              # %for.cond16
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB81_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB81_11 Depth=1
	movl	$0, -4(%rbp)
.LBB81_13:                              # %for.cond20
                                        #   Parent Loop BB81_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB81_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB81_13 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	movw	part8x8bwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.15:                               # %for.inc50
                                        #   in Loop: Header=BB81_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_13
.LBB81_16:                              # %for.end52
                                        #   in Loop: Header=BB81_11 Depth=1
	jmp	.LBB81_17
.LBB81_17:                              # %for.inc53
                                        #   in Loop: Header=BB81_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_11
.LBB81_18:                              # %for.end55
	jmp	.LBB81_28
.LBB81_19:                              # %if.else
	movl	$0, -8(%rbp)
.LBB81_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_22 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB81_27
# %bb.21:                               # %for.body59
                                        #   in Loop: Header=BB81_20 Depth=1
	movl	$0, -4(%rbp)
.LBB81_22:                              # %for.cond60
                                        #   Parent Loop BB81_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB81_25
# %bb.23:                               # %for.body63
                                        #   in Loop: Header=BB81_22 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.24:                               # %for.inc84
                                        #   in Loop: Header=BB81_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_22
.LBB81_25:                              # %for.end86
                                        #   in Loop: Header=BB81_20 Depth=1
	jmp	.LBB81_26
.LBB81_26:                              # %for.inc87
                                        #   in Loop: Header=BB81_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_20
.LBB81_27:                              # %for.end89
	jmp	.LBB81_28
.LBB81_28:                              # %if.end
	movl	$0, -8(%rbp)
.LBB81_29:                              # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_31 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB81_39
# %bb.30:                               # %for.body93
                                        #   in Loop: Header=BB81_29 Depth=1
	movl	$0, -4(%rbp)
.LBB81_31:                              # %for.cond94
                                        #   Parent Loop BB81_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB81_37
# %bb.32:                               # %for.body97
                                        #   in Loop: Header=BB81_31 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB81_34
# %bb.33:                               # %cond.true111
                                        #   in Loop: Header=BB81_31 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB81_35
.LBB81_34:                              # %cond.false127
                                        #   in Loop: Header=BB81_31 Depth=2
	movq	$-1, %rax
	jmp	.LBB81_35
.LBB81_35:                              # %cond.end128
                                        #   in Loop: Header=BB81_31 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.36:                               # %for.inc139
                                        #   in Loop: Header=BB81_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_31
.LBB81_37:                              # %for.end141
                                        #   in Loop: Header=BB81_29 Depth=1
	jmp	.LBB81_38
.LBB81_38:                              # %for.inc142
                                        #   in Loop: Header=BB81_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_29
.LBB81_39:                              # %for.end144
	cmpl	$0, -32(%rbp)
	je	.LBB81_52
# %bb.40:                               # %if.then146
	movl	$0, -8(%rbp)
.LBB81_41:                              # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_43 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB81_51
# %bb.42:                               # %for.body150
                                        #   in Loop: Header=BB81_41 Depth=1
	movl	$0, -4(%rbp)
.LBB81_43:                              # %for.cond151
                                        #   Parent Loop BB81_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB81_49
# %bb.44:                               # %for.body154
                                        #   in Loop: Header=BB81_43 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB81_46
# %bb.45:                               # %cond.true168
                                        #   in Loop: Header=BB81_43 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB81_47
.LBB81_46:                              # %cond.false185
                                        #   in Loop: Header=BB81_43 Depth=2
	movq	$-1, %rax
	jmp	.LBB81_47
.LBB81_47:                              # %cond.end186
                                        #   in Loop: Header=BB81_43 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.48:                               # %for.inc198
                                        #   in Loop: Header=BB81_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_43
.LBB81_49:                              # %for.end200
                                        #   in Loop: Header=BB81_41 Depth=1
	jmp	.LBB81_50
.LBB81_50:                              # %for.inc201
                                        #   in Loop: Header=BB81_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_41
.LBB81_51:                              # %for.end203
	jmp	.LBB81_52
.LBB81_52:                              # %if.end204
	movl	$1, %edi
	callq	StoreMV8x8
	xorl	%edi, %edi
	callq	RestoreMV8x8
	movl	$0, -16(%rbp)
.LBB81_53:                              # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_55 Depth 2
                                        #       Child Loop BB81_57 Depth 3
                                        #         Child Loop BB81_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB81_68
# %bb.54:                               # %for.body208
                                        #   in Loop: Header=BB81_53 Depth=1
	movl	$0, -12(%rbp)
.LBB81_55:                              # %for.cond209
                                        #   Parent Loop BB81_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_57 Depth 3
                                        #         Child Loop BB81_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB81_66
# %bb.56:                               # %for.body212
                                        #   in Loop: Header=BB81_55 Depth=2
	movl	$0, -8(%rbp)
.LBB81_57:                              # %for.cond213
                                        #   Parent Loop BB81_53 Depth=1
                                        #     Parent Loop BB81_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB81_59 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB81_64
# %bb.58:                               # %for.body216
                                        #   in Loop: Header=BB81_57 Depth=3
	movl	$0, -4(%rbp)
.LBB81_59:                              # %for.cond217
                                        #   Parent Loop BB81_53 Depth=1
                                        #     Parent Loop BB81_55 Depth=2
                                        #       Parent Loop BB81_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB81_62
# %bb.60:                               # %for.body220
                                        #   in Loop: Header=BB81_59 Depth=4
	movq	cofAC_8x8ts, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc237
                                        #   in Loop: Header=BB81_59 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_59
.LBB81_62:                              # %for.end239
                                        #   in Loop: Header=BB81_57 Depth=3
	jmp	.LBB81_63
.LBB81_63:                              # %for.inc240
                                        #   in Loop: Header=BB81_57 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_57
.LBB81_64:                              # %for.end242
                                        #   in Loop: Header=BB81_55 Depth=2
	jmp	.LBB81_65
.LBB81_65:                              # %for.inc243
                                        #   in Loop: Header=BB81_55 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_55
.LBB81_66:                              # %for.end245
                                        #   in Loop: Header=BB81_53 Depth=1
	jmp	.LBB81_67
.LBB81_67:                              # %for.inc246
                                        #   in Loop: Header=BB81_53 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_53
.LBB81_68:                              # %for.end248
	cmpl	$5, cnt_nonz8_8x8ts
	jg	.LBB81_83
# %bb.69:                               # %land.lhs.true251
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB81_71
# %bb.70:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB81_83
.LBB81_71:                              # %if.then257
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB81_72:                              # %for.cond258
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_74 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB81_82
# %bb.73:                               # %for.body261
                                        #   in Loop: Header=BB81_72 Depth=1
	movl	$0, -4(%rbp)
.LBB81_74:                              # %for.cond262
                                        #   Parent Loop BB81_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB81_80
# %bb.75:                               # %for.body265
                                        #   in Loop: Header=BB81_74 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB81_77
# %bb.76:                               # %if.then267
                                        #   in Loop: Header=BB81_74 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB81_78
.LBB81_77:                              # %if.else278
                                        #   in Loop: Header=BB81_74 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB81_78:                              # %if.end283
                                        #   in Loop: Header=BB81_74 Depth=2
	jmp	.LBB81_79
.LBB81_79:                              # %for.inc284
                                        #   in Loop: Header=BB81_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_74
.LBB81_80:                              # %for.end286
                                        #   in Loop: Header=BB81_72 Depth=1
	jmp	.LBB81_81
.LBB81_81:                              # %for.inc287
                                        #   in Loop: Header=BB81_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_72
.LBB81_82:                              # %for.end289
	jmp	.LBB81_95
.LBB81_83:                              # %if.else290
	movl	cbp8_8x8ts, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk8_8x8ts, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB81_84:                              # %for.cond293
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_86 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB81_94
# %bb.85:                               # %for.body296
                                        #   in Loop: Header=BB81_84 Depth=1
	movl	$0, -4(%rbp)
.LBB81_86:                              # %for.cond297
                                        #   Parent Loop BB81_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB81_92
# %bb.87:                               # %for.body300
                                        #   in Loop: Header=BB81_86 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB81_89
# %bb.88:                               # %if.then303
                                        #   in Loop: Header=BB81_86 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB81_90
.LBB81_89:                              # %if.else317
                                        #   in Loop: Header=BB81_86 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB81_90:                              # %if.end326
                                        #   in Loop: Header=BB81_86 Depth=2
	jmp	.LBB81_91
.LBB81_91:                              # %for.inc327
                                        #   in Loop: Header=BB81_86 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_86
.LBB81_92:                              # %for.end329
                                        #   in Loop: Header=BB81_84 Depth=1
	jmp	.LBB81_93
.LBB81_93:                              # %for.inc330
                                        #   in Loop: Header=BB81_84 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_84
.LBB81_94:                              # %for.end332
	jmp	.LBB81_95
.LBB81_95:                              # %if.end333
	movl	$0, -8(%rbp)
.LBB81_96:                              # %for.cond334
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_98 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB81_103
# %bb.97:                               # %for.body337
                                        #   in Loop: Header=BB81_96 Depth=1
	movl	$0, -4(%rbp)
.LBB81_98:                              # %for.cond338
                                        #   Parent Loop BB81_96 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB81_101
# %bb.99:                               # %for.body341
                                        #   in Loop: Header=BB81_98 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.100:                              # %for.inc382
                                        #   in Loop: Header=BB81_98 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_98
.LBB81_101:                             # %for.end384
                                        #   in Loop: Header=BB81_96 Depth=1
	jmp	.LBB81_102
.LBB81_102:                             # %for.inc385
                                        #   in Loop: Header=BB81_96 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_96
.LBB81_103:                             # %for.end387
	jmp	.LBB81_157
.LBB81_104:                             # %if.else388
	movl	$0, -16(%rbp)
.LBB81_105:                             # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_107 Depth 2
                                        #       Child Loop BB81_109 Depth 3
                                        #         Child Loop BB81_111 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_120
# %bb.106:                              # %for.body393
                                        #   in Loop: Header=BB81_105 Depth=1
	movl	$0, -12(%rbp)
.LBB81_107:                             # %for.cond394
                                        #   Parent Loop BB81_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_109 Depth 3
                                        #         Child Loop BB81_111 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB81_118
# %bb.108:                              # %for.body397
                                        #   in Loop: Header=BB81_107 Depth=2
	movl	$0, -8(%rbp)
.LBB81_109:                             # %for.cond398
                                        #   Parent Loop BB81_105 Depth=1
                                        #     Parent Loop BB81_107 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB81_111 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB81_116
# %bb.110:                              # %for.body401
                                        #   in Loop: Header=BB81_109 Depth=3
	movl	$0, -4(%rbp)
.LBB81_111:                             # %for.cond402
                                        #   Parent Loop BB81_105 Depth=1
                                        #     Parent Loop BB81_107 Depth=2
                                        #       Parent Loop BB81_109 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB81_114
# %bb.112:                              # %for.body405
                                        #   in Loop: Header=BB81_111 Depth=4
	movq	cofAC8x8, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.113:                              # %for.inc423
                                        #   in Loop: Header=BB81_111 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_111
.LBB81_114:                             # %for.end425
                                        #   in Loop: Header=BB81_109 Depth=3
	jmp	.LBB81_115
.LBB81_115:                             # %for.inc426
                                        #   in Loop: Header=BB81_109 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_109
.LBB81_116:                             # %for.end428
                                        #   in Loop: Header=BB81_107 Depth=2
	jmp	.LBB81_117
.LBB81_117:                             # %for.inc429
                                        #   in Loop: Header=BB81_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_107
.LBB81_118:                             # %for.end431
                                        #   in Loop: Header=BB81_105 Depth=1
	jmp	.LBB81_119
.LBB81_119:                             # %for.inc432
                                        #   in Loop: Header=BB81_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_105
.LBB81_120:                             # %for.end434
	cmpl	$5, cnt_nonz_8x8
	jg	.LBB81_136
# %bb.121:                              # %land.lhs.true437
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB81_136
# %bb.122:                              # %land.lhs.true441
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB81_124
# %bb.123:                              # %lor.lhs.false447
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB81_136
.LBB81_124:                             # %if.then451
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB81_125:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_127 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB81_135
# %bb.126:                              # %for.body457
                                        #   in Loop: Header=BB81_125 Depth=1
	movl	$0, -4(%rbp)
.LBB81_127:                             # %for.cond458
                                        #   Parent Loop BB81_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB81_133
# %bb.128:                              # %for.body461
                                        #   in Loop: Header=BB81_127 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB81_130
# %bb.129:                              # %if.then464
                                        #   in Loop: Header=BB81_127 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB81_131
.LBB81_130:                             # %if.else478
                                        #   in Loop: Header=BB81_127 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB81_131:                             # %if.end483
                                        #   in Loop: Header=BB81_127 Depth=2
	jmp	.LBB81_132
.LBB81_132:                             # %for.inc484
                                        #   in Loop: Header=BB81_127 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_127
.LBB81_133:                             # %for.end486
                                        #   in Loop: Header=BB81_125 Depth=1
	jmp	.LBB81_134
.LBB81_134:                             # %for.inc487
                                        #   in Loop: Header=BB81_125 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_125
.LBB81_135:                             # %for.end489
	jmp	.LBB81_148
.LBB81_136:                             # %if.else490
	movl	cbp8x8, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movslq	cbp_blk8x8, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB81_137:                             # %for.cond494
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_139 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB81_147
# %bb.138:                              # %for.body497
                                        #   in Loop: Header=BB81_137 Depth=1
	movl	$0, -4(%rbp)
.LBB81_139:                             # %for.cond498
                                        #   Parent Loop BB81_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB81_145
# %bb.140:                              # %for.body501
                                        #   in Loop: Header=BB81_139 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB81_142
# %bb.141:                              # %if.then504
                                        #   in Loop: Header=BB81_139 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB81_143
.LBB81_142:                             # %if.else518
                                        #   in Loop: Header=BB81_139 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB81_143:                             # %if.end527
                                        #   in Loop: Header=BB81_139 Depth=2
	jmp	.LBB81_144
.LBB81_144:                             # %for.inc528
                                        #   in Loop: Header=BB81_139 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_139
.LBB81_145:                             # %for.end530
                                        #   in Loop: Header=BB81_137 Depth=1
	jmp	.LBB81_146
.LBB81_146:                             # %for.inc531
                                        #   in Loop: Header=BB81_137 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_137
.LBB81_147:                             # %for.end533
	jmp	.LBB81_148
.LBB81_148:                             # %if.end534
	movl	$0, -8(%rbp)
.LBB81_149:                             # %for.cond535
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_151 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB81_156
# %bb.150:                              # %for.body538
                                        #   in Loop: Header=BB81_149 Depth=1
	movl	$0, -4(%rbp)
.LBB81_151:                             # %for.cond539
                                        #   Parent Loop BB81_149 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB81_154
# %bb.152:                              # %for.body542
                                        #   in Loop: Header=BB81_151 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.153:                              # %for.inc583
                                        #   in Loop: Header=BB81_151 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_151
.LBB81_154:                             # %for.end585
                                        #   in Loop: Header=BB81_149 Depth=1
	jmp	.LBB81_155
.LBB81_155:                             # %for.inc586
                                        #   in Loop: Header=BB81_149 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_149
.LBB81_156:                             # %for.end588
	jmp	.LBB81_157
.LBB81_157:                             # %if.end589
	cmpl	$931212434, -40(%rbp)   # imm = 0x37812C92
	jne	.LBB81_159
.LBB81_158:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_159:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_158
.Lfunc_end81:
	.size	SetCoeffAndReconstruction8x8.52, .Lfunc_end81-SetCoeffAndReconstruction8x8.52
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function encode_one_macroblock.53
.LCPI82_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI82_1:
	.quad	4622945017495814144     # double 12
.LCPI82_2:
	.quad	4607182418800017408     # double 1
.LCPI82_3:
	.quad	4587366580439587226     # double 0.050000000000000003
.LCPI82_4:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI82_5:
	.quad	4611686018427387904     # double 2
.LCPI82_6:
	.quad	4613937818241073152     # double 3
.LCPI82_7:
	.quad	4608983858650965606     # double 1.3999999999999999
.LCPI82_8:
	.quad	4616189618054758400     # double 4
.LCPI82_9:
	.quad	4604300115038500291     # double 0.68000000000000005
.LCPI82_10:
	.quad	4618441417868443648     # double 6
.LCPI82_11:
	.quad	4605380978949069210     # double 0.80000000000000004
.LCPI82_12:
	.quad	4600877379321698714     # double 0.40000000000000002
.LCPI82_13:
	.quad	4596373779694328218     # double 0.20000000000000001
.LCPI82_14:
	.quad	4606732058837280358     # double 0.94999999999999996
.LCPI82_15:
	.quad	4602678819172646912     # double 0.5
.LCPI82_16:
	.quad	4679240012837945344     # double 65536
.LCPI82_17:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI82_18:
	.quad	4625196817309499392     # double 16
	.text
	.globl	encode_one_macroblock.53
	.p2align	4, 0x90
	.type	encode_one_macroblock.53,@function
encode_one_macroblock.53:               # @encode_one_macroblock.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$480, %rsp              # imm = 0x1E0
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	vmovsd	.LCPI82_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1933149464, -408(%rbp) # imm = 0x73398518
	vxorps	%xmm1, %xmm1, %xmm1
	vmovsd	%xmm1, -296(%rbp)
	vmovsd	%xmm0, -472(%rbp)
	movl	$2147483647, -208(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -276(%rbp)
	movl	$0, -176(%rbp)
	movw	$0, -36(%rbp)
	movl	$0, -60(%rbp)
	movl	-208(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, -140(%rbp)
	movl	$0, -260(%rbp)
	movl	$0, -264(%rbp)
	movl	$0, -184(%rbp)
	movl	$0, -316(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB82_2
# %bb.1:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB82_4
.LBB82_2:                               # %land.lhs.true
	movq	img, %rax
	movl	140(%rax), %eax
	movq	img, %rcx
	cmpl	88(%rcx), %eax
	jne	.LBB82_4
# %bb.3:                                # %land.lhs.true4
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	cmpl	92(%rcx), %eax
	movb	$1, %cl
	jne	.LBB82_5
.LBB82_4:                               # %lor.rhs
	movq	img, %rax
	cmpl	$2, 24(%rax)
	sete	%cl
.LBB82_5:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -136(%rbp)
	movq	img, %rcx
	cmpl	$3, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -300(%rbp)
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -416(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	input, %rcx
	cmpl	$1, 2908(%rcx)
	jne	.LBB82_13
# %bb.6:                                # %land.lhs.true19
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$2, 2464(%rcx)
	jne	.LBB82_13
# %bb.7:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB82_12
# %bb.8:                                # %lor.lhs.false25
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB82_12
# %bb.9:                                # %lor.rhs29
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB82_11
# %bb.10:                               # %land.rhs33
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB82_11:                              # %land.end
.LBB82_12:                              # %lor.end36
.LBB82_13:                              # %land.end38
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	movl	$1, %edx
	cmovnel	%eax, %edx
	movl	%edx, -304(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB82_18
# %bb.14:                               # %land.lhs.true40
	xorl	%ecx, %ecx
	movq	input, %rax
	cmpl	$0, 2908(%rax)
	je	.LBB82_18
# %bb.15:                               # %land.rhs43
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %cl
	je	.LBB82_17
# %bb.16:                               # %lor.rhs47
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%cl
.LBB82_17:                              # %lor.end51
.LBB82_18:                              # %land.end53
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -288(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB82_20
# %bb.19:                               # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB82_21
.LBB82_20:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB82_21
.LBB82_21:                              # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -432(%rbp)
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	%rcx, -392(%rbp)
	movw	$-1, -38(%rbp)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movq	%rcx, -424(%rbp)
	movq	img, %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB82_23
# %bb.22:                               # %land.rhs62
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB82_23:                              # %land.end64
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -284(%rbp)
	movl	$0, -132(%rbp)
	cmpl	$0, -284(%rbp)
	je	.LBB82_28
# %bb.24:                               # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB82_26
# %bb.25:                               # %if.then69
	movl	$4, -64(%rbp)
	jmp	.LBB82_27
.LBB82_26:                              # %if.else
	movl	$2, -64(%rbp)
.LBB82_27:                              # %if.end
	jmp	.LBB82_29
.LBB82_28:                              # %if.else70
	movl	$0, -64(%rbp)
.LBB82_29:                              # %if.end71
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB82_31
# %bb.30:                               # %if.then73
	movb	$0, %al
	callq	decide_intrabk_SAD
.LBB82_31:                              # %if.end74
	movq	img, %rax
	movl	12(%rax), %edi
	callq	RandomIntra
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orl	-136(%rbp), %eax
	movl	%eax, -136(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	movl	%eax, -332(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovel	%edx, %eax
	movl	%eax, -348(%rbp)
	movl	$1, -344(%rbp)
	cmpl	$0, -136(%rbp)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -384(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB82_33
# %bb.32:                               # %land.rhs86
	movq	input, %rax
	cmpl	$0, 2368(%rax)
	setne	%cl
.LBB82_33:                              # %land.end88
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -380(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB82_35
# %bb.34:                               # %land.rhs92
	movq	input, %rax
	cmpl	$0, 2372(%rax)
	setne	%al
.LBB82_35:                              # %land.end94
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -376(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB82_37
# %bb.36:                               # %land.rhs98
	movq	input, %rax
	cmpl	$0, 2376(%rax)
	setne	%cl
.LBB82_37:                              # %land.end100
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -372(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB82_39
# %bb.38:                               # %land.rhs104
	movq	input, %rax
	cmpl	$0, 2380(%rax)
	setne	%al
.LBB82_39:                              # %land.end106
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -368(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB82_41
# %bb.40:                               # %land.rhs110
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	setne	%cl
.LBB82_41:                              # %land.end112
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -364(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB82_43
# %bb.42:                               # %land.rhs116
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	setne	%al
.LBB82_43:                              # %land.end118
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -360(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB82_45
# %bb.44:                               # %land.rhs122
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	setne	%cl
.LBB82_45:                              # %land.end124
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -356(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB82_47
# %bb.46:                               # %if.then130
	movl	$0, -356(%rbp)
	movl	$0, -360(%rbp)
	movl	$0, -364(%rbp)
.LBB82_47:                              # %if.end134
	cmpl	$0, -368(%rbp)
	movb	$1, %al
	jne	.LBB82_51
# %bb.48:                               # %lor.lhs.false137
	cmpl	$0, -364(%rbp)
	movb	$1, %al
	jne	.LBB82_51
# %bb.49:                               # %lor.lhs.false140
	cmpl	$0, -360(%rbp)
	movb	$1, %al
	jne	.LBB82_51
# %bb.50:                               # %lor.rhs143
	cmpl	$0, -356(%rbp)
	setne	%al
.LBB82_51:                              # %lor.end146
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -352(%rbp)
	movl	-416(%rbp), %eax
	movl	%eax, -336(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB82_67
# %bb.52:                               # %if.then152
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB82_53:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_55 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_66
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB82_53 Depth=1
	movl	$0, -56(%rbp)
.LBB82_55:                              # %for.cond156
                                        #   Parent Loop BB82_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB82_64
# %bb.56:                               # %for.body161
                                        #   in Loop: Header=BB82_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB82_59
# %bb.57:                               # %land.lhs.true168
                                        #   in Loop: Header=BB82_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-88(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB82_59
# %bb.58:                               # %if.then177
                                        #   in Loop: Header=BB82_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB82_59:                              # %if.end183
                                        #   in Loop: Header=BB82_55 Depth=2
	movq	img, %rax
	cmpl	$2, 28(%rax)
	jne	.LBB82_62
# %bb.60:                               # %land.lhs.true187
                                        #   in Loop: Header=BB82_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-88(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB82_62
# %bb.61:                               # %if.then196
                                        #   in Loop: Header=BB82_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB82_62:                              # %if.end202
                                        #   in Loop: Header=BB82_55 Depth=2
	jmp	.LBB82_63
.LBB82_63:                              # %for.inc
                                        #   in Loop: Header=BB82_55 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB82_55
.LBB82_64:                              # %for.end
                                        #   in Loop: Header=BB82_53 Depth=1
	jmp	.LBB82_65
.LBB82_65:                              # %for.inc203
                                        #   in Loop: Header=BB82_53 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB82_53
.LBB82_66:                              # %for.end205
	jmp	.LBB82_93
.LBB82_67:                              # %if.else206
	cmpl	$0, -284(%rbp)
	je	.LBB82_83
# %bb.68:                               # %if.then208
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB82_69:                              # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_71 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_82
# %bb.70:                               # %for.body214
                                        #   in Loop: Header=BB82_69 Depth=1
	movl	$0, -56(%rbp)
.LBB82_71:                              # %for.cond215
                                        #   Parent Loop BB82_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB82_80
# %bb.72:                               # %for.body220
                                        #   in Loop: Header=BB82_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB82_75
# %bb.73:                               # %land.lhs.true230
                                        #   in Loop: Header=BB82_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, (%rax)
	jne	.LBB82_75
# %bb.74:                               # %if.then238
                                        #   in Loop: Header=BB82_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB82_75:                              # %if.end244
                                        #   in Loop: Header=BB82_71 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	jne	.LBB82_78
# %bb.76:                               # %land.lhs.true249
                                        #   in Loop: Header=BB82_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB82_78
# %bb.77:                               # %if.then257
                                        #   in Loop: Header=BB82_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB82_78:                              # %if.end263
                                        #   in Loop: Header=BB82_71 Depth=2
	jmp	.LBB82_79
.LBB82_79:                              # %for.inc264
                                        #   in Loop: Header=BB82_71 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB82_71
.LBB82_80:                              # %for.end266
                                        #   in Loop: Header=BB82_69 Depth=1
	jmp	.LBB82_81
.LBB82_81:                              # %for.inc267
                                        #   in Loop: Header=BB82_69 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB82_69
.LBB82_82:                              # %for.end269
	jmp	.LBB82_92
.LBB82_83:                              # %if.else270
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB82_84:                              # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_86 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_91
# %bb.85:                               # %for.body276
                                        #   in Loop: Header=BB82_84 Depth=1
	movl	$0, -56(%rbp)
.LBB82_86:                              # %for.cond277
                                        #   Parent Loop BB82_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB82_89
# %bb.87:                               # %for.body282
                                        #   in Loop: Header=BB82_86 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
# %bb.88:                               # %for.inc288
                                        #   in Loop: Header=BB82_86 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB82_86
.LBB82_89:                              # %for.end290
                                        #   in Loop: Header=BB82_84 Depth=1
	jmp	.LBB82_90
.LBB82_90:                              # %for.inc291
                                        #   in Loop: Header=BB82_84 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB82_84
.LBB82_91:                              # %for.end293
	jmp	.LBB82_92
.LBB82_92:                              # %if.end294
	jmp	.LBB82_93
.LBB82_93:                              # %if.end295
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB82_162
# %bb.94:                               # %if.then298
	vmovsd	.LCPI82_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	40(%rax), %xmm0, %xmm1
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movq	input, %rax
	cmpl	$0, 3332(%rax)
	je	.LBB82_100
# %bb.95:                               # %if.then303
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB82_98
# %bb.96:                               # %land.lhs.true307
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB82_98
# %bb.97:                               # %if.then310
	vmovsd	.LCPI82_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI82_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	vmovsd	3376(%rax), %xmm2       # xmm2 = mem[0],zero
	vmovsd	%xmm2, -456(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-456(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB82_99
.LBB82_98:                              # %if.else315
	vmovsd	.LCPI82_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI82_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	vmovsd	3336(%rax,%rcx,8), %xmm2 # xmm2 = mem[0],zero
	vmovsd	%xmm2, -464(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-464(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
.LBB82_99:                              # %if.end326
	jmp	.LBB82_159
.LBB82_100:                             # %if.else327
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB82_103
# %bb.101:                              # %land.lhs.true331
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB82_103
# %bb.102:                              # %cond.true335
	vmovsd	.LCPI82_2(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB82_104
.LBB82_103:                             # %cond.false336
	vmovsd	.LCPI82_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI82_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	vcvtsi2sdl	20(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vsubsd	%xmm1, %xmm0, %xmm0
.LBB82_104:                             # %cond.end340
	vmovsd	%xmm0, -480(%rbp)
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	jle	.LBB82_130
# %bb.105:                              # %if.then344
	vmovsd	.LCPI82_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI82_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI82_9(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB82_116
# %bb.106:                              # %cond.true352
	vmovsd	.LCPI82_8(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI82_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB82_108
# %bb.107:                              # %cond.true356
	vmovsd	.LCPI82_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB82_109
.LBB82_108:                             # %cond.false357
	vmovsd	.LCPI82_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB82_109:                             # %cond.end359
	vmovsd	.LCPI82_5(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB82_111
# %bb.110:                              # %cond.true363
	vmovsd	.LCPI82_5(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB82_115
.LBB82_111:                             # %cond.false364
	vmovsd	.LCPI82_8(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI82_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB82_113
# %bb.112:                              # %cond.true368
	vmovsd	.LCPI82_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB82_114
.LBB82_113:                             # %cond.false369
	vmovsd	.LCPI82_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB82_114:                             # %cond.end371
.LBB82_115:                             # %cond.end373
	jmp	.LBB82_129
.LBB82_116:                             # %cond.false375
	cmpl	$0, -300(%rbp)
	je	.LBB82_127
# %bb.117:                              # %cond.true377
	vmovsd	.LCPI82_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI82_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB82_119
# %bb.118:                              # %cond.true381
	vmovsd	.LCPI82_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB82_120
.LBB82_119:                             # %cond.false382
	vmovsd	.LCPI82_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB82_120:                             # %cond.end384
	vmovsd	.LCPI82_7(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB82_122
# %bb.121:                              # %cond.true388
	vmovsd	.LCPI82_7(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB82_126
.LBB82_122:                             # %cond.false389
	vmovsd	.LCPI82_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI82_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB82_124
# %bb.123:                              # %cond.true393
	vmovsd	.LCPI82_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB82_125
.LBB82_124:                             # %cond.false394
	vmovsd	.LCPI82_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB82_125:                             # %cond.end396
.LBB82_126:                             # %cond.end398
	jmp	.LBB82_128
.LBB82_127:                             # %cond.false400
	vmovsd	.LCPI82_2(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB82_128
.LBB82_128:                             # %cond.end401
.LBB82_129:                             # %cond.end403
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB82_146
.LBB82_130:                             # %if.else406
	vmovsd	.LCPI82_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI82_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI82_4(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB82_132
# %bb.131:                              # %cond.true414
	vmovsd	.LCPI82_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB82_145
.LBB82_132:                             # %cond.false415
	cmpl	$0, -300(%rbp)
	je	.LBB82_143
# %bb.133:                              # %cond.true417
	vmovsd	.LCPI82_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI82_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB82_135
# %bb.134:                              # %cond.true421
	vmovsd	.LCPI82_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB82_136
.LBB82_135:                             # %cond.false422
	vmovsd	.LCPI82_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB82_136:                             # %cond.end424
	vmovsd	.LCPI82_7(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB82_138
# %bb.137:                              # %cond.true428
	vmovsd	.LCPI82_7(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB82_142
.LBB82_138:                             # %cond.false429
	vmovsd	.LCPI82_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI82_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB82_140
# %bb.139:                              # %cond.true433
	vmovsd	.LCPI82_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB82_141
.LBB82_140:                             # %cond.false434
	vmovsd	.LCPI82_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB82_141:                             # %cond.end436
.LBB82_142:                             # %cond.end438
	jmp	.LBB82_144
.LBB82_143:                             # %cond.false440
	vmovsd	.LCPI82_2(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB82_144
.LBB82_144:                             # %cond.end441
.LBB82_145:                             # %cond.end443
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB82_146:                             # %if.end446
	movq	input, %rax
	cmpl	$2, 1320(%rax)
	jne	.LBB82_154
# %bb.147:                              # %if.then449
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB82_153
# %bb.148:                              # %land.lhs.true453
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB82_153
# %bb.149:                              # %if.then456
	vmovsd	.LCPI82_12(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI82_13(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB82_151
# %bb.150:                              # %cond.true464
	vmovsd	.LCPI82_12(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB82_152
.LBB82_151:                             # %cond.false465
	vmovsd	.LCPI82_13(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
.LBB82_152:                             # %cond.end473
	vmovsd	.LCPI82_2(%rip), %xmm1  # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB82_153:                             # %if.end477
	jmp	.LBB82_158
.LBB82_154:                             # %if.else478
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB82_157
# %bb.155:                              # %land.lhs.true482
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB82_157
# %bb.156:                              # %if.then485
	vmovsd	.LCPI82_11(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB82_157:                             # %if.end487
	jmp	.LBB82_158
.LBB82_158:                             # %if.end488
	vmovsd	-480(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB82_159:                             # %if.end490
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB82_161
# %bb.160:                              # %if.then492
	vmovsd	.LCPI82_14(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB82_161:                             # %if.end494
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	sqrt
	vmovsd	%xmm0, -168(%rbp)
	jmp	.LBB82_166
.LBB82_162:                             # %if.else496
	xorl	%eax, %eax
	movq	img, %rcx
	movl	40(%rcx), %ecx
	subl	$12, %ecx
	cmpl	%ecx, %eax
	jle	.LBB82_164
# %bb.163:                              # %cond.true501
	xorl	%eax, %eax
	jmp	.LBB82_165
.LBB82_164:                             # %cond.false502
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
.LBB82_165:                             # %cond.end505
	cltq
	vcvtsi2sdl	QP2QUANT(,%rax,4), %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	vmovsd	%xmm0, -160(%rbp)
.LBB82_166:                             # %if.end510
	vmovsd	.LCPI82_15(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI82_16(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -32(%rbp)
.LBB82_167:                             # %for.cond514
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$15, -32(%rbp)
	jge	.LBB82_170
# %bb.168:                              # %for.body517
                                        #   in Loop: Header=BB82_167 Depth=1
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
# %bb.169:                              # %for.inc520
                                        #   in Loop: Header=BB82_167 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB82_167
.LBB82_170:                             # %for.end522
	movl	$0, -252(%rbp)
.LBB82_171:                             # %for.cond523
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_181 Depth 2
                                        #       Child Loop BB82_184 Depth 3
                                        #         Child Loop BB82_190 Depth 4
                                        #         Child Loop BB82_210 Depth 4
                                        #         Child Loop BB82_300 Depth 4
                                        #           Child Loop BB82_302 Depth 5
                                        #         Child Loop BB82_309 Depth 4
                                        #           Child Loop BB82_311 Depth 5
                                        #         Child Loop BB82_326 Depth 4
                                        #           Child Loop BB82_328 Depth 5
                                        #         Child Loop BB82_335 Depth 4
                                        #           Child Loop BB82_337 Depth 5
                                        #         Child Loop BB82_355 Depth 4
                                        #           Child Loop BB82_357 Depth 5
                                        #         Child Loop BB82_374 Depth 4
                                        #           Child Loop BB82_376 Depth 5
                                        #     Child Loop BB82_416 Depth 2
                                        #       Child Loop BB82_418 Depth 3
                                        #         Child Loop BB82_445 Depth 4
                                        #         Child Loop BB82_464 Depth 4
                                        #           Child Loop BB82_466 Depth 5
                                        #         Child Loop BB82_473 Depth 4
                                        #         Child Loop BB82_508 Depth 4
                                        #           Child Loop BB82_510 Depth 5
                                        #         Child Loop BB82_532 Depth 4
                                        #           Child Loop BB82_534 Depth 5
                                        #             Child Loop BB82_536 Depth 6
                                        #         Child Loop BB82_544 Depth 4
                                        #           Child Loop BB82_546 Depth 5
                                        #       Child Loop BB82_569 Depth 3
                                        #         Child Loop BB82_571 Depth 4
                                        #           Child Loop BB82_573 Depth 5
                                        #       Child Loop BB82_581 Depth 3
                                        #         Child Loop BB82_583 Depth 4
                                        #     Child Loop BB82_601 Depth 2
                                        #       Child Loop BB82_603 Depth 3
                                        #         Child Loop BB82_614 Depth 4
                                        #         Child Loop BB82_633 Depth 4
                                        #           Child Loop BB82_635 Depth 5
                                        #         Child Loop BB82_642 Depth 4
                                        #         Child Loop BB82_677 Depth 4
                                        #           Child Loop BB82_679 Depth 5
                                        #         Child Loop BB82_701 Depth 4
                                        #           Child Loop BB82_703 Depth 5
                                        #             Child Loop BB82_705 Depth 6
                                        #         Child Loop BB82_713 Depth 4
                                        #           Child Loop BB82_715 Depth 5
                                        #         Child Loop BB82_723 Depth 4
                                        #           Child Loop BB82_725 Depth 5
                                        #       Child Loop BB82_745 Depth 3
                                        #         Child Loop BB82_747 Depth 4
                                        #           Child Loop BB82_749 Depth 5
                                        #       Child Loop BB82_757 Depth 3
                                        #         Child Loop BB82_759 Depth 4
                                        #       Child Loop BB82_766 Depth 3
                                        #         Child Loop BB82_768 Depth 4
                                        #       Child Loop BB82_778 Depth 3
                                        #         Child Loop BB82_780 Depth 4
                                        #       Child Loop BB82_786 Depth 3
                                        #       Child Loop BB82_791 Depth 3
                                        #         Child Loop BB82_793 Depth 4
                                        #     Child Loop BB82_803 Depth 2
                                        #       Child Loop BB82_805 Depth 3
                                        #     Child Loop BB82_835 Depth 2
                                        #       Child Loop BB82_853 Depth 3
                                        #         Child Loop BB82_908 Depth 4
                                        #           Child Loop BB82_911 Depth 5
                                        #             Child Loop BB82_913 Depth 6
                                        #           Child Loop BB82_920 Depth 5
                                        #             Child Loop BB82_922 Depth 6
                                        #         Child Loop BB82_955 Depth 4
                                        #           Child Loop BB82_957 Depth 5
                                        #     Child Loop BB82_981 Depth 2
                                        #       Child Loop BB82_1014 Depth 3
                                        #         Child Loop BB82_1017 Depth 4
                                        #           Child Loop BB82_1019 Depth 5
                                        #         Child Loop BB82_1026 Depth 4
                                        #           Child Loop BB82_1028 Depth 5
                                        #       Child Loop BB82_1061 Depth 3
                                        #         Child Loop BB82_1063 Depth 4
                                        #     Child Loop BB82_1113 Depth 2
                                        #       Child Loop BB82_1115 Depth 3
                                        #     Child Loop BB82_1127 Depth 2
                                        #       Child Loop BB82_1129 Depth 3
                                        #         Child Loop BB82_1131 Depth 4
                                        #     Child Loop BB82_1141 Depth 2
                                        #       Child Loop BB82_1143 Depth 3
                                        #     Child Loop BB82_1152 Depth 2
                                        #       Child Loop BB82_1154 Depth 3
                                        #     Child Loop BB82_1160 Depth 2
                                        #       Child Loop BB82_1162 Depth 3
                                        #     Child Loop BB82_1174 Depth 2
                                        #       Child Loop BB82_1176 Depth 3
                                        #         Child Loop BB82_1178 Depth 4
                                        #     Child Loop BB82_1189 Depth 2
                                        #       Child Loop BB82_1191 Depth 3
                                        #     Child Loop BB82_1202 Depth 2
                                        #       Child Loop BB82_1204 Depth 3
                                        #     Child Loop BB82_1211 Depth 2
                                        #       Child Loop BB82_1213 Depth 3
                                        #     Child Loop BB82_1221 Depth 2
                                        #       Child Loop BB82_1223 Depth 3
                                        #     Child Loop BB82_1229 Depth 2
                                        #       Child Loop BB82_1231 Depth 3
                                        #     Child Loop BB82_1237 Depth 2
                                        #       Child Loop BB82_1239 Depth 3
                                        #     Child Loop BB82_1245 Depth 2
                                        #       Child Loop BB82_1247 Depth 3
	movl	-252(%rbp), %eax
	cmpl	-304(%rbp), %eax
	jge	.LBB82_1291
# %bb.172:                              # %for.body526
                                        #   in Loop: Header=BB82_171 Depth=1
	cmpl	$2, -304(%rbp)
	jne	.LBB82_177
# %bb.173:                              # %if.then529
                                        #   in Loop: Header=BB82_171 Depth=1
	cmpl	$0, -252(%rbp)
	jne	.LBB82_175
# %bb.174:                              # %if.then532
                                        #   in Loop: Header=BB82_171 Depth=1
	movq	input, %rax
	movl	$1, 2464(%rax)
	jmp	.LBB82_176
.LBB82_175:                             # %if.else534
                                        #   in Loop: Header=BB82_171 Depth=1
	movq	input, %rax
	movl	$2, 2464(%rax)
.LBB82_176:                             # %if.end536
                                        #   in Loop: Header=BB82_171 Depth=1
	jmp	.LBB82_177
.LBB82_177:                             # %if.end537
                                        #   in Loop: Header=BB82_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
	cmpl	$0, -136(%rbp)
	jne	.LBB82_831
# %bb.178:                              # %if.then539
                                        #   in Loop: Header=BB82_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB82_180
# %bb.179:                              # %if.then541
                                        #   in Loop: Header=BB82_171 Depth=1
	movb	$0, %al
	callq	Get_Direct_Motion_Vectors
.LBB82_180:                             # %if.end542
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
	movl	$1, best_mode
	movl	$1, -32(%rbp)
.LBB82_181:                             # %for.cond543
                                        #   Parent Loop BB82_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_184 Depth 3
                                        #         Child Loop BB82_190 Depth 4
                                        #         Child Loop BB82_210 Depth 4
                                        #         Child Loop BB82_300 Depth 4
                                        #           Child Loop BB82_302 Depth 5
                                        #         Child Loop BB82_309 Depth 4
                                        #           Child Loop BB82_311 Depth 5
                                        #         Child Loop BB82_326 Depth 4
                                        #           Child Loop BB82_328 Depth 5
                                        #         Child Loop BB82_335 Depth 4
                                        #           Child Loop BB82_337 Depth 5
                                        #         Child Loop BB82_355 Depth 4
                                        #           Child Loop BB82_357 Depth 5
                                        #         Child Loop BB82_374 Depth 4
                                        #           Child Loop BB82_376 Depth 5
	cmpl	$4, -32(%rbp)
	jge	.LBB82_413
# %bb.182:                              # %for.body546
                                        #   in Loop: Header=BB82_181 Depth=2
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB82_411
# %bb.183:                              # %if.then553
                                        #   in Loop: Header=BB82_181 Depth=2
	movl	$0, -60(%rbp)
	movl	$0, -28(%rbp)
.LBB82_184:                             # %for.cond554
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_181 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB82_190 Depth 4
                                        #         Child Loop BB82_210 Depth 4
                                        #         Child Loop BB82_300 Depth 4
                                        #           Child Loop BB82_302 Depth 5
                                        #         Child Loop BB82_309 Depth 4
                                        #           Child Loop BB82_311 Depth 5
                                        #         Child Loop BB82_326 Depth 4
                                        #           Child Loop BB82_328 Depth 5
                                        #         Child Loop BB82_335 Depth 4
                                        #           Child Loop BB82_337 Depth 5
                                        #         Child Loop BB82_355 Depth 4
                                        #           Child Loop BB82_357 Depth 5
                                        #         Child Loop BB82_374 Depth 4
                                        #           Child Loop BB82_376 Depth 5
	movl	-28(%rbp), %eax
	movl	-32(%rbp), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	movl	$2, %edx
	cmovel	%ecx, %edx
	cmpl	%edx, %eax
	jge	.LBB82_404
# %bb.185:                              # %for.body560
                                        #   in Loop: Header=BB82_184 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	xorl	%ecx, %ecx
	cmpl	$1, -28(%rbp)
	jne	.LBB82_187
# %bb.186:                              # %land.rhs563
                                        #   in Loop: Header=BB82_184 Depth=3
	cmpl	$2, -32(%rbp)
	sete	%cl
.LBB82_187:                             # %land.end566
                                        #   in Loop: Header=BB82_184 Depth=3
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$2, %ecx
	cmovnel	%ecx, %edx
	movl	%edx, -24(%rbp)
	cmpl	$1, -28(%rbp)
	jne	.LBB82_189
# %bb.188:                              # %land.rhs571
                                        #   in Loop: Header=BB82_184 Depth=3
	cmpl	$3, -32(%rbp)
	sete	%al
.LBB82_189:                             # %land.end574
                                        #   in Loop: Header=BB82_184 Depth=3
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	-208(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB82_190:                             # %for.cond577
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_181 Depth=2
                                        #       Parent Loop BB82_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB82_208
# %bb.191:                              # %for.body584
                                        #   in Loop: Header=BB82_190 Depth=4
	cmpl	$0, -288(%rbp)
	je	.LBB82_194
# %bb.192:                              # %lor.lhs.false586
                                        #   in Loop: Header=BB82_190 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB82_194
# %bb.193:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB82_190 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB82_206
.LBB82_194:                             # %if.then594
                                        #   in Loop: Header=BB82_190 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB82_199
# %bb.195:                              # %cond.true597
                                        #   in Loop: Header=BB82_190 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB82_197
# %bb.196:                              # %cond.true603
                                        #   in Loop: Header=BB82_190 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB82_198
.LBB82_197:                             # %cond.false604
                                        #   in Loop: Header=BB82_190 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB82_198:                             # %cond.end607
                                        #   in Loop: Header=BB82_190 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB82_203
.LBB82_199:                             # %cond.false610
                                        #   in Loop: Header=BB82_190 Depth=4
	vmovsd	.LCPI82_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB82_201
# %bb.200:                              # %cond.true615
                                        #   in Loop: Header=BB82_190 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB82_202
.LBB82_201:                             # %cond.false617
                                        #   in Loop: Header=BB82_190 Depth=4
	movl	$1, %eax
	jmp	.LBB82_202
.LBB82_202:                             # %cond.end618
                                        #   in Loop: Header=BB82_190 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB82_203:                             # %cond.end623
                                        #   in Loop: Header=BB82_190 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB82_205
# %bb.204:                              # %if.then635
                                        #   in Loop: Header=BB82_190 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB82_205:                             # %if.end636
                                        #   in Loop: Header=BB82_190 Depth=4
	jmp	.LBB82_206
.LBB82_206:                             # %if.end637
                                        #   in Loop: Header=BB82_190 Depth=4
	jmp	.LBB82_207
.LBB82_207:                             # %for.inc638
                                        #   in Loop: Header=BB82_190 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB82_190
.LBB82_208:                             # %for.end640
                                        #   in Loop: Header=BB82_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB82_296
# %bb.209:                              # %if.then642
                                        #   in Loop: Header=BB82_184 Depth=3
	movl	-208(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB82_210:                             # %for.cond643
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_181 Depth=2
                                        #       Parent Loop BB82_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB82_224
# %bb.211:                              # %for.body650
                                        #   in Loop: Header=BB82_210 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB82_216
# %bb.212:                              # %cond.true653
                                        #   in Loop: Header=BB82_210 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB82_214
# %bb.213:                              # %cond.true659
                                        #   in Loop: Header=BB82_210 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB82_215
.LBB82_214:                             # %cond.false660
                                        #   in Loop: Header=BB82_210 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB82_215:                             # %cond.end663
                                        #   in Loop: Header=BB82_210 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB82_220
.LBB82_216:                             # %cond.false667
                                        #   in Loop: Header=BB82_210 Depth=4
	vmovsd	.LCPI82_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB82_218
# %bb.217:                              # %cond.true672
                                        #   in Loop: Header=BB82_210 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB82_219
.LBB82_218:                             # %cond.false674
                                        #   in Loop: Header=BB82_210 Depth=4
	movl	$1, %eax
	jmp	.LBB82_219
.LBB82_219:                             # %cond.end675
                                        #   in Loop: Header=BB82_210 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB82_220:                             # %cond.end680
                                        #   in Loop: Header=BB82_210 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB82_222
# %bb.221:                              # %if.then692
                                        #   in Loop: Header=BB82_210 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB82_222:                             # %if.end693
                                        #   in Loop: Header=BB82_210 Depth=4
	jmp	.LBB82_223
.LBB82_223:                             # %for.inc694
                                        #   in Loop: Header=BB82_210 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB82_210
.LBB82_224:                             # %for.end696
                                        #   in Loop: Header=BB82_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB82_232
# %bb.225:                              # %cond.true699
                                        #   in Loop: Header=BB82_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB82_227
# %bb.226:                              # %cond.true705
                                        #   in Loop: Header=BB82_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB82_228
.LBB82_227:                             # %cond.false706
                                        #   in Loop: Header=BB82_184 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB82_228:                             # %cond.end709
                                        #   in Loop: Header=BB82_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB82_230
# %bb.229:                              # %cond.true718
                                        #   in Loop: Header=BB82_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB82_231
.LBB82_230:                             # %cond.false719
                                        #   in Loop: Header=BB82_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB82_231:                             # %cond.end721
                                        #   in Loop: Header=BB82_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB82_236
.LBB82_232:                             # %cond.false726
                                        #   in Loop: Header=BB82_184 Depth=3
	vmovsd	.LCPI82_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB82_234
# %bb.233:                              # %cond.true731
                                        #   in Loop: Header=BB82_184 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB82_235
.LBB82_234:                             # %cond.false733
                                        #   in Loop: Header=BB82_184 Depth=3
	movl	$1, %eax
	jmp	.LBB82_235
.LBB82_235:                             # %cond.end734
                                        #   in Loop: Header=BB82_184 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB82_236:                             # %cond.end739
                                        #   in Loop: Header=BB82_184 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB82_258
# %bb.237:                              # %land.lhs.true745
                                        #   in Loop: Header=BB82_184 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB82_258
# %bb.238:                              # %land.lhs.true749
                                        #   in Loop: Header=BB82_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB82_258
# %bb.239:                              # %if.then751
                                        #   in Loop: Header=BB82_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB82_247
# %bb.240:                              # %cond.true754
                                        #   in Loop: Header=BB82_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB82_242
# %bb.241:                              # %cond.true760
                                        #   in Loop: Header=BB82_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB82_243
.LBB82_242:                             # %cond.false761
                                        #   in Loop: Header=BB82_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB82_243:                             # %cond.end763
                                        #   in Loop: Header=BB82_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB82_245
# %bb.244:                              # %cond.true772
                                        #   in Loop: Header=BB82_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB82_246
.LBB82_245:                             # %cond.false773
                                        #   in Loop: Header=BB82_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB82_246:                             # %cond.end775
                                        #   in Loop: Header=BB82_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB82_248
.LBB82_247:                             # %cond.false780
                                        #   in Loop: Header=BB82_184 Depth=3
	vmovsd	.LCPI82_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB82_248:                             # %cond.end784
                                        #   in Loop: Header=BB82_184 Depth=3
	movl	%eax, -148(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r9d, %r9d
	callq	BPredPartitionCost
	addl	-148(%rbp), %eax
	movl	%eax, -148(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB82_256
# %bb.249:                              # %cond.true790
                                        #   in Loop: Header=BB82_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB82_251
# %bb.250:                              # %cond.true796
                                        #   in Loop: Header=BB82_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB82_252
.LBB82_251:                             # %cond.false797
                                        #   in Loop: Header=BB82_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB82_252:                             # %cond.end799
                                        #   in Loop: Header=BB82_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB82_254
# %bb.253:                              # %cond.true808
                                        #   in Loop: Header=BB82_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB82_255
.LBB82_254:                             # %cond.false809
                                        #   in Loop: Header=BB82_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB82_255:                             # %cond.end811
                                        #   in Loop: Header=BB82_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB82_257
.LBB82_256:                             # %cond.false816
                                        #   in Loop: Header=BB82_184 Depth=3
	vmovsd	.LCPI82_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB82_257:                             # %cond.end820
                                        #   in Loop: Header=BB82_184 Depth=3
	movl	%eax, -180(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$1, %r9d
	callq	BPredPartitionCost
	addl	-180(%rbp), %eax
	movl	%eax, -180(%rbp)
	jmp	.LBB82_259
.LBB82_258:                             # %if.else824
                                        #   in Loop: Header=BB82_184 Depth=3
	movl	$2147483647, -148(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -180(%rbp) # imm = 0x7FFFFFFF
.LBB82_259:                             # %if.end825
                                        #   in Loop: Header=BB82_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB82_286
# %bb.260:                              # %land.lhs.true828
                                        #   in Loop: Header=BB82_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB82_286
# %bb.261:                              # %if.then831
                                        #   in Loop: Header=BB82_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB82_266
# %bb.262:                              # %land.lhs.true834
                                        #   in Loop: Header=BB82_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB82_266
# %bb.263:                              # %land.lhs.true837
                                        #   in Loop: Header=BB82_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB82_266
# %bb.264:                              # %land.lhs.true840
                                        #   in Loop: Header=BB82_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jge	.LBB82_266
# %bb.265:                              # %if.then843
                                        #   in Loop: Header=BB82_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB82_285
.LBB82_266:                             # %if.else845
                                        #   in Loop: Header=BB82_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB82_271
# %bb.267:                              # %land.lhs.true848
                                        #   in Loop: Header=BB82_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB82_271
# %bb.268:                              # %land.lhs.true851
                                        #   in Loop: Header=BB82_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB82_271
# %bb.269:                              # %land.lhs.true854
                                        #   in Loop: Header=BB82_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jge	.LBB82_271
# %bb.270:                              # %if.then857
                                        #   in Loop: Header=BB82_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB82_284
.LBB82_271:                             # %if.else859
                                        #   in Loop: Header=BB82_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB82_276
# %bb.272:                              # %land.lhs.true862
                                        #   in Loop: Header=BB82_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB82_276
# %bb.273:                              # %land.lhs.true865
                                        #   in Loop: Header=BB82_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB82_276
# %bb.274:                              # %land.lhs.true868
                                        #   in Loop: Header=BB82_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jge	.LBB82_276
# %bb.275:                              # %if.then871
                                        #   in Loop: Header=BB82_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movw	$0, -38(%rbp)
	jmp	.LBB82_283
.LBB82_276:                             # %if.else876
                                        #   in Loop: Header=BB82_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB82_281
# %bb.277:                              # %land.lhs.true879
                                        #   in Loop: Header=BB82_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB82_281
# %bb.278:                              # %land.lhs.true882
                                        #   in Loop: Header=BB82_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB82_281
# %bb.279:                              # %land.lhs.true885
                                        #   in Loop: Header=BB82_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jg	.LBB82_281
# %bb.280:                              # %if.then888
                                        #   in Loop: Header=BB82_184 Depth=3
	movw	$2, -50(%rbp)
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movl	-148(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$1, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$1, 71952(%rax,%rcx,2)
	jmp	.LBB82_282
.LBB82_281:                             # %if.else893
                                        #   in Loop: Header=BB82_184 Depth=3
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movw	$2, -50(%rbp)
	movl	-180(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$2, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$2, 71952(%rax,%rcx,2)
.LBB82_282:                             # %if.end898
                                        #   in Loop: Header=BB82_184 Depth=3
	jmp	.LBB82_283
.LBB82_283:                             # %if.end899
                                        #   in Loop: Header=BB82_184 Depth=3
	jmp	.LBB82_284
.LBB82_284:                             # %if.end900
                                        #   in Loop: Header=BB82_184 Depth=3
	jmp	.LBB82_285
.LBB82_285:                             # %if.end901
                                        #   in Loop: Header=BB82_184 Depth=3
	jmp	.LBB82_295
.LBB82_286:                             # %if.else902
                                        #   in Loop: Header=BB82_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB82_289
# %bb.287:                              # %land.lhs.true905
                                        #   in Loop: Header=BB82_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB82_289
# %bb.288:                              # %if.then908
                                        #   in Loop: Header=BB82_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB82_294
.LBB82_289:                             # %if.else910
                                        #   in Loop: Header=BB82_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB82_292
# %bb.290:                              # %land.lhs.true913
                                        #   in Loop: Header=BB82_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB82_292
# %bb.291:                              # %if.then916
                                        #   in Loop: Header=BB82_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB82_293
.LBB82_292:                             # %if.else918
                                        #   in Loop: Header=BB82_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB82_293:                             # %if.end920
                                        #   in Loop: Header=BB82_184 Depth=3
	jmp	.LBB82_294
.LBB82_294:                             # %if.end921
                                        #   in Loop: Header=BB82_184 Depth=3
	jmp	.LBB82_295
.LBB82_295:                             # %if.end922
                                        #   in Loop: Header=BB82_184 Depth=3
	jmp	.LBB82_297
.LBB82_296:                             # %if.else923
                                        #   in Loop: Header=BB82_184 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB82_297:                             # %if.end925
                                        #   in Loop: Header=BB82_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB82_353
# %bb.298:                              # %if.then928
                                        #   in Loop: Header=BB82_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB82_308
# %bb.299:                              # %if.then932
                                        #   in Loop: Header=BB82_184 Depth=3
	movl	$0, -24(%rbp)
.LBB82_300:                             # %for.cond933
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_181 Depth=2
                                        #       Parent Loop BB82_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB82_302 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB82_307
# %bb.301:                              # %for.body936
                                        #   in Loop: Header=BB82_300 Depth=4
	movl	$0, -20(%rbp)
.LBB82_302:                             # %for.cond937
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_181 Depth=2
                                        #       Parent Loop BB82_184 Depth=3
                                        #         Parent Loop BB82_300 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB82_305
# %bb.303:                              # %for.body940
                                        #   in Loop: Header=BB82_302 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.304:                              # %for.inc997
                                        #   in Loop: Header=BB82_302 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_302
.LBB82_305:                             # %for.end999
                                        #   in Loop: Header=BB82_300 Depth=4
	jmp	.LBB82_306
.LBB82_306:                             # %for.inc1000
                                        #   in Loop: Header=BB82_300 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_300
.LBB82_307:                             # %for.end1002
                                        #   in Loop: Header=BB82_184 Depth=3
	jmp	.LBB82_323
.LBB82_308:                             # %if.else1003
                                        #   in Loop: Header=BB82_184 Depth=3
	movl	$0, -24(%rbp)
.LBB82_309:                             # %for.cond1004
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_181 Depth=2
                                        #       Parent Loop BB82_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB82_311 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB82_322
# %bb.310:                              # %for.body1007
                                        #   in Loop: Header=BB82_309 Depth=4
	movl	$0, -20(%rbp)
.LBB82_311:                             # %for.cond1008
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_181 Depth=2
                                        #       Parent Loop BB82_184 Depth=3
                                        #         Parent Loop BB82_309 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB82_320
# %bb.312:                              # %for.body1011
                                        #   in Loop: Header=BB82_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB82_317
# %bb.313:                              # %if.then1016
                                        #   in Loop: Header=BB82_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB82_315
# %bb.314:                              # %cond.true1023
                                        #   in Loop: Header=BB82_311 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB82_316
.LBB82_315:                             # %cond.false1024
                                        #   in Loop: Header=BB82_311 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB82_316:                             # %cond.end1025
                                        #   in Loop: Header=BB82_311 Depth=5
	movq	%rax, -448(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-448(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-448(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB82_318
.LBB82_317:                             # %if.else1111
                                        #   in Loop: Header=BB82_311 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB82_318:                             # %if.end1217
                                        #   in Loop: Header=BB82_311 Depth=5
	jmp	.LBB82_319
.LBB82_319:                             # %for.inc1218
                                        #   in Loop: Header=BB82_311 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_311
.LBB82_320:                             # %for.end1220
                                        #   in Loop: Header=BB82_309 Depth=4
	jmp	.LBB82_321
.LBB82_321:                             # %for.inc1221
                                        #   in Loop: Header=BB82_309 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_309
.LBB82_322:                             # %for.end1223
                                        #   in Loop: Header=BB82_184 Depth=3
	jmp	.LBB82_323
.LBB82_323:                             # %if.end1224
                                        #   in Loop: Header=BB82_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB82_352
# %bb.324:                              # %if.then1226
                                        #   in Loop: Header=BB82_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB82_334
# %bb.325:                              # %if.then1230
                                        #   in Loop: Header=BB82_184 Depth=3
	movl	$0, -24(%rbp)
.LBB82_326:                             # %for.cond1231
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_181 Depth=2
                                        #       Parent Loop BB82_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB82_328 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB82_333
# %bb.327:                              # %for.body1234
                                        #   in Loop: Header=BB82_326 Depth=4
	movl	$0, -20(%rbp)
.LBB82_328:                             # %for.cond1235
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_181 Depth=2
                                        #       Parent Loop BB82_184 Depth=3
                                        #         Parent Loop BB82_326 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB82_331
# %bb.329:                              # %for.body1238
                                        #   in Loop: Header=BB82_328 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.330:                              # %for.inc1301
                                        #   in Loop: Header=BB82_328 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_328
.LBB82_331:                             # %for.end1303
                                        #   in Loop: Header=BB82_326 Depth=4
	jmp	.LBB82_332
.LBB82_332:                             # %for.inc1304
                                        #   in Loop: Header=BB82_326 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_326
.LBB82_333:                             # %for.end1306
                                        #   in Loop: Header=BB82_184 Depth=3
	jmp	.LBB82_351
.LBB82_334:                             # %if.else1307
                                        #   in Loop: Header=BB82_184 Depth=3
	movl	$0, -24(%rbp)
.LBB82_335:                             # %for.cond1308
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_181 Depth=2
                                        #       Parent Loop BB82_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB82_337 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB82_350
# %bb.336:                              # %for.body1311
                                        #   in Loop: Header=BB82_335 Depth=4
	movl	$0, -20(%rbp)
.LBB82_337:                             # %for.cond1312
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_181 Depth=2
                                        #       Parent Loop BB82_184 Depth=3
                                        #         Parent Loop BB82_335 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB82_348
# %bb.338:                              # %for.body1315
                                        #   in Loop: Header=BB82_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB82_343
# %bb.339:                              # %if.then1320
                                        #   in Loop: Header=BB82_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB82_341
# %bb.340:                              # %cond.true1328
                                        #   in Loop: Header=BB82_337 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB82_342
.LBB82_341:                             # %cond.false1330
                                        #   in Loop: Header=BB82_337 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB82_342:                             # %cond.end1332
                                        #   in Loop: Header=BB82_337 Depth=5
	movq	%rax, -440(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-440(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-440(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB82_346
.LBB82_343:                             # %if.else1419
                                        #   in Loop: Header=BB82_337 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB82_345
# %bb.344:                              # %if.then1474
                                        #   in Loop: Header=BB82_337 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB82_345:                             # %if.end1529
                                        #   in Loop: Header=BB82_337 Depth=5
	jmp	.LBB82_346
.LBB82_346:                             # %if.end1530
                                        #   in Loop: Header=BB82_337 Depth=5
	jmp	.LBB82_347
.LBB82_347:                             # %for.inc1531
                                        #   in Loop: Header=BB82_337 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_337
.LBB82_348:                             # %for.end1533
                                        #   in Loop: Header=BB82_335 Depth=4
	jmp	.LBB82_349
.LBB82_349:                             # %for.inc1534
                                        #   in Loop: Header=BB82_335 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_335
.LBB82_350:                             # %for.end1536
                                        #   in Loop: Header=BB82_184 Depth=3
	jmp	.LBB82_351
.LBB82_351:                             # %if.end1537
                                        #   in Loop: Header=BB82_184 Depth=3
	jmp	.LBB82_352
.LBB82_352:                             # %if.end1538
                                        #   in Loop: Header=BB82_184 Depth=3
	jmp	.LBB82_393
.LBB82_353:                             # %if.else1539
                                        #   in Loop: Header=BB82_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB82_373
# %bb.354:                              # %if.then1542
                                        #   in Loop: Header=BB82_184 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -24(%rbp)
.LBB82_355:                             # %for.cond1546
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_181 Depth=2
                                        #       Parent Loop BB82_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB82_357 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB82_372
# %bb.356:                              # %for.body1549
                                        #   in Loop: Header=BB82_355 Depth=4
	movl	$0, -20(%rbp)
.LBB82_357:                             # %for.cond1550
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_181 Depth=2
                                        #       Parent Loop BB82_184 Depth=3
                                        #         Parent Loop BB82_355 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB82_370
# %bb.358:                              # %for.body1553
                                        #   in Loop: Header=BB82_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB82_360
# %bb.359:                              # %if.then1557
                                        #   in Loop: Header=BB82_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB82_361
.LBB82_360:                             # %if.else1596
                                        #   in Loop: Header=BB82_357 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB82_361:                             # %if.end1676
                                        #   in Loop: Header=BB82_357 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB82_368
# %bb.362:                              # %if.then1678
                                        #   in Loop: Header=BB82_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB82_364
# %bb.363:                              # %if.then1682
                                        #   in Loop: Header=BB82_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB82_367
.LBB82_364:                             # %if.else1721
                                        #   in Loop: Header=BB82_357 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB82_366
# %bb.365:                              # %if.then1758
                                        #   in Loop: Header=BB82_357 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB82_366:                             # %if.end1805
                                        #   in Loop: Header=BB82_357 Depth=5
	jmp	.LBB82_367
.LBB82_367:                             # %if.end1806
                                        #   in Loop: Header=BB82_357 Depth=5
	jmp	.LBB82_368
.LBB82_368:                             # %if.end1807
                                        #   in Loop: Header=BB82_357 Depth=5
	jmp	.LBB82_369
.LBB82_369:                             # %for.inc1808
                                        #   in Loop: Header=BB82_357 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_357
.LBB82_370:                             # %for.end1810
                                        #   in Loop: Header=BB82_355 Depth=4
	jmp	.LBB82_371
.LBB82_371:                             # %for.inc1811
                                        #   in Loop: Header=BB82_355 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_355
.LBB82_372:                             # %for.end1813
                                        #   in Loop: Header=BB82_184 Depth=3
	jmp	.LBB82_392
.LBB82_373:                             # %if.else1814
                                        #   in Loop: Header=BB82_184 Depth=3
	movq	img, %rax
	movl	144(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -24(%rbp)
.LBB82_374:                             # %for.cond1818
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_181 Depth=2
                                        #       Parent Loop BB82_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB82_376 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB82_391
# %bb.375:                              # %for.body1821
                                        #   in Loop: Header=BB82_374 Depth=4
	movl	$0, -20(%rbp)
.LBB82_376:                             # %for.cond1822
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_181 Depth=2
                                        #       Parent Loop BB82_184 Depth=3
                                        #         Parent Loop BB82_374 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB82_389
# %bb.377:                              # %for.body1825
                                        #   in Loop: Header=BB82_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB82_379
# %bb.378:                              # %if.then1829
                                        #   in Loop: Header=BB82_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB82_380
.LBB82_379:                             # %if.else1868
                                        #   in Loop: Header=BB82_376 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB82_380:                             # %if.end1948
                                        #   in Loop: Header=BB82_376 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB82_387
# %bb.381:                              # %if.then1950
                                        #   in Loop: Header=BB82_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB82_383
# %bb.382:                              # %if.then1954
                                        #   in Loop: Header=BB82_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB82_386
.LBB82_383:                             # %if.else1993
                                        #   in Loop: Header=BB82_376 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB82_385
# %bb.384:                              # %if.then2030
                                        #   in Loop: Header=BB82_376 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB82_385:                             # %if.end2077
                                        #   in Loop: Header=BB82_376 Depth=5
	jmp	.LBB82_386
.LBB82_386:                             # %if.end2078
                                        #   in Loop: Header=BB82_376 Depth=5
	jmp	.LBB82_387
.LBB82_387:                             # %if.end2079
                                        #   in Loop: Header=BB82_376 Depth=5
	jmp	.LBB82_388
.LBB82_388:                             # %for.inc2080
                                        #   in Loop: Header=BB82_376 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_376
.LBB82_389:                             # %for.end2082
                                        #   in Loop: Header=BB82_374 Depth=4
	jmp	.LBB82_390
.LBB82_390:                             # %for.inc2083
                                        #   in Loop: Header=BB82_374 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_374
.LBB82_391:                             # %for.end2085
                                        #   in Loop: Header=BB82_184 Depth=3
	jmp	.LBB82_392
.LBB82_392:                             # %if.end2086
                                        #   in Loop: Header=BB82_184 Depth=3
	jmp	.LBB82_393
.LBB82_393:                             # %if.end2087
                                        #   in Loop: Header=BB82_184 Depth=3
	cmpl	$3, -32(%rbp)
	jne	.LBB82_395
# %bb.394:                              # %if.then2090
                                        #   in Loop: Header=BB82_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	jmp	.LBB82_399
.LBB82_395:                             # %if.else2106
                                        #   in Loop: Header=BB82_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB82_397
# %bb.396:                              # %if.then2109
                                        #   in Loop: Header=BB82_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	jmp	.LBB82_398
.LBB82_397:                             # %if.else2131
                                        #   in Loop: Header=BB82_184 Depth=3
	movw	-36(%rbp), %ax
	movw	%ax, best8x8fwref+14
	movw	%ax, best8x8fwref+12
	movw	%ax, best8x8fwref+10
	movw	%ax, best8x8fwref+8
	movw	-50(%rbp), %ax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movw	-38(%rbp), %ax
	movw	%ax, best8x8bwref+14
	movw	%ax, best8x8bwref+12
	movw	%ax, best8x8bwref+10
	movw	%ax, best8x8bwref+8
.LBB82_398:                             # %if.end2132
                                        #   in Loop: Header=BB82_184 Depth=3
	jmp	.LBB82_399
.LBB82_399:                             # %if.end2133
                                        #   in Loop: Header=BB82_184 Depth=3
	cmpl	$1, -32(%rbp)
	jle	.LBB82_402
# %bb.400:                              # %land.lhs.true2136
                                        #   in Loop: Header=BB82_184 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB82_402
# %bb.401:                              # %if.then2139
                                        #   in Loop: Header=BB82_184 Depth=3
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movswl	-50(%rbp), %edx
	movswl	-36(%rbp), %ecx
	movswl	-38(%rbp), %r8d
	callq	SetRefAndMotionVectors
.LBB82_402:                             # %if.end2143
                                        #   in Loop: Header=BB82_184 Depth=3
	jmp	.LBB82_403
.LBB82_403:                             # %for.inc2144
                                        #   in Loop: Header=BB82_184 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB82_184
.LBB82_404:                             # %for.end2146
                                        #   in Loop: Header=BB82_181 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB82_408
# %bb.405:                              # %if.then2149
                                        #   in Loop: Header=BB82_181 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB82_407
# %bb.406:                              # %if.then2152
                                        #   in Loop: Header=BB82_181 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	leaq	-60(%rbp), %rsi
	callq	TransformDecision
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB82_407:                             # %if.end2155
                                        #   in Loop: Header=BB82_181 Depth=2
	jmp	.LBB82_408
.LBB82_408:                             # %if.end2156
                                        #   in Loop: Header=BB82_181 Depth=2
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB82_410
# %bb.409:                              # %if.then2159
                                        #   in Loop: Header=BB82_181 Depth=2
	movl	-32(%rbp), %eax
	movl	%eax, best_mode
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -316(%rbp)
.LBB82_410:                             # %if.end2161
                                        #   in Loop: Header=BB82_181 Depth=2
	jmp	.LBB82_411
.LBB82_411:                             # %if.end2162
                                        #   in Loop: Header=BB82_181 Depth=2
	jmp	.LBB82_412
.LBB82_412:                             # %for.inc2163
                                        #   in Loop: Header=BB82_181 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB82_181
.LBB82_413:                             # %for.end2165
                                        #   in Loop: Header=BB82_171 Depth=1
	cmpl	$0, -352(%rbp)
	je	.LBB82_826
# %bb.414:                              # %if.then2168
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	$0, -144(%rbp)
	movl	$2147483647, cost8_8x8ts # imm = 0x7FFFFFFF
	movq	cs_mb, %rdi
	callq	store_coding_state
	movq	-48(%rbp), %rax
	movl	$-1, 568(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB82_599
# %bb.415:                              # %if.then2171
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -140(%rbp)
	movl	$0, -28(%rbp)
.LBB82_416:                             # %for.cond2172
                                        #   Parent Loop BB82_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_418 Depth 3
                                        #         Child Loop BB82_445 Depth 4
                                        #         Child Loop BB82_464 Depth 4
                                        #           Child Loop BB82_466 Depth 5
                                        #         Child Loop BB82_473 Depth 4
                                        #         Child Loop BB82_508 Depth 4
                                        #           Child Loop BB82_510 Depth 5
                                        #         Child Loop BB82_532 Depth 4
                                        #           Child Loop BB82_534 Depth 5
                                        #             Child Loop BB82_536 Depth 6
                                        #         Child Loop BB82_544 Depth 4
                                        #           Child Loop BB82_546 Depth 5
                                        #       Child Loop BB82_569 Depth 3
                                        #         Child Loop BB82_571 Depth 4
                                        #           Child Loop BB82_573 Depth 5
                                        #       Child Loop BB82_581 Depth 3
                                        #         Child Loop BB82_583 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB82_598
# %bb.417:                              # %for.body2175
                                        #   in Loop: Header=BB82_416 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI82_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -412(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -404(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movl	$2147483647, -172(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -240(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB82_418:                             # %for.cond2184
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB82_445 Depth 4
                                        #         Child Loop BB82_464 Depth 4
                                        #           Child Loop BB82_466 Depth 5
                                        #         Child Loop BB82_473 Depth 4
                                        #         Child Loop BB82_508 Depth 4
                                        #           Child Loop BB82_510 Depth 5
                                        #         Child Loop BB82_532 Depth 4
                                        #           Child Loop BB82_534 Depth 5
                                        #             Child Loop BB82_536 Depth 6
                                        #         Child Loop BB82_544 Depth 4
                                        #           Child Loop BB82_546 Depth 5
	cmpl	$2, -80(%rbp)
	jge	.LBB82_559
# %bb.419:                              # %for.body2187
                                        #   in Loop: Header=BB82_418 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB82_421
# %bb.420:                              # %land.lhs.true2193
                                        #   in Loop: Header=BB82_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB82_423
.LBB82_421:                             # %lor.lhs.false2196
                                        #   in Loop: Header=BB82_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB82_557
# %bb.422:                              # %land.lhs.true2199
                                        #   in Loop: Header=BB82_418 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB82_557
.LBB82_423:                             # %if.then2201
                                        #   in Loop: Header=BB82_418 Depth=3
	movq	$0, -248(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB82_444
# %bb.424:                              # %if.then2204
                                        #   in Loop: Header=BB82_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB82_443
# %bb.425:                              # %if.then2207
                                        #   in Loop: Header=BB82_418 Depth=3
	movl	$0, -228(%rbp)
	movl	$0, -216(%rbp)
	movl	-28(%rbp), %edi
	leaq	-216(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -228(%rbp)
	cmpl	$2147483647, -228(%rbp) # imm = 0x7FFFFFFF
	je	.LBB82_427
# %bb.426:                              # %lor.lhs.false2211
                                        #   in Loop: Header=BB82_418 Depth=3
	cmpl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB82_428
.LBB82_427:                             # %if.then2214
                                        #   in Loop: Header=BB82_418 Depth=3
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -204(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB82_429
.LBB82_428:                             # %if.else2215
                                        #   in Loop: Header=BB82_418 Depth=3
	movl	-228(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-216(%rbp), %eax
	addl	-204(%rbp), %eax
	movl	%eax, -204(%rbp)
.LBB82_429:                             # %if.end2218
                                        #   in Loop: Header=BB82_418 Depth=3
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB82_431
	jmp	.LBB82_430
.LBB82_430:                             # %if.end2218
                                        #   in Loop: Header=BB82_418 Depth=3
	subl	$2, %eax
	je	.LBB82_438
	jmp	.LBB82_439
.LBB82_431:                             # %sw.bb
                                        #   in Loop: Header=BB82_418 Depth=3
	movl	-216(%rbp), %eax
	cmpl	-228(%rbp), %eax
	jl	.LBB82_435
# %bb.432:                              # %lor.lhs.false2222
                                        #   in Loop: Header=BB82_418 Depth=3
	cmpl	$0, -364(%rbp)
	je	.LBB82_435
# %bb.433:                              # %land.lhs.true2225
                                        #   in Loop: Header=BB82_418 Depth=3
	cmpl	$0, -360(%rbp)
	je	.LBB82_435
# %bb.434:                              # %land.lhs.true2228
                                        #   in Loop: Header=BB82_418 Depth=3
	cmpl	$0, -356(%rbp)
	jne	.LBB82_436
.LBB82_435:                             # %if.then2231
                                        #   in Loop: Header=BB82_418 Depth=3
	movl	-216(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB82_437
.LBB82_436:                             # %if.else2232
                                        #   in Loop: Header=BB82_418 Depth=3
	movl	-228(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB82_437:                             # %if.end2233
                                        #   in Loop: Header=BB82_418 Depth=3
	jmp	.LBB82_440
.LBB82_438:                             # %sw.bb2234
                                        #   in Loop: Header=BB82_418 Depth=3
	movl	-216(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB82_440
.LBB82_439:                             # %sw.default
                                        #   in Loop: Header=BB82_418 Depth=3
	movl	-228(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB82_440:                             # %sw.epilog
                                        #   in Loop: Header=BB82_418 Depth=3
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB82_442
# %bb.441:                              # %if.then2238
                                        #   in Loop: Header=BB82_418 Depth=3
	movl	-172(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB82_442:                             # %if.end2240
                                        #   in Loop: Header=BB82_418 Depth=3
	movl	-260(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -260(%rbp)
.LBB82_443:                             # %if.end2242
                                        #   in Loop: Header=BB82_418 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB82_518
.LBB82_444:                             # %if.else2278
                                        #   in Loop: Header=BB82_418 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-208(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB82_445:                             # %for.cond2279
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_416 Depth=2
                                        #       Parent Loop BB82_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB82_463
# %bb.446:                              # %for.body2286
                                        #   in Loop: Header=BB82_445 Depth=4
	cmpl	$0, -288(%rbp)
	je	.LBB82_449
# %bb.447:                              # %lor.lhs.false2288
                                        #   in Loop: Header=BB82_445 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB82_449
# %bb.448:                              # %lor.lhs.false2292
                                        #   in Loop: Header=BB82_445 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB82_461
.LBB82_449:                             # %if.then2296
                                        #   in Loop: Header=BB82_445 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB82_454
# %bb.450:                              # %cond.true2299
                                        #   in Loop: Header=BB82_445 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB82_452
# %bb.451:                              # %cond.true2305
                                        #   in Loop: Header=BB82_445 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB82_453
.LBB82_452:                             # %cond.false2306
                                        #   in Loop: Header=BB82_445 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB82_453:                             # %cond.end2309
                                        #   in Loop: Header=BB82_445 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB82_458
.LBB82_454:                             # %cond.false2313
                                        #   in Loop: Header=BB82_445 Depth=4
	vmovsd	.LCPI82_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB82_456
# %bb.455:                              # %cond.true2318
                                        #   in Loop: Header=BB82_445 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB82_457
.LBB82_456:                             # %cond.false2320
                                        #   in Loop: Header=BB82_445 Depth=4
	movl	$1, %eax
	jmp	.LBB82_457
.LBB82_457:                             # %cond.end2321
                                        #   in Loop: Header=BB82_445 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB82_458:                             # %cond.end2326
                                        #   in Loop: Header=BB82_445 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB82_460
# %bb.459:                              # %if.then2338
                                        #   in Loop: Header=BB82_445 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB82_460:                             # %if.end2339
                                        #   in Loop: Header=BB82_445 Depth=4
	jmp	.LBB82_461
.LBB82_461:                             # %if.end2340
                                        #   in Loop: Header=BB82_445 Depth=4
	jmp	.LBB82_462
.LBB82_462:                             # %for.inc2341
                                        #   in Loop: Header=BB82_445 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB82_445
.LBB82_463:                             # %for.end2343
                                        #   in Loop: Header=BB82_418 Depth=3
	movl	$0, -24(%rbp)
.LBB82_464:                             # %for.cond2344
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_416 Depth=2
                                        #       Parent Loop BB82_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB82_466 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB82_471
# %bb.465:                              # %for.body2347
                                        #   in Loop: Header=BB82_464 Depth=4
	movl	$0, -20(%rbp)
.LBB82_466:                             # %for.cond2348
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_416 Depth=2
                                        #       Parent Loop BB82_418 Depth=3
                                        #         Parent Loop BB82_464 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB82_469
# %bb.467:                              # %for.body2351
                                        #   in Loop: Header=BB82_466 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.468:                              # %for.inc2403
                                        #   in Loop: Header=BB82_466 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_466
.LBB82_469:                             # %for.end2405
                                        #   in Loop: Header=BB82_464 Depth=4
	jmp	.LBB82_470
.LBB82_470:                             # %for.inc2406
                                        #   in Loop: Header=BB82_464 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_464
.LBB82_471:                             # %for.end2408
                                        #   in Loop: Header=BB82_418 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB82_516
# %bb.472:                              # %if.then2410
                                        #   in Loop: Header=BB82_418 Depth=3
	movl	-208(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB82_473:                             # %for.cond2411
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_416 Depth=2
                                        #       Parent Loop BB82_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB82_487
# %bb.474:                              # %for.body2418
                                        #   in Loop: Header=BB82_473 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB82_479
# %bb.475:                              # %cond.true2421
                                        #   in Loop: Header=BB82_473 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB82_477
# %bb.476:                              # %cond.true2427
                                        #   in Loop: Header=BB82_473 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB82_478
.LBB82_477:                             # %cond.false2428
                                        #   in Loop: Header=BB82_473 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB82_478:                             # %cond.end2431
                                        #   in Loop: Header=BB82_473 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB82_483
.LBB82_479:                             # %cond.false2435
                                        #   in Loop: Header=BB82_473 Depth=4
	vmovsd	.LCPI82_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB82_481
# %bb.480:                              # %cond.true2440
                                        #   in Loop: Header=BB82_473 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB82_482
.LBB82_481:                             # %cond.false2442
                                        #   in Loop: Header=BB82_473 Depth=4
	movl	$1, %eax
	jmp	.LBB82_482
.LBB82_482:                             # %cond.end2443
                                        #   in Loop: Header=BB82_473 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB82_483:                             # %cond.end2448
                                        #   in Loop: Header=BB82_473 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB82_485
# %bb.484:                              # %if.then2460
                                        #   in Loop: Header=BB82_473 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB82_485:                             # %if.end2461
                                        #   in Loop: Header=BB82_473 Depth=4
	jmp	.LBB82_486
.LBB82_486:                             # %for.inc2462
                                        #   in Loop: Header=BB82_473 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB82_473
.LBB82_487:                             # %for.end2464
                                        #   in Loop: Header=BB82_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB82_495
# %bb.488:                              # %cond.true2467
                                        #   in Loop: Header=BB82_418 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB82_490
# %bb.489:                              # %cond.true2473
                                        #   in Loop: Header=BB82_418 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB82_491
.LBB82_490:                             # %cond.false2474
                                        #   in Loop: Header=BB82_418 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB82_491:                             # %cond.end2477
                                        #   in Loop: Header=BB82_418 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB82_493
# %bb.492:                              # %cond.true2486
                                        #   in Loop: Header=BB82_418 Depth=3
	xorl	%edx, %edx
	jmp	.LBB82_494
.LBB82_493:                             # %cond.false2487
                                        #   in Loop: Header=BB82_418 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB82_494:                             # %cond.end2489
                                        #   in Loop: Header=BB82_418 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB82_499
.LBB82_495:                             # %cond.false2494
                                        #   in Loop: Header=BB82_418 Depth=3
	vmovsd	.LCPI82_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB82_497
# %bb.496:                              # %cond.true2499
                                        #   in Loop: Header=BB82_418 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB82_498
.LBB82_497:                             # %cond.false2501
                                        #   in Loop: Header=BB82_418 Depth=3
	movl	$1, %eax
	jmp	.LBB82_498
.LBB82_498:                             # %cond.end2502
                                        #   in Loop: Header=BB82_418 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB82_499:                             # %cond.end2507
                                        #   in Loop: Header=BB82_418 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB82_502
# %bb.500:                              # %land.lhs.true2513
                                        #   in Loop: Header=BB82_418 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB82_502
# %bb.501:                              # %if.then2516
                                        #   in Loop: Header=BB82_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB82_507
.LBB82_502:                             # %if.else2517
                                        #   in Loop: Header=BB82_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB82_505
# %bb.503:                              # %land.lhs.true2520
                                        #   in Loop: Header=BB82_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB82_505
# %bb.504:                              # %if.then2523
                                        #   in Loop: Header=BB82_418 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB82_506
.LBB82_505:                             # %if.else2524
                                        #   in Loop: Header=BB82_418 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB82_506:                             # %if.end2525
                                        #   in Loop: Header=BB82_418 Depth=3
	jmp	.LBB82_507
.LBB82_507:                             # %if.end2526
                                        #   in Loop: Header=BB82_418 Depth=3
	movl	$0, -24(%rbp)
.LBB82_508:                             # %for.cond2527
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_416 Depth=2
                                        #       Parent Loop BB82_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB82_510 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB82_515
# %bb.509:                              # %for.body2530
                                        #   in Loop: Header=BB82_508 Depth=4
	movl	$0, -20(%rbp)
.LBB82_510:                             # %for.cond2531
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_416 Depth=2
                                        #       Parent Loop BB82_418 Depth=3
                                        #         Parent Loop BB82_508 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB82_513
# %bb.511:                              # %for.body2534
                                        #   in Loop: Header=BB82_510 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.512:                              # %for.inc2565
                                        #   in Loop: Header=BB82_510 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_510
.LBB82_513:                             # %for.end2567
                                        #   in Loop: Header=BB82_508 Depth=4
	jmp	.LBB82_514
.LBB82_514:                             # %for.inc2568
                                        #   in Loop: Header=BB82_508 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_508
.LBB82_515:                             # %for.end2570
                                        #   in Loop: Header=BB82_418 Depth=3
	jmp	.LBB82_517
.LBB82_516:                             # %if.else2571
                                        #   in Loop: Header=BB82_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB82_517:                             # %if.end2572
                                        #   in Loop: Header=BB82_418 Depth=3
	jmp	.LBB82_518
.LBB82_518:                             # %if.end2573
                                        #   in Loop: Header=BB82_418 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB82_520
# %bb.519:                              # %if.then2576
                                        #   in Loop: Header=BB82_418 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-276(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB82_526
.LBB82_520:                             # %if.else2578
                                        #   in Loop: Header=BB82_418 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB82_525
# %bb.521:                              # %if.then2581
                                        #   in Loop: Header=BB82_418 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB82_523
# %bb.522:                              # %cond.true2591
                                        #   in Loop: Header=BB82_418 Depth=3
	xorl	%eax, %eax
	jmp	.LBB82_524
.LBB82_523:                             # %cond.false2592
                                        #   in Loop: Header=BB82_418 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB82_524:                             # %cond.end2597
                                        #   in Loop: Header=BB82_418 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB82_525:                             # %if.end2603
                                        #   in Loop: Header=BB82_418 Depth=3
	jmp	.LBB82_526
.LBB82_526:                             # %if.end2604
                                        #   in Loop: Header=BB82_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB82_528
# %bb.527:                              # %land.lhs.true2607
                                        #   in Loop: Header=BB82_418 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB82_530
.LBB82_528:                             # %lor.lhs.false2610
                                        #   in Loop: Header=BB82_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB82_556
# %bb.529:                              # %land.lhs.true2613
                                        #   in Loop: Header=BB82_418 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB82_556
.LBB82_530:                             # %if.then2616
                                        #   in Loop: Header=BB82_418 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -172(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -240(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, part8x8mode(,%rcx,4)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8pdir(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8fwref(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8bwref(,%rcx,2)
	movl	-276(%rbp), %eax
	movl	%eax, -176(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB82_555
# %bb.531:                              # %if.then2627
                                        #   in Loop: Header=BB82_418 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB82_532:                             # %for.cond2638
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_416 Depth=2
                                        #       Parent Loop BB82_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB82_534 Depth 5
                                        #             Child Loop BB82_536 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB82_543
# %bb.533:                              # %for.body2641
                                        #   in Loop: Header=BB82_532 Depth=4
	movl	$0, -24(%rbp)
.LBB82_534:                             # %for.cond2642
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_416 Depth=2
                                        #       Parent Loop BB82_418 Depth=3
                                        #         Parent Loop BB82_532 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB82_536 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB82_541
# %bb.535:                              # %for.body2645
                                        #   in Loop: Header=BB82_534 Depth=5
	movl	$0, -20(%rbp)
.LBB82_536:                             # %for.cond2646
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_416 Depth=2
                                        #       Parent Loop BB82_418 Depth=3
                                        #         Parent Loop BB82_532 Depth=4
                                        #           Parent Loop BB82_534 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB82_539
# %bb.537:                              # %for.body2649
                                        #   in Loop: Header=BB82_536 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.538:                              # %for.inc2666
                                        #   in Loop: Header=BB82_536 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_536
.LBB82_539:                             # %for.end2668
                                        #   in Loop: Header=BB82_534 Depth=5
	jmp	.LBB82_540
.LBB82_540:                             # %for.inc2669
                                        #   in Loop: Header=BB82_534 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_534
.LBB82_541:                             # %for.end2671
                                        #   in Loop: Header=BB82_532 Depth=4
	jmp	.LBB82_542
.LBB82_542:                             # %for.inc2672
                                        #   in Loop: Header=BB82_532 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB82_532
.LBB82_543:                             # %for.end2674
                                        #   in Loop: Header=BB82_418 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB82_544:                             # %for.cond2675
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_416 Depth=2
                                        #       Parent Loop BB82_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB82_546 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_554
# %bb.545:                              # %for.body2679
                                        #   in Loop: Header=BB82_544 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB82_546:                             # %for.cond2680
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_416 Depth=2
                                        #       Parent Loop BB82_418 Depth=3
                                        #         Parent Loop BB82_544 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_552
# %bb.547:                              # %for.body2684
                                        #   in Loop: Header=BB82_546 Depth=5
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB82_549
# %bb.548:                              # %if.then2686
                                        #   in Loop: Header=BB82_546 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB82_550
.LBB82_549:                             # %if.else2705
                                        #   in Loop: Header=BB82_546 Depth=5
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB82_550:                             # %if.end2754
                                        #   in Loop: Header=BB82_546 Depth=5
	jmp	.LBB82_551
.LBB82_551:                             # %for.inc2755
                                        #   in Loop: Header=BB82_546 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_546
.LBB82_552:                             # %for.end2757
                                        #   in Loop: Header=BB82_544 Depth=4
	jmp	.LBB82_553
.LBB82_553:                             # %for.inc2758
                                        #   in Loop: Header=BB82_544 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_544
.LBB82_554:                             # %for.end2760
                                        #   in Loop: Header=BB82_418 Depth=3
	jmp	.LBB82_555
.LBB82_555:                             # %if.end2761
                                        #   in Loop: Header=BB82_418 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB82_556:                             # %if.end2762
                                        #   in Loop: Header=BB82_418 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB82_557:                             # %if.end2763
                                        #   in Loop: Header=BB82_418 Depth=3
	jmp	.LBB82_558
.LBB82_558:                             # %for.inc2764
                                        #   in Loop: Header=BB82_418 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB82_418
.LBB82_559:                             # %for.end2766
                                        #   in Loop: Header=BB82_416 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB82_592
# %bb.560:                              # %if.then2769
                                        #   in Loop: Header=BB82_416 Depth=2
	movl	-172(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	part8x8pdir(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -248(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB82_562
# %bb.561:                              # %lor.lhs.false2778
                                        #   in Loop: Header=BB82_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB82_563
.LBB82_562:                             # %cond.true2782
                                        #   in Loop: Header=BB82_416 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB82_564
.LBB82_563:                             # %cond.false2783
                                        #   in Loop: Header=BB82_416 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB82_564
.LBB82_564:                             # %cond.end2784
                                        #   in Loop: Header=BB82_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB82_566
# %bb.565:                              # %lor.lhs.false2789
                                        #   in Loop: Header=BB82_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB82_567
.LBB82_566:                             # %cond.true2793
                                        #   in Loop: Header=BB82_416 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB82_568
.LBB82_567:                             # %cond.false2794
                                        #   in Loop: Header=BB82_416 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB82_568
.LBB82_568:                             # %cond.end2795
                                        #   in Loop: Header=BB82_416 Depth=2
	movslq	-28(%rbp), %rcx
	movw	part8x8fwref(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-280(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	part8x8bwref(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -176(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB82_569:                             # %for.cond2813
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB82_571 Depth 4
                                        #           Child Loop BB82_573 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB82_580
# %bb.570:                              # %for.body2816
                                        #   in Loop: Header=BB82_569 Depth=3
	movl	$0, -24(%rbp)
.LBB82_571:                             # %for.cond2817
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_416 Depth=2
                                        #       Parent Loop BB82_569 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB82_573 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB82_578
# %bb.572:                              # %for.body2820
                                        #   in Loop: Header=BB82_571 Depth=4
	movl	$0, -20(%rbp)
.LBB82_573:                             # %for.cond2821
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_416 Depth=2
                                        #       Parent Loop BB82_569 Depth=3
                                        #         Parent Loop BB82_571 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB82_576
# %bb.574:                              # %for.body2824
                                        #   in Loop: Header=BB82_573 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.575:                              # %for.inc2842
                                        #   in Loop: Header=BB82_573 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_573
.LBB82_576:                             # %for.end2844
                                        #   in Loop: Header=BB82_571 Depth=4
	jmp	.LBB82_577
.LBB82_577:                             # %for.inc2845
                                        #   in Loop: Header=BB82_571 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_571
.LBB82_578:                             # %for.end2847
                                        #   in Loop: Header=BB82_569 Depth=3
	jmp	.LBB82_579
.LBB82_579:                             # %for.inc2848
                                        #   in Loop: Header=BB82_569 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB82_569
.LBB82_580:                             # %for.end2850
                                        #   in Loop: Header=BB82_416 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB82_581:                             # %for.cond2851
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB82_583 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_591
# %bb.582:                              # %for.body2855
                                        #   in Loop: Header=BB82_581 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB82_583:                             # %for.cond2856
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_416 Depth=2
                                        #       Parent Loop BB82_581 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_589
# %bb.584:                              # %for.body2860
                                        #   in Loop: Header=BB82_583 Depth=4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB82_586
# %bb.585:                              # %if.then2863
                                        #   in Loop: Header=BB82_583 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB82_587
.LBB82_586:                             # %if.else2886
                                        #   in Loop: Header=BB82_583 Depth=4
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB82_587:                             # %if.end2935
                                        #   in Loop: Header=BB82_583 Depth=4
	jmp	.LBB82_588
.LBB82_588:                             # %for.inc2936
                                        #   in Loop: Header=BB82_583 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_583
.LBB82_589:                             # %for.end2938
                                        #   in Loop: Header=BB82_581 Depth=3
	jmp	.LBB82_590
.LBB82_590:                             # %for.inc2939
                                        #   in Loop: Header=BB82_581 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_581
.LBB82_591:                             # %for.end2941
                                        #   in Loop: Header=BB82_416 Depth=2
	jmp	.LBB82_592
.LBB82_592:                             # %if.end2942
                                        #   in Loop: Header=BB82_416 Depth=2
	cmpl	$0, -176(%rbp)
	je	.LBB82_594
# %bb.593:                              # %if.then2944
                                        #   in Loop: Header=BB82_416 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-176(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB82_594:                             # %if.end2948
                                        #   in Loop: Header=BB82_416 Depth=2
	movl	-28(%rbp), %esi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-108(%rbp), %eax
	xorl	%edi, %edi
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8
	movl	-28(%rbp), %edi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %esi
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	cmpl	$3, -28(%rbp)
	jge	.LBB82_596
# %bb.595:                              # %if.then2973
                                        #   in Loop: Header=BB82_416 Depth=2
	movq	cs_b8, %rdi
	callq	reset_coding_state
.LBB82_596:                             # %if.end2974
                                        #   in Loop: Header=BB82_416 Depth=2
	jmp	.LBB82_597
.LBB82_597:                             # %for.inc2975
                                        #   in Loop: Header=BB82_416 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB82_416
.LBB82_598:                             # %for.end2977
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	cbp8x8, %eax
	movl	%eax, cbp8_8x8ts
	movslq	cbp_blk8x8, %rax
	movq	%rax, cbp_blk8_8x8ts
	movl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz8_8x8ts
	movl	-144(%rbp), %eax
	movl	%eax, cost8_8x8ts
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB82_599:                             # %if.end2980
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB82_802
# %bb.600:                              # %if.then2984
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	$0, -144(%rbp)
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -140(%rbp)
	movl	$0, -28(%rbp)
.LBB82_601:                             # %for.cond2985
                                        #   Parent Loop BB82_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_603 Depth 3
                                        #         Child Loop BB82_614 Depth 4
                                        #         Child Loop BB82_633 Depth 4
                                        #           Child Loop BB82_635 Depth 5
                                        #         Child Loop BB82_642 Depth 4
                                        #         Child Loop BB82_677 Depth 4
                                        #           Child Loop BB82_679 Depth 5
                                        #         Child Loop BB82_701 Depth 4
                                        #           Child Loop BB82_703 Depth 5
                                        #             Child Loop BB82_705 Depth 6
                                        #         Child Loop BB82_713 Depth 4
                                        #           Child Loop BB82_715 Depth 5
                                        #         Child Loop BB82_723 Depth 4
                                        #           Child Loop BB82_725 Depth 5
                                        #       Child Loop BB82_745 Depth 3
                                        #         Child Loop BB82_747 Depth 4
                                        #           Child Loop BB82_749 Depth 5
                                        #       Child Loop BB82_757 Depth 3
                                        #         Child Loop BB82_759 Depth 4
                                        #       Child Loop BB82_766 Depth 3
                                        #         Child Loop BB82_768 Depth 4
                                        #       Child Loop BB82_778 Depth 3
                                        #         Child Loop BB82_780 Depth 4
                                        #       Child Loop BB82_786 Depth 3
                                        #       Child Loop BB82_791 Depth 3
                                        #         Child Loop BB82_793 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB82_801
# %bb.602:                              # %for.body2988
                                        #   in Loop: Header=BB82_601 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI82_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -412(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -404(%rbp)
	movl	$2147483647, -172(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -240(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB82_603:                             # %for.cond2997
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB82_614 Depth 4
                                        #         Child Loop BB82_633 Depth 4
                                        #           Child Loop BB82_635 Depth 5
                                        #         Child Loop BB82_642 Depth 4
                                        #         Child Loop BB82_677 Depth 4
                                        #           Child Loop BB82_679 Depth 5
                                        #         Child Loop BB82_701 Depth 4
                                        #           Child Loop BB82_703 Depth 5
                                        #             Child Loop BB82_705 Depth 6
                                        #         Child Loop BB82_713 Depth 4
                                        #           Child Loop BB82_715 Depth 5
                                        #         Child Loop BB82_723 Depth 4
                                        #           Child Loop BB82_725 Depth 5
	cmpl	$5, -80(%rbp)
	jge	.LBB82_735
# %bb.604:                              # %for.body3000
                                        #   in Loop: Header=BB82_603 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cltq
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB82_733
# %bb.605:                              # %if.then3006
                                        #   in Loop: Header=BB82_603 Depth=3
	movq	$0, -248(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB82_613
# %bb.606:                              # %if.then3009
                                        #   in Loop: Header=BB82_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB82_612
# %bb.607:                              # %if.then3012
                                        #   in Loop: Header=BB82_603 Depth=3
	movl	-28(%rbp), %edi
	leaq	-216(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -60(%rbp)
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB82_609
# %bb.608:                              # %lor.lhs.false3016
                                        #   in Loop: Header=BB82_603 Depth=3
	cmpl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB82_610
.LBB82_609:                             # %if.then3019
                                        #   in Loop: Header=BB82_603 Depth=3
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB82_611
.LBB82_610:                             # %if.else3020
                                        #   in Loop: Header=BB82_603 Depth=3
	movl	-60(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
.LBB82_611:                             # %if.end3022
                                        #   in Loop: Header=BB82_603 Depth=3
	movl	-260(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -260(%rbp)
.LBB82_612:                             # %if.end3024
                                        #   in Loop: Header=BB82_603 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB82_687
.LBB82_613:                             # %if.else3060
                                        #   in Loop: Header=BB82_603 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-208(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB82_614:                             # %for.cond3061
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_601 Depth=2
                                        #       Parent Loop BB82_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB82_632
# %bb.615:                              # %for.body3068
                                        #   in Loop: Header=BB82_614 Depth=4
	cmpl	$0, -288(%rbp)
	je	.LBB82_618
# %bb.616:                              # %lor.lhs.false3070
                                        #   in Loop: Header=BB82_614 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB82_618
# %bb.617:                              # %lor.lhs.false3074
                                        #   in Loop: Header=BB82_614 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB82_630
.LBB82_618:                             # %if.then3078
                                        #   in Loop: Header=BB82_614 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB82_623
# %bb.619:                              # %cond.true3081
                                        #   in Loop: Header=BB82_614 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB82_621
# %bb.620:                              # %cond.true3087
                                        #   in Loop: Header=BB82_614 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB82_622
.LBB82_621:                             # %cond.false3088
                                        #   in Loop: Header=BB82_614 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB82_622:                             # %cond.end3091
                                        #   in Loop: Header=BB82_614 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB82_627
.LBB82_623:                             # %cond.false3095
                                        #   in Loop: Header=BB82_614 Depth=4
	vmovsd	.LCPI82_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB82_625
# %bb.624:                              # %cond.true3100
                                        #   in Loop: Header=BB82_614 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB82_626
.LBB82_625:                             # %cond.false3102
                                        #   in Loop: Header=BB82_614 Depth=4
	movl	$1, %eax
	jmp	.LBB82_626
.LBB82_626:                             # %cond.end3103
                                        #   in Loop: Header=BB82_614 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB82_627:                             # %cond.end3108
                                        #   in Loop: Header=BB82_614 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB82_629
# %bb.628:                              # %if.then3120
                                        #   in Loop: Header=BB82_614 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB82_629:                             # %if.end3121
                                        #   in Loop: Header=BB82_614 Depth=4
	jmp	.LBB82_630
.LBB82_630:                             # %if.end3122
                                        #   in Loop: Header=BB82_614 Depth=4
	jmp	.LBB82_631
.LBB82_631:                             # %for.inc3123
                                        #   in Loop: Header=BB82_614 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB82_614
.LBB82_632:                             # %for.end3125
                                        #   in Loop: Header=BB82_603 Depth=3
	movl	$0, -24(%rbp)
.LBB82_633:                             # %for.cond3126
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_601 Depth=2
                                        #       Parent Loop BB82_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB82_635 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB82_640
# %bb.634:                              # %for.body3129
                                        #   in Loop: Header=BB82_633 Depth=4
	movl	$0, -20(%rbp)
.LBB82_635:                             # %for.cond3130
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_601 Depth=2
                                        #       Parent Loop BB82_603 Depth=3
                                        #         Parent Loop BB82_633 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB82_638
# %bb.636:                              # %for.body3133
                                        #   in Loop: Header=BB82_635 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.637:                              # %for.inc3185
                                        #   in Loop: Header=BB82_635 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_635
.LBB82_638:                             # %for.end3187
                                        #   in Loop: Header=BB82_633 Depth=4
	jmp	.LBB82_639
.LBB82_639:                             # %for.inc3188
                                        #   in Loop: Header=BB82_633 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_633
.LBB82_640:                             # %for.end3190
                                        #   in Loop: Header=BB82_603 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB82_685
# %bb.641:                              # %if.then3192
                                        #   in Loop: Header=BB82_603 Depth=3
	movl	-208(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB82_642:                             # %for.cond3193
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_601 Depth=2
                                        #       Parent Loop BB82_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB82_656
# %bb.643:                              # %for.body3200
                                        #   in Loop: Header=BB82_642 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB82_648
# %bb.644:                              # %cond.true3203
                                        #   in Loop: Header=BB82_642 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB82_646
# %bb.645:                              # %cond.true3209
                                        #   in Loop: Header=BB82_642 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB82_647
.LBB82_646:                             # %cond.false3210
                                        #   in Loop: Header=BB82_642 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB82_647:                             # %cond.end3213
                                        #   in Loop: Header=BB82_642 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB82_652
.LBB82_648:                             # %cond.false3217
                                        #   in Loop: Header=BB82_642 Depth=4
	vmovsd	.LCPI82_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB82_650
# %bb.649:                              # %cond.true3222
                                        #   in Loop: Header=BB82_642 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB82_651
.LBB82_650:                             # %cond.false3224
                                        #   in Loop: Header=BB82_642 Depth=4
	movl	$1, %eax
	jmp	.LBB82_651
.LBB82_651:                             # %cond.end3225
                                        #   in Loop: Header=BB82_642 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB82_652:                             # %cond.end3230
                                        #   in Loop: Header=BB82_642 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB82_654
# %bb.653:                              # %if.then3242
                                        #   in Loop: Header=BB82_642 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB82_654:                             # %if.end3243
                                        #   in Loop: Header=BB82_642 Depth=4
	jmp	.LBB82_655
.LBB82_655:                             # %for.inc3244
                                        #   in Loop: Header=BB82_642 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB82_642
.LBB82_656:                             # %for.end3246
                                        #   in Loop: Header=BB82_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB82_664
# %bb.657:                              # %cond.true3249
                                        #   in Loop: Header=BB82_603 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB82_659
# %bb.658:                              # %cond.true3255
                                        #   in Loop: Header=BB82_603 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB82_660
.LBB82_659:                             # %cond.false3256
                                        #   in Loop: Header=BB82_603 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB82_660:                             # %cond.end3259
                                        #   in Loop: Header=BB82_603 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB82_662
# %bb.661:                              # %cond.true3268
                                        #   in Loop: Header=BB82_603 Depth=3
	xorl	%edx, %edx
	jmp	.LBB82_663
.LBB82_662:                             # %cond.false3269
                                        #   in Loop: Header=BB82_603 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB82_663:                             # %cond.end3271
                                        #   in Loop: Header=BB82_603 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB82_668
.LBB82_664:                             # %cond.false3276
                                        #   in Loop: Header=BB82_603 Depth=3
	vmovsd	.LCPI82_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB82_666
# %bb.665:                              # %cond.true3281
                                        #   in Loop: Header=BB82_603 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB82_667
.LBB82_666:                             # %cond.false3283
                                        #   in Loop: Header=BB82_603 Depth=3
	movl	$1, %eax
	jmp	.LBB82_667
.LBB82_667:                             # %cond.end3284
                                        #   in Loop: Header=BB82_603 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB82_668:                             # %cond.end3289
                                        #   in Loop: Header=BB82_603 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB82_671
# %bb.669:                              # %land.lhs.true3295
                                        #   in Loop: Header=BB82_603 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB82_671
# %bb.670:                              # %if.then3298
                                        #   in Loop: Header=BB82_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB82_676
.LBB82_671:                             # %if.else3299
                                        #   in Loop: Header=BB82_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB82_674
# %bb.672:                              # %land.lhs.true3302
                                        #   in Loop: Header=BB82_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB82_674
# %bb.673:                              # %if.then3305
                                        #   in Loop: Header=BB82_603 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB82_675
.LBB82_674:                             # %if.else3306
                                        #   in Loop: Header=BB82_603 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB82_675:                             # %if.end3307
                                        #   in Loop: Header=BB82_603 Depth=3
	jmp	.LBB82_676
.LBB82_676:                             # %if.end3308
                                        #   in Loop: Header=BB82_603 Depth=3
	movl	$0, -24(%rbp)
.LBB82_677:                             # %for.cond3309
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_601 Depth=2
                                        #       Parent Loop BB82_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB82_679 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB82_684
# %bb.678:                              # %for.body3312
                                        #   in Loop: Header=BB82_677 Depth=4
	movl	$0, -20(%rbp)
.LBB82_679:                             # %for.cond3313
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_601 Depth=2
                                        #       Parent Loop BB82_603 Depth=3
                                        #         Parent Loop BB82_677 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB82_682
# %bb.680:                              # %for.body3316
                                        #   in Loop: Header=BB82_679 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.681:                              # %for.inc3347
                                        #   in Loop: Header=BB82_679 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_679
.LBB82_682:                             # %for.end3349
                                        #   in Loop: Header=BB82_677 Depth=4
	jmp	.LBB82_683
.LBB82_683:                             # %for.inc3350
                                        #   in Loop: Header=BB82_677 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_677
.LBB82_684:                             # %for.end3352
                                        #   in Loop: Header=BB82_603 Depth=3
	jmp	.LBB82_686
.LBB82_685:                             # %if.else3353
                                        #   in Loop: Header=BB82_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB82_686:                             # %if.end3354
                                        #   in Loop: Header=BB82_603 Depth=3
	jmp	.LBB82_687
.LBB82_687:                             # %if.end3355
                                        #   in Loop: Header=BB82_603 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB82_689
# %bb.688:                              # %if.then3358
                                        #   in Loop: Header=BB82_603 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-276(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB82_695
.LBB82_689:                             # %if.else3360
                                        #   in Loop: Header=BB82_603 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB82_694
# %bb.690:                              # %if.then3363
                                        #   in Loop: Header=BB82_603 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB82_692
# %bb.691:                              # %cond.true3373
                                        #   in Loop: Header=BB82_603 Depth=3
	xorl	%eax, %eax
	jmp	.LBB82_693
.LBB82_692:                             # %cond.false3374
                                        #   in Loop: Header=BB82_603 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB82_693:                             # %cond.end3379
                                        #   in Loop: Header=BB82_603 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB82_694:                             # %if.end3385
                                        #   in Loop: Header=BB82_603 Depth=3
	jmp	.LBB82_695
.LBB82_695:                             # %if.end3386
                                        #   in Loop: Header=BB82_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB82_697
# %bb.696:                              # %land.lhs.true3389
                                        #   in Loop: Header=BB82_603 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB82_699
.LBB82_697:                             # %lor.lhs.false3392
                                        #   in Loop: Header=BB82_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB82_732
# %bb.698:                              # %land.lhs.true3395
                                        #   in Loop: Header=BB82_603 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB82_732
.LBB82_699:                             # %if.then3398
                                        #   in Loop: Header=BB82_603 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -172(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -240(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8mode(,%rcx,2)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+64(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+64(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+64(,%rcx,2)
	movl	-276(%rbp), %eax
	movl	%eax, -176(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB82_721
# %bb.700:                              # %if.then3410
                                        #   in Loop: Header=BB82_603 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB82_701:                             # %for.cond3422
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_601 Depth=2
                                        #       Parent Loop BB82_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB82_703 Depth 5
                                        #             Child Loop BB82_705 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB82_712
# %bb.702:                              # %for.body3425
                                        #   in Loop: Header=BB82_701 Depth=4
	movl	$0, -24(%rbp)
.LBB82_703:                             # %for.cond3426
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_601 Depth=2
                                        #       Parent Loop BB82_603 Depth=3
                                        #         Parent Loop BB82_701 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB82_705 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB82_710
# %bb.704:                              # %for.body3429
                                        #   in Loop: Header=BB82_703 Depth=5
	movl	$0, -20(%rbp)
.LBB82_705:                             # %for.cond3430
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_601 Depth=2
                                        #       Parent Loop BB82_603 Depth=3
                                        #         Parent Loop BB82_701 Depth=4
                                        #           Parent Loop BB82_703 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB82_708
# %bb.706:                              # %for.body3433
                                        #   in Loop: Header=BB82_705 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.707:                              # %for.inc3451
                                        #   in Loop: Header=BB82_705 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_705
.LBB82_708:                             # %for.end3453
                                        #   in Loop: Header=BB82_703 Depth=5
	jmp	.LBB82_709
.LBB82_709:                             # %for.inc3454
                                        #   in Loop: Header=BB82_703 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_703
.LBB82_710:                             # %for.end3456
                                        #   in Loop: Header=BB82_701 Depth=4
	jmp	.LBB82_711
.LBB82_711:                             # %for.inc3457
                                        #   in Loop: Header=BB82_701 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB82_701
.LBB82_712:                             # %for.end3459
                                        #   in Loop: Header=BB82_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB82_713:                             # %for.cond3460
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_601 Depth=2
                                        #       Parent Loop BB82_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB82_715 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_720
# %bb.714:                              # %for.body3464
                                        #   in Loop: Header=BB82_713 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB82_715:                             # %for.cond3465
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_601 Depth=2
                                        #       Parent Loop BB82_603 Depth=3
                                        #         Parent Loop BB82_713 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_718
# %bb.716:                              # %for.body3469
                                        #   in Loop: Header=BB82_715 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.717:                              # %for.inc3492
                                        #   in Loop: Header=BB82_715 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_715
.LBB82_718:                             # %for.end3494
                                        #   in Loop: Header=BB82_713 Depth=4
	jmp	.LBB82_719
.LBB82_719:                             # %for.inc3495
                                        #   in Loop: Header=BB82_713 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_713
.LBB82_720:                             # %for.end3497
                                        #   in Loop: Header=BB82_603 Depth=3
	jmp	.LBB82_721
.LBB82_721:                             # %if.end3498
                                        #   in Loop: Header=BB82_603 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB82_731
# %bb.722:                              # %if.then3501
                                        #   in Loop: Header=BB82_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB82_723:                             # %for.cond3502
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_601 Depth=2
                                        #       Parent Loop BB82_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB82_725 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_730
# %bb.724:                              # %for.body3506
                                        #   in Loop: Header=BB82_723 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB82_725:                             # %for.cond3507
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_601 Depth=2
                                        #       Parent Loop BB82_603 Depth=3
                                        #         Parent Loop BB82_723 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_728
# %bb.726:                              # %for.body3511
                                        #   in Loop: Header=BB82_725 Depth=5
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.727:                              # %for.inc3560
                                        #   in Loop: Header=BB82_725 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_725
.LBB82_728:                             # %for.end3562
                                        #   in Loop: Header=BB82_723 Depth=4
	jmp	.LBB82_729
.LBB82_729:                             # %for.inc3563
                                        #   in Loop: Header=BB82_723 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_723
.LBB82_730:                             # %for.end3565
                                        #   in Loop: Header=BB82_603 Depth=3
	jmp	.LBB82_731
.LBB82_731:                             # %if.end3566
                                        #   in Loop: Header=BB82_603 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB82_732:                             # %if.end3567
                                        #   in Loop: Header=BB82_603 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB82_733:                             # %if.end3568
                                        #   in Loop: Header=BB82_603 Depth=3
	jmp	.LBB82_734
.LBB82_734:                             # %for.inc3569
                                        #   in Loop: Header=BB82_603 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB82_603
.LBB82_735:                             # %for.end3571
                                        #   in Loop: Header=BB82_601 Depth=2
	movl	-172(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB82_775
# %bb.736:                              # %if.then3575
                                        #   in Loop: Header=BB82_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	best8x8pdir+64(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -248(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB82_738
# %bb.737:                              # %lor.lhs.false3584
                                        #   in Loop: Header=BB82_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB82_739
.LBB82_738:                             # %cond.true3588
                                        #   in Loop: Header=BB82_601 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB82_740
.LBB82_739:                             # %cond.false3589
                                        #   in Loop: Header=BB82_601 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB82_740
.LBB82_740:                             # %cond.end3590
                                        #   in Loop: Header=BB82_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB82_742
# %bb.741:                              # %lor.lhs.false3595
                                        #   in Loop: Header=BB82_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB82_743
.LBB82_742:                             # %cond.true3599
                                        #   in Loop: Header=BB82_601 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB82_744
.LBB82_743:                             # %cond.false3600
                                        #   in Loop: Header=BB82_601 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB82_744
.LBB82_744:                             # %cond.end3601
                                        #   in Loop: Header=BB82_601 Depth=2
	movslq	-28(%rbp), %rcx
	movw	best8x8fwref+64(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-280(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	best8x8bwref+64(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -176(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB82_745:                             # %for.cond3619
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB82_747 Depth 4
                                        #           Child Loop BB82_749 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB82_756
# %bb.746:                              # %for.body3622
                                        #   in Loop: Header=BB82_745 Depth=3
	movl	$0, -24(%rbp)
.LBB82_747:                             # %for.cond3623
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_601 Depth=2
                                        #       Parent Loop BB82_745 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB82_749 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB82_754
# %bb.748:                              # %for.body3626
                                        #   in Loop: Header=BB82_747 Depth=4
	movl	$0, -20(%rbp)
.LBB82_749:                             # %for.cond3627
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_601 Depth=2
                                        #       Parent Loop BB82_745 Depth=3
                                        #         Parent Loop BB82_747 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB82_752
# %bb.750:                              # %for.body3630
                                        #   in Loop: Header=BB82_749 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.751:                              # %for.inc3648
                                        #   in Loop: Header=BB82_749 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_749
.LBB82_752:                             # %for.end3650
                                        #   in Loop: Header=BB82_747 Depth=4
	jmp	.LBB82_753
.LBB82_753:                             # %for.inc3651
                                        #   in Loop: Header=BB82_747 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_747
.LBB82_754:                             # %for.end3653
                                        #   in Loop: Header=BB82_745 Depth=3
	jmp	.LBB82_755
.LBB82_755:                             # %for.inc3654
                                        #   in Loop: Header=BB82_745 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB82_745
.LBB82_756:                             # %for.end3656
                                        #   in Loop: Header=BB82_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB82_757:                             # %for.cond3657
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB82_759 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_764
# %bb.758:                              # %for.body3661
                                        #   in Loop: Header=BB82_757 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB82_759:                             # %for.cond3662
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_601 Depth=2
                                        #       Parent Loop BB82_757 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_762
# %bb.760:                              # %for.body3666
                                        #   in Loop: Header=BB82_759 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.761:                              # %for.inc3689
                                        #   in Loop: Header=BB82_759 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_759
.LBB82_762:                             # %for.end3691
                                        #   in Loop: Header=BB82_757 Depth=3
	jmp	.LBB82_763
.LBB82_763:                             # %for.inc3692
                                        #   in Loop: Header=BB82_757 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_757
.LBB82_764:                             # %for.end3694
                                        #   in Loop: Header=BB82_601 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB82_774
# %bb.765:                              # %if.then3697
                                        #   in Loop: Header=BB82_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB82_766:                             # %for.cond3698
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB82_768 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_773
# %bb.767:                              # %for.body3702
                                        #   in Loop: Header=BB82_766 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB82_768:                             # %for.cond3703
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_601 Depth=2
                                        #       Parent Loop BB82_766 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_771
# %bb.769:                              # %for.body3707
                                        #   in Loop: Header=BB82_768 Depth=4
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.770:                              # %for.inc3756
                                        #   in Loop: Header=BB82_768 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_768
.LBB82_771:                             # %for.end3758
                                        #   in Loop: Header=BB82_766 Depth=3
	jmp	.LBB82_772
.LBB82_772:                             # %for.inc3759
                                        #   in Loop: Header=BB82_766 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_766
.LBB82_773:                             # %for.end3761
                                        #   in Loop: Header=BB82_601 Depth=2
	jmp	.LBB82_774
.LBB82_774:                             # %if.end3762
                                        #   in Loop: Header=BB82_601 Depth=2
	jmp	.LBB82_775
.LBB82_775:                             # %if.end3763
                                        #   in Loop: Header=BB82_601 Depth=2
	cmpl	$0, -176(%rbp)
	je	.LBB82_777
# %bb.776:                              # %if.then3765
                                        #   in Loop: Header=BB82_601 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-176(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB82_777:                             # %if.end3769
                                        #   in Loop: Header=BB82_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	148(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	%eax, %ecx
	movl	%ecx, -104(%rbp)
	movq	img, %rax
	movl	144(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
	movl	%ecx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB82_778:                             # %for.cond3781
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB82_780 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_785
# %bb.779:                              # %for.body3785
                                        #   in Loop: Header=BB82_778 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB82_780:                             # %for.cond3786
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_601 Depth=2
                                        #       Parent Loop BB82_778 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_783
# %bb.781:                              # %for.body3790
                                        #   in Loop: Header=BB82_780 Depth=4
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
# %bb.782:                              # %for.inc3795
                                        #   in Loop: Header=BB82_780 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_780
.LBB82_783:                             # %for.end3797
                                        #   in Loop: Header=BB82_778 Depth=3
	jmp	.LBB82_784
.LBB82_784:                             # %for.inc3798
                                        #   in Loop: Header=BB82_778 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_778
.LBB82_785:                             # %for.end3800
                                        #   in Loop: Header=BB82_601 Depth=2
	movl	-28(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB82_786:                             # %for.cond3802
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_601 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_789
# %bb.787:                              # %for.body3806
                                        #   in Loop: Header=BB82_786 Depth=3
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.788:                              # %for.inc3809
                                        #   in Loop: Header=BB82_786 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_786
.LBB82_789:                             # %for.end3811
                                        #   in Loop: Header=BB82_601 Depth=2
	cmpl	$3, -28(%rbp)
	jge	.LBB82_799
# %bb.790:                              # %if.then3814
                                        #   in Loop: Header=BB82_601 Depth=2
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB82_791:                             # %for.cond3819
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB82_793 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_798
# %bb.792:                              # %for.body3823
                                        #   in Loop: Header=BB82_791 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB82_793:                             # %for.cond3824
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_601 Depth=2
                                        #       Parent Loop BB82_791 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_796
# %bb.794:                              # %for.body3828
                                        #   in Loop: Header=BB82_793 Depth=4
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.795:                              # %for.inc3842
                                        #   in Loop: Header=BB82_793 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_793
.LBB82_796:                             # %for.end3844
                                        #   in Loop: Header=BB82_791 Depth=3
	jmp	.LBB82_797
.LBB82_797:                             # %for.inc3845
                                        #   in Loop: Header=BB82_791 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_791
.LBB82_798:                             # %for.end3847
                                        #   in Loop: Header=BB82_601 Depth=2
	jmp	.LBB82_799
.LBB82_799:                             # %if.end3848
                                        #   in Loop: Header=BB82_601 Depth=2
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movslq	-28(%rbp), %rax
	movswl	best8x8pdir+64(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	best8x8fwref+64(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	best8x8bwref+64(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	movq	cs_b8, %rdi
	callq	reset_coding_state
# %bb.800:                              # %for.inc3858
                                        #   in Loop: Header=BB82_601 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB82_601
.LBB82_801:                             # %for.end3860
                                        #   in Loop: Header=BB82_171 Depth=1
	jmp	.LBB82_802
.LBB82_802:                             # %if.end3861
                                        #   in Loop: Header=BB82_171 Depth=1
	movq	cs_mb, %rdi
	callq	reset_coding_state
	movl	$0, -20(%rbp)
.LBB82_803:                             # %for.cond3862
                                        #   Parent Loop BB82_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_805 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB82_810
# %bb.804:                              # %for.body3865
                                        #   in Loop: Header=BB82_803 Depth=2
	movl	$0, -24(%rbp)
.LBB82_805:                             # %for.cond3866
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_803 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB82_808
# %bb.806:                              # %for.body3869
                                        #   in Loop: Header=BB82_805 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.807:                              # %for.inc3888
                                        #   in Loop: Header=BB82_805 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_805
.LBB82_808:                             # %for.end3890
                                        #   in Loop: Header=BB82_803 Depth=2
	jmp	.LBB82_809
.LBB82_809:                             # %for.inc3891
                                        #   in Loop: Header=BB82_803 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_803
.LBB82_810:                             # %for.end3893
                                        #   in Loop: Header=BB82_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB82_825
# %bb.811:                              # %land.lhs.true3896
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	-144(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jl	.LBB82_813
# %bb.812:                              # %lor.lhs.false3899
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB82_825
.LBB82_813:                             # %if.then3902
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	$8, best_mode
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB82_823
# %bb.814:                              # %if.then3905
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB82_816
# %bb.815:                              # %if.then3908
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB82_822
.LBB82_816:                             # %if.else3910
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	-144(%rbp), %eax
	cmpl	cost8_8x8ts, %eax
	jge	.LBB82_818
# %bb.817:                              # %if.then3913
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB82_821
.LBB82_818:                             # %if.else3915
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	callq	GetBestTransformP8x8
	cmpl	$0, %eax
	jne	.LBB82_820
# %bb.819:                              # %if.then3920
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB82_820:                             # %if.end3922
                                        #   in Loop: Header=BB82_171 Depth=1
	jmp	.LBB82_821
.LBB82_821:                             # %if.end3923
                                        #   in Loop: Header=BB82_171 Depth=1
	jmp	.LBB82_822
.LBB82_822:                             # %if.end3924
                                        #   in Loop: Header=BB82_171 Depth=1
	jmp	.LBB82_824
.LBB82_823:                             # %if.else3925
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB82_824:                             # %if.end3927
                                        #   in Loop: Header=BB82_171 Depth=1
	jmp	.LBB82_825
.LBB82_825:                             # %if.end3928
                                        #   in Loop: Header=BB82_171 Depth=1
	jmp	.LBB82_827
.LBB82_826:                             # %if.else3929
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
.LBB82_827:                             # %if.end3930
                                        #   in Loop: Header=BB82_171 Depth=1
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB82_829
# %bb.828:                              # %lor.lhs.false3934
                                        #   in Loop: Header=BB82_171 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB82_830
.LBB82_829:                             # %if.then3938
                                        #   in Loop: Header=BB82_171 Depth=1
	movb	$0, %al
	callq	FindSkipModeMotionVector
.LBB82_830:                             # %if.end3939
                                        #   in Loop: Header=BB82_171 Depth=1
	jmp	.LBB82_832
.LBB82_831:                             # %if.else3940
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
.LBB82_832:                             # %if.end3941
                                        #   in Loop: Header=BB82_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB82_1083
# %bb.833:                              # %if.then3944
                                        #   in Loop: Header=BB82_171 Depth=1
	vmovsd	-472(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -240(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB82_978
# %bb.834:                              # %if.then3947
                                        #   in Loop: Header=BB82_171 Depth=1
	leaq	-268(%rbp), %rdi
	leaq	-272(%rbp), %rsi
	leaq	-320(%rbp), %rdx
	callq	IntraChromaPrediction
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
.LBB82_835:                             # %for.cond3949
                                        #   Parent Loop BB82_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_853 Depth 3
                                        #         Child Loop BB82_908 Depth 4
                                        #           Child Loop BB82_911 Depth 5
                                        #             Child Loop BB82_913 Depth 6
                                        #           Child Loop BB82_920 Depth 5
                                        #             Child Loop BB82_922 Depth 6
                                        #         Child Loop BB82_955 Depth 4
                                        #           Child Loop BB82_957 Depth 5
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jg	.LBB82_977
# %bb.836:                              # %for.body3953
                                        #   in Loop: Header=BB82_835 Depth=2
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB82_838
# %bb.837:                              # %land.lhs.true3956
                                        #   in Loop: Header=BB82_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	jne	.LBB82_846
.LBB82_838:                             # %lor.lhs.false3960
                                        #   in Loop: Header=BB82_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$2, 524(%rax)
	jne	.LBB82_840
# %bb.839:                              # %land.lhs.true3964
                                        #   in Loop: Header=BB82_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB82_846
.LBB82_840:                             # %lor.lhs.false3966
                                        #   in Loop: Header=BB82_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$1, 524(%rax)
	jne	.LBB82_842
# %bb.841:                              # %land.lhs.true3970
                                        #   in Loop: Header=BB82_835 Depth=2
	cmpl	$0, -272(%rbp)
	je	.LBB82_846
.LBB82_842:                             # %lor.lhs.false3972
                                        #   in Loop: Header=BB82_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jne	.LBB82_847
# %bb.843:                              # %land.lhs.true3976
                                        #   in Loop: Header=BB82_835 Depth=2
	cmpl	$0, -272(%rbp)
	je	.LBB82_846
# %bb.844:                              # %lor.lhs.false3978
                                        #   in Loop: Header=BB82_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB82_846
# %bb.845:                              # %lor.lhs.false3980
                                        #   in Loop: Header=BB82_835 Depth=2
	cmpl	$0, -320(%rbp)
	jne	.LBB82_847
.LBB82_846:                             # %if.then3982
                                        #   in Loop: Header=BB82_835 Depth=2
	jmp	.LBB82_976
.LBB82_847:                             # %if.end3983
                                        #   in Loop: Header=BB82_835 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB82_849
# %bb.848:                              # %if.then3986
                                        #   in Loop: Header=BB82_835 Depth=2
	movl	$11, -312(%rbp)
	jmp	.LBB82_850
.LBB82_849:                             # %if.else3987
                                        #   in Loop: Header=BB82_835 Depth=2
	movl	$8, -312(%rbp)
.LBB82_850:                             # %if.end3988
                                        #   in Loop: Header=BB82_835 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB82_852
# %bb.851:                              # %if.then3991
                                        #   in Loop: Header=BB82_835 Depth=2
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB82_852:                             # %if.end3994
                                        #   in Loop: Header=BB82_835 Depth=2
	movl	$0, -124(%rbp)
	movl	$0, -80(%rbp)
.LBB82_853:                             # %for.cond3995
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_835 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB82_908 Depth 4
                                        #           Child Loop BB82_911 Depth 5
                                        #             Child Loop BB82_913 Depth 6
                                        #           Child Loop BB82_920 Depth 5
                                        #             Child Loop BB82_922 Depth 6
                                        #         Child Loop BB82_955 Depth 4
                                        #           Child Loop BB82_957 Depth 5
	movl	-80(%rbp), %eax
	cmpl	-312(%rbp), %eax
	jge	.LBB82_975
# %bb.854:                              # %for.body3998
                                        #   in Loop: Header=BB82_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB82_868
# %bb.855:                              # %if.then4003
                                        #   in Loop: Header=BB82_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table_RCT(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$10, -32(%rbp)
	jne	.LBB82_857
# %bb.856:                              # %if.then4008
                                        #   in Loop: Header=BB82_853 Depth=3
	movl	-80(%rbp), %eax
	subl	$5, %eax
	movl	%eax, -128(%rbp)
.LBB82_857:                             # %if.end4010
                                        #   in Loop: Header=BB82_853 Depth=3
	cmpl	$10, -32(%rbp)
	jne	.LBB82_867
# %bb.858:                              # %land.lhs.true4013
                                        #   in Loop: Header=BB82_853 Depth=3
	cmpl	$0, -128(%rbp)
	jne	.LBB82_860
# %bb.859:                              # %land.lhs.true4016
                                        #   in Loop: Header=BB82_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB82_866
.LBB82_860:                             # %lor.lhs.false4018
                                        #   in Loop: Header=BB82_853 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB82_862
# %bb.861:                              # %land.lhs.true4021
                                        #   in Loop: Header=BB82_853 Depth=3
	cmpl	$0, -272(%rbp)
	je	.LBB82_866
.LBB82_862:                             # %lor.lhs.false4023
                                        #   in Loop: Header=BB82_853 Depth=3
	cmpl	$3, -128(%rbp)
	jne	.LBB82_867
# %bb.863:                              # %land.lhs.true4026
                                        #   in Loop: Header=BB82_853 Depth=3
	cmpl	$0, -272(%rbp)
	je	.LBB82_866
# %bb.864:                              # %lor.lhs.false4028
                                        #   in Loop: Header=BB82_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB82_866
# %bb.865:                              # %lor.lhs.false4030
                                        #   in Loop: Header=BB82_853 Depth=3
	cmpl	$0, -320(%rbp)
	jne	.LBB82_867
.LBB82_866:                             # %if.then4032
                                        #   in Loop: Header=BB82_853 Depth=3
	jmp	.LBB82_974
.LBB82_867:                             # %if.end4033
                                        #   in Loop: Header=BB82_853 Depth=3
	jmp	.LBB82_869
.LBB82_868:                             # %if.else4034
                                        #   in Loop: Header=BB82_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -128(%rbp)
.LBB82_869:                             # %if.end4037
                                        #   in Loop: Header=BB82_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB82_881
# %bb.870:                              # %land.lhs.true4040
                                        #   in Loop: Header=BB82_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB82_881
# %bb.871:                              # %if.then4044
                                        #   in Loop: Header=BB82_853 Depth=3
	movl	-124(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB82_878
# %bb.872:                              # %land.lhs.true4048
                                        #   in Loop: Header=BB82_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB82_878
# %bb.873:                              # %if.then4052
                                        #   in Loop: Header=BB82_853 Depth=3
	cmpl	$2, -124(%rbp)
	jne	.LBB82_877
# %bb.874:                              # %land.lhs.true4055
                                        #   in Loop: Header=BB82_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB82_877
# %bb.875:                              # %land.lhs.true4062
                                        #   in Loop: Header=BB82_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB82_877
# %bb.876:                              # %if.then4065
                                        #   in Loop: Header=BB82_853 Depth=3
	movl	-124(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -124(%rbp)
.LBB82_877:                             # %if.end4066
                                        #   in Loop: Header=BB82_853 Depth=3
	jmp	.LBB82_878
.LBB82_878:                             # %if.end4067
                                        #   in Loop: Header=BB82_853 Depth=3
	cmpl	$2, -124(%rbp)
	jge	.LBB82_880
# %bb.879:                              # %if.then4070
                                        #   in Loop: Header=BB82_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB82_880:                             # %if.end4072
                                        #   in Loop: Header=BB82_853 Depth=3
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
.LBB82_881:                             # %if.end4074
                                        #   in Loop: Header=BB82_853 Depth=3
	movq	img, %rax
	movl	$0, 72392(%rax)
	movq	input, %rax
	cmpl	$0, 1312(%rax)
	je	.LBB82_888
# %bb.882:                              # %land.lhs.true4076
                                        #   in Loop: Header=BB82_853 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB82_888
# %bb.883:                              # %if.then4080
                                        #   in Loop: Header=BB82_853 Depth=3
	cmpl	$10, -32(%rbp)
	jl	.LBB82_887
# %bb.884:                              # %land.lhs.true4083
                                        #   in Loop: Header=BB82_853 Depth=3
	cmpl	$0, best_mode
	jne	.LBB82_887
# %bb.885:                              # %land.lhs.true4086
                                        #   in Loop: Header=BB82_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB82_887
# %bb.886:                              # %if.then4089
                                        #   in Loop: Header=BB82_853 Depth=3
	movslq	-32(%rbp), %rax
	movl	$0, -384(%rbp,%rax,4)
.LBB82_887:                             # %if.end4092
                                        #   in Loop: Header=BB82_853 Depth=3
	jmp	.LBB82_888
.LBB82_888:                             # %if.end4093
                                        #   in Loop: Header=BB82_853 Depth=3
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB82_965
# %bb.889:                              # %if.then4097
                                        #   in Loop: Header=BB82_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB82_903
# %bb.890:                              # %if.then4102
                                        #   in Loop: Header=BB82_853 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB82_893
# %bb.891:                              # %land.lhs.true4105
                                        #   in Loop: Header=BB82_853 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB82_893
# %bb.892:                              # %if.then4108
                                        #   in Loop: Header=BB82_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB82_902
.LBB82_893:                             # %if.else4110
                                        #   in Loop: Header=BB82_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB82_897
# %bb.894:                              # %land.lhs.true4113
                                        #   in Loop: Header=BB82_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB82_897
# %bb.895:                              # %land.lhs.true4115
                                        #   in Loop: Header=BB82_853 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB82_897
# %bb.896:                              # %if.then4118
                                        #   in Loop: Header=BB82_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB82_901
.LBB82_897:                             # %if.else4120
                                        #   in Loop: Header=BB82_853 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB82_900
# %bb.898:                              # %land.lhs.true4123
                                        #   in Loop: Header=BB82_853 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB82_900
# %bb.899:                              # %if.then4126
                                        #   in Loop: Header=BB82_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB82_900:                             # %if.end4128
                                        #   in Loop: Header=BB82_853 Depth=3
	jmp	.LBB82_901
.LBB82_901:                             # %if.end4129
                                        #   in Loop: Header=BB82_853 Depth=3
	jmp	.LBB82_902
.LBB82_902:                             # %if.end4130
                                        #   in Loop: Header=BB82_853 Depth=3
	jmp	.LBB82_903
.LBB82_903:                             # %if.end4131
                                        #   in Loop: Header=BB82_853 Depth=3
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB82_907
# %bb.904:                              # %lor.lhs.false4135
                                        #   in Loop: Header=BB82_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB82_907
# %bb.905:                              # %lor.lhs.false4138
                                        #   in Loop: Header=BB82_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB82_907
# %bb.906:                              # %lor.lhs.false4142
                                        #   in Loop: Header=BB82_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB82_947
.LBB82_907:                             # %if.then4146
                                        #   in Loop: Header=BB82_853 Depth=3
	jmp	.LBB82_908
.LBB82_908:                             # %while.body
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_835 Depth=2
                                        #       Parent Loop BB82_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB82_911 Depth 5
                                        #             Child Loop BB82_913 Depth 6
                                        #           Child Loop BB82_920 Depth 5
                                        #             Child Loop BB82_922 Depth 6
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB82_929
# %bb.909:                              # %if.then4149
                                        #   in Loop: Header=BB82_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB82_919
# %bb.910:                              # %if.then4152
                                        #   in Loop: Header=BB82_908 Depth=4
	movl	$0, -20(%rbp)
.LBB82_911:                             # %for.cond4153
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_835 Depth=2
                                        #       Parent Loop BB82_853 Depth=3
                                        #         Parent Loop BB82_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB82_913 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB82_918
# %bb.912:                              # %for.body4156
                                        #   in Loop: Header=BB82_911 Depth=5
	movl	$0, -24(%rbp)
.LBB82_913:                             # %for.cond4157
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_835 Depth=2
                                        #       Parent Loop BB82_853 Depth=3
                                        #         Parent Loop BB82_908 Depth=4
                                        #           Parent Loop BB82_911 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB82_916
# %bb.914:                              # %for.body4160
                                        #   in Loop: Header=BB82_913 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.915:                              # %for.inc4180
                                        #   in Loop: Header=BB82_913 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_913
.LBB82_916:                             # %for.end4182
                                        #   in Loop: Header=BB82_911 Depth=5
	jmp	.LBB82_917
.LBB82_917:                             # %for.inc4183
                                        #   in Loop: Header=BB82_911 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_911
.LBB82_918:                             # %for.end4185
                                        #   in Loop: Header=BB82_908 Depth=4
	jmp	.LBB82_928
.LBB82_919:                             # %if.else4186
                                        #   in Loop: Header=BB82_908 Depth=4
	movl	$0, -20(%rbp)
.LBB82_920:                             # %for.cond4187
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_835 Depth=2
                                        #       Parent Loop BB82_853 Depth=3
                                        #         Parent Loop BB82_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB82_922 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB82_927
# %bb.921:                              # %for.body4190
                                        #   in Loop: Header=BB82_920 Depth=5
	movl	$0, -24(%rbp)
.LBB82_922:                             # %for.cond4191
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_835 Depth=2
                                        #       Parent Loop BB82_853 Depth=3
                                        #         Parent Loop BB82_908 Depth=4
                                        #           Parent Loop BB82_920 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB82_925
# %bb.923:                              # %for.body4194
                                        #   in Loop: Header=BB82_922 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.924:                              # %for.inc4213
                                        #   in Loop: Header=BB82_922 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_922
.LBB82_925:                             # %for.end4215
                                        #   in Loop: Header=BB82_920 Depth=5
	jmp	.LBB82_926
.LBB82_926:                             # %for.inc4216
                                        #   in Loop: Header=BB82_920 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_920
.LBB82_927:                             # %for.end4218
                                        #   in Loop: Header=BB82_908 Depth=4
	jmp	.LBB82_928
.LBB82_928:                             # %if.end4219
                                        #   in Loop: Header=BB82_908 Depth=4
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB82_929:                             # %if.end4220
                                        #   in Loop: Header=BB82_908 Depth=4
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB82_945
# %bb.930:                              # %if.then4224
                                        #   in Loop: Header=BB82_908 Depth=4
	cmpl	$1, -32(%rbp)
	jl	.LBB82_935
# %bb.931:                              # %land.lhs.true4227
                                        #   in Loop: Header=BB82_908 Depth=4
	cmpl	$3, -32(%rbp)
	jg	.LBB82_935
# %bb.932:                              # %land.lhs.true4230
                                        #   in Loop: Header=BB82_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB82_935
# %bb.933:                              # %if.then4234
                                        #   in Loop: Header=BB82_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB82_934:                             # %while.body.backedge
                                        #   in Loop: Header=BB82_908 Depth=4
	jmp	.LBB82_908
.LBB82_935:                             # %if.else4236
                                        #   in Loop: Header=BB82_908 Depth=4
	cmpl	$0, -32(%rbp)
	jne	.LBB82_940
# %bb.936:                              # %land.lhs.true4239
                                        #   in Loop: Header=BB82_908 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB82_940
# %bb.937:                              # %land.lhs.true4241
                                        #   in Loop: Header=BB82_908 Depth=4
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB82_940
# %bb.938:                              # %land.lhs.true4244
                                        #   in Loop: Header=BB82_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB82_940
# %bb.939:                              # %if.then4248
                                        #   in Loop: Header=BB82_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB82_934
.LBB82_940:                             # %if.else4250
                                        #   in Loop: Header=BB82_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB82_944
# %bb.941:                              # %land.lhs.true4253
                                        #   in Loop: Header=BB82_908 Depth=4
	cmpl	$0, -368(%rbp)
	je	.LBB82_944
# %bb.942:                              # %land.lhs.true4256
                                        #   in Loop: Header=BB82_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB82_944
# %bb.943:                              # %if.then4260
                                        #   in Loop: Header=BB82_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB82_934
.LBB82_944:                             # %if.else4262
                                        #   in Loop: Header=BB82_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB82_946
.LBB82_945:                             # %if.else4264
                                        #   in Loop: Header=BB82_853 Depth=3
	jmp	.LBB82_946
.LBB82_946:                             # %while.end
                                        #   in Loop: Header=BB82_853 Depth=3
	jmp	.LBB82_947
.LBB82_947:                             # %if.end4265
                                        #   in Loop: Header=BB82_853 Depth=3
	cmpl	$0, -384(%rbp)
	je	.LBB82_964
# %bb.948:                              # %land.lhs.true4268
                                        #   in Loop: Header=BB82_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB82_964
# %bb.949:                              # %land.lhs.true4270
                                        #   in Loop: Header=BB82_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB82_964
# %bb.950:                              # %land.lhs.true4273
                                        #   in Loop: Header=BB82_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB82_964
# %bb.951:                              # %land.lhs.true4276
                                        #   in Loop: Header=BB82_853 Depth=3
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB82_964
# %bb.952:                              # %land.lhs.true4281
                                        #   in Loop: Header=BB82_853 Depth=3
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB82_964
# %bb.953:                              # %if.then4283
                                        #   in Loop: Header=BB82_853 Depth=3
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB82_963
# %bb.954:                              # %if.then4287
                                        #   in Loop: Header=BB82_853 Depth=3
	movl	$0, -20(%rbp)
.LBB82_955:                             # %for.cond4288
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_835 Depth=2
                                        #       Parent Loop BB82_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB82_957 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB82_962
# %bb.956:                              # %for.body4291
                                        #   in Loop: Header=BB82_955 Depth=4
	movl	$0, -24(%rbp)
.LBB82_957:                             # %for.cond4292
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_835 Depth=2
                                        #       Parent Loop BB82_853 Depth=3
                                        #         Parent Loop BB82_955 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB82_960
# %bb.958:                              # %for.body4295
                                        #   in Loop: Header=BB82_957 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.959:                              # %for.inc4314
                                        #   in Loop: Header=BB82_957 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_957
.LBB82_960:                             # %for.end4316
                                        #   in Loop: Header=BB82_955 Depth=4
	jmp	.LBB82_961
.LBB82_961:                             # %for.inc4317
                                        #   in Loop: Header=BB82_955 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_955
.LBB82_962:                             # %for.end4319
                                        #   in Loop: Header=BB82_853 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB82_963:                             # %if.end4320
                                        #   in Loop: Header=BB82_853 Depth=3
	jmp	.LBB82_964
.LBB82_964:                             # %if.end4321
                                        #   in Loop: Header=BB82_853 Depth=3
	jmp	.LBB82_965
.LBB82_965:                             # %if.end4322
                                        #   in Loop: Header=BB82_853 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB82_973
# %bb.966:                              # %land.lhs.true4325
                                        #   in Loop: Header=BB82_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB82_973
# %bb.967:                              # %if.then4329
                                        #   in Loop: Header=BB82_853 Depth=3
	cmpl	$2, -124(%rbp)
	jne	.LBB82_972
# %bb.968:                              # %land.lhs.true4332
                                        #   in Loop: Header=BB82_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB82_972
# %bb.969:                              # %land.lhs.true4339
                                        #   in Loop: Header=BB82_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB82_972
# %bb.970:                              # %land.lhs.true4342
                                        #   in Loop: Header=BB82_853 Depth=3
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB82_972
# %bb.971:                              # %if.then4346
                                        #   in Loop: Header=BB82_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB82_972:                             # %if.end4356
                                        #   in Loop: Header=BB82_853 Depth=3
	jmp	.LBB82_973
.LBB82_973:                             # %if.end4357
                                        #   in Loop: Header=BB82_853 Depth=3
	jmp	.LBB82_974
.LBB82_974:                             # %for.inc4358
                                        #   in Loop: Header=BB82_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB82_853
.LBB82_975:                             # %for.end4360
                                        #   in Loop: Header=BB82_835 Depth=2
	jmp	.LBB82_976
.LBB82_976:                             # %for.inc4361
                                        #   in Loop: Header=BB82_835 Depth=2
	movq	-48(%rbp), %rax
	movl	524(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 524(%rax)
	jmp	.LBB82_835
.LBB82_977:                             # %for.end4364
                                        #   in Loop: Header=BB82_171 Depth=1
	jmp	.LBB82_1082
.LBB82_978:                             # %if.else4365
                                        #   in Loop: Header=BB82_171 Depth=1
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB82_980
# %bb.979:                              # %if.then4368
                                        #   in Loop: Header=BB82_171 Depth=1
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB82_980:                             # %if.end4371
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	$0, -124(%rbp)
	movl	$0, -80(%rbp)
.LBB82_981:                             # %for.cond4372
                                        #   Parent Loop BB82_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_1014 Depth 3
                                        #         Child Loop BB82_1017 Depth 4
                                        #           Child Loop BB82_1019 Depth 5
                                        #         Child Loop BB82_1026 Depth 4
                                        #           Child Loop BB82_1028 Depth 5
                                        #       Child Loop BB82_1061 Depth 3
                                        #         Child Loop BB82_1063 Depth 4
	cmpl	$8, -80(%rbp)
	jge	.LBB82_1081
# %bb.982:                              # %for.body4375
                                        #   in Loop: Header=BB82_981 Depth=2
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB82_994
# %bb.983:                              # %land.lhs.true4380
                                        #   in Loop: Header=BB82_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB82_994
# %bb.984:                              # %if.then4384
                                        #   in Loop: Header=BB82_981 Depth=2
	movl	-124(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB82_991
# %bb.985:                              # %land.lhs.true4388
                                        #   in Loop: Header=BB82_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB82_991
# %bb.986:                              # %if.then4392
                                        #   in Loop: Header=BB82_981 Depth=2
	cmpl	$2, -124(%rbp)
	jne	.LBB82_990
# %bb.987:                              # %land.lhs.true4395
                                        #   in Loop: Header=BB82_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB82_990
# %bb.988:                              # %land.lhs.true4402
                                        #   in Loop: Header=BB82_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB82_990
# %bb.989:                              # %if.then4405
                                        #   in Loop: Header=BB82_981 Depth=2
	movl	-124(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -124(%rbp)
.LBB82_990:                             # %if.end4407
                                        #   in Loop: Header=BB82_981 Depth=2
	jmp	.LBB82_991
.LBB82_991:                             # %if.end4408
                                        #   in Loop: Header=BB82_981 Depth=2
	cmpl	$2, -124(%rbp)
	jge	.LBB82_993
# %bb.992:                              # %if.then4411
                                        #   in Loop: Header=BB82_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB82_993:                             # %if.end4413
                                        #   in Loop: Header=BB82_981 Depth=2
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
.LBB82_994:                             # %if.end4415
                                        #   in Loop: Header=BB82_981 Depth=2
	movq	img, %rax
	movl	$0, 72392(%rax)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB82_1071
# %bb.995:                              # %if.then4420
                                        #   in Loop: Header=BB82_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB82_1009
# %bb.996:                              # %if.then4425
                                        #   in Loop: Header=BB82_981 Depth=2
	cmpl	$1, -32(%rbp)
	jl	.LBB82_999
# %bb.997:                              # %land.lhs.true4428
                                        #   in Loop: Header=BB82_981 Depth=2
	cmpl	$3, -32(%rbp)
	jg	.LBB82_999
# %bb.998:                              # %if.then4431
                                        #   in Loop: Header=BB82_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB82_1008
.LBB82_999:                             # %if.else4433
                                        #   in Loop: Header=BB82_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB82_1003
# %bb.1000:                             # %land.lhs.true4436
                                        #   in Loop: Header=BB82_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB82_1003
# %bb.1001:                             # %land.lhs.true4438
                                        #   in Loop: Header=BB82_981 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB82_1003
# %bb.1002:                             # %if.then4441
                                        #   in Loop: Header=BB82_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB82_1007
.LBB82_1003:                            # %if.else4443
                                        #   in Loop: Header=BB82_981 Depth=2
	cmpl	$8, -32(%rbp)
	jne	.LBB82_1006
# %bb.1004:                             # %land.lhs.true4446
                                        #   in Loop: Header=BB82_981 Depth=2
	cmpl	$0, -368(%rbp)
	je	.LBB82_1006
# %bb.1005:                             # %if.then4449
                                        #   in Loop: Header=BB82_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB82_1006:                            # %if.end4451
                                        #   in Loop: Header=BB82_981 Depth=2
	jmp	.LBB82_1007
.LBB82_1007:                            # %if.end4452
                                        #   in Loop: Header=BB82_981 Depth=2
	jmp	.LBB82_1008
.LBB82_1008:                            # %if.end4453
                                        #   in Loop: Header=BB82_981 Depth=2
	jmp	.LBB82_1009
.LBB82_1009:                            # %if.end4454
                                        #   in Loop: Header=BB82_981 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB82_1013
# %bb.1010:                             # %lor.lhs.false4458
                                        #   in Loop: Header=BB82_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB82_1013
# %bb.1011:                             # %lor.lhs.false4462
                                        #   in Loop: Header=BB82_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB82_1013
# %bb.1012:                             # %lor.lhs.false4466
                                        #   in Loop: Header=BB82_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB82_1053
.LBB82_1013:                            # %if.then4470
                                        #   in Loop: Header=BB82_981 Depth=2
	jmp	.LBB82_1014
.LBB82_1014:                            # %while.body4471
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB82_1017 Depth 4
                                        #           Child Loop BB82_1019 Depth 5
                                        #         Child Loop BB82_1026 Depth 4
                                        #           Child Loop BB82_1028 Depth 5
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB82_1035
# %bb.1015:                             # %if.then4474
                                        #   in Loop: Header=BB82_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB82_1025
# %bb.1016:                             # %if.then4477
                                        #   in Loop: Header=BB82_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB82_1017:                            # %for.cond4478
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_981 Depth=2
                                        #       Parent Loop BB82_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB82_1019 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB82_1024
# %bb.1018:                             # %for.body4481
                                        #   in Loop: Header=BB82_1017 Depth=4
	movl	$0, -24(%rbp)
.LBB82_1019:                            # %for.cond4482
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_981 Depth=2
                                        #       Parent Loop BB82_1014 Depth=3
                                        #         Parent Loop BB82_1017 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB82_1022
# %bb.1020:                             # %for.body4485
                                        #   in Loop: Header=BB82_1019 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1021:                             # %for.inc4505
                                        #   in Loop: Header=BB82_1019 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_1019
.LBB82_1022:                            # %for.end4507
                                        #   in Loop: Header=BB82_1017 Depth=4
	jmp	.LBB82_1023
.LBB82_1023:                            # %for.inc4508
                                        #   in Loop: Header=BB82_1017 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_1017
.LBB82_1024:                            # %for.end4510
                                        #   in Loop: Header=BB82_1014 Depth=3
	jmp	.LBB82_1034
.LBB82_1025:                            # %if.else4511
                                        #   in Loop: Header=BB82_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB82_1026:                            # %for.cond4512
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_981 Depth=2
                                        #       Parent Loop BB82_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB82_1028 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB82_1033
# %bb.1027:                             # %for.body4515
                                        #   in Loop: Header=BB82_1026 Depth=4
	movl	$0, -24(%rbp)
.LBB82_1028:                            # %for.cond4516
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_981 Depth=2
                                        #       Parent Loop BB82_1014 Depth=3
                                        #         Parent Loop BB82_1026 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB82_1031
# %bb.1029:                             # %for.body4519
                                        #   in Loop: Header=BB82_1028 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1030:                             # %for.inc4538
                                        #   in Loop: Header=BB82_1028 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_1028
.LBB82_1031:                            # %for.end4540
                                        #   in Loop: Header=BB82_1026 Depth=4
	jmp	.LBB82_1032
.LBB82_1032:                            # %for.inc4541
                                        #   in Loop: Header=BB82_1026 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_1026
.LBB82_1033:                            # %for.end4543
                                        #   in Loop: Header=BB82_1014 Depth=3
	jmp	.LBB82_1034
.LBB82_1034:                            # %if.end4544
                                        #   in Loop: Header=BB82_1014 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB82_1035:                            # %if.end4545
                                        #   in Loop: Header=BB82_1014 Depth=3
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB82_1051
# %bb.1036:                             # %if.then4549
                                        #   in Loop: Header=BB82_1014 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB82_1041
# %bb.1037:                             # %land.lhs.true4552
                                        #   in Loop: Header=BB82_1014 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB82_1041
# %bb.1038:                             # %land.lhs.true4555
                                        #   in Loop: Header=BB82_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB82_1041
# %bb.1039:                             # %if.then4559
                                        #   in Loop: Header=BB82_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB82_1040:                            # %while.body4471.backedge
                                        #   in Loop: Header=BB82_1014 Depth=3
	jmp	.LBB82_1014
.LBB82_1041:                            # %if.else4561
                                        #   in Loop: Header=BB82_1014 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB82_1046
# %bb.1042:                             # %land.lhs.true4564
                                        #   in Loop: Header=BB82_1014 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB82_1046
# %bb.1043:                             # %land.lhs.true4566
                                        #   in Loop: Header=BB82_1014 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB82_1046
# %bb.1044:                             # %land.lhs.true4569
                                        #   in Loop: Header=BB82_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB82_1046
# %bb.1045:                             # %if.then4573
                                        #   in Loop: Header=BB82_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB82_1040
.LBB82_1046:                            # %if.else4575
                                        #   in Loop: Header=BB82_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB82_1050
# %bb.1047:                             # %land.lhs.true4578
                                        #   in Loop: Header=BB82_1014 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB82_1050
# %bb.1048:                             # %land.lhs.true4581
                                        #   in Loop: Header=BB82_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB82_1050
# %bb.1049:                             # %if.then4585
                                        #   in Loop: Header=BB82_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB82_1040
.LBB82_1050:                            # %if.else4587
                                        #   in Loop: Header=BB82_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB82_1052
.LBB82_1051:                            # %if.else4589
                                        #   in Loop: Header=BB82_981 Depth=2
	jmp	.LBB82_1052
.LBB82_1052:                            # %while.end4590
                                        #   in Loop: Header=BB82_981 Depth=2
	jmp	.LBB82_1053
.LBB82_1053:                            # %if.end4591
                                        #   in Loop: Header=BB82_981 Depth=2
	cmpl	$0, -384(%rbp)
	je	.LBB82_1070
# %bb.1054:                             # %land.lhs.true4594
                                        #   in Loop: Header=BB82_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB82_1070
# %bb.1055:                             # %land.lhs.true4596
                                        #   in Loop: Header=BB82_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB82_1070
# %bb.1056:                             # %land.lhs.true4599
                                        #   in Loop: Header=BB82_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB82_1070
# %bb.1057:                             # %land.lhs.true4602
                                        #   in Loop: Header=BB82_981 Depth=2
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB82_1070
# %bb.1058:                             # %land.lhs.true4607
                                        #   in Loop: Header=BB82_981 Depth=2
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB82_1070
# %bb.1059:                             # %if.then4610
                                        #   in Loop: Header=BB82_981 Depth=2
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB82_1069
# %bb.1060:                             # %if.then4614
                                        #   in Loop: Header=BB82_981 Depth=2
	movl	$0, -20(%rbp)
.LBB82_1061:                            # %for.cond4615
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB82_1063 Depth 4
	cmpl	$16, -20(%rbp)
	jge	.LBB82_1068
# %bb.1062:                             # %for.body4618
                                        #   in Loop: Header=BB82_1061 Depth=3
	movl	$0, -24(%rbp)
.LBB82_1063:                            # %for.cond4619
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_981 Depth=2
                                        #       Parent Loop BB82_1061 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -24(%rbp)
	jge	.LBB82_1066
# %bb.1064:                             # %for.body4622
                                        #   in Loop: Header=BB82_1063 Depth=4
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1065:                             # %for.inc4641
                                        #   in Loop: Header=BB82_1063 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_1063
.LBB82_1066:                            # %for.end4643
                                        #   in Loop: Header=BB82_1061 Depth=3
	jmp	.LBB82_1067
.LBB82_1067:                            # %for.inc4644
                                        #   in Loop: Header=BB82_1061 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_1061
.LBB82_1068:                            # %for.end4646
                                        #   in Loop: Header=BB82_981 Depth=2
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB82_1069:                            # %if.end4647
                                        #   in Loop: Header=BB82_981 Depth=2
	jmp	.LBB82_1070
.LBB82_1070:                            # %if.end4648
                                        #   in Loop: Header=BB82_981 Depth=2
	jmp	.LBB82_1071
.LBB82_1071:                            # %if.end4649
                                        #   in Loop: Header=BB82_981 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB82_1079
# %bb.1072:                             # %land.lhs.true4652
                                        #   in Loop: Header=BB82_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB82_1079
# %bb.1073:                             # %if.then4656
                                        #   in Loop: Header=BB82_981 Depth=2
	cmpl	$2, -124(%rbp)
	jne	.LBB82_1078
# %bb.1074:                             # %land.lhs.true4659
                                        #   in Loop: Header=BB82_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB82_1078
# %bb.1075:                             # %land.lhs.true4666
                                        #   in Loop: Header=BB82_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB82_1078
# %bb.1076:                             # %land.lhs.true4669
                                        #   in Loop: Header=BB82_981 Depth=2
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB82_1078
# %bb.1077:                             # %if.then4673
                                        #   in Loop: Header=BB82_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB82_1078:                            # %if.end4683
                                        #   in Loop: Header=BB82_981 Depth=2
	jmp	.LBB82_1079
.LBB82_1079:                            # %if.end4684
                                        #   in Loop: Header=BB82_981 Depth=2
	jmp	.LBB82_1080
.LBB82_1080:                            # %for.inc4685
                                        #   in Loop: Header=BB82_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB82_981
.LBB82_1081:                            # %for.end4687
                                        #   in Loop: Header=BB82_171 Depth=1
	jmp	.LBB82_1082
.LBB82_1082:                            # %if.end4688
                                        #   in Loop: Header=BB82_171 Depth=1
	jmp	.LBB82_1284
.LBB82_1083:                            # %if.else4689
                                        #   in Loop: Header=BB82_171 Depth=1
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -220(%rbp)
	movq	-48(%rbp), %rax
	movl	576(%rax), %eax
	movl	%eax, -308(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB82_1085
# %bb.1084:                             # %if.then4694
                                        #   in Loop: Header=BB82_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB82_1085:                            # %if.end4695
                                        #   in Loop: Header=BB82_171 Depth=1
	cmpl	$0, -384(%rbp)
	je	.LBB82_1123
# %bb.1086:                             # %land.lhs.true4698
                                        #   in Loop: Header=BB82_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB82_1123
# %bb.1087:                             # %if.then4700
                                        #   in Loop: Header=BB82_171 Depth=1
	cmpl	$0, -260(%rbp)
	je	.LBB82_1100
# %bb.1088:                             # %if.then4702
                                        #   in Loop: Header=BB82_171 Depth=1
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB82_1090
	jmp	.LBB82_1089
.LBB82_1089:                            # %if.then4702
                                        #   in Loop: Header=BB82_171 Depth=1
	subl	$2, %eax
	je	.LBB82_1097
	jmp	.LBB82_1098
.LBB82_1090:                            # %sw.bb4704
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	-204(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jl	.LBB82_1094
# %bb.1091:                             # %lor.lhs.false4707
                                        #   in Loop: Header=BB82_171 Depth=1
	cmpl	$0, -364(%rbp)
	je	.LBB82_1094
# %bb.1092:                             # %land.lhs.true4710
                                        #   in Loop: Header=BB82_171 Depth=1
	cmpl	$0, -360(%rbp)
	je	.LBB82_1094
# %bb.1093:                             # %land.lhs.true4713
                                        #   in Loop: Header=BB82_171 Depth=1
	cmpl	$0, -356(%rbp)
	jne	.LBB82_1095
.LBB82_1094:                            # %if.then4716
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	-204(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB82_1096
.LBB82_1095:                            # %if.else4717
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB82_1096:                            # %if.end4718
                                        #   in Loop: Header=BB82_171 Depth=1
	jmp	.LBB82_1099
.LBB82_1097:                            # %sw.bb4719
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	-204(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB82_1099
.LBB82_1098:                            # %sw.default4720
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB82_1099:                            # %sw.epilog4721
                                        #   in Loop: Header=BB82_171 Depth=1
	jmp	.LBB82_1101
.LBB82_1100:                            # %if.else4722
                                        #   in Loop: Header=BB82_171 Depth=1
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	Get_Direct_CostMB
	movl	%eax, -60(%rbp)
.LBB82_1101:                            # %if.end4724
                                        #   in Loop: Header=BB82_171 Depth=1
	vmovsd	.LCPI82_17(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI82_18(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-60(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB82_1121
# %bb.1102:                             # %if.then4731
                                        #   in Loop: Header=BB82_171 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB82_1111
# %bb.1103:                             # %land.lhs.true4734
                                        #   in Loop: Header=BB82_171 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB82_1111
# %bb.1104:                             # %if.then4737
                                        #   in Loop: Header=BB82_171 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB82_1106
# %bb.1105:                             # %if.then4741
                                        #   in Loop: Header=BB82_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB82_1110
.LBB82_1106:                            # %if.else4743
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	-204(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB82_1108
# %bb.1107:                             # %if.then4746
                                        #   in Loop: Header=BB82_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB82_1109
.LBB82_1108:                            # %if.else4748
                                        #   in Loop: Header=BB82_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB82_1109:                            # %if.end4750
                                        #   in Loop: Header=BB82_171 Depth=1
	jmp	.LBB82_1110
.LBB82_1110:                            # %if.end4751
                                        #   in Loop: Header=BB82_171 Depth=1
	jmp	.LBB82_1112
.LBB82_1111:                            # %if.else4752
                                        #   in Loop: Header=BB82_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB82_1112:                            # %if.end4754
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	$0, -20(%rbp)
.LBB82_1113:                            # %for.cond4755
                                        #   Parent Loop BB82_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_1115 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB82_1120
# %bb.1114:                             # %for.body4758
                                        #   in Loop: Header=BB82_1113 Depth=2
	movl	$0, -24(%rbp)
.LBB82_1115:                            # %for.cond4759
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_1113 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB82_1118
# %bb.1116:                             # %for.body4762
                                        #   in Loop: Header=BB82_1115 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1117:                             # %for.inc4783
                                        #   in Loop: Header=BB82_1115 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_1115
.LBB82_1118:                            # %for.end4785
                                        #   in Loop: Header=BB82_1113 Depth=2
	jmp	.LBB82_1119
.LBB82_1119:                            # %for.inc4786
                                        #   in Loop: Header=BB82_1113 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_1113
.LBB82_1120:                            # %for.end4788
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, best_mode
	jmp	.LBB82_1122
.LBB82_1121:                            # %if.else4789
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	-220(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-308(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB82_1122:                            # %if.end4792
                                        #   in Loop: Header=BB82_171 Depth=1
	jmp	.LBB82_1123
.LBB82_1123:                            # %if.end4793
                                        #   in Loop: Header=BB82_171 Depth=1
	cmpl	$0, -332(%rbp)
	je	.LBB82_1170
# %bb.1124:                             # %if.then4796
                                        #   in Loop: Header=BB82_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$13, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movl	%eax, -184(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB82_1168
# %bb.1125:                             # %if.then4802
                                        #   in Loop: Header=BB82_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB82_1149
# %bb.1126:                             # %if.then4805
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	$0, -20(%rbp)
.LBB82_1127:                            # %for.cond4806
                                        #   Parent Loop BB82_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_1129 Depth 3
                                        #         Child Loop BB82_1131 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB82_1140
# %bb.1128:                             # %for.body4809
                                        #   in Loop: Header=BB82_1127 Depth=2
	movl	$0, -24(%rbp)
.LBB82_1129:                            # %for.cond4810
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_1127 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB82_1131 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB82_1138
# %bb.1130:                             # %for.body4813
                                        #   in Loop: Header=BB82_1129 Depth=3
	movl	$0, -56(%rbp)
.LBB82_1131:                            # %for.cond4814
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_1127 Depth=2
                                        #       Parent Loop BB82_1129 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB82_1136
# %bb.1132:                             # %for.body4817
                                        #   in Loop: Header=BB82_1131 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB82_1134
# %bb.1133:                             # %if.then4825
                                        #   in Loop: Header=BB82_1131 Depth=4
	movl	$2, -132(%rbp)
.LBB82_1134:                            # %if.end4826
                                        #   in Loop: Header=BB82_1131 Depth=4
	jmp	.LBB82_1135
.LBB82_1135:                            # %for.inc4827
                                        #   in Loop: Header=BB82_1131 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB82_1131
.LBB82_1136:                            # %for.end4829
                                        #   in Loop: Header=BB82_1129 Depth=3
	jmp	.LBB82_1137
.LBB82_1137:                            # %for.inc4830
                                        #   in Loop: Header=BB82_1129 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_1129
.LBB82_1138:                            # %for.end4832
                                        #   in Loop: Header=BB82_1127 Depth=2
	jmp	.LBB82_1139
.LBB82_1139:                            # %for.inc4833
                                        #   in Loop: Header=BB82_1127 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_1127
.LBB82_1140:                            # %for.end4835
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-184(%rbp), %eax
	movl	%eax, -184(%rbp)
	movl	$0, -24(%rbp)
.LBB82_1141:                            # %for.cond4840
                                        #   Parent Loop BB82_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_1143 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB82_1148
# %bb.1142:                             # %for.body4843
                                        #   in Loop: Header=BB82_1141 Depth=2
	movl	$0, -20(%rbp)
.LBB82_1143:                            # %for.cond4844
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_1141 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB82_1146
# %bb.1144:                             # %for.body4847
                                        #   in Loop: Header=BB82_1143 Depth=3
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgU, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgV, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1145:                             # %for.inc4875
                                        #   in Loop: Header=BB82_1143 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_1143
.LBB82_1146:                            # %for.end4877
                                        #   in Loop: Header=BB82_1141 Depth=2
	jmp	.LBB82_1147
.LBB82_1147:                            # %for.inc4878
                                        #   in Loop: Header=BB82_1141 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_1141
.LBB82_1148:                            # %for.end4880
                                        #   in Loop: Header=BB82_171 Depth=1
	jmp	.LBB82_1149
.LBB82_1149:                            # %if.end4881
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	-184(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB82_1151
# %bb.1150:                             # %if.then4886
                                        #   in Loop: Header=BB82_171 Depth=1
	movq	cofAC, %rax
	movq	%rax, -400(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-400(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB82_1151:                            # %if.end4889
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	$0, -24(%rbp)
.LBB82_1152:                            # %for.cond4890
                                        #   Parent Loop BB82_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_1154 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB82_1159
# %bb.1153:                             # %for.body4893
                                        #   in Loop: Header=BB82_1152 Depth=2
	movl	$0, -20(%rbp)
.LBB82_1154:                            # %for.cond4894
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_1152 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB82_1157
# %bb.1155:                             # %for.body4897
                                        #   in Loop: Header=BB82_1154 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgY, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1156:                             # %for.inc4911
                                        #   in Loop: Header=BB82_1154 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_1154
.LBB82_1157:                            # %for.end4913
                                        #   in Loop: Header=BB82_1152 Depth=2
	jmp	.LBB82_1158
.LBB82_1158:                            # %for.inc4914
                                        #   in Loop: Header=BB82_1152 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_1152
.LBB82_1159:                            # %for.end4916
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	$0, -20(%rbp)
.LBB82_1160:                            # %for.cond4917
                                        #   Parent Loop BB82_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_1162 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB82_1167
# %bb.1161:                             # %for.body4920
                                        #   in Loop: Header=BB82_1160 Depth=2
	movl	$0, -24(%rbp)
.LBB82_1162:                            # %for.cond4921
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_1160 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB82_1165
# %bb.1163:                             # %for.body4924
                                        #   in Loop: Header=BB82_1162 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1164:                             # %for.inc4945
                                        #   in Loop: Header=BB82_1162 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_1162
.LBB82_1165:                            # %for.end4947
                                        #   in Loop: Header=BB82_1160 Depth=2
	jmp	.LBB82_1166
.LBB82_1166:                            # %for.inc4948
                                        #   in Loop: Header=BB82_1160 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_1160
.LBB82_1167:                            # %for.end4950
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$13, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -220(%rbp)
	jmp	.LBB82_1169
.LBB82_1168:                            # %if.else4952
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	-220(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB82_1169:                            # %if.end4954
                                        #   in Loop: Header=BB82_171 Depth=1
	jmp	.LBB82_1170
.LBB82_1170:                            # %if.end4955
                                        #   in Loop: Header=BB82_171 Depth=1
	cmpl	$0, -348(%rbp)
	je	.LBB82_1199
# %bb.1171:                             # %if.then4958
                                        #   in Loop: Header=BB82_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$9, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movl	%eax, -184(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB82_1197
# %bb.1172:                             # %if.then4964
                                        #   in Loop: Header=BB82_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB82_1188
# %bb.1173:                             # %if.then4967
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	$0, -20(%rbp)
.LBB82_1174:                            # %for.cond4968
                                        #   Parent Loop BB82_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_1176 Depth 3
                                        #         Child Loop BB82_1178 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB82_1187
# %bb.1175:                             # %for.body4971
                                        #   in Loop: Header=BB82_1174 Depth=2
	movl	$0, -24(%rbp)
.LBB82_1176:                            # %for.cond4972
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_1174 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB82_1178 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB82_1185
# %bb.1177:                             # %for.body4975
                                        #   in Loop: Header=BB82_1176 Depth=3
	movl	$0, -56(%rbp)
.LBB82_1178:                            # %for.cond4976
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_1174 Depth=2
                                        #       Parent Loop BB82_1176 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB82_1183
# %bb.1179:                             # %for.body4979
                                        #   in Loop: Header=BB82_1178 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB82_1181
# %bb.1180:                             # %if.then4987
                                        #   in Loop: Header=BB82_1178 Depth=4
	movl	$2, -132(%rbp)
.LBB82_1181:                            # %if.end4988
                                        #   in Loop: Header=BB82_1178 Depth=4
	jmp	.LBB82_1182
.LBB82_1182:                            # %for.inc4989
                                        #   in Loop: Header=BB82_1178 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB82_1178
.LBB82_1183:                            # %for.end4991
                                        #   in Loop: Header=BB82_1176 Depth=3
	jmp	.LBB82_1184
.LBB82_1184:                            # %for.inc4992
                                        #   in Loop: Header=BB82_1176 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_1176
.LBB82_1185:                            # %for.end4994
                                        #   in Loop: Header=BB82_1174 Depth=2
	jmp	.LBB82_1186
.LBB82_1186:                            # %for.inc4995
                                        #   in Loop: Header=BB82_1174 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_1174
.LBB82_1187:                            # %for.end4997
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-184(%rbp), %eax
	movl	%eax, -184(%rbp)
.LBB82_1188:                            # %if.end5002
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	-184(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movl	$0, -20(%rbp)
.LBB82_1189:                            # %for.cond5004
                                        #   Parent Loop BB82_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_1191 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB82_1196
# %bb.1190:                             # %for.body5007
                                        #   in Loop: Header=BB82_1189 Depth=2
	movl	$0, -24(%rbp)
.LBB82_1191:                            # %for.cond5008
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_1189 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB82_1194
# %bb.1192:                             # %for.body5011
                                        #   in Loop: Header=BB82_1191 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1193:                             # %for.inc5032
                                        #   in Loop: Header=BB82_1191 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_1191
.LBB82_1194:                            # %for.end5034
                                        #   in Loop: Header=BB82_1189 Depth=2
	jmp	.LBB82_1195
.LBB82_1195:                            # %for.inc5035
                                        #   in Loop: Header=BB82_1189 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_1189
.LBB82_1196:                            # %for.end5037
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$9, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -220(%rbp)
	jmp	.LBB82_1198
.LBB82_1197:                            # %if.else5039
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	-220(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movq	cofAC, %rax
	movq	%rax, -400(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-400(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB82_1198:                            # %if.end5043
                                        #   in Loop: Header=BB82_171 Depth=1
	jmp	.LBB82_1199
.LBB82_1199:                            # %if.end5044
                                        #   in Loop: Header=BB82_171 Depth=1
	cmpl	$0, -344(%rbp)
	je	.LBB82_1283
# %bb.1200:                             # %if.then5047
                                        #   in Loop: Header=BB82_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movb	$0, %al
	callq	intrapred_luma_16x16
	leaq	-128(%rbp), %rdi
	callq	find_sad_16x16
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB82_1281
# %bb.1201:                             # %if.then5052
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	$0, -20(%rbp)
.LBB82_1202:                            # %for.cond5053
                                        #   Parent Loop BB82_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_1204 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB82_1209
# %bb.1203:                             # %for.body5056
                                        #   in Loop: Header=BB82_1202 Depth=2
	movl	$0, -24(%rbp)
.LBB82_1204:                            # %for.cond5057
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_1202 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB82_1207
# %bb.1205:                             # %for.body5060
                                        #   in Loop: Header=BB82_1204 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1206:                             # %for.inc5082
                                        #   in Loop: Header=BB82_1204 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_1204
.LBB82_1207:                            # %for.end5084
                                        #   in Loop: Header=BB82_1202 Depth=2
	jmp	.LBB82_1208
.LBB82_1208:                            # %for.inc5085
                                        #   in Loop: Header=BB82_1202 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_1202
.LBB82_1209:                            # %for.end5087
                                        #   in Loop: Header=BB82_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB82_1219
# %bb.1210:                             # %if.then5090
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	$0, -24(%rbp)
.LBB82_1211:                            # %for.cond5091
                                        #   Parent Loop BB82_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_1213 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB82_1218
# %bb.1212:                             # %for.body5094
                                        #   in Loop: Header=BB82_1211 Depth=2
	movl	$0, -20(%rbp)
.LBB82_1213:                            # %for.cond5095
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_1211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB82_1216
# %bb.1214:                             # %for.body5098
                                        #   in Loop: Header=BB82_1213 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -188(%rbp)
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -212(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -224(%rbp)
	movl	-224(%rbp), %eax
	subl	-188(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-188(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -256(%rbp)
	movl	-212(%rbp), %eax
	subl	-256(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-256(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1215:                             # %for.inc5192
                                        #   in Loop: Header=BB82_1213 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_1213
.LBB82_1216:                            # %for.end5194
                                        #   in Loop: Header=BB82_1211 Depth=2
	jmp	.LBB82_1217
.LBB82_1217:                            # %for.inc5195
                                        #   in Loop: Header=BB82_1211 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_1211
.LBB82_1218:                            # %for.end5197
                                        #   in Loop: Header=BB82_171 Depth=1
	jmp	.LBB82_1219
.LBB82_1219:                            # %if.end5198
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	$10, best_mode
	movl	-128(%rbp), %edi
	callq	dct_luma_16x16
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB82_1280
# %bb.1220:                             # %if.then5203
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	$0, -24(%rbp)
.LBB82_1221:                            # %for.cond5204
                                        #   Parent Loop BB82_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_1223 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB82_1228
# %bb.1222:                             # %for.body5207
                                        #   in Loop: Header=BB82_1221 Depth=2
	movl	$0, -20(%rbp)
.LBB82_1223:                            # %for.cond5208
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_1221 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB82_1226
# %bb.1224:                             # %for.body5211
                                        #   in Loop: Header=BB82_1223 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1225:                             # %for.inc5230
                                        #   in Loop: Header=BB82_1223 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_1223
.LBB82_1226:                            # %for.end5232
                                        #   in Loop: Header=BB82_1221 Depth=2
	jmp	.LBB82_1227
.LBB82_1227:                            # %for.inc5233
                                        #   in Loop: Header=BB82_1221 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_1221
.LBB82_1228:                            # %for.end5235
                                        #   in Loop: Header=BB82_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB82_1229:                            # %for.cond5237
                                        #   Parent Loop BB82_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_1231 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB82_1236
# %bb.1230:                             # %for.body5240
                                        #   in Loop: Header=BB82_1229 Depth=2
	movl	$0, -20(%rbp)
.LBB82_1231:                            # %for.cond5241
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_1229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB82_1234
# %bb.1232:                             # %for.body5244
                                        #   in Loop: Header=BB82_1231 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1233:                             # %for.inc5263
                                        #   in Loop: Header=BB82_1231 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_1231
.LBB82_1234:                            # %for.end5265
                                        #   in Loop: Header=BB82_1229 Depth=2
	jmp	.LBB82_1235
.LBB82_1235:                            # %for.inc5266
                                        #   in Loop: Header=BB82_1229 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_1229
.LBB82_1236:                            # %for.end5268
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB82_1237:                            # %for.cond5270
                                        #   Parent Loop BB82_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_1239 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB82_1244
# %bb.1238:                             # %for.body5273
                                        #   in Loop: Header=BB82_1237 Depth=2
	movl	$0, -20(%rbp)
.LBB82_1239:                            # %for.cond5274
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_1237 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB82_1242
# %bb.1240:                             # %for.body5277
                                        #   in Loop: Header=BB82_1239 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1241:                             # %for.inc5287
                                        #   in Loop: Header=BB82_1239 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_1239
.LBB82_1242:                            # %for.end5289
                                        #   in Loop: Header=BB82_1237 Depth=2
	jmp	.LBB82_1243
.LBB82_1243:                            # %for.inc5290
                                        #   in Loop: Header=BB82_1237 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_1237
.LBB82_1244:                            # %for.end5292
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	-132(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -24(%rbp)
.LBB82_1245:                            # %for.cond5296
                                        #   Parent Loop BB82_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_1247 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB82_1279
# %bb.1246:                             # %for.body5299
                                        #   in Loop: Header=BB82_1245 Depth=2
	movl	$0, -20(%rbp)
.LBB82_1247:                            # %for.cond5300
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_1245 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB82_1277
# %bb.1248:                             # %for.body5303
                                        #   in Loop: Header=BB82_1247 Depth=3
	xorl	%eax, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -256(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-256(%rbp), %ecx
	movl	%ecx, -212(%rbp)
	movl	-256(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -188(%rbp)
	movl	-188(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -224(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-188(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB82_1250
# %bb.1249:                             # %cond.true5343
                                        #   in Loop: Header=BB82_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB82_1251
.LBB82_1250:                            # %cond.false5344
                                        #   in Loop: Header=BB82_1247 Depth=3
	movl	-188(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB82_1251:                            # %cond.end5356
                                        #   in Loop: Header=BB82_1247 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB82_1253
# %bb.1252:                             # %cond.true5360
                                        #   in Loop: Header=BB82_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB82_1257
.LBB82_1253:                            # %cond.false5362
                                        #   in Loop: Header=BB82_1247 Depth=3
	xorl	%eax, %eax
	movl	-188(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB82_1255
# %bb.1254:                             # %cond.true5376
                                        #   in Loop: Header=BB82_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB82_1256
.LBB82_1255:                            # %cond.false5377
                                        #   in Loop: Header=BB82_1247 Depth=3
	movl	-188(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB82_1256:                            # %cond.end5389
                                        #   in Loop: Header=BB82_1247 Depth=3
.LBB82_1257:                            # %cond.end5391
                                        #   in Loop: Header=BB82_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-212(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-128(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB82_1259
# %bb.1258:                             # %cond.true5415
                                        #   in Loop: Header=BB82_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB82_1260
.LBB82_1259:                            # %cond.false5416
                                        #   in Loop: Header=BB82_1247 Depth=3
	movl	-212(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-128(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB82_1260:                            # %cond.end5426
                                        #   in Loop: Header=BB82_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB82_1262
# %bb.1261:                             # %cond.true5430
                                        #   in Loop: Header=BB82_1247 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB82_1266
.LBB82_1262:                            # %cond.false5432
                                        #   in Loop: Header=BB82_1247 Depth=3
	xorl	%eax, %eax
	movl	-212(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-128(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB82_1264
# %bb.1263:                             # %cond.true5444
                                        #   in Loop: Header=BB82_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB82_1265
.LBB82_1264:                            # %cond.false5445
                                        #   in Loop: Header=BB82_1247 Depth=3
	movl	-212(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB82_1265:                            # %cond.end5455
                                        #   in Loop: Header=BB82_1247 Depth=3
.LBB82_1266:                            # %cond.end5457
                                        #   in Loop: Header=BB82_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-224(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB82_1268
# %bb.1267:                             # %cond.true5483
                                        #   in Loop: Header=BB82_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB82_1269
.LBB82_1268:                            # %cond.false5484
                                        #   in Loop: Header=BB82_1247 Depth=3
	movl	-224(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB82_1269:                            # %cond.end5496
                                        #   in Loop: Header=BB82_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB82_1271
# %bb.1270:                             # %cond.true5500
                                        #   in Loop: Header=BB82_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB82_1275
.LBB82_1271:                            # %cond.false5502
                                        #   in Loop: Header=BB82_1247 Depth=3
	xorl	%eax, %eax
	movl	-224(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB82_1273
# %bb.1272:                             # %cond.true5516
                                        #   in Loop: Header=BB82_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB82_1274
.LBB82_1273:                            # %cond.false5517
                                        #   in Loop: Header=BB82_1247 Depth=3
	movl	-224(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB82_1274:                            # %cond.end5529
                                        #   in Loop: Header=BB82_1247 Depth=3
.LBB82_1275:                            # %cond.end5531
                                        #   in Loop: Header=BB82_1247 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1276:                             # %for.inc5544
                                        #   in Loop: Header=BB82_1247 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_1247
.LBB82_1277:                            # %for.end5546
                                        #   in Loop: Header=BB82_1245 Depth=2
	jmp	.LBB82_1278
.LBB82_1278:                            # %for.inc5547
                                        #   in Loop: Header=BB82_1245 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_1245
.LBB82_1279:                            # %for.end5549
                                        #   in Loop: Header=BB82_171 Depth=1
	jmp	.LBB82_1280
.LBB82_1280:                            # %if.end5550
                                        #   in Loop: Header=BB82_171 Depth=1
	jmp	.LBB82_1282
.LBB82_1281:                            # %if.else5551
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	-220(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-308(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB82_1282:                            # %if.end5554
                                        #   in Loop: Header=BB82_171 Depth=1
	jmp	.LBB82_1283
.LBB82_1283:                            # %if.end5555
                                        #   in Loop: Header=BB82_171 Depth=1
	jmp	.LBB82_1284
.LBB82_1284:                            # %if.end5556
                                        #   in Loop: Header=BB82_171 Depth=1
	cmpl	$0, -252(%rbp)
	jne	.LBB82_1289
# %bb.1285:                             # %if.then5559
                                        #   in Loop: Header=BB82_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB82_1288
# %bb.1286:                             # %lor.lhs.false5563
                                        #   in Loop: Header=BB82_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB82_1288
# %bb.1287:                             # %lor.rhs5567
                                        #   in Loop: Header=BB82_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB82_1288:                            # %lor.end5571
                                        #   in Loop: Header=BB82_171 Depth=1
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -264(%rbp)
.LBB82_1289:                            # %if.end5574
                                        #   in Loop: Header=BB82_171 Depth=1
	jmp	.LBB82_1290
.LBB82_1290:                            # %for.inc5575
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	-252(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -252(%rbp)
	jmp	.LBB82_171
.LBB82_1291:                            # %for.end5577
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB82_1300
# %bb.1292:                             # %if.then5580
	cmpl	$0, cbp
	jne	.LBB82_1294
# %bb.1293:                             # %lor.lhs.false5583
	cmpl	$10, best_mode
	jne	.LBB82_1295
.LBB82_1294:                            # %if.then5586
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB82_1299
.LBB82_1295:                            # %if.else5587
	cmpl	$0, cbp
	jne	.LBB82_1298
# %bb.1296:                             # %land.lhs.true5590
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB82_1298
# %bb.1297:                             # %if.then5592
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB82_1298:                            # %if.end5597
	jmp	.LBB82_1299
.LBB82_1299:                            # %if.end5598
	callq	set_stored_macroblock_parameters
	jmp	.LBB82_1395
.LBB82_1300:                            # %if.else5599
	movl	best_mode, %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$8, best_mode
	jne	.LBB82_1314
# %bb.1301:                             # %if.then5602
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB82_1305
# %bb.1302:                             # %land.lhs.true5605
	cmpl	$0, cbp8_8x8ts
	jne	.LBB82_1305
# %bb.1303:                             # %land.lhs.true5608
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB82_1305
# %bb.1304:                             # %if.then5612
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB82_1305:                            # %if.end5614
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB82_1306:                            # %for.cond5616
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_1308 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_1313
# %bb.1307:                             # %for.body5621
                                        #   in Loop: Header=BB82_1306 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB82_1308:                            # %for.cond5623
                                        #   Parent Loop BB82_1306 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_1311
# %bb.1309:                             # %for.body5628
                                        #   in Loop: Header=BB82_1308 Depth=2
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1310:                             # %for.inc5636
                                        #   in Loop: Header=BB82_1308 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB82_1308
.LBB82_1311:                            # %for.end5639
                                        #   in Loop: Header=BB82_1306 Depth=1
	jmp	.LBB82_1312
.LBB82_1312:                            # %for.inc5640
                                        #   in Loop: Header=BB82_1306 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_1306
.LBB82_1313:                            # %for.end5642
	jmp	.LBB82_1370
.LBB82_1314:                            # %if.else5643
	cmpl	$13, best_mode
	jne	.LBB82_1342
# %bb.1315:                             # %if.then5646
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB82_1316:                            # %for.cond5647
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_1318 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB82_1323
# %bb.1317:                             # %for.body5650
                                        #   in Loop: Header=BB82_1316 Depth=1
	movl	$0, -24(%rbp)
.LBB82_1318:                            # %for.cond5651
                                        #   Parent Loop BB82_1316 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB82_1321
# %bb.1319:                             # %for.body5654
                                        #   in Loop: Header=BB82_1318 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.1320:                             # %for.inc5677
                                        #   in Loop: Header=BB82_1318 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB82_1318
.LBB82_1321:                            # %for.end5680
                                        #   in Loop: Header=BB82_1316 Depth=1
	jmp	.LBB82_1322
.LBB82_1322:                            # %for.inc5681
                                        #   in Loop: Header=BB82_1316 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_1316
.LBB82_1323:                            # %for.end5683
	movl	$0, -24(%rbp)
.LBB82_1324:                            # %for.cond5684
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_1326 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB82_1331
# %bb.1325:                             # %for.body5687
                                        #   in Loop: Header=BB82_1324 Depth=1
	movl	$0, -20(%rbp)
.LBB82_1326:                            # %for.cond5688
                                        #   Parent Loop BB82_1324 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB82_1329
# %bb.1327:                             # %for.body5691
                                        #   in Loop: Header=BB82_1326 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgY, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1328:                             # %for.inc5705
                                        #   in Loop: Header=BB82_1326 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_1326
.LBB82_1329:                            # %for.end5707
                                        #   in Loop: Header=BB82_1324 Depth=1
	jmp	.LBB82_1330
.LBB82_1330:                            # %for.inc5708
                                        #   in Loop: Header=BB82_1324 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_1324
.LBB82_1331:                            # %for.end5710
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB82_1341
# %bb.1332:                             # %if.then5713
	movl	$0, -24(%rbp)
.LBB82_1333:                            # %for.cond5714
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_1335 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB82_1340
# %bb.1334:                             # %for.body5717
                                        #   in Loop: Header=BB82_1333 Depth=1
	movl	$0, -20(%rbp)
.LBB82_1335:                            # %for.cond5718
                                        #   Parent Loop BB82_1333 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB82_1338
# %bb.1336:                             # %for.body5721
                                        #   in Loop: Header=BB82_1335 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgU, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgV, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1337:                             # %for.inc5750
                                        #   in Loop: Header=BB82_1335 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_1335
.LBB82_1338:                            # %for.end5752
                                        #   in Loop: Header=BB82_1333 Depth=1
	jmp	.LBB82_1339
.LBB82_1339:                            # %for.inc5753
                                        #   in Loop: Header=BB82_1333 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_1333
.LBB82_1340:                            # %for.end5755
	jmp	.LBB82_1341
.LBB82_1341:                            # %if.end5756
	jmp	.LBB82_1342
.LBB82_1342:                            # %if.end5757
	cmpl	$9, best_mode
	je	.LBB82_1369
# %bb.1343:                             # %land.lhs.true5760
	cmpl	$13, best_mode
	je	.LBB82_1369
# %bb.1344:                             # %if.then5763
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB82_1345:                            # %for.cond5765
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_1347 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_1352
# %bb.1346:                             # %for.body5770
                                        #   in Loop: Header=BB82_1345 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB82_1347:                            # %for.cond5772
                                        #   Parent Loop BB82_1345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_1350
# %bb.1348:                             # %for.body5777
                                        #   in Loop: Header=BB82_1347 Depth=2
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1349:                             # %for.inc5785
                                        #   in Loop: Header=BB82_1347 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB82_1347
.LBB82_1350:                            # %for.end5788
                                        #   in Loop: Header=BB82_1345 Depth=1
	jmp	.LBB82_1351
.LBB82_1351:                            # %for.inc5789
                                        #   in Loop: Header=BB82_1345 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_1345
.LBB82_1352:                            # %for.end5791
	cmpl	$10, best_mode
	je	.LBB82_1368
# %bb.1353:                             # %if.then5794
	cmpl	$1, best_mode
	jl	.LBB82_1356
# %bb.1354:                             # %land.lhs.true5797
	cmpl	$3, best_mode
	jg	.LBB82_1356
# %bb.1355:                             # %if.then5800
	movl	-316(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB82_1356:                            # %if.end5802
	movb	$0, %al
	callq	LumaResidualCoding
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB82_1359
# %bb.1357:                             # %land.lhs.true5806
	cmpl	$0, best_mode
	jne	.LBB82_1359
# %bb.1358:                             # %if.then5809
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB82_1359:                            # %if.end5811
	movl	$0, -20(%rbp)
.LBB82_1360:                            # %for.cond5812
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_1362 Depth 2
	cmpl	$16, -20(%rbp)
	jge	.LBB82_1367
# %bb.1361:                             # %for.body5815
                                        #   in Loop: Header=BB82_1360 Depth=1
	movl	$0, -24(%rbp)
.LBB82_1362:                            # %for.cond5816
                                        #   Parent Loop BB82_1360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -24(%rbp)
	jge	.LBB82_1365
# %bb.1363:                             # %for.body5819
                                        #   in Loop: Header=BB82_1362 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1364:                             # %for.inc5840
                                        #   in Loop: Header=BB82_1362 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_1362
.LBB82_1365:                            # %for.end5842
                                        #   in Loop: Header=BB82_1360 Depth=1
	jmp	.LBB82_1366
.LBB82_1366:                            # %for.inc5843
                                        #   in Loop: Header=BB82_1360 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_1360
.LBB82_1367:                            # %for.end5845
	jmp	.LBB82_1368
.LBB82_1368:                            # %if.end5846
	jmp	.LBB82_1369
.LBB82_1369:                            # %if.end5847
	jmp	.LBB82_1370
.LBB82_1370:                            # %if.end5848
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB82_1374
# %bb.1371:                             # %land.lhs.true5853
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB82_1374
# %bb.1372:                             # %lor.lhs.false5857
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB82_1374
# %bb.1373:                             # %if.then5861
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB82_1374:                            # %if.end5863
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB82_1376
# %bb.1375:                             # %if.then5867
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB82_1376:                            # %if.end5868
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -280(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB82_1380
# %bb.1377:                             # %land.lhs.true5871
	cmpl	$9, best_mode
	je	.LBB82_1382
# %bb.1378:                             # %lor.lhs.false5874
	cmpl	$10, best_mode
	je	.LBB82_1382
# %bb.1379:                             # %lor.lhs.false5877
	cmpl	$13, best_mode
	je	.LBB82_1382
.LBB82_1380:                            # %land.lhs.true5880
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB82_1382
# %bb.1381:                             # %if.then5884
	leaq	-280(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB82_1382:                            # %if.end5885
	cmpl	$10, best_mode
	jne	.LBB82_1384
# %bb.1383:                             # %if.then5888
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-128(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB82_1384:                            # %if.end5892
	movq	-48(%rbp), %rdi
	movl	-108(%rbp), %esi
	callq	SetMotionVectorsMB
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB82_1386
# %bb.1385:                             # %lor.lhs.false5896
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB82_1392
.LBB82_1386:                            # %land.lhs.true5900
	cmpl	$1, best_mode
	jne	.LBB82_1392
# %bb.1387:                             # %land.lhs.true5903
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB82_1392
# %bb.1388:                             # %land.lhs.true5907
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB82_1392
# %bb.1389:                             # %land.lhs.true5919
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movq	-424(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB82_1392
# %bb.1390:                             # %land.lhs.true5939
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movq	-424(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	2(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB82_1392
# %bb.1391:                             # %if.then5959
	movq	-48(%rbp), %rax
	movl	$0, 484(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 480(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 476(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 472(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB82_1392:                            # %if.end5969
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB82_1394
# %bb.1393:                             # %if.then5972
	callq	set_mbaff_parameters
.LBB82_1394:                            # %if.end5973
	jmp	.LBB82_1395
.LBB82_1395:                            # %if.end5974
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB82_1410
# %bb.1396:                             # %if.then5977
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB82_1409
# %bb.1397:                             # %if.then5981
	movb	$0, %al
	callq	calc_MAD
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	%xmm0, (%rax,%rcx,8)
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB82_1408
# %bb.1398:                             # %if.then5988
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	movq	img, %rax
	vaddsd	72544(%rax), %xmm0, %xmm0
	vmovsd	%xmm0, 72544(%rax)
	cmpl	$0, cbp
	jne	.LBB82_1400
# %bb.1399:                             # %lor.lhs.false5996
	cmpl	$10, best_mode
	jne	.LBB82_1401
.LBB82_1400:                            # %if.then5999
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB82_1402
.LBB82_1401:                            # %if.else6001
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB82_1402:                            # %if.end6008
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB82_1407
# %bb.1403:                             # %if.then6010
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB82_1405
# %bb.1404:                             # %if.then6013
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP
	jmp	.LBB82_1406
.LBB82_1405:                            # %if.else6016
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
.LBB82_1406:                            # %if.end6019
	jmp	.LBB82_1407
.LBB82_1407:                            # %if.end6020
	jmp	.LBB82_1408
.LBB82_1408:                            # %if.end6021
	jmp	.LBB82_1409
.LBB82_1409:                            # %if.end6022
	jmp	.LBB82_1410
.LBB82_1410:                            # %if.end6023
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB82_1412
# %bb.1411:                             # %if.then6026
	vmovsd	-240(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
	jmp	.LBB82_1413
.LBB82_1412:                            # %if.else6028
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm0
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB82_1413:                            # %if.end6031
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB82_1430
# %bb.1414:                             # %if.then6034
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB82_1429
# %bb.1415:                             # %if.then6038
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB82_1417
# %bb.1416:                             # %cond.true6041
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB82_1420
	jmp	.LBB82_1428
.LBB82_1417:                            # %cond.false6042
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB82_1419
# %bb.1418:                             # %cond.true6046
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB82_1428
	jmp	.LBB82_1420
.LBB82_1419:                            # %cond.false6049
	movb	$1, %al
	testb	$1, %al
	jne	.LBB82_1420
	jmp	.LBB82_1428
.LBB82_1420:                            # %land.lhs.true6050
	movq	-432(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB82_1422
# %bb.1421:                             # %cond.true6053
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB82_1425
	jmp	.LBB82_1428
.LBB82_1422:                            # %cond.false6054
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB82_1424
# %bb.1423:                             # %cond.true6058
	movq	-432(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB82_1428
	jmp	.LBB82_1425
.LBB82_1424:                            # %cond.false6061
	movb	$1, %al
	testb	$1, %al
	jne	.LBB82_1425
	jmp	.LBB82_1428
.LBB82_1425:                            # %if.then6062
	callq	field_flag_inference
	cmpl	-284(%rbp), %eax
	je	.LBB82_1427
# %bb.1426:                             # %if.then6066
	vmovsd	.LCPI82_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB82_1427:                            # %if.end6068
	jmp	.LBB82_1428
.LBB82_1428:                            # %if.end6069
	jmp	.LBB82_1429
.LBB82_1429:                            # %if.end6070
	jmp	.LBB82_1430
.LBB82_1430:                            # %if.end6071
	movq	input, %rax
	cmpl	$1, 2908(%rax)
	jne	.LBB82_1453
# %bb.1431:                             # %if.then6075
	movq	input, %rax
	cmpl	$1, 2464(%rax)
	jne	.LBB82_1433
# %bb.1432:                             # %if.then6079
	xorl	%eax, %eax
	movl	-136(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB82_1452
.LBB82_1433:                            # %if.else6127
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB82_1451
# %bb.1434:                             # %if.then6131
	xorl	%eax, %eax
	cmpl	$0, -264(%rbp)
	jne	.LBB82_1438
# %bb.1435:                             # %land.rhs6134
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB82_1437
# %bb.1436:                             # %lor.rhs6138
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB82_1437:                            # %lor.end6142
.LBB82_1438:                            # %land.end6144
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -264(%rbp)
	jne	.LBB82_1442
# %bb.1439:                             # %land.rhs6158
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB82_1441
# %bb.1440:                             # %lor.rhs6162
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB82_1441:                            # %lor.end6166
.LBB82_1442:                            # %land.end6168
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rcx
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rcx,%rsi,8), %rcx
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rcx,%rsi)
	cmpl	$0, -264(%rbp)
	jne	.LBB82_1446
# %bb.1443:                             # %land.rhs6183
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB82_1445
# %bb.1444:                             # %lor.rhs6187
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB82_1445:                            # %lor.end6191
.LBB82_1446:                            # %land.end6193
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -264(%rbp)
	jne	.LBB82_1450
# %bb.1447:                             # %land.rhs6208
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB82_1449
# %bb.1448:                             # %lor.rhs6212
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB82_1449:                            # %lor.end6216
.LBB82_1450:                            # %land.end6218
	xorl	%eax, %eax
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB82_1451:                            # %if.end6232
	jmp	.LBB82_1452
.LBB82_1452:                            # %if.end6233
	jmp	.LBB82_1464
.LBB82_1453:                            # %if.else6234
	movq	input, %rax
	cmpl	$2, 2908(%rax)
	jne	.LBB82_1463
# %bb.1454:                             # %if.then6238
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB82_1456
# %bb.1455:                             # %lor.rhs6242
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB82_1456:                            # %lor.end6246
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB82_1458
# %bb.1457:                             # %lor.rhs6261
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB82_1458:                            # %lor.end6265
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB82_1460
# %bb.1459:                             # %lor.rhs6281
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB82_1460:                            # %lor.end6285
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB82_1462
# %bb.1461:                             # %lor.rhs6301
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB82_1462:                            # %lor.end6305
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
.LBB82_1463:                            # %if.end6319
	jmp	.LBB82_1464
.LBB82_1464:                            # %if.end6320
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB82_1466
# %bb.1465:                             # %if.then6323
	movl	best_mode, %edi
	movl	-64(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %esi
	callq	skip_intrabk_SAD
.LBB82_1466:                            # %if.end6327
	cmpl	$1933149464, -408(%rbp) # imm = 0x73398518
	jne	.LBB82_1468
.LBB82_1467:
	addq	$480, %rsp              # imm = 0x1E0
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_1468:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_1467
.Lfunc_end82:
	.size	encode_one_macroblock.53, .Lfunc_end82-encode_one_macroblock.53
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframeForBlocks.54 # -- Begin function SetModesAndRefframeForBlocks.54
	.p2align	4, 0x90
	.type	SetModesAndRefframeForBlocks.54,@function
SetModesAndRefframeForBlocks.54:        # @SetModesAndRefframeForBlocks.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$500828782, -40(%rbp)   # imm = 0x1DDA0A6E
	movl	%edi, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB83_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB83_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB83_4
.LBB83_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB83_4
.LBB83_4:                               # %cond.end
	movl	%ecx, -32(%rbp)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	cmpl	$1, -12(%rbp)
	jne	.LBB83_6
# %bb.5:                                # %if.then
	movq	img, %rax
	movslq	-12(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB83_7
.LBB83_6:                               # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB83_7:                               # %if.end
	movl	-12(%rbp), %eax
	movq	%rax, %rcx
	subq	$13, %rcx
	ja	.LBB83_42
# %bb.8:                                # %if.end
	movq	.LJTI83_0(,%rax,8), %rax
	jmpq	*%rax
.LBB83_9:                               # %sw.bb
	movl	$0, -4(%rbp)
.LBB83_10:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB83_16
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB83_10 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	cmpl	$0, -28(%rbp)
	je	.LBB83_13
# %bb.12:                               # %cond.true17
                                        #   in Loop: Header=BB83_10 Depth=1
	movq	direct_pdir, %rcx
	movq	img, %rax
	movl	144(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	shll	$1, %edx
	addl	%edx, %esi
	movslq	%esi, %rax
	movq	(%rcx,%rax,8), %rcx
	movq	img, %rax
	movl	148(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %esi
	movslq	%esi, %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB83_14
.LBB83_13:                              # %cond.false26
                                        #   in Loop: Header=BB83_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB83_14
.LBB83_14:                              # %cond.end27
                                        #   in Loop: Header=BB83_10 Depth=1
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB83_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_10
.LBB83_16:                              # %for.end
	jmp	.LBB83_43
.LBB83_17:                              # %sw.bb31
	movl	$0, -4(%rbp)
.LBB83_18:                              # %for.cond32
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB83_21
# %bb.19:                               # %for.body35
                                        #   in Loop: Header=BB83_18 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.20:                               # %for.inc47
                                        #   in Loop: Header=BB83_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_18
.LBB83_21:                              # %for.end49
	jmp	.LBB83_43
.LBB83_22:                              # %sw.bb50
	movl	$0, -4(%rbp)
.LBB83_23:                              # %for.cond51
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB83_26
# %bb.24:                               # %for.body54
                                        #   in Loop: Header=BB83_23 Depth=1
	movslq	-4(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.25:                               # %for.inc69
                                        #   in Loop: Header=BB83_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_23
.LBB83_26:                              # %for.end71
	jmp	.LBB83_43
.LBB83_27:                              # %sw.bb72
	movl	$0, -4(%rbp)
.LBB83_28:                              # %for.cond73
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB83_31
# %bb.29:                               # %for.body76
                                        #   in Loop: Header=BB83_28 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$11, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.30:                               # %for.inc83
                                        #   in Loop: Header=BB83_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_28
.LBB83_31:                              # %for.end85
	jmp	.LBB83_43
.LBB83_32:                              # %sw.bb86
	movl	$0, -4(%rbp)
.LBB83_33:                              # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB83_36
# %bb.34:                               # %for.body90
                                        #   in Loop: Header=BB83_33 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.35:                               # %for.inc97
                                        #   in Loop: Header=BB83_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_33
.LBB83_36:                              # %for.end99
	jmp	.LBB83_43
.LBB83_37:                              # %sw.bb100
	movl	$0, -4(%rbp)
.LBB83_38:                              # %for.cond101
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB83_41
# %bb.39:                               # %for.body104
                                        #   in Loop: Header=BB83_38 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$13, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.40:                               # %for.inc111
                                        #   in Loop: Header=BB83_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_38
.LBB83_41:                              # %for.end113
	movq	-24(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB83_43
.LBB83_42:                              # %sw.default
	movabsq	$.L.str, %rdi
	movb	$0, %al
	callq	printf
	movl	$1, %edi
	callq	exit
.LBB83_43:                              # %sw.epilog
	cmpl	$0, -12(%rbp)
	je	.LBB83_47
# %bb.44:                               # %lor.lhs.false
	cmpl	$9, -12(%rbp)
	je	.LBB83_47
# %bb.45:                               # %lor.lhs.false118
	cmpl	$10, -12(%rbp)
	je	.LBB83_47
# %bb.46:                               # %lor.lhs.false121
	cmpl	$13, -12(%rbp)
	jne	.LBB83_70
.LBB83_47:                              # %if.then124
	cmpl	$0, -28(%rbp)
	je	.LBB83_60
# %bb.48:                               # %if.then126
	movl	$0, -8(%rbp)
.LBB83_49:                              # %for.cond127
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB83_59
# %bb.50:                               # %for.body130
                                        #   in Loop: Header=BB83_49 Depth=1
	movl	$0, -4(%rbp)
.LBB83_51:                              # %for.cond131
                                        #   Parent Loop BB83_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB83_57
# %bb.52:                               # %for.body134
                                        #   in Loop: Header=BB83_51 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB83_54
# %bb.53:                               # %if.then136
                                        #   in Loop: Header=BB83_51 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB83_55
.LBB83_54:                              # %if.else174
                                        #   in Loop: Header=BB83_51 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB83_55:                              # %if.end195
                                        #   in Loop: Header=BB83_51 Depth=2
	jmp	.LBB83_56
.LBB83_56:                              # %for.inc196
                                        #   in Loop: Header=BB83_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_51
.LBB83_57:                              # %for.end198
                                        #   in Loop: Header=BB83_49 Depth=1
	jmp	.LBB83_58
.LBB83_58:                              # %for.inc199
                                        #   in Loop: Header=BB83_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_49
.LBB83_59:                              # %for.end201
	jmp	.LBB83_69
.LBB83_60:                              # %if.else202
	movl	$0, -8(%rbp)
.LBB83_61:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB83_68
# %bb.62:                               # %for.body206
                                        #   in Loop: Header=BB83_61 Depth=1
	movl	$0, -4(%rbp)
.LBB83_63:                              # %for.cond207
                                        #   Parent Loop BB83_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB83_66
# %bb.64:                               # %for.body210
                                        #   in Loop: Header=BB83_63 Depth=2
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	cmovel	%eax, %ecx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.65:                               # %for.inc225
                                        #   in Loop: Header=BB83_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_63
.LBB83_66:                              # %for.end227
                                        #   in Loop: Header=BB83_61 Depth=1
	jmp	.LBB83_67
.LBB83_67:                              # %for.inc228
                                        #   in Loop: Header=BB83_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_61
.LBB83_68:                              # %for.end230
	jmp	.LBB83_69
.LBB83_69:                              # %if.end231
	jmp	.LBB83_127
.LBB83_70:                              # %if.else232
	cmpl	$0, -28(%rbp)
	je	.LBB83_110
# %bb.71:                               # %if.then234
	movl	$0, -8(%rbp)
.LBB83_72:                              # %for.cond235
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_74 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB83_109
# %bb.73:                               # %for.body238
                                        #   in Loop: Header=BB83_72 Depth=1
	movl	$0, -4(%rbp)
.LBB83_74:                              # %for.cond239
                                        #   Parent Loop BB83_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB83_107
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB83_74 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	cmpl	$8, -12(%rbp)
	jne	.LBB83_78
# %bb.76:                               # %land.lhs.true253
                                        #   in Loop: Header=BB83_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB83_78
# %bb.77:                               # %if.then259
                                        #   in Loop: Header=BB83_74 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB83_105
.LBB83_78:                              # %if.else298
                                        #   in Loop: Header=BB83_74 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB83_90
# %bb.79:                               # %land.lhs.true301
                                        #   in Loop: Header=BB83_74 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB83_90
# %bb.80:                               # %land.lhs.true304
                                        #   in Loop: Header=BB83_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB83_82
# %bb.81:                               # %lor.lhs.false312
                                        #   in Loop: Header=BB83_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB83_90
.LBB83_82:                              # %land.lhs.true320
                                        #   in Loop: Header=BB83_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB83_85
# %bb.83:                               # %lor.lhs.false323
                                        #   in Loop: Header=BB83_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB83_85
# %bb.84:                               # %lor.lhs.false329
                                        #   in Loop: Header=BB83_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB83_90
.LBB83_85:                              # %land.lhs.true331
                                        #   in Loop: Header=BB83_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB83_87
# %bb.86:                               # %lor.lhs.false339
                                        #   in Loop: Header=BB83_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB83_90
.LBB83_87:                              # %land.lhs.true347
                                        #   in Loop: Header=BB83_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB83_89
# %bb.88:                               # %lor.lhs.false350
                                        #   in Loop: Header=BB83_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB83_90
.LBB83_89:                              # %if.then356
                                        #   in Loop: Header=BB83_74 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB83_104
.LBB83_90:                              # %if.else377
                                        #   in Loop: Header=BB83_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB83_92
# %bb.91:                               # %lor.lhs.false385
                                        #   in Loop: Header=BB83_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB83_96
.LBB83_92:                              # %land.lhs.true393
                                        #   in Loop: Header=BB83_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB83_95
# %bb.93:                               # %lor.lhs.false396
                                        #   in Loop: Header=BB83_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB83_95
# %bb.94:                               # %lor.lhs.false402
                                        #   in Loop: Header=BB83_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB83_96
.LBB83_95:                              # %cond.true404
                                        #   in Loop: Header=BB83_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB83_97
.LBB83_96:                              # %cond.false410
                                        #   in Loop: Header=BB83_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB83_97
.LBB83_97:                              # %cond.end411
                                        #   in Loop: Header=BB83_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB83_99
# %bb.98:                               # %lor.lhs.false431
                                        #   in Loop: Header=BB83_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB83_102
.LBB83_99:                              # %land.lhs.true439
                                        #   in Loop: Header=BB83_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB83_101
# %bb.100:                              # %lor.lhs.false442
                                        #   in Loop: Header=BB83_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB83_102
.LBB83_101:                             # %cond.true448
                                        #   in Loop: Header=BB83_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8bwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB83_103
.LBB83_102:                             # %cond.false454
                                        #   in Loop: Header=BB83_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB83_103
.LBB83_103:                             # %cond.end455
                                        #   in Loop: Header=BB83_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB83_104:                             # %if.end468
                                        #   in Loop: Header=BB83_74 Depth=2
	jmp	.LBB83_105
.LBB83_105:                             # %if.end469
                                        #   in Loop: Header=BB83_74 Depth=2
	jmp	.LBB83_106
.LBB83_106:                             # %for.inc470
                                        #   in Loop: Header=BB83_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_74
.LBB83_107:                             # %for.end472
                                        #   in Loop: Header=BB83_72 Depth=1
	jmp	.LBB83_108
.LBB83_108:                             # %for.inc473
                                        #   in Loop: Header=BB83_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_72
.LBB83_109:                             # %for.end475
	jmp	.LBB83_126
.LBB83_110:                             # %if.else476
	movl	$0, -8(%rbp)
.LBB83_111:                             # %for.cond477
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_113 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB83_125
# %bb.112:                              # %for.body480
                                        #   in Loop: Header=BB83_111 Depth=1
	movl	$0, -4(%rbp)
.LBB83_113:                             # %for.cond481
                                        #   Parent Loop BB83_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB83_123
# %bb.114:                              # %for.body484
                                        #   in Loop: Header=BB83_113 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB83_116
# %bb.115:                              # %lor.lhs.false500
                                        #   in Loop: Header=BB83_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB83_120
.LBB83_116:                             # %land.lhs.true508
                                        #   in Loop: Header=BB83_113 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB83_119
# %bb.117:                              # %lor.lhs.false511
                                        #   in Loop: Header=BB83_113 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB83_119
# %bb.118:                              # %lor.lhs.false517
                                        #   in Loop: Header=BB83_113 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB83_120
.LBB83_119:                             # %cond.true519
                                        #   in Loop: Header=BB83_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB83_121
.LBB83_120:                             # %cond.false525
                                        #   in Loop: Header=BB83_113 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB83_121
.LBB83_121:                             # %cond.end526
                                        #   in Loop: Header=BB83_113 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.122:                              # %for.inc539
                                        #   in Loop: Header=BB83_113 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_113
.LBB83_123:                             # %for.end541
                                        #   in Loop: Header=BB83_111 Depth=1
	jmp	.LBB83_124
.LBB83_124:                             # %for.inc542
                                        #   in Loop: Header=BB83_111 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_111
.LBB83_125:                             # %for.end544
	jmp	.LBB83_126
.LBB83_126:                             # %if.end545
	jmp	.LBB83_127
.LBB83_127:                             # %if.end546
	movl	$0, -8(%rbp)
.LBB83_128:                             # %for.cond547
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_130 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB83_138
# %bb.129:                              # %for.body550
                                        #   in Loop: Header=BB83_128 Depth=1
	movl	$0, -4(%rbp)
.LBB83_130:                             # %for.cond551
                                        #   Parent Loop BB83_128 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB83_136
# %bb.131:                              # %for.body554
                                        #   in Loop: Header=BB83_130 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB83_133
# %bb.132:                              # %cond.true568
                                        #   in Loop: Header=BB83_130 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB83_134
.LBB83_133:                             # %cond.false584
                                        #   in Loop: Header=BB83_130 Depth=2
	movq	$-1, %rax
	jmp	.LBB83_134
.LBB83_134:                             # %cond.end585
                                        #   in Loop: Header=BB83_130 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.135:                              # %for.inc596
                                        #   in Loop: Header=BB83_130 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_130
.LBB83_136:                             # %for.end598
                                        #   in Loop: Header=BB83_128 Depth=1
	jmp	.LBB83_137
.LBB83_137:                             # %for.inc599
                                        #   in Loop: Header=BB83_128 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_128
.LBB83_138:                             # %for.end601
	cmpl	$0, -28(%rbp)
	je	.LBB83_151
# %bb.139:                              # %if.then603
	movl	$0, -8(%rbp)
.LBB83_140:                             # %for.cond604
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_142 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB83_150
# %bb.141:                              # %for.body607
                                        #   in Loop: Header=BB83_140 Depth=1
	movl	$0, -4(%rbp)
.LBB83_142:                             # %for.cond608
                                        #   Parent Loop BB83_140 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB83_148
# %bb.143:                              # %for.body611
                                        #   in Loop: Header=BB83_142 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB83_145
# %bb.144:                              # %cond.true625
                                        #   in Loop: Header=BB83_142 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB83_146
.LBB83_145:                             # %cond.false642
                                        #   in Loop: Header=BB83_142 Depth=2
	movq	$-1, %rax
	jmp	.LBB83_146
.LBB83_146:                             # %cond.end643
                                        #   in Loop: Header=BB83_142 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.147:                              # %for.inc655
                                        #   in Loop: Header=BB83_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_142
.LBB83_148:                             # %for.end657
                                        #   in Loop: Header=BB83_140 Depth=1
	jmp	.LBB83_149
.LBB83_149:                             # %for.inc658
                                        #   in Loop: Header=BB83_140 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_140
.LBB83_150:                             # %for.end660
	jmp	.LBB83_151
.LBB83_151:                             # %if.end661
	cmpl	$500828782, -40(%rbp)   # imm = 0x1DDA0A6E
	jne	.LBB83_153
.LBB83_152:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_153:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_152
.Lfunc_end83:
	.size	SetModesAndRefframeForBlocks.54, .Lfunc_end83-SetModesAndRefframeForBlocks.54
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI83_0:
	.quad	.LBB83_9
	.quad	.LBB83_17
	.quad	.LBB83_17
	.quad	.LBB83_17
	.quad	.LBB83_42
	.quad	.LBB83_42
	.quad	.LBB83_42
	.quad	.LBB83_42
	.quad	.LBB83_22
	.quad	.LBB83_27
	.quad	.LBB83_32
	.quad	.LBB83_42
	.quad	.LBB83_42
	.quad	.LBB83_37
                                        # -- End function
	.text
	.globl	RDCost_for_4x4Blocks_Chroma.55 # -- Begin function RDCost_for_4x4Blocks_Chroma.55
	.p2align	4, 0x90
	.type	RDCost_for_4x4Blocks_Chroma.55,@function
RDCost_for_4x4Blocks_Chroma.55:         # @RDCost_for_4x4Blocks_Chroma.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$414930803, -56(%rbp)   # imm = 0x18BB5773
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -60(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -80(%rbp)
	cmpl	$7, -16(%rbp)
	jle	.LBB84_2
# %bb.1:                                # %if.then
	movl	$1, -28(%rbp)
	jmp	.LBB84_3
.LBB84_2:                               # %if.else
	movl	$0, -28(%rbp)
.LBB84_3:                               # %if.end
	movl	-60(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-28(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-28(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB84_5
# %bb.4:                                # %if.then21
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	shll	$4, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %edi
	shll	$1, %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %edi
	orl	%edi, %ecx
	movl	$7, %edi
	movl	%r8d, %edx
	callq	writeCoeff4x4_CAVLC
	movl	%eax, -36(%rbp)
	jmp	.LBB84_18
.LBB84_5:                               # %if.else31
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -96(%rbp)
	movl	$1, -52(%rbp)
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rax
	movl	%edx, 72(%rax)
	movl	$0, -32(%rbp)
.LBB84_6:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$17, -32(%rbp)
	jge	.LBB84_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB84_6 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB84_8:                               # %land.end
                                        #   in Loop: Header=BB84_6 Depth=1
	testb	$1, %al
	jne	.LBB84_9
	jmp	.LBB84_17
.LBB84_9:                               # %for.body
                                        #   in Loop: Header=BB84_6 Depth=1
	movq	-112(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-96(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -116(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB84_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB84_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB84_12
.LBB84_11:                              # %if.else54
                                        #   in Loop: Header=BB84_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB84_12:                              # %if.end55
                                        #   in Loop: Header=BB84_6 Depth=1
	movq	-24(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-24(%rbp), %rax
	movl	$10, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB84_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB84_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB84_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB84_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB84_15:                              # %lor.end
                                        #   in Loop: Header=BB84_6 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-28(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-88(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.16:                               # %for.inc
                                        #   in Loop: Header=BB84_6 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB84_6
.LBB84_17:                              # %for.end
	jmp	.LBB84_18
.LBB84_18:                              # %if.end73
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	-36(%rbp), %ebx
	cmpl	$414930803, -56(%rbp)   # imm = 0x18BB5773
	jne	.LBB84_20
.LBB84_19:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_19
.Lfunc_end84:
	.size	RDCost_for_4x4Blocks_Chroma.55, .Lfunc_end84-RDCost_for_4x4Blocks_Chroma.55
	.cfi_endproc
                                        # -- End function
	.globl	CheckReliabilityOfRef.56 # -- Begin function CheckReliabilityOfRef.56
	.p2align	4, 0x90
	.type	CheckReliabilityOfRef.56,@function
CheckReliabilityOfRef.56:               # @CheckReliabilityOfRef.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$958838364, -108(%rbp)  # imm = 0x3926B65C
	movl	%edi, -80(%rbp)
	movl	%esi, -88(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -52(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB85_2
# %bb.1:                                # %cond.true
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	jmp	.LBB85_6
.LBB85_2:                               # %cond.false
	cmpl	$2, -52(%rbp)
	jne	.LBB85_4
# %bb.3:                                # %cond.true3
	movl	-80(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB85_5
.LBB85_4:                               # %cond.false5
	xorl	%eax, %eax
	jmp	.LBB85_5
.LBB85_5:                               # %cond.end
.LBB85_6:                               # %cond.end6
	movl	%eax, -96(%rbp)
	movl	-96(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB85_8
# %bb.7:                                # %lor.rhs
	cmpl	$2, -52(%rbp)
	sete	%cl
.LBB85_8:                               # %lor.end
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -104(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB85_10
# %bb.9:                                # %cond.true13
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	jmp	.LBB85_14
.LBB85_10:                              # %cond.false15
	cmpl	$3, -52(%rbp)
	jne	.LBB85_12
# %bb.11:                               # %cond.true17
	movl	-80(%rbp), %edx
	shll	$1, %edx
	jmp	.LBB85_13
.LBB85_12:                              # %cond.false19
	xorl	%edx, %edx
	jmp	.LBB85_13
.LBB85_13:                              # %cond.end20
.LBB85_14:                              # %cond.end22
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB85_16
# %bb.15:                               # %lor.rhs25
	cmpl	$3, -52(%rbp)
	sete	%cl
.LBB85_16:                              # %lor.end27
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -100(%rbp)
	movl	-96(%rbp), %eax
	movl	%eax, -64(%rbp)
.LBB85_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_19 Depth 2
                                        #       Child Loop BB85_23 Depth 3
                                        #         Child Loop BB85_25 Depth 4
                                        #       Child Loop BB85_53 Depth 3
                                        #         Child Loop BB85_55 Depth 4
                                        #           Child Loop BB85_66 Depth 5
                                        #       Child Loop BB85_87 Depth 3
                                        #         Child Loop BB85_89 Depth 4
                                        #           Child Loop BB85_100 Depth 5
                                        #       Child Loop BB85_121 Depth 3
                                        #         Child Loop BB85_123 Depth 4
                                        #           Child Loop BB85_125 Depth 5
                                        #             Child Loop BB85_136 Depth 6
                                        #       Child Loop BB85_159 Depth 3
                                        #         Child Loop BB85_161 Depth 4
                                        #           Child Loop BB85_163 Depth 5
                                        #             Child Loop BB85_174 Depth 6
                                        #       Child Loop BB85_196 Depth 3
                                        #         Child Loop BB85_198 Depth 4
                                        #           Child Loop BB85_212 Depth 5
                                        #           Child Loop BB85_239 Depth 5
	movl	-64(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB85_266
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB85_17 Depth=1
	movl	-92(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB85_19:                              # %for.cond31
                                        #   Parent Loop BB85_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_23 Depth 3
                                        #         Child Loop BB85_25 Depth 4
                                        #       Child Loop BB85_53 Depth 3
                                        #         Child Loop BB85_55 Depth 4
                                        #           Child Loop BB85_66 Depth 5
                                        #       Child Loop BB85_87 Depth 3
                                        #         Child Loop BB85_89 Depth 4
                                        #           Child Loop BB85_100 Depth 5
                                        #       Child Loop BB85_121 Depth 3
                                        #         Child Loop BB85_123 Depth 4
                                        #           Child Loop BB85_125 Depth 5
                                        #             Child Loop BB85_136 Depth 6
                                        #       Child Loop BB85_159 Depth 3
                                        #         Child Loop BB85_161 Depth 4
                                        #           Child Loop BB85_163 Depth 5
                                        #             Child Loop BB85_174 Depth 6
                                        #       Child Loop BB85_196 Depth 3
                                        #         Child Loop BB85_198 Depth 4
                                        #           Child Loop BB85_212 Depth 5
                                        #           Child Loop BB85_239 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB85_264
# %bb.20:                               # %for.body33
                                        #   in Loop: Header=BB85_19 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-88(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-64(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-88(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-68(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -76(%rbp)
	movl	-32(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -72(%rbp)
	movl	-20(%rbp), %eax
	subl	-76(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	-32(%rbp), %eax
	subl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -32(%rbp)
	cmpl	$0, -76(%rbp)
	jne	.LBB85_51
# %bb.21:                               # %land.lhs.true
                                        #   in Loop: Header=BB85_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB85_51
# %bb.22:                               # %if.then
                                        #   in Loop: Header=BB85_19 Depth=2
	movl	$0, -12(%rbp)
.LBB85_23:                              # %for.cond75
                                        #   Parent Loop BB85_17 Depth=1
                                        #     Parent Loop BB85_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_25 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB85_50
# %bb.24:                               # %for.body78
                                        #   in Loop: Header=BB85_23 Depth=3
	movl	$0, -16(%rbp)
.LBB85_25:                              # %for.cond79
                                        #   Parent Loop BB85_17 Depth=1
                                        #     Parent Loop BB85_19 Depth=2
                                        #       Parent Loop BB85_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB85_48
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB85_25 Depth=4
	movq	pixel_map, %rax
	movl	-40(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB85_28
# %bb.27:                               # %cond.true86
                                        #   in Loop: Header=BB85_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB85_29
.LBB85_28:                              # %cond.false87
                                        #   in Loop: Header=BB85_25 Depth=4
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB85_29:                              # %cond.end89
                                        #   in Loop: Header=BB85_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB85_31
# %bb.30:                               # %cond.true93
                                        #   in Loop: Header=BB85_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB85_35
.LBB85_31:                              # %cond.false94
                                        #   in Loop: Header=BB85_25 Depth=4
	movl	-40(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB85_33
# %bb.32:                               # %cond.true98
                                        #   in Loop: Header=BB85_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB85_34
.LBB85_33:                              # %cond.false99
                                        #   in Loop: Header=BB85_25 Depth=4
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB85_34:                              # %cond.end101
                                        #   in Loop: Header=BB85_25 Depth=4
.LBB85_35:                              # %cond.end103
                                        #   in Loop: Header=BB85_25 Depth=4
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB85_37
# %bb.36:                               # %cond.true110
                                        #   in Loop: Header=BB85_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB85_38
.LBB85_37:                              # %cond.false111
                                        #   in Loop: Header=BB85_25 Depth=4
	movl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB85_38:                              # %cond.end113
                                        #   in Loop: Header=BB85_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB85_40
# %bb.39:                               # %cond.true117
                                        #   in Loop: Header=BB85_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB85_44
.LBB85_40:                              # %cond.false118
                                        #   in Loop: Header=BB85_25 Depth=4
	movl	-36(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB85_42
# %bb.41:                               # %cond.true122
                                        #   in Loop: Header=BB85_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB85_43
.LBB85_42:                              # %cond.false123
                                        #   in Loop: Header=BB85_25 Depth=4
	movl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB85_43:                              # %cond.end125
                                        #   in Loop: Header=BB85_25 Depth=4
.LBB85_44:                              # %cond.end127
                                        #   in Loop: Header=BB85_25 Depth=4
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB85_46
# %bb.45:                               # %if.then134
	movl	$0, -56(%rbp)
	jmp	.LBB85_267
.LBB85_46:                              # %if.end
                                        #   in Loop: Header=BB85_25 Depth=4
	jmp	.LBB85_47
.LBB85_47:                              # %for.inc
                                        #   in Loop: Header=BB85_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_25
.LBB85_48:                              # %for.end
                                        #   in Loop: Header=BB85_23 Depth=3
	jmp	.LBB85_49
.LBB85_49:                              # %for.inc135
                                        #   in Loop: Header=BB85_23 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_23
.LBB85_50:                              # %for.end137
                                        #   in Loop: Header=BB85_19 Depth=2
	jmp	.LBB85_262
.LBB85_51:                              # %if.else
                                        #   in Loop: Header=BB85_19 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB85_85
# %bb.52:                               # %if.then140
                                        #   in Loop: Header=BB85_19 Depth=2
	movl	$0, -12(%rbp)
.LBB85_53:                              # %for.cond141
                                        #   Parent Loop BB85_17 Depth=1
                                        #     Parent Loop BB85_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_55 Depth 4
                                        #           Child Loop BB85_66 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB85_84
# %bb.54:                               # %for.body144
                                        #   in Loop: Header=BB85_53 Depth=3
	movl	$0, -16(%rbp)
.LBB85_55:                              # %for.cond145
                                        #   Parent Loop BB85_17 Depth=1
                                        #     Parent Loop BB85_19 Depth=2
                                        #       Parent Loop BB85_53 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_66 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB85_82
# %bb.56:                               # %for.body148
                                        #   in Loop: Header=BB85_55 Depth=4
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_58
# %bb.57:                               # %cond.true152
                                        #   in Loop: Header=BB85_55 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB85_59
.LBB85_58:                              # %cond.false153
                                        #   in Loop: Header=BB85_55 Depth=4
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB85_59:                              # %cond.end155
                                        #   in Loop: Header=BB85_55 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_61
# %bb.60:                               # %cond.true159
                                        #   in Loop: Header=BB85_55 Depth=4
	xorl	%eax, %eax
	jmp	.LBB85_65
.LBB85_61:                              # %cond.false160
                                        #   in Loop: Header=BB85_55 Depth=4
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_63
# %bb.62:                               # %cond.true164
                                        #   in Loop: Header=BB85_55 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB85_64
.LBB85_63:                              # %cond.false165
                                        #   in Loop: Header=BB85_55 Depth=4
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB85_64:                              # %cond.end167
                                        #   in Loop: Header=BB85_55 Depth=4
.LBB85_65:                              # %cond.end169
                                        #   in Loop: Header=BB85_55 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -28(%rbp)
.LBB85_66:                              # %for.cond171
                                        #   Parent Loop BB85_17 Depth=1
                                        #     Parent Loop BB85_19 Depth=2
                                        #       Parent Loop BB85_53 Depth=3
                                        #         Parent Loop BB85_55 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -28(%rbp)
	jge	.LBB85_80
# %bb.67:                               # %for.body174
                                        #   in Loop: Header=BB85_66 Depth=5
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	addl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_69
# %bb.68:                               # %cond.true179
                                        #   in Loop: Header=BB85_66 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB85_70
.LBB85_69:                              # %cond.false180
                                        #   in Loop: Header=BB85_66 Depth=5
	movl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB85_70:                              # %cond.end183
                                        #   in Loop: Header=BB85_66 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_72
# %bb.71:                               # %cond.true187
                                        #   in Loop: Header=BB85_66 Depth=5
	xorl	%eax, %eax
	jmp	.LBB85_76
.LBB85_72:                              # %cond.false188
                                        #   in Loop: Header=BB85_66 Depth=5
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	addl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_74
# %bb.73:                               # %cond.true193
                                        #   in Loop: Header=BB85_66 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB85_75
.LBB85_74:                              # %cond.false194
                                        #   in Loop: Header=BB85_66 Depth=5
	movl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB85_75:                              # %cond.end197
                                        #   in Loop: Header=BB85_66 Depth=5
.LBB85_76:                              # %cond.end199
                                        #   in Loop: Header=BB85_66 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB85_78
# %bb.77:                               # %if.then208
	movl	$0, -56(%rbp)
	jmp	.LBB85_267
.LBB85_78:                              # %if.end209
                                        #   in Loop: Header=BB85_66 Depth=5
	jmp	.LBB85_79
.LBB85_79:                              # %for.inc210
                                        #   in Loop: Header=BB85_66 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB85_66
.LBB85_80:                              # %for.end212
                                        #   in Loop: Header=BB85_55 Depth=4
	jmp	.LBB85_81
.LBB85_81:                              # %for.inc213
                                        #   in Loop: Header=BB85_55 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_55
.LBB85_82:                              # %for.end215
                                        #   in Loop: Header=BB85_53 Depth=3
	jmp	.LBB85_83
.LBB85_83:                              # %for.inc216
                                        #   in Loop: Header=BB85_53 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_53
.LBB85_84:                              # %for.end218
                                        #   in Loop: Header=BB85_19 Depth=2
	jmp	.LBB85_261
.LBB85_85:                              # %if.else219
                                        #   in Loop: Header=BB85_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB85_119
# %bb.86:                               # %if.then222
                                        #   in Loop: Header=BB85_19 Depth=2
	movl	$0, -12(%rbp)
.LBB85_87:                              # %for.cond223
                                        #   Parent Loop BB85_17 Depth=1
                                        #     Parent Loop BB85_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_89 Depth 4
                                        #           Child Loop BB85_100 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB85_118
# %bb.88:                               # %for.body226
                                        #   in Loop: Header=BB85_87 Depth=3
	movl	$0, -16(%rbp)
.LBB85_89:                              # %for.cond227
                                        #   Parent Loop BB85_17 Depth=1
                                        #     Parent Loop BB85_19 Depth=2
                                        #       Parent Loop BB85_87 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_100 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB85_116
# %bb.90:                               # %for.body230
                                        #   in Loop: Header=BB85_89 Depth=4
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_92
# %bb.91:                               # %cond.true234
                                        #   in Loop: Header=BB85_89 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB85_93
.LBB85_92:                              # %cond.false235
                                        #   in Loop: Header=BB85_89 Depth=4
	movl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB85_93:                              # %cond.end237
                                        #   in Loop: Header=BB85_89 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_95
# %bb.94:                               # %cond.true241
                                        #   in Loop: Header=BB85_89 Depth=4
	xorl	%eax, %eax
	jmp	.LBB85_99
.LBB85_95:                              # %cond.false242
                                        #   in Loop: Header=BB85_89 Depth=4
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_97
# %bb.96:                               # %cond.true246
                                        #   in Loop: Header=BB85_89 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB85_98
.LBB85_97:                              # %cond.false247
                                        #   in Loop: Header=BB85_89 Depth=4
	movl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB85_98:                              # %cond.end249
                                        #   in Loop: Header=BB85_89 Depth=4
.LBB85_99:                              # %cond.end251
                                        #   in Loop: Header=BB85_89 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -24(%rbp)
.LBB85_100:                             # %for.cond253
                                        #   Parent Loop BB85_17 Depth=1
                                        #     Parent Loop BB85_19 Depth=2
                                        #       Parent Loop BB85_87 Depth=3
                                        #         Parent Loop BB85_89 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB85_114
# %bb.101:                              # %for.body256
                                        #   in Loop: Header=BB85_100 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_103
# %bb.102:                              # %cond.true261
                                        #   in Loop: Header=BB85_100 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB85_104
.LBB85_103:                             # %cond.false262
                                        #   in Loop: Header=BB85_100 Depth=5
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB85_104:                             # %cond.end265
                                        #   in Loop: Header=BB85_100 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_106
# %bb.105:                              # %cond.true269
                                        #   in Loop: Header=BB85_100 Depth=5
	xorl	%eax, %eax
	jmp	.LBB85_110
.LBB85_106:                             # %cond.false270
                                        #   in Loop: Header=BB85_100 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_108
# %bb.107:                              # %cond.true275
                                        #   in Loop: Header=BB85_100 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB85_109
.LBB85_108:                             # %cond.false276
                                        #   in Loop: Header=BB85_100 Depth=5
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB85_109:                             # %cond.end279
                                        #   in Loop: Header=BB85_100 Depth=5
.LBB85_110:                             # %cond.end281
                                        #   in Loop: Header=BB85_100 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB85_112
# %bb.111:                              # %if.then290
	movl	$0, -56(%rbp)
	jmp	.LBB85_267
.LBB85_112:                             # %if.end291
                                        #   in Loop: Header=BB85_100 Depth=5
	jmp	.LBB85_113
.LBB85_113:                             # %for.inc292
                                        #   in Loop: Header=BB85_100 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_100
.LBB85_114:                             # %for.end294
                                        #   in Loop: Header=BB85_89 Depth=4
	jmp	.LBB85_115
.LBB85_115:                             # %for.inc295
                                        #   in Loop: Header=BB85_89 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_89
.LBB85_116:                             # %for.end297
                                        #   in Loop: Header=BB85_87 Depth=3
	jmp	.LBB85_117
.LBB85_117:                             # %for.inc298
                                        #   in Loop: Header=BB85_87 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_87
.LBB85_118:                             # %for.end300
                                        #   in Loop: Header=BB85_19 Depth=2
	jmp	.LBB85_260
.LBB85_119:                             # %if.else301
                                        #   in Loop: Header=BB85_19 Depth=2
	cmpl	$2, -72(%rbp)
	jne	.LBB85_157
# %bb.120:                              # %if.then304
                                        #   in Loop: Header=BB85_19 Depth=2
	movl	$0, -12(%rbp)
.LBB85_121:                             # %for.cond305
                                        #   Parent Loop BB85_17 Depth=1
                                        #     Parent Loop BB85_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_123 Depth 4
                                        #           Child Loop BB85_125 Depth 5
                                        #             Child Loop BB85_136 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB85_156
# %bb.122:                              # %for.body308
                                        #   in Loop: Header=BB85_121 Depth=3
	movl	$0, -16(%rbp)
.LBB85_123:                             # %for.cond309
                                        #   Parent Loop BB85_17 Depth=1
                                        #     Parent Loop BB85_19 Depth=2
                                        #       Parent Loop BB85_121 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_125 Depth 5
                                        #             Child Loop BB85_136 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB85_154
# %bb.124:                              # %for.body312
                                        #   in Loop: Header=BB85_123 Depth=4
	movl	$-2, -24(%rbp)
.LBB85_125:                             # %for.cond313
                                        #   Parent Loop BB85_17 Depth=1
                                        #     Parent Loop BB85_19 Depth=2
                                        #       Parent Loop BB85_121 Depth=3
                                        #         Parent Loop BB85_123 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB85_136 Depth 6
	cmpl	$4, -24(%rbp)
	jge	.LBB85_152
# %bb.126:                              # %for.body316
                                        #   in Loop: Header=BB85_125 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_128
# %bb.127:                              # %cond.true321
                                        #   in Loop: Header=BB85_125 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB85_129
.LBB85_128:                             # %cond.false322
                                        #   in Loop: Header=BB85_125 Depth=5
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB85_129:                             # %cond.end325
                                        #   in Loop: Header=BB85_125 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_131
# %bb.130:                              # %cond.true329
                                        #   in Loop: Header=BB85_125 Depth=5
	xorl	%eax, %eax
	jmp	.LBB85_135
.LBB85_131:                             # %cond.false330
                                        #   in Loop: Header=BB85_125 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_133
# %bb.132:                              # %cond.true335
                                        #   in Loop: Header=BB85_125 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB85_134
.LBB85_133:                             # %cond.false336
                                        #   in Loop: Header=BB85_125 Depth=5
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB85_134:                             # %cond.end339
                                        #   in Loop: Header=BB85_125 Depth=5
.LBB85_135:                             # %cond.end341
                                        #   in Loop: Header=BB85_125 Depth=5
	movl	%eax, -44(%rbp)
	movl	$-2, -28(%rbp)
.LBB85_136:                             # %for.cond343
                                        #   Parent Loop BB85_17 Depth=1
                                        #     Parent Loop BB85_19 Depth=2
                                        #       Parent Loop BB85_121 Depth=3
                                        #         Parent Loop BB85_123 Depth=4
                                        #           Parent Loop BB85_125 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -28(%rbp)
	jge	.LBB85_150
# %bb.137:                              # %for.body346
                                        #   in Loop: Header=BB85_136 Depth=6
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_139
# %bb.138:                              # %cond.true351
                                        #   in Loop: Header=BB85_136 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB85_140
.LBB85_139:                             # %cond.false352
                                        #   in Loop: Header=BB85_136 Depth=6
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB85_140:                             # %cond.end355
                                        #   in Loop: Header=BB85_136 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_142
# %bb.141:                              # %cond.true359
                                        #   in Loop: Header=BB85_136 Depth=6
	xorl	%eax, %eax
	jmp	.LBB85_146
.LBB85_142:                             # %cond.false360
                                        #   in Loop: Header=BB85_136 Depth=6
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_144
# %bb.143:                              # %cond.true365
                                        #   in Loop: Header=BB85_136 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB85_145
.LBB85_144:                             # %cond.false366
                                        #   in Loop: Header=BB85_136 Depth=6
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB85_145:                             # %cond.end369
                                        #   in Loop: Header=BB85_136 Depth=6
.LBB85_146:                             # %cond.end371
                                        #   in Loop: Header=BB85_136 Depth=6
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB85_148
# %bb.147:                              # %if.then380
	movl	$0, -56(%rbp)
	jmp	.LBB85_267
.LBB85_148:                             # %if.end381
                                        #   in Loop: Header=BB85_136 Depth=6
	jmp	.LBB85_149
.LBB85_149:                             # %for.inc382
                                        #   in Loop: Header=BB85_136 Depth=6
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB85_136
.LBB85_150:                             # %for.end384
                                        #   in Loop: Header=BB85_125 Depth=5
	jmp	.LBB85_151
.LBB85_151:                             # %for.inc385
                                        #   in Loop: Header=BB85_125 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_125
.LBB85_152:                             # %for.end387
                                        #   in Loop: Header=BB85_123 Depth=4
	jmp	.LBB85_153
.LBB85_153:                             # %for.inc388
                                        #   in Loop: Header=BB85_123 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_123
.LBB85_154:                             # %for.end390
                                        #   in Loop: Header=BB85_121 Depth=3
	jmp	.LBB85_155
.LBB85_155:                             # %for.inc391
                                        #   in Loop: Header=BB85_121 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_121
.LBB85_156:                             # %for.end393
                                        #   in Loop: Header=BB85_19 Depth=2
	jmp	.LBB85_259
.LBB85_157:                             # %if.else394
                                        #   in Loop: Header=BB85_19 Depth=2
	cmpl	$2, -76(%rbp)
	jne	.LBB85_195
# %bb.158:                              # %if.then397
                                        #   in Loop: Header=BB85_19 Depth=2
	movl	$0, -12(%rbp)
.LBB85_159:                             # %for.cond398
                                        #   Parent Loop BB85_17 Depth=1
                                        #     Parent Loop BB85_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_161 Depth 4
                                        #           Child Loop BB85_163 Depth 5
                                        #             Child Loop BB85_174 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB85_194
# %bb.160:                              # %for.body401
                                        #   in Loop: Header=BB85_159 Depth=3
	movl	$0, -16(%rbp)
.LBB85_161:                             # %for.cond402
                                        #   Parent Loop BB85_17 Depth=1
                                        #     Parent Loop BB85_19 Depth=2
                                        #       Parent Loop BB85_159 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_163 Depth 5
                                        #             Child Loop BB85_174 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB85_192
# %bb.162:                              # %for.body405
                                        #   in Loop: Header=BB85_161 Depth=4
	movl	$-2, -28(%rbp)
.LBB85_163:                             # %for.cond406
                                        #   Parent Loop BB85_17 Depth=1
                                        #     Parent Loop BB85_19 Depth=2
                                        #       Parent Loop BB85_159 Depth=3
                                        #         Parent Loop BB85_161 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB85_174 Depth 6
	cmpl	$4, -28(%rbp)
	jge	.LBB85_190
# %bb.164:                              # %for.body409
                                        #   in Loop: Header=BB85_163 Depth=5
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_166
# %bb.165:                              # %cond.true414
                                        #   in Loop: Header=BB85_163 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB85_167
.LBB85_166:                             # %cond.false415
                                        #   in Loop: Header=BB85_163 Depth=5
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB85_167:                             # %cond.end418
                                        #   in Loop: Header=BB85_163 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_169
# %bb.168:                              # %cond.true422
                                        #   in Loop: Header=BB85_163 Depth=5
	xorl	%eax, %eax
	jmp	.LBB85_173
.LBB85_169:                             # %cond.false423
                                        #   in Loop: Header=BB85_163 Depth=5
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_171
# %bb.170:                              # %cond.true428
                                        #   in Loop: Header=BB85_163 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB85_172
.LBB85_171:                             # %cond.false429
                                        #   in Loop: Header=BB85_163 Depth=5
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB85_172:                             # %cond.end432
                                        #   in Loop: Header=BB85_163 Depth=5
.LBB85_173:                             # %cond.end434
                                        #   in Loop: Header=BB85_163 Depth=5
	movl	%eax, -48(%rbp)
	movl	$-2, -24(%rbp)
.LBB85_174:                             # %for.cond436
                                        #   Parent Loop BB85_17 Depth=1
                                        #     Parent Loop BB85_19 Depth=2
                                        #       Parent Loop BB85_159 Depth=3
                                        #         Parent Loop BB85_161 Depth=4
                                        #           Parent Loop BB85_163 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -24(%rbp)
	jge	.LBB85_188
# %bb.175:                              # %for.body439
                                        #   in Loop: Header=BB85_174 Depth=6
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_177
# %bb.176:                              # %cond.true444
                                        #   in Loop: Header=BB85_174 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB85_178
.LBB85_177:                             # %cond.false445
                                        #   in Loop: Header=BB85_174 Depth=6
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB85_178:                             # %cond.end448
                                        #   in Loop: Header=BB85_174 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_180
# %bb.179:                              # %cond.true452
                                        #   in Loop: Header=BB85_174 Depth=6
	xorl	%eax, %eax
	jmp	.LBB85_184
.LBB85_180:                             # %cond.false453
                                        #   in Loop: Header=BB85_174 Depth=6
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_182
# %bb.181:                              # %cond.true458
                                        #   in Loop: Header=BB85_174 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB85_183
.LBB85_182:                             # %cond.false459
                                        #   in Loop: Header=BB85_174 Depth=6
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB85_183:                             # %cond.end462
                                        #   in Loop: Header=BB85_174 Depth=6
.LBB85_184:                             # %cond.end464
                                        #   in Loop: Header=BB85_174 Depth=6
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB85_186
# %bb.185:                              # %if.then473
	movl	$0, -56(%rbp)
	jmp	.LBB85_267
.LBB85_186:                             # %if.end474
                                        #   in Loop: Header=BB85_174 Depth=6
	jmp	.LBB85_187
.LBB85_187:                             # %for.inc475
                                        #   in Loop: Header=BB85_174 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_174
.LBB85_188:                             # %for.end477
                                        #   in Loop: Header=BB85_163 Depth=5
	jmp	.LBB85_189
.LBB85_189:                             # %for.inc478
                                        #   in Loop: Header=BB85_163 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB85_163
.LBB85_190:                             # %for.end480
                                        #   in Loop: Header=BB85_161 Depth=4
	jmp	.LBB85_191
.LBB85_191:                             # %for.inc481
                                        #   in Loop: Header=BB85_161 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_161
.LBB85_192:                             # %for.end483
                                        #   in Loop: Header=BB85_159 Depth=3
	jmp	.LBB85_193
.LBB85_193:                             # %for.inc484
                                        #   in Loop: Header=BB85_159 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_159
.LBB85_194:                             # %for.end486
                                        #   in Loop: Header=BB85_19 Depth=2
	jmp	.LBB85_258
.LBB85_195:                             # %if.else487
                                        #   in Loop: Header=BB85_19 Depth=2
	movl	$0, -12(%rbp)
.LBB85_196:                             # %for.cond488
                                        #   Parent Loop BB85_17 Depth=1
                                        #     Parent Loop BB85_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_198 Depth 4
                                        #           Child Loop BB85_212 Depth 5
                                        #           Child Loop BB85_239 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB85_257
# %bb.197:                              # %for.body491
                                        #   in Loop: Header=BB85_196 Depth=3
	movl	$0, -16(%rbp)
.LBB85_198:                             # %for.cond492
                                        #   Parent Loop BB85_17 Depth=1
                                        #     Parent Loop BB85_19 Depth=2
                                        #       Parent Loop BB85_196 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_212 Depth 5
                                        #           Child Loop BB85_239 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB85_255
# %bb.199:                              # %for.body495
                                        #   in Loop: Header=BB85_198 Depth=4
	cmpl	$1, -76(%rbp)
	jne	.LBB85_201
# %bb.200:                              # %cond.true498
                                        #   in Loop: Header=BB85_198 Depth=4
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	jmp	.LBB85_202
.LBB85_201:                             # %cond.false500
                                        #   in Loop: Header=BB85_198 Depth=4
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$1, %eax
.LBB85_202:                             # %cond.end503
                                        #   in Loop: Header=BB85_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB85_204
# %bb.203:                              # %cond.true507
                                        #   in Loop: Header=BB85_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB85_205
.LBB85_204:                             # %cond.false508
                                        #   in Loop: Header=BB85_198 Depth=4
	movl	-44(%rbp), %eax
.LBB85_205:                             # %cond.end509
                                        #   in Loop: Header=BB85_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_207
# %bb.206:                              # %cond.true513
                                        #   in Loop: Header=BB85_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB85_211
.LBB85_207:                             # %cond.false514
                                        #   in Loop: Header=BB85_198 Depth=4
	movl	-40(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB85_209
# %bb.208:                              # %cond.true517
                                        #   in Loop: Header=BB85_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB85_210
.LBB85_209:                             # %cond.false518
                                        #   in Loop: Header=BB85_198 Depth=4
	movl	-44(%rbp), %eax
.LBB85_210:                             # %cond.end519
                                        #   in Loop: Header=BB85_198 Depth=4
.LBB85_211:                             # %cond.end521
                                        #   in Loop: Header=BB85_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -28(%rbp)
.LBB85_212:                             # %for.cond523
                                        #   Parent Loop BB85_17 Depth=1
                                        #     Parent Loop BB85_19 Depth=2
                                        #       Parent Loop BB85_196 Depth=3
                                        #         Parent Loop BB85_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -28(%rbp)
	jge	.LBB85_226
# %bb.213:                              # %for.body526
                                        #   in Loop: Header=BB85_212 Depth=5
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_215
# %bb.214:                              # %cond.true531
                                        #   in Loop: Header=BB85_212 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB85_216
.LBB85_215:                             # %cond.false532
                                        #   in Loop: Header=BB85_212 Depth=5
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB85_216:                             # %cond.end535
                                        #   in Loop: Header=BB85_212 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_218
# %bb.217:                              # %cond.true539
                                        #   in Loop: Header=BB85_212 Depth=5
	xorl	%eax, %eax
	jmp	.LBB85_222
.LBB85_218:                             # %cond.false540
                                        #   in Loop: Header=BB85_212 Depth=5
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_220
# %bb.219:                              # %cond.true545
                                        #   in Loop: Header=BB85_212 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB85_221
.LBB85_220:                             # %cond.false546
                                        #   in Loop: Header=BB85_212 Depth=5
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB85_221:                             # %cond.end549
                                        #   in Loop: Header=BB85_212 Depth=5
.LBB85_222:                             # %cond.end551
                                        #   in Loop: Header=BB85_212 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB85_224
# %bb.223:                              # %if.then560
	movl	$0, -56(%rbp)
	jmp	.LBB85_267
.LBB85_224:                             # %if.end561
                                        #   in Loop: Header=BB85_212 Depth=5
	jmp	.LBB85_225
.LBB85_225:                             # %for.inc562
                                        #   in Loop: Header=BB85_212 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB85_212
.LBB85_226:                             # %for.end564
                                        #   in Loop: Header=BB85_198 Depth=4
	cmpl	$1, -72(%rbp)
	jne	.LBB85_228
# %bb.227:                              # %cond.true567
                                        #   in Loop: Header=BB85_198 Depth=4
	movl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
	jmp	.LBB85_229
.LBB85_228:                             # %cond.false569
                                        #   in Loop: Header=BB85_198 Depth=4
	movl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
.LBB85_229:                             # %cond.end572
                                        #   in Loop: Header=BB85_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB85_231
# %bb.230:                              # %cond.true576
                                        #   in Loop: Header=BB85_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB85_232
.LBB85_231:                             # %cond.false577
                                        #   in Loop: Header=BB85_198 Depth=4
	movl	-48(%rbp), %eax
.LBB85_232:                             # %cond.end578
                                        #   in Loop: Header=BB85_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_234
# %bb.233:                              # %cond.true582
                                        #   in Loop: Header=BB85_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB85_238
.LBB85_234:                             # %cond.false583
                                        #   in Loop: Header=BB85_198 Depth=4
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB85_236
# %bb.235:                              # %cond.true586
                                        #   in Loop: Header=BB85_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB85_237
.LBB85_236:                             # %cond.false587
                                        #   in Loop: Header=BB85_198 Depth=4
	movl	-48(%rbp), %eax
.LBB85_237:                             # %cond.end588
                                        #   in Loop: Header=BB85_198 Depth=4
.LBB85_238:                             # %cond.end590
                                        #   in Loop: Header=BB85_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -24(%rbp)
.LBB85_239:                             # %for.cond592
                                        #   Parent Loop BB85_17 Depth=1
                                        #     Parent Loop BB85_19 Depth=2
                                        #       Parent Loop BB85_196 Depth=3
                                        #         Parent Loop BB85_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB85_253
# %bb.240:                              # %for.body595
                                        #   in Loop: Header=BB85_239 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_242
# %bb.241:                              # %cond.true600
                                        #   in Loop: Header=BB85_239 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB85_243
.LBB85_242:                             # %cond.false601
                                        #   in Loop: Header=BB85_239 Depth=5
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB85_243:                             # %cond.end604
                                        #   in Loop: Header=BB85_239 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_245
# %bb.244:                              # %cond.true608
                                        #   in Loop: Header=BB85_239 Depth=5
	xorl	%eax, %eax
	jmp	.LBB85_249
.LBB85_245:                             # %cond.false609
                                        #   in Loop: Header=BB85_239 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_247
# %bb.246:                              # %cond.true614
                                        #   in Loop: Header=BB85_239 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB85_248
.LBB85_247:                             # %cond.false615
                                        #   in Loop: Header=BB85_239 Depth=5
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB85_248:                             # %cond.end618
                                        #   in Loop: Header=BB85_239 Depth=5
.LBB85_249:                             # %cond.end620
                                        #   in Loop: Header=BB85_239 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB85_251
# %bb.250:                              # %if.then629
	movl	$0, -56(%rbp)
	jmp	.LBB85_267
.LBB85_251:                             # %if.end630
                                        #   in Loop: Header=BB85_239 Depth=5
	jmp	.LBB85_252
.LBB85_252:                             # %for.inc631
                                        #   in Loop: Header=BB85_239 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_239
.LBB85_253:                             # %for.end633
                                        #   in Loop: Header=BB85_198 Depth=4
	jmp	.LBB85_254
.LBB85_254:                             # %for.inc634
                                        #   in Loop: Header=BB85_198 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_198
.LBB85_255:                             # %for.end636
                                        #   in Loop: Header=BB85_196 Depth=3
	jmp	.LBB85_256
.LBB85_256:                             # %for.inc637
                                        #   in Loop: Header=BB85_196 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_196
.LBB85_257:                             # %for.end639
                                        #   in Loop: Header=BB85_19 Depth=2
	jmp	.LBB85_258
.LBB85_258:                             # %if.end640
                                        #   in Loop: Header=BB85_19 Depth=2
	jmp	.LBB85_259
.LBB85_259:                             # %if.end641
                                        #   in Loop: Header=BB85_19 Depth=2
	jmp	.LBB85_260
.LBB85_260:                             # %if.end642
                                        #   in Loop: Header=BB85_19 Depth=2
	jmp	.LBB85_261
.LBB85_261:                             # %if.end643
                                        #   in Loop: Header=BB85_19 Depth=2
	jmp	.LBB85_262
.LBB85_262:                             # %if.end644
                                        #   in Loop: Header=BB85_19 Depth=2
	jmp	.LBB85_263
.LBB85_263:                             # %for.inc645
                                        #   in Loop: Header=BB85_19 Depth=2
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB85_19
.LBB85_264:                             # %for.end647
                                        #   in Loop: Header=BB85_17 Depth=1
	jmp	.LBB85_265
.LBB85_265:                             # %for.inc648
                                        #   in Loop: Header=BB85_17 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB85_17
.LBB85_266:                             # %for.end650
	movl	$1, -56(%rbp)
.LBB85_267:                             # %return
	movl	-56(%rbp), %ebx
	cmpl	$958838364, -108(%rbp)  # imm = 0x3926B65C
	jne	.LBB85_269
.LBB85_268:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_269:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_268
.Lfunc_end85:
	.size	CheckReliabilityOfRef.56, .Lfunc_end85-CheckReliabilityOfRef.56
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_Intra4x4Macroblock.57 # -- Begin function Mode_Decision_for_Intra4x4Macroblock.57
	.p2align	4, 0x90
	.type	Mode_Decision_for_Intra4x4Macroblock.57,@function
Mode_Decision_for_Intra4x4Macroblock.57: # @Mode_Decision_for_Intra4x4Macroblock.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$359770220, -24(%rbp)   # imm = 0x1571A86C
	vmovsd	%xmm0, -40(%rbp)
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB86_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB86_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	-12(%rbp), %edi
	vmovsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-20(%rbp), %rsi
	callq	Mode_Decision_for_8x8IntraBlocks
	cmpl	$0, %eax
	je	.LBB86_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	-12(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB86_4:                               # %if.end
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	-20(%rbp), %eax
	movq	-32(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_1
.LBB86_6:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$359770220, -24(%rbp)   # imm = 0x1571A86C
	jne	.LBB86_8
.LBB86_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_7
.Lfunc_end86:
	.size	Mode_Decision_for_Intra4x4Macroblock.57, .Lfunc_end86-Mode_Decision_for_Intra4x4Macroblock.57
	.cfi_endproc
                                        # -- End function
	.globl	set_stored_macroblock_parameters.58 # -- Begin function set_stored_macroblock_parameters.58
	.p2align	4, 0x90
	.type	set_stored_macroblock_parameters.58,@function
set_stored_macroblock_parameters.58:    # @set_stored_macroblock_parameters.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$547385607, -52(%rbp)   # imm = 0x20A07107
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB87_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB87_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB87_4
.LBB87_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB87_4
.LBB87_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB87_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_7 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB87_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB87_5 Depth=1
	movl	$0, -4(%rbp)
.LBB87_7:                               # %for.cond9
                                        #   Parent Loop BB87_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB87_12
# %bb.8:                                # %for.body12
                                        #   in Loop: Header=BB87_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-96(%rbp), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB87_10
# %bb.9:                                # %if.then
                                        #   in Loop: Header=BB87_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB87_10:                              # %if.end
                                        #   in Loop: Header=BB87_7 Depth=2
	jmp	.LBB87_11
.LBB87_11:                              # %for.inc
                                        #   in Loop: Header=BB87_7 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_7
.LBB87_12:                              # %for.end
                                        #   in Loop: Header=BB87_5 Depth=1
	jmp	.LBB87_13
.LBB87_13:                              # %for.inc33
                                        #   in Loop: Header=BB87_5 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_5
.LBB87_14:                              # %for.end35
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB87_26
# %bb.15:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB87_16:                              # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_18 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB87_25
# %bb.17:                               # %for.body42
                                        #   in Loop: Header=BB87_16 Depth=1
	movl	$0, -4(%rbp)
.LBB87_18:                              # %for.cond43
                                        #   Parent Loop BB87_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB87_23
# %bb.19:                               # %for.body46
                                        #   in Loop: Header=BB87_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-72(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-72(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB87_21
# %bb.20:                               # %if.then73
                                        #   in Loop: Header=BB87_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB87_21:                              # %if.end92
                                        #   in Loop: Header=BB87_18 Depth=2
	jmp	.LBB87_22
.LBB87_22:                              # %for.inc93
                                        #   in Loop: Header=BB87_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_18
.LBB87_23:                              # %for.end95
                                        #   in Loop: Header=BB87_16 Depth=1
	jmp	.LBB87_24
.LBB87_24:                              # %for.inc96
                                        #   in Loop: Header=BB87_16 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_16
.LBB87_25:                              # %for.end98
	jmp	.LBB87_26
.LBB87_26:                              # %if.end99
	movq	cofAC, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-104(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-88(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movl	cbp, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB87_56
# %bb.27:                               # %if.then104
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movl	cbp, %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	cbp_blk, %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	592(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3348(%rcx)
	movq	-24(%rbp), %rax
	movl	596(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3352(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3344(%rcx)
	movl	$0, -4(%rbp)
.LBB87_28:                              # %for.cond113
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_30 Depth 2
                                        #       Child Loop BB87_32 Depth 3
                                        #         Child Loop BB87_34 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_43
# %bb.29:                               # %for.body117
                                        #   in Loop: Header=BB87_28 Depth=1
	movl	$0, -8(%rbp)
.LBB87_30:                              # %for.cond118
                                        #   Parent Loop BB87_28 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_32 Depth 3
                                        #         Child Loop BB87_34 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB87_41
# %bb.31:                               # %for.body121
                                        #   in Loop: Header=BB87_30 Depth=2
	movl	$0, -12(%rbp)
.LBB87_32:                              # %for.cond122
                                        #   Parent Loop BB87_28 Depth=1
                                        #     Parent Loop BB87_30 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_34 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB87_39
# %bb.33:                               # %for.body125
                                        #   in Loop: Header=BB87_32 Depth=3
	movl	$0, -28(%rbp)
.LBB87_34:                              # %for.cond126
                                        #   Parent Loop BB87_28 Depth=1
                                        #     Parent Loop BB87_30 Depth=2
                                        #       Parent Loop BB87_32 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -28(%rbp)
	jge	.LBB87_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB87_34 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc148
                                        #   in Loop: Header=BB87_34 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB87_34
.LBB87_37:                              # %for.end150
                                        #   in Loop: Header=BB87_32 Depth=3
	jmp	.LBB87_38
.LBB87_38:                              # %for.inc151
                                        #   in Loop: Header=BB87_32 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_32
.LBB87_39:                              # %for.end153
                                        #   in Loop: Header=BB87_30 Depth=2
	jmp	.LBB87_40
.LBB87_40:                              # %for.inc154
                                        #   in Loop: Header=BB87_30 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_30
.LBB87_41:                              # %for.end156
                                        #   in Loop: Header=BB87_28 Depth=1
	jmp	.LBB87_42
.LBB87_42:                              # %for.inc157
                                        #   in Loop: Header=BB87_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_28
.LBB87_43:                              # %for.end159
	movl	$0, -4(%rbp)
.LBB87_44:                              # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_46 Depth 2
                                        #       Child Loop BB87_48 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB87_55
# %bb.45:                               # %for.body163
                                        #   in Loop: Header=BB87_44 Depth=1
	movl	$0, -12(%rbp)
.LBB87_46:                              # %for.cond164
                                        #   Parent Loop BB87_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_48 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB87_53
# %bb.47:                               # %for.body167
                                        #   in Loop: Header=BB87_46 Depth=2
	movl	$0, -28(%rbp)
.LBB87_48:                              # %for.cond168
                                        #   Parent Loop BB87_44 Depth=1
                                        #     Parent Loop BB87_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -28(%rbp)
	jge	.LBB87_51
# %bb.49:                               # %for.body171
                                        #   in Loop: Header=BB87_48 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.50:                               # %for.inc186
                                        #   in Loop: Header=BB87_48 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB87_48
.LBB87_51:                              # %for.end188
                                        #   in Loop: Header=BB87_46 Depth=2
	jmp	.LBB87_52
.LBB87_52:                              # %for.inc189
                                        #   in Loop: Header=BB87_46 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_46
.LBB87_53:                              # %for.end191
                                        #   in Loop: Header=BB87_44 Depth=1
	jmp	.LBB87_54
.LBB87_54:                              # %for.inc192
                                        #   in Loop: Header=BB87_44 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_44
.LBB87_55:                              # %for.end194
	jmp	.LBB87_56
.LBB87_56:                              # %if.end195
	movl	$0, -4(%rbp)
.LBB87_57:                              # %for.cond196
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB87_62
# %bb.58:                               # %for.body199
                                        #   in Loop: Header=BB87_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB87_60
# %bb.59:                               # %if.then212
                                        #   in Loop: Header=BB87_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
.LBB87_60:                              # %if.end225
                                        #   in Loop: Header=BB87_57 Depth=1
	jmp	.LBB87_61
.LBB87_61:                              # %for.inc226
                                        #   in Loop: Header=BB87_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_57
.LBB87_62:                              # %for.end228
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB87_64
# %bb.63:                               # %if.then232
	movl	bi_pred_me, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB87_65
.LBB87_64:                              # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB87_65:                              # %if.end234
	cmpl	$8, -32(%rbp)
	jne	.LBB87_69
# %bb.66:                               # %land.lhs.true237
	cmpl	$0, luma_transform_size_8x8_flag
	jne	.LBB87_69
# %bb.67:                               # %land.lhs.true239
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB87_69
# %bb.68:                               # %if.then241
	movl	$1, %edi
	callq	RestoreMV8x8
.LBB87_69:                              # %if.end242
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB87_73
# %bb.70:                               # %land.lhs.true246
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB87_73
# %bb.71:                               # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB87_73
# %bb.72:                               # %if.then253
	movq	-24(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB87_74
.LBB87_73:                              # %if.else254
	movl	luma_transform_size_8x8_flag, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB87_74:                              # %if.end256
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB87_77
# %bb.75:                               # %land.lhs.true261
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB87_77
# %bb.76:                               # %if.then265
	movl	-32(%rbp), %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movq	img, %rdx
	movslq	136(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	140(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
.LBB87_77:                              # %if.end271
	movl	$0, -8(%rbp)
.LBB87_78:                              # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_80 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB87_112
# %bb.79:                               # %for.body275
                                        #   in Loop: Header=BB87_78 Depth=1
	movl	$0, -4(%rbp)
.LBB87_80:                              # %for.cond276
                                        #   Parent Loop BB87_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB87_110
# %bb.81:                               # %for.body279
                                        #   in Loop: Header=BB87_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$1, 488(%rsi,%rax,4)
	je	.LBB87_85
# %bb.82:                               # %lor.lhs.false287
                                        #   in Loop: Header=BB87_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB87_85
# %bb.83:                               # %lor.lhs.false291
                                        #   in Loop: Header=BB87_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB87_85
# %bb.84:                               # %lor.lhs.false295
                                        #   in Loop: Header=BB87_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB87_88
.LBB87_85:                              # %if.then299
                                        #   in Loop: Header=BB87_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB87_87
# %bb.86:                               # %if.then339
                                        #   in Loop: Header=BB87_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB87_87:                              # %if.end345
                                        #   in Loop: Header=BB87_80 Depth=2
	jmp	.LBB87_101
.LBB87_88:                              # %if.else346
                                        #   in Loop: Header=BB87_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB87_97
# %bb.89:                               # %land.lhs.true349
                                        #   in Loop: Header=BB87_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB87_97
# %bb.90:                               # %land.lhs.true359
                                        #   in Loop: Header=BB87_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB87_97
# %bb.91:                               # %if.then363
                                        #   in Loop: Header=BB87_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB87_93
# %bb.92:                               # %cond.true367
                                        #   in Loop: Header=BB87_80 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB87_94
.LBB87_93:                              # %cond.false368
                                        #   in Loop: Header=BB87_80 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB87_94:                              # %cond.end369
                                        #   in Loop: Header=BB87_80 Depth=2
	movq	%rax, -64(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB87_96
# %bb.95:                               # %if.then451
                                        #   in Loop: Header=BB87_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB87_96:                              # %if.end458
                                        #   in Loop: Header=BB87_80 Depth=2
	jmp	.LBB87_100
.LBB87_97:                              # %if.else459
                                        #   in Loop: Header=BB87_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB87_99
# %bb.98:                               # %if.then567
                                        #   in Loop: Header=BB87_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB87_99:                              # %if.end578
                                        #   in Loop: Header=BB87_80 Depth=2
	jmp	.LBB87_100
.LBB87_100:                             # %if.end579
                                        #   in Loop: Header=BB87_80 Depth=2
	jmp	.LBB87_101
.LBB87_101:                             # %if.end580
                                        #   in Loop: Header=BB87_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	je	.LBB87_105
# %bb.102:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB87_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB87_105
# %bb.103:                              # %lor.lhs.false594
                                        #   in Loop: Header=BB87_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB87_105
# %bb.104:                              # %lor.lhs.false598
                                        #   in Loop: Header=BB87_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB87_108
.LBB87_105:                             # %if.then602
                                        #   in Loop: Header=BB87_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB87_107
# %bb.106:                              # %if.then647
                                        #   in Loop: Header=BB87_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB87_107:                             # %if.end654
                                        #   in Loop: Header=BB87_80 Depth=2
	jmp	.LBB87_108
.LBB87_108:                             # %if.end655
                                        #   in Loop: Header=BB87_80 Depth=2
	jmp	.LBB87_109
.LBB87_109:                             # %for.inc656
                                        #   in Loop: Header=BB87_80 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_80
.LBB87_110:                             # %for.end658
                                        #   in Loop: Header=BB87_78 Depth=1
	jmp	.LBB87_111
.LBB87_111:                             # %for.inc659
                                        #   in Loop: Header=BB87_78 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_78
.LBB87_112:                             # %for.end661
	cmpl	$0, -40(%rbp)
	je	.LBB87_142
# %bb.113:                              # %if.then663
	movl	$0, -8(%rbp)
.LBB87_114:                             # %for.cond664
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_116 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB87_141
# %bb.115:                              # %for.body667
                                        #   in Loop: Header=BB87_114 Depth=1
	movl	$0, -4(%rbp)
.LBB87_116:                             # %for.cond668
                                        #   Parent Loop BB87_114 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB87_139
# %bb.117:                              # %for.body671
                                        #   in Loop: Header=BB87_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB87_121
# %bb.118:                              # %lor.lhs.false675
                                        #   in Loop: Header=BB87_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB87_121
# %bb.119:                              # %lor.lhs.false679
                                        #   in Loop: Header=BB87_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB87_121
# %bb.120:                              # %lor.lhs.false683
                                        #   in Loop: Header=BB87_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	jne	.LBB87_124
.LBB87_121:                             # %if.then693
                                        #   in Loop: Header=BB87_116 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB87_123
# %bb.122:                              # %if.then738
                                        #   in Loop: Header=BB87_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB87_123:                             # %if.end745
                                        #   in Loop: Header=BB87_116 Depth=2
	jmp	.LBB87_137
.LBB87_124:                             # %if.else746
                                        #   in Loop: Header=BB87_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB87_133
# %bb.125:                              # %land.lhs.true749
                                        #   in Loop: Header=BB87_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB87_133
# %bb.126:                              # %land.lhs.true759
                                        #   in Loop: Header=BB87_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB87_133
# %bb.127:                              # %if.then763
                                        #   in Loop: Header=BB87_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB87_129
# %bb.128:                              # %cond.true768
                                        #   in Loop: Header=BB87_116 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB87_130
.LBB87_129:                             # %cond.false770
                                        #   in Loop: Header=BB87_116 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB87_130:                             # %cond.end772
                                        #   in Loop: Header=BB87_116 Depth=2
	movq	%rax, -80(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB87_132
# %bb.131:                              # %if.then855
                                        #   in Loop: Header=BB87_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB87_132:                             # %if.end862
                                        #   in Loop: Header=BB87_116 Depth=2
	jmp	.LBB87_136
.LBB87_133:                             # %if.else863
                                        #   in Loop: Header=BB87_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB87_135
# %bb.134:                              # %if.then972
                                        #   in Loop: Header=BB87_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB87_135:                             # %if.end983
                                        #   in Loop: Header=BB87_116 Depth=2
	jmp	.LBB87_136
.LBB87_136:                             # %if.end984
                                        #   in Loop: Header=BB87_116 Depth=2
	jmp	.LBB87_137
.LBB87_137:                             # %if.end985
                                        #   in Loop: Header=BB87_116 Depth=2
	jmp	.LBB87_138
.LBB87_138:                             # %for.inc986
                                        #   in Loop: Header=BB87_116 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_116
.LBB87_139:                             # %for.end988
                                        #   in Loop: Header=BB87_114 Depth=1
	jmp	.LBB87_140
.LBB87_140:                             # %for.inc989
                                        #   in Loop: Header=BB87_114 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_114
.LBB87_141:                             # %for.end991
	jmp	.LBB87_142
.LBB87_142:                             # %if.end992
	movl	best_c_imode, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	best_i16offset, %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB87_152
# %bb.143:                              # %if.then997
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB87_144:                             # %for.cond998
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_146 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB87_151
# %bb.145:                              # %for.body1001
                                        #   in Loop: Header=BB87_144 Depth=1
	movl	$0, -8(%rbp)
.LBB87_146:                             # %for.cond1002
                                        #   Parent Loop BB87_144 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB87_149
# %bb.147:                              # %for.body1005
                                        #   in Loop: Header=BB87_146 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.148:                              # %for.inc1027
                                        #   in Loop: Header=BB87_146 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_146
.LBB87_149:                             # %for.end1030
                                        #   in Loop: Header=BB87_144 Depth=1
	jmp	.LBB87_150
.LBB87_150:                             # %for.inc1031
                                        #   in Loop: Header=BB87_144 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_144
.LBB87_151:                             # %for.end1033
	jmp	.LBB87_175
.LBB87_152:                             # %if.else1034
	cmpl	$9, -32(%rbp)
	je	.LBB87_163
# %bb.153:                              # %land.lhs.true1037
	cmpl	$13, -32(%rbp)
	je	.LBB87_163
# %bb.154:                              # %if.then1040
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB87_155:                             # %for.cond1042
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_157 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_162
# %bb.156:                              # %for.body1047
                                        #   in Loop: Header=BB87_155 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB87_157:                             # %for.cond1049
                                        #   Parent Loop BB87_155 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_160
# %bb.158:                              # %for.body1054
                                        #   in Loop: Header=BB87_157 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.159:                              # %for.inc1062
                                        #   in Loop: Header=BB87_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_157
.LBB87_160:                             # %for.end1065
                                        #   in Loop: Header=BB87_155 Depth=1
	jmp	.LBB87_161
.LBB87_161:                             # %for.inc1066
                                        #   in Loop: Header=BB87_155 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_155
.LBB87_162:                             # %for.end1068
	jmp	.LBB87_174
.LBB87_163:                             # %if.else1069
	cmpl	$9, -32(%rbp)
	jne	.LBB87_173
# %bb.164:                              # %if.then1072
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB87_165:                             # %for.cond1074
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_167 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_172
# %bb.166:                              # %for.body1079
                                        #   in Loop: Header=BB87_165 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB87_167:                             # %for.cond1081
                                        #   Parent Loop BB87_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_170
# %bb.168:                              # %for.body1086
                                        #   in Loop: Header=BB87_167 Depth=2
	movslq	-12(%rbp), %rax
	movl	b4_ipredmode(,%rax,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b4_intra_pred_modes(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.169:                              # %for.inc1098
                                        #   in Loop: Header=BB87_167 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_167
.LBB87_170:                             # %for.end1101
                                        #   in Loop: Header=BB87_165 Depth=1
	jmp	.LBB87_171
.LBB87_171:                             # %for.inc1102
                                        #   in Loop: Header=BB87_165 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_165
.LBB87_172:                             # %for.end1104
	jmp	.LBB87_173
.LBB87_173:                             # %if.end1105
	jmp	.LBB87_174
.LBB87_174:                             # %if.end1106
	jmp	.LBB87_175
.LBB87_175:                             # %if.end1107
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB87_185
# %bb.176:                              # %if.then1111
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB87_177:                             # %for.cond1112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_179 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB87_184
# %bb.178:                              # %for.body1115
                                        #   in Loop: Header=BB87_177 Depth=1
	movl	$0, -8(%rbp)
.LBB87_179:                             # %for.cond1116
                                        #   Parent Loop BB87_177 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB87_182
# %bb.180:                              # %for.body1119
                                        #   in Loop: Header=BB87_179 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$b8_ipredmode8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b8_intra_pred_modes8x8(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.181:                              # %for.inc1138
                                        #   in Loop: Header=BB87_179 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_179
.LBB87_182:                             # %for.end1141
                                        #   in Loop: Header=BB87_177 Depth=1
	jmp	.LBB87_183
.LBB87_183:                             # %for.inc1142
                                        #   in Loop: Header=BB87_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_177
.LBB87_184:                             # %for.end1144
	jmp	.LBB87_185
.LBB87_185:                             # %if.end1145
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB87_195
# %bb.186:                              # %if.then1148
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB87_187:                             # %for.cond1150
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_189 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_194
# %bb.188:                              # %for.body1155
                                        #   in Loop: Header=BB87_187 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB87_189:                             # %for.cond1157
                                        #   Parent Loop BB87_187 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_192
# %bb.190:                              # %for.body1162
                                        #   in Loop: Header=BB87_189 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.191:                              # %for.inc1178
                                        #   in Loop: Header=BB87_189 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_189
.LBB87_192:                             # %for.end1181
                                        #   in Loop: Header=BB87_187 Depth=1
	jmp	.LBB87_193
.LBB87_193:                             # %for.inc1182
                                        #   in Loop: Header=BB87_187 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_187
.LBB87_194:                             # %for.end1184
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3332(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
.LBB87_195:                             # %if.end1189
	movq	-24(%rbp), %rdi
	movl	-40(%rbp), %esi
	callq	SetMotionVectorsMB
	cmpl	$547385607, -52(%rbp)   # imm = 0x20A07107
	jne	.LBB87_197
.LBB87_196:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_197:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_196
.Lfunc_end87:
	.size	set_stored_macroblock_parameters.58, .Lfunc_end87-set_stored_macroblock_parameters.58
	.cfi_endproc
                                        # -- End function
	.globl	set_stored_macroblock_parameters.59 # -- Begin function set_stored_macroblock_parameters.59
	.p2align	4, 0x90
	.type	set_stored_macroblock_parameters.59,@function
set_stored_macroblock_parameters.59:    # @set_stored_macroblock_parameters.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$918862373, -52(%rbp)   # imm = 0x36C4BA25
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB88_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB88_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB88_4
.LBB88_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB88_4
.LBB88_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB88_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_7 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB88_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB88_5 Depth=1
	movl	$0, -4(%rbp)
.LBB88_7:                               # %for.cond9
                                        #   Parent Loop BB88_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB88_12
# %bb.8:                                # %for.body12
                                        #   in Loop: Header=BB88_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-88(%rbp), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB88_10
# %bb.9:                                # %if.then
                                        #   in Loop: Header=BB88_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB88_10:                              # %if.end
                                        #   in Loop: Header=BB88_7 Depth=2
	jmp	.LBB88_11
.LBB88_11:                              # %for.inc
                                        #   in Loop: Header=BB88_7 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_7
.LBB88_12:                              # %for.end
                                        #   in Loop: Header=BB88_5 Depth=1
	jmp	.LBB88_13
.LBB88_13:                              # %for.inc33
                                        #   in Loop: Header=BB88_5 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_5
.LBB88_14:                              # %for.end35
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB88_26
# %bb.15:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB88_16:                              # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_18 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB88_25
# %bb.17:                               # %for.body42
                                        #   in Loop: Header=BB88_16 Depth=1
	movl	$0, -4(%rbp)
.LBB88_18:                              # %for.cond43
                                        #   Parent Loop BB88_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB88_23
# %bb.19:                               # %for.body46
                                        #   in Loop: Header=BB88_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-72(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-72(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB88_21
# %bb.20:                               # %if.then73
                                        #   in Loop: Header=BB88_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB88_21:                              # %if.end92
                                        #   in Loop: Header=BB88_18 Depth=2
	jmp	.LBB88_22
.LBB88_22:                              # %for.inc93
                                        #   in Loop: Header=BB88_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_18
.LBB88_23:                              # %for.end95
                                        #   in Loop: Header=BB88_16 Depth=1
	jmp	.LBB88_24
.LBB88_24:                              # %for.inc96
                                        #   in Loop: Header=BB88_16 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_16
.LBB88_25:                              # %for.end98
	jmp	.LBB88_26
.LBB88_26:                              # %if.end99
	movq	cofAC, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-96(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-104(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movl	cbp, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB88_56
# %bb.27:                               # %if.then104
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movl	cbp, %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	cbp_blk, %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	592(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3348(%rcx)
	movq	-24(%rbp), %rax
	movl	596(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3352(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3344(%rcx)
	movl	$0, -4(%rbp)
.LBB88_28:                              # %for.cond113
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_30 Depth 2
                                        #       Child Loop BB88_32 Depth 3
                                        #         Child Loop BB88_34 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_43
# %bb.29:                               # %for.body117
                                        #   in Loop: Header=BB88_28 Depth=1
	movl	$0, -8(%rbp)
.LBB88_30:                              # %for.cond118
                                        #   Parent Loop BB88_28 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_32 Depth 3
                                        #         Child Loop BB88_34 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB88_41
# %bb.31:                               # %for.body121
                                        #   in Loop: Header=BB88_30 Depth=2
	movl	$0, -12(%rbp)
.LBB88_32:                              # %for.cond122
                                        #   Parent Loop BB88_28 Depth=1
                                        #     Parent Loop BB88_30 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB88_34 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB88_39
# %bb.33:                               # %for.body125
                                        #   in Loop: Header=BB88_32 Depth=3
	movl	$0, -28(%rbp)
.LBB88_34:                              # %for.cond126
                                        #   Parent Loop BB88_28 Depth=1
                                        #     Parent Loop BB88_30 Depth=2
                                        #       Parent Loop BB88_32 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -28(%rbp)
	jge	.LBB88_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB88_34 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc148
                                        #   in Loop: Header=BB88_34 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB88_34
.LBB88_37:                              # %for.end150
                                        #   in Loop: Header=BB88_32 Depth=3
	jmp	.LBB88_38
.LBB88_38:                              # %for.inc151
                                        #   in Loop: Header=BB88_32 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_32
.LBB88_39:                              # %for.end153
                                        #   in Loop: Header=BB88_30 Depth=2
	jmp	.LBB88_40
.LBB88_40:                              # %for.inc154
                                        #   in Loop: Header=BB88_30 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_30
.LBB88_41:                              # %for.end156
                                        #   in Loop: Header=BB88_28 Depth=1
	jmp	.LBB88_42
.LBB88_42:                              # %for.inc157
                                        #   in Loop: Header=BB88_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_28
.LBB88_43:                              # %for.end159
	movl	$0, -4(%rbp)
.LBB88_44:                              # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_46 Depth 2
                                        #       Child Loop BB88_48 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB88_55
# %bb.45:                               # %for.body163
                                        #   in Loop: Header=BB88_44 Depth=1
	movl	$0, -12(%rbp)
.LBB88_46:                              # %for.cond164
                                        #   Parent Loop BB88_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_48 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB88_53
# %bb.47:                               # %for.body167
                                        #   in Loop: Header=BB88_46 Depth=2
	movl	$0, -28(%rbp)
.LBB88_48:                              # %for.cond168
                                        #   Parent Loop BB88_44 Depth=1
                                        #     Parent Loop BB88_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -28(%rbp)
	jge	.LBB88_51
# %bb.49:                               # %for.body171
                                        #   in Loop: Header=BB88_48 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.50:                               # %for.inc186
                                        #   in Loop: Header=BB88_48 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB88_48
.LBB88_51:                              # %for.end188
                                        #   in Loop: Header=BB88_46 Depth=2
	jmp	.LBB88_52
.LBB88_52:                              # %for.inc189
                                        #   in Loop: Header=BB88_46 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_46
.LBB88_53:                              # %for.end191
                                        #   in Loop: Header=BB88_44 Depth=1
	jmp	.LBB88_54
.LBB88_54:                              # %for.inc192
                                        #   in Loop: Header=BB88_44 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_44
.LBB88_55:                              # %for.end194
	jmp	.LBB88_56
.LBB88_56:                              # %if.end195
	movl	$0, -4(%rbp)
.LBB88_57:                              # %for.cond196
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB88_62
# %bb.58:                               # %for.body199
                                        #   in Loop: Header=BB88_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB88_60
# %bb.59:                               # %if.then212
                                        #   in Loop: Header=BB88_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
.LBB88_60:                              # %if.end225
                                        #   in Loop: Header=BB88_57 Depth=1
	jmp	.LBB88_61
.LBB88_61:                              # %for.inc226
                                        #   in Loop: Header=BB88_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_57
.LBB88_62:                              # %for.end228
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB88_64
# %bb.63:                               # %if.then232
	movl	bi_pred_me, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB88_65
.LBB88_64:                              # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB88_65:                              # %if.end234
	cmpl	$8, -32(%rbp)
	jne	.LBB88_69
# %bb.66:                               # %land.lhs.true237
	cmpl	$0, luma_transform_size_8x8_flag
	jne	.LBB88_69
# %bb.67:                               # %land.lhs.true239
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB88_69
# %bb.68:                               # %if.then241
	movl	$1, %edi
	callq	RestoreMV8x8
.LBB88_69:                              # %if.end242
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB88_73
# %bb.70:                               # %land.lhs.true246
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB88_73
# %bb.71:                               # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB88_73
# %bb.72:                               # %if.then253
	movq	-24(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB88_74
.LBB88_73:                              # %if.else254
	movl	luma_transform_size_8x8_flag, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB88_74:                              # %if.end256
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB88_77
# %bb.75:                               # %land.lhs.true261
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB88_77
# %bb.76:                               # %if.then265
	movl	-32(%rbp), %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movq	img, %rdx
	movslq	136(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	140(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
.LBB88_77:                              # %if.end271
	movl	$0, -8(%rbp)
.LBB88_78:                              # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_80 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB88_112
# %bb.79:                               # %for.body275
                                        #   in Loop: Header=BB88_78 Depth=1
	movl	$0, -4(%rbp)
.LBB88_80:                              # %for.cond276
                                        #   Parent Loop BB88_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB88_110
# %bb.81:                               # %for.body279
                                        #   in Loop: Header=BB88_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$1, 488(%rsi,%rax,4)
	je	.LBB88_85
# %bb.82:                               # %lor.lhs.false287
                                        #   in Loop: Header=BB88_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB88_85
# %bb.83:                               # %lor.lhs.false291
                                        #   in Loop: Header=BB88_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB88_85
# %bb.84:                               # %lor.lhs.false295
                                        #   in Loop: Header=BB88_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB88_88
.LBB88_85:                              # %if.then299
                                        #   in Loop: Header=BB88_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB88_87
# %bb.86:                               # %if.then339
                                        #   in Loop: Header=BB88_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB88_87:                              # %if.end345
                                        #   in Loop: Header=BB88_80 Depth=2
	jmp	.LBB88_101
.LBB88_88:                              # %if.else346
                                        #   in Loop: Header=BB88_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB88_97
# %bb.89:                               # %land.lhs.true349
                                        #   in Loop: Header=BB88_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB88_97
# %bb.90:                               # %land.lhs.true359
                                        #   in Loop: Header=BB88_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB88_97
# %bb.91:                               # %if.then363
                                        #   in Loop: Header=BB88_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB88_93
# %bb.92:                               # %cond.true367
                                        #   in Loop: Header=BB88_80 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB88_94
.LBB88_93:                              # %cond.false368
                                        #   in Loop: Header=BB88_80 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB88_94:                              # %cond.end369
                                        #   in Loop: Header=BB88_80 Depth=2
	movq	%rax, -64(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB88_96
# %bb.95:                               # %if.then451
                                        #   in Loop: Header=BB88_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB88_96:                              # %if.end458
                                        #   in Loop: Header=BB88_80 Depth=2
	jmp	.LBB88_100
.LBB88_97:                              # %if.else459
                                        #   in Loop: Header=BB88_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB88_99
# %bb.98:                               # %if.then567
                                        #   in Loop: Header=BB88_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB88_99:                              # %if.end578
                                        #   in Loop: Header=BB88_80 Depth=2
	jmp	.LBB88_100
.LBB88_100:                             # %if.end579
                                        #   in Loop: Header=BB88_80 Depth=2
	jmp	.LBB88_101
.LBB88_101:                             # %if.end580
                                        #   in Loop: Header=BB88_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	je	.LBB88_105
# %bb.102:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB88_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB88_105
# %bb.103:                              # %lor.lhs.false594
                                        #   in Loop: Header=BB88_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB88_105
# %bb.104:                              # %lor.lhs.false598
                                        #   in Loop: Header=BB88_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB88_108
.LBB88_105:                             # %if.then602
                                        #   in Loop: Header=BB88_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB88_107
# %bb.106:                              # %if.then647
                                        #   in Loop: Header=BB88_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB88_107:                             # %if.end654
                                        #   in Loop: Header=BB88_80 Depth=2
	jmp	.LBB88_108
.LBB88_108:                             # %if.end655
                                        #   in Loop: Header=BB88_80 Depth=2
	jmp	.LBB88_109
.LBB88_109:                             # %for.inc656
                                        #   in Loop: Header=BB88_80 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_80
.LBB88_110:                             # %for.end658
                                        #   in Loop: Header=BB88_78 Depth=1
	jmp	.LBB88_111
.LBB88_111:                             # %for.inc659
                                        #   in Loop: Header=BB88_78 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_78
.LBB88_112:                             # %for.end661
	cmpl	$0, -40(%rbp)
	je	.LBB88_142
# %bb.113:                              # %if.then663
	movl	$0, -8(%rbp)
.LBB88_114:                             # %for.cond664
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_116 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB88_141
# %bb.115:                              # %for.body667
                                        #   in Loop: Header=BB88_114 Depth=1
	movl	$0, -4(%rbp)
.LBB88_116:                             # %for.cond668
                                        #   Parent Loop BB88_114 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB88_139
# %bb.117:                              # %for.body671
                                        #   in Loop: Header=BB88_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB88_121
# %bb.118:                              # %lor.lhs.false675
                                        #   in Loop: Header=BB88_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB88_121
# %bb.119:                              # %lor.lhs.false679
                                        #   in Loop: Header=BB88_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB88_121
# %bb.120:                              # %lor.lhs.false683
                                        #   in Loop: Header=BB88_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	jne	.LBB88_124
.LBB88_121:                             # %if.then693
                                        #   in Loop: Header=BB88_116 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB88_123
# %bb.122:                              # %if.then738
                                        #   in Loop: Header=BB88_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB88_123:                             # %if.end745
                                        #   in Loop: Header=BB88_116 Depth=2
	jmp	.LBB88_137
.LBB88_124:                             # %if.else746
                                        #   in Loop: Header=BB88_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB88_133
# %bb.125:                              # %land.lhs.true749
                                        #   in Loop: Header=BB88_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB88_133
# %bb.126:                              # %land.lhs.true759
                                        #   in Loop: Header=BB88_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB88_133
# %bb.127:                              # %if.then763
                                        #   in Loop: Header=BB88_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB88_129
# %bb.128:                              # %cond.true768
                                        #   in Loop: Header=BB88_116 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB88_130
.LBB88_129:                             # %cond.false770
                                        #   in Loop: Header=BB88_116 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB88_130:                             # %cond.end772
                                        #   in Loop: Header=BB88_116 Depth=2
	movq	%rax, -80(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB88_132
# %bb.131:                              # %if.then855
                                        #   in Loop: Header=BB88_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB88_132:                             # %if.end862
                                        #   in Loop: Header=BB88_116 Depth=2
	jmp	.LBB88_136
.LBB88_133:                             # %if.else863
                                        #   in Loop: Header=BB88_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB88_135
# %bb.134:                              # %if.then972
                                        #   in Loop: Header=BB88_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB88_135:                             # %if.end983
                                        #   in Loop: Header=BB88_116 Depth=2
	jmp	.LBB88_136
.LBB88_136:                             # %if.end984
                                        #   in Loop: Header=BB88_116 Depth=2
	jmp	.LBB88_137
.LBB88_137:                             # %if.end985
                                        #   in Loop: Header=BB88_116 Depth=2
	jmp	.LBB88_138
.LBB88_138:                             # %for.inc986
                                        #   in Loop: Header=BB88_116 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_116
.LBB88_139:                             # %for.end988
                                        #   in Loop: Header=BB88_114 Depth=1
	jmp	.LBB88_140
.LBB88_140:                             # %for.inc989
                                        #   in Loop: Header=BB88_114 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_114
.LBB88_141:                             # %for.end991
	jmp	.LBB88_142
.LBB88_142:                             # %if.end992
	movl	best_c_imode, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	best_i16offset, %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB88_152
# %bb.143:                              # %if.then997
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB88_144:                             # %for.cond998
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_146 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB88_151
# %bb.145:                              # %for.body1001
                                        #   in Loop: Header=BB88_144 Depth=1
	movl	$0, -8(%rbp)
.LBB88_146:                             # %for.cond1002
                                        #   Parent Loop BB88_144 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB88_149
# %bb.147:                              # %for.body1005
                                        #   in Loop: Header=BB88_146 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.148:                              # %for.inc1027
                                        #   in Loop: Header=BB88_146 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_146
.LBB88_149:                             # %for.end1030
                                        #   in Loop: Header=BB88_144 Depth=1
	jmp	.LBB88_150
.LBB88_150:                             # %for.inc1031
                                        #   in Loop: Header=BB88_144 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_144
.LBB88_151:                             # %for.end1033
	jmp	.LBB88_175
.LBB88_152:                             # %if.else1034
	cmpl	$9, -32(%rbp)
	je	.LBB88_163
# %bb.153:                              # %land.lhs.true1037
	cmpl	$13, -32(%rbp)
	je	.LBB88_163
# %bb.154:                              # %if.then1040
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB88_155:                             # %for.cond1042
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_157 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_162
# %bb.156:                              # %for.body1047
                                        #   in Loop: Header=BB88_155 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB88_157:                             # %for.cond1049
                                        #   Parent Loop BB88_155 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_160
# %bb.158:                              # %for.body1054
                                        #   in Loop: Header=BB88_157 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.159:                              # %for.inc1062
                                        #   in Loop: Header=BB88_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_157
.LBB88_160:                             # %for.end1065
                                        #   in Loop: Header=BB88_155 Depth=1
	jmp	.LBB88_161
.LBB88_161:                             # %for.inc1066
                                        #   in Loop: Header=BB88_155 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_155
.LBB88_162:                             # %for.end1068
	jmp	.LBB88_174
.LBB88_163:                             # %if.else1069
	cmpl	$9, -32(%rbp)
	jne	.LBB88_173
# %bb.164:                              # %if.then1072
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB88_165:                             # %for.cond1074
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_167 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_172
# %bb.166:                              # %for.body1079
                                        #   in Loop: Header=BB88_165 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB88_167:                             # %for.cond1081
                                        #   Parent Loop BB88_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_170
# %bb.168:                              # %for.body1086
                                        #   in Loop: Header=BB88_167 Depth=2
	movslq	-12(%rbp), %rax
	movl	b4_ipredmode(,%rax,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b4_intra_pred_modes(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.169:                              # %for.inc1098
                                        #   in Loop: Header=BB88_167 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_167
.LBB88_170:                             # %for.end1101
                                        #   in Loop: Header=BB88_165 Depth=1
	jmp	.LBB88_171
.LBB88_171:                             # %for.inc1102
                                        #   in Loop: Header=BB88_165 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_165
.LBB88_172:                             # %for.end1104
	jmp	.LBB88_173
.LBB88_173:                             # %if.end1105
	jmp	.LBB88_174
.LBB88_174:                             # %if.end1106
	jmp	.LBB88_175
.LBB88_175:                             # %if.end1107
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB88_185
# %bb.176:                              # %if.then1111
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB88_177:                             # %for.cond1112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_179 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB88_184
# %bb.178:                              # %for.body1115
                                        #   in Loop: Header=BB88_177 Depth=1
	movl	$0, -8(%rbp)
.LBB88_179:                             # %for.cond1116
                                        #   Parent Loop BB88_177 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB88_182
# %bb.180:                              # %for.body1119
                                        #   in Loop: Header=BB88_179 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$b8_ipredmode8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b8_intra_pred_modes8x8(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.181:                              # %for.inc1138
                                        #   in Loop: Header=BB88_179 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_179
.LBB88_182:                             # %for.end1141
                                        #   in Loop: Header=BB88_177 Depth=1
	jmp	.LBB88_183
.LBB88_183:                             # %for.inc1142
                                        #   in Loop: Header=BB88_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_177
.LBB88_184:                             # %for.end1144
	jmp	.LBB88_185
.LBB88_185:                             # %if.end1145
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB88_195
# %bb.186:                              # %if.then1148
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB88_187:                             # %for.cond1150
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_189 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_194
# %bb.188:                              # %for.body1155
                                        #   in Loop: Header=BB88_187 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB88_189:                             # %for.cond1157
                                        #   Parent Loop BB88_187 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_192
# %bb.190:                              # %for.body1162
                                        #   in Loop: Header=BB88_189 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.191:                              # %for.inc1178
                                        #   in Loop: Header=BB88_189 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_189
.LBB88_192:                             # %for.end1181
                                        #   in Loop: Header=BB88_187 Depth=1
	jmp	.LBB88_193
.LBB88_193:                             # %for.inc1182
                                        #   in Loop: Header=BB88_187 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_187
.LBB88_194:                             # %for.end1184
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3332(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
.LBB88_195:                             # %if.end1189
	movq	-24(%rbp), %rdi
	movl	-40(%rbp), %esi
	callq	SetMotionVectorsMB
	cmpl	$918862373, -52(%rbp)   # imm = 0x36C4BA25
	jne	.LBB88_197
.LBB88_196:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_197:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_196
.Lfunc_end88:
	.size	set_stored_macroblock_parameters.59, .Lfunc_end88-set_stored_macroblock_parameters.59
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMVBlock8x8.60    # -- Begin function RestoreMVBlock8x8.60
	.p2align	4, 0x90
	.type	RestoreMVBlock8x8.60,@function
RestoreMVBlock8x8.60:                   # @RestoreMVBlock8x8.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$1561903294, -68(%rbp)  # imm = 0x5D18C0BE
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -52(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -40(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -32(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB89_12
# %bb.1:                                # %if.then
	cmpl	$0, -52(%rbp)
	jl	.LBB89_11
# %bb.2:                                # %if.then5
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB89_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_5 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB89_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB89_3 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB89_5:                               # %for.cond7
                                        #   Parent Loop BB89_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB89_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB89_5 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB89_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_5
.LBB89_8:                               # %for.end
                                        #   in Loop: Header=BB89_3 Depth=1
	jmp	.LBB89_9
.LBB89_9:                               # %for.inc76
                                        #   in Loop: Header=BB89_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_3
.LBB89_10:                              # %for.end78
	jmp	.LBB89_11
.LBB89_11:                              # %if.end
	jmp	.LBB89_46
.LBB89_12:                              # %if.else
	cmpl	$0, -52(%rbp)
	jne	.LBB89_22
# %bb.13:                               # %if.then80
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB89_14:                              # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_16 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB89_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB89_14 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB89_16:                              # %for.cond84
                                        #   Parent Loop BB89_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB89_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB89_16 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB89_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_16
.LBB89_19:                              # %for.end161
                                        #   in Loop: Header=BB89_14 Depth=1
	jmp	.LBB89_20
.LBB89_20:                              # %for.inc162
                                        #   in Loop: Header=BB89_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_14
.LBB89_21:                              # %for.end164
	jmp	.LBB89_45
.LBB89_22:                              # %if.else165
	cmpl	$1, -52(%rbp)
	jne	.LBB89_32
# %bb.23:                               # %if.then167
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB89_24:                              # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_26 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB89_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB89_24 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB89_26:                              # %for.cond171
                                        #   Parent Loop BB89_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB89_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB89_26 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB89_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_26
.LBB89_29:                              # %for.end248
                                        #   in Loop: Header=BB89_24 Depth=1
	jmp	.LBB89_30
.LBB89_30:                              # %for.inc249
                                        #   in Loop: Header=BB89_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_24
.LBB89_31:                              # %for.end251
	jmp	.LBB89_44
.LBB89_32:                              # %if.else252
	cmpl	$2, -52(%rbp)
	jne	.LBB89_42
# %bb.33:                               # %if.then254
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB89_34:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_36 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB89_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB89_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB89_36:                              # %for.cond258
                                        #   Parent Loop BB89_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB89_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB89_36 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	2(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, 2(%rdx)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-40(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	2(%rsi,%rdx,4), %dx
	movq	-40(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, 2(%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-48(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	8(%rsi), %rsi
	movslq	-24(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	addq	$64, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	2(%rcx,%rdx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB89_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_36
.LBB89_39:                              # %for.end407
                                        #   in Loop: Header=BB89_34 Depth=1
	jmp	.LBB89_40
.LBB89_40:                              # %for.inc408
                                        #   in Loop: Header=BB89_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_34
.LBB89_41:                              # %for.end410
	jmp	.LBB89_43
.LBB89_42:                              # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB89_43:                              # %if.end412
	jmp	.LBB89_44
.LBB89_44:                              # %if.end413
	jmp	.LBB89_45
.LBB89_45:                              # %if.end414
	jmp	.LBB89_46
.LBB89_46:                              # %if.end415
	cmpl	$1561903294, -68(%rbp)  # imm = 0x5D18C0BE
	jne	.LBB89_48
.LBB89_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_47
.Lfunc_end89:
	.size	RestoreMVBlock8x8.60, .Lfunc_end89-RestoreMVBlock8x8.60
	.cfi_endproc
                                        # -- End function
	.globl	CheckReliabilityOfRef.61 # -- Begin function CheckReliabilityOfRef.61
	.p2align	4, 0x90
	.type	CheckReliabilityOfRef.61,@function
CheckReliabilityOfRef.61:               # @CheckReliabilityOfRef.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$114451677, -108(%rbp)  # imm = 0x6D264DD
	movl	%edi, -80(%rbp)
	movl	%esi, -96(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -52(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB90_2
# %bb.1:                                # %cond.true
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	jmp	.LBB90_6
.LBB90_2:                               # %cond.false
	cmpl	$2, -52(%rbp)
	jne	.LBB90_4
# %bb.3:                                # %cond.true3
	movl	-80(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB90_5
.LBB90_4:                               # %cond.false5
	xorl	%eax, %eax
	jmp	.LBB90_5
.LBB90_5:                               # %cond.end
.LBB90_6:                               # %cond.end6
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB90_8
# %bb.7:                                # %lor.rhs
	cmpl	$2, -52(%rbp)
	sete	%cl
.LBB90_8:                               # %lor.end
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -104(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB90_10
# %bb.9:                                # %cond.true13
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	jmp	.LBB90_14
.LBB90_10:                              # %cond.false15
	cmpl	$3, -52(%rbp)
	jne	.LBB90_12
# %bb.11:                               # %cond.true17
	movl	-80(%rbp), %edx
	shll	$1, %edx
	jmp	.LBB90_13
.LBB90_12:                              # %cond.false19
	xorl	%edx, %edx
	jmp	.LBB90_13
.LBB90_13:                              # %cond.end20
.LBB90_14:                              # %cond.end22
	movl	%edx, -88(%rbp)
	movl	-88(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB90_16
# %bb.15:                               # %lor.rhs25
	cmpl	$3, -52(%rbp)
	sete	%cl
.LBB90_16:                              # %lor.end27
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -100(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB90_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_19 Depth 2
                                        #       Child Loop BB90_23 Depth 3
                                        #         Child Loop BB90_25 Depth 4
                                        #       Child Loop BB90_53 Depth 3
                                        #         Child Loop BB90_55 Depth 4
                                        #           Child Loop BB90_66 Depth 5
                                        #       Child Loop BB90_87 Depth 3
                                        #         Child Loop BB90_89 Depth 4
                                        #           Child Loop BB90_100 Depth 5
                                        #       Child Loop BB90_121 Depth 3
                                        #         Child Loop BB90_123 Depth 4
                                        #           Child Loop BB90_125 Depth 5
                                        #             Child Loop BB90_136 Depth 6
                                        #       Child Loop BB90_159 Depth 3
                                        #         Child Loop BB90_161 Depth 4
                                        #           Child Loop BB90_163 Depth 5
                                        #             Child Loop BB90_174 Depth 6
                                        #       Child Loop BB90_196 Depth 3
                                        #         Child Loop BB90_198 Depth 4
                                        #           Child Loop BB90_212 Depth 5
                                        #           Child Loop BB90_239 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB90_266
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB90_17 Depth=1
	movl	-88(%rbp), %eax
	movl	%eax, -64(%rbp)
.LBB90_19:                              # %for.cond31
                                        #   Parent Loop BB90_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB90_23 Depth 3
                                        #         Child Loop BB90_25 Depth 4
                                        #       Child Loop BB90_53 Depth 3
                                        #         Child Loop BB90_55 Depth 4
                                        #           Child Loop BB90_66 Depth 5
                                        #       Child Loop BB90_87 Depth 3
                                        #         Child Loop BB90_89 Depth 4
                                        #           Child Loop BB90_100 Depth 5
                                        #       Child Loop BB90_121 Depth 3
                                        #         Child Loop BB90_123 Depth 4
                                        #           Child Loop BB90_125 Depth 5
                                        #             Child Loop BB90_136 Depth 6
                                        #       Child Loop BB90_159 Depth 3
                                        #         Child Loop BB90_161 Depth 4
                                        #           Child Loop BB90_163 Depth 5
                                        #             Child Loop BB90_174 Depth 6
                                        #       Child Loop BB90_196 Depth 3
                                        #         Child Loop BB90_198 Depth 4
                                        #           Child Loop BB90_212 Depth 5
                                        #           Child Loop BB90_239 Depth 5
	movl	-64(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB90_264
# %bb.20:                               # %for.body33
                                        #   in Loop: Header=BB90_19 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-68(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-64(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -76(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -72(%rbp)
	movl	-28(%rbp), %eax
	subl	-76(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	cmpl	$0, -76(%rbp)
	jne	.LBB90_51
# %bb.21:                               # %land.lhs.true
                                        #   in Loop: Header=BB90_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB90_51
# %bb.22:                               # %if.then
                                        #   in Loop: Header=BB90_19 Depth=2
	movl	$0, -16(%rbp)
.LBB90_23:                              # %for.cond75
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB90_25 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB90_50
# %bb.24:                               # %for.body78
                                        #   in Loop: Header=BB90_23 Depth=3
	movl	$0, -12(%rbp)
.LBB90_25:                              # %for.cond79
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        #       Parent Loop BB90_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB90_48
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB90_25 Depth=4
	movq	pixel_map, %rax
	movl	-36(%rbp), %ecx
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB90_28
# %bb.27:                               # %cond.true86
                                        #   in Loop: Header=BB90_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB90_29
.LBB90_28:                              # %cond.false87
                                        #   in Loop: Header=BB90_25 Depth=4
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB90_29:                              # %cond.end89
                                        #   in Loop: Header=BB90_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB90_31
# %bb.30:                               # %cond.true93
                                        #   in Loop: Header=BB90_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB90_35
.LBB90_31:                              # %cond.false94
                                        #   in Loop: Header=BB90_25 Depth=4
	movl	-36(%rbp), %ecx
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB90_33
# %bb.32:                               # %cond.true98
                                        #   in Loop: Header=BB90_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB90_34
.LBB90_33:                              # %cond.false99
                                        #   in Loop: Header=BB90_25 Depth=4
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB90_34:                              # %cond.end101
                                        #   in Loop: Header=BB90_25 Depth=4
.LBB90_35:                              # %cond.end103
                                        #   in Loop: Header=BB90_25 Depth=4
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-40(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB90_37
# %bb.36:                               # %cond.true110
                                        #   in Loop: Header=BB90_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB90_38
.LBB90_37:                              # %cond.false111
                                        #   in Loop: Header=BB90_25 Depth=4
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB90_38:                              # %cond.end113
                                        #   in Loop: Header=BB90_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB90_40
# %bb.39:                               # %cond.true117
                                        #   in Loop: Header=BB90_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB90_44
.LBB90_40:                              # %cond.false118
                                        #   in Loop: Header=BB90_25 Depth=4
	movl	-40(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB90_42
# %bb.41:                               # %cond.true122
                                        #   in Loop: Header=BB90_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB90_43
.LBB90_42:                              # %cond.false123
                                        #   in Loop: Header=BB90_25 Depth=4
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB90_43:                              # %cond.end125
                                        #   in Loop: Header=BB90_25 Depth=4
.LBB90_44:                              # %cond.end127
                                        #   in Loop: Header=BB90_25 Depth=4
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB90_46
# %bb.45:                               # %if.then134
	movl	$0, -56(%rbp)
	jmp	.LBB90_267
.LBB90_46:                              # %if.end
                                        #   in Loop: Header=BB90_25 Depth=4
	jmp	.LBB90_47
.LBB90_47:                              # %for.inc
                                        #   in Loop: Header=BB90_25 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_25
.LBB90_48:                              # %for.end
                                        #   in Loop: Header=BB90_23 Depth=3
	jmp	.LBB90_49
.LBB90_49:                              # %for.inc135
                                        #   in Loop: Header=BB90_23 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_23
.LBB90_50:                              # %for.end137
                                        #   in Loop: Header=BB90_19 Depth=2
	jmp	.LBB90_262
.LBB90_51:                              # %if.else
                                        #   in Loop: Header=BB90_19 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB90_85
# %bb.52:                               # %if.then140
                                        #   in Loop: Header=BB90_19 Depth=2
	movl	$0, -16(%rbp)
.LBB90_53:                              # %for.cond141
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB90_55 Depth 4
                                        #           Child Loop BB90_66 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB90_84
# %bb.54:                               # %for.body144
                                        #   in Loop: Header=BB90_53 Depth=3
	movl	$0, -12(%rbp)
.LBB90_55:                              # %for.cond145
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        #       Parent Loop BB90_53 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB90_66 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB90_82
# %bb.56:                               # %for.body148
                                        #   in Loop: Header=BB90_55 Depth=4
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_58
# %bb.57:                               # %cond.true152
                                        #   in Loop: Header=BB90_55 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB90_59
.LBB90_58:                              # %cond.false153
                                        #   in Loop: Header=BB90_55 Depth=4
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB90_59:                              # %cond.end155
                                        #   in Loop: Header=BB90_55 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_61
# %bb.60:                               # %cond.true159
                                        #   in Loop: Header=BB90_55 Depth=4
	xorl	%eax, %eax
	jmp	.LBB90_65
.LBB90_61:                              # %cond.false160
                                        #   in Loop: Header=BB90_55 Depth=4
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_63
# %bb.62:                               # %cond.true164
                                        #   in Loop: Header=BB90_55 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB90_64
.LBB90_63:                              # %cond.false165
                                        #   in Loop: Header=BB90_55 Depth=4
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB90_64:                              # %cond.end167
                                        #   in Loop: Header=BB90_55 Depth=4
.LBB90_65:                              # %cond.end169
                                        #   in Loop: Header=BB90_55 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -20(%rbp)
.LBB90_66:                              # %for.cond171
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        #       Parent Loop BB90_53 Depth=3
                                        #         Parent Loop BB90_55 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB90_80
# %bb.67:                               # %for.body174
                                        #   in Loop: Header=BB90_66 Depth=5
	movl	-40(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_69
# %bb.68:                               # %cond.true179
                                        #   in Loop: Header=BB90_66 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB90_70
.LBB90_69:                              # %cond.false180
                                        #   in Loop: Header=BB90_66 Depth=5
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB90_70:                              # %cond.end183
                                        #   in Loop: Header=BB90_66 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_72
# %bb.71:                               # %cond.true187
                                        #   in Loop: Header=BB90_66 Depth=5
	xorl	%eax, %eax
	jmp	.LBB90_76
.LBB90_72:                              # %cond.false188
                                        #   in Loop: Header=BB90_66 Depth=5
	movl	-40(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_74
# %bb.73:                               # %cond.true193
                                        #   in Loop: Header=BB90_66 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB90_75
.LBB90_74:                              # %cond.false194
                                        #   in Loop: Header=BB90_66 Depth=5
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB90_75:                              # %cond.end197
                                        #   in Loop: Header=BB90_66 Depth=5
.LBB90_76:                              # %cond.end199
                                        #   in Loop: Header=BB90_66 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB90_78
# %bb.77:                               # %if.then208
	movl	$0, -56(%rbp)
	jmp	.LBB90_267
.LBB90_78:                              # %if.end209
                                        #   in Loop: Header=BB90_66 Depth=5
	jmp	.LBB90_79
.LBB90_79:                              # %for.inc210
                                        #   in Loop: Header=BB90_66 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB90_66
.LBB90_80:                              # %for.end212
                                        #   in Loop: Header=BB90_55 Depth=4
	jmp	.LBB90_81
.LBB90_81:                              # %for.inc213
                                        #   in Loop: Header=BB90_55 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_55
.LBB90_82:                              # %for.end215
                                        #   in Loop: Header=BB90_53 Depth=3
	jmp	.LBB90_83
.LBB90_83:                              # %for.inc216
                                        #   in Loop: Header=BB90_53 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_53
.LBB90_84:                              # %for.end218
                                        #   in Loop: Header=BB90_19 Depth=2
	jmp	.LBB90_261
.LBB90_85:                              # %if.else219
                                        #   in Loop: Header=BB90_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB90_119
# %bb.86:                               # %if.then222
                                        #   in Loop: Header=BB90_19 Depth=2
	movl	$0, -16(%rbp)
.LBB90_87:                              # %for.cond223
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB90_89 Depth 4
                                        #           Child Loop BB90_100 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB90_118
# %bb.88:                               # %for.body226
                                        #   in Loop: Header=BB90_87 Depth=3
	movl	$0, -12(%rbp)
.LBB90_89:                              # %for.cond227
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        #       Parent Loop BB90_87 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB90_100 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB90_116
# %bb.90:                               # %for.body230
                                        #   in Loop: Header=BB90_89 Depth=4
	movl	-40(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_92
# %bb.91:                               # %cond.true234
                                        #   in Loop: Header=BB90_89 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB90_93
.LBB90_92:                              # %cond.false235
                                        #   in Loop: Header=BB90_89 Depth=4
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB90_93:                              # %cond.end237
                                        #   in Loop: Header=BB90_89 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_95
# %bb.94:                               # %cond.true241
                                        #   in Loop: Header=BB90_89 Depth=4
	xorl	%eax, %eax
	jmp	.LBB90_99
.LBB90_95:                              # %cond.false242
                                        #   in Loop: Header=BB90_89 Depth=4
	movl	-40(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_97
# %bb.96:                               # %cond.true246
                                        #   in Loop: Header=BB90_89 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB90_98
.LBB90_97:                              # %cond.false247
                                        #   in Loop: Header=BB90_89 Depth=4
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB90_98:                              # %cond.end249
                                        #   in Loop: Header=BB90_89 Depth=4
.LBB90_99:                              # %cond.end251
                                        #   in Loop: Header=BB90_89 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -32(%rbp)
.LBB90_100:                             # %for.cond253
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        #       Parent Loop BB90_87 Depth=3
                                        #         Parent Loop BB90_89 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -32(%rbp)
	jge	.LBB90_114
# %bb.101:                              # %for.body256
                                        #   in Loop: Header=BB90_100 Depth=5
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_103
# %bb.102:                              # %cond.true261
                                        #   in Loop: Header=BB90_100 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB90_104
.LBB90_103:                             # %cond.false262
                                        #   in Loop: Header=BB90_100 Depth=5
	movl	-28(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB90_104:                             # %cond.end265
                                        #   in Loop: Header=BB90_100 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_106
# %bb.105:                              # %cond.true269
                                        #   in Loop: Header=BB90_100 Depth=5
	xorl	%eax, %eax
	jmp	.LBB90_110
.LBB90_106:                             # %cond.false270
                                        #   in Loop: Header=BB90_100 Depth=5
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_108
# %bb.107:                              # %cond.true275
                                        #   in Loop: Header=BB90_100 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB90_109
.LBB90_108:                             # %cond.false276
                                        #   in Loop: Header=BB90_100 Depth=5
	movl	-28(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB90_109:                             # %cond.end279
                                        #   in Loop: Header=BB90_100 Depth=5
.LBB90_110:                             # %cond.end281
                                        #   in Loop: Header=BB90_100 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB90_112
# %bb.111:                              # %if.then290
	movl	$0, -56(%rbp)
	jmp	.LBB90_267
.LBB90_112:                             # %if.end291
                                        #   in Loop: Header=BB90_100 Depth=5
	jmp	.LBB90_113
.LBB90_113:                             # %for.inc292
                                        #   in Loop: Header=BB90_100 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB90_100
.LBB90_114:                             # %for.end294
                                        #   in Loop: Header=BB90_89 Depth=4
	jmp	.LBB90_115
.LBB90_115:                             # %for.inc295
                                        #   in Loop: Header=BB90_89 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_89
.LBB90_116:                             # %for.end297
                                        #   in Loop: Header=BB90_87 Depth=3
	jmp	.LBB90_117
.LBB90_117:                             # %for.inc298
                                        #   in Loop: Header=BB90_87 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_87
.LBB90_118:                             # %for.end300
                                        #   in Loop: Header=BB90_19 Depth=2
	jmp	.LBB90_260
.LBB90_119:                             # %if.else301
                                        #   in Loop: Header=BB90_19 Depth=2
	cmpl	$2, -72(%rbp)
	jne	.LBB90_157
# %bb.120:                              # %if.then304
                                        #   in Loop: Header=BB90_19 Depth=2
	movl	$0, -16(%rbp)
.LBB90_121:                             # %for.cond305
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB90_123 Depth 4
                                        #           Child Loop BB90_125 Depth 5
                                        #             Child Loop BB90_136 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB90_156
# %bb.122:                              # %for.body308
                                        #   in Loop: Header=BB90_121 Depth=3
	movl	$0, -12(%rbp)
.LBB90_123:                             # %for.cond309
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        #       Parent Loop BB90_121 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB90_125 Depth 5
                                        #             Child Loop BB90_136 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB90_154
# %bb.124:                              # %for.body312
                                        #   in Loop: Header=BB90_123 Depth=4
	movl	$-2, -32(%rbp)
.LBB90_125:                             # %for.cond313
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        #       Parent Loop BB90_121 Depth=3
                                        #         Parent Loop BB90_123 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB90_136 Depth 6
	cmpl	$4, -32(%rbp)
	jge	.LBB90_152
# %bb.126:                              # %for.body316
                                        #   in Loop: Header=BB90_125 Depth=5
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_128
# %bb.127:                              # %cond.true321
                                        #   in Loop: Header=BB90_125 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB90_129
.LBB90_128:                             # %cond.false322
                                        #   in Loop: Header=BB90_125 Depth=5
	movl	-28(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB90_129:                             # %cond.end325
                                        #   in Loop: Header=BB90_125 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_131
# %bb.130:                              # %cond.true329
                                        #   in Loop: Header=BB90_125 Depth=5
	xorl	%eax, %eax
	jmp	.LBB90_135
.LBB90_131:                             # %cond.false330
                                        #   in Loop: Header=BB90_125 Depth=5
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_133
# %bb.132:                              # %cond.true335
                                        #   in Loop: Header=BB90_125 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB90_134
.LBB90_133:                             # %cond.false336
                                        #   in Loop: Header=BB90_125 Depth=5
	movl	-28(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB90_134:                             # %cond.end339
                                        #   in Loop: Header=BB90_125 Depth=5
.LBB90_135:                             # %cond.end341
                                        #   in Loop: Header=BB90_125 Depth=5
	movl	%eax, -48(%rbp)
	movl	$-2, -20(%rbp)
.LBB90_136:                             # %for.cond343
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        #       Parent Loop BB90_121 Depth=3
                                        #         Parent Loop BB90_123 Depth=4
                                        #           Parent Loop BB90_125 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -20(%rbp)
	jge	.LBB90_150
# %bb.137:                              # %for.body346
                                        #   in Loop: Header=BB90_136 Depth=6
	movl	-40(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_139
# %bb.138:                              # %cond.true351
                                        #   in Loop: Header=BB90_136 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB90_140
.LBB90_139:                             # %cond.false352
                                        #   in Loop: Header=BB90_136 Depth=6
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB90_140:                             # %cond.end355
                                        #   in Loop: Header=BB90_136 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_142
# %bb.141:                              # %cond.true359
                                        #   in Loop: Header=BB90_136 Depth=6
	xorl	%eax, %eax
	jmp	.LBB90_146
.LBB90_142:                             # %cond.false360
                                        #   in Loop: Header=BB90_136 Depth=6
	movl	-40(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_144
# %bb.143:                              # %cond.true365
                                        #   in Loop: Header=BB90_136 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB90_145
.LBB90_144:                             # %cond.false366
                                        #   in Loop: Header=BB90_136 Depth=6
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB90_145:                             # %cond.end369
                                        #   in Loop: Header=BB90_136 Depth=6
.LBB90_146:                             # %cond.end371
                                        #   in Loop: Header=BB90_136 Depth=6
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB90_148
# %bb.147:                              # %if.then380
	movl	$0, -56(%rbp)
	jmp	.LBB90_267
.LBB90_148:                             # %if.end381
                                        #   in Loop: Header=BB90_136 Depth=6
	jmp	.LBB90_149
.LBB90_149:                             # %for.inc382
                                        #   in Loop: Header=BB90_136 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB90_136
.LBB90_150:                             # %for.end384
                                        #   in Loop: Header=BB90_125 Depth=5
	jmp	.LBB90_151
.LBB90_151:                             # %for.inc385
                                        #   in Loop: Header=BB90_125 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB90_125
.LBB90_152:                             # %for.end387
                                        #   in Loop: Header=BB90_123 Depth=4
	jmp	.LBB90_153
.LBB90_153:                             # %for.inc388
                                        #   in Loop: Header=BB90_123 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_123
.LBB90_154:                             # %for.end390
                                        #   in Loop: Header=BB90_121 Depth=3
	jmp	.LBB90_155
.LBB90_155:                             # %for.inc391
                                        #   in Loop: Header=BB90_121 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_121
.LBB90_156:                             # %for.end393
                                        #   in Loop: Header=BB90_19 Depth=2
	jmp	.LBB90_259
.LBB90_157:                             # %if.else394
                                        #   in Loop: Header=BB90_19 Depth=2
	cmpl	$2, -76(%rbp)
	jne	.LBB90_195
# %bb.158:                              # %if.then397
                                        #   in Loop: Header=BB90_19 Depth=2
	movl	$0, -16(%rbp)
.LBB90_159:                             # %for.cond398
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB90_161 Depth 4
                                        #           Child Loop BB90_163 Depth 5
                                        #             Child Loop BB90_174 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB90_194
# %bb.160:                              # %for.body401
                                        #   in Loop: Header=BB90_159 Depth=3
	movl	$0, -12(%rbp)
.LBB90_161:                             # %for.cond402
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        #       Parent Loop BB90_159 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB90_163 Depth 5
                                        #             Child Loop BB90_174 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB90_192
# %bb.162:                              # %for.body405
                                        #   in Loop: Header=BB90_161 Depth=4
	movl	$-2, -20(%rbp)
.LBB90_163:                             # %for.cond406
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        #       Parent Loop BB90_159 Depth=3
                                        #         Parent Loop BB90_161 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB90_174 Depth 6
	cmpl	$4, -20(%rbp)
	jge	.LBB90_190
# %bb.164:                              # %for.body409
                                        #   in Loop: Header=BB90_163 Depth=5
	movl	-40(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_166
# %bb.165:                              # %cond.true414
                                        #   in Loop: Header=BB90_163 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB90_167
.LBB90_166:                             # %cond.false415
                                        #   in Loop: Header=BB90_163 Depth=5
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB90_167:                             # %cond.end418
                                        #   in Loop: Header=BB90_163 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_169
# %bb.168:                              # %cond.true422
                                        #   in Loop: Header=BB90_163 Depth=5
	xorl	%eax, %eax
	jmp	.LBB90_173
.LBB90_169:                             # %cond.false423
                                        #   in Loop: Header=BB90_163 Depth=5
	movl	-40(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_171
# %bb.170:                              # %cond.true428
                                        #   in Loop: Header=BB90_163 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB90_172
.LBB90_171:                             # %cond.false429
                                        #   in Loop: Header=BB90_163 Depth=5
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB90_172:                             # %cond.end432
                                        #   in Loop: Header=BB90_163 Depth=5
.LBB90_173:                             # %cond.end434
                                        #   in Loop: Header=BB90_163 Depth=5
	movl	%eax, -44(%rbp)
	movl	$-2, -32(%rbp)
.LBB90_174:                             # %for.cond436
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        #       Parent Loop BB90_159 Depth=3
                                        #         Parent Loop BB90_161 Depth=4
                                        #           Parent Loop BB90_163 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -32(%rbp)
	jge	.LBB90_188
# %bb.175:                              # %for.body439
                                        #   in Loop: Header=BB90_174 Depth=6
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_177
# %bb.176:                              # %cond.true444
                                        #   in Loop: Header=BB90_174 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB90_178
.LBB90_177:                             # %cond.false445
                                        #   in Loop: Header=BB90_174 Depth=6
	movl	-28(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB90_178:                             # %cond.end448
                                        #   in Loop: Header=BB90_174 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_180
# %bb.179:                              # %cond.true452
                                        #   in Loop: Header=BB90_174 Depth=6
	xorl	%eax, %eax
	jmp	.LBB90_184
.LBB90_180:                             # %cond.false453
                                        #   in Loop: Header=BB90_174 Depth=6
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_182
# %bb.181:                              # %cond.true458
                                        #   in Loop: Header=BB90_174 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB90_183
.LBB90_182:                             # %cond.false459
                                        #   in Loop: Header=BB90_174 Depth=6
	movl	-28(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB90_183:                             # %cond.end462
                                        #   in Loop: Header=BB90_174 Depth=6
.LBB90_184:                             # %cond.end464
                                        #   in Loop: Header=BB90_174 Depth=6
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB90_186
# %bb.185:                              # %if.then473
	movl	$0, -56(%rbp)
	jmp	.LBB90_267
.LBB90_186:                             # %if.end474
                                        #   in Loop: Header=BB90_174 Depth=6
	jmp	.LBB90_187
.LBB90_187:                             # %for.inc475
                                        #   in Loop: Header=BB90_174 Depth=6
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB90_174
.LBB90_188:                             # %for.end477
                                        #   in Loop: Header=BB90_163 Depth=5
	jmp	.LBB90_189
.LBB90_189:                             # %for.inc478
                                        #   in Loop: Header=BB90_163 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB90_163
.LBB90_190:                             # %for.end480
                                        #   in Loop: Header=BB90_161 Depth=4
	jmp	.LBB90_191
.LBB90_191:                             # %for.inc481
                                        #   in Loop: Header=BB90_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_161
.LBB90_192:                             # %for.end483
                                        #   in Loop: Header=BB90_159 Depth=3
	jmp	.LBB90_193
.LBB90_193:                             # %for.inc484
                                        #   in Loop: Header=BB90_159 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_159
.LBB90_194:                             # %for.end486
                                        #   in Loop: Header=BB90_19 Depth=2
	jmp	.LBB90_258
.LBB90_195:                             # %if.else487
                                        #   in Loop: Header=BB90_19 Depth=2
	movl	$0, -16(%rbp)
.LBB90_196:                             # %for.cond488
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB90_198 Depth 4
                                        #           Child Loop BB90_212 Depth 5
                                        #           Child Loop BB90_239 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB90_257
# %bb.197:                              # %for.body491
                                        #   in Loop: Header=BB90_196 Depth=3
	movl	$0, -12(%rbp)
.LBB90_198:                             # %for.cond492
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        #       Parent Loop BB90_196 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB90_212 Depth 5
                                        #           Child Loop BB90_239 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB90_255
# %bb.199:                              # %for.body495
                                        #   in Loop: Header=BB90_198 Depth=4
	cmpl	$1, -76(%rbp)
	jne	.LBB90_201
# %bb.200:                              # %cond.true498
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	jmp	.LBB90_202
.LBB90_201:                             # %cond.false500
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
.LBB90_202:                             # %cond.end503
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB90_204
# %bb.203:                              # %cond.true507
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB90_205
.LBB90_204:                             # %cond.false508
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	-48(%rbp), %eax
.LBB90_205:                             # %cond.end509
                                        #   in Loop: Header=BB90_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_207
# %bb.206:                              # %cond.true513
                                        #   in Loop: Header=BB90_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB90_211
.LBB90_207:                             # %cond.false514
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB90_209
# %bb.208:                              # %cond.true517
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB90_210
.LBB90_209:                             # %cond.false518
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	-48(%rbp), %eax
.LBB90_210:                             # %cond.end519
                                        #   in Loop: Header=BB90_198 Depth=4
.LBB90_211:                             # %cond.end521
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -20(%rbp)
.LBB90_212:                             # %for.cond523
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        #       Parent Loop BB90_196 Depth=3
                                        #         Parent Loop BB90_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB90_226
# %bb.213:                              # %for.body526
                                        #   in Loop: Header=BB90_212 Depth=5
	movl	-40(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_215
# %bb.214:                              # %cond.true531
                                        #   in Loop: Header=BB90_212 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB90_216
.LBB90_215:                             # %cond.false532
                                        #   in Loop: Header=BB90_212 Depth=5
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB90_216:                             # %cond.end535
                                        #   in Loop: Header=BB90_212 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_218
# %bb.217:                              # %cond.true539
                                        #   in Loop: Header=BB90_212 Depth=5
	xorl	%eax, %eax
	jmp	.LBB90_222
.LBB90_218:                             # %cond.false540
                                        #   in Loop: Header=BB90_212 Depth=5
	movl	-40(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_220
# %bb.219:                              # %cond.true545
                                        #   in Loop: Header=BB90_212 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB90_221
.LBB90_220:                             # %cond.false546
                                        #   in Loop: Header=BB90_212 Depth=5
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB90_221:                             # %cond.end549
                                        #   in Loop: Header=BB90_212 Depth=5
.LBB90_222:                             # %cond.end551
                                        #   in Loop: Header=BB90_212 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB90_224
# %bb.223:                              # %if.then560
	movl	$0, -56(%rbp)
	jmp	.LBB90_267
.LBB90_224:                             # %if.end561
                                        #   in Loop: Header=BB90_212 Depth=5
	jmp	.LBB90_225
.LBB90_225:                             # %for.inc562
                                        #   in Loop: Header=BB90_212 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB90_212
.LBB90_226:                             # %for.end564
                                        #   in Loop: Header=BB90_198 Depth=4
	cmpl	$1, -72(%rbp)
	jne	.LBB90_228
# %bb.227:                              # %cond.true567
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	jmp	.LBB90_229
.LBB90_228:                             # %cond.false569
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$1, %eax
.LBB90_229:                             # %cond.end572
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB90_231
# %bb.230:                              # %cond.true576
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB90_232
.LBB90_231:                             # %cond.false577
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	-44(%rbp), %eax
.LBB90_232:                             # %cond.end578
                                        #   in Loop: Header=BB90_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_234
# %bb.233:                              # %cond.true582
                                        #   in Loop: Header=BB90_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB90_238
.LBB90_234:                             # %cond.false583
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	-40(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB90_236
# %bb.235:                              # %cond.true586
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB90_237
.LBB90_236:                             # %cond.false587
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	-44(%rbp), %eax
.LBB90_237:                             # %cond.end588
                                        #   in Loop: Header=BB90_198 Depth=4
.LBB90_238:                             # %cond.end590
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -32(%rbp)
.LBB90_239:                             # %for.cond592
                                        #   Parent Loop BB90_17 Depth=1
                                        #     Parent Loop BB90_19 Depth=2
                                        #       Parent Loop BB90_196 Depth=3
                                        #         Parent Loop BB90_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -32(%rbp)
	jge	.LBB90_253
# %bb.240:                              # %for.body595
                                        #   in Loop: Header=BB90_239 Depth=5
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_242
# %bb.241:                              # %cond.true600
                                        #   in Loop: Header=BB90_239 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB90_243
.LBB90_242:                             # %cond.false601
                                        #   in Loop: Header=BB90_239 Depth=5
	movl	-28(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB90_243:                             # %cond.end604
                                        #   in Loop: Header=BB90_239 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_245
# %bb.244:                              # %cond.true608
                                        #   in Loop: Header=BB90_239 Depth=5
	xorl	%eax, %eax
	jmp	.LBB90_249
.LBB90_245:                             # %cond.false609
                                        #   in Loop: Header=BB90_239 Depth=5
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_247
# %bb.246:                              # %cond.true614
                                        #   in Loop: Header=BB90_239 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB90_248
.LBB90_247:                             # %cond.false615
                                        #   in Loop: Header=BB90_239 Depth=5
	movl	-28(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB90_248:                             # %cond.end618
                                        #   in Loop: Header=BB90_239 Depth=5
.LBB90_249:                             # %cond.end620
                                        #   in Loop: Header=BB90_239 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB90_251
# %bb.250:                              # %if.then629
	movl	$0, -56(%rbp)
	jmp	.LBB90_267
.LBB90_251:                             # %if.end630
                                        #   in Loop: Header=BB90_239 Depth=5
	jmp	.LBB90_252
.LBB90_252:                             # %for.inc631
                                        #   in Loop: Header=BB90_239 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB90_239
.LBB90_253:                             # %for.end633
                                        #   in Loop: Header=BB90_198 Depth=4
	jmp	.LBB90_254
.LBB90_254:                             # %for.inc634
                                        #   in Loop: Header=BB90_198 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_198
.LBB90_255:                             # %for.end636
                                        #   in Loop: Header=BB90_196 Depth=3
	jmp	.LBB90_256
.LBB90_256:                             # %for.inc637
                                        #   in Loop: Header=BB90_196 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_196
.LBB90_257:                             # %for.end639
                                        #   in Loop: Header=BB90_19 Depth=2
	jmp	.LBB90_258
.LBB90_258:                             # %if.end640
                                        #   in Loop: Header=BB90_19 Depth=2
	jmp	.LBB90_259
.LBB90_259:                             # %if.end641
                                        #   in Loop: Header=BB90_19 Depth=2
	jmp	.LBB90_260
.LBB90_260:                             # %if.end642
                                        #   in Loop: Header=BB90_19 Depth=2
	jmp	.LBB90_261
.LBB90_261:                             # %if.end643
                                        #   in Loop: Header=BB90_19 Depth=2
	jmp	.LBB90_262
.LBB90_262:                             # %if.end644
                                        #   in Loop: Header=BB90_19 Depth=2
	jmp	.LBB90_263
.LBB90_263:                             # %for.inc645
                                        #   in Loop: Header=BB90_19 Depth=2
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB90_19
.LBB90_264:                             # %for.end647
                                        #   in Loop: Header=BB90_17 Depth=1
	jmp	.LBB90_265
.LBB90_265:                             # %for.inc648
                                        #   in Loop: Header=BB90_17 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB90_17
.LBB90_266:                             # %for.end650
	movl	$1, -56(%rbp)
.LBB90_267:                             # %return
	movl	-56(%rbp), %ebx
	cmpl	$114451677, -108(%rbp)  # imm = 0x6D264DD
	jne	.LBB90_269
.LBB90_268:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_269:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_268
.Lfunc_end90:
	.size	CheckReliabilityOfRef.61, .Lfunc_end90-CheckReliabilityOfRef.61
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMVBlock8x8.62    # -- Begin function RestoreMVBlock8x8.62
	.p2align	4, 0x90
	.type	RestoreMVBlock8x8.62,@function
RestoreMVBlock8x8.62:                   # @RestoreMVBlock8x8.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$939960561, -68(%rbp)   # imm = 0x3806A8F1
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -52(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -32(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB91_12
# %bb.1:                                # %if.then
	cmpl	$0, -52(%rbp)
	jl	.LBB91_11
# %bb.2:                                # %if.then5
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB91_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_5 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB91_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB91_3 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB91_5:                               # %for.cond7
                                        #   Parent Loop BB91_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB91_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB91_5 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB91_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_5
.LBB91_8:                               # %for.end
                                        #   in Loop: Header=BB91_3 Depth=1
	jmp	.LBB91_9
.LBB91_9:                               # %for.inc76
                                        #   in Loop: Header=BB91_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_3
.LBB91_10:                              # %for.end78
	jmp	.LBB91_11
.LBB91_11:                              # %if.end
	jmp	.LBB91_46
.LBB91_12:                              # %if.else
	cmpl	$0, -52(%rbp)
	jne	.LBB91_22
# %bb.13:                               # %if.then80
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB91_14:                              # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_16 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB91_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB91_14 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB91_16:                              # %for.cond84
                                        #   Parent Loop BB91_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB91_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB91_16 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB91_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_16
.LBB91_19:                              # %for.end161
                                        #   in Loop: Header=BB91_14 Depth=1
	jmp	.LBB91_20
.LBB91_20:                              # %for.inc162
                                        #   in Loop: Header=BB91_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_14
.LBB91_21:                              # %for.end164
	jmp	.LBB91_45
.LBB91_22:                              # %if.else165
	cmpl	$1, -52(%rbp)
	jne	.LBB91_32
# %bb.23:                               # %if.then167
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB91_24:                              # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_26 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB91_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB91_24 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB91_26:                              # %for.cond171
                                        #   Parent Loop BB91_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB91_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB91_26 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB91_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_26
.LBB91_29:                              # %for.end248
                                        #   in Loop: Header=BB91_24 Depth=1
	jmp	.LBB91_30
.LBB91_30:                              # %for.inc249
                                        #   in Loop: Header=BB91_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_24
.LBB91_31:                              # %for.end251
	jmp	.LBB91_44
.LBB91_32:                              # %if.else252
	cmpl	$2, -52(%rbp)
	jne	.LBB91_42
# %bb.33:                               # %if.then254
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB91_34:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_36 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB91_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB91_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB91_36:                              # %for.cond258
                                        #   Parent Loop BB91_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB91_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB91_36 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	2(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, 2(%rdx)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-48(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	2(%rsi,%rdx,4), %dx
	movq	-48(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, 2(%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-40(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	8(%rsi), %rsi
	movslq	-24(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	addq	$64, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	2(%rcx,%rdx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB91_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_36
.LBB91_39:                              # %for.end407
                                        #   in Loop: Header=BB91_34 Depth=1
	jmp	.LBB91_40
.LBB91_40:                              # %for.inc408
                                        #   in Loop: Header=BB91_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_34
.LBB91_41:                              # %for.end410
	jmp	.LBB91_43
.LBB91_42:                              # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB91_43:                              # %if.end412
	jmp	.LBB91_44
.LBB91_44:                              # %if.end413
	jmp	.LBB91_45
.LBB91_45:                              # %if.end414
	jmp	.LBB91_46
.LBB91_46:                              # %if.end415
	cmpl	$939960561, -68(%rbp)   # imm = 0x3806A8F1
	jne	.LBB91_48
.LBB91_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_47
.Lfunc_end91:
	.size	RestoreMVBlock8x8.62, .Lfunc_end91-RestoreMVBlock8x8.62
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_macroblocks.63
.LCPI92_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	RDCost_for_macroblocks.63
	.p2align	4, 0x90
	.type	RDCost_for_macroblocks.63,@function
RDCost_for_macroblocks.63:              # @RDCost_for_macroblocks.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$2073154735, -96(%rbp)  # imm = 0x7B91D4AF
	vmovsd	%xmm0, -88(%rbp)
	movl	%edi, -20(%rbp)
	movq	%rsi, -112(%rbp)
	movl	%edx, -64(%rbp)
	movl	$0, -36(%rbp)
	movq	$0, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB92_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB92_3
.LBB92_2:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB92_3
.LBB92_3:                               # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -120(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -72(%rbp)
	movq	img, %rcx
	cmpl	$2, 24(%rcx)
	je	.LBB92_5
# %bb.4:                                # %land.rhs
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	setne	%al
.LBB92_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -92(%rbp)
	movl	$0, -40(%rbp)
	movl	-20(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$0, -72(%rbp)
	je	.LBB92_18
# %bb.6:                                # %land.lhs.true
	cmpl	$0, -20(%rbp)
	jne	.LBB92_18
# %bb.7:                                # %if.then
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -100(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -16(%rbp)
.LBB92_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_10 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB92_17
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB92_8 Depth=1
	movl	$0, -12(%rbp)
.LBB92_10:                              # %for.cond17
                                        #   Parent Loop BB92_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB92_15
# %bb.11:                               # %for.body20
                                        #   in Loop: Header=BB92_10 Depth=2
	movq	direct_pdir, %rax
	movl	-100(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-104(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB92_13
# %bb.12:                               # %if.then29
	movl	$0, -60(%rbp)
	jmp	.LBB92_177
.LBB92_13:                              # %if.end
                                        #   in Loop: Header=BB92_10 Depth=2
	jmp	.LBB92_14
.LBB92_14:                              # %for.inc
                                        #   in Loop: Header=BB92_10 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_10
.LBB92_15:                              # %for.end
                                        #   in Loop: Header=BB92_8 Depth=1
	jmp	.LBB92_16
.LBB92_16:                              # %for.inc30
                                        #   in Loop: Header=BB92_8 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_8
.LBB92_17:                              # %for.end32
	jmp	.LBB92_18
.LBB92_18:                              # %if.end33
	cmpl	$8, -20(%rbp)
	jge	.LBB92_24
# %bb.19:                               # %if.then36
	movb	$0, %al
	callq	LumaResidualCoding
	cmpl	$0, -20(%rbp)
	jne	.LBB92_23
# %bb.20:                               # %land.lhs.true39
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB92_23
# %bb.21:                               # %land.lhs.true42
	movq	-48(%rbp), %rax
	cmpl	$1, 572(%rax)
	jne	.LBB92_23
# %bb.22:                               # %if.then45
	movl	$0, -60(%rbp)
	jmp	.LBB92_177
.LBB92_23:                              # %if.end46
	jmp	.LBB92_76
.LBB92_24:                              # %if.else
	cmpl	$8, -20(%rbp)
	jne	.LBB92_26
# %bb.25:                               # %if.then49
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	jmp	.LBB92_75
.LBB92_26:                              # %if.else50
	cmpl	$9, -20(%rbp)
	jne	.LBB92_48
# %bb.27:                               # %if.then53
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-28(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB92_47
# %bb.28:                               # %if.then56
	movl	$0, -16(%rbp)
.LBB92_29:                              # %for.cond57
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_31 Depth 2
                                        #       Child Loop BB92_33 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB92_42
# %bb.30:                               # %for.body60
                                        #   in Loop: Header=BB92_29 Depth=1
	movl	$0, -12(%rbp)
.LBB92_31:                              # %for.cond61
                                        #   Parent Loop BB92_29 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB92_33 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB92_40
# %bb.32:                               # %for.body64
                                        #   in Loop: Header=BB92_31 Depth=2
	movl	$0, -24(%rbp)
.LBB92_33:                              # %for.cond65
                                        #   Parent Loop BB92_29 Depth=1
                                        #     Parent Loop BB92_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB92_38
# %bb.34:                               # %for.body68
                                        #   in Loop: Header=BB92_33 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB92_36
# %bb.35:                               # %if.then76
                                        #   in Loop: Header=BB92_33 Depth=3
	movl	$2, -40(%rbp)
.LBB92_36:                              # %if.end77
                                        #   in Loop: Header=BB92_33 Depth=3
	jmp	.LBB92_37
.LBB92_37:                              # %for.inc78
                                        #   in Loop: Header=BB92_33 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB92_33
.LBB92_38:                              # %for.end80
                                        #   in Loop: Header=BB92_31 Depth=2
	jmp	.LBB92_39
.LBB92_39:                              # %for.inc81
                                        #   in Loop: Header=BB92_31 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_31
.LBB92_40:                              # %for.end83
                                        #   in Loop: Header=BB92_29 Depth=1
	jmp	.LBB92_41
.LBB92_41:                              # %for.inc84
                                        #   in Loop: Header=BB92_29 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_29
.LBB92_42:                              # %for.end86
	movl	$0, -32(%rbp)
.LBB92_43:                              # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -32(%rbp)
	jge	.LBB92_46
# %bb.44:                               # %for.body90
                                        #   in Loop: Header=BB92_43 Depth=1
	movl	-32(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.45:                               # %for.inc92
                                        #   in Loop: Header=BB92_43 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB92_43
.LBB92_46:                              # %for.end94
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB92_47:                              # %if.end97
	jmp	.LBB92_74
.LBB92_48:                              # %if.else98
	cmpl	$10, -20(%rbp)
	jne	.LBB92_50
# %bb.49:                               # %if.then101
	movq	-48(%rbp), %rdi
	leaq	-64(%rbp), %rsi
	callq	Intra16x16_Mode_Decision
	jmp	.LBB92_73
.LBB92_50:                              # %if.else102
	cmpl	$13, -20(%rbp)
	jne	.LBB92_72
# %bb.51:                               # %if.then105
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-28(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB92_71
# %bb.52:                               # %if.then110
	movl	$0, -16(%rbp)
.LBB92_53:                              # %for.cond111
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_55 Depth 2
                                        #       Child Loop BB92_57 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB92_66
# %bb.54:                               # %for.body114
                                        #   in Loop: Header=BB92_53 Depth=1
	movl	$0, -12(%rbp)
.LBB92_55:                              # %for.cond115
                                        #   Parent Loop BB92_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB92_57 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB92_64
# %bb.56:                               # %for.body118
                                        #   in Loop: Header=BB92_55 Depth=2
	movl	$0, -24(%rbp)
.LBB92_57:                              # %for.cond119
                                        #   Parent Loop BB92_53 Depth=1
                                        #     Parent Loop BB92_55 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB92_62
# %bb.58:                               # %for.body122
                                        #   in Loop: Header=BB92_57 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB92_60
# %bb.59:                               # %if.then130
                                        #   in Loop: Header=BB92_57 Depth=3
	movl	$2, -40(%rbp)
.LBB92_60:                              # %if.end131
                                        #   in Loop: Header=BB92_57 Depth=3
	jmp	.LBB92_61
.LBB92_61:                              # %for.inc132
                                        #   in Loop: Header=BB92_57 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB92_57
.LBB92_62:                              # %for.end134
                                        #   in Loop: Header=BB92_55 Depth=2
	jmp	.LBB92_63
.LBB92_63:                              # %for.inc135
                                        #   in Loop: Header=BB92_55 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_55
.LBB92_64:                              # %for.end137
                                        #   in Loop: Header=BB92_53 Depth=1
	jmp	.LBB92_65
.LBB92_65:                              # %for.inc138
                                        #   in Loop: Header=BB92_53 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_53
.LBB92_66:                              # %for.end140
	movl	$0, -32(%rbp)
.LBB92_67:                              # %for.cond141
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -32(%rbp)
	jge	.LBB92_70
# %bb.68:                               # %for.body144
                                        #   in Loop: Header=BB92_67 Depth=1
	movl	-32(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.69:                               # %for.inc146
                                        #   in Loop: Header=BB92_67 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB92_67
.LBB92_70:                              # %for.end148
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB92_71:                              # %if.end152
	jmp	.LBB92_72
.LBB92_72:                              # %if.end153
	jmp	.LBB92_73
.LBB92_73:                              # %if.end154
	jmp	.LBB92_74
.LBB92_74:                              # %if.end155
	jmp	.LBB92_75
.LBB92_75:                              # %if.end156
	jmp	.LBB92_76
.LBB92_76:                              # %if.end157
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB92_82
# %bb.77:                               # %land.lhs.true160
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB92_82
# %bb.78:                               # %if.then164
	cmpl	$10, -20(%rbp)
	jne	.LBB92_80
# %bb.79:                               # %cond.true167
	movl	-64(%rbp), %edi
	jmp	.LBB92_81
.LBB92_80:                              # %cond.false168
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	jmp	.LBB92_81
.LBB92_81:                              # %cond.end169
	callq	compute_residue_mb
.LBB92_82:                              # %if.end171
	cmpl	$10, -20(%rbp)
	jne	.LBB92_92
# %bb.83:                               # %if.then174
	movl	$0, -16(%rbp)
.LBB92_84:                              # %for.cond175
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_86 Depth 2
	cmpl	$16, -16(%rbp)
	jge	.LBB92_91
# %bb.85:                               # %for.body178
                                        #   in Loop: Header=BB92_84 Depth=1
	movl	$0, -12(%rbp)
.LBB92_86:                              # %for.cond179
                                        #   Parent Loop BB92_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -12(%rbp)
	jge	.LBB92_89
# %bb.87:                               # %for.body182
                                        #   in Loop: Header=BB92_86 Depth=2
	movq	img, %rax
	addq	$4792, %rax             # imm = 0x12B8
	movslq	-64(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc194
                                        #   in Loop: Header=BB92_86 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_86
.LBB92_89:                              # %for.end196
                                        #   in Loop: Header=BB92_84 Depth=1
	jmp	.LBB92_90
.LBB92_90:                              # %for.inc197
                                        #   in Loop: Header=BB92_84 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_84
.LBB92_91:                              # %for.end199
	jmp	.LBB92_101
.LBB92_92:                              # %if.else200
	movl	$0, -16(%rbp)
.LBB92_93:                              # %for.cond201
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_95 Depth 2
	cmpl	$16, -16(%rbp)
	jge	.LBB92_100
# %bb.94:                               # %for.body204
                                        #   in Loop: Header=BB92_93 Depth=1
	movl	$0, -12(%rbp)
.LBB92_95:                              # %for.cond205
                                        #   Parent Loop BB92_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -12(%rbp)
	jge	.LBB92_98
# %bb.96:                               # %for.body208
                                        #   in Loop: Header=BB92_95 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.97:                               # %for.inc218
                                        #   in Loop: Header=BB92_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_95
.LBB92_98:                              # %for.end220
                                        #   in Loop: Header=BB92_93 Depth=1
	jmp	.LBB92_99
.LBB92_99:                              # %for.inc221
                                        #   in Loop: Header=BB92_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_93
.LBB92_100:                             # %for.end223
	jmp	.LBB92_101
.LBB92_101:                             # %if.end224
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB92_105
# %bb.102:                              # %land.lhs.true227
	cmpl	$9, -20(%rbp)
	je	.LBB92_107
# %bb.103:                              # %lor.lhs.false
	cmpl	$10, -20(%rbp)
	je	.LBB92_107
# %bb.104:                              # %lor.lhs.false232
	cmpl	$13, -20(%rbp)
	je	.LBB92_107
.LBB92_105:                             # %land.lhs.true235
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB92_107
# %bb.106:                              # %if.then238
	leaq	-28(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB92_107:                             # %if.end239
	cmpl	$10, -20(%rbp)
	jne	.LBB92_109
# %bb.108:                              # %if.then242
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-64(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB92_109:                             # %if.end246
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB92_124
# %bb.110:                              # %land.lhs.true250
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB92_124
# %bb.111:                              # %if.then254
	movl	$0, -24(%rbp)
.LBB92_112:                             # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_114 Depth 2
                                        #       Child Loop BB92_116 Depth 3
	movl	-24(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB92_123
# %bb.113:                              # %for.body258
                                        #   in Loop: Header=BB92_112 Depth=1
	movl	-24(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	decode_one_mb
	movl	$0, -12(%rbp)
.LBB92_114:                             # %for.cond259
                                        #   Parent Loop BB92_112 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB92_116 Depth 3
	cmpl	$16, -12(%rbp)
	jge	.LBB92_121
# %bb.115:                              # %for.body262
                                        #   in Loop: Header=BB92_114 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -16(%rbp)
.LBB92_116:                             # %for.cond263
                                        #   Parent Loop BB92_112 Depth=1
                                        #     Parent Loop BB92_114 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_119
# %bb.117:                              # %for.body268
                                        #   in Loop: Header=BB92_116 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	172(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.118:                              # %for.inc289
                                        #   in Loop: Header=BB92_116 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_116
.LBB92_119:                             # %for.end291
                                        #   in Loop: Header=BB92_114 Depth=2
	jmp	.LBB92_120
.LBB92_120:                             # %for.inc292
                                        #   in Loop: Header=BB92_114 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_114
.LBB92_121:                             # %for.end294
                                        #   in Loop: Header=BB92_112 Depth=1
	jmp	.LBB92_122
.LBB92_122:                             # %for.inc295
                                        #   in Loop: Header=BB92_112 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB92_112
.LBB92_123:                             # %for.end297
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-56(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -56(%rbp)
	jmp	.LBB92_133
.LBB92_124:                             # %if.else300
	movl	$0, -12(%rbp)
.LBB92_125:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_127 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB92_132
# %bb.126:                              # %for.body304
                                        #   in Loop: Header=BB92_125 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -16(%rbp)
.LBB92_127:                             # %for.cond306
                                        #   Parent Loop BB92_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_130
# %bb.128:                              # %for.body311
                                        #   in Loop: Header=BB92_127 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-12(%rbp), %edx
	movq	img, %rsi
	addl	172(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.129:                              # %for.inc332
                                        #   in Loop: Header=BB92_127 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_127
.LBB92_130:                             # %for.end334
                                        #   in Loop: Header=BB92_125 Depth=1
	jmp	.LBB92_131
.LBB92_131:                             # %for.inc335
                                        #   in Loop: Header=BB92_125 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_125
.LBB92_132:                             # %for.end337
	jmp	.LBB92_133
.LBB92_133:                             # %if.end338
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB92_143
# %bb.134:                              # %if.then342
	movl	$0, -12(%rbp)
.LBB92_135:                             # %for.cond343
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_137 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB92_142
# %bb.136:                              # %for.body346
                                        #   in Loop: Header=BB92_135 Depth=1
	movq	img, %rax
	movl	176(%rax), %eax
	movl	%eax, -16(%rbp)
.LBB92_137:                             # %for.cond347
                                        #   Parent Loop BB92_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	movq	img, %rdx
	addl	72708(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_140
# %bb.138:                              # %for.body352
                                        #   in Loop: Header=BB92_137 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-12(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-12(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.139:                              # %for.inc396
                                        #   in Loop: Header=BB92_137 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_137
.LBB92_140:                             # %for.end398
                                        #   in Loop: Header=BB92_135 Depth=1
	jmp	.LBB92_141
.LBB92_141:                             # %for.inc399
                                        #   in Loop: Header=BB92_135 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_135
.LBB92_142:                             # %for.end401
	jmp	.LBB92_143
.LBB92_143:                             # %if.end402
	movq	cs_cm, %rdi
	callq	store_coding_state
	cmpl	$0, -92(%rbp)
	je	.LBB92_150
# %bb.144:                              # %if.then404
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB92_147
# %bb.145:                              # %lor.lhs.false407
	cmpl	$0, -72(%rbp)
	je	.LBB92_148
# %bb.146:                              # %land.lhs.true409
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB92_148
.LBB92_147:                             # %if.then413
	movq	img, %rax
	movl	120(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -36(%rbp)
	movl	-76(%rbp), %edi
	movl	-28(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-28(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-36(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	movl	-76(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 120(%rcx)
	jmp	.LBB92_149
.LBB92_148:                             # %if.else417
	movq	img, %rax
	movl	120(%rax), %edi
	addl	$1, %edi
	movl	-28(%rbp), %esi
	leaq	-36(%rbp), %rdx
	leaq	-28(%rbp), %rcx
	callq	ue_linfo
	movq	img, %rax
	movl	120(%rax), %edi
	movl	-28(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-28(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-36(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -36(%rbp)
.LBB92_149:                             # %if.end422
	jmp	.LBB92_151
.LBB92_150:                             # %if.else423
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -36(%rbp)
.LBB92_151:                             # %if.end425
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vmovsd	.LCPI92_0(%rip), %xmm2  # xmm2 = mem[0],zero
	vcvtsi2sdq	-56(%rbp), %xmm0, %xmm0
	vmovsd	-88(%rbp), %xmm1        # xmm1 = mem[0],zero
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm3
	vucomisd	%xmm3, %xmm2
	jbe	.LBB92_153
# %bb.152:                              # %cond.true430
	vmovsd	.LCPI92_0(%rip), %xmm2  # xmm2 = mem[0],zero
	jmp	.LBB92_154
.LBB92_153:                             # %cond.false431
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm2
.LBB92_154:                             # %cond.end433
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -128(%rbp)
	vmovsd	-128(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-112(%rbp), %rax
	vucomisd	(%rax), %xmm0
	jae	.LBB92_158
# %bb.155:                              # %lor.lhs.false438
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB92_159
# %bb.156:                              # %land.lhs.true442
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	jne	.LBB92_159
# %bb.157:                              # %land.lhs.true445
	cmpq	$0, -56(%rbp)
	je	.LBB92_159
.LBB92_158:                             # %if.then448
	movl	$0, -60(%rbp)
	jmp	.LBB92_177
.LBB92_159:                             # %if.end449
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB92_176
# %bb.160:                              # %land.lhs.true451
	cmpl	$0, -20(%rbp)
	je	.LBB92_162
# %bb.161:                              # %cond.true453
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB92_165
	jmp	.LBB92_176
.LBB92_162:                             # %cond.false454
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB92_164
# %bb.163:                              # %cond.true458
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB92_176
	jmp	.LBB92_165
.LBB92_164:                             # %cond.false461
	movb	$1, %al
	testb	$1, %al
	jne	.LBB92_165
	jmp	.LBB92_176
.LBB92_165:                             # %if.then462
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB92_175
# %bb.166:                              # %if.then465
	movq	-120(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB92_168
# %bb.167:                              # %cond.true468
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB92_171
	jmp	.LBB92_174
.LBB92_168:                             # %cond.false469
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB92_170
# %bb.169:                              # %cond.true473
	movq	-120(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB92_174
	jmp	.LBB92_171
.LBB92_170:                             # %cond.false476
	movb	$1, %al
	testb	$1, %al
	jne	.LBB92_171
	jmp	.LBB92_174
.LBB92_171:                             # %if.then477
	callq	field_flag_inference
	movq	-48(%rbp), %rcx
	cmpl	532(%rcx), %eax
	je	.LBB92_173
# %bb.172:                              # %if.then481
	movl	$0, -60(%rbp)
	jmp	.LBB92_177
.LBB92_173:                             # %if.end482
	jmp	.LBB92_174
.LBB92_174:                             # %if.end483
	jmp	.LBB92_175
.LBB92_175:                             # %if.end484
	jmp	.LBB92_176
.LBB92_176:                             # %if.end485
	vmovsd	-128(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-112(%rbp), %rax
	vmovsd	%xmm0, (%rax)
	movl	$1, -60(%rbp)
.LBB92_177:                             # %return
	movl	-60(%rbp), %ebx
	cmpl	$2073154735, -96(%rbp)  # imm = 0x7B91D4AF
	jne	.LBB92_179
.LBB92_178:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB92_179:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB92_178
.Lfunc_end92:
	.size	RDCost_for_macroblocks.63, .Lfunc_end92-RDCost_for_macroblocks.63
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_8x8blocks.64
.LCPI93_0:
	.quad	4906019910204099648     # double 1.0E+20
	.text
	.globl	RDCost_for_8x8blocks.64
	.p2align	4, 0x90
	.type	RDCost_for_8x8blocks.64,@function
RDCost_for_8x8blocks.64:                # @RDCost_for_8x8blocks.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movw	16(%rbp), %ax
	xorl	%r10d, %r10d
	movl	$1115148671, -172(%rbp) # imm = 0x4277D17F
	movq	%rdi, -136(%rbp)
	movq	%rsi, -208(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movl	%edx, -40(%rbp)
	movl	%ecx, -36(%rbp)
	movw	%r8w, -18(%rbp)
	movw	%r9w, -42(%rbp)
	movl	$0, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -128(%rbp)
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -48(%rbp)
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-52(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -160(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB93_2
# %bb.1:                                # %land.rhs
	cmpl	$0, -36(%rbp)
	sete	%r10b
.LBB93_2:                               # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -116(%rbp)
	movl	-36(%rbp), %edi
	movswl	-18(%rbp), %esi
	callq	B8Mode2Value
	movl	%eax, -120(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-112(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -192(%rbp)
	movq	-112(%rbp), %rax
	movl	$0, 580(%rax)
	cmpl	$0, -116(%rbp)
	je	.LBB93_10
# %bb.3:                                # %if.then
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB93_5
# %bb.4:                                # %if.then20
	vmovsd	.LCPI93_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	%xmm0, -184(%rbp)
	jmp	.LBB93_139
.LBB93_5:                               # %if.else
	xorl	%r8d, %r8d
	movq	-208(%rbp), %rsi
	movl	-40(%rbp), %edx
	movq	direct_pdir, %rcx
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rcx,%rdi,8), %rcx
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movw	(%rcx,%rdi,2), %r9w
	movq	direct_ref_idx, %rdi
	movq	(%rdi), %rdi
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-28(%rbp), %eax
	cltq
	movq	(%rdi,%rax,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %eax
	cmpl	%eax, %r8d
	jle	.LBB93_7
# %bb.6:                                # %cond.true
	xorl	%r10d, %r10d
	jmp	.LBB93_8
.LBB93_7:                               # %cond.false
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rax,%rdi,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %r10d
.LBB93_8:                               # %cond.end
	movq	direct_ref_idx, %rdi
	movq	8(%rdi), %rdi
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rdi,%rcx,8), %r11
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rbx
	leaq	-128(%rbp), %rdi
	movswl	%r9w, %ecx
	movl	$0, %r8d
	movl	$0, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	(%r11,%rbx,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-136(%rbp), %rcx
	movl	%eax, (%rcx)
# %bb.9:                                # %if.end
	jmp	.LBB93_19
.LBB93_10:                              # %if.else62
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB93_12
# %bb.11:                               # %lor.lhs.false
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB93_13
.LBB93_12:                              # %cond.true69
	movl	-36(%rbp), %eax
	jmp	.LBB93_14
.LBB93_13:                              # %cond.false70
	xorl	%eax, %eax
	jmp	.LBB93_14
.LBB93_14:                              # %cond.end71
	movl	%eax, -168(%rbp)
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB93_16
# %bb.15:                               # %lor.lhs.false76
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB93_17
.LBB93_16:                              # %cond.true80
	movl	-36(%rbp), %eax
	jmp	.LBB93_18
.LBB93_17:                              # %cond.false81
	xorl	%eax, %eax
	jmp	.LBB93_18
.LBB93_18:                              # %cond.end82
	movl	%eax, -164(%rbp)
	movq	-208(%rbp), %rsi
	movl	-40(%rbp), %edx
	movw	-18(%rbp), %ax
	movl	-168(%rbp), %r8d
	movl	-164(%rbp), %r9d
	movw	-42(%rbp), %bx
	leaq	-128(%rbp), %rdi
	movswl	%ax, %ecx
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	16(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-136(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB93_19:                              # %if.end85
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB93_84
# %bb.20:                               # %if.then87
	movl	$0, -56(%rbp)
.LBB93_21:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_23 Depth 2
                                        #       Child Loop BB93_25 Depth 3
                                        #     Child Loop BB93_31 Depth 2
                                        #       Child Loop BB93_33 Depth 3
                                        #     Child Loop BB93_39 Depth 2
                                        #       Child Loop BB93_41 Depth 3
	cmpl	$4, -56(%rbp)
	jge	.LBB93_48
# %bb.22:                               # %for.body
                                        #   in Loop: Header=BB93_21 Depth=1
	movl	-48(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -80(%rbp)
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB93_23:                              # %for.cond96
                                        #   Parent Loop BB93_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_25 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB93_30
# %bb.24:                               # %for.body99
                                        #   in Loop: Header=BB93_23 Depth=2
	movl	$0, -12(%rbp)
.LBB93_25:                              # %for.cond100
                                        #   Parent Loop BB93_21 Depth=1
                                        #     Parent Loop BB93_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB93_28
# %bb.26:                               # %for.body103
                                        #   in Loop: Header=BB93_25 Depth=3
	movl	-12(%rbp), %eax
	addl	-80(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-84(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB93_25 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_25
.LBB93_28:                              # %for.end
                                        #   in Loop: Header=BB93_23 Depth=2
	jmp	.LBB93_29
.LBB93_29:                              # %for.inc114
                                        #   in Loop: Header=BB93_23 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_23
.LBB93_30:                              # %for.end116
                                        #   in Loop: Header=BB93_21 Depth=1
	movl	-40(%rbp), %edi
	addl	$4, %edi
	movl	-56(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB93_31:                              # %for.cond120
                                        #   Parent Loop BB93_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_33 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB93_38
# %bb.32:                               # %for.body123
                                        #   in Loop: Header=BB93_31 Depth=2
	movl	$0, -12(%rbp)
.LBB93_33:                              # %for.cond124
                                        #   Parent Loop BB93_21 Depth=1
                                        #     Parent Loop BB93_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB93_36
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB93_33 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-12(%rbp), %eax
	addl	-80(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-84(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc150
                                        #   in Loop: Header=BB93_33 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_33
.LBB93_36:                              # %for.end152
                                        #   in Loop: Header=BB93_31 Depth=2
	jmp	.LBB93_37
.LBB93_37:                              # %for.inc153
                                        #   in Loop: Header=BB93_31 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_31
.LBB93_38:                              # %for.end155
                                        #   in Loop: Header=BB93_21 Depth=1
	movl	-40(%rbp), %edi
	addl	$8, %edi
	movl	-56(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB93_39:                              # %for.cond159
                                        #   Parent Loop BB93_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB93_46
# %bb.40:                               # %for.body162
                                        #   in Loop: Header=BB93_39 Depth=2
	movl	$0, -12(%rbp)
.LBB93_41:                              # %for.cond163
                                        #   Parent Loop BB93_21 Depth=1
                                        #     Parent Loop BB93_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB93_44
# %bb.42:                               # %for.body166
                                        #   in Loop: Header=BB93_41 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc178
                                        #   in Loop: Header=BB93_41 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_41
.LBB93_44:                              # %for.end180
                                        #   in Loop: Header=BB93_39 Depth=2
	jmp	.LBB93_45
.LBB93_45:                              # %for.inc181
                                        #   in Loop: Header=BB93_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_39
.LBB93_46:                              # %for.end183
                                        #   in Loop: Header=BB93_21 Depth=1
	jmp	.LBB93_47
.LBB93_47:                              # %for.inc184
                                        #   in Loop: Header=BB93_21 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB93_21
.LBB93_48:                              # %for.end186
	movl	-52(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB93_49:                              # %for.cond187
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_51 Depth 2
	movl	-16(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_83
# %bb.50:                               # %for.body191
                                        #   in Loop: Header=BB93_49 Depth=1
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB93_51:                              # %for.cond192
                                        #   Parent Loop BB93_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_81
# %bb.52:                               # %for.body196
                                        #   in Loop: Header=BB93_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -124(%rbp)
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rbx
	movslq	-16(%rbp), %rdx
	movl	(%rbx,%rdx,4), %edx
	addl	-124(%rbp), %edx
	movl	%edx, -88(%rbp)
	movl	-124(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resR, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -76(%rbp)
	movl	-76(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rbx
	movslq	-16(%rbp), %rsi
	addl	(%rbx,%rsi,4), %edx
	movl	%edx, -92(%rbp)
	movq	img, %rdx
	movl	72688(%rdx), %edx
	movl	-76(%rbp), %esi
	movslq	-12(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movslq	-16(%rbp), %rdi
	addl	(%rcx,%rdi,4), %esi
	cmpl	%esi, %eax
	jle	.LBB93_54
# %bb.53:                               # %cond.true228
                                        #   in Loop: Header=BB93_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB93_55
.LBB93_54:                              # %cond.false229
                                        #   in Loop: Header=BB93_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB93_55:                              # %cond.end235
                                        #   in Loop: Header=BB93_51 Depth=2
	cmpl	%eax, %edx
	jge	.LBB93_57
# %bb.56:                               # %cond.true239
                                        #   in Loop: Header=BB93_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB93_61
.LBB93_57:                              # %cond.false241
                                        #   in Loop: Header=BB93_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-76(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB93_59
# %bb.58:                               # %cond.true249
                                        #   in Loop: Header=BB93_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB93_60
.LBB93_59:                              # %cond.false250
                                        #   in Loop: Header=BB93_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB93_60:                              # %cond.end256
                                        #   in Loop: Header=BB93_51 Depth=2
.LBB93_61:                              # %cond.end258
                                        #   in Loop: Header=BB93_51 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-88(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB93_63
# %bb.62:                               # %cond.true275
                                        #   in Loop: Header=BB93_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB93_64
.LBB93_63:                              # %cond.false276
                                        #   in Loop: Header=BB93_51 Depth=2
	movl	-88(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB93_64:                              # %cond.end282
                                        #   in Loop: Header=BB93_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB93_66
# %bb.65:                               # %cond.true286
                                        #   in Loop: Header=BB93_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB93_70
.LBB93_66:                              # %cond.false288
                                        #   in Loop: Header=BB93_51 Depth=2
	xorl	%eax, %eax
	movl	-88(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB93_68
# %bb.67:                               # %cond.true296
                                        #   in Loop: Header=BB93_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB93_69
.LBB93_68:                              # %cond.false297
                                        #   in Loop: Header=BB93_51 Depth=2
	movl	-88(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB93_69:                              # %cond.end303
                                        #   in Loop: Header=BB93_51 Depth=2
.LBB93_70:                              # %cond.end305
                                        #   in Loop: Header=BB93_51 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-92(%rbp), %esi
	movslq	-12(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-16(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB93_72
# %bb.71:                               # %cond.true324
                                        #   in Loop: Header=BB93_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB93_73
.LBB93_72:                              # %cond.false325
                                        #   in Loop: Header=BB93_51 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-92(%rbp), %ecx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB93_73:                              # %cond.end331
                                        #   in Loop: Header=BB93_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB93_75
# %bb.74:                               # %cond.true335
                                        #   in Loop: Header=BB93_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB93_79
.LBB93_75:                              # %cond.false337
                                        #   in Loop: Header=BB93_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-92(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB93_77
# %bb.76:                               # %cond.true345
                                        #   in Loop: Header=BB93_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB93_78
.LBB93_77:                              # %cond.false346
                                        #   in Loop: Header=BB93_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-92(%rbp), %eax
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB93_78:                              # %cond.end352
                                        #   in Loop: Header=BB93_51 Depth=2
.LBB93_79:                              # %cond.end354
                                        #   in Loop: Header=BB93_51 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.80:                               # %for.inc367
                                        #   in Loop: Header=BB93_51 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_51
.LBB93_81:                              # %for.end369
                                        #   in Loop: Header=BB93_49 Depth=1
	jmp	.LBB93_82
.LBB93_82:                              # %for.inc370
                                        #   in Loop: Header=BB93_49 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_49
.LBB93_83:                              # %for.end372
	jmp	.LBB93_84
.LBB93_84:                              # %if.end373
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB93_87
# %bb.85:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB93_87
# %bb.86:                               # %if.then379
	movl	-40(%rbp), %edi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	compute_residue_b8block
.LBB93_87:                              # %if.end380
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB93_102
# %bb.88:                               # %land.lhs.true384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB93_102
# %bb.89:                               # %if.then388
	movl	$0, -68(%rbp)
.LBB93_90:                              # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_92 Depth 2
                                        #       Child Loop BB93_94 Depth 3
	movl	-68(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB93_101
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB93_90 Depth=1
	movl	-68(%rbp), %edi
	movl	-40(%rbp), %edx
	movl	-36(%rbp), %ecx
	movswl	-42(%rbp), %r8d
	movl	$8, %esi
	callq	decode_one_b8block
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB93_92:                              # %for.cond395
                                        #   Parent Loop BB93_90 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_94 Depth 3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_99
# %bb.93:                               # %for.body401
                                        #   in Loop: Header=BB93_92 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB93_94:                              # %for.cond403
                                        #   Parent Loop BB93_90 Depth=1
                                        #     Parent Loop BB93_92 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_97
# %bb.95:                               # %for.body409
                                        #   in Loop: Header=BB93_94 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
# %bb.96:                               # %for.inc427
                                        #   in Loop: Header=BB93_94 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_94
.LBB93_97:                              # %for.end429
                                        #   in Loop: Header=BB93_92 Depth=2
	jmp	.LBB93_98
.LBB93_98:                              # %for.inc430
                                        #   in Loop: Header=BB93_92 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_92
.LBB93_99:                              # %for.end432
                                        #   in Loop: Header=BB93_90 Depth=1
	jmp	.LBB93_100
.LBB93_100:                             # %for.inc433
                                        #   in Loop: Header=BB93_90 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB93_90
.LBB93_101:                             # %for.end435
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-64(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -64(%rbp)
	jmp	.LBB93_113
.LBB93_102:                             # %if.else439
	movl	-52(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB93_103:                             # %for.cond440
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_105 Depth 2
	movl	-16(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_112
# %bb.104:                              # %for.body444
                                        #   in Loop: Header=BB93_103 Depth=1
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB93_105:                             # %for.cond447
                                        #   Parent Loop BB93_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_110
# %bb.106:                              # %for.body453
                                        #   in Loop: Header=BB93_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB93_108
# %bb.107:                              # %if.then477
                                        #   in Loop: Header=BB93_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB93_108:                             # %if.end524
                                        #   in Loop: Header=BB93_105 Depth=2
	jmp	.LBB93_109
.LBB93_109:                             # %for.inc525
                                        #   in Loop: Header=BB93_105 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_105
.LBB93_110:                             # %for.end527
                                        #   in Loop: Header=BB93_103 Depth=1
	jmp	.LBB93_111
.LBB93_111:                             # %for.inc528
                                        #   in Loop: Header=BB93_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_103
.LBB93_112:                             # %for.end530
	jmp	.LBB93_113
.LBB93_113:                             # %if.end531
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB93_115
# %bb.114:                              # %if.then534
	movl	-120(%rbp), %edi
	movl	-156(%rbp), %esi
	leaq	-72(%rbp), %rdx
	leaq	-156(%rbp), %rcx
	callq	ue_linfo
	movl	-72(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_116
.LBB93_115:                             # %if.else536
	movl	-120(%rbp), %eax
	movq	-104(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-104(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-104(%rbp), %rax
	movl	$2, (%rax)
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	-104(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movq	112(%rax), %rax
	movq	-104(%rbp), %rdi
	movq	-144(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-104(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -104(%rbp)
	movq	-112(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB93_116:                             # %if.end547
	cmpl	$0, -116(%rbp)
	jne	.LBB93_134
# %bb.117:                              # %if.then549
	movq	img, %rax
	cmpl	$1, 72000(%rax)
	jle	.LBB93_121
# %bb.118:                              # %land.lhs.true552
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB93_120
# %bb.119:                              # %lor.lhs.false556
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB93_121
.LBB93_120:                             # %if.then560
	movl	-36(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movswl	-42(%rbp), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB93_121:                             # %if.end564
	movq	img, %rax
	cmpl	$1, 72004(%rax)
	jle	.LBB93_127
# %bb.122:                              # %land.lhs.true567
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB93_127
# %bb.123:                              # %if.then571
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB93_125
# %bb.124:                              # %lor.lhs.false575
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB93_126
.LBB93_125:                             # %if.then579
	movl	-36(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movswl	16(%rbp), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB93_126:                             # %if.end583
	jmp	.LBB93_127
.LBB93_127:                             # %if.end584
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB93_129
# %bb.128:                              # %lor.lhs.false588
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB93_130
.LBB93_129:                             # %if.then592
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movl	-32(%rbp), %ecx
	addl	$2, %ecx
	movswl	-42(%rbp), %r8d
	movl	-36(%rbp), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB93_130:                             # %if.end598
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB93_132
# %bb.131:                              # %lor.lhs.false602
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB93_133
.LBB93_132:                             # %if.then606
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movl	-32(%rbp), %ecx
	addl	$2, %ecx
	movswl	16(%rbp), %r8d
	movl	-36(%rbp), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB93_133:                             # %if.end612
	jmp	.LBB93_134
.LBB93_134:                             # %if.end613
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB93_136
# %bb.135:                              # %if.then617
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-192(%rbp), %rcx
	movslq	44(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	xorl	%esi, %esi
	movl	%eax, -72(%rbp)
	movl	-40(%rbp), %edi
	movq	-136(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovgl	%eax, %esi
	movl	cbp8x8, %edx
	movq	-112(%rbp), %rcx
	movq	-152(%rbp), %r9
	movl	$1, %r8d
	callq	writeCBP_BIT_CABAC
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	subl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB93_136:                             # %if.end629
	movq	-136(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB93_138
# %bb.137:                              # %if.then631
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	movq	-112(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB93_138:                             # %if.end634
	vcvtsi2sdq	-64(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-24(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
.LBB93_139:                             # %return
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	cmpl	$1115148671, -172(%rbp) # imm = 0x4277D17F
	jne	.LBB93_141
.LBB93_140:
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB93_141:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -216(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-216(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB93_140
.Lfunc_end93:
	.size	RDCost_for_8x8blocks.64, .Lfunc_end93-RDCost_for_8x8blocks.64
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMVBlock8x8.65    # -- Begin function RestoreMVBlock8x8.65
	.p2align	4, 0x90
	.type	RestoreMVBlock8x8.65,@function
RestoreMVBlock8x8.65:                   # @RestoreMVBlock8x8.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$1982505376, -68(%rbp)  # imm = 0x762AA1A0
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -40(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -28(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB94_12
# %bb.1:                                # %if.then
	cmpl	$0, -60(%rbp)
	jl	.LBB94_11
# %bb.2:                                # %if.then5
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB94_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_5 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB94_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB94_3 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB94_5:                               # %for.cond7
                                        #   Parent Loop BB94_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB94_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB94_5 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB94_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB94_5
.LBB94_8:                               # %for.end
                                        #   in Loop: Header=BB94_3 Depth=1
	jmp	.LBB94_9
.LBB94_9:                               # %for.inc76
                                        #   in Loop: Header=BB94_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_3
.LBB94_10:                              # %for.end78
	jmp	.LBB94_11
.LBB94_11:                              # %if.end
	jmp	.LBB94_46
.LBB94_12:                              # %if.else
	cmpl	$0, -60(%rbp)
	jne	.LBB94_22
# %bb.13:                               # %if.then80
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB94_14:                              # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_16 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB94_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB94_14 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB94_16:                              # %for.cond84
                                        #   Parent Loop BB94_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB94_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB94_16 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB94_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB94_16
.LBB94_19:                              # %for.end161
                                        #   in Loop: Header=BB94_14 Depth=1
	jmp	.LBB94_20
.LBB94_20:                              # %for.inc162
                                        #   in Loop: Header=BB94_14 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_14
.LBB94_21:                              # %for.end164
	jmp	.LBB94_45
.LBB94_22:                              # %if.else165
	cmpl	$1, -60(%rbp)
	jne	.LBB94_32
# %bb.23:                               # %if.then167
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB94_24:                              # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_26 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB94_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB94_24 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB94_26:                              # %for.cond171
                                        #   Parent Loop BB94_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB94_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB94_26 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB94_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB94_26
.LBB94_29:                              # %for.end248
                                        #   in Loop: Header=BB94_24 Depth=1
	jmp	.LBB94_30
.LBB94_30:                              # %for.inc249
                                        #   in Loop: Header=BB94_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_24
.LBB94_31:                              # %for.end251
	jmp	.LBB94_44
.LBB94_32:                              # %if.else252
	cmpl	$2, -60(%rbp)
	jne	.LBB94_42
# %bb.33:                               # %if.then254
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB94_34:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_36 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB94_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB94_34 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB94_36:                              # %for.cond258
                                        #   Parent Loop BB94_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB94_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB94_36 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	2(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, 2(%rdx)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-40(%rbp), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	2(%rsi,%rdx,4), %dx
	movq	-40(%rbp), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, 2(%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-48(%rbp), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	8(%rsi), %rsi
	movslq	-24(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	addq	$64, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	2(%rcx,%rdx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB94_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB94_36
.LBB94_39:                              # %for.end407
                                        #   in Loop: Header=BB94_34 Depth=1
	jmp	.LBB94_40
.LBB94_40:                              # %for.inc408
                                        #   in Loop: Header=BB94_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_34
.LBB94_41:                              # %for.end410
	jmp	.LBB94_43
.LBB94_42:                              # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB94_43:                              # %if.end412
	jmp	.LBB94_44
.LBB94_44:                              # %if.end413
	jmp	.LBB94_45
.LBB94_45:                              # %if.end414
	jmp	.LBB94_46
.LBB94_46:                              # %if.end415
	cmpl	$1982505376, -68(%rbp)  # imm = 0x762AA1A0
	jne	.LBB94_48
.LBB94_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB94_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB94_47
.Lfunc_end94:
	.size	RestoreMVBlock8x8.65, .Lfunc_end94-RestoreMVBlock8x8.65
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_4x4IntraBlocks.66
.LCPI95_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI95_1:
	.quad	4616189618054758400     # double 4
	.text
	.globl	Mode_Decision_for_4x4IntraBlocks.66
	.p2align	4, 0x90
	.type	Mode_Decision_for_4x4IntraBlocks.66,@function
Mode_Decision_for_4x4IntraBlocks.66:    # @Mode_Decision_for_4x4IntraBlocks.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$488, %rsp              # imm = 0x1E8
	.cfi_offset %rbx, -24
	vmovsd	.LCPI95_0(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1975700332, -164(%rbp) # imm = 0x75C2CB6C
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	vmovsd	%xmm0, -144(%rbp)
	movq	%rdx, -152(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -176(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -180(%rbp)
	vmovsd	%xmm1, -128(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rax
	movl	524(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %esi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-232(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-40(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB95_8
# %bb.1:                                # %if.then
	cmpl	$0, -232(%rbp)
	je	.LBB95_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-228(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB95_4
.LBB95_3:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB95_4
.LBB95_4:                               # %cond.end
	movl	%eax, -232(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB95_6
# %bb.5:                                # %cond.true25
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-204(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB95_7
.LBB95_6:                               # %cond.false30
	xorl	%eax, %eax
	jmp	.LBB95_7
.LBB95_7:                               # %cond.end31
	movl	%eax, -208(%rbp)
.LBB95_8:                               # %if.end
	cmpl	$0, -208(%rbp)
	je	.LBB95_10
# %bb.9:                                # %cond.true36
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB95_11
.LBB95_10:                              # %cond.false41
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB95_11
.LBB95_11:                              # %cond.end42
	movl	%eax, -108(%rbp)
	cmpl	$0, -232(%rbp)
	je	.LBB95_13
# %bb.12:                               # %cond.true46
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-216(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-212(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB95_14
.LBB95_13:                              # %cond.false54
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB95_14
.LBB95_14:                              # %cond.end55
	movl	%eax, -120(%rbp)
	cmpl	$0, -108(%rbp)
	jl	.LBB95_16
# %bb.15:                               # %lor.lhs.false
	cmpl	$0, -120(%rbp)
	jge	.LBB95_17
.LBB95_16:                              # %cond.true58
	movl	$2, %eax
	jmp	.LBB95_21
.LBB95_17:                              # %cond.false59
	movl	-108(%rbp), %eax
	cmpl	-120(%rbp), %eax
	jge	.LBB95_19
# %bb.18:                               # %cond.true61
	movl	-108(%rbp), %eax
	jmp	.LBB95_20
.LBB95_19:                              # %cond.false62
	movl	-120(%rbp), %eax
.LBB95_20:                              # %cond.end63
.LBB95_21:                              # %cond.end65
	movl	%eax, -100(%rbp)
	movq	-152(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	-64(%rbp), %edi
	movl	-48(%rbp), %esi
	leaq	-184(%rbp), %rdx
	leaq	-168(%rbp), %rcx
	leaq	-156(%rbp), %r8
	callq	intrapred_luma
	movl	$0, -44(%rbp)
.LBB95_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_49 Depth 2
                                        #       Child Loop BB95_51 Depth 3
                                        #     Child Loop BB95_64 Depth 2
                                        #       Child Loop BB95_66 Depth 3
                                        #     Child Loop BB95_73 Depth 2
                                        #       Child Loop BB95_75 Depth 3
                                        #     Child Loop BB95_81 Depth 2
                                        #       Child Loop BB95_83 Depth 3
                                        #     Child Loop BB95_91 Depth 2
                                        #       Child Loop BB95_93 Depth 3
                                        #     Child Loop BB95_99 Depth 2
                                        #       Child Loop BB95_101 Depth 3
                                        #     Child Loop BB95_107 Depth 2
                                        #       Child Loop BB95_109 Depth 3
                                        #     Child Loop BB95_115 Depth 2
                                        #       Child Loop BB95_117 Depth 3
                                        #     Child Loop BB95_123 Depth 2
                                        #       Child Loop BB95_125 Depth 3
                                        #     Child Loop BB95_131 Depth 2
                                        #       Child Loop BB95_133 Depth 3
                                        #     Child Loop BB95_166 Depth 2
                                        #       Child Loop BB95_168 Depth 3
                                        #     Child Loop BB95_175 Depth 2
                                        #       Child Loop BB95_177 Depth 3
                                        #     Child Loop BB95_183 Depth 2
                                        #       Child Loop BB95_185 Depth 3
                                        #     Child Loop BB95_191 Depth 2
                                        #       Child Loop BB95_193 Depth 3
                                        #     Child Loop BB95_199 Depth 2
                                        #       Child Loop BB95_201 Depth 3
                                        #         Child Loop BB95_203 Depth 4
                                        #     Child Loop BB95_211 Depth 2
                                        #       Child Loop BB95_213 Depth 3
	cmpl	$9, -44(%rbp)
	jge	.LBB95_224
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB95_22 Depth=1
	cmpl	$2, -44(%rbp)
	movb	$1, %al
	je	.LBB95_32
# %bb.24:                               # %lor.lhs.false69
                                        #   in Loop: Header=BB95_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB95_27
# %bb.25:                               # %lor.lhs.false71
                                        #   in Loop: Header=BB95_22 Depth=1
	cmpl	$7, -44(%rbp)
	je	.LBB95_27
# %bb.26:                               # %lor.lhs.false73
                                        #   in Loop: Header=BB95_22 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB95_28
.LBB95_27:                              # %land.lhs.true
                                        #   in Loop: Header=BB95_22 Depth=1
	cmpl	$0, -168(%rbp)
	movb	$1, %al
	jne	.LBB95_32
.LBB95_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB95_22 Depth=1
	cmpl	$1, -44(%rbp)
	je	.LBB95_30
# %bb.29:                               # %lor.lhs.false78
                                        #   in Loop: Header=BB95_22 Depth=1
	cmpl	$8, -44(%rbp)
	jne	.LBB95_31
.LBB95_30:                              # %land.lhs.true80
                                        #   in Loop: Header=BB95_22 Depth=1
	cmpl	$0, -184(%rbp)
	movb	$1, %al
	jne	.LBB95_32
.LBB95_31:                              # %lor.rhs
                                        #   in Loop: Header=BB95_22 Depth=1
	cmpl	$0, -156(%rbp)
	setne	%al
.LBB95_32:                              # %lor.end
                                        #   in Loop: Header=BB95_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -172(%rbp)
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB95_34
# %bb.33:                               # %lor.lhs.false84
                                        #   in Loop: Header=BB95_22 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB95_46
.LBB95_34:                              # %if.then86
                                        #   in Loop: Header=BB95_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2400(%rax)
	je	.LBB95_38
# %bb.35:                               # %land.lhs.true88
                                        #   in Loop: Header=BB95_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB95_37
# %bb.36:                               # %lor.lhs.false90
                                        #   in Loop: Header=BB95_22 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB95_38
.LBB95_37:                              # %if.then92
                                        #   in Loop: Header=BB95_22 Depth=1
	jmp	.LBB95_223
.LBB95_38:                              # %if.end93
                                        #   in Loop: Header=BB95_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2404(%rax)
	je	.LBB95_42
# %bb.39:                               # %land.lhs.true95
                                        #   in Loop: Header=BB95_22 Depth=1
	cmpl	$3, -44(%rbp)
	je	.LBB95_41
# %bb.40:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB95_22 Depth=1
	cmpl	$4, -44(%rbp)
	jne	.LBB95_42
.LBB95_41:                              # %if.then99
                                        #   in Loop: Header=BB95_22 Depth=1
	jmp	.LBB95_223
.LBB95_42:                              # %if.end100
                                        #   in Loop: Header=BB95_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2408(%rax)
	je	.LBB95_45
# %bb.43:                               # %land.lhs.true102
                                        #   in Loop: Header=BB95_22 Depth=1
	cmpl	$5, -44(%rbp)
	jl	.LBB95_45
# %bb.44:                               # %if.then104
                                        #   in Loop: Header=BB95_22 Depth=1
	jmp	.LBB95_223
.LBB95_45:                              # %if.end105
                                        #   in Loop: Header=BB95_22 Depth=1
	jmp	.LBB95_46
.LBB95_46:                              # %if.end106
                                        #   in Loop: Header=BB95_22 Depth=1
	cmpl	$0, -172(%rbp)
	je	.LBB95_222
# %bb.47:                               # %if.then108
                                        #   in Loop: Header=BB95_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB95_62
# %bb.48:                               # %if.then110
                                        #   in Loop: Header=BB95_22 Depth=1
	movl	$0, -16(%rbp)
	movl	$0, -112(%rbp)
.LBB95_49:                              # %for.cond111
                                        #   Parent Loop BB95_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB95_51 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB95_56
# %bb.50:                               # %for.body113
                                        #   in Loop: Header=BB95_49 Depth=2
	movl	$0, -12(%rbp)
.LBB95_51:                              # %for.cond114
                                        #   Parent Loop BB95_22 Depth=1
                                        #     Parent Loop BB95_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB95_54
# %bb.52:                               # %for.body116
                                        #   in Loop: Header=BB95_51 Depth=3
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-112(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.53:                               # %for.inc
                                        #   in Loop: Header=BB95_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB95_51
.LBB95_54:                              # %for.end
                                        #   in Loop: Header=BB95_49 Depth=2
	jmp	.LBB95_55
.LBB95_55:                              # %for.inc133
                                        #   in Loop: Header=BB95_49 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_49
.LBB95_56:                              # %for.end135
                                        #   in Loop: Header=BB95_22 Depth=1
	movl	-44(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jne	.LBB95_58
# %bb.57:                               # %cond.true138
                                        #   in Loop: Header=BB95_22 Depth=1
	xorl	%eax, %eax
	jmp	.LBB95_59
.LBB95_58:                              # %cond.false139
                                        #   in Loop: Header=BB95_22 Depth=1
	vmovsd	.LCPI95_1(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-144(%rbp), %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB95_59:                              # %cond.end142
                                        #   in Loop: Header=BB95_22 Depth=1
	leaq	-368(%rbp), %rdi
	movl	%eax, -104(%rbp)
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-104(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB95_61
# %bb.60:                               # %if.then147
                                        #   in Loop: Header=BB95_22 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB95_61:                              # %if.end148
                                        #   in Loop: Header=BB95_22 Depth=1
	jmp	.LBB95_221
.LBB95_62:                              # %if.else
                                        #   in Loop: Header=BB95_22 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB95_90
# %bb.63:                               # %if.then150
                                        #   in Loop: Header=BB95_22 Depth=1
	movl	$0, -16(%rbp)
.LBB95_64:                              # %for.cond151
                                        #   Parent Loop BB95_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB95_66 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB95_71
# %bb.65:                               # %for.body154
                                        #   in Loop: Header=BB95_64 Depth=2
	movl	$0, -12(%rbp)
.LBB95_66:                              # %for.cond155
                                        #   Parent Loop BB95_22 Depth=1
                                        #     Parent Loop BB95_64 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB95_69
# %bb.67:                               # %for.body158
                                        #   in Loop: Header=BB95_66 Depth=3
	movq	img, %rax
	addq	$184, %rax
	movslq	-44(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc192
                                        #   in Loop: Header=BB95_66 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_66
.LBB95_69:                              # %for.end194
                                        #   in Loop: Header=BB95_64 Depth=2
	jmp	.LBB95_70
.LBB95_70:                              # %for.inc195
                                        #   in Loop: Header=BB95_64 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_64
.LBB95_71:                              # %for.end197
                                        #   in Loop: Header=BB95_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-100(%rbp), %r8d
	leaq	-116(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vmovsd	%xmm0, -136(%rbp)
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB95_89
# %bb.72:                               # %if.then201
                                        #   in Loop: Header=BB95_22 Depth=1
	movl	$0, -16(%rbp)
.LBB95_73:                              # %for.cond202
                                        #   Parent Loop BB95_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB95_75 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB95_80
# %bb.74:                               # %for.body205
                                        #   in Loop: Header=BB95_73 Depth=2
	movl	$0, -12(%rbp)
.LBB95_75:                              # %for.cond206
                                        #   Parent Loop BB95_22 Depth=1
                                        #     Parent Loop BB95_73 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB95_78
# %bb.76:                               # %for.body209
                                        #   in Loop: Header=BB95_75 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.77:                               # %for.inc222
                                        #   in Loop: Header=BB95_75 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_75
.LBB95_78:                              # %for.end224
                                        #   in Loop: Header=BB95_73 Depth=2
	jmp	.LBB95_79
.LBB95_79:                              # %for.inc225
                                        #   in Loop: Header=BB95_73 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_73
.LBB95_80:                              # %for.end227
                                        #   in Loop: Header=BB95_22 Depth=1
	movl	$0, -24(%rbp)
.LBB95_81:                              # %for.cond228
                                        #   Parent Loop BB95_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB95_83 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB95_88
# %bb.82:                               # %for.body231
                                        #   in Loop: Header=BB95_81 Depth=2
	movl	$0, -20(%rbp)
.LBB95_83:                              # %for.cond232
                                        #   Parent Loop BB95_22 Depth=1
                                        #     Parent Loop BB95_81 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB95_86
# %bb.84:                               # %for.body235
                                        #   in Loop: Header=BB95_83 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.85:                               # %for.inc247
                                        #   in Loop: Header=BB95_83 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB95_83
.LBB95_86:                              # %for.end249
                                        #   in Loop: Header=BB95_81 Depth=2
	jmp	.LBB95_87
.LBB95_87:                              # %for.inc250
                                        #   in Loop: Header=BB95_81 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB95_81
.LBB95_88:                              # %for.end252
                                        #   in Loop: Header=BB95_22 Depth=1
	movl	-116(%rbp), %eax
	movl	%eax, -92(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB95_89:                              # %if.end253
                                        #   in Loop: Header=BB95_22 Depth=1
	movq	cs_cm, %rdi
	callq	reset_coding_state
	jmp	.LBB95_220
.LBB95_90:                              # %if.else254
                                        #   in Loop: Header=BB95_22 Depth=1
	movl	$0, -16(%rbp)
.LBB95_91:                              # %for.cond255
                                        #   Parent Loop BB95_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB95_93 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB95_98
# %bb.92:                               # %for.body258
                                        #   in Loop: Header=BB95_91 Depth=2
	movl	$0, -12(%rbp)
.LBB95_93:                              # %for.cond259
                                        #   Parent Loop BB95_22 Depth=1
                                        #     Parent Loop BB95_91 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB95_96
# %bb.94:                               # %for.body262
                                        #   in Loop: Header=BB95_93 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.95:                               # %for.inc343
                                        #   in Loop: Header=BB95_93 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_93
.LBB95_96:                              # %for.end345
                                        #   in Loop: Header=BB95_91 Depth=2
	jmp	.LBB95_97
.LBB95_97:                              # %for.inc346
                                        #   in Loop: Header=BB95_91 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_91
.LBB95_98:                              # %for.end348
                                        #   in Loop: Header=BB95_22 Depth=1
	movl	$0, -16(%rbp)
.LBB95_99:                              # %for.cond349
                                        #   Parent Loop BB95_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB95_101 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB95_106
# %bb.100:                              # %for.body352
                                        #   in Loop: Header=BB95_99 Depth=2
	movl	$0, -12(%rbp)
.LBB95_101:                             # %for.cond353
                                        #   Parent Loop BB95_22 Depth=1
                                        #     Parent Loop BB95_99 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB95_104
# %bb.102:                              # %for.body356
                                        #   in Loop: Header=BB95_101 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.103:                              # %for.inc366
                                        #   in Loop: Header=BB95_101 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_101
.LBB95_104:                             # %for.end368
                                        #   in Loop: Header=BB95_99 Depth=2
	jmp	.LBB95_105
.LBB95_105:                             # %for.inc369
                                        #   in Loop: Header=BB95_99 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_99
.LBB95_106:                             # %for.end371
                                        #   in Loop: Header=BB95_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-100(%rbp), %r8d
	leaq	-116(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -96(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB95_107:                             # %for.cond374
                                        #   Parent Loop BB95_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB95_109 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB95_114
# %bb.108:                              # %for.body377
                                        #   in Loop: Header=BB95_107 Depth=2
	movl	$0, -12(%rbp)
.LBB95_109:                             # %for.cond378
                                        #   Parent Loop BB95_22 Depth=1
                                        #     Parent Loop BB95_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB95_112
# %bb.110:                              # %for.body381
                                        #   in Loop: Header=BB95_109 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc400
                                        #   in Loop: Header=BB95_109 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_109
.LBB95_112:                             # %for.end402
                                        #   in Loop: Header=BB95_107 Depth=2
	jmp	.LBB95_113
.LBB95_113:                             # %for.inc403
                                        #   in Loop: Header=BB95_107 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_107
.LBB95_114:                             # %for.end405
                                        #   in Loop: Header=BB95_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %edi
	addl	$4, %edi
	movl	-32(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-96(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	$0, -16(%rbp)
.LBB95_115:                             # %for.cond409
                                        #   Parent Loop BB95_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB95_117 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB95_122
# %bb.116:                              # %for.body412
                                        #   in Loop: Header=BB95_115 Depth=2
	movl	$0, -12(%rbp)
.LBB95_117:                             # %for.cond413
                                        #   Parent Loop BB95_22 Depth=1
                                        #     Parent Loop BB95_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB95_120
# %bb.118:                              # %for.body416
                                        #   in Loop: Header=BB95_117 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc435
                                        #   in Loop: Header=BB95_117 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_117
.LBB95_120:                             # %for.end437
                                        #   in Loop: Header=BB95_115 Depth=2
	jmp	.LBB95_121
.LBB95_121:                             # %for.inc438
                                        #   in Loop: Header=BB95_115 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_115
.LBB95_122:                             # %for.end440
                                        #   in Loop: Header=BB95_22 Depth=1
	movl	-28(%rbp), %edi
	addl	$8, %edi
	movl	-32(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-96(%rbp), %eax
	movl	%eax, -96(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB95_123:                             # %for.cond444
                                        #   Parent Loop BB95_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB95_125 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB95_130
# %bb.124:                              # %for.body447
                                        #   in Loop: Header=BB95_123 Depth=2
	movl	$0, -12(%rbp)
.LBB95_125:                             # %for.cond448
                                        #   Parent Loop BB95_22 Depth=1
                                        #     Parent Loop BB95_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB95_128
# %bb.126:                              # %for.body451
                                        #   in Loop: Header=BB95_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.127:                              # %for.inc461
                                        #   in Loop: Header=BB95_125 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_125
.LBB95_128:                             # %for.end463
                                        #   in Loop: Header=BB95_123 Depth=2
	jmp	.LBB95_129
.LBB95_129:                             # %for.inc464
                                        #   in Loop: Header=BB95_123 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_123
.LBB95_130:                             # %for.end466
                                        #   in Loop: Header=BB95_22 Depth=1
	movl	$0, -16(%rbp)
.LBB95_131:                             # %for.cond467
                                        #   Parent Loop BB95_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB95_133 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB95_165
# %bb.132:                              # %for.body470
                                        #   in Loop: Header=BB95_131 Depth=2
	movl	$0, -12(%rbp)
.LBB95_133:                             # %for.cond471
                                        #   Parent Loop BB95_22 Depth=1
                                        #     Parent Loop BB95_131 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB95_163
# %bb.134:                              # %for.body474
                                        #   in Loop: Header=BB95_133 Depth=3
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -72(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -68(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB95_136
# %bb.135:                              # %cond.true515
                                        #   in Loop: Header=BB95_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB95_137
.LBB95_136:                             # %cond.false516
                                        #   in Loop: Header=BB95_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB95_137:                             # %cond.end529
                                        #   in Loop: Header=BB95_133 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB95_139
# %bb.138:                              # %cond.true533
                                        #   in Loop: Header=BB95_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB95_143
.LBB95_139:                             # %cond.false535
                                        #   in Loop: Header=BB95_133 Depth=3
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB95_141
# %bb.140:                              # %cond.true550
                                        #   in Loop: Header=BB95_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB95_142
.LBB95_141:                             # %cond.false551
                                        #   in Loop: Header=BB95_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB95_142:                             # %cond.end564
                                        #   in Loop: Header=BB95_133 Depth=3
.LBB95_143:                             # %cond.end566
                                        #   in Loop: Header=BB95_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-44(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB95_145
# %bb.144:                              # %cond.true587
                                        #   in Loop: Header=BB95_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB95_146
.LBB95_145:                             # %cond.false588
                                        #   in Loop: Header=BB95_133 Depth=3
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB95_146:                             # %cond.end598
                                        #   in Loop: Header=BB95_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB95_148
# %bb.147:                              # %cond.true602
                                        #   in Loop: Header=BB95_133 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_152
.LBB95_148:                             # %cond.false604
                                        #   in Loop: Header=BB95_133 Depth=3
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB95_150
# %bb.149:                              # %cond.true616
                                        #   in Loop: Header=BB95_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB95_151
.LBB95_150:                             # %cond.false617
                                        #   in Loop: Header=BB95_133 Depth=3
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB95_151:                             # %cond.end627
                                        #   in Loop: Header=BB95_133 Depth=3
.LBB95_152:                             # %cond.end629
                                        #   in Loop: Header=BB95_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB95_154
# %bb.153:                              # %cond.true654
                                        #   in Loop: Header=BB95_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB95_155
.LBB95_154:                             # %cond.false655
                                        #   in Loop: Header=BB95_133 Depth=3
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB95_155:                             # %cond.end668
                                        #   in Loop: Header=BB95_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB95_157
# %bb.156:                              # %cond.true672
                                        #   in Loop: Header=BB95_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB95_161
.LBB95_157:                             # %cond.false674
                                        #   in Loop: Header=BB95_133 Depth=3
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB95_159
# %bb.158:                              # %cond.true689
                                        #   in Loop: Header=BB95_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB95_160
.LBB95_159:                             # %cond.false690
                                        #   in Loop: Header=BB95_133 Depth=3
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB95_160:                             # %cond.end703
                                        #   in Loop: Header=BB95_133 Depth=3
.LBB95_161:                             # %cond.end705
                                        #   in Loop: Header=BB95_133 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.162:                              # %for.inc716
                                        #   in Loop: Header=BB95_133 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_133
.LBB95_163:                             # %for.end718
                                        #   in Loop: Header=BB95_131 Depth=2
	jmp	.LBB95_164
.LBB95_164:                             # %for.inc719
                                        #   in Loop: Header=BB95_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_131
.LBB95_165:                             # %for.end721
                                        #   in Loop: Header=BB95_22 Depth=1
	movl	$0, -88(%rbp)
	movl	$0, -24(%rbp)
.LBB95_166:                             # %for.cond722
                                        #   Parent Loop BB95_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB95_168 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB95_173
# %bb.167:                              # %for.body725
                                        #   in Loop: Header=BB95_166 Depth=2
	movl	-64(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB95_168:                             # %for.cond726
                                        #   Parent Loop BB95_22 Depth=1
                                        #     Parent Loop BB95_166 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_171
# %bb.169:                              # %for.body730
                                        #   in Loop: Header=BB95_168 Depth=3
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgY_org, %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
# %bb.170:                              # %for.inc829
                                        #   in Loop: Header=BB95_168 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB95_168
.LBB95_171:                             # %for.end831
                                        #   in Loop: Header=BB95_166 Depth=2
	jmp	.LBB95_172
.LBB95_172:                             # %for.inc832
                                        #   in Loop: Header=BB95_166 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB95_166
.LBB95_173:                             # %for.end834
                                        #   in Loop: Header=BB95_22 Depth=1
	vcvtsi2sdl	-88(%rbp), %xmm0, %xmm0
	vmovsd	-144(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-96(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -136(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB95_219
# %bb.174:                              # %if.then841
                                        #   in Loop: Header=BB95_22 Depth=1
	movl	$0, -16(%rbp)
.LBB95_175:                             # %for.cond842
                                        #   Parent Loop BB95_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB95_177 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB95_182
# %bb.176:                              # %for.body845
                                        #   in Loop: Header=BB95_175 Depth=2
	movl	$0, -12(%rbp)
.LBB95_177:                             # %for.cond846
                                        #   Parent Loop BB95_22 Depth=1
                                        #     Parent Loop BB95_175 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB95_180
# %bb.178:                              # %for.body849
                                        #   in Loop: Header=BB95_177 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.179:                              # %for.inc863
                                        #   in Loop: Header=BB95_177 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_177
.LBB95_180:                             # %for.end865
                                        #   in Loop: Header=BB95_175 Depth=2
	jmp	.LBB95_181
.LBB95_181:                             # %for.inc866
                                        #   in Loop: Header=BB95_175 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_175
.LBB95_182:                             # %for.end868
                                        #   in Loop: Header=BB95_22 Depth=1
	movl	$0, -16(%rbp)
.LBB95_183:                             # %for.cond869
                                        #   Parent Loop BB95_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB95_185 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB95_190
# %bb.184:                              # %for.body872
                                        #   in Loop: Header=BB95_183 Depth=2
	movl	$0, -12(%rbp)
.LBB95_185:                             # %for.cond873
                                        #   Parent Loop BB95_22 Depth=1
                                        #     Parent Loop BB95_183 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB95_188
# %bb.186:                              # %for.body876
                                        #   in Loop: Header=BB95_185 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	movabsq	$cofAC4x4_chroma, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.187:                              # %for.inc891
                                        #   in Loop: Header=BB95_185 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_185
.LBB95_188:                             # %for.end893
                                        #   in Loop: Header=BB95_183 Depth=2
	jmp	.LBB95_189
.LBB95_189:                             # %for.inc894
                                        #   in Loop: Header=BB95_183 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_183
.LBB95_190:                             # %for.end896
                                        #   in Loop: Header=BB95_22 Depth=1
	movl	$0, -16(%rbp)
.LBB95_191:                             # %for.cond897
                                        #   Parent Loop BB95_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB95_193 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB95_198
# %bb.192:                              # %for.body900
                                        #   in Loop: Header=BB95_191 Depth=2
	movl	$0, -12(%rbp)
.LBB95_193:                             # %for.cond901
                                        #   Parent Loop BB95_22 Depth=1
                                        #     Parent Loop BB95_191 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB95_196
# %bb.194:                              # %for.body904
                                        #   in Loop: Header=BB95_193 Depth=3
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	imulq	$72, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.195:                              # %for.inc919
                                        #   in Loop: Header=BB95_193 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_193
.LBB95_196:                             # %for.end921
                                        #   in Loop: Header=BB95_191 Depth=2
	jmp	.LBB95_197
.LBB95_197:                             # %for.inc922
                                        #   in Loop: Header=BB95_191 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_191
.LBB95_198:                             # %for.end924
                                        #   in Loop: Header=BB95_22 Depth=1
	movl	$0, -12(%rbp)
.LBB95_199:                             # %for.cond925
                                        #   Parent Loop BB95_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB95_201 Depth 3
                                        #         Child Loop BB95_203 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB95_210
# %bb.200:                              # %for.body928
                                        #   in Loop: Header=BB95_199 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movl	$0, -24(%rbp)
.LBB95_201:                             # %for.cond985
                                        #   Parent Loop BB95_22 Depth=1
                                        #     Parent Loop BB95_199 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB95_203 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB95_208
# %bb.202:                              # %for.body988
                                        #   in Loop: Header=BB95_201 Depth=3
	movl	$0, -20(%rbp)
.LBB95_203:                             # %for.cond989
                                        #   Parent Loop BB95_22 Depth=1
                                        #     Parent Loop BB95_199 Depth=2
                                        #       Parent Loop BB95_201 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -20(%rbp)
	jge	.LBB95_206
# %bb.204:                              # %for.body992
                                        #   in Loop: Header=BB95_203 Depth=4
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-496(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.205:                              # %for.inc1009
                                        #   in Loop: Header=BB95_203 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB95_203
.LBB95_206:                             # %for.end1011
                                        #   in Loop: Header=BB95_201 Depth=3
	jmp	.LBB95_207
.LBB95_207:                             # %for.inc1012
                                        #   in Loop: Header=BB95_201 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB95_201
.LBB95_208:                             # %for.end1014
                                        #   in Loop: Header=BB95_199 Depth=2
	jmp	.LBB95_209
.LBB95_209:                             # %for.inc1015
                                        #   in Loop: Header=BB95_199 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_199
.LBB95_210:                             # %for.end1017
                                        #   in Loop: Header=BB95_22 Depth=1
	movl	$0, -24(%rbp)
.LBB95_211:                             # %for.cond1018
                                        #   Parent Loop BB95_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB95_213 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB95_218
# %bb.212:                              # %for.body1021
                                        #   in Loop: Header=BB95_211 Depth=2
	movl	$0, -20(%rbp)
.LBB95_213:                             # %for.cond1022
                                        #   Parent Loop BB95_22 Depth=1
                                        #     Parent Loop BB95_211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB95_216
# %bb.214:                              # %for.body1025
                                        #   in Loop: Header=BB95_213 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.215:                              # %for.inc1038
                                        #   in Loop: Header=BB95_213 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB95_213
.LBB95_216:                             # %for.end1040
                                        #   in Loop: Header=BB95_211 Depth=2
	jmp	.LBB95_217
.LBB95_217:                             # %for.inc1041
                                        #   in Loop: Header=BB95_211 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB95_211
.LBB95_218:                             # %for.end1043
                                        #   in Loop: Header=BB95_22 Depth=1
	movl	-116(%rbp), %eax
	movl	%eax, -92(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB95_219:                             # %if.end1044
                                        #   in Loop: Header=BB95_22 Depth=1
	jmp	.LBB95_220
.LBB95_220:                             # %if.end1045
                                        #   in Loop: Header=BB95_22 Depth=1
	jmp	.LBB95_221
.LBB95_221:                             # %if.end1046
                                        #   in Loop: Header=BB95_22 Depth=1
	jmp	.LBB95_222
.LBB95_222:                             # %if.end1047
                                        #   in Loop: Header=BB95_22 Depth=1
	jmp	.LBB95_223
.LBB95_223:                             # %for.inc1048
                                        #   in Loop: Header=BB95_22 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB95_22
.LBB95_224:                             # %for.end1050
	movl	-60(%rbp), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-176(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-180(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB95_226
# %bb.225:                              # %cond.true1058
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB95_230
.LBB95_226:                             # %cond.false1059
	movl	-60(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB95_228
# %bb.227:                              # %cond.true1062
	movl	-60(%rbp), %eax
	jmp	.LBB95_229
.LBB95_228:                             # %cond.false1063
	movl	-60(%rbp), %eax
	subl	$1, %eax
.LBB95_229:                             # %cond.end1065
.LBB95_230:                             # %cond.end1067
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	shll	$2, %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, 332(%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB95_318
# %bb.231:                              # %if.then1079
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB95_241
# %bb.232:                              # %if.then1082
	movl	$0, -16(%rbp)
.LBB95_233:                             # %for.cond1083
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_235 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB95_240
# %bb.234:                              # %for.body1086
                                        #   in Loop: Header=BB95_233 Depth=1
	movl	$0, -12(%rbp)
.LBB95_235:                             # %for.cond1087
                                        #   Parent Loop BB95_233 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB95_238
# %bb.236:                              # %for.body1090
                                        #   in Loop: Header=BB95_235 Depth=2
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.237:                              # %for.inc1126
                                        #   in Loop: Header=BB95_235 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_235
.LBB95_238:                             # %for.end1128
                                        #   in Loop: Header=BB95_233 Depth=1
	jmp	.LBB95_239
.LBB95_239:                             # %for.inc1129
                                        #   in Loop: Header=BB95_233 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_233
.LBB95_240:                             # %for.end1131
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	leaq	-160(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -92(%rbp)
	jmp	.LBB95_317
.LBB95_241:                             # %if.else1133
	movl	$0, -16(%rbp)
.LBB95_242:                             # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_244 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB95_249
# %bb.243:                              # %for.body1137
                                        #   in Loop: Header=BB95_242 Depth=1
	movl	$0, -12(%rbp)
.LBB95_244:                             # %for.cond1138
                                        #   Parent Loop BB95_242 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB95_247
# %bb.245:                              # %for.body1141
                                        #   in Loop: Header=BB95_244 Depth=2
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.246:                              # %for.inc1224
                                        #   in Loop: Header=BB95_244 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_244
.LBB95_247:                             # %for.end1226
                                        #   in Loop: Header=BB95_242 Depth=1
	jmp	.LBB95_248
.LBB95_248:                             # %for.inc1227
                                        #   in Loop: Header=BB95_242 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_242
.LBB95_249:                             # %for.end1229
	movl	$0, -16(%rbp)
.LBB95_250:                             # %for.cond1230
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_252 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB95_257
# %bb.251:                              # %for.body1233
                                        #   in Loop: Header=BB95_250 Depth=1
	movl	$0, -12(%rbp)
.LBB95_252:                             # %for.cond1234
                                        #   Parent Loop BB95_250 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB95_255
# %bb.253:                              # %for.body1237
                                        #   in Loop: Header=BB95_252 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.254:                              # %for.inc1247
                                        #   in Loop: Header=BB95_252 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_252
.LBB95_255:                             # %for.end1249
                                        #   in Loop: Header=BB95_250 Depth=1
	jmp	.LBB95_256
.LBB95_256:                             # %for.inc1250
                                        #   in Loop: Header=BB95_250 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_250
.LBB95_257:                             # %for.end1252
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	leaq	-160(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -92(%rbp)
	movl	$0, -16(%rbp)
.LBB95_258:                             # %for.cond1254
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_260 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB95_265
# %bb.259:                              # %for.body1257
                                        #   in Loop: Header=BB95_258 Depth=1
	movl	$0, -12(%rbp)
.LBB95_260:                             # %for.cond1258
                                        #   Parent Loop BB95_258 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB95_263
# %bb.261:                              # %for.body1261
                                        #   in Loop: Header=BB95_260 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.262:                              # %for.inc1280
                                        #   in Loop: Header=BB95_260 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_260
.LBB95_263:                             # %for.end1282
                                        #   in Loop: Header=BB95_258 Depth=1
	jmp	.LBB95_264
.LBB95_264:                             # %for.inc1283
                                        #   in Loop: Header=BB95_258 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_258
.LBB95_265:                             # %for.end1285
	movl	-28(%rbp), %esi
	addl	$4, %esi
	movl	-32(%rbp), %edx
	xorl	%edi, %edi
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%edx, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rbx,%rax,4)
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level_temp, %rsi
	addq	%rax, %rsi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rsi,%rax,4), %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%rbx,%rax,4)
	movl	$0, -16(%rbp)
.LBB95_266:                             # %for.cond1324
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_268 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB95_273
# %bb.267:                              # %for.body1327
                                        #   in Loop: Header=BB95_266 Depth=1
	movl	$0, -12(%rbp)
.LBB95_268:                             # %for.cond1328
                                        #   Parent Loop BB95_266 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB95_271
# %bb.269:                              # %for.body1331
                                        #   in Loop: Header=BB95_268 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.270:                              # %for.inc1350
                                        #   in Loop: Header=BB95_268 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_268
.LBB95_271:                             # %for.end1352
                                        #   in Loop: Header=BB95_266 Depth=1
	jmp	.LBB95_272
.LBB95_272:                             # %for.inc1353
                                        #   in Loop: Header=BB95_266 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_266
.LBB95_273:                             # %for.end1355
	movl	-28(%rbp), %esi
	addl	$8, %esi
	movl	-32(%rbp), %edx
	movl	$1, %edi
	callq	dct_chroma4x4
	movl	%eax, %r9d
	movabsq	$dc_level, %r8
	addq	$64, %r8
	movabsq	$dc_level_temp, %rdi
	addq	$64, %rdi
	movabsq	$cbp_chroma_block, %rcx
	addq	$64, %rcx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%r9d, (%rcx,%rax,4)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%r8,%rax,4)
	movl	$0, -16(%rbp)
.LBB95_274:                             # %for.cond1394
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_276 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB95_281
# %bb.275:                              # %for.body1397
                                        #   in Loop: Header=BB95_274 Depth=1
	movl	$0, -12(%rbp)
.LBB95_276:                             # %for.cond1398
                                        #   Parent Loop BB95_274 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB95_279
# %bb.277:                              # %for.body1401
                                        #   in Loop: Header=BB95_276 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.278:                              # %for.inc1411
                                        #   in Loop: Header=BB95_276 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_276
.LBB95_279:                             # %for.end1413
                                        #   in Loop: Header=BB95_274 Depth=1
	jmp	.LBB95_280
.LBB95_280:                             # %for.inc1414
                                        #   in Loop: Header=BB95_274 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_274
.LBB95_281:                             # %for.end1416
	movl	$0, -16(%rbp)
.LBB95_282:                             # %for.cond1417
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_284 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB95_316
# %bb.283:                              # %for.body1420
                                        #   in Loop: Header=BB95_282 Depth=1
	movl	$0, -12(%rbp)
.LBB95_284:                             # %for.cond1421
                                        #   Parent Loop BB95_282 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB95_314
# %bb.285:                              # %for.body1424
                                        #   in Loop: Header=BB95_284 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -72(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -68(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB95_287
# %bb.286:                              # %cond.true1466
                                        #   in Loop: Header=BB95_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB95_288
.LBB95_287:                             # %cond.false1467
                                        #   in Loop: Header=BB95_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB95_288:                             # %cond.end1480
                                        #   in Loop: Header=BB95_284 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB95_290
# %bb.289:                              # %cond.true1484
                                        #   in Loop: Header=BB95_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB95_294
.LBB95_290:                             # %cond.false1486
                                        #   in Loop: Header=BB95_284 Depth=2
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB95_292
# %bb.291:                              # %cond.true1501
                                        #   in Loop: Header=BB95_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB95_293
.LBB95_292:                             # %cond.false1502
                                        #   in Loop: Header=BB95_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB95_293:                             # %cond.end1515
                                        #   in Loop: Header=BB95_284 Depth=2
.LBB95_294:                             # %cond.end1517
                                        #   in Loop: Header=BB95_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-60(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB95_296
# %bb.295:                              # %cond.true1540
                                        #   in Loop: Header=BB95_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB95_297
.LBB95_296:                             # %cond.false1541
                                        #   in Loop: Header=BB95_284 Depth=2
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB95_297:                             # %cond.end1551
                                        #   in Loop: Header=BB95_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB95_299
# %bb.298:                              # %cond.true1555
                                        #   in Loop: Header=BB95_284 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_303
.LBB95_299:                             # %cond.false1557
                                        #   in Loop: Header=BB95_284 Depth=2
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB95_301
# %bb.300:                              # %cond.true1569
                                        #   in Loop: Header=BB95_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB95_302
.LBB95_301:                             # %cond.false1570
                                        #   in Loop: Header=BB95_284 Depth=2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB95_302:                             # %cond.end1580
                                        #   in Loop: Header=BB95_284 Depth=2
.LBB95_303:                             # %cond.end1582
                                        #   in Loop: Header=BB95_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB95_305
# %bb.304:                              # %cond.true1607
                                        #   in Loop: Header=BB95_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB95_306
.LBB95_305:                             # %cond.false1608
                                        #   in Loop: Header=BB95_284 Depth=2
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB95_306:                             # %cond.end1621
                                        #   in Loop: Header=BB95_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB95_308
# %bb.307:                              # %cond.true1625
                                        #   in Loop: Header=BB95_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB95_312
.LBB95_308:                             # %cond.false1627
                                        #   in Loop: Header=BB95_284 Depth=2
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB95_310
# %bb.309:                              # %cond.true1642
                                        #   in Loop: Header=BB95_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB95_311
.LBB95_310:                             # %cond.false1643
                                        #   in Loop: Header=BB95_284 Depth=2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB95_311:                             # %cond.end1656
                                        #   in Loop: Header=BB95_284 Depth=2
.LBB95_312:                             # %cond.end1658
                                        #   in Loop: Header=BB95_284 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.313:                              # %for.inc1669
                                        #   in Loop: Header=BB95_284 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_284
.LBB95_314:                             # %for.end1671
                                        #   in Loop: Header=BB95_282 Depth=1
	jmp	.LBB95_315
.LBB95_315:                             # %for.inc1672
                                        #   in Loop: Header=BB95_282 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_282
.LBB95_316:                             # %for.end1674
	jmp	.LBB95_317
.LBB95_317:                             # %if.end1675
	jmp	.LBB95_367
.LBB95_318:                             # %if.else1676
	movl	$0, -16(%rbp)
.LBB95_319:                             # %for.cond1677
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_321 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB95_326
# %bb.320:                              # %for.body1680
                                        #   in Loop: Header=BB95_319 Depth=1
	movl	$0, -12(%rbp)
.LBB95_321:                             # %for.cond1681
                                        #   Parent Loop BB95_319 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB95_324
# %bb.322:                              # %for.body1684
                                        #   in Loop: Header=BB95_321 Depth=2
	movq	cofAC4x4, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.323:                              # %for.inc1698
                                        #   in Loop: Header=BB95_321 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_321
.LBB95_324:                             # %for.end1700
                                        #   in Loop: Header=BB95_319 Depth=1
	jmp	.LBB95_325
.LBB95_325:                             # %for.inc1701
                                        #   in Loop: Header=BB95_319 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_319
.LBB95_326:                             # %for.end1703
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB95_344
# %bb.327:                              # %if.then1706
	movl	$0, -16(%rbp)
.LBB95_328:                             # %for.cond1707
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_330 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB95_335
# %bb.329:                              # %for.body1710
                                        #   in Loop: Header=BB95_328 Depth=1
	movl	$0, -12(%rbp)
.LBB95_330:                             # %for.cond1711
                                        #   Parent Loop BB95_328 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB95_333
# %bb.331:                              # %for.body1714
                                        #   in Loop: Header=BB95_330 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$72, %rax, %rax
	movabsq	$cofAC4x4_chroma, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.332:                              # %for.inc1729
                                        #   in Loop: Header=BB95_330 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_330
.LBB95_333:                             # %for.end1731
                                        #   in Loop: Header=BB95_328 Depth=1
	jmp	.LBB95_334
.LBB95_334:                             # %for.inc1732
                                        #   in Loop: Header=BB95_328 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_328
.LBB95_335:                             # %for.end1734
	movl	$0, -16(%rbp)
.LBB95_336:                             # %for.cond1735
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_338 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB95_343
# %bb.337:                              # %for.body1738
                                        #   in Loop: Header=BB95_336 Depth=1
	movl	$0, -12(%rbp)
.LBB95_338:                             # %for.cond1739
                                        #   Parent Loop BB95_336 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB95_341
# %bb.339:                              # %for.body1742
                                        #   in Loop: Header=BB95_338 Depth=2
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.340:                              # %for.inc1757
                                        #   in Loop: Header=BB95_338 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_338
.LBB95_341:                             # %for.end1759
                                        #   in Loop: Header=BB95_336 Depth=1
	jmp	.LBB95_342
.LBB95_342:                             # %for.inc1760
                                        #   in Loop: Header=BB95_336 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_336
.LBB95_343:                             # %for.end1762
	jmp	.LBB95_344
.LBB95_344:                             # %if.end1763
	movl	$0, -24(%rbp)
.LBB95_345:                             # %for.cond1764
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_347 Depth 2
	cmpl	$4, -24(%rbp)
	jge	.LBB95_352
# %bb.346:                              # %for.body1767
                                        #   in Loop: Header=BB95_345 Depth=1
	movl	$0, -20(%rbp)
.LBB95_347:                             # %for.cond1768
                                        #   Parent Loop BB95_345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB95_350
# %bb.348:                              # %for.body1771
                                        #   in Loop: Header=BB95_347 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.349:                              # %for.inc1798
                                        #   in Loop: Header=BB95_347 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB95_347
.LBB95_350:                             # %for.end1800
                                        #   in Loop: Header=BB95_345 Depth=1
	jmp	.LBB95_351
.LBB95_351:                             # %for.inc1801
                                        #   in Loop: Header=BB95_345 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB95_345
.LBB95_352:                             # %for.end1803
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB95_366
# %bb.353:                              # %if.then1806
	movl	$0, -12(%rbp)
.LBB95_354:                             # %for.cond1807
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_356 Depth 2
                                        #       Child Loop BB95_358 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB95_365
# %bb.355:                              # %for.body1810
                                        #   in Loop: Header=BB95_354 Depth=1
	movl	$0, -24(%rbp)
.LBB95_356:                             # %for.cond1811
                                        #   Parent Loop BB95_354 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB95_358 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB95_363
# %bb.357:                              # %for.body1814
                                        #   in Loop: Header=BB95_356 Depth=2
	movl	$0, -20(%rbp)
.LBB95_358:                             # %for.cond1815
                                        #   Parent Loop BB95_354 Depth=1
                                        #     Parent Loop BB95_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB95_361
# %bb.359:                              # %for.body1818
                                        #   in Loop: Header=BB95_358 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	leaq	-496(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.360:                              # %for.inc1835
                                        #   in Loop: Header=BB95_358 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB95_358
.LBB95_361:                             # %for.end1837
                                        #   in Loop: Header=BB95_356 Depth=2
	jmp	.LBB95_362
.LBB95_362:                             # %for.inc1838
                                        #   in Loop: Header=BB95_356 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB95_356
.LBB95_363:                             # %for.end1840
                                        #   in Loop: Header=BB95_354 Depth=1
	jmp	.LBB95_364
.LBB95_364:                             # %for.inc1841
                                        #   in Loop: Header=BB95_354 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_354
.LBB95_365:                             # %for.end1843
	jmp	.LBB95_366
.LBB95_366:                             # %if.end1844
	jmp	.LBB95_367
.LBB95_367:                             # %if.end1845
	movl	-92(%rbp), %ebx
	cmpl	$1975700332, -164(%rbp) # imm = 0x75C2CB6C
	jne	.LBB95_369
.LBB95_368:
	movl	%ebx, %eax
	addq	$488, %rsp              # imm = 0x1E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB95_369:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB95_368
.Lfunc_end95:
	.size	Mode_Decision_for_4x4IntraBlocks.66, .Lfunc_end95-Mode_Decision_for_4x4IntraBlocks.66
	.cfi_endproc
                                        # -- End function
	.globl	store_macroblock_parameters.67 # -- Begin function store_macroblock_parameters.67
	.p2align	4, 0x90
	.type	store_macroblock_parameters.67,@function
store_macroblock_parameters.67:         # @store_macroblock_parameters.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$181733402, -36(%rbp)   # imm = 0xAD5081A
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, best_mode
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movl	%eax, best_c_imode
	movq	img, %rax
	movl	72380(%rax), %eax
	movl	%eax, best_i16offset
	cmpl	$1, -28(%rbp)
	jne	.LBB96_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movl	%eax, bi_pred_me
	jmp	.LBB96_3
.LBB96_2:                               # %if.else
	movl	$0, bi_pred_me
.LBB96_3:                               # %if.end
	movl	$0, -4(%rbp)
.LBB96_4:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB96_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB96_4 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8mode(,%rcx,2)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8pdir(,%rcx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB96_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_4
.LBB96_7:                               # %for.end
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB96_8:                               # %for.cond15
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_10 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB96_15
# %bb.9:                                # %for.body19
                                        #   in Loop: Header=BB96_8 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB96_10:                              # %for.cond20
                                        #   Parent Loop BB96_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB96_13
# %bb.11:                               # %for.body25
                                        #   in Loop: Header=BB96_10 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_ipredmode(,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_intra_pred_modes(,%rcx,4)
# %bb.12:                               # %for.inc36
                                        #   in Loop: Header=BB96_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB96_10
.LBB96_13:                              # %for.end39
                                        #   in Loop: Header=BB96_8 Depth=1
	jmp	.LBB96_14
.LBB96_14:                              # %for.inc40
                                        #   in Loop: Header=BB96_8 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_8
.LBB96_15:                              # %for.end42
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB96_16:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_18 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB96_23
# %bb.17:                               # %for.body46
                                        #   in Loop: Header=BB96_16 Depth=1
	movl	$0, -8(%rbp)
.LBB96_18:                              # %for.cond47
                                        #   Parent Loop BB96_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB96_21
# %bb.19:                               # %for.body50
                                        #   in Loop: Header=BB96_18 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$b8_ipredmode8x8, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b8_intra_pred_modes8x8(,%rcx,4)
# %bb.20:                               # %for.inc67
                                        #   in Loop: Header=BB96_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB96_18
.LBB96_21:                              # %for.end70
                                        #   in Loop: Header=BB96_16 Depth=1
	jmp	.LBB96_22
.LBB96_22:                              # %for.inc71
                                        #   in Loop: Header=BB96_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_16
.LBB96_23:                              # %for.end73
	movl	$0, -8(%rbp)
.LBB96_24:                              # %for.cond74
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_26 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB96_31
# %bb.25:                               # %for.body77
                                        #   in Loop: Header=BB96_24 Depth=1
	movl	$0, -4(%rbp)
.LBB96_26:                              # %for.cond78
                                        #   Parent Loop BB96_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB96_29
# %bb.27:                               # %for.body81
                                        #   in Loop: Header=BB96_26 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.28:                               # %for.inc92
                                        #   in Loop: Header=BB96_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_26
.LBB96_29:                              # %for.end94
                                        #   in Loop: Header=BB96_24 Depth=1
	jmp	.LBB96_30
.LBB96_30:                              # %for.inc95
                                        #   in Loop: Header=BB96_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_24
.LBB96_31:                              # %for.end97
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB96_41
# %bb.32:                               # %if.then100
	movl	$0, -8(%rbp)
.LBB96_33:                              # %for.cond101
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_35 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB96_40
# %bb.34:                               # %for.body104
                                        #   in Loop: Header=BB96_33 Depth=1
	movl	$0, -4(%rbp)
.LBB96_35:                              # %for.cond105
                                        #   Parent Loop BB96_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB96_38
# %bb.36:                               # %for.body108
                                        #   in Loop: Header=BB96_35 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbU, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbV, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.37:                               # %for.inc134
                                        #   in Loop: Header=BB96_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_35
.LBB96_38:                              # %for.end136
                                        #   in Loop: Header=BB96_33 Depth=1
	jmp	.LBB96_39
.LBB96_39:                              # %for.inc137
                                        #   in Loop: Header=BB96_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_33
.LBB96_40:                              # %for.end139
	jmp	.LBB96_41
.LBB96_41:                              # %if.end140
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB96_56
# %bb.42:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB96_56
# %bb.43:                               # %if.then146
	movl	$0, -12(%rbp)
.LBB96_44:                              # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_46 Depth 2
                                        #       Child Loop BB96_48 Depth 3
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB96_55
# %bb.45:                               # %for.body150
                                        #   in Loop: Header=BB96_44 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB96_46:                              # %for.cond152
                                        #   Parent Loop BB96_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB96_48 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB96_53
# %bb.47:                               # %for.body157
                                        #   in Loop: Header=BB96_46 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB96_48:                              # %for.cond159
                                        #   Parent Loop BB96_44 Depth=1
                                        #     Parent Loop BB96_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB96_51
# %bb.49:                               # %for.body164
                                        #   in Loop: Header=BB96_48 Depth=3
	movq	decs, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	24(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc177
                                        #   in Loop: Header=BB96_48 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_48
.LBB96_51:                              # %for.end179
                                        #   in Loop: Header=BB96_46 Depth=2
	jmp	.LBB96_52
.LBB96_52:                              # %for.inc180
                                        #   in Loop: Header=BB96_46 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_46
.LBB96_53:                              # %for.end182
                                        #   in Loop: Header=BB96_44 Depth=1
	jmp	.LBB96_54
.LBB96_54:                              # %for.inc183
                                        #   in Loop: Header=BB96_44 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB96_44
.LBB96_55:                              # %for.end185
	jmp	.LBB96_56
.LBB96_56:                              # %if.end186
	cmpl	$0, -28(%rbp)
	jne	.LBB96_58
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -32(%rbp)
	je	.LBB96_59
.LBB96_58:                              # %if.then188
	movq	cofAC, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-48(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-56(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, cbp
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	%rax, cbp_blk
	jmp	.LBB96_60
.LBB96_59:                              # %if.else191
	movl	$0, cbp
	movq	$0, cbp_blk
.LBB96_60:                              # %if.end192
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, luma_transform_size_8x8_flag
	movl	$0, -8(%rbp)
.LBB96_61:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB96_70
# %bb.62:                               # %for.body196
                                        #   in Loop: Header=BB96_61 Depth=1
	movl	$0, -4(%rbp)
.LBB96_63:                              # %for.cond197
                                        #   Parent Loop BB96_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB96_68
# %bb.64:                               # %for.body200
                                        #   in Loop: Header=BB96_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$frefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -32(%rbp)
	je	.LBB96_66
# %bb.65:                               # %if.then215
                                        #   in Loop: Header=BB96_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$brefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB96_66:                              # %if.end230
                                        #   in Loop: Header=BB96_63 Depth=2
	jmp	.LBB96_67
.LBB96_67:                              # %for.inc231
                                        #   in Loop: Header=BB96_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_63
.LBB96_68:                              # %for.end233
                                        #   in Loop: Header=BB96_61 Depth=1
	jmp	.LBB96_69
.LBB96_69:                              # %for.inc234
                                        #   in Loop: Header=BB96_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_61
.LBB96_70:                              # %for.end236
	cmpl	$181733402, -36(%rbp)   # imm = 0xAD5081A
	jne	.LBB96_72
.LBB96_71:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB96_72:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB96_71
.Lfunc_end96:
	.size	store_macroblock_parameters.67, .Lfunc_end96-store_macroblock_parameters.67
	.cfi_endproc
                                        # -- End function
	.globl	Intra16x16_Mode_Decision.68 # -- Begin function Intra16x16_Mode_Decision.68
	.p2align	4, 0x90
	.type	Intra16x16_Mode_Decision.68,@function
Intra16x16_Mode_Decision.68:            # @Intra16x16_Mode_Decision.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1615354852, -56(%rbp)  # imm = 0x60485BE4
	movq	%rdi, -72(%rbp)
	movq	%rsi, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	imgY_org, %rax
	movq	%rax, -80(%rbp)
	movq	imgUV_org, %rax
	movq	%rax, -64(%rbp)
	movb	$0, %al
	callq	intrapred_luma_16x16
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB97_2
# %bb.1:                                # %if.then
	movq	-48(%rbp), %rdi
	callq	find_sad_16x16
.LBB97_2:                               # %if.end
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB97_12
# %bb.3:                                # %if.then3
	movl	$0, -8(%rbp)
.LBB97_4:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_6 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB97_11
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB97_4 Depth=1
	movl	$0, -4(%rbp)
.LBB97_6:                               # %for.cond4
                                        #   Parent Loop BB97_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB97_9
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB97_6 Depth=2
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movq	-80(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -32(%rbp)
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -36(%rbp)
	movl	-32(%rbp), %eax
	subl	-36(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-36(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB97_6 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_6
.LBB97_9:                               # %for.end
                                        #   in Loop: Header=BB97_4 Depth=1
	jmp	.LBB97_10
.LBB97_10:                              # %for.inc87
                                        #   in Loop: Header=BB97_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB97_4
.LBB97_11:                              # %for.end89
	jmp	.LBB97_12
.LBB97_12:                              # %if.end90
	movq	-48(%rbp), %rax
	movl	(%rax), %edi
	callq	dct_luma_16x16
	movq	-72(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB97_73
# %bb.13:                               # %if.then94
	movl	$0, -8(%rbp)
.LBB97_14:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_16 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB97_21
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB97_14 Depth=1
	movl	$0, -4(%rbp)
.LBB97_16:                              # %for.cond99
                                        #   Parent Loop BB97_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB97_19
# %bb.17:                               # %for.body102
                                        #   in Loop: Header=BB97_16 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.18:                               # %for.inc121
                                        #   in Loop: Header=BB97_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_16
.LBB97_19:                              # %for.end123
                                        #   in Loop: Header=BB97_14 Depth=1
	jmp	.LBB97_20
.LBB97_20:                              # %for.inc124
                                        #   in Loop: Header=BB97_14 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB97_14
.LBB97_21:                              # %for.end126
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB97_22:                              # %for.cond128
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_24 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB97_29
# %bb.23:                               # %for.body131
                                        #   in Loop: Header=BB97_22 Depth=1
	movl	$0, -4(%rbp)
.LBB97_24:                              # %for.cond132
                                        #   Parent Loop BB97_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB97_27
# %bb.25:                               # %for.body135
                                        #   in Loop: Header=BB97_24 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.26:                               # %for.inc154
                                        #   in Loop: Header=BB97_24 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_24
.LBB97_27:                              # %for.end156
                                        #   in Loop: Header=BB97_22 Depth=1
	jmp	.LBB97_28
.LBB97_28:                              # %for.inc157
                                        #   in Loop: Header=BB97_22 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB97_22
.LBB97_29:                              # %for.end159
	movl	-52(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB97_30:                              # %for.cond161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_32 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB97_37
# %bb.31:                               # %for.body164
                                        #   in Loop: Header=BB97_30 Depth=1
	movl	$0, -4(%rbp)
.LBB97_32:                              # %for.cond165
                                        #   Parent Loop BB97_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB97_35
# %bb.33:                               # %for.body168
                                        #   in Loop: Header=BB97_32 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.34:                               # %for.inc178
                                        #   in Loop: Header=BB97_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_32
.LBB97_35:                              # %for.end180
                                        #   in Loop: Header=BB97_30 Depth=1
	jmp	.LBB97_36
.LBB97_36:                              # %for.inc181
                                        #   in Loop: Header=BB97_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB97_30
.LBB97_37:                              # %for.end183
	movl	-52(%rbp), %eax
	shll	$4, %eax
	movq	-72(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -8(%rbp)
.LBB97_38:                              # %for.cond186
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_40 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB97_72
# %bb.39:                               # %for.body189
                                        #   in Loop: Header=BB97_38 Depth=1
	movl	$0, -4(%rbp)
.LBB97_40:                              # %for.cond190
                                        #   Parent Loop BB97_38 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB97_70
# %bb.41:                               # %for.body193
                                        #   in Loop: Header=BB97_40 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-36(%rbp), %ecx
	movl	%ecx, -32(%rbp)
	movl	-36(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -16(%rbp)
	movl	-16(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -20(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB97_43
# %bb.42:                               # %cond.true
                                        #   in Loop: Header=BB97_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB97_44
.LBB97_43:                              # %cond.false
                                        #   in Loop: Header=BB97_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB97_44:                              # %cond.end
                                        #   in Loop: Header=BB97_40 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB97_46
# %bb.45:                               # %cond.true244
                                        #   in Loop: Header=BB97_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB97_50
.LBB97_46:                              # %cond.false246
                                        #   in Loop: Header=BB97_40 Depth=2
	xorl	%eax, %eax
	movl	-16(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB97_48
# %bb.47:                               # %cond.true259
                                        #   in Loop: Header=BB97_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB97_49
.LBB97_48:                              # %cond.false260
                                        #   in Loop: Header=BB97_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB97_49:                              # %cond.end271
                                        #   in Loop: Header=BB97_40 Depth=2
.LBB97_50:                              # %cond.end273
                                        #   in Loop: Header=BB97_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-28(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-24(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-32(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movq	-48(%rbp), %rdi
	movslq	(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB97_52
# %bb.51:                               # %cond.true294
                                        #   in Loop: Header=BB97_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB97_53
.LBB97_52:                              # %cond.false295
                                        #   in Loop: Header=BB97_40 Depth=2
	movl	-32(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB97_53:                              # %cond.end305
                                        #   in Loop: Header=BB97_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB97_55
# %bb.54:                               # %cond.true309
                                        #   in Loop: Header=BB97_40 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_59
.LBB97_55:                              # %cond.false311
                                        #   in Loop: Header=BB97_40 Depth=2
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB97_57
# %bb.56:                               # %cond.true323
                                        #   in Loop: Header=BB97_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB97_58
.LBB97_57:                              # %cond.false324
                                        #   in Loop: Header=BB97_40 Depth=2
	movl	-32(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB97_58:                              # %cond.end334
                                        #   in Loop: Header=BB97_40 Depth=2
.LBB97_59:                              # %cond.end336
                                        #   in Loop: Header=BB97_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-28(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-24(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-20(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB97_61
# %bb.60:                               # %cond.true358
                                        #   in Loop: Header=BB97_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB97_62
.LBB97_61:                              # %cond.false359
                                        #   in Loop: Header=BB97_40 Depth=2
	movl	-20(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB97_62:                              # %cond.end370
                                        #   in Loop: Header=BB97_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB97_64
# %bb.63:                               # %cond.true374
                                        #   in Loop: Header=BB97_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB97_68
.LBB97_64:                              # %cond.false376
                                        #   in Loop: Header=BB97_40 Depth=2
	xorl	%eax, %eax
	movl	-20(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB97_66
# %bb.65:                               # %cond.true389
                                        #   in Loop: Header=BB97_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB97_67
.LBB97_66:                              # %cond.false390
                                        #   in Loop: Header=BB97_40 Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB97_67:                              # %cond.end401
                                        #   in Loop: Header=BB97_40 Depth=2
.LBB97_68:                              # %cond.end403
                                        #   in Loop: Header=BB97_40 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-24(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc414
                                        #   in Loop: Header=BB97_40 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_40
.LBB97_70:                              # %for.end416
                                        #   in Loop: Header=BB97_38 Depth=1
	jmp	.LBB97_71
.LBB97_71:                              # %for.inc417
                                        #   in Loop: Header=BB97_38 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB97_38
.LBB97_72:                              # %for.end419
	jmp	.LBB97_73
.LBB97_73:                              # %if.end420
	cmpl	$1615354852, -56(%rbp)  # imm = 0x60485BE4
	jne	.LBB97_75
.LBB97_74:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB97_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB97_74
.Lfunc_end97:
	.size	Intra16x16_Mode_Decision.68, .Lfunc_end97-Intra16x16_Mode_Decision.68
	.cfi_endproc
                                        # -- End function
	.globl	store_macroblock_parameters.69 # -- Begin function store_macroblock_parameters.69
	.p2align	4, 0x90
	.type	store_macroblock_parameters.69,@function
store_macroblock_parameters.69:         # @store_macroblock_parameters.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$961113786, -36(%rbp)   # imm = 0x39496EBA
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, best_mode
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movl	%eax, best_c_imode
	movq	img, %rax
	movl	72380(%rax), %eax
	movl	%eax, best_i16offset
	cmpl	$1, -28(%rbp)
	jne	.LBB98_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movl	%eax, bi_pred_me
	jmp	.LBB98_3
.LBB98_2:                               # %if.else
	movl	$0, bi_pred_me
.LBB98_3:                               # %if.end
	movl	$0, -4(%rbp)
.LBB98_4:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB98_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB98_4 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8mode(,%rcx,2)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8pdir(,%rcx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB98_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_4
.LBB98_7:                               # %for.end
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB98_8:                               # %for.cond15
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_10 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_15
# %bb.9:                                # %for.body19
                                        #   in Loop: Header=BB98_8 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB98_10:                              # %for.cond20
                                        #   Parent Loop BB98_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_13
# %bb.11:                               # %for.body25
                                        #   in Loop: Header=BB98_10 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_ipredmode(,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_intra_pred_modes(,%rcx,4)
# %bb.12:                               # %for.inc36
                                        #   in Loop: Header=BB98_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB98_10
.LBB98_13:                              # %for.end39
                                        #   in Loop: Header=BB98_8 Depth=1
	jmp	.LBB98_14
.LBB98_14:                              # %for.inc40
                                        #   in Loop: Header=BB98_8 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_8
.LBB98_15:                              # %for.end42
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB98_16:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_18 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB98_23
# %bb.17:                               # %for.body46
                                        #   in Loop: Header=BB98_16 Depth=1
	movl	$0, -8(%rbp)
.LBB98_18:                              # %for.cond47
                                        #   Parent Loop BB98_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB98_21
# %bb.19:                               # %for.body50
                                        #   in Loop: Header=BB98_18 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$b8_ipredmode8x8, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b8_intra_pred_modes8x8(,%rcx,4)
# %bb.20:                               # %for.inc67
                                        #   in Loop: Header=BB98_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB98_18
.LBB98_21:                              # %for.end70
                                        #   in Loop: Header=BB98_16 Depth=1
	jmp	.LBB98_22
.LBB98_22:                              # %for.inc71
                                        #   in Loop: Header=BB98_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_16
.LBB98_23:                              # %for.end73
	movl	$0, -8(%rbp)
.LBB98_24:                              # %for.cond74
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_26 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB98_31
# %bb.25:                               # %for.body77
                                        #   in Loop: Header=BB98_24 Depth=1
	movl	$0, -4(%rbp)
.LBB98_26:                              # %for.cond78
                                        #   Parent Loop BB98_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB98_29
# %bb.27:                               # %for.body81
                                        #   in Loop: Header=BB98_26 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.28:                               # %for.inc92
                                        #   in Loop: Header=BB98_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_26
.LBB98_29:                              # %for.end94
                                        #   in Loop: Header=BB98_24 Depth=1
	jmp	.LBB98_30
.LBB98_30:                              # %for.inc95
                                        #   in Loop: Header=BB98_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_24
.LBB98_31:                              # %for.end97
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB98_41
# %bb.32:                               # %if.then100
	movl	$0, -8(%rbp)
.LBB98_33:                              # %for.cond101
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_35 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB98_40
# %bb.34:                               # %for.body104
                                        #   in Loop: Header=BB98_33 Depth=1
	movl	$0, -4(%rbp)
.LBB98_35:                              # %for.cond105
                                        #   Parent Loop BB98_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB98_38
# %bb.36:                               # %for.body108
                                        #   in Loop: Header=BB98_35 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbU, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbV, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.37:                               # %for.inc134
                                        #   in Loop: Header=BB98_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_35
.LBB98_38:                              # %for.end136
                                        #   in Loop: Header=BB98_33 Depth=1
	jmp	.LBB98_39
.LBB98_39:                              # %for.inc137
                                        #   in Loop: Header=BB98_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_33
.LBB98_40:                              # %for.end139
	jmp	.LBB98_41
.LBB98_41:                              # %if.end140
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB98_56
# %bb.42:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB98_56
# %bb.43:                               # %if.then146
	movl	$0, -12(%rbp)
.LBB98_44:                              # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_46 Depth 2
                                        #       Child Loop BB98_48 Depth 3
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB98_55
# %bb.45:                               # %for.body150
                                        #   in Loop: Header=BB98_44 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB98_46:                              # %for.cond152
                                        #   Parent Loop BB98_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_48 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_53
# %bb.47:                               # %for.body157
                                        #   in Loop: Header=BB98_46 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB98_48:                              # %for.cond159
                                        #   Parent Loop BB98_44 Depth=1
                                        #     Parent Loop BB98_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_51
# %bb.49:                               # %for.body164
                                        #   in Loop: Header=BB98_48 Depth=3
	movq	decs, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	24(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc177
                                        #   in Loop: Header=BB98_48 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_48
.LBB98_51:                              # %for.end179
                                        #   in Loop: Header=BB98_46 Depth=2
	jmp	.LBB98_52
.LBB98_52:                              # %for.inc180
                                        #   in Loop: Header=BB98_46 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_46
.LBB98_53:                              # %for.end182
                                        #   in Loop: Header=BB98_44 Depth=1
	jmp	.LBB98_54
.LBB98_54:                              # %for.inc183
                                        #   in Loop: Header=BB98_44 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB98_44
.LBB98_55:                              # %for.end185
	jmp	.LBB98_56
.LBB98_56:                              # %if.end186
	cmpl	$0, -28(%rbp)
	jne	.LBB98_58
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -32(%rbp)
	je	.LBB98_59
.LBB98_58:                              # %if.then188
	movq	cofAC, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-48(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-56(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, cbp
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	%rax, cbp_blk
	jmp	.LBB98_60
.LBB98_59:                              # %if.else191
	movl	$0, cbp
	movq	$0, cbp_blk
.LBB98_60:                              # %if.end192
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, luma_transform_size_8x8_flag
	movl	$0, -8(%rbp)
.LBB98_61:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB98_70
# %bb.62:                               # %for.body196
                                        #   in Loop: Header=BB98_61 Depth=1
	movl	$0, -4(%rbp)
.LBB98_63:                              # %for.cond197
                                        #   Parent Loop BB98_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB98_68
# %bb.64:                               # %for.body200
                                        #   in Loop: Header=BB98_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$frefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -32(%rbp)
	je	.LBB98_66
# %bb.65:                               # %if.then215
                                        #   in Loop: Header=BB98_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$brefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB98_66:                              # %if.end230
                                        #   in Loop: Header=BB98_63 Depth=2
	jmp	.LBB98_67
.LBB98_67:                              # %for.inc231
                                        #   in Loop: Header=BB98_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_63
.LBB98_68:                              # %for.end233
                                        #   in Loop: Header=BB98_61 Depth=1
	jmp	.LBB98_69
.LBB98_69:                              # %for.inc234
                                        #   in Loop: Header=BB98_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_61
.LBB98_70:                              # %for.end236
	cmpl	$961113786, -36(%rbp)   # imm = 0x39496EBA
	jne	.LBB98_72
.LBB98_71:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB98_72:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB98_71
.Lfunc_end98:
	.size	store_macroblock_parameters.69, .Lfunc_end98-store_macroblock_parameters.69
	.cfi_endproc
                                        # -- End function
	.globl	StoreMV8x8.70           # -- Begin function StoreMV8x8.70
	.p2align	4, 0x90
	.type	StoreMV8x8.70,@function
StoreMV8x8.70:                          # @StoreMV8x8.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1255149903, -16(%rbp)  # imm = 0x4AD0114F
	movl	%edi, -8(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB99_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB99_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB99_1 Depth=1
	movl	-8(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-12(%rbp), %eax
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB99_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_1
.LBB99_4:                               # %for.end
	cmpl	$1255149903, -16(%rbp)  # imm = 0x4AD0114F
	jne	.LBB99_6
.LBB99_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB99_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB99_5
.Lfunc_end99:
	.size	StoreMV8x8.70, .Lfunc_end99-StoreMV8x8.70
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMV8x8.71         # -- Begin function RestoreMV8x8.71
	.p2align	4, 0x90
	.type	RestoreMV8x8.71,@function
RestoreMV8x8.71:                        # @RestoreMV8x8.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$325092829, -16(%rbp)   # imm = 0x136085DD
	movl	%edi, -8(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB100_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB100_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB100_1 Depth=1
	movl	-8(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-12(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB100_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_1
.LBB100_4:                              # %for.end
	cmpl	$325092829, -16(%rbp)   # imm = 0x136085DD
	jne	.LBB100_6
.LBB100_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB100_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB100_5
.Lfunc_end100:
	.size	RestoreMV8x8.71, .Lfunc_end100-RestoreMV8x8.71
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_Intra4x4Macroblock.72 # -- Begin function Mode_Decision_for_Intra4x4Macroblock.72
	.p2align	4, 0x90
	.type	Mode_Decision_for_Intra4x4Macroblock.72,@function
Mode_Decision_for_Intra4x4Macroblock.72: # @Mode_Decision_for_Intra4x4Macroblock.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$221239005, -24(%rbp)   # imm = 0xD2FD6DD
	vmovsd	%xmm0, -40(%rbp)
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB101_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB101_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB101_1 Depth=1
	movl	-12(%rbp), %edi
	vmovsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-20(%rbp), %rsi
	callq	Mode_Decision_for_8x8IntraBlocks
	cmpl	$0, %eax
	je	.LBB101_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB101_1 Depth=1
	movl	-12(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB101_4:                              # %if.end
                                        #   in Loop: Header=BB101_1 Depth=1
	movl	-20(%rbp), %eax
	movq	-32(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB101_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB101_1
.LBB101_6:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$221239005, -24(%rbp)   # imm = 0xD2FD6DD
	jne	.LBB101_8
.LBB101_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB101_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB101_7
.Lfunc_end101:
	.size	Mode_Decision_for_Intra4x4Macroblock.72, .Lfunc_end101-Mode_Decision_for_Intra4x4Macroblock.72
	.cfi_endproc
                                        # -- End function
	.globl	set_mbaff_parameters.73 # -- Begin function set_mbaff_parameters.73
	.p2align	4, 0x90
	.type	set_mbaff_parameters.73,@function
set_mbaff_parameters.73:                # @set_mbaff_parameters.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$679291413, -36(%rbp)   # imm = 0x287D2A15
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB102_2
# %bb.1:                                # %if.then
	jmp	.LBB102_82
.LBB102_2:                              # %if.end
	movl	$0, -8(%rbp)
.LBB102_3:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_5 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB102_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB102_3 Depth=1
	movl	$0, -4(%rbp)
.LBB102_5:                              # %for.cond3
                                        #   Parent Loop BB102_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB102_8
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB102_5 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB102_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_5
.LBB102_8:                              # %for.end
                                        #   in Loop: Header=BB102_3 Depth=1
	jmp	.LBB102_9
.LBB102_9:                              # %for.inc17
                                        #   in Loop: Header=BB102_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_3
.LBB102_10:                             # %for.end19
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB102_20
# %bb.11:                               # %if.then22
	movl	$0, -8(%rbp)
.LBB102_12:                             # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_14 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB102_19
# %bb.13:                               # %for.body26
                                        #   in Loop: Header=BB102_12 Depth=1
	movl	$0, -4(%rbp)
.LBB102_14:                             # %for.cond27
                                        #   Parent Loop BB102_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB102_17
# %bb.15:                               # %for.body30
                                        #   in Loop: Header=BB102_14 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.16:                               # %for.inc58
                                        #   in Loop: Header=BB102_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_14
.LBB102_17:                             # %for.end60
                                        #   in Loop: Header=BB102_12 Depth=1
	jmp	.LBB102_18
.LBB102_18:                             # %for.inc61
                                        #   in Loop: Header=BB102_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_12
.LBB102_19:                             # %for.end63
	jmp	.LBB102_20
.LBB102_20:                             # %if.end64
	movl	-28(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	rdopt, %rax
	cmpl	$0, 3096(%rax)
	jne	.LBB102_23
# %bb.21:                               # %land.lhs.true
	cmpl	$0, -28(%rbp)
	je	.LBB102_23
# %bb.22:                               # %if.then76
	movl	$0, -28(%rbp)
	movq	rdopt, %rax
	movl	$0, 3224(%rax)
.LBB102_23:                             # %if.end78
	movl	$0, -4(%rbp)
.LBB102_24:                             # %for.cond79
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_26 Depth 2
                                        #       Child Loop BB102_28 Depth 3
                                        #         Child Loop BB102_30 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_39
# %bb.25:                               # %for.body83
                                        #   in Loop: Header=BB102_24 Depth=1
	movl	$0, -8(%rbp)
.LBB102_26:                             # %for.cond84
                                        #   Parent Loop BB102_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_28 Depth 3
                                        #         Child Loop BB102_30 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB102_37
# %bb.27:                               # %for.body87
                                        #   in Loop: Header=BB102_26 Depth=2
	movl	$0, -12(%rbp)
.LBB102_28:                             # %for.cond88
                                        #   Parent Loop BB102_24 Depth=1
                                        #     Parent Loop BB102_26 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB102_30 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB102_35
# %bb.29:                               # %for.body91
                                        #   in Loop: Header=BB102_28 Depth=3
	movl	$0, -16(%rbp)
.LBB102_30:                             # %for.cond92
                                        #   Parent Loop BB102_24 Depth=1
                                        #     Parent Loop BB102_26 Depth=2
                                        #       Parent Loop BB102_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB102_33
# %bb.31:                               # %for.body95
                                        #   in Loop: Header=BB102_30 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc113
                                        #   in Loop: Header=BB102_30 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_30
.LBB102_33:                             # %for.end115
                                        #   in Loop: Header=BB102_28 Depth=3
	jmp	.LBB102_34
.LBB102_34:                             # %for.inc116
                                        #   in Loop: Header=BB102_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_28
.LBB102_35:                             # %for.end118
                                        #   in Loop: Header=BB102_26 Depth=2
	jmp	.LBB102_36
.LBB102_36:                             # %for.inc119
                                        #   in Loop: Header=BB102_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_26
.LBB102_37:                             # %for.end121
                                        #   in Loop: Header=BB102_24 Depth=1
	jmp	.LBB102_38
.LBB102_38:                             # %for.inc122
                                        #   in Loop: Header=BB102_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_24
.LBB102_39:                             # %for.end124
	movl	$0, -4(%rbp)
.LBB102_40:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_42 Depth 2
                                        #       Child Loop BB102_44 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB102_51
# %bb.41:                               # %for.body128
                                        #   in Loop: Header=BB102_40 Depth=1
	movl	$0, -12(%rbp)
.LBB102_42:                             # %for.cond129
                                        #   Parent Loop BB102_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_44 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB102_49
# %bb.43:                               # %for.body132
                                        #   in Loop: Header=BB102_42 Depth=2
	movl	$0, -16(%rbp)
.LBB102_44:                             # %for.cond133
                                        #   Parent Loop BB102_40 Depth=1
                                        #     Parent Loop BB102_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB102_47
# %bb.45:                               # %for.body136
                                        #   in Loop: Header=BB102_44 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.46:                               # %for.inc150
                                        #   in Loop: Header=BB102_44 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_44
.LBB102_47:                             # %for.end152
                                        #   in Loop: Header=BB102_42 Depth=2
	jmp	.LBB102_48
.LBB102_48:                             # %for.inc153
                                        #   in Loop: Header=BB102_42 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_42
.LBB102_49:                             # %for.end155
                                        #   in Loop: Header=BB102_40 Depth=1
	jmp	.LBB102_50
.LBB102_50:                             # %for.inc156
                                        #   in Loop: Header=BB102_40 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_40
.LBB102_51:                             # %for.end158
	movl	$0, -4(%rbp)
.LBB102_52:                             # %for.cond159
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB102_55
# %bb.53:                               # %for.body162
                                        #   in Loop: Header=BB102_52 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
# %bb.54:                               # %for.inc173
                                        #   in Loop: Header=BB102_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_52
.LBB102_55:                             # %for.end175
	movl	$0, -8(%rbp)
.LBB102_56:                             # %for.cond176
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_58 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB102_63
# %bb.57:                               # %for.body179
                                        #   in Loop: Header=BB102_56 Depth=1
	movl	$0, -4(%rbp)
.LBB102_58:                             # %for.cond180
                                        #   Parent Loop BB102_56 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB102_61
# %bb.59:                               # %for.body183
                                        #   in Loop: Header=BB102_58 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc196
                                        #   in Loop: Header=BB102_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_58
.LBB102_61:                             # %for.end198
                                        #   in Loop: Header=BB102_56 Depth=1
	jmp	.LBB102_62
.LBB102_62:                             # %for.inc199
                                        #   in Loop: Header=BB102_56 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_56
.LBB102_63:                             # %for.end201
	cmpl	$0, -32(%rbp)
	je	.LBB102_73
# %bb.64:                               # %if.then203
	movl	$0, -8(%rbp)
.LBB102_65:                             # %for.cond204
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_67 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB102_72
# %bb.66:                               # %for.body207
                                        #   in Loop: Header=BB102_65 Depth=1
	movl	$0, -4(%rbp)
.LBB102_67:                             # %for.cond208
                                        #   Parent Loop BB102_65 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB102_70
# %bb.68:                               # %for.body211
                                        #   in Loop: Header=BB102_67 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc228
                                        #   in Loop: Header=BB102_67 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_67
.LBB102_70:                             # %for.end230
                                        #   in Loop: Header=BB102_65 Depth=1
	jmp	.LBB102_71
.LBB102_71:                             # %for.inc231
                                        #   in Loop: Header=BB102_65 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_65
.LBB102_72:                             # %for.end233
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3100(%rcx)
.LBB102_73:                             # %if.end235
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB102_74:                             # %for.cond237
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_76 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_81
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB102_74 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB102_76:                             # %for.cond244
                                        #   Parent Loop BB102_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_79
# %bb.77:                               # %for.body249
                                        #   in Loop: Header=BB102_76 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.78:                               # %for.inc264
                                        #   in Loop: Header=BB102_76 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_76
.LBB102_79:                             # %for.end267
                                        #   in Loop: Header=BB102_74 Depth=1
	jmp	.LBB102_80
.LBB102_80:                             # %for.inc268
                                        #   in Loop: Header=BB102_74 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_74
.LBB102_81:                             # %for.end270.loopexit
	jmp	.LBB102_82
.LBB102_82:                             # %for.end270
	cmpl	$679291413, -36(%rbp)   # imm = 0x287D2A15
	jne	.LBB102_84
.LBB102_83:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB102_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB102_83
.Lfunc_end102:
	.size	set_mbaff_parameters.73, .Lfunc_end102-set_mbaff_parameters.73
	.cfi_endproc
                                        # -- End function
	.globl	GetBestTransformP8x8.74 # -- Begin function GetBestTransformP8x8.74
	.p2align	4, 0x90
	.type	GetBestTransformP8x8.74,@function
GetBestTransformP8x8.74:                # @GetBestTransformP8x8.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$584, %rsp              # imm = 0x248
	.cfi_offset %rbx, -24
	movl	$1204654598, -64(%rbp)  # imm = 0x47CD9206
	movl	$0, -36(%rbp)
	movl	$0, -40(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB103_2
# %bb.1:                                # %if.then
	movl	$1, -44(%rbp)
	jmp	.LBB103_25
.LBB103_2:                              # %if.end
	movl	$0, -32(%rbp)
.LBB103_3:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_5 Depth 2
                                        #       Child Loop BB103_7 Depth 3
                                        #         Child Loop BB103_9 Depth 4
                                        #           Child Loop BB103_11 Depth 5
	cmpl	$4, -32(%rbp)
	jge	.LBB103_22
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB103_3 Depth=1
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -56(%rbp)
	movl	$0, -28(%rbp)
	movl	-52(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB103_5:                              # %for.cond3
                                        #   Parent Loop BB103_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB103_7 Depth 3
                                        #         Child Loop BB103_9 Depth 4
                                        #           Child Loop BB103_11 Depth 5
	movl	-20(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_20
# %bb.6:                                # %for.body5
                                        #   in Loop: Header=BB103_5 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-56(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB103_7:                              # %for.cond7
                                        #   Parent Loop BB103_3 Depth=1
                                        #     Parent Loop BB103_5 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB103_9 Depth 4
                                        #           Child Loop BB103_11 Depth 5
	movl	-24(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_18
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB103_7 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -48(%rbp)
	movslq	-28(%rbp), %rax
	shlq	$2, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -72(%rbp)
	movl	$0, -16(%rbp)
.LBB103_9:                              # %for.cond12
                                        #   Parent Loop BB103_3 Depth=1
                                        #     Parent Loop BB103_5 Depth=2
                                        #       Parent Loop BB103_7 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB103_11 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB103_16
# %bb.10:                               # %for.body14
                                        #   in Loop: Header=BB103_9 Depth=4
	movl	$0, -12(%rbp)
.LBB103_11:                             # %for.cond15
                                        #   Parent Loop BB103_3 Depth=1
                                        #     Parent Loop BB103_5 Depth=2
                                        #       Parent Loop BB103_7 Depth=3
                                        #         Parent Loop BB103_9 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -12(%rbp)
	jge	.LBB103_14
# %bb.12:                               # %for.body17
                                        #   in Loop: Header=BB103_11 Depth=5
	movq	imgY_org, %rax
	movl	-60(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-48(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
	movq	imgY_org, %rax
	movl	-60(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-48(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB103_11 Depth=5
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB103_11
.LBB103_14:                             # %for.end
                                        #   in Loop: Header=BB103_9 Depth=4
	jmp	.LBB103_15
.LBB103_15:                             # %for.inc51
                                        #   in Loop: Header=BB103_9 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB103_9
.LBB103_16:                             # %for.end53
                                        #   in Loop: Header=BB103_7 Depth=3
	movq	-72(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.17:                               # %for.inc55
                                        #   in Loop: Header=BB103_7 Depth=3
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB103_7
.LBB103_18:                             # %for.end57
                                        #   in Loop: Header=BB103_5 Depth=2
	jmp	.LBB103_19
.LBB103_19:                             # %for.inc58
                                        #   in Loop: Header=BB103_5 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB103_5
.LBB103_20:                             # %for.end60
                                        #   in Loop: Header=BB103_3 Depth=1
	leaq	-336(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.21:                               # %for.inc64
                                        #   in Loop: Header=BB103_3 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB103_3
.LBB103_22:                             # %for.end66
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB103_24
# %bb.23:                               # %if.then69
	movl	$1, -44(%rbp)
	jmp	.LBB103_25
.LBB103_24:                             # %if.else
	movl	$0, -44(%rbp)
.LBB103_25:                             # %return
	movl	-44(%rbp), %ebx
	cmpl	$1204654598, -64(%rbp)  # imm = 0x47CD9206
	jne	.LBB103_27
.LBB103_26:
	movl	%ebx, %eax
	addq	$584, %rsp              # imm = 0x248
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB103_27:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB103_26
.Lfunc_end103:
	.size	GetBestTransformP8x8.74, .Lfunc_end103-GetBestTransformP8x8.74
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorsMB.75   # -- Begin function SetMotionVectorsMB.75
	.p2align	4, 0x90
	.type	SetMotionVectorsMB.75,@function
SetMotionVectorsMB.75:                  # @SetMotionVectorsMB.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$309255789, -68(%rbp)   # imm = 0x126EDE6D
	movq	%rdi, -64(%rbp)
	movl	%esi, -72(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -8(%rbp)
.LBB104_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB104_33
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB104_1 Depth=1
	movl	$0, -4(%rbp)
.LBB104_3:                              # %for.cond3
                                        #   Parent Loop BB104_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB104_31
# %bb.4:                                # %for.body5
                                        #   in Loop: Header=BB104_3 Depth=2
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB104_11
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB104_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB104_11
# %bb.6:                                # %land.lhs.true31
                                        #   in Loop: Header=BB104_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB104_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB104_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB104_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB104_3 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB104_10
.LBB104_9:                              # %cond.false
                                        #   in Loop: Header=BB104_3 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB104_10:                             # %cond.end
                                        #   in Loop: Header=BB104_3 Depth=2
	movq	%rax, -48(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -56(%rbp)
.LBB104_11:                             # %if.end
                                        #   in Loop: Header=BB104_3 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB104_16
# %bb.12:                               # %if.then38
                                        #   in Loop: Header=BB104_3 Depth=2
	cmpl	$0, -52(%rbp)
	jl	.LBB104_14
# %bb.13:                               # %if.then41
                                        #   in Loop: Header=BB104_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB104_15
.LBB104_14:                             # %if.else
                                        #   in Loop: Header=BB104_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB104_15:                             # %if.end89
                                        #   in Loop: Header=BB104_3 Depth=2
	jmp	.LBB104_29
.LBB104_16:                             # %if.else90
                                        #   in Loop: Header=BB104_3 Depth=2
	cmpl	$-1, -52(%rbp)
	jne	.LBB104_18
# %bb.17:                               # %if.then93
                                        #   in Loop: Header=BB104_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB104_28
.LBB104_18:                             # %if.else122
                                        #   in Loop: Header=BB104_3 Depth=2
	cmpl	$0, -52(%rbp)
	jne	.LBB104_20
# %bb.19:                               # %if.then125
                                        #   in Loop: Header=BB104_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB104_27
.LBB104_20:                             # %if.else174
                                        #   in Loop: Header=BB104_3 Depth=2
	cmpl	$1, -52(%rbp)
	jne	.LBB104_22
# %bb.21:                               # %if.then177
                                        #   in Loop: Header=BB104_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB104_26
.LBB104_22:                             # %if.else226
                                        #   in Loop: Header=BB104_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB104_24
# %bb.23:                               # %if.then229
                                        #   in Loop: Header=BB104_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB104_25
.LBB104_24:                             # %if.else298
                                        #   in Loop: Header=BB104_3 Depth=2
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB104_25:                             # %if.end299
                                        #   in Loop: Header=BB104_3 Depth=2
	jmp	.LBB104_26
.LBB104_26:                             # %if.end300
                                        #   in Loop: Header=BB104_3 Depth=2
	jmp	.LBB104_27
.LBB104_27:                             # %if.end301
                                        #   in Loop: Header=BB104_3 Depth=2
	jmp	.LBB104_28
.LBB104_28:                             # %if.end302
                                        #   in Loop: Header=BB104_3 Depth=2
	jmp	.LBB104_29
.LBB104_29:                             # %if.end303
                                        #   in Loop: Header=BB104_3 Depth=2
	jmp	.LBB104_30
.LBB104_30:                             # %for.inc
                                        #   in Loop: Header=BB104_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_3
.LBB104_31:                             # %for.end
                                        #   in Loop: Header=BB104_1 Depth=1
	jmp	.LBB104_32
.LBB104_32:                             # %for.inc304
                                        #   in Loop: Header=BB104_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_1
.LBB104_33:                             # %for.end306
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB104_55
# %bb.34:                               # %if.then308
	movl	$0, -4(%rbp)
.LBB104_35:                             # %for.cond309
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_37 Depth 2
                                        #       Child Loop BB104_39 Depth 3
                                        #         Child Loop BB104_41 Depth 4
                                        #           Child Loop BB104_43 Depth 5
	cmpl	$4, -4(%rbp)
	jge	.LBB104_54
# %bb.36:                               # %for.body312
                                        #   in Loop: Header=BB104_35 Depth=1
	movl	$0, -8(%rbp)
.LBB104_37:                             # %for.cond313
                                        #   Parent Loop BB104_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB104_39 Depth 3
                                        #         Child Loop BB104_41 Depth 4
                                        #           Child Loop BB104_43 Depth 5
	cmpl	$4, -8(%rbp)
	jge	.LBB104_52
# %bb.38:                               # %for.body316
                                        #   in Loop: Header=BB104_37 Depth=2
	movl	$0, -20(%rbp)
.LBB104_39:                             # %for.cond317
                                        #   Parent Loop BB104_35 Depth=1
                                        #     Parent Loop BB104_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB104_41 Depth 4
                                        #           Child Loop BB104_43 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB104_50
# %bb.40:                               # %for.body320
                                        #   in Loop: Header=BB104_39 Depth=3
	movl	$0, -24(%rbp)
.LBB104_41:                             # %for.cond321
                                        #   Parent Loop BB104_35 Depth=1
                                        #     Parent Loop BB104_37 Depth=2
                                        #       Parent Loop BB104_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB104_43 Depth 5
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB104_48
# %bb.42:                               # %for.body324
                                        #   in Loop: Header=BB104_41 Depth=4
	movl	$0, -28(%rbp)
.LBB104_43:                             # %for.cond325
                                        #   Parent Loop BB104_35 Depth=1
                                        #     Parent Loop BB104_37 Depth=2
                                        #       Parent Loop BB104_39 Depth=3
                                        #         Parent Loop BB104_41 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$9, -28(%rbp)
	jge	.LBB104_46
# %bb.44:                               # %for.body328
                                        #   in Loop: Header=BB104_43 Depth=5
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.45:                               # %for.inc421
                                        #   in Loop: Header=BB104_43 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB104_43
.LBB104_46:                             # %for.end423
                                        #   in Loop: Header=BB104_41 Depth=4
	jmp	.LBB104_47
.LBB104_47:                             # %for.inc424
                                        #   in Loop: Header=BB104_41 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB104_41
.LBB104_48:                             # %for.end426
                                        #   in Loop: Header=BB104_39 Depth=3
	jmp	.LBB104_49
.LBB104_49:                             # %for.inc427
                                        #   in Loop: Header=BB104_39 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB104_39
.LBB104_50:                             # %for.end429
                                        #   in Loop: Header=BB104_37 Depth=2
	jmp	.LBB104_51
.LBB104_51:                             # %for.inc430
                                        #   in Loop: Header=BB104_37 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_37
.LBB104_52:                             # %for.end432
                                        #   in Loop: Header=BB104_35 Depth=1
	jmp	.LBB104_53
.LBB104_53:                             # %for.inc433
                                        #   in Loop: Header=BB104_35 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_35
.LBB104_54:                             # %for.end435
	jmp	.LBB104_55
.LBB104_55:                             # %if.end436
	cmpl	$309255789, -68(%rbp)   # imm = 0x126EDE6D
	jne	.LBB104_57
.LBB104_56:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB104_57:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB104_56
.Lfunc_end104:
	.size	SetMotionVectorsMB.75, .Lfunc_end104-SetMotionVectorsMB.75
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function encode_one_macroblock.76
.LCPI105_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI105_1:
	.quad	4622945017495814144     # double 12
.LCPI105_2:
	.quad	4607182418800017408     # double 1
.LCPI105_3:
	.quad	4587366580439587226     # double 0.050000000000000003
.LCPI105_4:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI105_5:
	.quad	4611686018427387904     # double 2
.LCPI105_6:
	.quad	4613937818241073152     # double 3
.LCPI105_7:
	.quad	4608983858650965606     # double 1.3999999999999999
.LCPI105_8:
	.quad	4616189618054758400     # double 4
.LCPI105_9:
	.quad	4604300115038500291     # double 0.68000000000000005
.LCPI105_10:
	.quad	4618441417868443648     # double 6
.LCPI105_11:
	.quad	4605380978949069210     # double 0.80000000000000004
.LCPI105_12:
	.quad	4600877379321698714     # double 0.40000000000000002
.LCPI105_13:
	.quad	4596373779694328218     # double 0.20000000000000001
.LCPI105_14:
	.quad	4606732058837280358     # double 0.94999999999999996
.LCPI105_15:
	.quad	4602678819172646912     # double 0.5
.LCPI105_16:
	.quad	4679240012837945344     # double 65536
.LCPI105_17:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI105_18:
	.quad	4625196817309499392     # double 16
	.text
	.globl	encode_one_macroblock.76
	.p2align	4, 0x90
	.type	encode_one_macroblock.76,@function
encode_one_macroblock.76:               # @encode_one_macroblock.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$480, %rsp              # imm = 0x1E0
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	vmovsd	.LCPI105_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	$608757473, -408(%rbp)  # imm = 0x2448E6E1
	vxorps	%xmm1, %xmm1, %xmm1
	vmovsd	%xmm1, -296(%rbp)
	vmovsd	%xmm0, -472(%rbp)
	movl	$2147483647, -208(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -276(%rbp)
	movl	$0, -184(%rbp)
	movw	$0, -36(%rbp)
	movl	$0, -60(%rbp)
	movl	-208(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, -140(%rbp)
	movl	$0, -260(%rbp)
	movl	$0, -264(%rbp)
	movl	$0, -172(%rbp)
	movl	$0, -316(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB105_2
# %bb.1:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB105_4
.LBB105_2:                              # %land.lhs.true
	movq	img, %rax
	movl	140(%rax), %eax
	movq	img, %rcx
	cmpl	88(%rcx), %eax
	jne	.LBB105_4
# %bb.3:                                # %land.lhs.true4
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	cmpl	92(%rcx), %eax
	movb	$1, %cl
	jne	.LBB105_5
.LBB105_4:                              # %lor.rhs
	movq	img, %rax
	cmpl	$2, 24(%rax)
	sete	%cl
.LBB105_5:                              # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -136(%rbp)
	movq	img, %rcx
	cmpl	$3, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -304(%rbp)
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -404(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	input, %rcx
	cmpl	$1, 2908(%rcx)
	jne	.LBB105_13
# %bb.6:                                # %land.lhs.true19
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$2, 2464(%rcx)
	jne	.LBB105_13
# %bb.7:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB105_12
# %bb.8:                                # %lor.lhs.false25
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB105_12
# %bb.9:                                # %lor.rhs29
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB105_11
# %bb.10:                               # %land.rhs33
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB105_11:                             # %land.end
.LBB105_12:                             # %lor.end36
.LBB105_13:                             # %land.end38
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	movl	$1, %edx
	cmovnel	%eax, %edx
	movl	%edx, -312(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB105_18
# %bb.14:                               # %land.lhs.true40
	xorl	%ecx, %ecx
	movq	input, %rax
	cmpl	$0, 2908(%rax)
	je	.LBB105_18
# %bb.15:                               # %land.rhs43
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %cl
	je	.LBB105_17
# %bb.16:                               # %lor.rhs47
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%cl
.LBB105_17:                             # %lor.end51
.LBB105_18:                             # %land.end53
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -284(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB105_20
# %bb.19:                               # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB105_21
.LBB105_20:                             # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB105_21
.LBB105_21:                             # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -448(%rbp)
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	%rcx, -392(%rbp)
	movw	$-1, -38(%rbp)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movq	%rcx, -440(%rbp)
	movq	img, %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB105_23
# %bb.22:                               # %land.rhs62
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB105_23:                             # %land.end64
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -280(%rbp)
	movl	$0, -132(%rbp)
	cmpl	$0, -280(%rbp)
	je	.LBB105_28
# %bb.24:                               # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB105_26
# %bb.25:                               # %if.then69
	movl	$4, -64(%rbp)
	jmp	.LBB105_27
.LBB105_26:                             # %if.else
	movl	$2, -64(%rbp)
.LBB105_27:                             # %if.end
	jmp	.LBB105_29
.LBB105_28:                             # %if.else70
	movl	$0, -64(%rbp)
.LBB105_29:                             # %if.end71
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB105_31
# %bb.30:                               # %if.then73
	movb	$0, %al
	callq	decide_intrabk_SAD
.LBB105_31:                             # %if.end74
	movq	img, %rax
	movl	12(%rax), %edi
	callq	RandomIntra
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orl	-136(%rbp), %eax
	movl	%eax, -136(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	movl	%eax, -332(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovel	%edx, %eax
	movl	%eax, -348(%rbp)
	movl	$1, -344(%rbp)
	cmpl	$0, -136(%rbp)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -384(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB105_33
# %bb.32:                               # %land.rhs86
	movq	input, %rax
	cmpl	$0, 2368(%rax)
	setne	%cl
.LBB105_33:                             # %land.end88
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -380(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB105_35
# %bb.34:                               # %land.rhs92
	movq	input, %rax
	cmpl	$0, 2372(%rax)
	setne	%al
.LBB105_35:                             # %land.end94
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -376(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB105_37
# %bb.36:                               # %land.rhs98
	movq	input, %rax
	cmpl	$0, 2376(%rax)
	setne	%cl
.LBB105_37:                             # %land.end100
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -372(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB105_39
# %bb.38:                               # %land.rhs104
	movq	input, %rax
	cmpl	$0, 2380(%rax)
	setne	%al
.LBB105_39:                             # %land.end106
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -368(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB105_41
# %bb.40:                               # %land.rhs110
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	setne	%cl
.LBB105_41:                             # %land.end112
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -364(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB105_43
# %bb.42:                               # %land.rhs116
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	setne	%al
.LBB105_43:                             # %land.end118
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -360(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB105_45
# %bb.44:                               # %land.rhs122
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	setne	%cl
.LBB105_45:                             # %land.end124
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -356(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB105_47
# %bb.46:                               # %if.then130
	movl	$0, -356(%rbp)
	movl	$0, -360(%rbp)
	movl	$0, -364(%rbp)
.LBB105_47:                             # %if.end134
	cmpl	$0, -368(%rbp)
	movb	$1, %al
	jne	.LBB105_51
# %bb.48:                               # %lor.lhs.false137
	cmpl	$0, -364(%rbp)
	movb	$1, %al
	jne	.LBB105_51
# %bb.49:                               # %lor.lhs.false140
	cmpl	$0, -360(%rbp)
	movb	$1, %al
	jne	.LBB105_51
# %bb.50:                               # %lor.rhs143
	cmpl	$0, -356(%rbp)
	setne	%al
.LBB105_51:                             # %lor.end146
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -352(%rbp)
	movl	-404(%rbp), %eax
	movl	%eax, -336(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB105_67
# %bb.52:                               # %if.then152
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB105_53:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_55 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_66
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB105_53 Depth=1
	movl	$0, -56(%rbp)
.LBB105_55:                             # %for.cond156
                                        #   Parent Loop BB105_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB105_64
# %bb.56:                               # %for.body161
                                        #   in Loop: Header=BB105_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB105_59
# %bb.57:                               # %land.lhs.true168
                                        #   in Loop: Header=BB105_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-88(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB105_59
# %bb.58:                               # %if.then177
                                        #   in Loop: Header=BB105_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB105_59:                             # %if.end183
                                        #   in Loop: Header=BB105_55 Depth=2
	movq	img, %rax
	cmpl	$2, 28(%rax)
	jne	.LBB105_62
# %bb.60:                               # %land.lhs.true187
                                        #   in Loop: Header=BB105_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-88(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB105_62
# %bb.61:                               # %if.then196
                                        #   in Loop: Header=BB105_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB105_62:                             # %if.end202
                                        #   in Loop: Header=BB105_55 Depth=2
	jmp	.LBB105_63
.LBB105_63:                             # %for.inc
                                        #   in Loop: Header=BB105_55 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB105_55
.LBB105_64:                             # %for.end
                                        #   in Loop: Header=BB105_53 Depth=1
	jmp	.LBB105_65
.LBB105_65:                             # %for.inc203
                                        #   in Loop: Header=BB105_53 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB105_53
.LBB105_66:                             # %for.end205
	jmp	.LBB105_93
.LBB105_67:                             # %if.else206
	cmpl	$0, -280(%rbp)
	je	.LBB105_83
# %bb.68:                               # %if.then208
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB105_69:                             # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_71 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_82
# %bb.70:                               # %for.body214
                                        #   in Loop: Header=BB105_69 Depth=1
	movl	$0, -56(%rbp)
.LBB105_71:                             # %for.cond215
                                        #   Parent Loop BB105_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB105_80
# %bb.72:                               # %for.body220
                                        #   in Loop: Header=BB105_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB105_75
# %bb.73:                               # %land.lhs.true230
                                        #   in Loop: Header=BB105_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, (%rax)
	jne	.LBB105_75
# %bb.74:                               # %if.then238
                                        #   in Loop: Header=BB105_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB105_75:                             # %if.end244
                                        #   in Loop: Header=BB105_71 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	jne	.LBB105_78
# %bb.76:                               # %land.lhs.true249
                                        #   in Loop: Header=BB105_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB105_78
# %bb.77:                               # %if.then257
                                        #   in Loop: Header=BB105_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB105_78:                             # %if.end263
                                        #   in Loop: Header=BB105_71 Depth=2
	jmp	.LBB105_79
.LBB105_79:                             # %for.inc264
                                        #   in Loop: Header=BB105_71 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB105_71
.LBB105_80:                             # %for.end266
                                        #   in Loop: Header=BB105_69 Depth=1
	jmp	.LBB105_81
.LBB105_81:                             # %for.inc267
                                        #   in Loop: Header=BB105_69 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB105_69
.LBB105_82:                             # %for.end269
	jmp	.LBB105_92
.LBB105_83:                             # %if.else270
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB105_84:                             # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_86 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_91
# %bb.85:                               # %for.body276
                                        #   in Loop: Header=BB105_84 Depth=1
	movl	$0, -56(%rbp)
.LBB105_86:                             # %for.cond277
                                        #   Parent Loop BB105_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB105_89
# %bb.87:                               # %for.body282
                                        #   in Loop: Header=BB105_86 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
# %bb.88:                               # %for.inc288
                                        #   in Loop: Header=BB105_86 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB105_86
.LBB105_89:                             # %for.end290
                                        #   in Loop: Header=BB105_84 Depth=1
	jmp	.LBB105_90
.LBB105_90:                             # %for.inc291
                                        #   in Loop: Header=BB105_84 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB105_84
.LBB105_91:                             # %for.end293
	jmp	.LBB105_92
.LBB105_92:                             # %if.end294
	jmp	.LBB105_93
.LBB105_93:                             # %if.end295
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB105_162
# %bb.94:                               # %if.then298
	vmovsd	.LCPI105_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	40(%rax), %xmm0, %xmm1
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movq	input, %rax
	cmpl	$0, 3332(%rax)
	je	.LBB105_100
# %bb.95:                               # %if.then303
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB105_98
# %bb.96:                               # %land.lhs.true307
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB105_98
# %bb.97:                               # %if.then310
	vmovsd	.LCPI105_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI105_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	input, %rax
	vmovsd	3376(%rax), %xmm2       # xmm2 = mem[0],zero
	vmovsd	%xmm2, -456(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-456(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB105_99
.LBB105_98:                             # %if.else315
	vmovsd	.LCPI105_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI105_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	input, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	vmovsd	3336(%rax,%rcx,8), %xmm2 # xmm2 = mem[0],zero
	vmovsd	%xmm2, -464(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-464(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
.LBB105_99:                             # %if.end326
	jmp	.LBB105_159
.LBB105_100:                            # %if.else327
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB105_103
# %bb.101:                              # %land.lhs.true331
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB105_103
# %bb.102:                              # %cond.true335
	vmovsd	.LCPI105_2(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB105_104
.LBB105_103:                            # %cond.false336
	vmovsd	.LCPI105_2(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI105_3(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	input, %rax
	vcvtsi2sdl	20(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vsubsd	%xmm1, %xmm0, %xmm0
.LBB105_104:                            # %cond.end340
	vmovsd	%xmm0, -480(%rbp)
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	jle	.LBB105_130
# %bb.105:                              # %if.then344
	vmovsd	.LCPI105_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI105_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI105_9(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB105_116
# %bb.106:                              # %cond.true352
	vmovsd	.LCPI105_8(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI105_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB105_108
# %bb.107:                              # %cond.true356
	vmovsd	.LCPI105_8(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB105_109
.LBB105_108:                            # %cond.false357
	vmovsd	.LCPI105_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB105_109:                            # %cond.end359
	vmovsd	.LCPI105_5(%rip), %xmm2 # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB105_111
# %bb.110:                              # %cond.true363
	vmovsd	.LCPI105_5(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB105_115
.LBB105_111:                            # %cond.false364
	vmovsd	.LCPI105_8(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI105_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB105_113
# %bb.112:                              # %cond.true368
	vmovsd	.LCPI105_8(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB105_114
.LBB105_113:                            # %cond.false369
	vmovsd	.LCPI105_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB105_114:                            # %cond.end371
.LBB105_115:                            # %cond.end373
	jmp	.LBB105_129
.LBB105_116:                            # %cond.false375
	cmpl	$0, -304(%rbp)
	je	.LBB105_127
# %bb.117:                              # %cond.true377
	vmovsd	.LCPI105_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI105_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB105_119
# %bb.118:                              # %cond.true381
	vmovsd	.LCPI105_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB105_120
.LBB105_119:                            # %cond.false382
	vmovsd	.LCPI105_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB105_120:                            # %cond.end384
	vmovsd	.LCPI105_7(%rip), %xmm2 # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB105_122
# %bb.121:                              # %cond.true388
	vmovsd	.LCPI105_7(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB105_126
.LBB105_122:                            # %cond.false389
	vmovsd	.LCPI105_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI105_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB105_124
# %bb.123:                              # %cond.true393
	vmovsd	.LCPI105_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB105_125
.LBB105_124:                            # %cond.false394
	vmovsd	.LCPI105_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB105_125:                            # %cond.end396
.LBB105_126:                            # %cond.end398
	jmp	.LBB105_128
.LBB105_127:                            # %cond.false400
	vmovsd	.LCPI105_2(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB105_128
.LBB105_128:                            # %cond.end401
.LBB105_129:                            # %cond.end403
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB105_146
.LBB105_130:                            # %if.else406
	vmovsd	.LCPI105_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI105_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI105_4(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB105_132
# %bb.131:                              # %cond.true414
	vmovsd	.LCPI105_8(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB105_145
.LBB105_132:                            # %cond.false415
	cmpl	$0, -304(%rbp)
	je	.LBB105_143
# %bb.133:                              # %cond.true417
	vmovsd	.LCPI105_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI105_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB105_135
# %bb.134:                              # %cond.true421
	vmovsd	.LCPI105_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB105_136
.LBB105_135:                            # %cond.false422
	vmovsd	.LCPI105_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB105_136:                            # %cond.end424
	vmovsd	.LCPI105_7(%rip), %xmm2 # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB105_138
# %bb.137:                              # %cond.true428
	vmovsd	.LCPI105_7(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB105_142
.LBB105_138:                            # %cond.false429
	vmovsd	.LCPI105_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI105_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB105_140
# %bb.139:                              # %cond.true433
	vmovsd	.LCPI105_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB105_141
.LBB105_140:                            # %cond.false434
	vmovsd	.LCPI105_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB105_141:                            # %cond.end436
.LBB105_142:                            # %cond.end438
	jmp	.LBB105_144
.LBB105_143:                            # %cond.false440
	vmovsd	.LCPI105_2(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB105_144
.LBB105_144:                            # %cond.end441
.LBB105_145:                            # %cond.end443
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB105_146:                            # %if.end446
	movq	input, %rax
	cmpl	$2, 1320(%rax)
	jne	.LBB105_154
# %bb.147:                              # %if.then449
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB105_153
# %bb.148:                              # %land.lhs.true453
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB105_153
# %bb.149:                              # %if.then456
	vmovsd	.LCPI105_12(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI105_13(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB105_151
# %bb.150:                              # %cond.true464
	vmovsd	.LCPI105_12(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB105_152
.LBB105_151:                            # %cond.false465
	vmovsd	.LCPI105_13(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
.LBB105_152:                            # %cond.end473
	vmovsd	.LCPI105_2(%rip), %xmm1 # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB105_153:                            # %if.end477
	jmp	.LBB105_158
.LBB105_154:                            # %if.else478
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB105_157
# %bb.155:                              # %land.lhs.true482
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB105_157
# %bb.156:                              # %if.then485
	vmovsd	.LCPI105_11(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB105_157:                            # %if.end487
	jmp	.LBB105_158
.LBB105_158:                            # %if.end488
	vmovsd	-480(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB105_159:                            # %if.end490
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB105_161
# %bb.160:                              # %if.then492
	vmovsd	.LCPI105_14(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB105_161:                            # %if.end494
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	sqrt
	vmovsd	%xmm0, -168(%rbp)
	jmp	.LBB105_166
.LBB105_162:                            # %if.else496
	xorl	%eax, %eax
	movq	img, %rcx
	movl	40(%rcx), %ecx
	subl	$12, %ecx
	cmpl	%ecx, %eax
	jle	.LBB105_164
# %bb.163:                              # %cond.true501
	xorl	%eax, %eax
	jmp	.LBB105_165
.LBB105_164:                            # %cond.false502
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
.LBB105_165:                            # %cond.end505
	cltq
	vcvtsi2sdl	QP2QUANT(,%rax,4), %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	vmovsd	%xmm0, -160(%rbp)
.LBB105_166:                            # %if.end510
	vmovsd	.LCPI105_15(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI105_16(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -32(%rbp)
.LBB105_167:                            # %for.cond514
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$15, -32(%rbp)
	jge	.LBB105_170
# %bb.168:                              # %for.body517
                                        #   in Loop: Header=BB105_167 Depth=1
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
# %bb.169:                              # %for.inc520
                                        #   in Loop: Header=BB105_167 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB105_167
.LBB105_170:                            # %for.end522
	movl	$0, -256(%rbp)
.LBB105_171:                            # %for.cond523
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_181 Depth 2
                                        #       Child Loop BB105_184 Depth 3
                                        #         Child Loop BB105_190 Depth 4
                                        #         Child Loop BB105_210 Depth 4
                                        #         Child Loop BB105_300 Depth 4
                                        #           Child Loop BB105_302 Depth 5
                                        #         Child Loop BB105_309 Depth 4
                                        #           Child Loop BB105_311 Depth 5
                                        #         Child Loop BB105_326 Depth 4
                                        #           Child Loop BB105_328 Depth 5
                                        #         Child Loop BB105_335 Depth 4
                                        #           Child Loop BB105_337 Depth 5
                                        #         Child Loop BB105_355 Depth 4
                                        #           Child Loop BB105_357 Depth 5
                                        #         Child Loop BB105_374 Depth 4
                                        #           Child Loop BB105_376 Depth 5
                                        #     Child Loop BB105_416 Depth 2
                                        #       Child Loop BB105_418 Depth 3
                                        #         Child Loop BB105_445 Depth 4
                                        #         Child Loop BB105_464 Depth 4
                                        #           Child Loop BB105_466 Depth 5
                                        #         Child Loop BB105_473 Depth 4
                                        #         Child Loop BB105_508 Depth 4
                                        #           Child Loop BB105_510 Depth 5
                                        #         Child Loop BB105_532 Depth 4
                                        #           Child Loop BB105_534 Depth 5
                                        #             Child Loop BB105_536 Depth 6
                                        #         Child Loop BB105_544 Depth 4
                                        #           Child Loop BB105_546 Depth 5
                                        #       Child Loop BB105_569 Depth 3
                                        #         Child Loop BB105_571 Depth 4
                                        #           Child Loop BB105_573 Depth 5
                                        #       Child Loop BB105_581 Depth 3
                                        #         Child Loop BB105_583 Depth 4
                                        #     Child Loop BB105_601 Depth 2
                                        #       Child Loop BB105_603 Depth 3
                                        #         Child Loop BB105_614 Depth 4
                                        #         Child Loop BB105_633 Depth 4
                                        #           Child Loop BB105_635 Depth 5
                                        #         Child Loop BB105_642 Depth 4
                                        #         Child Loop BB105_677 Depth 4
                                        #           Child Loop BB105_679 Depth 5
                                        #         Child Loop BB105_701 Depth 4
                                        #           Child Loop BB105_703 Depth 5
                                        #             Child Loop BB105_705 Depth 6
                                        #         Child Loop BB105_713 Depth 4
                                        #           Child Loop BB105_715 Depth 5
                                        #         Child Loop BB105_723 Depth 4
                                        #           Child Loop BB105_725 Depth 5
                                        #       Child Loop BB105_745 Depth 3
                                        #         Child Loop BB105_747 Depth 4
                                        #           Child Loop BB105_749 Depth 5
                                        #       Child Loop BB105_757 Depth 3
                                        #         Child Loop BB105_759 Depth 4
                                        #       Child Loop BB105_766 Depth 3
                                        #         Child Loop BB105_768 Depth 4
                                        #       Child Loop BB105_778 Depth 3
                                        #         Child Loop BB105_780 Depth 4
                                        #       Child Loop BB105_786 Depth 3
                                        #       Child Loop BB105_791 Depth 3
                                        #         Child Loop BB105_793 Depth 4
                                        #     Child Loop BB105_803 Depth 2
                                        #       Child Loop BB105_805 Depth 3
                                        #     Child Loop BB105_835 Depth 2
                                        #       Child Loop BB105_853 Depth 3
                                        #         Child Loop BB105_908 Depth 4
                                        #           Child Loop BB105_911 Depth 5
                                        #             Child Loop BB105_913 Depth 6
                                        #           Child Loop BB105_920 Depth 5
                                        #             Child Loop BB105_922 Depth 6
                                        #         Child Loop BB105_955 Depth 4
                                        #           Child Loop BB105_957 Depth 5
                                        #     Child Loop BB105_981 Depth 2
                                        #       Child Loop BB105_1014 Depth 3
                                        #         Child Loop BB105_1017 Depth 4
                                        #           Child Loop BB105_1019 Depth 5
                                        #         Child Loop BB105_1026 Depth 4
                                        #           Child Loop BB105_1028 Depth 5
                                        #       Child Loop BB105_1061 Depth 3
                                        #         Child Loop BB105_1063 Depth 4
                                        #     Child Loop BB105_1113 Depth 2
                                        #       Child Loop BB105_1115 Depth 3
                                        #     Child Loop BB105_1127 Depth 2
                                        #       Child Loop BB105_1129 Depth 3
                                        #         Child Loop BB105_1131 Depth 4
                                        #     Child Loop BB105_1141 Depth 2
                                        #       Child Loop BB105_1143 Depth 3
                                        #     Child Loop BB105_1152 Depth 2
                                        #       Child Loop BB105_1154 Depth 3
                                        #     Child Loop BB105_1160 Depth 2
                                        #       Child Loop BB105_1162 Depth 3
                                        #     Child Loop BB105_1174 Depth 2
                                        #       Child Loop BB105_1176 Depth 3
                                        #         Child Loop BB105_1178 Depth 4
                                        #     Child Loop BB105_1189 Depth 2
                                        #       Child Loop BB105_1191 Depth 3
                                        #     Child Loop BB105_1202 Depth 2
                                        #       Child Loop BB105_1204 Depth 3
                                        #     Child Loop BB105_1211 Depth 2
                                        #       Child Loop BB105_1213 Depth 3
                                        #     Child Loop BB105_1221 Depth 2
                                        #       Child Loop BB105_1223 Depth 3
                                        #     Child Loop BB105_1229 Depth 2
                                        #       Child Loop BB105_1231 Depth 3
                                        #     Child Loop BB105_1237 Depth 2
                                        #       Child Loop BB105_1239 Depth 3
                                        #     Child Loop BB105_1245 Depth 2
                                        #       Child Loop BB105_1247 Depth 3
	movl	-256(%rbp), %eax
	cmpl	-312(%rbp), %eax
	jge	.LBB105_1291
# %bb.172:                              # %for.body526
                                        #   in Loop: Header=BB105_171 Depth=1
	cmpl	$2, -312(%rbp)
	jne	.LBB105_177
# %bb.173:                              # %if.then529
                                        #   in Loop: Header=BB105_171 Depth=1
	cmpl	$0, -256(%rbp)
	jne	.LBB105_175
# %bb.174:                              # %if.then532
                                        #   in Loop: Header=BB105_171 Depth=1
	movq	input, %rax
	movl	$1, 2464(%rax)
	jmp	.LBB105_176
.LBB105_175:                            # %if.else534
                                        #   in Loop: Header=BB105_171 Depth=1
	movq	input, %rax
	movl	$2, 2464(%rax)
.LBB105_176:                            # %if.end536
                                        #   in Loop: Header=BB105_171 Depth=1
	jmp	.LBB105_177
.LBB105_177:                            # %if.end537
                                        #   in Loop: Header=BB105_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
	cmpl	$0, -136(%rbp)
	jne	.LBB105_831
# %bb.178:                              # %if.then539
                                        #   in Loop: Header=BB105_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB105_180
# %bb.179:                              # %if.then541
                                        #   in Loop: Header=BB105_171 Depth=1
	movb	$0, %al
	callq	Get_Direct_Motion_Vectors
.LBB105_180:                            # %if.end542
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
	movl	$1, best_mode
	movl	$1, -32(%rbp)
.LBB105_181:                            # %for.cond543
                                        #   Parent Loop BB105_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB105_184 Depth 3
                                        #         Child Loop BB105_190 Depth 4
                                        #         Child Loop BB105_210 Depth 4
                                        #         Child Loop BB105_300 Depth 4
                                        #           Child Loop BB105_302 Depth 5
                                        #         Child Loop BB105_309 Depth 4
                                        #           Child Loop BB105_311 Depth 5
                                        #         Child Loop BB105_326 Depth 4
                                        #           Child Loop BB105_328 Depth 5
                                        #         Child Loop BB105_335 Depth 4
                                        #           Child Loop BB105_337 Depth 5
                                        #         Child Loop BB105_355 Depth 4
                                        #           Child Loop BB105_357 Depth 5
                                        #         Child Loop BB105_374 Depth 4
                                        #           Child Loop BB105_376 Depth 5
	cmpl	$4, -32(%rbp)
	jge	.LBB105_413
# %bb.182:                              # %for.body546
                                        #   in Loop: Header=BB105_181 Depth=2
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB105_411
# %bb.183:                              # %if.then553
                                        #   in Loop: Header=BB105_181 Depth=2
	movl	$0, -60(%rbp)
	movl	$0, -28(%rbp)
.LBB105_184:                            # %for.cond554
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_181 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB105_190 Depth 4
                                        #         Child Loop BB105_210 Depth 4
                                        #         Child Loop BB105_300 Depth 4
                                        #           Child Loop BB105_302 Depth 5
                                        #         Child Loop BB105_309 Depth 4
                                        #           Child Loop BB105_311 Depth 5
                                        #         Child Loop BB105_326 Depth 4
                                        #           Child Loop BB105_328 Depth 5
                                        #         Child Loop BB105_335 Depth 4
                                        #           Child Loop BB105_337 Depth 5
                                        #         Child Loop BB105_355 Depth 4
                                        #           Child Loop BB105_357 Depth 5
                                        #         Child Loop BB105_374 Depth 4
                                        #           Child Loop BB105_376 Depth 5
	movl	-28(%rbp), %eax
	movl	-32(%rbp), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	movl	$2, %edx
	cmovel	%ecx, %edx
	cmpl	%edx, %eax
	jge	.LBB105_404
# %bb.185:                              # %for.body560
                                        #   in Loop: Header=BB105_184 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	xorl	%ecx, %ecx
	cmpl	$1, -28(%rbp)
	jne	.LBB105_187
# %bb.186:                              # %land.rhs563
                                        #   in Loop: Header=BB105_184 Depth=3
	cmpl	$2, -32(%rbp)
	sete	%cl
.LBB105_187:                            # %land.end566
                                        #   in Loop: Header=BB105_184 Depth=3
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$2, %ecx
	cmovnel	%ecx, %edx
	movl	%edx, -24(%rbp)
	cmpl	$1, -28(%rbp)
	jne	.LBB105_189
# %bb.188:                              # %land.rhs571
                                        #   in Loop: Header=BB105_184 Depth=3
	cmpl	$3, -32(%rbp)
	sete	%al
.LBB105_189:                            # %land.end574
                                        #   in Loop: Header=BB105_184 Depth=3
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	-208(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB105_190:                            # %for.cond577
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_181 Depth=2
                                        #       Parent Loop BB105_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB105_208
# %bb.191:                              # %for.body584
                                        #   in Loop: Header=BB105_190 Depth=4
	cmpl	$0, -284(%rbp)
	je	.LBB105_194
# %bb.192:                              # %lor.lhs.false586
                                        #   in Loop: Header=BB105_190 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB105_194
# %bb.193:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB105_190 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB105_206
.LBB105_194:                            # %if.then594
                                        #   in Loop: Header=BB105_190 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB105_199
# %bb.195:                              # %cond.true597
                                        #   in Loop: Header=BB105_190 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB105_197
# %bb.196:                              # %cond.true603
                                        #   in Loop: Header=BB105_190 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB105_198
.LBB105_197:                            # %cond.false604
                                        #   in Loop: Header=BB105_190 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB105_198:                            # %cond.end607
                                        #   in Loop: Header=BB105_190 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB105_203
.LBB105_199:                            # %cond.false610
                                        #   in Loop: Header=BB105_190 Depth=4
	vmovsd	.LCPI105_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB105_201
# %bb.200:                              # %cond.true615
                                        #   in Loop: Header=BB105_190 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB105_202
.LBB105_201:                            # %cond.false617
                                        #   in Loop: Header=BB105_190 Depth=4
	movl	$1, %eax
	jmp	.LBB105_202
.LBB105_202:                            # %cond.end618
                                        #   in Loop: Header=BB105_190 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB105_203:                            # %cond.end623
                                        #   in Loop: Header=BB105_190 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB105_205
# %bb.204:                              # %if.then635
                                        #   in Loop: Header=BB105_190 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB105_205:                            # %if.end636
                                        #   in Loop: Header=BB105_190 Depth=4
	jmp	.LBB105_206
.LBB105_206:                            # %if.end637
                                        #   in Loop: Header=BB105_190 Depth=4
	jmp	.LBB105_207
.LBB105_207:                            # %for.inc638
                                        #   in Loop: Header=BB105_190 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB105_190
.LBB105_208:                            # %for.end640
                                        #   in Loop: Header=BB105_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB105_296
# %bb.209:                              # %if.then642
                                        #   in Loop: Header=BB105_184 Depth=3
	movl	-208(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB105_210:                            # %for.cond643
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_181 Depth=2
                                        #       Parent Loop BB105_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB105_224
# %bb.211:                              # %for.body650
                                        #   in Loop: Header=BB105_210 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB105_216
# %bb.212:                              # %cond.true653
                                        #   in Loop: Header=BB105_210 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB105_214
# %bb.213:                              # %cond.true659
                                        #   in Loop: Header=BB105_210 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB105_215
.LBB105_214:                            # %cond.false660
                                        #   in Loop: Header=BB105_210 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB105_215:                            # %cond.end663
                                        #   in Loop: Header=BB105_210 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB105_220
.LBB105_216:                            # %cond.false667
                                        #   in Loop: Header=BB105_210 Depth=4
	vmovsd	.LCPI105_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB105_218
# %bb.217:                              # %cond.true672
                                        #   in Loop: Header=BB105_210 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB105_219
.LBB105_218:                            # %cond.false674
                                        #   in Loop: Header=BB105_210 Depth=4
	movl	$1, %eax
	jmp	.LBB105_219
.LBB105_219:                            # %cond.end675
                                        #   in Loop: Header=BB105_210 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB105_220:                            # %cond.end680
                                        #   in Loop: Header=BB105_210 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB105_222
# %bb.221:                              # %if.then692
                                        #   in Loop: Header=BB105_210 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB105_222:                            # %if.end693
                                        #   in Loop: Header=BB105_210 Depth=4
	jmp	.LBB105_223
.LBB105_223:                            # %for.inc694
                                        #   in Loop: Header=BB105_210 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB105_210
.LBB105_224:                            # %for.end696
                                        #   in Loop: Header=BB105_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB105_232
# %bb.225:                              # %cond.true699
                                        #   in Loop: Header=BB105_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB105_227
# %bb.226:                              # %cond.true705
                                        #   in Loop: Header=BB105_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB105_228
.LBB105_227:                            # %cond.false706
                                        #   in Loop: Header=BB105_184 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB105_228:                            # %cond.end709
                                        #   in Loop: Header=BB105_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB105_230
# %bb.229:                              # %cond.true718
                                        #   in Loop: Header=BB105_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB105_231
.LBB105_230:                            # %cond.false719
                                        #   in Loop: Header=BB105_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB105_231:                            # %cond.end721
                                        #   in Loop: Header=BB105_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB105_236
.LBB105_232:                            # %cond.false726
                                        #   in Loop: Header=BB105_184 Depth=3
	vmovsd	.LCPI105_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB105_234
# %bb.233:                              # %cond.true731
                                        #   in Loop: Header=BB105_184 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB105_235
.LBB105_234:                            # %cond.false733
                                        #   in Loop: Header=BB105_184 Depth=3
	movl	$1, %eax
	jmp	.LBB105_235
.LBB105_235:                            # %cond.end734
                                        #   in Loop: Header=BB105_184 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB105_236:                            # %cond.end739
                                        #   in Loop: Header=BB105_184 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB105_258
# %bb.237:                              # %land.lhs.true745
                                        #   in Loop: Header=BB105_184 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB105_258
# %bb.238:                              # %land.lhs.true749
                                        #   in Loop: Header=BB105_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB105_258
# %bb.239:                              # %if.then751
                                        #   in Loop: Header=BB105_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB105_247
# %bb.240:                              # %cond.true754
                                        #   in Loop: Header=BB105_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB105_242
# %bb.241:                              # %cond.true760
                                        #   in Loop: Header=BB105_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB105_243
.LBB105_242:                            # %cond.false761
                                        #   in Loop: Header=BB105_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB105_243:                            # %cond.end763
                                        #   in Loop: Header=BB105_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB105_245
# %bb.244:                              # %cond.true772
                                        #   in Loop: Header=BB105_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB105_246
.LBB105_245:                            # %cond.false773
                                        #   in Loop: Header=BB105_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB105_246:                            # %cond.end775
                                        #   in Loop: Header=BB105_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB105_248
.LBB105_247:                            # %cond.false780
                                        #   in Loop: Header=BB105_184 Depth=3
	vmovsd	.LCPI105_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB105_248:                            # %cond.end784
                                        #   in Loop: Header=BB105_184 Depth=3
	movl	%eax, -148(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r9d, %r9d
	callq	BPredPartitionCost
	addl	-148(%rbp), %eax
	movl	%eax, -148(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB105_256
# %bb.249:                              # %cond.true790
                                        #   in Loop: Header=BB105_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB105_251
# %bb.250:                              # %cond.true796
                                        #   in Loop: Header=BB105_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB105_252
.LBB105_251:                            # %cond.false797
                                        #   in Loop: Header=BB105_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB105_252:                            # %cond.end799
                                        #   in Loop: Header=BB105_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB105_254
# %bb.253:                              # %cond.true808
                                        #   in Loop: Header=BB105_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB105_255
.LBB105_254:                            # %cond.false809
                                        #   in Loop: Header=BB105_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB105_255:                            # %cond.end811
                                        #   in Loop: Header=BB105_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB105_257
.LBB105_256:                            # %cond.false816
                                        #   in Loop: Header=BB105_184 Depth=3
	vmovsd	.LCPI105_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB105_257:                            # %cond.end820
                                        #   in Loop: Header=BB105_184 Depth=3
	movl	%eax, -176(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$1, %r9d
	callq	BPredPartitionCost
	addl	-176(%rbp), %eax
	movl	%eax, -176(%rbp)
	jmp	.LBB105_259
.LBB105_258:                            # %if.else824
                                        #   in Loop: Header=BB105_184 Depth=3
	movl	$2147483647, -148(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -176(%rbp) # imm = 0x7FFFFFFF
.LBB105_259:                            # %if.end825
                                        #   in Loop: Header=BB105_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB105_286
# %bb.260:                              # %land.lhs.true828
                                        #   in Loop: Header=BB105_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB105_286
# %bb.261:                              # %if.then831
                                        #   in Loop: Header=BB105_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB105_266
# %bb.262:                              # %land.lhs.true834
                                        #   in Loop: Header=BB105_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB105_266
# %bb.263:                              # %land.lhs.true837
                                        #   in Loop: Header=BB105_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB105_266
# %bb.264:                              # %land.lhs.true840
                                        #   in Loop: Header=BB105_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-176(%rbp), %eax
	jge	.LBB105_266
# %bb.265:                              # %if.then843
                                        #   in Loop: Header=BB105_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB105_285
.LBB105_266:                            # %if.else845
                                        #   in Loop: Header=BB105_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB105_271
# %bb.267:                              # %land.lhs.true848
                                        #   in Loop: Header=BB105_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB105_271
# %bb.268:                              # %land.lhs.true851
                                        #   in Loop: Header=BB105_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB105_271
# %bb.269:                              # %land.lhs.true854
                                        #   in Loop: Header=BB105_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-176(%rbp), %eax
	jge	.LBB105_271
# %bb.270:                              # %if.then857
                                        #   in Loop: Header=BB105_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB105_284
.LBB105_271:                            # %if.else859
                                        #   in Loop: Header=BB105_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB105_276
# %bb.272:                              # %land.lhs.true862
                                        #   in Loop: Header=BB105_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB105_276
# %bb.273:                              # %land.lhs.true865
                                        #   in Loop: Header=BB105_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB105_276
# %bb.274:                              # %land.lhs.true868
                                        #   in Loop: Header=BB105_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-176(%rbp), %eax
	jge	.LBB105_276
# %bb.275:                              # %if.then871
                                        #   in Loop: Header=BB105_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movw	$0, -38(%rbp)
	jmp	.LBB105_283
.LBB105_276:                            # %if.else876
                                        #   in Loop: Header=BB105_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB105_281
# %bb.277:                              # %land.lhs.true879
                                        #   in Loop: Header=BB105_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB105_281
# %bb.278:                              # %land.lhs.true882
                                        #   in Loop: Header=BB105_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB105_281
# %bb.279:                              # %land.lhs.true885
                                        #   in Loop: Header=BB105_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-176(%rbp), %eax
	jg	.LBB105_281
# %bb.280:                              # %if.then888
                                        #   in Loop: Header=BB105_184 Depth=3
	movw	$2, -50(%rbp)
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movl	-148(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$1, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$1, 71952(%rax,%rcx,2)
	jmp	.LBB105_282
.LBB105_281:                            # %if.else893
                                        #   in Loop: Header=BB105_184 Depth=3
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movw	$2, -50(%rbp)
	movl	-176(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$2, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$2, 71952(%rax,%rcx,2)
.LBB105_282:                            # %if.end898
                                        #   in Loop: Header=BB105_184 Depth=3
	jmp	.LBB105_283
.LBB105_283:                            # %if.end899
                                        #   in Loop: Header=BB105_184 Depth=3
	jmp	.LBB105_284
.LBB105_284:                            # %if.end900
                                        #   in Loop: Header=BB105_184 Depth=3
	jmp	.LBB105_285
.LBB105_285:                            # %if.end901
                                        #   in Loop: Header=BB105_184 Depth=3
	jmp	.LBB105_295
.LBB105_286:                            # %if.else902
                                        #   in Loop: Header=BB105_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB105_289
# %bb.287:                              # %land.lhs.true905
                                        #   in Loop: Header=BB105_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB105_289
# %bb.288:                              # %if.then908
                                        #   in Loop: Header=BB105_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB105_294
.LBB105_289:                            # %if.else910
                                        #   in Loop: Header=BB105_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB105_292
# %bb.290:                              # %land.lhs.true913
                                        #   in Loop: Header=BB105_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB105_292
# %bb.291:                              # %if.then916
                                        #   in Loop: Header=BB105_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB105_293
.LBB105_292:                            # %if.else918
                                        #   in Loop: Header=BB105_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB105_293:                            # %if.end920
                                        #   in Loop: Header=BB105_184 Depth=3
	jmp	.LBB105_294
.LBB105_294:                            # %if.end921
                                        #   in Loop: Header=BB105_184 Depth=3
	jmp	.LBB105_295
.LBB105_295:                            # %if.end922
                                        #   in Loop: Header=BB105_184 Depth=3
	jmp	.LBB105_297
.LBB105_296:                            # %if.else923
                                        #   in Loop: Header=BB105_184 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB105_297:                            # %if.end925
                                        #   in Loop: Header=BB105_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB105_353
# %bb.298:                              # %if.then928
                                        #   in Loop: Header=BB105_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB105_308
# %bb.299:                              # %if.then932
                                        #   in Loop: Header=BB105_184 Depth=3
	movl	$0, -24(%rbp)
.LBB105_300:                            # %for.cond933
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_181 Depth=2
                                        #       Parent Loop BB105_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB105_302 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB105_307
# %bb.301:                              # %for.body936
                                        #   in Loop: Header=BB105_300 Depth=4
	movl	$0, -20(%rbp)
.LBB105_302:                            # %for.cond937
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_181 Depth=2
                                        #       Parent Loop BB105_184 Depth=3
                                        #         Parent Loop BB105_300 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB105_305
# %bb.303:                              # %for.body940
                                        #   in Loop: Header=BB105_302 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.304:                              # %for.inc997
                                        #   in Loop: Header=BB105_302 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_302
.LBB105_305:                            # %for.end999
                                        #   in Loop: Header=BB105_300 Depth=4
	jmp	.LBB105_306
.LBB105_306:                            # %for.inc1000
                                        #   in Loop: Header=BB105_300 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_300
.LBB105_307:                            # %for.end1002
                                        #   in Loop: Header=BB105_184 Depth=3
	jmp	.LBB105_323
.LBB105_308:                            # %if.else1003
                                        #   in Loop: Header=BB105_184 Depth=3
	movl	$0, -24(%rbp)
.LBB105_309:                            # %for.cond1004
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_181 Depth=2
                                        #       Parent Loop BB105_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB105_311 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB105_322
# %bb.310:                              # %for.body1007
                                        #   in Loop: Header=BB105_309 Depth=4
	movl	$0, -20(%rbp)
.LBB105_311:                            # %for.cond1008
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_181 Depth=2
                                        #       Parent Loop BB105_184 Depth=3
                                        #         Parent Loop BB105_309 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB105_320
# %bb.312:                              # %for.body1011
                                        #   in Loop: Header=BB105_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB105_317
# %bb.313:                              # %if.then1016
                                        #   in Loop: Header=BB105_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB105_315
# %bb.314:                              # %cond.true1023
                                        #   in Loop: Header=BB105_311 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB105_316
.LBB105_315:                            # %cond.false1024
                                        #   in Loop: Header=BB105_311 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB105_316:                            # %cond.end1025
                                        #   in Loop: Header=BB105_311 Depth=5
	movq	%rax, -432(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-432(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-432(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB105_318
.LBB105_317:                            # %if.else1111
                                        #   in Loop: Header=BB105_311 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB105_318:                            # %if.end1217
                                        #   in Loop: Header=BB105_311 Depth=5
	jmp	.LBB105_319
.LBB105_319:                            # %for.inc1218
                                        #   in Loop: Header=BB105_311 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_311
.LBB105_320:                            # %for.end1220
                                        #   in Loop: Header=BB105_309 Depth=4
	jmp	.LBB105_321
.LBB105_321:                            # %for.inc1221
                                        #   in Loop: Header=BB105_309 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_309
.LBB105_322:                            # %for.end1223
                                        #   in Loop: Header=BB105_184 Depth=3
	jmp	.LBB105_323
.LBB105_323:                            # %if.end1224
                                        #   in Loop: Header=BB105_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB105_352
# %bb.324:                              # %if.then1226
                                        #   in Loop: Header=BB105_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB105_334
# %bb.325:                              # %if.then1230
                                        #   in Loop: Header=BB105_184 Depth=3
	movl	$0, -24(%rbp)
.LBB105_326:                            # %for.cond1231
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_181 Depth=2
                                        #       Parent Loop BB105_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB105_328 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB105_333
# %bb.327:                              # %for.body1234
                                        #   in Loop: Header=BB105_326 Depth=4
	movl	$0, -20(%rbp)
.LBB105_328:                            # %for.cond1235
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_181 Depth=2
                                        #       Parent Loop BB105_184 Depth=3
                                        #         Parent Loop BB105_326 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB105_331
# %bb.329:                              # %for.body1238
                                        #   in Loop: Header=BB105_328 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.330:                              # %for.inc1301
                                        #   in Loop: Header=BB105_328 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_328
.LBB105_331:                            # %for.end1303
                                        #   in Loop: Header=BB105_326 Depth=4
	jmp	.LBB105_332
.LBB105_332:                            # %for.inc1304
                                        #   in Loop: Header=BB105_326 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_326
.LBB105_333:                            # %for.end1306
                                        #   in Loop: Header=BB105_184 Depth=3
	jmp	.LBB105_351
.LBB105_334:                            # %if.else1307
                                        #   in Loop: Header=BB105_184 Depth=3
	movl	$0, -24(%rbp)
.LBB105_335:                            # %for.cond1308
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_181 Depth=2
                                        #       Parent Loop BB105_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB105_337 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB105_350
# %bb.336:                              # %for.body1311
                                        #   in Loop: Header=BB105_335 Depth=4
	movl	$0, -20(%rbp)
.LBB105_337:                            # %for.cond1312
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_181 Depth=2
                                        #       Parent Loop BB105_184 Depth=3
                                        #         Parent Loop BB105_335 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB105_348
# %bb.338:                              # %for.body1315
                                        #   in Loop: Header=BB105_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB105_343
# %bb.339:                              # %if.then1320
                                        #   in Loop: Header=BB105_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB105_341
# %bb.340:                              # %cond.true1328
                                        #   in Loop: Header=BB105_337 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB105_342
.LBB105_341:                            # %cond.false1330
                                        #   in Loop: Header=BB105_337 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB105_342:                            # %cond.end1332
                                        #   in Loop: Header=BB105_337 Depth=5
	movq	%rax, -424(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-424(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-424(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB105_346
.LBB105_343:                            # %if.else1419
                                        #   in Loop: Header=BB105_337 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB105_345
# %bb.344:                              # %if.then1474
                                        #   in Loop: Header=BB105_337 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB105_345:                            # %if.end1529
                                        #   in Loop: Header=BB105_337 Depth=5
	jmp	.LBB105_346
.LBB105_346:                            # %if.end1530
                                        #   in Loop: Header=BB105_337 Depth=5
	jmp	.LBB105_347
.LBB105_347:                            # %for.inc1531
                                        #   in Loop: Header=BB105_337 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_337
.LBB105_348:                            # %for.end1533
                                        #   in Loop: Header=BB105_335 Depth=4
	jmp	.LBB105_349
.LBB105_349:                            # %for.inc1534
                                        #   in Loop: Header=BB105_335 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_335
.LBB105_350:                            # %for.end1536
                                        #   in Loop: Header=BB105_184 Depth=3
	jmp	.LBB105_351
.LBB105_351:                            # %if.end1537
                                        #   in Loop: Header=BB105_184 Depth=3
	jmp	.LBB105_352
.LBB105_352:                            # %if.end1538
                                        #   in Loop: Header=BB105_184 Depth=3
	jmp	.LBB105_393
.LBB105_353:                            # %if.else1539
                                        #   in Loop: Header=BB105_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB105_373
# %bb.354:                              # %if.then1542
                                        #   in Loop: Header=BB105_184 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -24(%rbp)
.LBB105_355:                            # %for.cond1546
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_181 Depth=2
                                        #       Parent Loop BB105_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB105_357 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB105_372
# %bb.356:                              # %for.body1549
                                        #   in Loop: Header=BB105_355 Depth=4
	movl	$0, -20(%rbp)
.LBB105_357:                            # %for.cond1550
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_181 Depth=2
                                        #       Parent Loop BB105_184 Depth=3
                                        #         Parent Loop BB105_355 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB105_370
# %bb.358:                              # %for.body1553
                                        #   in Loop: Header=BB105_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB105_360
# %bb.359:                              # %if.then1557
                                        #   in Loop: Header=BB105_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB105_361
.LBB105_360:                            # %if.else1596
                                        #   in Loop: Header=BB105_357 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB105_361:                            # %if.end1676
                                        #   in Loop: Header=BB105_357 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB105_368
# %bb.362:                              # %if.then1678
                                        #   in Loop: Header=BB105_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB105_364
# %bb.363:                              # %if.then1682
                                        #   in Loop: Header=BB105_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB105_367
.LBB105_364:                            # %if.else1721
                                        #   in Loop: Header=BB105_357 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB105_366
# %bb.365:                              # %if.then1758
                                        #   in Loop: Header=BB105_357 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB105_366:                            # %if.end1805
                                        #   in Loop: Header=BB105_357 Depth=5
	jmp	.LBB105_367
.LBB105_367:                            # %if.end1806
                                        #   in Loop: Header=BB105_357 Depth=5
	jmp	.LBB105_368
.LBB105_368:                            # %if.end1807
                                        #   in Loop: Header=BB105_357 Depth=5
	jmp	.LBB105_369
.LBB105_369:                            # %for.inc1808
                                        #   in Loop: Header=BB105_357 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_357
.LBB105_370:                            # %for.end1810
                                        #   in Loop: Header=BB105_355 Depth=4
	jmp	.LBB105_371
.LBB105_371:                            # %for.inc1811
                                        #   in Loop: Header=BB105_355 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_355
.LBB105_372:                            # %for.end1813
                                        #   in Loop: Header=BB105_184 Depth=3
	jmp	.LBB105_392
.LBB105_373:                            # %if.else1814
                                        #   in Loop: Header=BB105_184 Depth=3
	movq	img, %rax
	movl	144(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -24(%rbp)
.LBB105_374:                            # %for.cond1818
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_181 Depth=2
                                        #       Parent Loop BB105_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB105_376 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB105_391
# %bb.375:                              # %for.body1821
                                        #   in Loop: Header=BB105_374 Depth=4
	movl	$0, -20(%rbp)
.LBB105_376:                            # %for.cond1822
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_181 Depth=2
                                        #       Parent Loop BB105_184 Depth=3
                                        #         Parent Loop BB105_374 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB105_389
# %bb.377:                              # %for.body1825
                                        #   in Loop: Header=BB105_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB105_379
# %bb.378:                              # %if.then1829
                                        #   in Loop: Header=BB105_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB105_380
.LBB105_379:                            # %if.else1868
                                        #   in Loop: Header=BB105_376 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB105_380:                            # %if.end1948
                                        #   in Loop: Header=BB105_376 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB105_387
# %bb.381:                              # %if.then1950
                                        #   in Loop: Header=BB105_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB105_383
# %bb.382:                              # %if.then1954
                                        #   in Loop: Header=BB105_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB105_386
.LBB105_383:                            # %if.else1993
                                        #   in Loop: Header=BB105_376 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB105_385
# %bb.384:                              # %if.then2030
                                        #   in Loop: Header=BB105_376 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB105_385:                            # %if.end2077
                                        #   in Loop: Header=BB105_376 Depth=5
	jmp	.LBB105_386
.LBB105_386:                            # %if.end2078
                                        #   in Loop: Header=BB105_376 Depth=5
	jmp	.LBB105_387
.LBB105_387:                            # %if.end2079
                                        #   in Loop: Header=BB105_376 Depth=5
	jmp	.LBB105_388
.LBB105_388:                            # %for.inc2080
                                        #   in Loop: Header=BB105_376 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_376
.LBB105_389:                            # %for.end2082
                                        #   in Loop: Header=BB105_374 Depth=4
	jmp	.LBB105_390
.LBB105_390:                            # %for.inc2083
                                        #   in Loop: Header=BB105_374 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_374
.LBB105_391:                            # %for.end2085
                                        #   in Loop: Header=BB105_184 Depth=3
	jmp	.LBB105_392
.LBB105_392:                            # %if.end2086
                                        #   in Loop: Header=BB105_184 Depth=3
	jmp	.LBB105_393
.LBB105_393:                            # %if.end2087
                                        #   in Loop: Header=BB105_184 Depth=3
	cmpl	$3, -32(%rbp)
	jne	.LBB105_395
# %bb.394:                              # %if.then2090
                                        #   in Loop: Header=BB105_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	jmp	.LBB105_399
.LBB105_395:                            # %if.else2106
                                        #   in Loop: Header=BB105_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB105_397
# %bb.396:                              # %if.then2109
                                        #   in Loop: Header=BB105_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	jmp	.LBB105_398
.LBB105_397:                            # %if.else2131
                                        #   in Loop: Header=BB105_184 Depth=3
	movw	-36(%rbp), %ax
	movw	%ax, best8x8fwref+14
	movw	%ax, best8x8fwref+12
	movw	%ax, best8x8fwref+10
	movw	%ax, best8x8fwref+8
	movw	-50(%rbp), %ax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movw	-38(%rbp), %ax
	movw	%ax, best8x8bwref+14
	movw	%ax, best8x8bwref+12
	movw	%ax, best8x8bwref+10
	movw	%ax, best8x8bwref+8
.LBB105_398:                            # %if.end2132
                                        #   in Loop: Header=BB105_184 Depth=3
	jmp	.LBB105_399
.LBB105_399:                            # %if.end2133
                                        #   in Loop: Header=BB105_184 Depth=3
	cmpl	$1, -32(%rbp)
	jle	.LBB105_402
# %bb.400:                              # %land.lhs.true2136
                                        #   in Loop: Header=BB105_184 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB105_402
# %bb.401:                              # %if.then2139
                                        #   in Loop: Header=BB105_184 Depth=3
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movswl	-50(%rbp), %edx
	movswl	-36(%rbp), %ecx
	movswl	-38(%rbp), %r8d
	callq	SetRefAndMotionVectors
.LBB105_402:                            # %if.end2143
                                        #   in Loop: Header=BB105_184 Depth=3
	jmp	.LBB105_403
.LBB105_403:                            # %for.inc2144
                                        #   in Loop: Header=BB105_184 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB105_184
.LBB105_404:                            # %for.end2146
                                        #   in Loop: Header=BB105_181 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB105_408
# %bb.405:                              # %if.then2149
                                        #   in Loop: Header=BB105_181 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB105_407
# %bb.406:                              # %if.then2152
                                        #   in Loop: Header=BB105_181 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	leaq	-60(%rbp), %rsi
	callq	TransformDecision
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB105_407:                            # %if.end2155
                                        #   in Loop: Header=BB105_181 Depth=2
	jmp	.LBB105_408
.LBB105_408:                            # %if.end2156
                                        #   in Loop: Header=BB105_181 Depth=2
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB105_410
# %bb.409:                              # %if.then2159
                                        #   in Loop: Header=BB105_181 Depth=2
	movl	-32(%rbp), %eax
	movl	%eax, best_mode
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -316(%rbp)
.LBB105_410:                            # %if.end2161
                                        #   in Loop: Header=BB105_181 Depth=2
	jmp	.LBB105_411
.LBB105_411:                            # %if.end2162
                                        #   in Loop: Header=BB105_181 Depth=2
	jmp	.LBB105_412
.LBB105_412:                            # %for.inc2163
                                        #   in Loop: Header=BB105_181 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB105_181
.LBB105_413:                            # %for.end2165
                                        #   in Loop: Header=BB105_171 Depth=1
	cmpl	$0, -352(%rbp)
	je	.LBB105_826
# %bb.414:                              # %if.then2168
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	$0, -144(%rbp)
	movl	$2147483647, cost8_8x8ts # imm = 0x7FFFFFFF
	movq	cs_mb, %rdi
	callq	store_coding_state
	movq	-48(%rbp), %rax
	movl	$-1, 568(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB105_599
# %bb.415:                              # %if.then2171
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -140(%rbp)
	movl	$0, -28(%rbp)
.LBB105_416:                            # %for.cond2172
                                        #   Parent Loop BB105_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB105_418 Depth 3
                                        #         Child Loop BB105_445 Depth 4
                                        #         Child Loop BB105_464 Depth 4
                                        #           Child Loop BB105_466 Depth 5
                                        #         Child Loop BB105_473 Depth 4
                                        #         Child Loop BB105_508 Depth 4
                                        #           Child Loop BB105_510 Depth 5
                                        #         Child Loop BB105_532 Depth 4
                                        #           Child Loop BB105_534 Depth 5
                                        #             Child Loop BB105_536 Depth 6
                                        #         Child Loop BB105_544 Depth 4
                                        #           Child Loop BB105_546 Depth 5
                                        #       Child Loop BB105_569 Depth 3
                                        #         Child Loop BB105_571 Depth 4
                                        #           Child Loop BB105_573 Depth 5
                                        #       Child Loop BB105_581 Depth 3
                                        #         Child Loop BB105_583 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB105_598
# %bb.417:                              # %for.body2175
                                        #   in Loop: Header=BB105_416 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI105_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -412(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -416(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movl	$2147483647, -180(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -248(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB105_418:                            # %for.cond2184
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB105_445 Depth 4
                                        #         Child Loop BB105_464 Depth 4
                                        #           Child Loop BB105_466 Depth 5
                                        #         Child Loop BB105_473 Depth 4
                                        #         Child Loop BB105_508 Depth 4
                                        #           Child Loop BB105_510 Depth 5
                                        #         Child Loop BB105_532 Depth 4
                                        #           Child Loop BB105_534 Depth 5
                                        #             Child Loop BB105_536 Depth 6
                                        #         Child Loop BB105_544 Depth 4
                                        #           Child Loop BB105_546 Depth 5
	cmpl	$2, -80(%rbp)
	jge	.LBB105_559
# %bb.419:                              # %for.body2187
                                        #   in Loop: Header=BB105_418 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB105_421
# %bb.420:                              # %land.lhs.true2193
                                        #   in Loop: Header=BB105_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB105_423
.LBB105_421:                            # %lor.lhs.false2196
                                        #   in Loop: Header=BB105_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB105_557
# %bb.422:                              # %land.lhs.true2199
                                        #   in Loop: Header=BB105_418 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB105_557
.LBB105_423:                            # %if.then2201
                                        #   in Loop: Header=BB105_418 Depth=3
	movq	$0, -240(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB105_444
# %bb.424:                              # %if.then2204
                                        #   in Loop: Header=BB105_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB105_443
# %bb.425:                              # %if.then2207
                                        #   in Loop: Header=BB105_418 Depth=3
	movl	$0, -224(%rbp)
	movl	$0, -216(%rbp)
	movl	-28(%rbp), %edi
	leaq	-216(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -224(%rbp)
	cmpl	$2147483647, -224(%rbp) # imm = 0x7FFFFFFF
	je	.LBB105_427
# %bb.426:                              # %lor.lhs.false2211
                                        #   in Loop: Header=BB105_418 Depth=3
	cmpl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB105_428
.LBB105_427:                            # %if.then2214
                                        #   in Loop: Header=BB105_418 Depth=3
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -204(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB105_429
.LBB105_428:                            # %if.else2215
                                        #   in Loop: Header=BB105_418 Depth=3
	movl	-224(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-216(%rbp), %eax
	addl	-204(%rbp), %eax
	movl	%eax, -204(%rbp)
.LBB105_429:                            # %if.end2218
                                        #   in Loop: Header=BB105_418 Depth=3
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB105_431
	jmp	.LBB105_430
.LBB105_430:                            # %if.end2218
                                        #   in Loop: Header=BB105_418 Depth=3
	subl	$2, %eax
	je	.LBB105_438
	jmp	.LBB105_439
.LBB105_431:                            # %sw.bb
                                        #   in Loop: Header=BB105_418 Depth=3
	movl	-216(%rbp), %eax
	cmpl	-224(%rbp), %eax
	jl	.LBB105_435
# %bb.432:                              # %lor.lhs.false2222
                                        #   in Loop: Header=BB105_418 Depth=3
	cmpl	$0, -364(%rbp)
	je	.LBB105_435
# %bb.433:                              # %land.lhs.true2225
                                        #   in Loop: Header=BB105_418 Depth=3
	cmpl	$0, -360(%rbp)
	je	.LBB105_435
# %bb.434:                              # %land.lhs.true2228
                                        #   in Loop: Header=BB105_418 Depth=3
	cmpl	$0, -356(%rbp)
	jne	.LBB105_436
.LBB105_435:                            # %if.then2231
                                        #   in Loop: Header=BB105_418 Depth=3
	movl	-216(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB105_437
.LBB105_436:                            # %if.else2232
                                        #   in Loop: Header=BB105_418 Depth=3
	movl	-224(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB105_437:                            # %if.end2233
                                        #   in Loop: Header=BB105_418 Depth=3
	jmp	.LBB105_440
.LBB105_438:                            # %sw.bb2234
                                        #   in Loop: Header=BB105_418 Depth=3
	movl	-216(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB105_440
.LBB105_439:                            # %sw.default
                                        #   in Loop: Header=BB105_418 Depth=3
	movl	-224(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB105_440:                            # %sw.epilog
                                        #   in Loop: Header=BB105_418 Depth=3
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB105_442
# %bb.441:                              # %if.then2238
                                        #   in Loop: Header=BB105_418 Depth=3
	movl	-180(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB105_442:                            # %if.end2240
                                        #   in Loop: Header=BB105_418 Depth=3
	movl	-260(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -260(%rbp)
.LBB105_443:                            # %if.end2242
                                        #   in Loop: Header=BB105_418 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB105_518
.LBB105_444:                            # %if.else2278
                                        #   in Loop: Header=BB105_418 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-208(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB105_445:                            # %for.cond2279
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_416 Depth=2
                                        #       Parent Loop BB105_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB105_463
# %bb.446:                              # %for.body2286
                                        #   in Loop: Header=BB105_445 Depth=4
	cmpl	$0, -284(%rbp)
	je	.LBB105_449
# %bb.447:                              # %lor.lhs.false2288
                                        #   in Loop: Header=BB105_445 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB105_449
# %bb.448:                              # %lor.lhs.false2292
                                        #   in Loop: Header=BB105_445 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB105_461
.LBB105_449:                            # %if.then2296
                                        #   in Loop: Header=BB105_445 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB105_454
# %bb.450:                              # %cond.true2299
                                        #   in Loop: Header=BB105_445 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB105_452
# %bb.451:                              # %cond.true2305
                                        #   in Loop: Header=BB105_445 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB105_453
.LBB105_452:                            # %cond.false2306
                                        #   in Loop: Header=BB105_445 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB105_453:                            # %cond.end2309
                                        #   in Loop: Header=BB105_445 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB105_458
.LBB105_454:                            # %cond.false2313
                                        #   in Loop: Header=BB105_445 Depth=4
	vmovsd	.LCPI105_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB105_456
# %bb.455:                              # %cond.true2318
                                        #   in Loop: Header=BB105_445 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB105_457
.LBB105_456:                            # %cond.false2320
                                        #   in Loop: Header=BB105_445 Depth=4
	movl	$1, %eax
	jmp	.LBB105_457
.LBB105_457:                            # %cond.end2321
                                        #   in Loop: Header=BB105_445 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB105_458:                            # %cond.end2326
                                        #   in Loop: Header=BB105_445 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB105_460
# %bb.459:                              # %if.then2338
                                        #   in Loop: Header=BB105_445 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB105_460:                            # %if.end2339
                                        #   in Loop: Header=BB105_445 Depth=4
	jmp	.LBB105_461
.LBB105_461:                            # %if.end2340
                                        #   in Loop: Header=BB105_445 Depth=4
	jmp	.LBB105_462
.LBB105_462:                            # %for.inc2341
                                        #   in Loop: Header=BB105_445 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB105_445
.LBB105_463:                            # %for.end2343
                                        #   in Loop: Header=BB105_418 Depth=3
	movl	$0, -24(%rbp)
.LBB105_464:                            # %for.cond2344
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_416 Depth=2
                                        #       Parent Loop BB105_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB105_466 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB105_471
# %bb.465:                              # %for.body2347
                                        #   in Loop: Header=BB105_464 Depth=4
	movl	$0, -20(%rbp)
.LBB105_466:                            # %for.cond2348
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_416 Depth=2
                                        #       Parent Loop BB105_418 Depth=3
                                        #         Parent Loop BB105_464 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB105_469
# %bb.467:                              # %for.body2351
                                        #   in Loop: Header=BB105_466 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.468:                              # %for.inc2403
                                        #   in Loop: Header=BB105_466 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_466
.LBB105_469:                            # %for.end2405
                                        #   in Loop: Header=BB105_464 Depth=4
	jmp	.LBB105_470
.LBB105_470:                            # %for.inc2406
                                        #   in Loop: Header=BB105_464 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_464
.LBB105_471:                            # %for.end2408
                                        #   in Loop: Header=BB105_418 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB105_516
# %bb.472:                              # %if.then2410
                                        #   in Loop: Header=BB105_418 Depth=3
	movl	-208(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB105_473:                            # %for.cond2411
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_416 Depth=2
                                        #       Parent Loop BB105_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB105_487
# %bb.474:                              # %for.body2418
                                        #   in Loop: Header=BB105_473 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB105_479
# %bb.475:                              # %cond.true2421
                                        #   in Loop: Header=BB105_473 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB105_477
# %bb.476:                              # %cond.true2427
                                        #   in Loop: Header=BB105_473 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB105_478
.LBB105_477:                            # %cond.false2428
                                        #   in Loop: Header=BB105_473 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB105_478:                            # %cond.end2431
                                        #   in Loop: Header=BB105_473 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB105_483
.LBB105_479:                            # %cond.false2435
                                        #   in Loop: Header=BB105_473 Depth=4
	vmovsd	.LCPI105_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB105_481
# %bb.480:                              # %cond.true2440
                                        #   in Loop: Header=BB105_473 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB105_482
.LBB105_481:                            # %cond.false2442
                                        #   in Loop: Header=BB105_473 Depth=4
	movl	$1, %eax
	jmp	.LBB105_482
.LBB105_482:                            # %cond.end2443
                                        #   in Loop: Header=BB105_473 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB105_483:                            # %cond.end2448
                                        #   in Loop: Header=BB105_473 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB105_485
# %bb.484:                              # %if.then2460
                                        #   in Loop: Header=BB105_473 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB105_485:                            # %if.end2461
                                        #   in Loop: Header=BB105_473 Depth=4
	jmp	.LBB105_486
.LBB105_486:                            # %for.inc2462
                                        #   in Loop: Header=BB105_473 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB105_473
.LBB105_487:                            # %for.end2464
                                        #   in Loop: Header=BB105_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB105_495
# %bb.488:                              # %cond.true2467
                                        #   in Loop: Header=BB105_418 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB105_490
# %bb.489:                              # %cond.true2473
                                        #   in Loop: Header=BB105_418 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB105_491
.LBB105_490:                            # %cond.false2474
                                        #   in Loop: Header=BB105_418 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB105_491:                            # %cond.end2477
                                        #   in Loop: Header=BB105_418 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB105_493
# %bb.492:                              # %cond.true2486
                                        #   in Loop: Header=BB105_418 Depth=3
	xorl	%edx, %edx
	jmp	.LBB105_494
.LBB105_493:                            # %cond.false2487
                                        #   in Loop: Header=BB105_418 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB105_494:                            # %cond.end2489
                                        #   in Loop: Header=BB105_418 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB105_499
.LBB105_495:                            # %cond.false2494
                                        #   in Loop: Header=BB105_418 Depth=3
	vmovsd	.LCPI105_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB105_497
# %bb.496:                              # %cond.true2499
                                        #   in Loop: Header=BB105_418 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB105_498
.LBB105_497:                            # %cond.false2501
                                        #   in Loop: Header=BB105_418 Depth=3
	movl	$1, %eax
	jmp	.LBB105_498
.LBB105_498:                            # %cond.end2502
                                        #   in Loop: Header=BB105_418 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB105_499:                            # %cond.end2507
                                        #   in Loop: Header=BB105_418 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB105_502
# %bb.500:                              # %land.lhs.true2513
                                        #   in Loop: Header=BB105_418 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB105_502
# %bb.501:                              # %if.then2516
                                        #   in Loop: Header=BB105_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB105_507
.LBB105_502:                            # %if.else2517
                                        #   in Loop: Header=BB105_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB105_505
# %bb.503:                              # %land.lhs.true2520
                                        #   in Loop: Header=BB105_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB105_505
# %bb.504:                              # %if.then2523
                                        #   in Loop: Header=BB105_418 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB105_506
.LBB105_505:                            # %if.else2524
                                        #   in Loop: Header=BB105_418 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB105_506:                            # %if.end2525
                                        #   in Loop: Header=BB105_418 Depth=3
	jmp	.LBB105_507
.LBB105_507:                            # %if.end2526
                                        #   in Loop: Header=BB105_418 Depth=3
	movl	$0, -24(%rbp)
.LBB105_508:                            # %for.cond2527
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_416 Depth=2
                                        #       Parent Loop BB105_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB105_510 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB105_515
# %bb.509:                              # %for.body2530
                                        #   in Loop: Header=BB105_508 Depth=4
	movl	$0, -20(%rbp)
.LBB105_510:                            # %for.cond2531
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_416 Depth=2
                                        #       Parent Loop BB105_418 Depth=3
                                        #         Parent Loop BB105_508 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB105_513
# %bb.511:                              # %for.body2534
                                        #   in Loop: Header=BB105_510 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.512:                              # %for.inc2565
                                        #   in Loop: Header=BB105_510 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_510
.LBB105_513:                            # %for.end2567
                                        #   in Loop: Header=BB105_508 Depth=4
	jmp	.LBB105_514
.LBB105_514:                            # %for.inc2568
                                        #   in Loop: Header=BB105_508 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_508
.LBB105_515:                            # %for.end2570
                                        #   in Loop: Header=BB105_418 Depth=3
	jmp	.LBB105_517
.LBB105_516:                            # %if.else2571
                                        #   in Loop: Header=BB105_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB105_517:                            # %if.end2572
                                        #   in Loop: Header=BB105_418 Depth=3
	jmp	.LBB105_518
.LBB105_518:                            # %if.end2573
                                        #   in Loop: Header=BB105_418 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB105_520
# %bb.519:                              # %if.then2576
                                        #   in Loop: Header=BB105_418 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-276(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB105_526
.LBB105_520:                            # %if.else2578
                                        #   in Loop: Header=BB105_418 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB105_525
# %bb.521:                              # %if.then2581
                                        #   in Loop: Header=BB105_418 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB105_523
# %bb.522:                              # %cond.true2591
                                        #   in Loop: Header=BB105_418 Depth=3
	xorl	%eax, %eax
	jmp	.LBB105_524
.LBB105_523:                            # %cond.false2592
                                        #   in Loop: Header=BB105_418 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB105_524:                            # %cond.end2597
                                        #   in Loop: Header=BB105_418 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB105_525:                            # %if.end2603
                                        #   in Loop: Header=BB105_418 Depth=3
	jmp	.LBB105_526
.LBB105_526:                            # %if.end2604
                                        #   in Loop: Header=BB105_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB105_528
# %bb.527:                              # %land.lhs.true2607
                                        #   in Loop: Header=BB105_418 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-248(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB105_530
.LBB105_528:                            # %lor.lhs.false2610
                                        #   in Loop: Header=BB105_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB105_556
# %bb.529:                              # %land.lhs.true2613
                                        #   in Loop: Header=BB105_418 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jge	.LBB105_556
.LBB105_530:                            # %if.then2616
                                        #   in Loop: Header=BB105_418 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -180(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, part8x8mode(,%rcx,4)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8pdir(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8fwref(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8bwref(,%rcx,2)
	movl	-276(%rbp), %eax
	movl	%eax, -184(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB105_555
# %bb.531:                              # %if.then2627
                                        #   in Loop: Header=BB105_418 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB105_532:                            # %for.cond2638
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_416 Depth=2
                                        #       Parent Loop BB105_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB105_534 Depth 5
                                        #             Child Loop BB105_536 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB105_543
# %bb.533:                              # %for.body2641
                                        #   in Loop: Header=BB105_532 Depth=4
	movl	$0, -24(%rbp)
.LBB105_534:                            # %for.cond2642
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_416 Depth=2
                                        #       Parent Loop BB105_418 Depth=3
                                        #         Parent Loop BB105_532 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB105_536 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB105_541
# %bb.535:                              # %for.body2645
                                        #   in Loop: Header=BB105_534 Depth=5
	movl	$0, -20(%rbp)
.LBB105_536:                            # %for.cond2646
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_416 Depth=2
                                        #       Parent Loop BB105_418 Depth=3
                                        #         Parent Loop BB105_532 Depth=4
                                        #           Parent Loop BB105_534 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB105_539
# %bb.537:                              # %for.body2649
                                        #   in Loop: Header=BB105_536 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.538:                              # %for.inc2666
                                        #   in Loop: Header=BB105_536 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_536
.LBB105_539:                            # %for.end2668
                                        #   in Loop: Header=BB105_534 Depth=5
	jmp	.LBB105_540
.LBB105_540:                            # %for.inc2669
                                        #   in Loop: Header=BB105_534 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_534
.LBB105_541:                            # %for.end2671
                                        #   in Loop: Header=BB105_532 Depth=4
	jmp	.LBB105_542
.LBB105_542:                            # %for.inc2672
                                        #   in Loop: Header=BB105_532 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB105_532
.LBB105_543:                            # %for.end2674
                                        #   in Loop: Header=BB105_418 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB105_544:                            # %for.cond2675
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_416 Depth=2
                                        #       Parent Loop BB105_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB105_546 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_554
# %bb.545:                              # %for.body2679
                                        #   in Loop: Header=BB105_544 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB105_546:                            # %for.cond2680
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_416 Depth=2
                                        #       Parent Loop BB105_418 Depth=3
                                        #         Parent Loop BB105_544 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_552
# %bb.547:                              # %for.body2684
                                        #   in Loop: Header=BB105_546 Depth=5
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB105_549
# %bb.548:                              # %if.then2686
                                        #   in Loop: Header=BB105_546 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB105_550
.LBB105_549:                            # %if.else2705
                                        #   in Loop: Header=BB105_546 Depth=5
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB105_550:                            # %if.end2754
                                        #   in Loop: Header=BB105_546 Depth=5
	jmp	.LBB105_551
.LBB105_551:                            # %for.inc2755
                                        #   in Loop: Header=BB105_546 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_546
.LBB105_552:                            # %for.end2757
                                        #   in Loop: Header=BB105_544 Depth=4
	jmp	.LBB105_553
.LBB105_553:                            # %for.inc2758
                                        #   in Loop: Header=BB105_544 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_544
.LBB105_554:                            # %for.end2760
                                        #   in Loop: Header=BB105_418 Depth=3
	jmp	.LBB105_555
.LBB105_555:                            # %if.end2761
                                        #   in Loop: Header=BB105_418 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB105_556:                            # %if.end2762
                                        #   in Loop: Header=BB105_418 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB105_557:                            # %if.end2763
                                        #   in Loop: Header=BB105_418 Depth=3
	jmp	.LBB105_558
.LBB105_558:                            # %for.inc2764
                                        #   in Loop: Header=BB105_418 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB105_418
.LBB105_559:                            # %for.end2766
                                        #   in Loop: Header=BB105_416 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB105_592
# %bb.560:                              # %if.then2769
                                        #   in Loop: Header=BB105_416 Depth=2
	movl	-180(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	part8x8pdir(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -240(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB105_562
# %bb.561:                              # %lor.lhs.false2778
                                        #   in Loop: Header=BB105_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB105_563
.LBB105_562:                            # %cond.true2782
                                        #   in Loop: Header=BB105_416 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB105_564
.LBB105_563:                            # %cond.false2783
                                        #   in Loop: Header=BB105_416 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB105_564
.LBB105_564:                            # %cond.end2784
                                        #   in Loop: Header=BB105_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB105_566
# %bb.565:                              # %lor.lhs.false2789
                                        #   in Loop: Header=BB105_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB105_567
.LBB105_566:                            # %cond.true2793
                                        #   in Loop: Header=BB105_416 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB105_568
.LBB105_567:                            # %cond.false2794
                                        #   in Loop: Header=BB105_416 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB105_568
.LBB105_568:                            # %cond.end2795
                                        #   in Loop: Header=BB105_416 Depth=2
	movslq	-28(%rbp), %rcx
	movw	part8x8fwref(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-288(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	part8x8bwref(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -184(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB105_569:                            # %for.cond2813
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB105_571 Depth 4
                                        #           Child Loop BB105_573 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB105_580
# %bb.570:                              # %for.body2816
                                        #   in Loop: Header=BB105_569 Depth=3
	movl	$0, -24(%rbp)
.LBB105_571:                            # %for.cond2817
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_416 Depth=2
                                        #       Parent Loop BB105_569 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB105_573 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB105_578
# %bb.572:                              # %for.body2820
                                        #   in Loop: Header=BB105_571 Depth=4
	movl	$0, -20(%rbp)
.LBB105_573:                            # %for.cond2821
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_416 Depth=2
                                        #       Parent Loop BB105_569 Depth=3
                                        #         Parent Loop BB105_571 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB105_576
# %bb.574:                              # %for.body2824
                                        #   in Loop: Header=BB105_573 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.575:                              # %for.inc2842
                                        #   in Loop: Header=BB105_573 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_573
.LBB105_576:                            # %for.end2844
                                        #   in Loop: Header=BB105_571 Depth=4
	jmp	.LBB105_577
.LBB105_577:                            # %for.inc2845
                                        #   in Loop: Header=BB105_571 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_571
.LBB105_578:                            # %for.end2847
                                        #   in Loop: Header=BB105_569 Depth=3
	jmp	.LBB105_579
.LBB105_579:                            # %for.inc2848
                                        #   in Loop: Header=BB105_569 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB105_569
.LBB105_580:                            # %for.end2850
                                        #   in Loop: Header=BB105_416 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB105_581:                            # %for.cond2851
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB105_583 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_591
# %bb.582:                              # %for.body2855
                                        #   in Loop: Header=BB105_581 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB105_583:                            # %for.cond2856
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_416 Depth=2
                                        #       Parent Loop BB105_581 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_589
# %bb.584:                              # %for.body2860
                                        #   in Loop: Header=BB105_583 Depth=4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB105_586
# %bb.585:                              # %if.then2863
                                        #   in Loop: Header=BB105_583 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB105_587
.LBB105_586:                            # %if.else2886
                                        #   in Loop: Header=BB105_583 Depth=4
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB105_587:                            # %if.end2935
                                        #   in Loop: Header=BB105_583 Depth=4
	jmp	.LBB105_588
.LBB105_588:                            # %for.inc2936
                                        #   in Loop: Header=BB105_583 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_583
.LBB105_589:                            # %for.end2938
                                        #   in Loop: Header=BB105_581 Depth=3
	jmp	.LBB105_590
.LBB105_590:                            # %for.inc2939
                                        #   in Loop: Header=BB105_581 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_581
.LBB105_591:                            # %for.end2941
                                        #   in Loop: Header=BB105_416 Depth=2
	jmp	.LBB105_592
.LBB105_592:                            # %if.end2942
                                        #   in Loop: Header=BB105_416 Depth=2
	cmpl	$0, -184(%rbp)
	je	.LBB105_594
# %bb.593:                              # %if.then2944
                                        #   in Loop: Header=BB105_416 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-184(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB105_594:                            # %if.end2948
                                        #   in Loop: Header=BB105_416 Depth=2
	movl	-28(%rbp), %esi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-108(%rbp), %eax
	xorl	%edi, %edi
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8
	movl	-28(%rbp), %edi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %esi
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	cmpl	$3, -28(%rbp)
	jge	.LBB105_596
# %bb.595:                              # %if.then2973
                                        #   in Loop: Header=BB105_416 Depth=2
	movq	cs_b8, %rdi
	callq	reset_coding_state
.LBB105_596:                            # %if.end2974
                                        #   in Loop: Header=BB105_416 Depth=2
	jmp	.LBB105_597
.LBB105_597:                            # %for.inc2975
                                        #   in Loop: Header=BB105_416 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB105_416
.LBB105_598:                            # %for.end2977
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	cbp8x8, %eax
	movl	%eax, cbp8_8x8ts
	movslq	cbp_blk8x8, %rax
	movq	%rax, cbp_blk8_8x8ts
	movl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz8_8x8ts
	movl	-144(%rbp), %eax
	movl	%eax, cost8_8x8ts
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB105_599:                            # %if.end2980
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB105_802
# %bb.600:                              # %if.then2984
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	$0, -144(%rbp)
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -140(%rbp)
	movl	$0, -28(%rbp)
.LBB105_601:                            # %for.cond2985
                                        #   Parent Loop BB105_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB105_603 Depth 3
                                        #         Child Loop BB105_614 Depth 4
                                        #         Child Loop BB105_633 Depth 4
                                        #           Child Loop BB105_635 Depth 5
                                        #         Child Loop BB105_642 Depth 4
                                        #         Child Loop BB105_677 Depth 4
                                        #           Child Loop BB105_679 Depth 5
                                        #         Child Loop BB105_701 Depth 4
                                        #           Child Loop BB105_703 Depth 5
                                        #             Child Loop BB105_705 Depth 6
                                        #         Child Loop BB105_713 Depth 4
                                        #           Child Loop BB105_715 Depth 5
                                        #         Child Loop BB105_723 Depth 4
                                        #           Child Loop BB105_725 Depth 5
                                        #       Child Loop BB105_745 Depth 3
                                        #         Child Loop BB105_747 Depth 4
                                        #           Child Loop BB105_749 Depth 5
                                        #       Child Loop BB105_757 Depth 3
                                        #         Child Loop BB105_759 Depth 4
                                        #       Child Loop BB105_766 Depth 3
                                        #         Child Loop BB105_768 Depth 4
                                        #       Child Loop BB105_778 Depth 3
                                        #         Child Loop BB105_780 Depth 4
                                        #       Child Loop BB105_786 Depth 3
                                        #       Child Loop BB105_791 Depth 3
                                        #         Child Loop BB105_793 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB105_801
# %bb.602:                              # %for.body2988
                                        #   in Loop: Header=BB105_601 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI105_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -412(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -416(%rbp)
	movl	$2147483647, -180(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -248(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB105_603:                            # %for.cond2997
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB105_614 Depth 4
                                        #         Child Loop BB105_633 Depth 4
                                        #           Child Loop BB105_635 Depth 5
                                        #         Child Loop BB105_642 Depth 4
                                        #         Child Loop BB105_677 Depth 4
                                        #           Child Loop BB105_679 Depth 5
                                        #         Child Loop BB105_701 Depth 4
                                        #           Child Loop BB105_703 Depth 5
                                        #             Child Loop BB105_705 Depth 6
                                        #         Child Loop BB105_713 Depth 4
                                        #           Child Loop BB105_715 Depth 5
                                        #         Child Loop BB105_723 Depth 4
                                        #           Child Loop BB105_725 Depth 5
	cmpl	$5, -80(%rbp)
	jge	.LBB105_735
# %bb.604:                              # %for.body3000
                                        #   in Loop: Header=BB105_603 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cltq
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB105_733
# %bb.605:                              # %if.then3006
                                        #   in Loop: Header=BB105_603 Depth=3
	movq	$0, -240(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB105_613
# %bb.606:                              # %if.then3009
                                        #   in Loop: Header=BB105_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB105_612
# %bb.607:                              # %if.then3012
                                        #   in Loop: Header=BB105_603 Depth=3
	movl	-28(%rbp), %edi
	leaq	-216(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -60(%rbp)
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB105_609
# %bb.608:                              # %lor.lhs.false3016
                                        #   in Loop: Header=BB105_603 Depth=3
	cmpl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB105_610
.LBB105_609:                            # %if.then3019
                                        #   in Loop: Header=BB105_603 Depth=3
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB105_611
.LBB105_610:                            # %if.else3020
                                        #   in Loop: Header=BB105_603 Depth=3
	movl	-60(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
.LBB105_611:                            # %if.end3022
                                        #   in Loop: Header=BB105_603 Depth=3
	movl	-260(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -260(%rbp)
.LBB105_612:                            # %if.end3024
                                        #   in Loop: Header=BB105_603 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB105_687
.LBB105_613:                            # %if.else3060
                                        #   in Loop: Header=BB105_603 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-208(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB105_614:                            # %for.cond3061
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_601 Depth=2
                                        #       Parent Loop BB105_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB105_632
# %bb.615:                              # %for.body3068
                                        #   in Loop: Header=BB105_614 Depth=4
	cmpl	$0, -284(%rbp)
	je	.LBB105_618
# %bb.616:                              # %lor.lhs.false3070
                                        #   in Loop: Header=BB105_614 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB105_618
# %bb.617:                              # %lor.lhs.false3074
                                        #   in Loop: Header=BB105_614 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB105_630
.LBB105_618:                            # %if.then3078
                                        #   in Loop: Header=BB105_614 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB105_623
# %bb.619:                              # %cond.true3081
                                        #   in Loop: Header=BB105_614 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB105_621
# %bb.620:                              # %cond.true3087
                                        #   in Loop: Header=BB105_614 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB105_622
.LBB105_621:                            # %cond.false3088
                                        #   in Loop: Header=BB105_614 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB105_622:                            # %cond.end3091
                                        #   in Loop: Header=BB105_614 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB105_627
.LBB105_623:                            # %cond.false3095
                                        #   in Loop: Header=BB105_614 Depth=4
	vmovsd	.LCPI105_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB105_625
# %bb.624:                              # %cond.true3100
                                        #   in Loop: Header=BB105_614 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB105_626
.LBB105_625:                            # %cond.false3102
                                        #   in Loop: Header=BB105_614 Depth=4
	movl	$1, %eax
	jmp	.LBB105_626
.LBB105_626:                            # %cond.end3103
                                        #   in Loop: Header=BB105_614 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB105_627:                            # %cond.end3108
                                        #   in Loop: Header=BB105_614 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB105_629
# %bb.628:                              # %if.then3120
                                        #   in Loop: Header=BB105_614 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB105_629:                            # %if.end3121
                                        #   in Loop: Header=BB105_614 Depth=4
	jmp	.LBB105_630
.LBB105_630:                            # %if.end3122
                                        #   in Loop: Header=BB105_614 Depth=4
	jmp	.LBB105_631
.LBB105_631:                            # %for.inc3123
                                        #   in Loop: Header=BB105_614 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB105_614
.LBB105_632:                            # %for.end3125
                                        #   in Loop: Header=BB105_603 Depth=3
	movl	$0, -24(%rbp)
.LBB105_633:                            # %for.cond3126
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_601 Depth=2
                                        #       Parent Loop BB105_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB105_635 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB105_640
# %bb.634:                              # %for.body3129
                                        #   in Loop: Header=BB105_633 Depth=4
	movl	$0, -20(%rbp)
.LBB105_635:                            # %for.cond3130
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_601 Depth=2
                                        #       Parent Loop BB105_603 Depth=3
                                        #         Parent Loop BB105_633 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB105_638
# %bb.636:                              # %for.body3133
                                        #   in Loop: Header=BB105_635 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.637:                              # %for.inc3185
                                        #   in Loop: Header=BB105_635 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_635
.LBB105_638:                            # %for.end3187
                                        #   in Loop: Header=BB105_633 Depth=4
	jmp	.LBB105_639
.LBB105_639:                            # %for.inc3188
                                        #   in Loop: Header=BB105_633 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_633
.LBB105_640:                            # %for.end3190
                                        #   in Loop: Header=BB105_603 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB105_685
# %bb.641:                              # %if.then3192
                                        #   in Loop: Header=BB105_603 Depth=3
	movl	-208(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB105_642:                            # %for.cond3193
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_601 Depth=2
                                        #       Parent Loop BB105_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB105_656
# %bb.643:                              # %for.body3200
                                        #   in Loop: Header=BB105_642 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB105_648
# %bb.644:                              # %cond.true3203
                                        #   in Loop: Header=BB105_642 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB105_646
# %bb.645:                              # %cond.true3209
                                        #   in Loop: Header=BB105_642 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB105_647
.LBB105_646:                            # %cond.false3210
                                        #   in Loop: Header=BB105_642 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB105_647:                            # %cond.end3213
                                        #   in Loop: Header=BB105_642 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB105_652
.LBB105_648:                            # %cond.false3217
                                        #   in Loop: Header=BB105_642 Depth=4
	vmovsd	.LCPI105_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB105_650
# %bb.649:                              # %cond.true3222
                                        #   in Loop: Header=BB105_642 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB105_651
.LBB105_650:                            # %cond.false3224
                                        #   in Loop: Header=BB105_642 Depth=4
	movl	$1, %eax
	jmp	.LBB105_651
.LBB105_651:                            # %cond.end3225
                                        #   in Loop: Header=BB105_642 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB105_652:                            # %cond.end3230
                                        #   in Loop: Header=BB105_642 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB105_654
# %bb.653:                              # %if.then3242
                                        #   in Loop: Header=BB105_642 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB105_654:                            # %if.end3243
                                        #   in Loop: Header=BB105_642 Depth=4
	jmp	.LBB105_655
.LBB105_655:                            # %for.inc3244
                                        #   in Loop: Header=BB105_642 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB105_642
.LBB105_656:                            # %for.end3246
                                        #   in Loop: Header=BB105_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB105_664
# %bb.657:                              # %cond.true3249
                                        #   in Loop: Header=BB105_603 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB105_659
# %bb.658:                              # %cond.true3255
                                        #   in Loop: Header=BB105_603 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB105_660
.LBB105_659:                            # %cond.false3256
                                        #   in Loop: Header=BB105_603 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB105_660:                            # %cond.end3259
                                        #   in Loop: Header=BB105_603 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB105_662
# %bb.661:                              # %cond.true3268
                                        #   in Loop: Header=BB105_603 Depth=3
	xorl	%edx, %edx
	jmp	.LBB105_663
.LBB105_662:                            # %cond.false3269
                                        #   in Loop: Header=BB105_603 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB105_663:                            # %cond.end3271
                                        #   in Loop: Header=BB105_603 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB105_668
.LBB105_664:                            # %cond.false3276
                                        #   in Loop: Header=BB105_603 Depth=3
	vmovsd	.LCPI105_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB105_666
# %bb.665:                              # %cond.true3281
                                        #   in Loop: Header=BB105_603 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB105_667
.LBB105_666:                            # %cond.false3283
                                        #   in Loop: Header=BB105_603 Depth=3
	movl	$1, %eax
	jmp	.LBB105_667
.LBB105_667:                            # %cond.end3284
                                        #   in Loop: Header=BB105_603 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB105_668:                            # %cond.end3289
                                        #   in Loop: Header=BB105_603 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB105_671
# %bb.669:                              # %land.lhs.true3295
                                        #   in Loop: Header=BB105_603 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB105_671
# %bb.670:                              # %if.then3298
                                        #   in Loop: Header=BB105_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB105_676
.LBB105_671:                            # %if.else3299
                                        #   in Loop: Header=BB105_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB105_674
# %bb.672:                              # %land.lhs.true3302
                                        #   in Loop: Header=BB105_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB105_674
# %bb.673:                              # %if.then3305
                                        #   in Loop: Header=BB105_603 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB105_675
.LBB105_674:                            # %if.else3306
                                        #   in Loop: Header=BB105_603 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB105_675:                            # %if.end3307
                                        #   in Loop: Header=BB105_603 Depth=3
	jmp	.LBB105_676
.LBB105_676:                            # %if.end3308
                                        #   in Loop: Header=BB105_603 Depth=3
	movl	$0, -24(%rbp)
.LBB105_677:                            # %for.cond3309
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_601 Depth=2
                                        #       Parent Loop BB105_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB105_679 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB105_684
# %bb.678:                              # %for.body3312
                                        #   in Loop: Header=BB105_677 Depth=4
	movl	$0, -20(%rbp)
.LBB105_679:                            # %for.cond3313
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_601 Depth=2
                                        #       Parent Loop BB105_603 Depth=3
                                        #         Parent Loop BB105_677 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB105_682
# %bb.680:                              # %for.body3316
                                        #   in Loop: Header=BB105_679 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.681:                              # %for.inc3347
                                        #   in Loop: Header=BB105_679 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_679
.LBB105_682:                            # %for.end3349
                                        #   in Loop: Header=BB105_677 Depth=4
	jmp	.LBB105_683
.LBB105_683:                            # %for.inc3350
                                        #   in Loop: Header=BB105_677 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_677
.LBB105_684:                            # %for.end3352
                                        #   in Loop: Header=BB105_603 Depth=3
	jmp	.LBB105_686
.LBB105_685:                            # %if.else3353
                                        #   in Loop: Header=BB105_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB105_686:                            # %if.end3354
                                        #   in Loop: Header=BB105_603 Depth=3
	jmp	.LBB105_687
.LBB105_687:                            # %if.end3355
                                        #   in Loop: Header=BB105_603 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB105_689
# %bb.688:                              # %if.then3358
                                        #   in Loop: Header=BB105_603 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-276(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB105_695
.LBB105_689:                            # %if.else3360
                                        #   in Loop: Header=BB105_603 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB105_694
# %bb.690:                              # %if.then3363
                                        #   in Loop: Header=BB105_603 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB105_692
# %bb.691:                              # %cond.true3373
                                        #   in Loop: Header=BB105_603 Depth=3
	xorl	%eax, %eax
	jmp	.LBB105_693
.LBB105_692:                            # %cond.false3374
                                        #   in Loop: Header=BB105_603 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB105_693:                            # %cond.end3379
                                        #   in Loop: Header=BB105_603 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB105_694:                            # %if.end3385
                                        #   in Loop: Header=BB105_603 Depth=3
	jmp	.LBB105_695
.LBB105_695:                            # %if.end3386
                                        #   in Loop: Header=BB105_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB105_697
# %bb.696:                              # %land.lhs.true3389
                                        #   in Loop: Header=BB105_603 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-248(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB105_699
.LBB105_697:                            # %lor.lhs.false3392
                                        #   in Loop: Header=BB105_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB105_732
# %bb.698:                              # %land.lhs.true3395
                                        #   in Loop: Header=BB105_603 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jge	.LBB105_732
.LBB105_699:                            # %if.then3398
                                        #   in Loop: Header=BB105_603 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -180(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8mode(,%rcx,2)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+64(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+64(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+64(,%rcx,2)
	movl	-276(%rbp), %eax
	movl	%eax, -184(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB105_721
# %bb.700:                              # %if.then3410
                                        #   in Loop: Header=BB105_603 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB105_701:                            # %for.cond3422
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_601 Depth=2
                                        #       Parent Loop BB105_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB105_703 Depth 5
                                        #             Child Loop BB105_705 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB105_712
# %bb.702:                              # %for.body3425
                                        #   in Loop: Header=BB105_701 Depth=4
	movl	$0, -24(%rbp)
.LBB105_703:                            # %for.cond3426
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_601 Depth=2
                                        #       Parent Loop BB105_603 Depth=3
                                        #         Parent Loop BB105_701 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB105_705 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB105_710
# %bb.704:                              # %for.body3429
                                        #   in Loop: Header=BB105_703 Depth=5
	movl	$0, -20(%rbp)
.LBB105_705:                            # %for.cond3430
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_601 Depth=2
                                        #       Parent Loop BB105_603 Depth=3
                                        #         Parent Loop BB105_701 Depth=4
                                        #           Parent Loop BB105_703 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB105_708
# %bb.706:                              # %for.body3433
                                        #   in Loop: Header=BB105_705 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.707:                              # %for.inc3451
                                        #   in Loop: Header=BB105_705 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_705
.LBB105_708:                            # %for.end3453
                                        #   in Loop: Header=BB105_703 Depth=5
	jmp	.LBB105_709
.LBB105_709:                            # %for.inc3454
                                        #   in Loop: Header=BB105_703 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_703
.LBB105_710:                            # %for.end3456
                                        #   in Loop: Header=BB105_701 Depth=4
	jmp	.LBB105_711
.LBB105_711:                            # %for.inc3457
                                        #   in Loop: Header=BB105_701 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB105_701
.LBB105_712:                            # %for.end3459
                                        #   in Loop: Header=BB105_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB105_713:                            # %for.cond3460
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_601 Depth=2
                                        #       Parent Loop BB105_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB105_715 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_720
# %bb.714:                              # %for.body3464
                                        #   in Loop: Header=BB105_713 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB105_715:                            # %for.cond3465
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_601 Depth=2
                                        #       Parent Loop BB105_603 Depth=3
                                        #         Parent Loop BB105_713 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_718
# %bb.716:                              # %for.body3469
                                        #   in Loop: Header=BB105_715 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.717:                              # %for.inc3492
                                        #   in Loop: Header=BB105_715 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_715
.LBB105_718:                            # %for.end3494
                                        #   in Loop: Header=BB105_713 Depth=4
	jmp	.LBB105_719
.LBB105_719:                            # %for.inc3495
                                        #   in Loop: Header=BB105_713 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_713
.LBB105_720:                            # %for.end3497
                                        #   in Loop: Header=BB105_603 Depth=3
	jmp	.LBB105_721
.LBB105_721:                            # %if.end3498
                                        #   in Loop: Header=BB105_603 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB105_731
# %bb.722:                              # %if.then3501
                                        #   in Loop: Header=BB105_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB105_723:                            # %for.cond3502
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_601 Depth=2
                                        #       Parent Loop BB105_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB105_725 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_730
# %bb.724:                              # %for.body3506
                                        #   in Loop: Header=BB105_723 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB105_725:                            # %for.cond3507
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_601 Depth=2
                                        #       Parent Loop BB105_603 Depth=3
                                        #         Parent Loop BB105_723 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_728
# %bb.726:                              # %for.body3511
                                        #   in Loop: Header=BB105_725 Depth=5
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.727:                              # %for.inc3560
                                        #   in Loop: Header=BB105_725 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_725
.LBB105_728:                            # %for.end3562
                                        #   in Loop: Header=BB105_723 Depth=4
	jmp	.LBB105_729
.LBB105_729:                            # %for.inc3563
                                        #   in Loop: Header=BB105_723 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_723
.LBB105_730:                            # %for.end3565
                                        #   in Loop: Header=BB105_603 Depth=3
	jmp	.LBB105_731
.LBB105_731:                            # %if.end3566
                                        #   in Loop: Header=BB105_603 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB105_732:                            # %if.end3567
                                        #   in Loop: Header=BB105_603 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB105_733:                            # %if.end3568
                                        #   in Loop: Header=BB105_603 Depth=3
	jmp	.LBB105_734
.LBB105_734:                            # %for.inc3569
                                        #   in Loop: Header=BB105_603 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB105_603
.LBB105_735:                            # %for.end3571
                                        #   in Loop: Header=BB105_601 Depth=2
	movl	-180(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB105_775
# %bb.736:                              # %if.then3575
                                        #   in Loop: Header=BB105_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	best8x8pdir+64(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -240(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB105_738
# %bb.737:                              # %lor.lhs.false3584
                                        #   in Loop: Header=BB105_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB105_739
.LBB105_738:                            # %cond.true3588
                                        #   in Loop: Header=BB105_601 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB105_740
.LBB105_739:                            # %cond.false3589
                                        #   in Loop: Header=BB105_601 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB105_740
.LBB105_740:                            # %cond.end3590
                                        #   in Loop: Header=BB105_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB105_742
# %bb.741:                              # %lor.lhs.false3595
                                        #   in Loop: Header=BB105_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB105_743
.LBB105_742:                            # %cond.true3599
                                        #   in Loop: Header=BB105_601 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB105_744
.LBB105_743:                            # %cond.false3600
                                        #   in Loop: Header=BB105_601 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB105_744
.LBB105_744:                            # %cond.end3601
                                        #   in Loop: Header=BB105_601 Depth=2
	movslq	-28(%rbp), %rcx
	movw	best8x8fwref+64(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-288(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	best8x8bwref+64(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -184(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB105_745:                            # %for.cond3619
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB105_747 Depth 4
                                        #           Child Loop BB105_749 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB105_756
# %bb.746:                              # %for.body3622
                                        #   in Loop: Header=BB105_745 Depth=3
	movl	$0, -24(%rbp)
.LBB105_747:                            # %for.cond3623
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_601 Depth=2
                                        #       Parent Loop BB105_745 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB105_749 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB105_754
# %bb.748:                              # %for.body3626
                                        #   in Loop: Header=BB105_747 Depth=4
	movl	$0, -20(%rbp)
.LBB105_749:                            # %for.cond3627
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_601 Depth=2
                                        #       Parent Loop BB105_745 Depth=3
                                        #         Parent Loop BB105_747 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB105_752
# %bb.750:                              # %for.body3630
                                        #   in Loop: Header=BB105_749 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.751:                              # %for.inc3648
                                        #   in Loop: Header=BB105_749 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_749
.LBB105_752:                            # %for.end3650
                                        #   in Loop: Header=BB105_747 Depth=4
	jmp	.LBB105_753
.LBB105_753:                            # %for.inc3651
                                        #   in Loop: Header=BB105_747 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_747
.LBB105_754:                            # %for.end3653
                                        #   in Loop: Header=BB105_745 Depth=3
	jmp	.LBB105_755
.LBB105_755:                            # %for.inc3654
                                        #   in Loop: Header=BB105_745 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB105_745
.LBB105_756:                            # %for.end3656
                                        #   in Loop: Header=BB105_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB105_757:                            # %for.cond3657
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB105_759 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_764
# %bb.758:                              # %for.body3661
                                        #   in Loop: Header=BB105_757 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB105_759:                            # %for.cond3662
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_601 Depth=2
                                        #       Parent Loop BB105_757 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_762
# %bb.760:                              # %for.body3666
                                        #   in Loop: Header=BB105_759 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.761:                              # %for.inc3689
                                        #   in Loop: Header=BB105_759 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_759
.LBB105_762:                            # %for.end3691
                                        #   in Loop: Header=BB105_757 Depth=3
	jmp	.LBB105_763
.LBB105_763:                            # %for.inc3692
                                        #   in Loop: Header=BB105_757 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_757
.LBB105_764:                            # %for.end3694
                                        #   in Loop: Header=BB105_601 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB105_774
# %bb.765:                              # %if.then3697
                                        #   in Loop: Header=BB105_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB105_766:                            # %for.cond3698
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB105_768 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_773
# %bb.767:                              # %for.body3702
                                        #   in Loop: Header=BB105_766 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB105_768:                            # %for.cond3703
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_601 Depth=2
                                        #       Parent Loop BB105_766 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_771
# %bb.769:                              # %for.body3707
                                        #   in Loop: Header=BB105_768 Depth=4
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.770:                              # %for.inc3756
                                        #   in Loop: Header=BB105_768 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_768
.LBB105_771:                            # %for.end3758
                                        #   in Loop: Header=BB105_766 Depth=3
	jmp	.LBB105_772
.LBB105_772:                            # %for.inc3759
                                        #   in Loop: Header=BB105_766 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_766
.LBB105_773:                            # %for.end3761
                                        #   in Loop: Header=BB105_601 Depth=2
	jmp	.LBB105_774
.LBB105_774:                            # %if.end3762
                                        #   in Loop: Header=BB105_601 Depth=2
	jmp	.LBB105_775
.LBB105_775:                            # %if.end3763
                                        #   in Loop: Header=BB105_601 Depth=2
	cmpl	$0, -184(%rbp)
	je	.LBB105_777
# %bb.776:                              # %if.then3765
                                        #   in Loop: Header=BB105_601 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-184(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB105_777:                            # %if.end3769
                                        #   in Loop: Header=BB105_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	148(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	%eax, %ecx
	movl	%ecx, -104(%rbp)
	movq	img, %rax
	movl	144(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
	movl	%ecx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB105_778:                            # %for.cond3781
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB105_780 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_785
# %bb.779:                              # %for.body3785
                                        #   in Loop: Header=BB105_778 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB105_780:                            # %for.cond3786
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_601 Depth=2
                                        #       Parent Loop BB105_778 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_783
# %bb.781:                              # %for.body3790
                                        #   in Loop: Header=BB105_780 Depth=4
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
# %bb.782:                              # %for.inc3795
                                        #   in Loop: Header=BB105_780 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_780
.LBB105_783:                            # %for.end3797
                                        #   in Loop: Header=BB105_778 Depth=3
	jmp	.LBB105_784
.LBB105_784:                            # %for.inc3798
                                        #   in Loop: Header=BB105_778 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_778
.LBB105_785:                            # %for.end3800
                                        #   in Loop: Header=BB105_601 Depth=2
	movl	-28(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB105_786:                            # %for.cond3802
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_601 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_789
# %bb.787:                              # %for.body3806
                                        #   in Loop: Header=BB105_786 Depth=3
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.788:                              # %for.inc3809
                                        #   in Loop: Header=BB105_786 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_786
.LBB105_789:                            # %for.end3811
                                        #   in Loop: Header=BB105_601 Depth=2
	cmpl	$3, -28(%rbp)
	jge	.LBB105_799
# %bb.790:                              # %if.then3814
                                        #   in Loop: Header=BB105_601 Depth=2
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB105_791:                            # %for.cond3819
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB105_793 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_798
# %bb.792:                              # %for.body3823
                                        #   in Loop: Header=BB105_791 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB105_793:                            # %for.cond3824
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_601 Depth=2
                                        #       Parent Loop BB105_791 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_796
# %bb.794:                              # %for.body3828
                                        #   in Loop: Header=BB105_793 Depth=4
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.795:                              # %for.inc3842
                                        #   in Loop: Header=BB105_793 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_793
.LBB105_796:                            # %for.end3844
                                        #   in Loop: Header=BB105_791 Depth=3
	jmp	.LBB105_797
.LBB105_797:                            # %for.inc3845
                                        #   in Loop: Header=BB105_791 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_791
.LBB105_798:                            # %for.end3847
                                        #   in Loop: Header=BB105_601 Depth=2
	jmp	.LBB105_799
.LBB105_799:                            # %if.end3848
                                        #   in Loop: Header=BB105_601 Depth=2
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movslq	-28(%rbp), %rax
	movswl	best8x8pdir+64(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	best8x8fwref+64(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	best8x8bwref+64(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	movq	cs_b8, %rdi
	callq	reset_coding_state
# %bb.800:                              # %for.inc3858
                                        #   in Loop: Header=BB105_601 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB105_601
.LBB105_801:                            # %for.end3860
                                        #   in Loop: Header=BB105_171 Depth=1
	jmp	.LBB105_802
.LBB105_802:                            # %if.end3861
                                        #   in Loop: Header=BB105_171 Depth=1
	movq	cs_mb, %rdi
	callq	reset_coding_state
	movl	$0, -20(%rbp)
.LBB105_803:                            # %for.cond3862
                                        #   Parent Loop BB105_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB105_805 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB105_810
# %bb.804:                              # %for.body3865
                                        #   in Loop: Header=BB105_803 Depth=2
	movl	$0, -24(%rbp)
.LBB105_805:                            # %for.cond3866
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_803 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB105_808
# %bb.806:                              # %for.body3869
                                        #   in Loop: Header=BB105_805 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.807:                              # %for.inc3888
                                        #   in Loop: Header=BB105_805 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_805
.LBB105_808:                            # %for.end3890
                                        #   in Loop: Header=BB105_803 Depth=2
	jmp	.LBB105_809
.LBB105_809:                            # %for.inc3891
                                        #   in Loop: Header=BB105_803 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_803
.LBB105_810:                            # %for.end3893
                                        #   in Loop: Header=BB105_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB105_825
# %bb.811:                              # %land.lhs.true3896
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	-144(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jl	.LBB105_813
# %bb.812:                              # %lor.lhs.false3899
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB105_825
.LBB105_813:                            # %if.then3902
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	$8, best_mode
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB105_823
# %bb.814:                              # %if.then3905
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB105_816
# %bb.815:                              # %if.then3908
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB105_822
.LBB105_816:                            # %if.else3910
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	-144(%rbp), %eax
	cmpl	cost8_8x8ts, %eax
	jge	.LBB105_818
# %bb.817:                              # %if.then3913
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB105_821
.LBB105_818:                            # %if.else3915
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	callq	GetBestTransformP8x8
	cmpl	$0, %eax
	jne	.LBB105_820
# %bb.819:                              # %if.then3920
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB105_820:                            # %if.end3922
                                        #   in Loop: Header=BB105_171 Depth=1
	jmp	.LBB105_821
.LBB105_821:                            # %if.end3923
                                        #   in Loop: Header=BB105_171 Depth=1
	jmp	.LBB105_822
.LBB105_822:                            # %if.end3924
                                        #   in Loop: Header=BB105_171 Depth=1
	jmp	.LBB105_824
.LBB105_823:                            # %if.else3925
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB105_824:                            # %if.end3927
                                        #   in Loop: Header=BB105_171 Depth=1
	jmp	.LBB105_825
.LBB105_825:                            # %if.end3928
                                        #   in Loop: Header=BB105_171 Depth=1
	jmp	.LBB105_827
.LBB105_826:                            # %if.else3929
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
.LBB105_827:                            # %if.end3930
                                        #   in Loop: Header=BB105_171 Depth=1
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB105_829
# %bb.828:                              # %lor.lhs.false3934
                                        #   in Loop: Header=BB105_171 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB105_830
.LBB105_829:                            # %if.then3938
                                        #   in Loop: Header=BB105_171 Depth=1
	movb	$0, %al
	callq	FindSkipModeMotionVector
.LBB105_830:                            # %if.end3939
                                        #   in Loop: Header=BB105_171 Depth=1
	jmp	.LBB105_832
.LBB105_831:                            # %if.else3940
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
.LBB105_832:                            # %if.end3941
                                        #   in Loop: Header=BB105_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB105_1083
# %bb.833:                              # %if.then3944
                                        #   in Loop: Header=BB105_171 Depth=1
	vmovsd	-472(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB105_978
# %bb.834:                              # %if.then3947
                                        #   in Loop: Header=BB105_171 Depth=1
	leaq	-272(%rbp), %rdi
	leaq	-268(%rbp), %rsi
	leaq	-320(%rbp), %rdx
	callq	IntraChromaPrediction
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
.LBB105_835:                            # %for.cond3949
                                        #   Parent Loop BB105_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB105_853 Depth 3
                                        #         Child Loop BB105_908 Depth 4
                                        #           Child Loop BB105_911 Depth 5
                                        #             Child Loop BB105_913 Depth 6
                                        #           Child Loop BB105_920 Depth 5
                                        #             Child Loop BB105_922 Depth 6
                                        #         Child Loop BB105_955 Depth 4
                                        #           Child Loop BB105_957 Depth 5
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jg	.LBB105_977
# %bb.836:                              # %for.body3953
                                        #   in Loop: Header=BB105_835 Depth=2
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB105_838
# %bb.837:                              # %land.lhs.true3956
                                        #   in Loop: Header=BB105_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	jne	.LBB105_846
.LBB105_838:                            # %lor.lhs.false3960
                                        #   in Loop: Header=BB105_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$2, 524(%rax)
	jne	.LBB105_840
# %bb.839:                              # %land.lhs.true3964
                                        #   in Loop: Header=BB105_835 Depth=2
	cmpl	$0, -272(%rbp)
	je	.LBB105_846
.LBB105_840:                            # %lor.lhs.false3966
                                        #   in Loop: Header=BB105_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$1, 524(%rax)
	jne	.LBB105_842
# %bb.841:                              # %land.lhs.true3970
                                        #   in Loop: Header=BB105_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB105_846
.LBB105_842:                            # %lor.lhs.false3972
                                        #   in Loop: Header=BB105_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jne	.LBB105_847
# %bb.843:                              # %land.lhs.true3976
                                        #   in Loop: Header=BB105_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB105_846
# %bb.844:                              # %lor.lhs.false3978
                                        #   in Loop: Header=BB105_835 Depth=2
	cmpl	$0, -272(%rbp)
	je	.LBB105_846
# %bb.845:                              # %lor.lhs.false3980
                                        #   in Loop: Header=BB105_835 Depth=2
	cmpl	$0, -320(%rbp)
	jne	.LBB105_847
.LBB105_846:                            # %if.then3982
                                        #   in Loop: Header=BB105_835 Depth=2
	jmp	.LBB105_976
.LBB105_847:                            # %if.end3983
                                        #   in Loop: Header=BB105_835 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB105_849
# %bb.848:                              # %if.then3986
                                        #   in Loop: Header=BB105_835 Depth=2
	movl	$11, -300(%rbp)
	jmp	.LBB105_850
.LBB105_849:                            # %if.else3987
                                        #   in Loop: Header=BB105_835 Depth=2
	movl	$8, -300(%rbp)
.LBB105_850:                            # %if.end3988
                                        #   in Loop: Header=BB105_835 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB105_852
# %bb.851:                              # %if.then3991
                                        #   in Loop: Header=BB105_835 Depth=2
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB105_852:                            # %if.end3994
                                        #   in Loop: Header=BB105_835 Depth=2
	movl	$0, -128(%rbp)
	movl	$0, -80(%rbp)
.LBB105_853:                            # %for.cond3995
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_835 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB105_908 Depth 4
                                        #           Child Loop BB105_911 Depth 5
                                        #             Child Loop BB105_913 Depth 6
                                        #           Child Loop BB105_920 Depth 5
                                        #             Child Loop BB105_922 Depth 6
                                        #         Child Loop BB105_955 Depth 4
                                        #           Child Loop BB105_957 Depth 5
	movl	-80(%rbp), %eax
	cmpl	-300(%rbp), %eax
	jge	.LBB105_975
# %bb.854:                              # %for.body3998
                                        #   in Loop: Header=BB105_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB105_868
# %bb.855:                              # %if.then4003
                                        #   in Loop: Header=BB105_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table_RCT(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$10, -32(%rbp)
	jne	.LBB105_857
# %bb.856:                              # %if.then4008
                                        #   in Loop: Header=BB105_853 Depth=3
	movl	-80(%rbp), %eax
	subl	$5, %eax
	movl	%eax, -124(%rbp)
.LBB105_857:                            # %if.end4010
                                        #   in Loop: Header=BB105_853 Depth=3
	cmpl	$10, -32(%rbp)
	jne	.LBB105_867
# %bb.858:                              # %land.lhs.true4013
                                        #   in Loop: Header=BB105_853 Depth=3
	cmpl	$0, -124(%rbp)
	jne	.LBB105_860
# %bb.859:                              # %land.lhs.true4016
                                        #   in Loop: Header=BB105_853 Depth=3
	cmpl	$0, -272(%rbp)
	je	.LBB105_866
.LBB105_860:                            # %lor.lhs.false4018
                                        #   in Loop: Header=BB105_853 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB105_862
# %bb.861:                              # %land.lhs.true4021
                                        #   in Loop: Header=BB105_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB105_866
.LBB105_862:                            # %lor.lhs.false4023
                                        #   in Loop: Header=BB105_853 Depth=3
	cmpl	$3, -124(%rbp)
	jne	.LBB105_867
# %bb.863:                              # %land.lhs.true4026
                                        #   in Loop: Header=BB105_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB105_866
# %bb.864:                              # %lor.lhs.false4028
                                        #   in Loop: Header=BB105_853 Depth=3
	cmpl	$0, -272(%rbp)
	je	.LBB105_866
# %bb.865:                              # %lor.lhs.false4030
                                        #   in Loop: Header=BB105_853 Depth=3
	cmpl	$0, -320(%rbp)
	jne	.LBB105_867
.LBB105_866:                            # %if.then4032
                                        #   in Loop: Header=BB105_853 Depth=3
	jmp	.LBB105_974
.LBB105_867:                            # %if.end4033
                                        #   in Loop: Header=BB105_853 Depth=3
	jmp	.LBB105_869
.LBB105_868:                            # %if.else4034
                                        #   in Loop: Header=BB105_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -124(%rbp)
.LBB105_869:                            # %if.end4037
                                        #   in Loop: Header=BB105_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB105_881
# %bb.870:                              # %land.lhs.true4040
                                        #   in Loop: Header=BB105_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB105_881
# %bb.871:                              # %if.then4044
                                        #   in Loop: Header=BB105_853 Depth=3
	movl	-128(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB105_878
# %bb.872:                              # %land.lhs.true4048
                                        #   in Loop: Header=BB105_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB105_878
# %bb.873:                              # %if.then4052
                                        #   in Loop: Header=BB105_853 Depth=3
	cmpl	$2, -128(%rbp)
	jne	.LBB105_877
# %bb.874:                              # %land.lhs.true4055
                                        #   in Loop: Header=BB105_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB105_877
# %bb.875:                              # %land.lhs.true4062
                                        #   in Loop: Header=BB105_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB105_877
# %bb.876:                              # %if.then4065
                                        #   in Loop: Header=BB105_853 Depth=3
	movl	-128(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -128(%rbp)
.LBB105_877:                            # %if.end4066
                                        #   in Loop: Header=BB105_853 Depth=3
	jmp	.LBB105_878
.LBB105_878:                            # %if.end4067
                                        #   in Loop: Header=BB105_853 Depth=3
	cmpl	$2, -128(%rbp)
	jge	.LBB105_880
# %bb.879:                              # %if.then4070
                                        #   in Loop: Header=BB105_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB105_880:                            # %if.end4072
                                        #   in Loop: Header=BB105_853 Depth=3
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -128(%rbp)
.LBB105_881:                            # %if.end4074
                                        #   in Loop: Header=BB105_853 Depth=3
	movq	img, %rax
	movl	$0, 72392(%rax)
	movq	input, %rax
	cmpl	$0, 1312(%rax)
	je	.LBB105_888
# %bb.882:                              # %land.lhs.true4076
                                        #   in Loop: Header=BB105_853 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB105_888
# %bb.883:                              # %if.then4080
                                        #   in Loop: Header=BB105_853 Depth=3
	cmpl	$10, -32(%rbp)
	jl	.LBB105_887
# %bb.884:                              # %land.lhs.true4083
                                        #   in Loop: Header=BB105_853 Depth=3
	cmpl	$0, best_mode
	jne	.LBB105_887
# %bb.885:                              # %land.lhs.true4086
                                        #   in Loop: Header=BB105_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB105_887
# %bb.886:                              # %if.then4089
                                        #   in Loop: Header=BB105_853 Depth=3
	movslq	-32(%rbp), %rax
	movl	$0, -384(%rbp,%rax,4)
.LBB105_887:                            # %if.end4092
                                        #   in Loop: Header=BB105_853 Depth=3
	jmp	.LBB105_888
.LBB105_888:                            # %if.end4093
                                        #   in Loop: Header=BB105_853 Depth=3
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB105_965
# %bb.889:                              # %if.then4097
                                        #   in Loop: Header=BB105_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB105_903
# %bb.890:                              # %if.then4102
                                        #   in Loop: Header=BB105_853 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB105_893
# %bb.891:                              # %land.lhs.true4105
                                        #   in Loop: Header=BB105_853 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB105_893
# %bb.892:                              # %if.then4108
                                        #   in Loop: Header=BB105_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB105_902
.LBB105_893:                            # %if.else4110
                                        #   in Loop: Header=BB105_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB105_897
# %bb.894:                              # %land.lhs.true4113
                                        #   in Loop: Header=BB105_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB105_897
# %bb.895:                              # %land.lhs.true4115
                                        #   in Loop: Header=BB105_853 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB105_897
# %bb.896:                              # %if.then4118
                                        #   in Loop: Header=BB105_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB105_901
.LBB105_897:                            # %if.else4120
                                        #   in Loop: Header=BB105_853 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB105_900
# %bb.898:                              # %land.lhs.true4123
                                        #   in Loop: Header=BB105_853 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB105_900
# %bb.899:                              # %if.then4126
                                        #   in Loop: Header=BB105_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB105_900:                            # %if.end4128
                                        #   in Loop: Header=BB105_853 Depth=3
	jmp	.LBB105_901
.LBB105_901:                            # %if.end4129
                                        #   in Loop: Header=BB105_853 Depth=3
	jmp	.LBB105_902
.LBB105_902:                            # %if.end4130
                                        #   in Loop: Header=BB105_853 Depth=3
	jmp	.LBB105_903
.LBB105_903:                            # %if.end4131
                                        #   in Loop: Header=BB105_853 Depth=3
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB105_907
# %bb.904:                              # %lor.lhs.false4135
                                        #   in Loop: Header=BB105_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB105_907
# %bb.905:                              # %lor.lhs.false4138
                                        #   in Loop: Header=BB105_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB105_907
# %bb.906:                              # %lor.lhs.false4142
                                        #   in Loop: Header=BB105_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB105_947
.LBB105_907:                            # %if.then4146
                                        #   in Loop: Header=BB105_853 Depth=3
	jmp	.LBB105_908
.LBB105_908:                            # %while.body
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_835 Depth=2
                                        #       Parent Loop BB105_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB105_911 Depth 5
                                        #             Child Loop BB105_913 Depth 6
                                        #           Child Loop BB105_920 Depth 5
                                        #             Child Loop BB105_922 Depth 6
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB105_929
# %bb.909:                              # %if.then4149
                                        #   in Loop: Header=BB105_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB105_919
# %bb.910:                              # %if.then4152
                                        #   in Loop: Header=BB105_908 Depth=4
	movl	$0, -20(%rbp)
.LBB105_911:                            # %for.cond4153
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_835 Depth=2
                                        #       Parent Loop BB105_853 Depth=3
                                        #         Parent Loop BB105_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB105_913 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB105_918
# %bb.912:                              # %for.body4156
                                        #   in Loop: Header=BB105_911 Depth=5
	movl	$0, -24(%rbp)
.LBB105_913:                            # %for.cond4157
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_835 Depth=2
                                        #       Parent Loop BB105_853 Depth=3
                                        #         Parent Loop BB105_908 Depth=4
                                        #           Parent Loop BB105_911 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB105_916
# %bb.914:                              # %for.body4160
                                        #   in Loop: Header=BB105_913 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.915:                              # %for.inc4180
                                        #   in Loop: Header=BB105_913 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_913
.LBB105_916:                            # %for.end4182
                                        #   in Loop: Header=BB105_911 Depth=5
	jmp	.LBB105_917
.LBB105_917:                            # %for.inc4183
                                        #   in Loop: Header=BB105_911 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_911
.LBB105_918:                            # %for.end4185
                                        #   in Loop: Header=BB105_908 Depth=4
	jmp	.LBB105_928
.LBB105_919:                            # %if.else4186
                                        #   in Loop: Header=BB105_908 Depth=4
	movl	$0, -20(%rbp)
.LBB105_920:                            # %for.cond4187
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_835 Depth=2
                                        #       Parent Loop BB105_853 Depth=3
                                        #         Parent Loop BB105_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB105_922 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB105_927
# %bb.921:                              # %for.body4190
                                        #   in Loop: Header=BB105_920 Depth=5
	movl	$0, -24(%rbp)
.LBB105_922:                            # %for.cond4191
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_835 Depth=2
                                        #       Parent Loop BB105_853 Depth=3
                                        #         Parent Loop BB105_908 Depth=4
                                        #           Parent Loop BB105_920 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB105_925
# %bb.923:                              # %for.body4194
                                        #   in Loop: Header=BB105_922 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.924:                              # %for.inc4213
                                        #   in Loop: Header=BB105_922 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_922
.LBB105_925:                            # %for.end4215
                                        #   in Loop: Header=BB105_920 Depth=5
	jmp	.LBB105_926
.LBB105_926:                            # %for.inc4216
                                        #   in Loop: Header=BB105_920 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_920
.LBB105_927:                            # %for.end4218
                                        #   in Loop: Header=BB105_908 Depth=4
	jmp	.LBB105_928
.LBB105_928:                            # %if.end4219
                                        #   in Loop: Header=BB105_908 Depth=4
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB105_929:                            # %if.end4220
                                        #   in Loop: Header=BB105_908 Depth=4
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB105_945
# %bb.930:                              # %if.then4224
                                        #   in Loop: Header=BB105_908 Depth=4
	cmpl	$1, -32(%rbp)
	jl	.LBB105_935
# %bb.931:                              # %land.lhs.true4227
                                        #   in Loop: Header=BB105_908 Depth=4
	cmpl	$3, -32(%rbp)
	jg	.LBB105_935
# %bb.932:                              # %land.lhs.true4230
                                        #   in Loop: Header=BB105_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB105_935
# %bb.933:                              # %if.then4234
                                        #   in Loop: Header=BB105_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB105_934:                            # %while.body.backedge
                                        #   in Loop: Header=BB105_908 Depth=4
	jmp	.LBB105_908
.LBB105_935:                            # %if.else4236
                                        #   in Loop: Header=BB105_908 Depth=4
	cmpl	$0, -32(%rbp)
	jne	.LBB105_940
# %bb.936:                              # %land.lhs.true4239
                                        #   in Loop: Header=BB105_908 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB105_940
# %bb.937:                              # %land.lhs.true4241
                                        #   in Loop: Header=BB105_908 Depth=4
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB105_940
# %bb.938:                              # %land.lhs.true4244
                                        #   in Loop: Header=BB105_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB105_940
# %bb.939:                              # %if.then4248
                                        #   in Loop: Header=BB105_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB105_934
.LBB105_940:                            # %if.else4250
                                        #   in Loop: Header=BB105_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB105_944
# %bb.941:                              # %land.lhs.true4253
                                        #   in Loop: Header=BB105_908 Depth=4
	cmpl	$0, -368(%rbp)
	je	.LBB105_944
# %bb.942:                              # %land.lhs.true4256
                                        #   in Loop: Header=BB105_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB105_944
# %bb.943:                              # %if.then4260
                                        #   in Loop: Header=BB105_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB105_934
.LBB105_944:                            # %if.else4262
                                        #   in Loop: Header=BB105_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB105_946
.LBB105_945:                            # %if.else4264
                                        #   in Loop: Header=BB105_853 Depth=3
	jmp	.LBB105_946
.LBB105_946:                            # %while.end
                                        #   in Loop: Header=BB105_853 Depth=3
	jmp	.LBB105_947
.LBB105_947:                            # %if.end4265
                                        #   in Loop: Header=BB105_853 Depth=3
	cmpl	$0, -384(%rbp)
	je	.LBB105_964
# %bb.948:                              # %land.lhs.true4268
                                        #   in Loop: Header=BB105_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB105_964
# %bb.949:                              # %land.lhs.true4270
                                        #   in Loop: Header=BB105_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB105_964
# %bb.950:                              # %land.lhs.true4273
                                        #   in Loop: Header=BB105_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB105_964
# %bb.951:                              # %land.lhs.true4276
                                        #   in Loop: Header=BB105_853 Depth=3
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB105_964
# %bb.952:                              # %land.lhs.true4281
                                        #   in Loop: Header=BB105_853 Depth=3
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB105_964
# %bb.953:                              # %if.then4283
                                        #   in Loop: Header=BB105_853 Depth=3
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB105_963
# %bb.954:                              # %if.then4287
                                        #   in Loop: Header=BB105_853 Depth=3
	movl	$0, -20(%rbp)
.LBB105_955:                            # %for.cond4288
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_835 Depth=2
                                        #       Parent Loop BB105_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB105_957 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB105_962
# %bb.956:                              # %for.body4291
                                        #   in Loop: Header=BB105_955 Depth=4
	movl	$0, -24(%rbp)
.LBB105_957:                            # %for.cond4292
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_835 Depth=2
                                        #       Parent Loop BB105_853 Depth=3
                                        #         Parent Loop BB105_955 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB105_960
# %bb.958:                              # %for.body4295
                                        #   in Loop: Header=BB105_957 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.959:                              # %for.inc4314
                                        #   in Loop: Header=BB105_957 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_957
.LBB105_960:                            # %for.end4316
                                        #   in Loop: Header=BB105_955 Depth=4
	jmp	.LBB105_961
.LBB105_961:                            # %for.inc4317
                                        #   in Loop: Header=BB105_955 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_955
.LBB105_962:                            # %for.end4319
                                        #   in Loop: Header=BB105_853 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB105_963:                            # %if.end4320
                                        #   in Loop: Header=BB105_853 Depth=3
	jmp	.LBB105_964
.LBB105_964:                            # %if.end4321
                                        #   in Loop: Header=BB105_853 Depth=3
	jmp	.LBB105_965
.LBB105_965:                            # %if.end4322
                                        #   in Loop: Header=BB105_853 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB105_973
# %bb.966:                              # %land.lhs.true4325
                                        #   in Loop: Header=BB105_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB105_973
# %bb.967:                              # %if.then4329
                                        #   in Loop: Header=BB105_853 Depth=3
	cmpl	$2, -128(%rbp)
	jne	.LBB105_972
# %bb.968:                              # %land.lhs.true4332
                                        #   in Loop: Header=BB105_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB105_972
# %bb.969:                              # %land.lhs.true4339
                                        #   in Loop: Header=BB105_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB105_972
# %bb.970:                              # %land.lhs.true4342
                                        #   in Loop: Header=BB105_853 Depth=3
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB105_972
# %bb.971:                              # %if.then4346
                                        #   in Loop: Header=BB105_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB105_972:                            # %if.end4356
                                        #   in Loop: Header=BB105_853 Depth=3
	jmp	.LBB105_973
.LBB105_973:                            # %if.end4357
                                        #   in Loop: Header=BB105_853 Depth=3
	jmp	.LBB105_974
.LBB105_974:                            # %for.inc4358
                                        #   in Loop: Header=BB105_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB105_853
.LBB105_975:                            # %for.end4360
                                        #   in Loop: Header=BB105_835 Depth=2
	jmp	.LBB105_976
.LBB105_976:                            # %for.inc4361
                                        #   in Loop: Header=BB105_835 Depth=2
	movq	-48(%rbp), %rax
	movl	524(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 524(%rax)
	jmp	.LBB105_835
.LBB105_977:                            # %for.end4364
                                        #   in Loop: Header=BB105_171 Depth=1
	jmp	.LBB105_1082
.LBB105_978:                            # %if.else4365
                                        #   in Loop: Header=BB105_171 Depth=1
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB105_980
# %bb.979:                              # %if.then4368
                                        #   in Loop: Header=BB105_171 Depth=1
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB105_980:                            # %if.end4371
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	$0, -128(%rbp)
	movl	$0, -80(%rbp)
.LBB105_981:                            # %for.cond4372
                                        #   Parent Loop BB105_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB105_1014 Depth 3
                                        #         Child Loop BB105_1017 Depth 4
                                        #           Child Loop BB105_1019 Depth 5
                                        #         Child Loop BB105_1026 Depth 4
                                        #           Child Loop BB105_1028 Depth 5
                                        #       Child Loop BB105_1061 Depth 3
                                        #         Child Loop BB105_1063 Depth 4
	cmpl	$8, -80(%rbp)
	jge	.LBB105_1081
# %bb.982:                              # %for.body4375
                                        #   in Loop: Header=BB105_981 Depth=2
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB105_994
# %bb.983:                              # %land.lhs.true4380
                                        #   in Loop: Header=BB105_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB105_994
# %bb.984:                              # %if.then4384
                                        #   in Loop: Header=BB105_981 Depth=2
	movl	-128(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB105_991
# %bb.985:                              # %land.lhs.true4388
                                        #   in Loop: Header=BB105_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB105_991
# %bb.986:                              # %if.then4392
                                        #   in Loop: Header=BB105_981 Depth=2
	cmpl	$2, -128(%rbp)
	jne	.LBB105_990
# %bb.987:                              # %land.lhs.true4395
                                        #   in Loop: Header=BB105_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB105_990
# %bb.988:                              # %land.lhs.true4402
                                        #   in Loop: Header=BB105_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB105_990
# %bb.989:                              # %if.then4405
                                        #   in Loop: Header=BB105_981 Depth=2
	movl	-128(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -128(%rbp)
.LBB105_990:                            # %if.end4407
                                        #   in Loop: Header=BB105_981 Depth=2
	jmp	.LBB105_991
.LBB105_991:                            # %if.end4408
                                        #   in Loop: Header=BB105_981 Depth=2
	cmpl	$2, -128(%rbp)
	jge	.LBB105_993
# %bb.992:                              # %if.then4411
                                        #   in Loop: Header=BB105_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB105_993:                            # %if.end4413
                                        #   in Loop: Header=BB105_981 Depth=2
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -128(%rbp)
.LBB105_994:                            # %if.end4415
                                        #   in Loop: Header=BB105_981 Depth=2
	movq	img, %rax
	movl	$0, 72392(%rax)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB105_1071
# %bb.995:                              # %if.then4420
                                        #   in Loop: Header=BB105_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB105_1009
# %bb.996:                              # %if.then4425
                                        #   in Loop: Header=BB105_981 Depth=2
	cmpl	$1, -32(%rbp)
	jl	.LBB105_999
# %bb.997:                              # %land.lhs.true4428
                                        #   in Loop: Header=BB105_981 Depth=2
	cmpl	$3, -32(%rbp)
	jg	.LBB105_999
# %bb.998:                              # %if.then4431
                                        #   in Loop: Header=BB105_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB105_1008
.LBB105_999:                            # %if.else4433
                                        #   in Loop: Header=BB105_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB105_1003
# %bb.1000:                             # %land.lhs.true4436
                                        #   in Loop: Header=BB105_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB105_1003
# %bb.1001:                             # %land.lhs.true4438
                                        #   in Loop: Header=BB105_981 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB105_1003
# %bb.1002:                             # %if.then4441
                                        #   in Loop: Header=BB105_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB105_1007
.LBB105_1003:                           # %if.else4443
                                        #   in Loop: Header=BB105_981 Depth=2
	cmpl	$8, -32(%rbp)
	jne	.LBB105_1006
# %bb.1004:                             # %land.lhs.true4446
                                        #   in Loop: Header=BB105_981 Depth=2
	cmpl	$0, -368(%rbp)
	je	.LBB105_1006
# %bb.1005:                             # %if.then4449
                                        #   in Loop: Header=BB105_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB105_1006:                           # %if.end4451
                                        #   in Loop: Header=BB105_981 Depth=2
	jmp	.LBB105_1007
.LBB105_1007:                           # %if.end4452
                                        #   in Loop: Header=BB105_981 Depth=2
	jmp	.LBB105_1008
.LBB105_1008:                           # %if.end4453
                                        #   in Loop: Header=BB105_981 Depth=2
	jmp	.LBB105_1009
.LBB105_1009:                           # %if.end4454
                                        #   in Loop: Header=BB105_981 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB105_1013
# %bb.1010:                             # %lor.lhs.false4458
                                        #   in Loop: Header=BB105_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB105_1013
# %bb.1011:                             # %lor.lhs.false4462
                                        #   in Loop: Header=BB105_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB105_1013
# %bb.1012:                             # %lor.lhs.false4466
                                        #   in Loop: Header=BB105_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB105_1053
.LBB105_1013:                           # %if.then4470
                                        #   in Loop: Header=BB105_981 Depth=2
	jmp	.LBB105_1014
.LBB105_1014:                           # %while.body4471
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB105_1017 Depth 4
                                        #           Child Loop BB105_1019 Depth 5
                                        #         Child Loop BB105_1026 Depth 4
                                        #           Child Loop BB105_1028 Depth 5
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB105_1035
# %bb.1015:                             # %if.then4474
                                        #   in Loop: Header=BB105_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB105_1025
# %bb.1016:                             # %if.then4477
                                        #   in Loop: Header=BB105_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB105_1017:                           # %for.cond4478
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_981 Depth=2
                                        #       Parent Loop BB105_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB105_1019 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB105_1024
# %bb.1018:                             # %for.body4481
                                        #   in Loop: Header=BB105_1017 Depth=4
	movl	$0, -24(%rbp)
.LBB105_1019:                           # %for.cond4482
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_981 Depth=2
                                        #       Parent Loop BB105_1014 Depth=3
                                        #         Parent Loop BB105_1017 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB105_1022
# %bb.1020:                             # %for.body4485
                                        #   in Loop: Header=BB105_1019 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1021:                             # %for.inc4505
                                        #   in Loop: Header=BB105_1019 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_1019
.LBB105_1022:                           # %for.end4507
                                        #   in Loop: Header=BB105_1017 Depth=4
	jmp	.LBB105_1023
.LBB105_1023:                           # %for.inc4508
                                        #   in Loop: Header=BB105_1017 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_1017
.LBB105_1024:                           # %for.end4510
                                        #   in Loop: Header=BB105_1014 Depth=3
	jmp	.LBB105_1034
.LBB105_1025:                           # %if.else4511
                                        #   in Loop: Header=BB105_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB105_1026:                           # %for.cond4512
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_981 Depth=2
                                        #       Parent Loop BB105_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB105_1028 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB105_1033
# %bb.1027:                             # %for.body4515
                                        #   in Loop: Header=BB105_1026 Depth=4
	movl	$0, -24(%rbp)
.LBB105_1028:                           # %for.cond4516
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_981 Depth=2
                                        #       Parent Loop BB105_1014 Depth=3
                                        #         Parent Loop BB105_1026 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB105_1031
# %bb.1029:                             # %for.body4519
                                        #   in Loop: Header=BB105_1028 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1030:                             # %for.inc4538
                                        #   in Loop: Header=BB105_1028 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_1028
.LBB105_1031:                           # %for.end4540
                                        #   in Loop: Header=BB105_1026 Depth=4
	jmp	.LBB105_1032
.LBB105_1032:                           # %for.inc4541
                                        #   in Loop: Header=BB105_1026 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_1026
.LBB105_1033:                           # %for.end4543
                                        #   in Loop: Header=BB105_1014 Depth=3
	jmp	.LBB105_1034
.LBB105_1034:                           # %if.end4544
                                        #   in Loop: Header=BB105_1014 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB105_1035:                           # %if.end4545
                                        #   in Loop: Header=BB105_1014 Depth=3
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB105_1051
# %bb.1036:                             # %if.then4549
                                        #   in Loop: Header=BB105_1014 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB105_1041
# %bb.1037:                             # %land.lhs.true4552
                                        #   in Loop: Header=BB105_1014 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB105_1041
# %bb.1038:                             # %land.lhs.true4555
                                        #   in Loop: Header=BB105_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB105_1041
# %bb.1039:                             # %if.then4559
                                        #   in Loop: Header=BB105_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB105_1040:                           # %while.body4471.backedge
                                        #   in Loop: Header=BB105_1014 Depth=3
	jmp	.LBB105_1014
.LBB105_1041:                           # %if.else4561
                                        #   in Loop: Header=BB105_1014 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB105_1046
# %bb.1042:                             # %land.lhs.true4564
                                        #   in Loop: Header=BB105_1014 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB105_1046
# %bb.1043:                             # %land.lhs.true4566
                                        #   in Loop: Header=BB105_1014 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB105_1046
# %bb.1044:                             # %land.lhs.true4569
                                        #   in Loop: Header=BB105_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB105_1046
# %bb.1045:                             # %if.then4573
                                        #   in Loop: Header=BB105_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB105_1040
.LBB105_1046:                           # %if.else4575
                                        #   in Loop: Header=BB105_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB105_1050
# %bb.1047:                             # %land.lhs.true4578
                                        #   in Loop: Header=BB105_1014 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB105_1050
# %bb.1048:                             # %land.lhs.true4581
                                        #   in Loop: Header=BB105_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB105_1050
# %bb.1049:                             # %if.then4585
                                        #   in Loop: Header=BB105_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB105_1040
.LBB105_1050:                           # %if.else4587
                                        #   in Loop: Header=BB105_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB105_1052
.LBB105_1051:                           # %if.else4589
                                        #   in Loop: Header=BB105_981 Depth=2
	jmp	.LBB105_1052
.LBB105_1052:                           # %while.end4590
                                        #   in Loop: Header=BB105_981 Depth=2
	jmp	.LBB105_1053
.LBB105_1053:                           # %if.end4591
                                        #   in Loop: Header=BB105_981 Depth=2
	cmpl	$0, -384(%rbp)
	je	.LBB105_1070
# %bb.1054:                             # %land.lhs.true4594
                                        #   in Loop: Header=BB105_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB105_1070
# %bb.1055:                             # %land.lhs.true4596
                                        #   in Loop: Header=BB105_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB105_1070
# %bb.1056:                             # %land.lhs.true4599
                                        #   in Loop: Header=BB105_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB105_1070
# %bb.1057:                             # %land.lhs.true4602
                                        #   in Loop: Header=BB105_981 Depth=2
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB105_1070
# %bb.1058:                             # %land.lhs.true4607
                                        #   in Loop: Header=BB105_981 Depth=2
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB105_1070
# %bb.1059:                             # %if.then4610
                                        #   in Loop: Header=BB105_981 Depth=2
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB105_1069
# %bb.1060:                             # %if.then4614
                                        #   in Loop: Header=BB105_981 Depth=2
	movl	$0, -20(%rbp)
.LBB105_1061:                           # %for.cond4615
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB105_1063 Depth 4
	cmpl	$16, -20(%rbp)
	jge	.LBB105_1068
# %bb.1062:                             # %for.body4618
                                        #   in Loop: Header=BB105_1061 Depth=3
	movl	$0, -24(%rbp)
.LBB105_1063:                           # %for.cond4619
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_981 Depth=2
                                        #       Parent Loop BB105_1061 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -24(%rbp)
	jge	.LBB105_1066
# %bb.1064:                             # %for.body4622
                                        #   in Loop: Header=BB105_1063 Depth=4
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1065:                             # %for.inc4641
                                        #   in Loop: Header=BB105_1063 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_1063
.LBB105_1066:                           # %for.end4643
                                        #   in Loop: Header=BB105_1061 Depth=3
	jmp	.LBB105_1067
.LBB105_1067:                           # %for.inc4644
                                        #   in Loop: Header=BB105_1061 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_1061
.LBB105_1068:                           # %for.end4646
                                        #   in Loop: Header=BB105_981 Depth=2
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB105_1069:                           # %if.end4647
                                        #   in Loop: Header=BB105_981 Depth=2
	jmp	.LBB105_1070
.LBB105_1070:                           # %if.end4648
                                        #   in Loop: Header=BB105_981 Depth=2
	jmp	.LBB105_1071
.LBB105_1071:                           # %if.end4649
                                        #   in Loop: Header=BB105_981 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB105_1079
# %bb.1072:                             # %land.lhs.true4652
                                        #   in Loop: Header=BB105_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB105_1079
# %bb.1073:                             # %if.then4656
                                        #   in Loop: Header=BB105_981 Depth=2
	cmpl	$2, -128(%rbp)
	jne	.LBB105_1078
# %bb.1074:                             # %land.lhs.true4659
                                        #   in Loop: Header=BB105_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB105_1078
# %bb.1075:                             # %land.lhs.true4666
                                        #   in Loop: Header=BB105_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB105_1078
# %bb.1076:                             # %land.lhs.true4669
                                        #   in Loop: Header=BB105_981 Depth=2
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB105_1078
# %bb.1077:                             # %if.then4673
                                        #   in Loop: Header=BB105_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB105_1078:                           # %if.end4683
                                        #   in Loop: Header=BB105_981 Depth=2
	jmp	.LBB105_1079
.LBB105_1079:                           # %if.end4684
                                        #   in Loop: Header=BB105_981 Depth=2
	jmp	.LBB105_1080
.LBB105_1080:                           # %for.inc4685
                                        #   in Loop: Header=BB105_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB105_981
.LBB105_1081:                           # %for.end4687
                                        #   in Loop: Header=BB105_171 Depth=1
	jmp	.LBB105_1082
.LBB105_1082:                           # %if.end4688
                                        #   in Loop: Header=BB105_171 Depth=1
	jmp	.LBB105_1284
.LBB105_1083:                           # %if.else4689
                                        #   in Loop: Header=BB105_171 Depth=1
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -228(%rbp)
	movq	-48(%rbp), %rax
	movl	576(%rax), %eax
	movl	%eax, -308(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB105_1085
# %bb.1084:                             # %if.then4694
                                        #   in Loop: Header=BB105_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB105_1085:                           # %if.end4695
                                        #   in Loop: Header=BB105_171 Depth=1
	cmpl	$0, -384(%rbp)
	je	.LBB105_1123
# %bb.1086:                             # %land.lhs.true4698
                                        #   in Loop: Header=BB105_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB105_1123
# %bb.1087:                             # %if.then4700
                                        #   in Loop: Header=BB105_171 Depth=1
	cmpl	$0, -260(%rbp)
	je	.LBB105_1100
# %bb.1088:                             # %if.then4702
                                        #   in Loop: Header=BB105_171 Depth=1
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB105_1090
	jmp	.LBB105_1089
.LBB105_1089:                           # %if.then4702
                                        #   in Loop: Header=BB105_171 Depth=1
	subl	$2, %eax
	je	.LBB105_1097
	jmp	.LBB105_1098
.LBB105_1090:                           # %sw.bb4704
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	-204(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jl	.LBB105_1094
# %bb.1091:                             # %lor.lhs.false4707
                                        #   in Loop: Header=BB105_171 Depth=1
	cmpl	$0, -364(%rbp)
	je	.LBB105_1094
# %bb.1092:                             # %land.lhs.true4710
                                        #   in Loop: Header=BB105_171 Depth=1
	cmpl	$0, -360(%rbp)
	je	.LBB105_1094
# %bb.1093:                             # %land.lhs.true4713
                                        #   in Loop: Header=BB105_171 Depth=1
	cmpl	$0, -356(%rbp)
	jne	.LBB105_1095
.LBB105_1094:                           # %if.then4716
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	-204(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB105_1096
.LBB105_1095:                           # %if.else4717
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB105_1096:                           # %if.end4718
                                        #   in Loop: Header=BB105_171 Depth=1
	jmp	.LBB105_1099
.LBB105_1097:                           # %sw.bb4719
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	-204(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB105_1099
.LBB105_1098:                           # %sw.default4720
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB105_1099:                           # %sw.epilog4721
                                        #   in Loop: Header=BB105_171 Depth=1
	jmp	.LBB105_1101
.LBB105_1100:                           # %if.else4722
                                        #   in Loop: Header=BB105_171 Depth=1
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	Get_Direct_CostMB
	movl	%eax, -60(%rbp)
.LBB105_1101:                           # %if.end4724
                                        #   in Loop: Header=BB105_171 Depth=1
	vmovsd	.LCPI105_17(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI105_18(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-60(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB105_1121
# %bb.1102:                             # %if.then4731
                                        #   in Loop: Header=BB105_171 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB105_1111
# %bb.1103:                             # %land.lhs.true4734
                                        #   in Loop: Header=BB105_171 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB105_1111
# %bb.1104:                             # %if.then4737
                                        #   in Loop: Header=BB105_171 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB105_1106
# %bb.1105:                             # %if.then4741
                                        #   in Loop: Header=BB105_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB105_1110
.LBB105_1106:                           # %if.else4743
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	-204(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB105_1108
# %bb.1107:                             # %if.then4746
                                        #   in Loop: Header=BB105_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB105_1109
.LBB105_1108:                           # %if.else4748
                                        #   in Loop: Header=BB105_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB105_1109:                           # %if.end4750
                                        #   in Loop: Header=BB105_171 Depth=1
	jmp	.LBB105_1110
.LBB105_1110:                           # %if.end4751
                                        #   in Loop: Header=BB105_171 Depth=1
	jmp	.LBB105_1112
.LBB105_1111:                           # %if.else4752
                                        #   in Loop: Header=BB105_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB105_1112:                           # %if.end4754
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	$0, -20(%rbp)
.LBB105_1113:                           # %for.cond4755
                                        #   Parent Loop BB105_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB105_1115 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB105_1120
# %bb.1114:                             # %for.body4758
                                        #   in Loop: Header=BB105_1113 Depth=2
	movl	$0, -24(%rbp)
.LBB105_1115:                           # %for.cond4759
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_1113 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB105_1118
# %bb.1116:                             # %for.body4762
                                        #   in Loop: Header=BB105_1115 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1117:                             # %for.inc4783
                                        #   in Loop: Header=BB105_1115 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_1115
.LBB105_1118:                           # %for.end4785
                                        #   in Loop: Header=BB105_1113 Depth=2
	jmp	.LBB105_1119
.LBB105_1119:                           # %for.inc4786
                                        #   in Loop: Header=BB105_1113 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_1113
.LBB105_1120:                           # %for.end4788
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, best_mode
	jmp	.LBB105_1122
.LBB105_1121:                           # %if.else4789
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-308(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB105_1122:                           # %if.end4792
                                        #   in Loop: Header=BB105_171 Depth=1
	jmp	.LBB105_1123
.LBB105_1123:                           # %if.end4793
                                        #   in Loop: Header=BB105_171 Depth=1
	cmpl	$0, -332(%rbp)
	je	.LBB105_1170
# %bb.1124:                             # %if.then4796
                                        #   in Loop: Header=BB105_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$13, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movl	%eax, -172(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB105_1168
# %bb.1125:                             # %if.then4802
                                        #   in Loop: Header=BB105_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB105_1149
# %bb.1126:                             # %if.then4805
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	$0, -20(%rbp)
.LBB105_1127:                           # %for.cond4806
                                        #   Parent Loop BB105_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB105_1129 Depth 3
                                        #         Child Loop BB105_1131 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB105_1140
# %bb.1128:                             # %for.body4809
                                        #   in Loop: Header=BB105_1127 Depth=2
	movl	$0, -24(%rbp)
.LBB105_1129:                           # %for.cond4810
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_1127 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB105_1131 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB105_1138
# %bb.1130:                             # %for.body4813
                                        #   in Loop: Header=BB105_1129 Depth=3
	movl	$0, -56(%rbp)
.LBB105_1131:                           # %for.cond4814
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_1127 Depth=2
                                        #       Parent Loop BB105_1129 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB105_1136
# %bb.1132:                             # %for.body4817
                                        #   in Loop: Header=BB105_1131 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB105_1134
# %bb.1133:                             # %if.then4825
                                        #   in Loop: Header=BB105_1131 Depth=4
	movl	$2, -132(%rbp)
.LBB105_1134:                           # %if.end4826
                                        #   in Loop: Header=BB105_1131 Depth=4
	jmp	.LBB105_1135
.LBB105_1135:                           # %for.inc4827
                                        #   in Loop: Header=BB105_1131 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB105_1131
.LBB105_1136:                           # %for.end4829
                                        #   in Loop: Header=BB105_1129 Depth=3
	jmp	.LBB105_1137
.LBB105_1137:                           # %for.inc4830
                                        #   in Loop: Header=BB105_1129 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_1129
.LBB105_1138:                           # %for.end4832
                                        #   in Loop: Header=BB105_1127 Depth=2
	jmp	.LBB105_1139
.LBB105_1139:                           # %for.inc4833
                                        #   in Loop: Header=BB105_1127 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_1127
.LBB105_1140:                           # %for.end4835
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-172(%rbp), %eax
	movl	%eax, -172(%rbp)
	movl	$0, -24(%rbp)
.LBB105_1141:                           # %for.cond4840
                                        #   Parent Loop BB105_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB105_1143 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB105_1148
# %bb.1142:                             # %for.body4843
                                        #   in Loop: Header=BB105_1141 Depth=2
	movl	$0, -20(%rbp)
.LBB105_1143:                           # %for.cond4844
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_1141 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB105_1146
# %bb.1144:                             # %for.body4847
                                        #   in Loop: Header=BB105_1143 Depth=3
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgU, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgV, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1145:                             # %for.inc4875
                                        #   in Loop: Header=BB105_1143 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_1143
.LBB105_1146:                           # %for.end4877
                                        #   in Loop: Header=BB105_1141 Depth=2
	jmp	.LBB105_1147
.LBB105_1147:                           # %for.inc4878
                                        #   in Loop: Header=BB105_1141 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_1141
.LBB105_1148:                           # %for.end4880
                                        #   in Loop: Header=BB105_171 Depth=1
	jmp	.LBB105_1149
.LBB105_1149:                           # %if.end4881
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	-172(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB105_1151
# %bb.1150:                             # %if.then4886
                                        #   in Loop: Header=BB105_171 Depth=1
	movq	cofAC, %rax
	movq	%rax, -400(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-400(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB105_1151:                           # %if.end4889
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	$0, -24(%rbp)
.LBB105_1152:                           # %for.cond4890
                                        #   Parent Loop BB105_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB105_1154 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB105_1159
# %bb.1153:                             # %for.body4893
                                        #   in Loop: Header=BB105_1152 Depth=2
	movl	$0, -20(%rbp)
.LBB105_1154:                           # %for.cond4894
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_1152 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB105_1157
# %bb.1155:                             # %for.body4897
                                        #   in Loop: Header=BB105_1154 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgY, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1156:                             # %for.inc4911
                                        #   in Loop: Header=BB105_1154 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_1154
.LBB105_1157:                           # %for.end4913
                                        #   in Loop: Header=BB105_1152 Depth=2
	jmp	.LBB105_1158
.LBB105_1158:                           # %for.inc4914
                                        #   in Loop: Header=BB105_1152 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_1152
.LBB105_1159:                           # %for.end4916
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	$0, -20(%rbp)
.LBB105_1160:                           # %for.cond4917
                                        #   Parent Loop BB105_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB105_1162 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB105_1167
# %bb.1161:                             # %for.body4920
                                        #   in Loop: Header=BB105_1160 Depth=2
	movl	$0, -24(%rbp)
.LBB105_1162:                           # %for.cond4921
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_1160 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB105_1165
# %bb.1163:                             # %for.body4924
                                        #   in Loop: Header=BB105_1162 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1164:                             # %for.inc4945
                                        #   in Loop: Header=BB105_1162 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_1162
.LBB105_1165:                           # %for.end4947
                                        #   in Loop: Header=BB105_1160 Depth=2
	jmp	.LBB105_1166
.LBB105_1166:                           # %for.inc4948
                                        #   in Loop: Header=BB105_1160 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_1160
.LBB105_1167:                           # %for.end4950
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$13, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -228(%rbp)
	jmp	.LBB105_1169
.LBB105_1168:                           # %if.else4952
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB105_1169:                           # %if.end4954
                                        #   in Loop: Header=BB105_171 Depth=1
	jmp	.LBB105_1170
.LBB105_1170:                           # %if.end4955
                                        #   in Loop: Header=BB105_171 Depth=1
	cmpl	$0, -348(%rbp)
	je	.LBB105_1199
# %bb.1171:                             # %if.then4958
                                        #   in Loop: Header=BB105_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$9, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movl	%eax, -172(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB105_1197
# %bb.1172:                             # %if.then4964
                                        #   in Loop: Header=BB105_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB105_1188
# %bb.1173:                             # %if.then4967
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	$0, -20(%rbp)
.LBB105_1174:                           # %for.cond4968
                                        #   Parent Loop BB105_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB105_1176 Depth 3
                                        #         Child Loop BB105_1178 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB105_1187
# %bb.1175:                             # %for.body4971
                                        #   in Loop: Header=BB105_1174 Depth=2
	movl	$0, -24(%rbp)
.LBB105_1176:                           # %for.cond4972
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_1174 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB105_1178 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB105_1185
# %bb.1177:                             # %for.body4975
                                        #   in Loop: Header=BB105_1176 Depth=3
	movl	$0, -56(%rbp)
.LBB105_1178:                           # %for.cond4976
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_1174 Depth=2
                                        #       Parent Loop BB105_1176 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB105_1183
# %bb.1179:                             # %for.body4979
                                        #   in Loop: Header=BB105_1178 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB105_1181
# %bb.1180:                             # %if.then4987
                                        #   in Loop: Header=BB105_1178 Depth=4
	movl	$2, -132(%rbp)
.LBB105_1181:                           # %if.end4988
                                        #   in Loop: Header=BB105_1178 Depth=4
	jmp	.LBB105_1182
.LBB105_1182:                           # %for.inc4989
                                        #   in Loop: Header=BB105_1178 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB105_1178
.LBB105_1183:                           # %for.end4991
                                        #   in Loop: Header=BB105_1176 Depth=3
	jmp	.LBB105_1184
.LBB105_1184:                           # %for.inc4992
                                        #   in Loop: Header=BB105_1176 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_1176
.LBB105_1185:                           # %for.end4994
                                        #   in Loop: Header=BB105_1174 Depth=2
	jmp	.LBB105_1186
.LBB105_1186:                           # %for.inc4995
                                        #   in Loop: Header=BB105_1174 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_1174
.LBB105_1187:                           # %for.end4997
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-172(%rbp), %eax
	movl	%eax, -172(%rbp)
.LBB105_1188:                           # %if.end5002
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	-172(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movl	$0, -20(%rbp)
.LBB105_1189:                           # %for.cond5004
                                        #   Parent Loop BB105_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB105_1191 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB105_1196
# %bb.1190:                             # %for.body5007
                                        #   in Loop: Header=BB105_1189 Depth=2
	movl	$0, -24(%rbp)
.LBB105_1191:                           # %for.cond5008
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_1189 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB105_1194
# %bb.1192:                             # %for.body5011
                                        #   in Loop: Header=BB105_1191 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1193:                             # %for.inc5032
                                        #   in Loop: Header=BB105_1191 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_1191
.LBB105_1194:                           # %for.end5034
                                        #   in Loop: Header=BB105_1189 Depth=2
	jmp	.LBB105_1195
.LBB105_1195:                           # %for.inc5035
                                        #   in Loop: Header=BB105_1189 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_1189
.LBB105_1196:                           # %for.end5037
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$9, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -228(%rbp)
	jmp	.LBB105_1198
.LBB105_1197:                           # %if.else5039
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movq	cofAC, %rax
	movq	%rax, -400(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-400(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB105_1198:                           # %if.end5043
                                        #   in Loop: Header=BB105_171 Depth=1
	jmp	.LBB105_1199
.LBB105_1199:                           # %if.end5044
                                        #   in Loop: Header=BB105_171 Depth=1
	cmpl	$0, -344(%rbp)
	je	.LBB105_1283
# %bb.1200:                             # %if.then5047
                                        #   in Loop: Header=BB105_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movb	$0, %al
	callq	intrapred_luma_16x16
	leaq	-124(%rbp), %rdi
	callq	find_sad_16x16
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB105_1281
# %bb.1201:                             # %if.then5052
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	$0, -20(%rbp)
.LBB105_1202:                           # %for.cond5053
                                        #   Parent Loop BB105_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB105_1204 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB105_1209
# %bb.1203:                             # %for.body5056
                                        #   in Loop: Header=BB105_1202 Depth=2
	movl	$0, -24(%rbp)
.LBB105_1204:                           # %for.cond5057
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_1202 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB105_1207
# %bb.1205:                             # %for.body5060
                                        #   in Loop: Header=BB105_1204 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-124(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1206:                             # %for.inc5082
                                        #   in Loop: Header=BB105_1204 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_1204
.LBB105_1207:                           # %for.end5084
                                        #   in Loop: Header=BB105_1202 Depth=2
	jmp	.LBB105_1208
.LBB105_1208:                           # %for.inc5085
                                        #   in Loop: Header=BB105_1202 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_1202
.LBB105_1209:                           # %for.end5087
                                        #   in Loop: Header=BB105_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB105_1219
# %bb.1210:                             # %if.then5090
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	$0, -24(%rbp)
.LBB105_1211:                           # %for.cond5091
                                        #   Parent Loop BB105_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB105_1213 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB105_1218
# %bb.1212:                             # %for.body5094
                                        #   in Loop: Header=BB105_1211 Depth=2
	movl	$0, -20(%rbp)
.LBB105_1213:                           # %for.cond5095
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_1211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB105_1216
# %bb.1214:                             # %for.body5098
                                        #   in Loop: Header=BB105_1213 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -188(%rbp)
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-124(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -220(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -212(%rbp)
	movl	-212(%rbp), %eax
	subl	-188(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-188(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -252(%rbp)
	movl	-220(%rbp), %eax
	subl	-252(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-252(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1215:                             # %for.inc5192
                                        #   in Loop: Header=BB105_1213 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_1213
.LBB105_1216:                           # %for.end5194
                                        #   in Loop: Header=BB105_1211 Depth=2
	jmp	.LBB105_1217
.LBB105_1217:                           # %for.inc5195
                                        #   in Loop: Header=BB105_1211 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_1211
.LBB105_1218:                           # %for.end5197
                                        #   in Loop: Header=BB105_171 Depth=1
	jmp	.LBB105_1219
.LBB105_1219:                           # %if.end5198
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	$10, best_mode
	movl	-124(%rbp), %edi
	callq	dct_luma_16x16
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB105_1280
# %bb.1220:                             # %if.then5203
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	$0, -24(%rbp)
.LBB105_1221:                           # %for.cond5204
                                        #   Parent Loop BB105_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB105_1223 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB105_1228
# %bb.1222:                             # %for.body5207
                                        #   in Loop: Header=BB105_1221 Depth=2
	movl	$0, -20(%rbp)
.LBB105_1223:                           # %for.cond5208
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_1221 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB105_1226
# %bb.1224:                             # %for.body5211
                                        #   in Loop: Header=BB105_1223 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1225:                             # %for.inc5230
                                        #   in Loop: Header=BB105_1223 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_1223
.LBB105_1226:                           # %for.end5232
                                        #   in Loop: Header=BB105_1221 Depth=2
	jmp	.LBB105_1227
.LBB105_1227:                           # %for.inc5233
                                        #   in Loop: Header=BB105_1221 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_1221
.LBB105_1228:                           # %for.end5235
                                        #   in Loop: Header=BB105_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB105_1229:                           # %for.cond5237
                                        #   Parent Loop BB105_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB105_1231 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB105_1236
# %bb.1230:                             # %for.body5240
                                        #   in Loop: Header=BB105_1229 Depth=2
	movl	$0, -20(%rbp)
.LBB105_1231:                           # %for.cond5241
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_1229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB105_1234
# %bb.1232:                             # %for.body5244
                                        #   in Loop: Header=BB105_1231 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1233:                             # %for.inc5263
                                        #   in Loop: Header=BB105_1231 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_1231
.LBB105_1234:                           # %for.end5265
                                        #   in Loop: Header=BB105_1229 Depth=2
	jmp	.LBB105_1235
.LBB105_1235:                           # %for.inc5266
                                        #   in Loop: Header=BB105_1229 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_1229
.LBB105_1236:                           # %for.end5268
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB105_1237:                           # %for.cond5270
                                        #   Parent Loop BB105_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB105_1239 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB105_1244
# %bb.1238:                             # %for.body5273
                                        #   in Loop: Header=BB105_1237 Depth=2
	movl	$0, -20(%rbp)
.LBB105_1239:                           # %for.cond5274
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_1237 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB105_1242
# %bb.1240:                             # %for.body5277
                                        #   in Loop: Header=BB105_1239 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1241:                             # %for.inc5287
                                        #   in Loop: Header=BB105_1239 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_1239
.LBB105_1242:                           # %for.end5289
                                        #   in Loop: Header=BB105_1237 Depth=2
	jmp	.LBB105_1243
.LBB105_1243:                           # %for.inc5290
                                        #   in Loop: Header=BB105_1237 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_1237
.LBB105_1244:                           # %for.end5292
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	-132(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -24(%rbp)
.LBB105_1245:                           # %for.cond5296
                                        #   Parent Loop BB105_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB105_1247 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB105_1279
# %bb.1246:                             # %for.body5299
                                        #   in Loop: Header=BB105_1245 Depth=2
	movl	$0, -20(%rbp)
.LBB105_1247:                           # %for.cond5300
                                        #   Parent Loop BB105_171 Depth=1
                                        #     Parent Loop BB105_1245 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB105_1277
# %bb.1248:                             # %for.body5303
                                        #   in Loop: Header=BB105_1247 Depth=3
	xorl	%eax, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -252(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-252(%rbp), %ecx
	movl	%ecx, -220(%rbp)
	movl	-252(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -188(%rbp)
	movl	-188(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -212(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-188(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB105_1250
# %bb.1249:                             # %cond.true5343
                                        #   in Loop: Header=BB105_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB105_1251
.LBB105_1250:                           # %cond.false5344
                                        #   in Loop: Header=BB105_1247 Depth=3
	movl	-188(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB105_1251:                           # %cond.end5356
                                        #   in Loop: Header=BB105_1247 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB105_1253
# %bb.1252:                             # %cond.true5360
                                        #   in Loop: Header=BB105_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB105_1257
.LBB105_1253:                           # %cond.false5362
                                        #   in Loop: Header=BB105_1247 Depth=3
	xorl	%eax, %eax
	movl	-188(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB105_1255
# %bb.1254:                             # %cond.true5376
                                        #   in Loop: Header=BB105_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB105_1256
.LBB105_1255:                           # %cond.false5377
                                        #   in Loop: Header=BB105_1247 Depth=3
	movl	-188(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB105_1256:                           # %cond.end5389
                                        #   in Loop: Header=BB105_1247 Depth=3
.LBB105_1257:                           # %cond.end5391
                                        #   in Loop: Header=BB105_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-220(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-124(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB105_1259
# %bb.1258:                             # %cond.true5415
                                        #   in Loop: Header=BB105_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB105_1260
.LBB105_1259:                           # %cond.false5416
                                        #   in Loop: Header=BB105_1247 Depth=3
	movl	-220(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-124(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB105_1260:                           # %cond.end5426
                                        #   in Loop: Header=BB105_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB105_1262
# %bb.1261:                             # %cond.true5430
                                        #   in Loop: Header=BB105_1247 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB105_1266
.LBB105_1262:                           # %cond.false5432
                                        #   in Loop: Header=BB105_1247 Depth=3
	xorl	%eax, %eax
	movl	-220(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-124(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB105_1264
# %bb.1263:                             # %cond.true5444
                                        #   in Loop: Header=BB105_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB105_1265
.LBB105_1264:                           # %cond.false5445
                                        #   in Loop: Header=BB105_1247 Depth=3
	movl	-220(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-124(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB105_1265:                           # %cond.end5455
                                        #   in Loop: Header=BB105_1247 Depth=3
.LBB105_1266:                           # %cond.end5457
                                        #   in Loop: Header=BB105_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-212(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB105_1268
# %bb.1267:                             # %cond.true5483
                                        #   in Loop: Header=BB105_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB105_1269
.LBB105_1268:                           # %cond.false5484
                                        #   in Loop: Header=BB105_1247 Depth=3
	movl	-212(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB105_1269:                           # %cond.end5496
                                        #   in Loop: Header=BB105_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB105_1271
# %bb.1270:                             # %cond.true5500
                                        #   in Loop: Header=BB105_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB105_1275
.LBB105_1271:                           # %cond.false5502
                                        #   in Loop: Header=BB105_1247 Depth=3
	xorl	%eax, %eax
	movl	-212(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB105_1273
# %bb.1272:                             # %cond.true5516
                                        #   in Loop: Header=BB105_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB105_1274
.LBB105_1273:                           # %cond.false5517
                                        #   in Loop: Header=BB105_1247 Depth=3
	movl	-212(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB105_1274:                           # %cond.end5529
                                        #   in Loop: Header=BB105_1247 Depth=3
.LBB105_1275:                           # %cond.end5531
                                        #   in Loop: Header=BB105_1247 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1276:                             # %for.inc5544
                                        #   in Loop: Header=BB105_1247 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_1247
.LBB105_1277:                           # %for.end5546
                                        #   in Loop: Header=BB105_1245 Depth=2
	jmp	.LBB105_1278
.LBB105_1278:                           # %for.inc5547
                                        #   in Loop: Header=BB105_1245 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_1245
.LBB105_1279:                           # %for.end5549
                                        #   in Loop: Header=BB105_171 Depth=1
	jmp	.LBB105_1280
.LBB105_1280:                           # %if.end5550
                                        #   in Loop: Header=BB105_171 Depth=1
	jmp	.LBB105_1282
.LBB105_1281:                           # %if.else5551
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-308(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB105_1282:                           # %if.end5554
                                        #   in Loop: Header=BB105_171 Depth=1
	jmp	.LBB105_1283
.LBB105_1283:                           # %if.end5555
                                        #   in Loop: Header=BB105_171 Depth=1
	jmp	.LBB105_1284
.LBB105_1284:                           # %if.end5556
                                        #   in Loop: Header=BB105_171 Depth=1
	cmpl	$0, -256(%rbp)
	jne	.LBB105_1289
# %bb.1285:                             # %if.then5559
                                        #   in Loop: Header=BB105_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB105_1288
# %bb.1286:                             # %lor.lhs.false5563
                                        #   in Loop: Header=BB105_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB105_1288
# %bb.1287:                             # %lor.rhs5567
                                        #   in Loop: Header=BB105_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB105_1288:                           # %lor.end5571
                                        #   in Loop: Header=BB105_171 Depth=1
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -264(%rbp)
.LBB105_1289:                           # %if.end5574
                                        #   in Loop: Header=BB105_171 Depth=1
	jmp	.LBB105_1290
.LBB105_1290:                           # %for.inc5575
                                        #   in Loop: Header=BB105_171 Depth=1
	movl	-256(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -256(%rbp)
	jmp	.LBB105_171
.LBB105_1291:                           # %for.end5577
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB105_1300
# %bb.1292:                             # %if.then5580
	cmpl	$0, cbp
	jne	.LBB105_1294
# %bb.1293:                             # %lor.lhs.false5583
	cmpl	$10, best_mode
	jne	.LBB105_1295
.LBB105_1294:                           # %if.then5586
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB105_1299
.LBB105_1295:                           # %if.else5587
	cmpl	$0, cbp
	jne	.LBB105_1298
# %bb.1296:                             # %land.lhs.true5590
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB105_1298
# %bb.1297:                             # %if.then5592
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB105_1298:                           # %if.end5597
	jmp	.LBB105_1299
.LBB105_1299:                           # %if.end5598
	callq	set_stored_macroblock_parameters
	jmp	.LBB105_1395
.LBB105_1300:                           # %if.else5599
	movl	best_mode, %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$8, best_mode
	jne	.LBB105_1314
# %bb.1301:                             # %if.then5602
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB105_1305
# %bb.1302:                             # %land.lhs.true5605
	cmpl	$0, cbp8_8x8ts
	jne	.LBB105_1305
# %bb.1303:                             # %land.lhs.true5608
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB105_1305
# %bb.1304:                             # %if.then5612
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB105_1305:                           # %if.end5614
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB105_1306:                           # %for.cond5616
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_1308 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_1313
# %bb.1307:                             # %for.body5621
                                        #   in Loop: Header=BB105_1306 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB105_1308:                           # %for.cond5623
                                        #   Parent Loop BB105_1306 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_1311
# %bb.1309:                             # %for.body5628
                                        #   in Loop: Header=BB105_1308 Depth=2
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1310:                             # %for.inc5636
                                        #   in Loop: Header=BB105_1308 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB105_1308
.LBB105_1311:                           # %for.end5639
                                        #   in Loop: Header=BB105_1306 Depth=1
	jmp	.LBB105_1312
.LBB105_1312:                           # %for.inc5640
                                        #   in Loop: Header=BB105_1306 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_1306
.LBB105_1313:                           # %for.end5642
	jmp	.LBB105_1370
.LBB105_1314:                           # %if.else5643
	cmpl	$13, best_mode
	jne	.LBB105_1342
# %bb.1315:                             # %if.then5646
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB105_1316:                           # %for.cond5647
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_1318 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB105_1323
# %bb.1317:                             # %for.body5650
                                        #   in Loop: Header=BB105_1316 Depth=1
	movl	$0, -24(%rbp)
.LBB105_1318:                           # %for.cond5651
                                        #   Parent Loop BB105_1316 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB105_1321
# %bb.1319:                             # %for.body5654
                                        #   in Loop: Header=BB105_1318 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.1320:                             # %for.inc5677
                                        #   in Loop: Header=BB105_1318 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB105_1318
.LBB105_1321:                           # %for.end5680
                                        #   in Loop: Header=BB105_1316 Depth=1
	jmp	.LBB105_1322
.LBB105_1322:                           # %for.inc5681
                                        #   in Loop: Header=BB105_1316 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_1316
.LBB105_1323:                           # %for.end5683
	movl	$0, -24(%rbp)
.LBB105_1324:                           # %for.cond5684
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_1326 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB105_1331
# %bb.1325:                             # %for.body5687
                                        #   in Loop: Header=BB105_1324 Depth=1
	movl	$0, -20(%rbp)
.LBB105_1326:                           # %for.cond5688
                                        #   Parent Loop BB105_1324 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB105_1329
# %bb.1327:                             # %for.body5691
                                        #   in Loop: Header=BB105_1326 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgY, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1328:                             # %for.inc5705
                                        #   in Loop: Header=BB105_1326 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_1326
.LBB105_1329:                           # %for.end5707
                                        #   in Loop: Header=BB105_1324 Depth=1
	jmp	.LBB105_1330
.LBB105_1330:                           # %for.inc5708
                                        #   in Loop: Header=BB105_1324 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_1324
.LBB105_1331:                           # %for.end5710
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB105_1341
# %bb.1332:                             # %if.then5713
	movl	$0, -24(%rbp)
.LBB105_1333:                           # %for.cond5714
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_1335 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB105_1340
# %bb.1334:                             # %for.body5717
                                        #   in Loop: Header=BB105_1333 Depth=1
	movl	$0, -20(%rbp)
.LBB105_1335:                           # %for.cond5718
                                        #   Parent Loop BB105_1333 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB105_1338
# %bb.1336:                             # %for.body5721
                                        #   in Loop: Header=BB105_1335 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgU, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgV, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1337:                             # %for.inc5750
                                        #   in Loop: Header=BB105_1335 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_1335
.LBB105_1338:                           # %for.end5752
                                        #   in Loop: Header=BB105_1333 Depth=1
	jmp	.LBB105_1339
.LBB105_1339:                           # %for.inc5753
                                        #   in Loop: Header=BB105_1333 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_1333
.LBB105_1340:                           # %for.end5755
	jmp	.LBB105_1341
.LBB105_1341:                           # %if.end5756
	jmp	.LBB105_1342
.LBB105_1342:                           # %if.end5757
	cmpl	$9, best_mode
	je	.LBB105_1369
# %bb.1343:                             # %land.lhs.true5760
	cmpl	$13, best_mode
	je	.LBB105_1369
# %bb.1344:                             # %if.then5763
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB105_1345:                           # %for.cond5765
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_1347 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_1352
# %bb.1346:                             # %for.body5770
                                        #   in Loop: Header=BB105_1345 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB105_1347:                           # %for.cond5772
                                        #   Parent Loop BB105_1345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_1350
# %bb.1348:                             # %for.body5777
                                        #   in Loop: Header=BB105_1347 Depth=2
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1349:                             # %for.inc5785
                                        #   in Loop: Header=BB105_1347 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB105_1347
.LBB105_1350:                           # %for.end5788
                                        #   in Loop: Header=BB105_1345 Depth=1
	jmp	.LBB105_1351
.LBB105_1351:                           # %for.inc5789
                                        #   in Loop: Header=BB105_1345 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_1345
.LBB105_1352:                           # %for.end5791
	cmpl	$10, best_mode
	je	.LBB105_1368
# %bb.1353:                             # %if.then5794
	cmpl	$1, best_mode
	jl	.LBB105_1356
# %bb.1354:                             # %land.lhs.true5797
	cmpl	$3, best_mode
	jg	.LBB105_1356
# %bb.1355:                             # %if.then5800
	movl	-316(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB105_1356:                           # %if.end5802
	movb	$0, %al
	callq	LumaResidualCoding
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB105_1359
# %bb.1357:                             # %land.lhs.true5806
	cmpl	$0, best_mode
	jne	.LBB105_1359
# %bb.1358:                             # %if.then5809
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB105_1359:                           # %if.end5811
	movl	$0, -20(%rbp)
.LBB105_1360:                           # %for.cond5812
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_1362 Depth 2
	cmpl	$16, -20(%rbp)
	jge	.LBB105_1367
# %bb.1361:                             # %for.body5815
                                        #   in Loop: Header=BB105_1360 Depth=1
	movl	$0, -24(%rbp)
.LBB105_1362:                           # %for.cond5816
                                        #   Parent Loop BB105_1360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -24(%rbp)
	jge	.LBB105_1365
# %bb.1363:                             # %for.body5819
                                        #   in Loop: Header=BB105_1362 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1364:                             # %for.inc5840
                                        #   in Loop: Header=BB105_1362 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_1362
.LBB105_1365:                           # %for.end5842
                                        #   in Loop: Header=BB105_1360 Depth=1
	jmp	.LBB105_1366
.LBB105_1366:                           # %for.inc5843
                                        #   in Loop: Header=BB105_1360 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_1360
.LBB105_1367:                           # %for.end5845
	jmp	.LBB105_1368
.LBB105_1368:                           # %if.end5846
	jmp	.LBB105_1369
.LBB105_1369:                           # %if.end5847
	jmp	.LBB105_1370
.LBB105_1370:                           # %if.end5848
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB105_1374
# %bb.1371:                             # %land.lhs.true5853
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB105_1374
# %bb.1372:                             # %lor.lhs.false5857
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB105_1374
# %bb.1373:                             # %if.then5861
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB105_1374:                           # %if.end5863
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB105_1376
# %bb.1375:                             # %if.then5867
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB105_1376:                           # %if.end5868
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -288(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB105_1380
# %bb.1377:                             # %land.lhs.true5871
	cmpl	$9, best_mode
	je	.LBB105_1382
# %bb.1378:                             # %lor.lhs.false5874
	cmpl	$10, best_mode
	je	.LBB105_1382
# %bb.1379:                             # %lor.lhs.false5877
	cmpl	$13, best_mode
	je	.LBB105_1382
.LBB105_1380:                           # %land.lhs.true5880
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB105_1382
# %bb.1381:                             # %if.then5884
	leaq	-288(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB105_1382:                           # %if.end5885
	cmpl	$10, best_mode
	jne	.LBB105_1384
# %bb.1383:                             # %if.then5888
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-124(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB105_1384:                           # %if.end5892
	movq	-48(%rbp), %rdi
	movl	-108(%rbp), %esi
	callq	SetMotionVectorsMB
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB105_1386
# %bb.1385:                             # %lor.lhs.false5896
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB105_1392
.LBB105_1386:                           # %land.lhs.true5900
	cmpl	$1, best_mode
	jne	.LBB105_1392
# %bb.1387:                             # %land.lhs.true5903
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB105_1392
# %bb.1388:                             # %land.lhs.true5907
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB105_1392
# %bb.1389:                             # %land.lhs.true5919
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movq	-440(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB105_1392
# %bb.1390:                             # %land.lhs.true5939
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movq	-440(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	2(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB105_1392
# %bb.1391:                             # %if.then5959
	movq	-48(%rbp), %rax
	movl	$0, 484(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 480(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 476(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 472(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB105_1392:                           # %if.end5969
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB105_1394
# %bb.1393:                             # %if.then5972
	callq	set_mbaff_parameters
.LBB105_1394:                           # %if.end5973
	jmp	.LBB105_1395
.LBB105_1395:                           # %if.end5974
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB105_1410
# %bb.1396:                             # %if.then5977
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB105_1409
# %bb.1397:                             # %if.then5981
	movb	$0, %al
	callq	calc_MAD
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	%xmm0, (%rax,%rcx,8)
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB105_1408
# %bb.1398:                             # %if.then5988
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	movq	img, %rax
	vaddsd	72544(%rax), %xmm0, %xmm0
	vmovsd	%xmm0, 72544(%rax)
	cmpl	$0, cbp
	jne	.LBB105_1400
# %bb.1399:                             # %lor.lhs.false5996
	cmpl	$10, best_mode
	jne	.LBB105_1401
.LBB105_1400:                           # %if.then5999
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB105_1402
.LBB105_1401:                           # %if.else6001
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB105_1402:                           # %if.end6008
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB105_1407
# %bb.1403:                             # %if.then6010
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB105_1405
# %bb.1404:                             # %if.then6013
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP
	jmp	.LBB105_1406
.LBB105_1405:                           # %if.else6016
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
.LBB105_1406:                           # %if.end6019
	jmp	.LBB105_1407
.LBB105_1407:                           # %if.end6020
	jmp	.LBB105_1408
.LBB105_1408:                           # %if.end6021
	jmp	.LBB105_1409
.LBB105_1409:                           # %if.end6022
	jmp	.LBB105_1410
.LBB105_1410:                           # %if.end6023
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB105_1412
# %bb.1411:                             # %if.then6026
	vmovsd	-248(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
	jmp	.LBB105_1413
.LBB105_1412:                           # %if.else6028
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm0
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB105_1413:                           # %if.end6031
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB105_1430
# %bb.1414:                             # %if.then6034
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB105_1429
# %bb.1415:                             # %if.then6038
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB105_1417
# %bb.1416:                             # %cond.true6041
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB105_1420
	jmp	.LBB105_1428
.LBB105_1417:                           # %cond.false6042
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB105_1419
# %bb.1418:                             # %cond.true6046
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB105_1428
	jmp	.LBB105_1420
.LBB105_1419:                           # %cond.false6049
	movb	$1, %al
	testb	$1, %al
	jne	.LBB105_1420
	jmp	.LBB105_1428
.LBB105_1420:                           # %land.lhs.true6050
	movq	-448(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB105_1422
# %bb.1421:                             # %cond.true6053
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB105_1425
	jmp	.LBB105_1428
.LBB105_1422:                           # %cond.false6054
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB105_1424
# %bb.1423:                             # %cond.true6058
	movq	-448(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB105_1428
	jmp	.LBB105_1425
.LBB105_1424:                           # %cond.false6061
	movb	$1, %al
	testb	$1, %al
	jne	.LBB105_1425
	jmp	.LBB105_1428
.LBB105_1425:                           # %if.then6062
	callq	field_flag_inference
	cmpl	-280(%rbp), %eax
	je	.LBB105_1427
# %bb.1426:                             # %if.then6066
	vmovsd	.LCPI105_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB105_1427:                           # %if.end6068
	jmp	.LBB105_1428
.LBB105_1428:                           # %if.end6069
	jmp	.LBB105_1429
.LBB105_1429:                           # %if.end6070
	jmp	.LBB105_1430
.LBB105_1430:                           # %if.end6071
	movq	input, %rax
	cmpl	$1, 2908(%rax)
	jne	.LBB105_1453
# %bb.1431:                             # %if.then6075
	movq	input, %rax
	cmpl	$1, 2464(%rax)
	jne	.LBB105_1433
# %bb.1432:                             # %if.then6079
	xorl	%eax, %eax
	movl	-136(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB105_1452
.LBB105_1433:                           # %if.else6127
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB105_1451
# %bb.1434:                             # %if.then6131
	xorl	%eax, %eax
	cmpl	$0, -264(%rbp)
	jne	.LBB105_1438
# %bb.1435:                             # %land.rhs6134
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB105_1437
# %bb.1436:                             # %lor.rhs6138
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB105_1437:                           # %lor.end6142
.LBB105_1438:                           # %land.end6144
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -264(%rbp)
	jne	.LBB105_1442
# %bb.1439:                             # %land.rhs6158
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB105_1441
# %bb.1440:                             # %lor.rhs6162
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB105_1441:                           # %lor.end6166
.LBB105_1442:                           # %land.end6168
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rcx
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rcx,%rsi,8), %rcx
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rcx,%rsi)
	cmpl	$0, -264(%rbp)
	jne	.LBB105_1446
# %bb.1443:                             # %land.rhs6183
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB105_1445
# %bb.1444:                             # %lor.rhs6187
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB105_1445:                           # %lor.end6191
.LBB105_1446:                           # %land.end6193
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -264(%rbp)
	jne	.LBB105_1450
# %bb.1447:                             # %land.rhs6208
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB105_1449
# %bb.1448:                             # %lor.rhs6212
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB105_1449:                           # %lor.end6216
.LBB105_1450:                           # %land.end6218
	xorl	%eax, %eax
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB105_1451:                           # %if.end6232
	jmp	.LBB105_1452
.LBB105_1452:                           # %if.end6233
	jmp	.LBB105_1464
.LBB105_1453:                           # %if.else6234
	movq	input, %rax
	cmpl	$2, 2908(%rax)
	jne	.LBB105_1463
# %bb.1454:                             # %if.then6238
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB105_1456
# %bb.1455:                             # %lor.rhs6242
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB105_1456:                           # %lor.end6246
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB105_1458
# %bb.1457:                             # %lor.rhs6261
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB105_1458:                           # %lor.end6265
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB105_1460
# %bb.1459:                             # %lor.rhs6281
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB105_1460:                           # %lor.end6285
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB105_1462
# %bb.1461:                             # %lor.rhs6301
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB105_1462:                           # %lor.end6305
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
.LBB105_1463:                           # %if.end6319
	jmp	.LBB105_1464
.LBB105_1464:                           # %if.end6320
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB105_1466
# %bb.1465:                             # %if.then6323
	movl	best_mode, %edi
	movl	-64(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %esi
	callq	skip_intrabk_SAD
.LBB105_1466:                           # %if.end6327
	cmpl	$608757473, -408(%rbp)  # imm = 0x2448E6E1
	jne	.LBB105_1468
.LBB105_1467:
	addq	$480, %rsp              # imm = 0x1E0
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB105_1468:                           # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB105_1467
.Lfunc_end105:
	.size	encode_one_macroblock.76, .Lfunc_end105-encode_one_macroblock.76
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframeForBlocks.77 # -- Begin function SetModesAndRefframeForBlocks.77
	.p2align	4, 0x90
	.type	SetModesAndRefframeForBlocks.77,@function
SetModesAndRefframeForBlocks.77:        # @SetModesAndRefframeForBlocks.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1550044981, -36(%rbp)  # imm = 0x5C63CF35
	movl	%edi, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB106_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB106_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB106_4
.LBB106_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB106_4
.LBB106_4:                              # %cond.end
	movl	%ecx, -32(%rbp)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	cmpl	$1, -12(%rbp)
	jne	.LBB106_6
# %bb.5:                                # %if.then
	movq	img, %rax
	movslq	-12(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB106_7
.LBB106_6:                              # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB106_7:                              # %if.end
	movl	-12(%rbp), %eax
	movq	%rax, %rcx
	subq	$13, %rcx
	ja	.LBB106_42
# %bb.8:                                # %if.end
	movq	.LJTI106_0(,%rax,8), %rax
	jmpq	*%rax
.LBB106_9:                              # %sw.bb
	movl	$0, -4(%rbp)
.LBB106_10:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB106_16
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB106_10 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	cmpl	$0, -28(%rbp)
	je	.LBB106_13
# %bb.12:                               # %cond.true17
                                        #   in Loop: Header=BB106_10 Depth=1
	movq	direct_pdir, %rcx
	movq	img, %rax
	movl	144(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	shll	$1, %edx
	addl	%edx, %esi
	movslq	%esi, %rax
	movq	(%rcx,%rax,8), %rcx
	movq	img, %rax
	movl	148(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %esi
	movslq	%esi, %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB106_14
.LBB106_13:                             # %cond.false26
                                        #   in Loop: Header=BB106_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB106_14
.LBB106_14:                             # %cond.end27
                                        #   in Loop: Header=BB106_10 Depth=1
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB106_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_10
.LBB106_16:                             # %for.end
	jmp	.LBB106_43
.LBB106_17:                             # %sw.bb31
	movl	$0, -4(%rbp)
.LBB106_18:                             # %for.cond32
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB106_21
# %bb.19:                               # %for.body35
                                        #   in Loop: Header=BB106_18 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.20:                               # %for.inc47
                                        #   in Loop: Header=BB106_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_18
.LBB106_21:                             # %for.end49
	jmp	.LBB106_43
.LBB106_22:                             # %sw.bb50
	movl	$0, -4(%rbp)
.LBB106_23:                             # %for.cond51
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB106_26
# %bb.24:                               # %for.body54
                                        #   in Loop: Header=BB106_23 Depth=1
	movslq	-4(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.25:                               # %for.inc69
                                        #   in Loop: Header=BB106_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_23
.LBB106_26:                             # %for.end71
	jmp	.LBB106_43
.LBB106_27:                             # %sw.bb72
	movl	$0, -4(%rbp)
.LBB106_28:                             # %for.cond73
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB106_31
# %bb.29:                               # %for.body76
                                        #   in Loop: Header=BB106_28 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$11, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.30:                               # %for.inc83
                                        #   in Loop: Header=BB106_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_28
.LBB106_31:                             # %for.end85
	jmp	.LBB106_43
.LBB106_32:                             # %sw.bb86
	movl	$0, -4(%rbp)
.LBB106_33:                             # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB106_36
# %bb.34:                               # %for.body90
                                        #   in Loop: Header=BB106_33 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.35:                               # %for.inc97
                                        #   in Loop: Header=BB106_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_33
.LBB106_36:                             # %for.end99
	jmp	.LBB106_43
.LBB106_37:                             # %sw.bb100
	movl	$0, -4(%rbp)
.LBB106_38:                             # %for.cond101
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB106_41
# %bb.39:                               # %for.body104
                                        #   in Loop: Header=BB106_38 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$13, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.40:                               # %for.inc111
                                        #   in Loop: Header=BB106_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_38
.LBB106_41:                             # %for.end113
	movq	-24(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB106_43
.LBB106_42:                             # %sw.default
	movabsq	$.L.str, %rdi
	movb	$0, %al
	callq	printf
	movl	$1, %edi
	callq	exit
.LBB106_43:                             # %sw.epilog
	cmpl	$0, -12(%rbp)
	je	.LBB106_47
# %bb.44:                               # %lor.lhs.false
	cmpl	$9, -12(%rbp)
	je	.LBB106_47
# %bb.45:                               # %lor.lhs.false118
	cmpl	$10, -12(%rbp)
	je	.LBB106_47
# %bb.46:                               # %lor.lhs.false121
	cmpl	$13, -12(%rbp)
	jne	.LBB106_70
.LBB106_47:                             # %if.then124
	cmpl	$0, -28(%rbp)
	je	.LBB106_60
# %bb.48:                               # %if.then126
	movl	$0, -8(%rbp)
.LBB106_49:                             # %for.cond127
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB106_59
# %bb.50:                               # %for.body130
                                        #   in Loop: Header=BB106_49 Depth=1
	movl	$0, -4(%rbp)
.LBB106_51:                             # %for.cond131
                                        #   Parent Loop BB106_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB106_57
# %bb.52:                               # %for.body134
                                        #   in Loop: Header=BB106_51 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB106_54
# %bb.53:                               # %if.then136
                                        #   in Loop: Header=BB106_51 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB106_55
.LBB106_54:                             # %if.else174
                                        #   in Loop: Header=BB106_51 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB106_55:                             # %if.end195
                                        #   in Loop: Header=BB106_51 Depth=2
	jmp	.LBB106_56
.LBB106_56:                             # %for.inc196
                                        #   in Loop: Header=BB106_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_51
.LBB106_57:                             # %for.end198
                                        #   in Loop: Header=BB106_49 Depth=1
	jmp	.LBB106_58
.LBB106_58:                             # %for.inc199
                                        #   in Loop: Header=BB106_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_49
.LBB106_59:                             # %for.end201
	jmp	.LBB106_69
.LBB106_60:                             # %if.else202
	movl	$0, -8(%rbp)
.LBB106_61:                             # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB106_68
# %bb.62:                               # %for.body206
                                        #   in Loop: Header=BB106_61 Depth=1
	movl	$0, -4(%rbp)
.LBB106_63:                             # %for.cond207
                                        #   Parent Loop BB106_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB106_66
# %bb.64:                               # %for.body210
                                        #   in Loop: Header=BB106_63 Depth=2
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	cmovel	%eax, %ecx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.65:                               # %for.inc225
                                        #   in Loop: Header=BB106_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_63
.LBB106_66:                             # %for.end227
                                        #   in Loop: Header=BB106_61 Depth=1
	jmp	.LBB106_67
.LBB106_67:                             # %for.inc228
                                        #   in Loop: Header=BB106_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_61
.LBB106_68:                             # %for.end230
	jmp	.LBB106_69
.LBB106_69:                             # %if.end231
	jmp	.LBB106_127
.LBB106_70:                             # %if.else232
	cmpl	$0, -28(%rbp)
	je	.LBB106_110
# %bb.71:                               # %if.then234
	movl	$0, -8(%rbp)
.LBB106_72:                             # %for.cond235
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_74 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB106_109
# %bb.73:                               # %for.body238
                                        #   in Loop: Header=BB106_72 Depth=1
	movl	$0, -4(%rbp)
.LBB106_74:                             # %for.cond239
                                        #   Parent Loop BB106_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB106_107
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB106_74 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	cmpl	$8, -12(%rbp)
	jne	.LBB106_78
# %bb.76:                               # %land.lhs.true253
                                        #   in Loop: Header=BB106_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB106_78
# %bb.77:                               # %if.then259
                                        #   in Loop: Header=BB106_74 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB106_105
.LBB106_78:                             # %if.else298
                                        #   in Loop: Header=BB106_74 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB106_90
# %bb.79:                               # %land.lhs.true301
                                        #   in Loop: Header=BB106_74 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB106_90
# %bb.80:                               # %land.lhs.true304
                                        #   in Loop: Header=BB106_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB106_82
# %bb.81:                               # %lor.lhs.false312
                                        #   in Loop: Header=BB106_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB106_90
.LBB106_82:                             # %land.lhs.true320
                                        #   in Loop: Header=BB106_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB106_85
# %bb.83:                               # %lor.lhs.false323
                                        #   in Loop: Header=BB106_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB106_85
# %bb.84:                               # %lor.lhs.false329
                                        #   in Loop: Header=BB106_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB106_90
.LBB106_85:                             # %land.lhs.true331
                                        #   in Loop: Header=BB106_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB106_87
# %bb.86:                               # %lor.lhs.false339
                                        #   in Loop: Header=BB106_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB106_90
.LBB106_87:                             # %land.lhs.true347
                                        #   in Loop: Header=BB106_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB106_89
# %bb.88:                               # %lor.lhs.false350
                                        #   in Loop: Header=BB106_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB106_90
.LBB106_89:                             # %if.then356
                                        #   in Loop: Header=BB106_74 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB106_104
.LBB106_90:                             # %if.else377
                                        #   in Loop: Header=BB106_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB106_92
# %bb.91:                               # %lor.lhs.false385
                                        #   in Loop: Header=BB106_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB106_96
.LBB106_92:                             # %land.lhs.true393
                                        #   in Loop: Header=BB106_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB106_95
# %bb.93:                               # %lor.lhs.false396
                                        #   in Loop: Header=BB106_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB106_95
# %bb.94:                               # %lor.lhs.false402
                                        #   in Loop: Header=BB106_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB106_96
.LBB106_95:                             # %cond.true404
                                        #   in Loop: Header=BB106_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB106_97
.LBB106_96:                             # %cond.false410
                                        #   in Loop: Header=BB106_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_97
.LBB106_97:                             # %cond.end411
                                        #   in Loop: Header=BB106_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB106_99
# %bb.98:                               # %lor.lhs.false431
                                        #   in Loop: Header=BB106_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB106_102
.LBB106_99:                             # %land.lhs.true439
                                        #   in Loop: Header=BB106_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB106_101
# %bb.100:                              # %lor.lhs.false442
                                        #   in Loop: Header=BB106_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB106_102
.LBB106_101:                            # %cond.true448
                                        #   in Loop: Header=BB106_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8bwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB106_103
.LBB106_102:                            # %cond.false454
                                        #   in Loop: Header=BB106_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_103
.LBB106_103:                            # %cond.end455
                                        #   in Loop: Header=BB106_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB106_104:                            # %if.end468
                                        #   in Loop: Header=BB106_74 Depth=2
	jmp	.LBB106_105
.LBB106_105:                            # %if.end469
                                        #   in Loop: Header=BB106_74 Depth=2
	jmp	.LBB106_106
.LBB106_106:                            # %for.inc470
                                        #   in Loop: Header=BB106_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_74
.LBB106_107:                            # %for.end472
                                        #   in Loop: Header=BB106_72 Depth=1
	jmp	.LBB106_108
.LBB106_108:                            # %for.inc473
                                        #   in Loop: Header=BB106_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_72
.LBB106_109:                            # %for.end475
	jmp	.LBB106_126
.LBB106_110:                            # %if.else476
	movl	$0, -8(%rbp)
.LBB106_111:                            # %for.cond477
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_113 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB106_125
# %bb.112:                              # %for.body480
                                        #   in Loop: Header=BB106_111 Depth=1
	movl	$0, -4(%rbp)
.LBB106_113:                            # %for.cond481
                                        #   Parent Loop BB106_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB106_123
# %bb.114:                              # %for.body484
                                        #   in Loop: Header=BB106_113 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB106_116
# %bb.115:                              # %lor.lhs.false500
                                        #   in Loop: Header=BB106_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB106_120
.LBB106_116:                            # %land.lhs.true508
                                        #   in Loop: Header=BB106_113 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB106_119
# %bb.117:                              # %lor.lhs.false511
                                        #   in Loop: Header=BB106_113 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB106_119
# %bb.118:                              # %lor.lhs.false517
                                        #   in Loop: Header=BB106_113 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB106_120
.LBB106_119:                            # %cond.true519
                                        #   in Loop: Header=BB106_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB106_121
.LBB106_120:                            # %cond.false525
                                        #   in Loop: Header=BB106_113 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_121
.LBB106_121:                            # %cond.end526
                                        #   in Loop: Header=BB106_113 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.122:                              # %for.inc539
                                        #   in Loop: Header=BB106_113 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_113
.LBB106_123:                            # %for.end541
                                        #   in Loop: Header=BB106_111 Depth=1
	jmp	.LBB106_124
.LBB106_124:                            # %for.inc542
                                        #   in Loop: Header=BB106_111 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_111
.LBB106_125:                            # %for.end544
	jmp	.LBB106_126
.LBB106_126:                            # %if.end545
	jmp	.LBB106_127
.LBB106_127:                            # %if.end546
	movl	$0, -8(%rbp)
.LBB106_128:                            # %for.cond547
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_130 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB106_138
# %bb.129:                              # %for.body550
                                        #   in Loop: Header=BB106_128 Depth=1
	movl	$0, -4(%rbp)
.LBB106_130:                            # %for.cond551
                                        #   Parent Loop BB106_128 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB106_136
# %bb.131:                              # %for.body554
                                        #   in Loop: Header=BB106_130 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB106_133
# %bb.132:                              # %cond.true568
                                        #   in Loop: Header=BB106_130 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB106_134
.LBB106_133:                            # %cond.false584
                                        #   in Loop: Header=BB106_130 Depth=2
	movq	$-1, %rax
	jmp	.LBB106_134
.LBB106_134:                            # %cond.end585
                                        #   in Loop: Header=BB106_130 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.135:                              # %for.inc596
                                        #   in Loop: Header=BB106_130 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_130
.LBB106_136:                            # %for.end598
                                        #   in Loop: Header=BB106_128 Depth=1
	jmp	.LBB106_137
.LBB106_137:                            # %for.inc599
                                        #   in Loop: Header=BB106_128 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_128
.LBB106_138:                            # %for.end601
	cmpl	$0, -28(%rbp)
	je	.LBB106_151
# %bb.139:                              # %if.then603
	movl	$0, -8(%rbp)
.LBB106_140:                            # %for.cond604
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_142 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB106_150
# %bb.141:                              # %for.body607
                                        #   in Loop: Header=BB106_140 Depth=1
	movl	$0, -4(%rbp)
.LBB106_142:                            # %for.cond608
                                        #   Parent Loop BB106_140 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB106_148
# %bb.143:                              # %for.body611
                                        #   in Loop: Header=BB106_142 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB106_145
# %bb.144:                              # %cond.true625
                                        #   in Loop: Header=BB106_142 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB106_146
.LBB106_145:                            # %cond.false642
                                        #   in Loop: Header=BB106_142 Depth=2
	movq	$-1, %rax
	jmp	.LBB106_146
.LBB106_146:                            # %cond.end643
                                        #   in Loop: Header=BB106_142 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.147:                              # %for.inc655
                                        #   in Loop: Header=BB106_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_142
.LBB106_148:                            # %for.end657
                                        #   in Loop: Header=BB106_140 Depth=1
	jmp	.LBB106_149
.LBB106_149:                            # %for.inc658
                                        #   in Loop: Header=BB106_140 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_140
.LBB106_150:                            # %for.end660
	jmp	.LBB106_151
.LBB106_151:                            # %if.end661
	cmpl	$1550044981, -36(%rbp)  # imm = 0x5C63CF35
	jne	.LBB106_153
.LBB106_152:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB106_153:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB106_152
.Lfunc_end106:
	.size	SetModesAndRefframeForBlocks.77, .Lfunc_end106-SetModesAndRefframeForBlocks.77
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI106_0:
	.quad	.LBB106_9
	.quad	.LBB106_17
	.quad	.LBB106_17
	.quad	.LBB106_17
	.quad	.LBB106_42
	.quad	.LBB106_42
	.quad	.LBB106_42
	.quad	.LBB106_42
	.quad	.LBB106_22
	.quad	.LBB106_27
	.quad	.LBB106_32
	.quad	.LBB106_42
	.quad	.LBB106_42
	.quad	.LBB106_37
                                        # -- End function
	.text
	.globl	StoreMV8x8.78           # -- Begin function StoreMV8x8.78
	.p2align	4, 0x90
	.type	StoreMV8x8.78,@function
StoreMV8x8.78:                          # @StoreMV8x8.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1363764339, -12(%rbp)  # imm = 0x51496473
	movl	%edi, -8(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB107_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB107_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB107_1 Depth=1
	movl	-8(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB107_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_1
.LBB107_4:                              # %for.end
	cmpl	$1363764339, -12(%rbp)  # imm = 0x51496473
	jne	.LBB107_6
.LBB107_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB107_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB107_5
.Lfunc_end107:
	.size	StoreMV8x8.78, .Lfunc_end107-StoreMV8x8.78
	.cfi_endproc
                                        # -- End function
	.globl	UpdatePixelMap.79       # -- Begin function UpdatePixelMap.79
	.p2align	4, 0x90
	.type	UpdatePixelMap.79,@function
UpdatePixelMap.79:                      # @UpdatePixelMap.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$763941177, -28(%rbp)   # imm = 0x2D88D139
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB108_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB108_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_4 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB108_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB108_2 Depth=1
	movl	$0, -4(%rbp)
.LBB108_4:                              # %for.cond2
                                        #   Parent Loop BB108_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB108_7
# %bb.5:                                # %for.body4
                                        #   in Loop: Header=BB108_4 Depth=2
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB108_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_4
.LBB108_7:                              # %for.end
                                        #   in Loop: Header=BB108_2 Depth=1
	jmp	.LBB108_8
.LBB108_8:                              # %for.inc7
                                        #   in Loop: Header=BB108_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_2
.LBB108_9:                              # %for.end9
	jmp	.LBB108_41
.LBB108_10:                             # %if.else
	movl	$0, -16(%rbp)
.LBB108_11:                             # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_13 Depth 2
                                        #       Child Loop BB108_16 Depth 3
                                        #         Child Loop BB108_18 Depth 4
                                        #       Child Loop BB108_25 Depth 3
                                        #         Child Loop BB108_27 Depth 4
	movl	-16(%rbp), %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB108_40
# %bb.12:                               # %for.body13
                                        #   in Loop: Header=BB108_11 Depth=1
	movl	$0, -12(%rbp)
.LBB108_13:                             # %for.cond14
                                        #   Parent Loop BB108_11 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB108_16 Depth 3
                                        #         Child Loop BB108_18 Depth 4
                                        #       Child Loop BB108_25 Depth 3
                                        #         Child Loop BB108_27 Depth 4
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB108_38
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB108_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-12(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movq	refresh_map, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB108_24
# %bb.15:                               # %if.then25
                                        #   in Loop: Header=BB108_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB108_16:                             # %for.cond27
                                        #   Parent Loop BB108_11 Depth=1
                                        #     Parent Loop BB108_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB108_18 Depth 4
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB108_23
# %bb.17:                               # %for.body29
                                        #   in Loop: Header=BB108_16 Depth=3
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB108_18:                             # %for.cond31
                                        #   Parent Loop BB108_11 Depth=1
                                        #     Parent Loop BB108_13 Depth=2
                                        #       Parent Loop BB108_16 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB108_21
# %bb.19:                               # %for.body33
                                        #   in Loop: Header=BB108_18 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.20:                               # %for.inc38
                                        #   in Loop: Header=BB108_18 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_18
.LBB108_21:                             # %for.end40
                                        #   in Loop: Header=BB108_16 Depth=3
	jmp	.LBB108_22
.LBB108_22:                             # %for.inc41
                                        #   in Loop: Header=BB108_16 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_16
.LBB108_23:                             # %for.end43
                                        #   in Loop: Header=BB108_13 Depth=2
	jmp	.LBB108_36
.LBB108_24:                             # %if.else44
                                        #   in Loop: Header=BB108_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB108_25:                             # %for.cond46
                                        #   Parent Loop BB108_11 Depth=1
                                        #     Parent Loop BB108_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB108_27 Depth 4
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB108_35
# %bb.26:                               # %for.body48
                                        #   in Loop: Header=BB108_25 Depth=3
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB108_27:                             # %for.cond50
                                        #   Parent Loop BB108_11 Depth=1
                                        #     Parent Loop BB108_13 Depth=2
                                        #       Parent Loop BB108_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB108_33
# %bb.28:                               # %for.body52
                                        #   in Loop: Header=BB108_27 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	movq	input, %rcx
	movl	36(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_30
# %bb.29:                               # %cond.true
                                        #   in Loop: Header=BB108_27 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	jmp	.LBB108_31
.LBB108_30:                             # %cond.false
                                        #   in Loop: Header=BB108_27 Depth=4
	movq	input, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
.LBB108_31:                             # %cond.end
                                        #   in Loop: Header=BB108_27 Depth=4
	movq	pixel_map, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.32:                               # %for.inc74
                                        #   in Loop: Header=BB108_27 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_27
.LBB108_33:                             # %for.end76
                                        #   in Loop: Header=BB108_25 Depth=3
	jmp	.LBB108_34
.LBB108_34:                             # %for.inc77
                                        #   in Loop: Header=BB108_25 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_25
.LBB108_35:                             # %for.end79
                                        #   in Loop: Header=BB108_13 Depth=2
	jmp	.LBB108_36
.LBB108_36:                             # %if.end
                                        #   in Loop: Header=BB108_13 Depth=2
	jmp	.LBB108_37
.LBB108_37:                             # %for.inc80
                                        #   in Loop: Header=BB108_13 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_13
.LBB108_38:                             # %for.end82
                                        #   in Loop: Header=BB108_11 Depth=1
	jmp	.LBB108_39
.LBB108_39:                             # %for.inc83
                                        #   in Loop: Header=BB108_11 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_11
.LBB108_40:                             # %for.end85
	jmp	.LBB108_41
.LBB108_41:                             # %if.end86
	cmpl	$763941177, -28(%rbp)   # imm = 0x2D88D139
	jne	.LBB108_43
.LBB108_42:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB108_43:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB108_42
.Lfunc_end108:
	.size	UpdatePixelMap.79, .Lfunc_end108-UpdatePixelMap.79
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframeForBlocks.80 # -- Begin function SetModesAndRefframeForBlocks.80
	.p2align	4, 0x90
	.type	SetModesAndRefframeForBlocks.80,@function
SetModesAndRefframeForBlocks.80:        # @SetModesAndRefframeForBlocks.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$560230775, -40(%rbp)   # imm = 0x21647177
	movl	%edi, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB109_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB109_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB109_4
.LBB109_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB109_4
.LBB109_4:                              # %cond.end
	movl	%ecx, -32(%rbp)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	cmpl	$1, -12(%rbp)
	jne	.LBB109_6
# %bb.5:                                # %if.then
	movq	img, %rax
	movslq	-12(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB109_7
.LBB109_6:                              # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB109_7:                              # %if.end
	movl	-12(%rbp), %eax
	movq	%rax, %rcx
	subq	$13, %rcx
	ja	.LBB109_42
# %bb.8:                                # %if.end
	movq	.LJTI109_0(,%rax,8), %rax
	jmpq	*%rax
.LBB109_9:                              # %sw.bb
	movl	$0, -4(%rbp)
.LBB109_10:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB109_16
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB109_10 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	cmpl	$0, -28(%rbp)
	je	.LBB109_13
# %bb.12:                               # %cond.true17
                                        #   in Loop: Header=BB109_10 Depth=1
	movq	direct_pdir, %rcx
	movq	img, %rax
	movl	144(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	shll	$1, %edx
	addl	%edx, %esi
	movslq	%esi, %rax
	movq	(%rcx,%rax,8), %rcx
	movq	img, %rax
	movl	148(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %esi
	movslq	%esi, %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB109_14
.LBB109_13:                             # %cond.false26
                                        #   in Loop: Header=BB109_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB109_14
.LBB109_14:                             # %cond.end27
                                        #   in Loop: Header=BB109_10 Depth=1
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB109_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_10
.LBB109_16:                             # %for.end
	jmp	.LBB109_43
.LBB109_17:                             # %sw.bb31
	movl	$0, -4(%rbp)
.LBB109_18:                             # %for.cond32
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB109_21
# %bb.19:                               # %for.body35
                                        #   in Loop: Header=BB109_18 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.20:                               # %for.inc47
                                        #   in Loop: Header=BB109_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_18
.LBB109_21:                             # %for.end49
	jmp	.LBB109_43
.LBB109_22:                             # %sw.bb50
	movl	$0, -4(%rbp)
.LBB109_23:                             # %for.cond51
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB109_26
# %bb.24:                               # %for.body54
                                        #   in Loop: Header=BB109_23 Depth=1
	movslq	-4(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.25:                               # %for.inc69
                                        #   in Loop: Header=BB109_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_23
.LBB109_26:                             # %for.end71
	jmp	.LBB109_43
.LBB109_27:                             # %sw.bb72
	movl	$0, -4(%rbp)
.LBB109_28:                             # %for.cond73
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB109_31
# %bb.29:                               # %for.body76
                                        #   in Loop: Header=BB109_28 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$11, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.30:                               # %for.inc83
                                        #   in Loop: Header=BB109_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_28
.LBB109_31:                             # %for.end85
	jmp	.LBB109_43
.LBB109_32:                             # %sw.bb86
	movl	$0, -4(%rbp)
.LBB109_33:                             # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB109_36
# %bb.34:                               # %for.body90
                                        #   in Loop: Header=BB109_33 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.35:                               # %for.inc97
                                        #   in Loop: Header=BB109_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_33
.LBB109_36:                             # %for.end99
	jmp	.LBB109_43
.LBB109_37:                             # %sw.bb100
	movl	$0, -4(%rbp)
.LBB109_38:                             # %for.cond101
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB109_41
# %bb.39:                               # %for.body104
                                        #   in Loop: Header=BB109_38 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$13, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.40:                               # %for.inc111
                                        #   in Loop: Header=BB109_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_38
.LBB109_41:                             # %for.end113
	movq	-24(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB109_43
.LBB109_42:                             # %sw.default
	movabsq	$.L.str, %rdi
	movb	$0, %al
	callq	printf
	movl	$1, %edi
	callq	exit
.LBB109_43:                             # %sw.epilog
	cmpl	$0, -12(%rbp)
	je	.LBB109_47
# %bb.44:                               # %lor.lhs.false
	cmpl	$9, -12(%rbp)
	je	.LBB109_47
# %bb.45:                               # %lor.lhs.false118
	cmpl	$10, -12(%rbp)
	je	.LBB109_47
# %bb.46:                               # %lor.lhs.false121
	cmpl	$13, -12(%rbp)
	jne	.LBB109_70
.LBB109_47:                             # %if.then124
	cmpl	$0, -28(%rbp)
	je	.LBB109_60
# %bb.48:                               # %if.then126
	movl	$0, -8(%rbp)
.LBB109_49:                             # %for.cond127
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB109_59
# %bb.50:                               # %for.body130
                                        #   in Loop: Header=BB109_49 Depth=1
	movl	$0, -4(%rbp)
.LBB109_51:                             # %for.cond131
                                        #   Parent Loop BB109_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB109_57
# %bb.52:                               # %for.body134
                                        #   in Loop: Header=BB109_51 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB109_54
# %bb.53:                               # %if.then136
                                        #   in Loop: Header=BB109_51 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB109_55
.LBB109_54:                             # %if.else174
                                        #   in Loop: Header=BB109_51 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB109_55:                             # %if.end195
                                        #   in Loop: Header=BB109_51 Depth=2
	jmp	.LBB109_56
.LBB109_56:                             # %for.inc196
                                        #   in Loop: Header=BB109_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_51
.LBB109_57:                             # %for.end198
                                        #   in Loop: Header=BB109_49 Depth=1
	jmp	.LBB109_58
.LBB109_58:                             # %for.inc199
                                        #   in Loop: Header=BB109_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_49
.LBB109_59:                             # %for.end201
	jmp	.LBB109_69
.LBB109_60:                             # %if.else202
	movl	$0, -8(%rbp)
.LBB109_61:                             # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB109_68
# %bb.62:                               # %for.body206
                                        #   in Loop: Header=BB109_61 Depth=1
	movl	$0, -4(%rbp)
.LBB109_63:                             # %for.cond207
                                        #   Parent Loop BB109_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB109_66
# %bb.64:                               # %for.body210
                                        #   in Loop: Header=BB109_63 Depth=2
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	cmovel	%eax, %ecx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.65:                               # %for.inc225
                                        #   in Loop: Header=BB109_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_63
.LBB109_66:                             # %for.end227
                                        #   in Loop: Header=BB109_61 Depth=1
	jmp	.LBB109_67
.LBB109_67:                             # %for.inc228
                                        #   in Loop: Header=BB109_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_61
.LBB109_68:                             # %for.end230
	jmp	.LBB109_69
.LBB109_69:                             # %if.end231
	jmp	.LBB109_127
.LBB109_70:                             # %if.else232
	cmpl	$0, -28(%rbp)
	je	.LBB109_110
# %bb.71:                               # %if.then234
	movl	$0, -8(%rbp)
.LBB109_72:                             # %for.cond235
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_74 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB109_109
# %bb.73:                               # %for.body238
                                        #   in Loop: Header=BB109_72 Depth=1
	movl	$0, -4(%rbp)
.LBB109_74:                             # %for.cond239
                                        #   Parent Loop BB109_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB109_107
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB109_74 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	cmpl	$8, -12(%rbp)
	jne	.LBB109_78
# %bb.76:                               # %land.lhs.true253
                                        #   in Loop: Header=BB109_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB109_78
# %bb.77:                               # %if.then259
                                        #   in Loop: Header=BB109_74 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB109_105
.LBB109_78:                             # %if.else298
                                        #   in Loop: Header=BB109_74 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB109_90
# %bb.79:                               # %land.lhs.true301
                                        #   in Loop: Header=BB109_74 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB109_90
# %bb.80:                               # %land.lhs.true304
                                        #   in Loop: Header=BB109_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB109_82
# %bb.81:                               # %lor.lhs.false312
                                        #   in Loop: Header=BB109_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB109_90
.LBB109_82:                             # %land.lhs.true320
                                        #   in Loop: Header=BB109_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB109_85
# %bb.83:                               # %lor.lhs.false323
                                        #   in Loop: Header=BB109_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB109_85
# %bb.84:                               # %lor.lhs.false329
                                        #   in Loop: Header=BB109_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB109_90
.LBB109_85:                             # %land.lhs.true331
                                        #   in Loop: Header=BB109_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB109_87
# %bb.86:                               # %lor.lhs.false339
                                        #   in Loop: Header=BB109_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB109_90
.LBB109_87:                             # %land.lhs.true347
                                        #   in Loop: Header=BB109_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB109_89
# %bb.88:                               # %lor.lhs.false350
                                        #   in Loop: Header=BB109_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB109_90
.LBB109_89:                             # %if.then356
                                        #   in Loop: Header=BB109_74 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB109_104
.LBB109_90:                             # %if.else377
                                        #   in Loop: Header=BB109_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB109_92
# %bb.91:                               # %lor.lhs.false385
                                        #   in Loop: Header=BB109_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB109_96
.LBB109_92:                             # %land.lhs.true393
                                        #   in Loop: Header=BB109_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB109_95
# %bb.93:                               # %lor.lhs.false396
                                        #   in Loop: Header=BB109_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB109_95
# %bb.94:                               # %lor.lhs.false402
                                        #   in Loop: Header=BB109_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB109_96
.LBB109_95:                             # %cond.true404
                                        #   in Loop: Header=BB109_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB109_97
.LBB109_96:                             # %cond.false410
                                        #   in Loop: Header=BB109_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB109_97
.LBB109_97:                             # %cond.end411
                                        #   in Loop: Header=BB109_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB109_99
# %bb.98:                               # %lor.lhs.false431
                                        #   in Loop: Header=BB109_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB109_102
.LBB109_99:                             # %land.lhs.true439
                                        #   in Loop: Header=BB109_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB109_101
# %bb.100:                              # %lor.lhs.false442
                                        #   in Loop: Header=BB109_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB109_102
.LBB109_101:                            # %cond.true448
                                        #   in Loop: Header=BB109_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8bwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB109_103
.LBB109_102:                            # %cond.false454
                                        #   in Loop: Header=BB109_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB109_103
.LBB109_103:                            # %cond.end455
                                        #   in Loop: Header=BB109_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB109_104:                            # %if.end468
                                        #   in Loop: Header=BB109_74 Depth=2
	jmp	.LBB109_105
.LBB109_105:                            # %if.end469
                                        #   in Loop: Header=BB109_74 Depth=2
	jmp	.LBB109_106
.LBB109_106:                            # %for.inc470
                                        #   in Loop: Header=BB109_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_74
.LBB109_107:                            # %for.end472
                                        #   in Loop: Header=BB109_72 Depth=1
	jmp	.LBB109_108
.LBB109_108:                            # %for.inc473
                                        #   in Loop: Header=BB109_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_72
.LBB109_109:                            # %for.end475
	jmp	.LBB109_126
.LBB109_110:                            # %if.else476
	movl	$0, -8(%rbp)
.LBB109_111:                            # %for.cond477
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_113 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB109_125
# %bb.112:                              # %for.body480
                                        #   in Loop: Header=BB109_111 Depth=1
	movl	$0, -4(%rbp)
.LBB109_113:                            # %for.cond481
                                        #   Parent Loop BB109_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB109_123
# %bb.114:                              # %for.body484
                                        #   in Loop: Header=BB109_113 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB109_116
# %bb.115:                              # %lor.lhs.false500
                                        #   in Loop: Header=BB109_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB109_120
.LBB109_116:                            # %land.lhs.true508
                                        #   in Loop: Header=BB109_113 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB109_119
# %bb.117:                              # %lor.lhs.false511
                                        #   in Loop: Header=BB109_113 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB109_119
# %bb.118:                              # %lor.lhs.false517
                                        #   in Loop: Header=BB109_113 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB109_120
.LBB109_119:                            # %cond.true519
                                        #   in Loop: Header=BB109_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB109_121
.LBB109_120:                            # %cond.false525
                                        #   in Loop: Header=BB109_113 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB109_121
.LBB109_121:                            # %cond.end526
                                        #   in Loop: Header=BB109_113 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.122:                              # %for.inc539
                                        #   in Loop: Header=BB109_113 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_113
.LBB109_123:                            # %for.end541
                                        #   in Loop: Header=BB109_111 Depth=1
	jmp	.LBB109_124
.LBB109_124:                            # %for.inc542
                                        #   in Loop: Header=BB109_111 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_111
.LBB109_125:                            # %for.end544
	jmp	.LBB109_126
.LBB109_126:                            # %if.end545
	jmp	.LBB109_127
.LBB109_127:                            # %if.end546
	movl	$0, -8(%rbp)
.LBB109_128:                            # %for.cond547
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_130 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB109_138
# %bb.129:                              # %for.body550
                                        #   in Loop: Header=BB109_128 Depth=1
	movl	$0, -4(%rbp)
.LBB109_130:                            # %for.cond551
                                        #   Parent Loop BB109_128 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB109_136
# %bb.131:                              # %for.body554
                                        #   in Loop: Header=BB109_130 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB109_133
# %bb.132:                              # %cond.true568
                                        #   in Loop: Header=BB109_130 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB109_134
.LBB109_133:                            # %cond.false584
                                        #   in Loop: Header=BB109_130 Depth=2
	movq	$-1, %rax
	jmp	.LBB109_134
.LBB109_134:                            # %cond.end585
                                        #   in Loop: Header=BB109_130 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.135:                              # %for.inc596
                                        #   in Loop: Header=BB109_130 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_130
.LBB109_136:                            # %for.end598
                                        #   in Loop: Header=BB109_128 Depth=1
	jmp	.LBB109_137
.LBB109_137:                            # %for.inc599
                                        #   in Loop: Header=BB109_128 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_128
.LBB109_138:                            # %for.end601
	cmpl	$0, -28(%rbp)
	je	.LBB109_151
# %bb.139:                              # %if.then603
	movl	$0, -8(%rbp)
.LBB109_140:                            # %for.cond604
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_142 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB109_150
# %bb.141:                              # %for.body607
                                        #   in Loop: Header=BB109_140 Depth=1
	movl	$0, -4(%rbp)
.LBB109_142:                            # %for.cond608
                                        #   Parent Loop BB109_140 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB109_148
# %bb.143:                              # %for.body611
                                        #   in Loop: Header=BB109_142 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB109_145
# %bb.144:                              # %cond.true625
                                        #   in Loop: Header=BB109_142 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB109_146
.LBB109_145:                            # %cond.false642
                                        #   in Loop: Header=BB109_142 Depth=2
	movq	$-1, %rax
	jmp	.LBB109_146
.LBB109_146:                            # %cond.end643
                                        #   in Loop: Header=BB109_142 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.147:                              # %for.inc655
                                        #   in Loop: Header=BB109_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_142
.LBB109_148:                            # %for.end657
                                        #   in Loop: Header=BB109_140 Depth=1
	jmp	.LBB109_149
.LBB109_149:                            # %for.inc658
                                        #   in Loop: Header=BB109_140 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_140
.LBB109_150:                            # %for.end660
	jmp	.LBB109_151
.LBB109_151:                            # %if.end661
	cmpl	$560230775, -40(%rbp)   # imm = 0x21647177
	jne	.LBB109_153
.LBB109_152:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB109_153:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB109_152
.Lfunc_end109:
	.size	SetModesAndRefframeForBlocks.80, .Lfunc_end109-SetModesAndRefframeForBlocks.80
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI109_0:
	.quad	.LBB109_9
	.quad	.LBB109_17
	.quad	.LBB109_17
	.quad	.LBB109_17
	.quad	.LBB109_42
	.quad	.LBB109_42
	.quad	.LBB109_42
	.quad	.LBB109_42
	.quad	.LBB109_22
	.quad	.LBB109_27
	.quad	.LBB109_32
	.quad	.LBB109_42
	.quad	.LBB109_42
	.quad	.LBB109_37
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_4x4IntraBlocks.81
.LCPI110_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI110_1:
	.quad	4616189618054758400     # double 4
	.text
	.globl	Mode_Decision_for_4x4IntraBlocks.81
	.p2align	4, 0x90
	.type	Mode_Decision_for_4x4IntraBlocks.81,@function
Mode_Decision_for_4x4IntraBlocks.81:    # @Mode_Decision_for_4x4IntraBlocks.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$488, %rsp              # imm = 0x1E8
	.cfi_offset %rbx, -24
	vmovsd	.LCPI110_0(%rip), %xmm1 # xmm1 = mem[0],zero
	movl	$753469079, -184(%rbp)  # imm = 0x2CE90697
	movl	%edi, -32(%rbp)
	movl	%esi, -28(%rbp)
	vmovsd	%xmm0, -144(%rbp)
	movq	%rdx, -152(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -96(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -176(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -164(%rbp)
	vmovsd	%xmm1, -128(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rax
	movl	524(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %esi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-40(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-232(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB110_8
# %bb.1:                                # %if.then
	cmpl	$0, -208(%rbp)
	je	.LBB110_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-204(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB110_4
.LBB110_3:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB110_4
.LBB110_4:                              # %cond.end
	movl	%eax, -208(%rbp)
	cmpl	$0, -232(%rbp)
	je	.LBB110_6
# %bb.5:                                # %cond.true25
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-228(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB110_7
.LBB110_6:                              # %cond.false30
	xorl	%eax, %eax
	jmp	.LBB110_7
.LBB110_7:                              # %cond.end31
	movl	%eax, -232(%rbp)
.LBB110_8:                              # %if.end
	cmpl	$0, -232(%rbp)
	je	.LBB110_10
# %bb.9:                                # %cond.true36
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-216(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-212(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB110_11
.LBB110_10:                             # %cond.false41
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB110_11
.LBB110_11:                             # %cond.end42
	movl	%eax, -108(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB110_13
# %bb.12:                               # %cond.true46
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB110_14
.LBB110_13:                             # %cond.false54
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB110_14
.LBB110_14:                             # %cond.end55
	movl	%eax, -120(%rbp)
	cmpl	$0, -108(%rbp)
	jl	.LBB110_16
# %bb.15:                               # %lor.lhs.false
	cmpl	$0, -120(%rbp)
	jge	.LBB110_17
.LBB110_16:                             # %cond.true58
	movl	$2, %eax
	jmp	.LBB110_21
.LBB110_17:                             # %cond.false59
	movl	-108(%rbp), %eax
	cmpl	-120(%rbp), %eax
	jge	.LBB110_19
# %bb.18:                               # %cond.true61
	movl	-108(%rbp), %eax
	jmp	.LBB110_20
.LBB110_19:                             # %cond.false62
	movl	-120(%rbp), %eax
.LBB110_20:                             # %cond.end63
.LBB110_21:                             # %cond.end65
	movl	%eax, -92(%rbp)
	movq	-152(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	-64(%rbp), %edi
	movl	-48(%rbp), %esi
	leaq	-160(%rbp), %rdx
	leaq	-156(%rbp), %rcx
	leaq	-168(%rbp), %r8
	callq	intrapred_luma
	movl	$0, -44(%rbp)
.LBB110_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_49 Depth 2
                                        #       Child Loop BB110_51 Depth 3
                                        #     Child Loop BB110_64 Depth 2
                                        #       Child Loop BB110_66 Depth 3
                                        #     Child Loop BB110_73 Depth 2
                                        #       Child Loop BB110_75 Depth 3
                                        #     Child Loop BB110_81 Depth 2
                                        #       Child Loop BB110_83 Depth 3
                                        #     Child Loop BB110_91 Depth 2
                                        #       Child Loop BB110_93 Depth 3
                                        #     Child Loop BB110_99 Depth 2
                                        #       Child Loop BB110_101 Depth 3
                                        #     Child Loop BB110_107 Depth 2
                                        #       Child Loop BB110_109 Depth 3
                                        #     Child Loop BB110_115 Depth 2
                                        #       Child Loop BB110_117 Depth 3
                                        #     Child Loop BB110_123 Depth 2
                                        #       Child Loop BB110_125 Depth 3
                                        #     Child Loop BB110_131 Depth 2
                                        #       Child Loop BB110_133 Depth 3
                                        #     Child Loop BB110_166 Depth 2
                                        #       Child Loop BB110_168 Depth 3
                                        #     Child Loop BB110_175 Depth 2
                                        #       Child Loop BB110_177 Depth 3
                                        #     Child Loop BB110_183 Depth 2
                                        #       Child Loop BB110_185 Depth 3
                                        #     Child Loop BB110_191 Depth 2
                                        #       Child Loop BB110_193 Depth 3
                                        #     Child Loop BB110_199 Depth 2
                                        #       Child Loop BB110_201 Depth 3
                                        #         Child Loop BB110_203 Depth 4
                                        #     Child Loop BB110_211 Depth 2
                                        #       Child Loop BB110_213 Depth 3
	cmpl	$9, -44(%rbp)
	jge	.LBB110_224
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$2, -44(%rbp)
	movb	$1, %al
	je	.LBB110_32
# %bb.24:                               # %lor.lhs.false69
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB110_27
# %bb.25:                               # %lor.lhs.false71
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$7, -44(%rbp)
	je	.LBB110_27
# %bb.26:                               # %lor.lhs.false73
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB110_28
.LBB110_27:                             # %land.lhs.true
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$0, -156(%rbp)
	movb	$1, %al
	jne	.LBB110_32
.LBB110_28:                             # %lor.lhs.false76
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$1, -44(%rbp)
	je	.LBB110_30
# %bb.29:                               # %lor.lhs.false78
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$8, -44(%rbp)
	jne	.LBB110_31
.LBB110_30:                             # %land.lhs.true80
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$0, -160(%rbp)
	movb	$1, %al
	jne	.LBB110_32
.LBB110_31:                             # %lor.rhs
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$0, -168(%rbp)
	setne	%al
.LBB110_32:                             # %lor.end
                                        #   in Loop: Header=BB110_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -180(%rbp)
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB110_34
# %bb.33:                               # %lor.lhs.false84
                                        #   in Loop: Header=BB110_22 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB110_46
.LBB110_34:                             # %if.then86
                                        #   in Loop: Header=BB110_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2400(%rax)
	je	.LBB110_38
# %bb.35:                               # %land.lhs.true88
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB110_37
# %bb.36:                               # %lor.lhs.false90
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB110_38
.LBB110_37:                             # %if.then92
                                        #   in Loop: Header=BB110_22 Depth=1
	jmp	.LBB110_223
.LBB110_38:                             # %if.end93
                                        #   in Loop: Header=BB110_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2404(%rax)
	je	.LBB110_42
# %bb.39:                               # %land.lhs.true95
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$3, -44(%rbp)
	je	.LBB110_41
# %bb.40:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$4, -44(%rbp)
	jne	.LBB110_42
.LBB110_41:                             # %if.then99
                                        #   in Loop: Header=BB110_22 Depth=1
	jmp	.LBB110_223
.LBB110_42:                             # %if.end100
                                        #   in Loop: Header=BB110_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2408(%rax)
	je	.LBB110_45
# %bb.43:                               # %land.lhs.true102
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$5, -44(%rbp)
	jl	.LBB110_45
# %bb.44:                               # %if.then104
                                        #   in Loop: Header=BB110_22 Depth=1
	jmp	.LBB110_223
.LBB110_45:                             # %if.end105
                                        #   in Loop: Header=BB110_22 Depth=1
	jmp	.LBB110_46
.LBB110_46:                             # %if.end106
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$0, -180(%rbp)
	je	.LBB110_222
# %bb.47:                               # %if.then108
                                        #   in Loop: Header=BB110_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB110_62
# %bb.48:                               # %if.then110
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -16(%rbp)
	movl	$0, -112(%rbp)
.LBB110_49:                             # %for.cond111
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_51 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB110_56
# %bb.50:                               # %for.body113
                                        #   in Loop: Header=BB110_49 Depth=2
	movl	$0, -12(%rbp)
.LBB110_51:                             # %for.cond114
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB110_54
# %bb.52:                               # %for.body116
                                        #   in Loop: Header=BB110_51 Depth=3
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-112(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.53:                               # %for.inc
                                        #   in Loop: Header=BB110_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB110_51
.LBB110_54:                             # %for.end
                                        #   in Loop: Header=BB110_49 Depth=2
	jmp	.LBB110_55
.LBB110_55:                             # %for.inc133
                                        #   in Loop: Header=BB110_49 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_49
.LBB110_56:                             # %for.end135
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	-44(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jne	.LBB110_58
# %bb.57:                               # %cond.true138
                                        #   in Loop: Header=BB110_22 Depth=1
	xorl	%eax, %eax
	jmp	.LBB110_59
.LBB110_58:                             # %cond.false139
                                        #   in Loop: Header=BB110_22 Depth=1
	vmovsd	.LCPI110_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-144(%rbp), %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB110_59:                             # %cond.end142
                                        #   in Loop: Header=BB110_22 Depth=1
	leaq	-368(%rbp), %rdi
	movl	%eax, -104(%rbp)
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-104(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB110_61
# %bb.60:                               # %if.then147
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB110_61:                             # %if.end148
                                        #   in Loop: Header=BB110_22 Depth=1
	jmp	.LBB110_221
.LBB110_62:                             # %if.else
                                        #   in Loop: Header=BB110_22 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB110_90
# %bb.63:                               # %if.then150
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -16(%rbp)
.LBB110_64:                             # %for.cond151
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_66 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB110_71
# %bb.65:                               # %for.body154
                                        #   in Loop: Header=BB110_64 Depth=2
	movl	$0, -12(%rbp)
.LBB110_66:                             # %for.cond155
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_64 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB110_69
# %bb.67:                               # %for.body158
                                        #   in Loop: Header=BB110_66 Depth=3
	movq	img, %rax
	addq	$184, %rax
	movslq	-44(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc192
                                        #   in Loop: Header=BB110_66 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_66
.LBB110_69:                             # %for.end194
                                        #   in Loop: Header=BB110_64 Depth=2
	jmp	.LBB110_70
.LBB110_70:                             # %for.inc195
                                        #   in Loop: Header=BB110_64 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_64
.LBB110_71:                             # %for.end197
                                        #   in Loop: Header=BB110_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-92(%rbp), %r8d
	leaq	-116(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vmovsd	%xmm0, -136(%rbp)
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB110_89
# %bb.72:                               # %if.then201
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -16(%rbp)
.LBB110_73:                             # %for.cond202
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_75 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB110_80
# %bb.74:                               # %for.body205
                                        #   in Loop: Header=BB110_73 Depth=2
	movl	$0, -12(%rbp)
.LBB110_75:                             # %for.cond206
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_73 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB110_78
# %bb.76:                               # %for.body209
                                        #   in Loop: Header=BB110_75 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.77:                               # %for.inc222
                                        #   in Loop: Header=BB110_75 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_75
.LBB110_78:                             # %for.end224
                                        #   in Loop: Header=BB110_73 Depth=2
	jmp	.LBB110_79
.LBB110_79:                             # %for.inc225
                                        #   in Loop: Header=BB110_73 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_73
.LBB110_80:                             # %for.end227
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -20(%rbp)
.LBB110_81:                             # %for.cond228
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_83 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB110_88
# %bb.82:                               # %for.body231
                                        #   in Loop: Header=BB110_81 Depth=2
	movl	$0, -24(%rbp)
.LBB110_83:                             # %for.cond232
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_81 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB110_86
# %bb.84:                               # %for.body235
                                        #   in Loop: Header=BB110_83 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-20(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.85:                               # %for.inc247
                                        #   in Loop: Header=BB110_83 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB110_83
.LBB110_86:                             # %for.end249
                                        #   in Loop: Header=BB110_81 Depth=2
	jmp	.LBB110_87
.LBB110_87:                             # %for.inc250
                                        #   in Loop: Header=BB110_81 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB110_81
.LBB110_88:                             # %for.end252
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	-116(%rbp), %eax
	movl	%eax, -96(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB110_89:                             # %if.end253
                                        #   in Loop: Header=BB110_22 Depth=1
	movq	cs_cm, %rdi
	callq	reset_coding_state
	jmp	.LBB110_220
.LBB110_90:                             # %if.else254
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -16(%rbp)
.LBB110_91:                             # %for.cond255
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_93 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB110_98
# %bb.92:                               # %for.body258
                                        #   in Loop: Header=BB110_91 Depth=2
	movl	$0, -12(%rbp)
.LBB110_93:                             # %for.cond259
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_91 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB110_96
# %bb.94:                               # %for.body262
                                        #   in Loop: Header=BB110_93 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.95:                               # %for.inc343
                                        #   in Loop: Header=BB110_93 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_93
.LBB110_96:                             # %for.end345
                                        #   in Loop: Header=BB110_91 Depth=2
	jmp	.LBB110_97
.LBB110_97:                             # %for.inc346
                                        #   in Loop: Header=BB110_91 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_91
.LBB110_98:                             # %for.end348
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -16(%rbp)
.LBB110_99:                             # %for.cond349
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_101 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB110_106
# %bb.100:                              # %for.body352
                                        #   in Loop: Header=BB110_99 Depth=2
	movl	$0, -12(%rbp)
.LBB110_101:                            # %for.cond353
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_99 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB110_104
# %bb.102:                              # %for.body356
                                        #   in Loop: Header=BB110_101 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.103:                              # %for.inc366
                                        #   in Loop: Header=BB110_101 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_101
.LBB110_104:                            # %for.end368
                                        #   in Loop: Header=BB110_99 Depth=2
	jmp	.LBB110_105
.LBB110_105:                            # %for.inc369
                                        #   in Loop: Header=BB110_99 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_99
.LBB110_106:                            # %for.end371
                                        #   in Loop: Header=BB110_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-92(%rbp), %r8d
	leaq	-116(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -100(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB110_107:                            # %for.cond374
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_109 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB110_114
# %bb.108:                              # %for.body377
                                        #   in Loop: Header=BB110_107 Depth=2
	movl	$0, -12(%rbp)
.LBB110_109:                            # %for.cond378
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB110_112
# %bb.110:                              # %for.body381
                                        #   in Loop: Header=BB110_109 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc400
                                        #   in Loop: Header=BB110_109 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_109
.LBB110_112:                            # %for.end402
                                        #   in Loop: Header=BB110_107 Depth=2
	jmp	.LBB110_113
.LBB110_113:                            # %for.inc403
                                        #   in Loop: Header=BB110_107 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_107
.LBB110_114:                            # %for.end405
                                        #   in Loop: Header=BB110_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-32(%rbp), %edi
	addl	$4, %edi
	movl	-28(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-100(%rbp), %eax
	movl	%eax, -100(%rbp)
	movl	$0, -16(%rbp)
.LBB110_115:                            # %for.cond409
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_117 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB110_122
# %bb.116:                              # %for.body412
                                        #   in Loop: Header=BB110_115 Depth=2
	movl	$0, -12(%rbp)
.LBB110_117:                            # %for.cond413
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB110_120
# %bb.118:                              # %for.body416
                                        #   in Loop: Header=BB110_117 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc435
                                        #   in Loop: Header=BB110_117 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_117
.LBB110_120:                            # %for.end437
                                        #   in Loop: Header=BB110_115 Depth=2
	jmp	.LBB110_121
.LBB110_121:                            # %for.inc438
                                        #   in Loop: Header=BB110_115 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_115
.LBB110_122:                            # %for.end440
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	-32(%rbp), %edi
	addl	$8, %edi
	movl	-28(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-100(%rbp), %eax
	movl	%eax, -100(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB110_123:                            # %for.cond444
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_125 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB110_130
# %bb.124:                              # %for.body447
                                        #   in Loop: Header=BB110_123 Depth=2
	movl	$0, -12(%rbp)
.LBB110_125:                            # %for.cond448
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB110_128
# %bb.126:                              # %for.body451
                                        #   in Loop: Header=BB110_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.127:                              # %for.inc461
                                        #   in Loop: Header=BB110_125 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_125
.LBB110_128:                            # %for.end463
                                        #   in Loop: Header=BB110_123 Depth=2
	jmp	.LBB110_129
.LBB110_129:                            # %for.inc464
                                        #   in Loop: Header=BB110_123 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_123
.LBB110_130:                            # %for.end466
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -16(%rbp)
.LBB110_131:                            # %for.cond467
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_133 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB110_165
# %bb.132:                              # %for.body470
                                        #   in Loop: Header=BB110_131 Depth=2
	movl	$0, -12(%rbp)
.LBB110_133:                            # %for.cond471
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_131 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB110_163
# %bb.134:                              # %for.body474
                                        #   in Loop: Header=BB110_133 Depth=3
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -72(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -68(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB110_136
# %bb.135:                              # %cond.true515
                                        #   in Loop: Header=BB110_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB110_137
.LBB110_136:                            # %cond.false516
                                        #   in Loop: Header=BB110_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB110_137:                            # %cond.end529
                                        #   in Loop: Header=BB110_133 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB110_139
# %bb.138:                              # %cond.true533
                                        #   in Loop: Header=BB110_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB110_143
.LBB110_139:                            # %cond.false535
                                        #   in Loop: Header=BB110_133 Depth=3
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB110_141
# %bb.140:                              # %cond.true550
                                        #   in Loop: Header=BB110_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB110_142
.LBB110_141:                            # %cond.false551
                                        #   in Loop: Header=BB110_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB110_142:                            # %cond.end564
                                        #   in Loop: Header=BB110_133 Depth=3
.LBB110_143:                            # %cond.end566
                                        #   in Loop: Header=BB110_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-44(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB110_145
# %bb.144:                              # %cond.true587
                                        #   in Loop: Header=BB110_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB110_146
.LBB110_145:                            # %cond.false588
                                        #   in Loop: Header=BB110_133 Depth=3
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB110_146:                            # %cond.end598
                                        #   in Loop: Header=BB110_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB110_148
# %bb.147:                              # %cond.true602
                                        #   in Loop: Header=BB110_133 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB110_152
.LBB110_148:                            # %cond.false604
                                        #   in Loop: Header=BB110_133 Depth=3
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB110_150
# %bb.149:                              # %cond.true616
                                        #   in Loop: Header=BB110_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB110_151
.LBB110_150:                            # %cond.false617
                                        #   in Loop: Header=BB110_133 Depth=3
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB110_151:                            # %cond.end627
                                        #   in Loop: Header=BB110_133 Depth=3
.LBB110_152:                            # %cond.end629
                                        #   in Loop: Header=BB110_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB110_154
# %bb.153:                              # %cond.true654
                                        #   in Loop: Header=BB110_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB110_155
.LBB110_154:                            # %cond.false655
                                        #   in Loop: Header=BB110_133 Depth=3
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB110_155:                            # %cond.end668
                                        #   in Loop: Header=BB110_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB110_157
# %bb.156:                              # %cond.true672
                                        #   in Loop: Header=BB110_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB110_161
.LBB110_157:                            # %cond.false674
                                        #   in Loop: Header=BB110_133 Depth=3
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB110_159
# %bb.158:                              # %cond.true689
                                        #   in Loop: Header=BB110_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB110_160
.LBB110_159:                            # %cond.false690
                                        #   in Loop: Header=BB110_133 Depth=3
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB110_160:                            # %cond.end703
                                        #   in Loop: Header=BB110_133 Depth=3
.LBB110_161:                            # %cond.end705
                                        #   in Loop: Header=BB110_133 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.162:                              # %for.inc716
                                        #   in Loop: Header=BB110_133 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_133
.LBB110_163:                            # %for.end718
                                        #   in Loop: Header=BB110_131 Depth=2
	jmp	.LBB110_164
.LBB110_164:                            # %for.inc719
                                        #   in Loop: Header=BB110_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_131
.LBB110_165:                            # %for.end721
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -88(%rbp)
	movl	$0, -20(%rbp)
.LBB110_166:                            # %for.cond722
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_168 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB110_173
# %bb.167:                              # %for.body725
                                        #   in Loop: Header=BB110_166 Depth=2
	movl	-64(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB110_168:                            # %for.cond726
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_166 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-24(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB110_171
# %bb.169:                              # %for.body730
                                        #   in Loop: Header=BB110_168 Depth=3
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgY_org, %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
# %bb.170:                              # %for.inc829
                                        #   in Loop: Header=BB110_168 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB110_168
.LBB110_171:                            # %for.end831
                                        #   in Loop: Header=BB110_166 Depth=2
	jmp	.LBB110_172
.LBB110_172:                            # %for.inc832
                                        #   in Loop: Header=BB110_166 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB110_166
.LBB110_173:                            # %for.end834
                                        #   in Loop: Header=BB110_22 Depth=1
	vcvtsi2sdl	-88(%rbp), %xmm0, %xmm0
	vmovsd	-144(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-100(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -136(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB110_219
# %bb.174:                              # %if.then841
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -16(%rbp)
.LBB110_175:                            # %for.cond842
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_177 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB110_182
# %bb.176:                              # %for.body845
                                        #   in Loop: Header=BB110_175 Depth=2
	movl	$0, -12(%rbp)
.LBB110_177:                            # %for.cond846
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_175 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB110_180
# %bb.178:                              # %for.body849
                                        #   in Loop: Header=BB110_177 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.179:                              # %for.inc863
                                        #   in Loop: Header=BB110_177 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_177
.LBB110_180:                            # %for.end865
                                        #   in Loop: Header=BB110_175 Depth=2
	jmp	.LBB110_181
.LBB110_181:                            # %for.inc866
                                        #   in Loop: Header=BB110_175 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_175
.LBB110_182:                            # %for.end868
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -16(%rbp)
.LBB110_183:                            # %for.cond869
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_185 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB110_190
# %bb.184:                              # %for.body872
                                        #   in Loop: Header=BB110_183 Depth=2
	movl	$0, -12(%rbp)
.LBB110_185:                            # %for.cond873
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_183 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB110_188
# %bb.186:                              # %for.body876
                                        #   in Loop: Header=BB110_185 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-32(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	movabsq	$cofAC4x4_chroma, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.187:                              # %for.inc891
                                        #   in Loop: Header=BB110_185 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_185
.LBB110_188:                            # %for.end893
                                        #   in Loop: Header=BB110_183 Depth=2
	jmp	.LBB110_189
.LBB110_189:                            # %for.inc894
                                        #   in Loop: Header=BB110_183 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_183
.LBB110_190:                            # %for.end896
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -16(%rbp)
.LBB110_191:                            # %for.cond897
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_193 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB110_198
# %bb.192:                              # %for.body900
                                        #   in Loop: Header=BB110_191 Depth=2
	movl	$0, -12(%rbp)
.LBB110_193:                            # %for.cond901
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_191 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB110_196
# %bb.194:                              # %for.body904
                                        #   in Loop: Header=BB110_193 Depth=3
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-32(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	imulq	$72, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.195:                              # %for.inc919
                                        #   in Loop: Header=BB110_193 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_193
.LBB110_196:                            # %for.end921
                                        #   in Loop: Header=BB110_191 Depth=2
	jmp	.LBB110_197
.LBB110_197:                            # %for.inc922
                                        #   in Loop: Header=BB110_191 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_191
.LBB110_198:                            # %for.end924
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -12(%rbp)
.LBB110_199:                            # %for.cond925
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_201 Depth 3
                                        #         Child Loop BB110_203 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB110_210
# %bb.200:                              # %for.body928
                                        #   in Loop: Header=BB110_199 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movl	$0, -20(%rbp)
.LBB110_201:                            # %for.cond985
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_199 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB110_203 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB110_208
# %bb.202:                              # %for.body988
                                        #   in Loop: Header=BB110_201 Depth=3
	movl	$0, -24(%rbp)
.LBB110_203:                            # %for.cond989
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_199 Depth=2
                                        #       Parent Loop BB110_201 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -24(%rbp)
	jge	.LBB110_206
# %bb.204:                              # %for.body992
                                        #   in Loop: Header=BB110_203 Depth=4
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-496(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.205:                              # %for.inc1009
                                        #   in Loop: Header=BB110_203 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB110_203
.LBB110_206:                            # %for.end1011
                                        #   in Loop: Header=BB110_201 Depth=3
	jmp	.LBB110_207
.LBB110_207:                            # %for.inc1012
                                        #   in Loop: Header=BB110_201 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB110_201
.LBB110_208:                            # %for.end1014
                                        #   in Loop: Header=BB110_199 Depth=2
	jmp	.LBB110_209
.LBB110_209:                            # %for.inc1015
                                        #   in Loop: Header=BB110_199 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_199
.LBB110_210:                            # %for.end1017
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -20(%rbp)
.LBB110_211:                            # %for.cond1018
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_213 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB110_218
# %bb.212:                              # %for.body1021
                                        #   in Loop: Header=BB110_211 Depth=2
	movl	$0, -24(%rbp)
.LBB110_213:                            # %for.cond1022
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB110_216
# %bb.214:                              # %for.body1025
                                        #   in Loop: Header=BB110_213 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-20(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.215:                              # %for.inc1038
                                        #   in Loop: Header=BB110_213 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB110_213
.LBB110_216:                            # %for.end1040
                                        #   in Loop: Header=BB110_211 Depth=2
	jmp	.LBB110_217
.LBB110_217:                            # %for.inc1041
                                        #   in Loop: Header=BB110_211 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB110_211
.LBB110_218:                            # %for.end1043
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	-116(%rbp), %eax
	movl	%eax, -96(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB110_219:                            # %if.end1044
                                        #   in Loop: Header=BB110_22 Depth=1
	jmp	.LBB110_220
.LBB110_220:                            # %if.end1045
                                        #   in Loop: Header=BB110_22 Depth=1
	jmp	.LBB110_221
.LBB110_221:                            # %if.end1046
                                        #   in Loop: Header=BB110_22 Depth=1
	jmp	.LBB110_222
.LBB110_222:                            # %if.end1047
                                        #   in Loop: Header=BB110_22 Depth=1
	jmp	.LBB110_223
.LBB110_223:                            # %for.inc1048
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB110_22
.LBB110_224:                            # %for.end1050
	movl	-60(%rbp), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-176(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-164(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB110_226
# %bb.225:                              # %cond.true1058
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB110_230
.LBB110_226:                            # %cond.false1059
	movl	-60(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jge	.LBB110_228
# %bb.227:                              # %cond.true1062
	movl	-60(%rbp), %eax
	jmp	.LBB110_229
.LBB110_228:                            # %cond.false1063
	movl	-60(%rbp), %eax
	subl	$1, %eax
.LBB110_229:                            # %cond.end1065
.LBB110_230:                            # %cond.end1067
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movl	-32(%rbp), %edx
	shll	$2, %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, 332(%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB110_318
# %bb.231:                              # %if.then1079
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB110_241
# %bb.232:                              # %if.then1082
	movl	$0, -16(%rbp)
.LBB110_233:                            # %for.cond1083
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_235 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB110_240
# %bb.234:                              # %for.body1086
                                        #   in Loop: Header=BB110_233 Depth=1
	movl	$0, -12(%rbp)
.LBB110_235:                            # %for.cond1087
                                        #   Parent Loop BB110_233 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB110_238
# %bb.236:                              # %for.body1090
                                        #   in Loop: Header=BB110_235 Depth=2
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.237:                              # %for.inc1126
                                        #   in Loop: Header=BB110_235 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_235
.LBB110_238:                            # %for.end1128
                                        #   in Loop: Header=BB110_233 Depth=1
	jmp	.LBB110_239
.LBB110_239:                            # %for.inc1129
                                        #   in Loop: Header=BB110_233 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_233
.LBB110_240:                            # %for.end1131
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	leaq	-172(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -96(%rbp)
	jmp	.LBB110_317
.LBB110_241:                            # %if.else1133
	movl	$0, -16(%rbp)
.LBB110_242:                            # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_244 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB110_249
# %bb.243:                              # %for.body1137
                                        #   in Loop: Header=BB110_242 Depth=1
	movl	$0, -12(%rbp)
.LBB110_244:                            # %for.cond1138
                                        #   Parent Loop BB110_242 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB110_247
# %bb.245:                              # %for.body1141
                                        #   in Loop: Header=BB110_244 Depth=2
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.246:                              # %for.inc1224
                                        #   in Loop: Header=BB110_244 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_244
.LBB110_247:                            # %for.end1226
                                        #   in Loop: Header=BB110_242 Depth=1
	jmp	.LBB110_248
.LBB110_248:                            # %for.inc1227
                                        #   in Loop: Header=BB110_242 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_242
.LBB110_249:                            # %for.end1229
	movl	$0, -16(%rbp)
.LBB110_250:                            # %for.cond1230
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_252 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB110_257
# %bb.251:                              # %for.body1233
                                        #   in Loop: Header=BB110_250 Depth=1
	movl	$0, -12(%rbp)
.LBB110_252:                            # %for.cond1234
                                        #   Parent Loop BB110_250 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB110_255
# %bb.253:                              # %for.body1237
                                        #   in Loop: Header=BB110_252 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.254:                              # %for.inc1247
                                        #   in Loop: Header=BB110_252 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_252
.LBB110_255:                            # %for.end1249
                                        #   in Loop: Header=BB110_250 Depth=1
	jmp	.LBB110_256
.LBB110_256:                            # %for.inc1250
                                        #   in Loop: Header=BB110_250 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_250
.LBB110_257:                            # %for.end1252
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	leaq	-172(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -96(%rbp)
	movl	$0, -16(%rbp)
.LBB110_258:                            # %for.cond1254
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_260 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB110_265
# %bb.259:                              # %for.body1257
                                        #   in Loop: Header=BB110_258 Depth=1
	movl	$0, -12(%rbp)
.LBB110_260:                            # %for.cond1258
                                        #   Parent Loop BB110_258 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB110_263
# %bb.261:                              # %for.body1261
                                        #   in Loop: Header=BB110_260 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.262:                              # %for.inc1280
                                        #   in Loop: Header=BB110_260 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_260
.LBB110_263:                            # %for.end1282
                                        #   in Loop: Header=BB110_258 Depth=1
	jmp	.LBB110_264
.LBB110_264:                            # %for.inc1283
                                        #   in Loop: Header=BB110_258 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_258
.LBB110_265:                            # %for.end1285
	movl	-32(%rbp), %esi
	addl	$4, %esi
	movl	-28(%rbp), %edx
	xorl	%edi, %edi
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%edx, %esi
	shll	$1, %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %esi
	shll	$1, %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rbx,%rax,4)
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level_temp, %rsi
	addq	%rax, %rsi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rsi,%rax,4), %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%rbx,%rax,4)
	movl	$0, -16(%rbp)
.LBB110_266:                            # %for.cond1324
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_268 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB110_273
# %bb.267:                              # %for.body1327
                                        #   in Loop: Header=BB110_266 Depth=1
	movl	$0, -12(%rbp)
.LBB110_268:                            # %for.cond1328
                                        #   Parent Loop BB110_266 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB110_271
# %bb.269:                              # %for.body1331
                                        #   in Loop: Header=BB110_268 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.270:                              # %for.inc1350
                                        #   in Loop: Header=BB110_268 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_268
.LBB110_271:                            # %for.end1352
                                        #   in Loop: Header=BB110_266 Depth=1
	jmp	.LBB110_272
.LBB110_272:                            # %for.inc1353
                                        #   in Loop: Header=BB110_266 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_266
.LBB110_273:                            # %for.end1355
	movl	-32(%rbp), %esi
	addl	$8, %esi
	movl	-28(%rbp), %edx
	movl	$1, %edi
	callq	dct_chroma4x4
	movl	%eax, %r9d
	movabsq	$dc_level, %r8
	addq	$64, %r8
	movabsq	$dc_level_temp, %rdi
	addq	$64, %rdi
	movabsq	$cbp_chroma_block, %rcx
	addq	$64, %rcx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%r9d, (%rcx,%rax,4)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%r8,%rax,4)
	movl	$0, -16(%rbp)
.LBB110_274:                            # %for.cond1394
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_276 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB110_281
# %bb.275:                              # %for.body1397
                                        #   in Loop: Header=BB110_274 Depth=1
	movl	$0, -12(%rbp)
.LBB110_276:                            # %for.cond1398
                                        #   Parent Loop BB110_274 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB110_279
# %bb.277:                              # %for.body1401
                                        #   in Loop: Header=BB110_276 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.278:                              # %for.inc1411
                                        #   in Loop: Header=BB110_276 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_276
.LBB110_279:                            # %for.end1413
                                        #   in Loop: Header=BB110_274 Depth=1
	jmp	.LBB110_280
.LBB110_280:                            # %for.inc1414
                                        #   in Loop: Header=BB110_274 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_274
.LBB110_281:                            # %for.end1416
	movl	$0, -16(%rbp)
.LBB110_282:                            # %for.cond1417
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_284 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB110_316
# %bb.283:                              # %for.body1420
                                        #   in Loop: Header=BB110_282 Depth=1
	movl	$0, -12(%rbp)
.LBB110_284:                            # %for.cond1421
                                        #   Parent Loop BB110_282 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB110_314
# %bb.285:                              # %for.body1424
                                        #   in Loop: Header=BB110_284 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -72(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -68(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB110_287
# %bb.286:                              # %cond.true1466
                                        #   in Loop: Header=BB110_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB110_288
.LBB110_287:                            # %cond.false1467
                                        #   in Loop: Header=BB110_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB110_288:                            # %cond.end1480
                                        #   in Loop: Header=BB110_284 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB110_290
# %bb.289:                              # %cond.true1484
                                        #   in Loop: Header=BB110_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB110_294
.LBB110_290:                            # %cond.false1486
                                        #   in Loop: Header=BB110_284 Depth=2
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB110_292
# %bb.291:                              # %cond.true1501
                                        #   in Loop: Header=BB110_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB110_293
.LBB110_292:                            # %cond.false1502
                                        #   in Loop: Header=BB110_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB110_293:                            # %cond.end1515
                                        #   in Loop: Header=BB110_284 Depth=2
.LBB110_294:                            # %cond.end1517
                                        #   in Loop: Header=BB110_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-60(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB110_296
# %bb.295:                              # %cond.true1540
                                        #   in Loop: Header=BB110_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB110_297
.LBB110_296:                            # %cond.false1541
                                        #   in Loop: Header=BB110_284 Depth=2
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB110_297:                            # %cond.end1551
                                        #   in Loop: Header=BB110_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB110_299
# %bb.298:                              # %cond.true1555
                                        #   in Loop: Header=BB110_284 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB110_303
.LBB110_299:                            # %cond.false1557
                                        #   in Loop: Header=BB110_284 Depth=2
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB110_301
# %bb.300:                              # %cond.true1569
                                        #   in Loop: Header=BB110_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB110_302
.LBB110_301:                            # %cond.false1570
                                        #   in Loop: Header=BB110_284 Depth=2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB110_302:                            # %cond.end1580
                                        #   in Loop: Header=BB110_284 Depth=2
.LBB110_303:                            # %cond.end1582
                                        #   in Loop: Header=BB110_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB110_305
# %bb.304:                              # %cond.true1607
                                        #   in Loop: Header=BB110_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB110_306
.LBB110_305:                            # %cond.false1608
                                        #   in Loop: Header=BB110_284 Depth=2
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB110_306:                            # %cond.end1621
                                        #   in Loop: Header=BB110_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB110_308
# %bb.307:                              # %cond.true1625
                                        #   in Loop: Header=BB110_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB110_312
.LBB110_308:                            # %cond.false1627
                                        #   in Loop: Header=BB110_284 Depth=2
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB110_310
# %bb.309:                              # %cond.true1642
                                        #   in Loop: Header=BB110_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB110_311
.LBB110_310:                            # %cond.false1643
                                        #   in Loop: Header=BB110_284 Depth=2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB110_311:                            # %cond.end1656
                                        #   in Loop: Header=BB110_284 Depth=2
.LBB110_312:                            # %cond.end1658
                                        #   in Loop: Header=BB110_284 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.313:                              # %for.inc1669
                                        #   in Loop: Header=BB110_284 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_284
.LBB110_314:                            # %for.end1671
                                        #   in Loop: Header=BB110_282 Depth=1
	jmp	.LBB110_315
.LBB110_315:                            # %for.inc1672
                                        #   in Loop: Header=BB110_282 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_282
.LBB110_316:                            # %for.end1674
	jmp	.LBB110_317
.LBB110_317:                            # %if.end1675
	jmp	.LBB110_367
.LBB110_318:                            # %if.else1676
	movl	$0, -16(%rbp)
.LBB110_319:                            # %for.cond1677
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_321 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB110_326
# %bb.320:                              # %for.body1680
                                        #   in Loop: Header=BB110_319 Depth=1
	movl	$0, -12(%rbp)
.LBB110_321:                            # %for.cond1681
                                        #   Parent Loop BB110_319 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB110_324
# %bb.322:                              # %for.body1684
                                        #   in Loop: Header=BB110_321 Depth=2
	movq	cofAC4x4, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.323:                              # %for.inc1698
                                        #   in Loop: Header=BB110_321 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_321
.LBB110_324:                            # %for.end1700
                                        #   in Loop: Header=BB110_319 Depth=1
	jmp	.LBB110_325
.LBB110_325:                            # %for.inc1701
                                        #   in Loop: Header=BB110_319 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_319
.LBB110_326:                            # %for.end1703
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB110_344
# %bb.327:                              # %if.then1706
	movl	$0, -16(%rbp)
.LBB110_328:                            # %for.cond1707
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_330 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB110_335
# %bb.329:                              # %for.body1710
                                        #   in Loop: Header=BB110_328 Depth=1
	movl	$0, -12(%rbp)
.LBB110_330:                            # %for.cond1711
                                        #   Parent Loop BB110_328 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB110_333
# %bb.331:                              # %for.body1714
                                        #   in Loop: Header=BB110_330 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$72, %rax, %rax
	movabsq	$cofAC4x4_chroma, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-32(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.332:                              # %for.inc1729
                                        #   in Loop: Header=BB110_330 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_330
.LBB110_333:                            # %for.end1731
                                        #   in Loop: Header=BB110_328 Depth=1
	jmp	.LBB110_334
.LBB110_334:                            # %for.inc1732
                                        #   in Loop: Header=BB110_328 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_328
.LBB110_335:                            # %for.end1734
	movl	$0, -16(%rbp)
.LBB110_336:                            # %for.cond1735
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_338 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB110_343
# %bb.337:                              # %for.body1738
                                        #   in Loop: Header=BB110_336 Depth=1
	movl	$0, -12(%rbp)
.LBB110_338:                            # %for.cond1739
                                        #   Parent Loop BB110_336 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB110_341
# %bb.339:                              # %for.body1742
                                        #   in Loop: Header=BB110_338 Depth=2
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-32(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.340:                              # %for.inc1757
                                        #   in Loop: Header=BB110_338 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_338
.LBB110_341:                            # %for.end1759
                                        #   in Loop: Header=BB110_336 Depth=1
	jmp	.LBB110_342
.LBB110_342:                            # %for.inc1760
                                        #   in Loop: Header=BB110_336 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_336
.LBB110_343:                            # %for.end1762
	jmp	.LBB110_344
.LBB110_344:                            # %if.end1763
	movl	$0, -20(%rbp)
.LBB110_345:                            # %for.cond1764
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_347 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB110_352
# %bb.346:                              # %for.body1767
                                        #   in Loop: Header=BB110_345 Depth=1
	movl	$0, -24(%rbp)
.LBB110_347:                            # %for.cond1768
                                        #   Parent Loop BB110_345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB110_350
# %bb.348:                              # %for.body1771
                                        #   in Loop: Header=BB110_347 Depth=2
	movslq	-20(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.349:                              # %for.inc1798
                                        #   in Loop: Header=BB110_347 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB110_347
.LBB110_350:                            # %for.end1800
                                        #   in Loop: Header=BB110_345 Depth=1
	jmp	.LBB110_351
.LBB110_351:                            # %for.inc1801
                                        #   in Loop: Header=BB110_345 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB110_345
.LBB110_352:                            # %for.end1803
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB110_366
# %bb.353:                              # %if.then1806
	movl	$0, -12(%rbp)
.LBB110_354:                            # %for.cond1807
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_356 Depth 2
                                        #       Child Loop BB110_358 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB110_365
# %bb.355:                              # %for.body1810
                                        #   in Loop: Header=BB110_354 Depth=1
	movl	$0, -20(%rbp)
.LBB110_356:                            # %for.cond1811
                                        #   Parent Loop BB110_354 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_358 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB110_363
# %bb.357:                              # %for.body1814
                                        #   in Loop: Header=BB110_356 Depth=2
	movl	$0, -24(%rbp)
.LBB110_358:                            # %for.cond1815
                                        #   Parent Loop BB110_354 Depth=1
                                        #     Parent Loop BB110_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB110_361
# %bb.359:                              # %for.body1818
                                        #   in Loop: Header=BB110_358 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	leaq	-496(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.360:                              # %for.inc1835
                                        #   in Loop: Header=BB110_358 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB110_358
.LBB110_361:                            # %for.end1837
                                        #   in Loop: Header=BB110_356 Depth=2
	jmp	.LBB110_362
.LBB110_362:                            # %for.inc1838
                                        #   in Loop: Header=BB110_356 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB110_356
.LBB110_363:                            # %for.end1840
                                        #   in Loop: Header=BB110_354 Depth=1
	jmp	.LBB110_364
.LBB110_364:                            # %for.inc1841
                                        #   in Loop: Header=BB110_354 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_354
.LBB110_365:                            # %for.end1843
	jmp	.LBB110_366
.LBB110_366:                            # %if.end1844
	jmp	.LBB110_367
.LBB110_367:                            # %if.end1845
	movl	-96(%rbp), %ebx
	cmpl	$753469079, -184(%rbp)  # imm = 0x2CE90697
	jne	.LBB110_369
.LBB110_368:
	movl	%ebx, %eax
	addq	$488, %rsp              # imm = 0x1E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB110_369:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB110_368
.Lfunc_end110:
	.size	Mode_Decision_for_4x4IntraBlocks.81, .Lfunc_end110-Mode_Decision_for_4x4IntraBlocks.81
	.cfi_endproc
                                        # -- End function
	.globl	GetBestTransformP8x8.82 # -- Begin function GetBestTransformP8x8.82
	.p2align	4, 0x90
	.type	GetBestTransformP8x8.82,@function
GetBestTransformP8x8.82:                # @GetBestTransformP8x8.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$584, %rsp              # imm = 0x248
	.cfi_offset %rbx, -24
	movl	$1435580439, -64(%rbp)  # imm = 0x55913817
	movl	$0, -36(%rbp)
	movl	$0, -40(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB111_2
# %bb.1:                                # %if.then
	movl	$1, -44(%rbp)
	jmp	.LBB111_25
.LBB111_2:                              # %if.end
	movl	$0, -28(%rbp)
.LBB111_3:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_5 Depth 2
                                        #       Child Loop BB111_7 Depth 3
                                        #         Child Loop BB111_9 Depth 4
                                        #           Child Loop BB111_11 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB111_22
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB111_3 Depth=1
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -48(%rbp)
	movl	$0, -32(%rbp)
	movl	-56(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB111_5:                              # %for.cond3
                                        #   Parent Loop BB111_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB111_7 Depth 3
                                        #         Child Loop BB111_9 Depth 4
                                        #           Child Loop BB111_11 Depth 5
	movl	-24(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB111_20
# %bb.6:                                # %for.body5
                                        #   in Loop: Header=BB111_5 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB111_7:                              # %for.cond7
                                        #   Parent Loop BB111_3 Depth=1
                                        #     Parent Loop BB111_5 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB111_9 Depth 4
                                        #           Child Loop BB111_11 Depth 5
	movl	-20(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB111_18
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB111_7 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-32(%rbp), %rax
	shlq	$2, %rax
	leaq	-336(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB111_9:                              # %for.cond12
                                        #   Parent Loop BB111_3 Depth=1
                                        #     Parent Loop BB111_5 Depth=2
                                        #       Parent Loop BB111_7 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB111_11 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB111_16
# %bb.10:                               # %for.body14
                                        #   in Loop: Header=BB111_9 Depth=4
	movl	$0, -16(%rbp)
.LBB111_11:                             # %for.cond15
                                        #   Parent Loop BB111_3 Depth=1
                                        #     Parent Loop BB111_5 Depth=2
                                        #       Parent Loop BB111_7 Depth=3
                                        #         Parent Loop BB111_9 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB111_14
# %bb.12:                               # %for.body17
                                        #   in Loop: Header=BB111_11 Depth=5
	movq	imgY_org, %rax
	movl	-60(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
	movq	imgY_org, %rax
	movl	-60(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB111_11 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB111_11
.LBB111_14:                             # %for.end
                                        #   in Loop: Header=BB111_9 Depth=4
	jmp	.LBB111_15
.LBB111_15:                             # %for.inc51
                                        #   in Loop: Header=BB111_9 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_9
.LBB111_16:                             # %for.end53
                                        #   in Loop: Header=BB111_7 Depth=3
	movq	-72(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.17:                               # %for.inc55
                                        #   in Loop: Header=BB111_7 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB111_7
.LBB111_18:                             # %for.end57
                                        #   in Loop: Header=BB111_5 Depth=2
	jmp	.LBB111_19
.LBB111_19:                             # %for.inc58
                                        #   in Loop: Header=BB111_5 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB111_5
.LBB111_20:                             # %for.end60
                                        #   in Loop: Header=BB111_3 Depth=1
	leaq	-592(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.21:                               # %for.inc64
                                        #   in Loop: Header=BB111_3 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB111_3
.LBB111_22:                             # %for.end66
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB111_24
# %bb.23:                               # %if.then69
	movl	$1, -44(%rbp)
	jmp	.LBB111_25
.LBB111_24:                             # %if.else
	movl	$0, -44(%rbp)
.LBB111_25:                             # %return
	movl	-44(%rbp), %ebx
	cmpl	$1435580439, -64(%rbp)  # imm = 0x55913817
	jne	.LBB111_27
.LBB111_26:
	movl	%ebx, %eax
	addq	$584, %rsp              # imm = 0x248
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB111_27:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB111_26
.Lfunc_end111:
	.size	GetBestTransformP8x8.82, .Lfunc_end111-GetBestTransformP8x8.82
	.cfi_endproc
                                        # -- End function
	.globl	set_mbaff_parameters.83 # -- Begin function set_mbaff_parameters.83
	.p2align	4, 0x90
	.type	set_mbaff_parameters.83,@function
set_mbaff_parameters.83:                # @set_mbaff_parameters.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1692022268, -32(%rbp)  # imm = 0x64DA35FC
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB112_2
# %bb.1:                                # %if.then
	jmp	.LBB112_82
.LBB112_2:                              # %if.end
	movl	$0, -8(%rbp)
.LBB112_3:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_5 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB112_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB112_3 Depth=1
	movl	$0, -4(%rbp)
.LBB112_5:                              # %for.cond3
                                        #   Parent Loop BB112_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB112_8
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB112_5 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB112_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_5
.LBB112_8:                              # %for.end
                                        #   in Loop: Header=BB112_3 Depth=1
	jmp	.LBB112_9
.LBB112_9:                              # %for.inc17
                                        #   in Loop: Header=BB112_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_3
.LBB112_10:                             # %for.end19
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB112_20
# %bb.11:                               # %if.then22
	movl	$0, -8(%rbp)
.LBB112_12:                             # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_14 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB112_19
# %bb.13:                               # %for.body26
                                        #   in Loop: Header=BB112_12 Depth=1
	movl	$0, -4(%rbp)
.LBB112_14:                             # %for.cond27
                                        #   Parent Loop BB112_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB112_17
# %bb.15:                               # %for.body30
                                        #   in Loop: Header=BB112_14 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.16:                               # %for.inc58
                                        #   in Loop: Header=BB112_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_14
.LBB112_17:                             # %for.end60
                                        #   in Loop: Header=BB112_12 Depth=1
	jmp	.LBB112_18
.LBB112_18:                             # %for.inc61
                                        #   in Loop: Header=BB112_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_12
.LBB112_19:                             # %for.end63
	jmp	.LBB112_20
.LBB112_20:                             # %if.end64
	movl	-28(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	rdopt, %rax
	cmpl	$0, 3096(%rax)
	jne	.LBB112_23
# %bb.21:                               # %land.lhs.true
	cmpl	$0, -28(%rbp)
	je	.LBB112_23
# %bb.22:                               # %if.then76
	movl	$0, -28(%rbp)
	movq	rdopt, %rax
	movl	$0, 3224(%rax)
.LBB112_23:                             # %if.end78
	movl	$0, -4(%rbp)
.LBB112_24:                             # %for.cond79
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_26 Depth 2
                                        #       Child Loop BB112_28 Depth 3
                                        #         Child Loop BB112_30 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB112_39
# %bb.25:                               # %for.body83
                                        #   in Loop: Header=BB112_24 Depth=1
	movl	$0, -8(%rbp)
.LBB112_26:                             # %for.cond84
                                        #   Parent Loop BB112_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB112_28 Depth 3
                                        #         Child Loop BB112_30 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB112_37
# %bb.27:                               # %for.body87
                                        #   in Loop: Header=BB112_26 Depth=2
	movl	$0, -12(%rbp)
.LBB112_28:                             # %for.cond88
                                        #   Parent Loop BB112_24 Depth=1
                                        #     Parent Loop BB112_26 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB112_30 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB112_35
# %bb.29:                               # %for.body91
                                        #   in Loop: Header=BB112_28 Depth=3
	movl	$0, -16(%rbp)
.LBB112_30:                             # %for.cond92
                                        #   Parent Loop BB112_24 Depth=1
                                        #     Parent Loop BB112_26 Depth=2
                                        #       Parent Loop BB112_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB112_33
# %bb.31:                               # %for.body95
                                        #   in Loop: Header=BB112_30 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc113
                                        #   in Loop: Header=BB112_30 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_30
.LBB112_33:                             # %for.end115
                                        #   in Loop: Header=BB112_28 Depth=3
	jmp	.LBB112_34
.LBB112_34:                             # %for.inc116
                                        #   in Loop: Header=BB112_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_28
.LBB112_35:                             # %for.end118
                                        #   in Loop: Header=BB112_26 Depth=2
	jmp	.LBB112_36
.LBB112_36:                             # %for.inc119
                                        #   in Loop: Header=BB112_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_26
.LBB112_37:                             # %for.end121
                                        #   in Loop: Header=BB112_24 Depth=1
	jmp	.LBB112_38
.LBB112_38:                             # %for.inc122
                                        #   in Loop: Header=BB112_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_24
.LBB112_39:                             # %for.end124
	movl	$0, -4(%rbp)
.LBB112_40:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_42 Depth 2
                                        #       Child Loop BB112_44 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB112_51
# %bb.41:                               # %for.body128
                                        #   in Loop: Header=BB112_40 Depth=1
	movl	$0, -12(%rbp)
.LBB112_42:                             # %for.cond129
                                        #   Parent Loop BB112_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB112_44 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB112_49
# %bb.43:                               # %for.body132
                                        #   in Loop: Header=BB112_42 Depth=2
	movl	$0, -16(%rbp)
.LBB112_44:                             # %for.cond133
                                        #   Parent Loop BB112_40 Depth=1
                                        #     Parent Loop BB112_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB112_47
# %bb.45:                               # %for.body136
                                        #   in Loop: Header=BB112_44 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.46:                               # %for.inc150
                                        #   in Loop: Header=BB112_44 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_44
.LBB112_47:                             # %for.end152
                                        #   in Loop: Header=BB112_42 Depth=2
	jmp	.LBB112_48
.LBB112_48:                             # %for.inc153
                                        #   in Loop: Header=BB112_42 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_42
.LBB112_49:                             # %for.end155
                                        #   in Loop: Header=BB112_40 Depth=1
	jmp	.LBB112_50
.LBB112_50:                             # %for.inc156
                                        #   in Loop: Header=BB112_40 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_40
.LBB112_51:                             # %for.end158
	movl	$0, -4(%rbp)
.LBB112_52:                             # %for.cond159
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB112_55
# %bb.53:                               # %for.body162
                                        #   in Loop: Header=BB112_52 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
# %bb.54:                               # %for.inc173
                                        #   in Loop: Header=BB112_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_52
.LBB112_55:                             # %for.end175
	movl	$0, -8(%rbp)
.LBB112_56:                             # %for.cond176
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_58 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB112_63
# %bb.57:                               # %for.body179
                                        #   in Loop: Header=BB112_56 Depth=1
	movl	$0, -4(%rbp)
.LBB112_58:                             # %for.cond180
                                        #   Parent Loop BB112_56 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB112_61
# %bb.59:                               # %for.body183
                                        #   in Loop: Header=BB112_58 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc196
                                        #   in Loop: Header=BB112_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_58
.LBB112_61:                             # %for.end198
                                        #   in Loop: Header=BB112_56 Depth=1
	jmp	.LBB112_62
.LBB112_62:                             # %for.inc199
                                        #   in Loop: Header=BB112_56 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_56
.LBB112_63:                             # %for.end201
	cmpl	$0, -36(%rbp)
	je	.LBB112_73
# %bb.64:                               # %if.then203
	movl	$0, -8(%rbp)
.LBB112_65:                             # %for.cond204
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_67 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB112_72
# %bb.66:                               # %for.body207
                                        #   in Loop: Header=BB112_65 Depth=1
	movl	$0, -4(%rbp)
.LBB112_67:                             # %for.cond208
                                        #   Parent Loop BB112_65 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB112_70
# %bb.68:                               # %for.body211
                                        #   in Loop: Header=BB112_67 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc228
                                        #   in Loop: Header=BB112_67 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_67
.LBB112_70:                             # %for.end230
                                        #   in Loop: Header=BB112_65 Depth=1
	jmp	.LBB112_71
.LBB112_71:                             # %for.inc231
                                        #   in Loop: Header=BB112_65 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_65
.LBB112_72:                             # %for.end233
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3100(%rcx)
.LBB112_73:                             # %if.end235
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB112_74:                             # %for.cond237
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_76 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB112_81
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB112_74 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB112_76:                             # %for.cond244
                                        #   Parent Loop BB112_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB112_79
# %bb.77:                               # %for.body249
                                        #   in Loop: Header=BB112_76 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.78:                               # %for.inc264
                                        #   in Loop: Header=BB112_76 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_76
.LBB112_79:                             # %for.end267
                                        #   in Loop: Header=BB112_74 Depth=1
	jmp	.LBB112_80
.LBB112_80:                             # %for.inc268
                                        #   in Loop: Header=BB112_74 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_74
.LBB112_81:                             # %for.end270.loopexit
	jmp	.LBB112_82
.LBB112_82:                             # %for.end270
	cmpl	$1692022268, -32(%rbp)  # imm = 0x64DA35FC
	jne	.LBB112_84
.LBB112_83:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB112_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB112_83
.Lfunc_end112:
	.size	set_mbaff_parameters.83, .Lfunc_end112-set_mbaff_parameters.83
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4Blocks_Chroma.84 # -- Begin function RDCost_for_4x4Blocks_Chroma.84
	.p2align	4, 0x90
	.type	RDCost_for_4x4Blocks_Chroma.84,@function
RDCost_for_4x4Blocks_Chroma.84:         # @RDCost_for_4x4Blocks_Chroma.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$667146600, -60(%rbp)   # imm = 0x27C3D968
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -56(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	cmpl	$7, -16(%rbp)
	jle	.LBB113_2
# %bb.1:                                # %if.then
	movl	$1, -32(%rbp)
	jmp	.LBB113_3
.LBB113_2:                              # %if.else
	movl	$0, -32(%rbp)
.LBB113_3:                              # %if.end
	movl	-56(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-32(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-32(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB113_5
# %bb.4:                                # %if.then21
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	shll	$4, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %edi
	shll	$1, %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %edi
	orl	%edi, %ecx
	movl	$7, %edi
	movl	%r8d, %edx
	callq	writeCoeff4x4_CAVLC
	movl	%eax, -36(%rbp)
	jmp	.LBB113_18
.LBB113_5:                              # %if.else31
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$1, -52(%rbp)
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rax
	movl	%edx, 72(%rax)
	movl	$0, -28(%rbp)
.LBB113_6:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$17, -28(%rbp)
	jge	.LBB113_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB113_6 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB113_8:                              # %land.end
                                        #   in Loop: Header=BB113_6 Depth=1
	testb	$1, %al
	jne	.LBB113_9
	jmp	.LBB113_17
.LBB113_9:                              # %for.body
                                        #   in Loop: Header=BB113_6 Depth=1
	movq	-96(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -116(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB113_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB113_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB113_12
.LBB113_11:                             # %if.else54
                                        #   in Loop: Header=BB113_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB113_12:                             # %if.end55
                                        #   in Loop: Header=BB113_6 Depth=1
	movq	-24(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-24(%rbp), %rax
	movl	$10, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB113_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB113_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB113_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB113_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB113_15:                             # %lor.end
                                        #   in Loop: Header=BB113_6 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-88(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.16:                               # %for.inc
                                        #   in Loop: Header=BB113_6 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB113_6
.LBB113_17:                             # %for.end
	jmp	.LBB113_18
.LBB113_18:                             # %if.end73
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	-36(%rbp), %ebx
	cmpl	$667146600, -60(%rbp)   # imm = 0x27C3D968
	jne	.LBB113_20
.LBB113_19:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB113_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB113_19
.Lfunc_end113:
	.size	RDCost_for_4x4Blocks_Chroma.84, .Lfunc_end113-RDCost_for_4x4Blocks_Chroma.84
	.cfi_endproc
                                        # -- End function
	.globl	StoreNewMotionVectorsBlock8x8.85 # -- Begin function StoreNewMotionVectorsBlock8x8.85
	.p2align	4, 0x90
	.type	StoreNewMotionVectorsBlock8x8.85,@function
StoreNewMotionVectorsBlock8x8.85:       # @StoreNewMotionVectorsBlock8x8.85
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$2137969335, -72(%rbp)  # imm = 0x7F6ED2B7
	movl	%edi, -12(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -44(%rbp)
	movl	%r9d, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -24(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -40(%rbp)
	jge	.LBB114_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB114_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB114_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB114_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB114_4:                              # %for.cond6
                                        #   Parent Loop BB114_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB114_7
# %bb.5:                                # %for.body8
                                        #   in Loop: Header=BB114_4 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	$0, 2(%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	$0, 2(%rax,%rcx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB114_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_4
.LBB114_7:                              # %for.end
                                        #   in Loop: Header=BB114_2 Depth=1
	jmp	.LBB114_8
.LBB114_8:                              # %for.inc39
                                        #   in Loop: Header=BB114_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_2
.LBB114_9:                              # %for.end41
	jmp	.LBB114_61
.LBB114_10:                             # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB114_20
# %bb.11:                               # %if.then42
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB114_12:                             # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_14 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB114_19
# %bb.13:                               # %for.body45
                                        #   in Loop: Header=BB114_12 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB114_14:                             # %for.cond46
                                        #   Parent Loop BB114_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB114_17
# %bb.15:                               # %for.body48
                                        #   in Loop: Header=BB114_14 Depth=2
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.16:                               # %for.inc117
                                        #   in Loop: Header=BB114_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_14
.LBB114_17:                             # %for.end119
                                        #   in Loop: Header=BB114_12 Depth=1
	jmp	.LBB114_18
.LBB114_18:                             # %for.inc120
                                        #   in Loop: Header=BB114_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_12
.LBB114_19:                             # %for.end122
	jmp	.LBB114_61
.LBB114_20:                             # %if.else
	cmpl	$0, -40(%rbp)
	je	.LBB114_22
# %bb.21:                               # %lor.lhs.false
	cmpl	$2, -40(%rbp)
	jne	.LBB114_31
.LBB114_22:                             # %if.then125
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB114_23:                             # %for.cond126
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_25 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB114_30
# %bb.24:                               # %for.body128
                                        #   in Loop: Header=BB114_23 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB114_25:                             # %for.cond129
                                        #   Parent Loop BB114_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB114_28
# %bb.26:                               # %for.body131
                                        #   in Loop: Header=BB114_25 Depth=2
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.27:                               # %for.inc204
                                        #   in Loop: Header=BB114_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_25
.LBB114_28:                             # %for.end206
                                        #   in Loop: Header=BB114_23 Depth=1
	jmp	.LBB114_29
.LBB114_29:                             # %for.inc207
                                        #   in Loop: Header=BB114_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_23
.LBB114_30:                             # %for.end209
	jmp	.LBB114_40
.LBB114_31:                             # %if.else210
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB114_32:                             # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_34 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB114_39
# %bb.33:                               # %for.body213
                                        #   in Loop: Header=BB114_32 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB114_34:                             # %for.cond214
                                        #   Parent Loop BB114_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB114_37
# %bb.35:                               # %for.body216
                                        #   in Loop: Header=BB114_34 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.36:                               # %for.inc233
                                        #   in Loop: Header=BB114_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_34
.LBB114_37:                             # %for.end235
                                        #   in Loop: Header=BB114_32 Depth=1
	jmp	.LBB114_38
.LBB114_38:                             # %for.inc236
                                        #   in Loop: Header=BB114_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_32
.LBB114_39:                             # %for.end238
	jmp	.LBB114_40
.LBB114_40:                             # %if.end239
	cmpl	$1, -40(%rbp)
	je	.LBB114_42
# %bb.41:                               # %lor.lhs.false241
	cmpl	$2, -40(%rbp)
	jne	.LBB114_51
.LBB114_42:                             # %if.then243
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB114_43:                             # %for.cond244
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_45 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB114_50
# %bb.44:                               # %for.body246
                                        #   in Loop: Header=BB114_43 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB114_45:                             # %for.cond247
                                        #   Parent Loop BB114_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB114_48
# %bb.46:                               # %for.body249
                                        #   in Loop: Header=BB114_45 Depth=2
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.47:                               # %for.inc322
                                        #   in Loop: Header=BB114_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_45
.LBB114_48:                             # %for.end324
                                        #   in Loop: Header=BB114_43 Depth=1
	jmp	.LBB114_49
.LBB114_49:                             # %for.inc325
                                        #   in Loop: Header=BB114_43 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_43
.LBB114_50:                             # %for.end327
	jmp	.LBB114_60
.LBB114_51:                             # %if.else328
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB114_52:                             # %for.cond329
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB114_59
# %bb.53:                               # %for.body331
                                        #   in Loop: Header=BB114_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB114_54:                             # %for.cond332
                                        #   Parent Loop BB114_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB114_57
# %bb.55:                               # %for.body334
                                        #   in Loop: Header=BB114_54 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	addq	$64, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.56:                               # %for.inc351
                                        #   in Loop: Header=BB114_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_54
.LBB114_57:                             # %for.end353
                                        #   in Loop: Header=BB114_52 Depth=1
	jmp	.LBB114_58
.LBB114_58:                             # %for.inc354
                                        #   in Loop: Header=BB114_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_52
.LBB114_59:                             # %for.end356
	jmp	.LBB114_60
.LBB114_60:                             # %if.end357
	jmp	.LBB114_61
.LBB114_61:                             # %if.end358
	cmpl	$2137969335, -72(%rbp)  # imm = 0x7F6ED2B7
	jne	.LBB114_63
.LBB114_62:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB114_63:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB114_62
.Lfunc_end114:
	.size	StoreNewMotionVectorsBlock8x8.85, .Lfunc_end114-StoreNewMotionVectorsBlock8x8.85
	.cfi_endproc
                                        # -- End function
	.globl	SetCoeffAndReconstruction8x8.86 # -- Begin function SetCoeffAndReconstruction8x8.86
	.p2align	4, 0x90
	.type	SetCoeffAndReconstruction8x8.86,@function
SetCoeffAndReconstruction8x8.86:        # @SetCoeffAndReconstruction8x8.86
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1640342252, -40(%rbp)  # imm = 0x61C5A2EC
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB115_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB115_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB115_4
.LBB115_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB115_4
.LBB115_4:                              # %cond.end
	movl	%ecx, -28(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB115_104
# %bb.5:                                # %if.then
	movl	$0, -4(%rbp)
.LBB115_6:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB115_9
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB115_6 Depth=1
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB115_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_6
.LBB115_9:                              # %for.end
	cmpl	$0, -32(%rbp)
	je	.LBB115_19
# %bb.10:                               # %if.then15
	movl	$0, -8(%rbp)
.LBB115_11:                             # %for.cond16
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB115_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB115_11 Depth=1
	movl	$0, -4(%rbp)
.LBB115_13:                             # %for.cond20
                                        #   Parent Loop BB115_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB115_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB115_13 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	movw	part8x8bwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.15:                               # %for.inc50
                                        #   in Loop: Header=BB115_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_13
.LBB115_16:                             # %for.end52
                                        #   in Loop: Header=BB115_11 Depth=1
	jmp	.LBB115_17
.LBB115_17:                             # %for.inc53
                                        #   in Loop: Header=BB115_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_11
.LBB115_18:                             # %for.end55
	jmp	.LBB115_28
.LBB115_19:                             # %if.else
	movl	$0, -8(%rbp)
.LBB115_20:                             # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_22 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB115_27
# %bb.21:                               # %for.body59
                                        #   in Loop: Header=BB115_20 Depth=1
	movl	$0, -4(%rbp)
.LBB115_22:                             # %for.cond60
                                        #   Parent Loop BB115_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB115_25
# %bb.23:                               # %for.body63
                                        #   in Loop: Header=BB115_22 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.24:                               # %for.inc84
                                        #   in Loop: Header=BB115_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_22
.LBB115_25:                             # %for.end86
                                        #   in Loop: Header=BB115_20 Depth=1
	jmp	.LBB115_26
.LBB115_26:                             # %for.inc87
                                        #   in Loop: Header=BB115_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_20
.LBB115_27:                             # %for.end89
	jmp	.LBB115_28
.LBB115_28:                             # %if.end
	movl	$0, -8(%rbp)
.LBB115_29:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_31 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB115_39
# %bb.30:                               # %for.body93
                                        #   in Loop: Header=BB115_29 Depth=1
	movl	$0, -4(%rbp)
.LBB115_31:                             # %for.cond94
                                        #   Parent Loop BB115_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB115_37
# %bb.32:                               # %for.body97
                                        #   in Loop: Header=BB115_31 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB115_34
# %bb.33:                               # %cond.true111
                                        #   in Loop: Header=BB115_31 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB115_35
.LBB115_34:                             # %cond.false127
                                        #   in Loop: Header=BB115_31 Depth=2
	movq	$-1, %rax
	jmp	.LBB115_35
.LBB115_35:                             # %cond.end128
                                        #   in Loop: Header=BB115_31 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.36:                               # %for.inc139
                                        #   in Loop: Header=BB115_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_31
.LBB115_37:                             # %for.end141
                                        #   in Loop: Header=BB115_29 Depth=1
	jmp	.LBB115_38
.LBB115_38:                             # %for.inc142
                                        #   in Loop: Header=BB115_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_29
.LBB115_39:                             # %for.end144
	cmpl	$0, -32(%rbp)
	je	.LBB115_52
# %bb.40:                               # %if.then146
	movl	$0, -8(%rbp)
.LBB115_41:                             # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_43 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB115_51
# %bb.42:                               # %for.body150
                                        #   in Loop: Header=BB115_41 Depth=1
	movl	$0, -4(%rbp)
.LBB115_43:                             # %for.cond151
                                        #   Parent Loop BB115_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB115_49
# %bb.44:                               # %for.body154
                                        #   in Loop: Header=BB115_43 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB115_46
# %bb.45:                               # %cond.true168
                                        #   in Loop: Header=BB115_43 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB115_47
.LBB115_46:                             # %cond.false185
                                        #   in Loop: Header=BB115_43 Depth=2
	movq	$-1, %rax
	jmp	.LBB115_47
.LBB115_47:                             # %cond.end186
                                        #   in Loop: Header=BB115_43 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.48:                               # %for.inc198
                                        #   in Loop: Header=BB115_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_43
.LBB115_49:                             # %for.end200
                                        #   in Loop: Header=BB115_41 Depth=1
	jmp	.LBB115_50
.LBB115_50:                             # %for.inc201
                                        #   in Loop: Header=BB115_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_41
.LBB115_51:                             # %for.end203
	jmp	.LBB115_52
.LBB115_52:                             # %if.end204
	movl	$1, %edi
	callq	StoreMV8x8
	xorl	%edi, %edi
	callq	RestoreMV8x8
	movl	$0, -16(%rbp)
.LBB115_53:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_55 Depth 2
                                        #       Child Loop BB115_57 Depth 3
                                        #         Child Loop BB115_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB115_68
# %bb.54:                               # %for.body208
                                        #   in Loop: Header=BB115_53 Depth=1
	movl	$0, -12(%rbp)
.LBB115_55:                             # %for.cond209
                                        #   Parent Loop BB115_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB115_57 Depth 3
                                        #         Child Loop BB115_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB115_66
# %bb.56:                               # %for.body212
                                        #   in Loop: Header=BB115_55 Depth=2
	movl	$0, -8(%rbp)
.LBB115_57:                             # %for.cond213
                                        #   Parent Loop BB115_53 Depth=1
                                        #     Parent Loop BB115_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB115_59 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB115_64
# %bb.58:                               # %for.body216
                                        #   in Loop: Header=BB115_57 Depth=3
	movl	$0, -4(%rbp)
.LBB115_59:                             # %for.cond217
                                        #   Parent Loop BB115_53 Depth=1
                                        #     Parent Loop BB115_55 Depth=2
                                        #       Parent Loop BB115_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB115_62
# %bb.60:                               # %for.body220
                                        #   in Loop: Header=BB115_59 Depth=4
	movq	cofAC_8x8ts, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc237
                                        #   in Loop: Header=BB115_59 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_59
.LBB115_62:                             # %for.end239
                                        #   in Loop: Header=BB115_57 Depth=3
	jmp	.LBB115_63
.LBB115_63:                             # %for.inc240
                                        #   in Loop: Header=BB115_57 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_57
.LBB115_64:                             # %for.end242
                                        #   in Loop: Header=BB115_55 Depth=2
	jmp	.LBB115_65
.LBB115_65:                             # %for.inc243
                                        #   in Loop: Header=BB115_55 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_55
.LBB115_66:                             # %for.end245
                                        #   in Loop: Header=BB115_53 Depth=1
	jmp	.LBB115_67
.LBB115_67:                             # %for.inc246
                                        #   in Loop: Header=BB115_53 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_53
.LBB115_68:                             # %for.end248
	cmpl	$5, cnt_nonz8_8x8ts
	jg	.LBB115_83
# %bb.69:                               # %land.lhs.true251
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB115_71
# %bb.70:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB115_83
.LBB115_71:                             # %if.then257
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB115_72:                             # %for.cond258
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_74 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB115_82
# %bb.73:                               # %for.body261
                                        #   in Loop: Header=BB115_72 Depth=1
	movl	$0, -4(%rbp)
.LBB115_74:                             # %for.cond262
                                        #   Parent Loop BB115_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB115_80
# %bb.75:                               # %for.body265
                                        #   in Loop: Header=BB115_74 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB115_77
# %bb.76:                               # %if.then267
                                        #   in Loop: Header=BB115_74 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB115_78
.LBB115_77:                             # %if.else278
                                        #   in Loop: Header=BB115_74 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB115_78:                             # %if.end283
                                        #   in Loop: Header=BB115_74 Depth=2
	jmp	.LBB115_79
.LBB115_79:                             # %for.inc284
                                        #   in Loop: Header=BB115_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_74
.LBB115_80:                             # %for.end286
                                        #   in Loop: Header=BB115_72 Depth=1
	jmp	.LBB115_81
.LBB115_81:                             # %for.inc287
                                        #   in Loop: Header=BB115_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_72
.LBB115_82:                             # %for.end289
	jmp	.LBB115_95
.LBB115_83:                             # %if.else290
	movl	cbp8_8x8ts, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk8_8x8ts, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB115_84:                             # %for.cond293
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_86 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB115_94
# %bb.85:                               # %for.body296
                                        #   in Loop: Header=BB115_84 Depth=1
	movl	$0, -4(%rbp)
.LBB115_86:                             # %for.cond297
                                        #   Parent Loop BB115_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB115_92
# %bb.87:                               # %for.body300
                                        #   in Loop: Header=BB115_86 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB115_89
# %bb.88:                               # %if.then303
                                        #   in Loop: Header=BB115_86 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB115_90
.LBB115_89:                             # %if.else317
                                        #   in Loop: Header=BB115_86 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB115_90:                             # %if.end326
                                        #   in Loop: Header=BB115_86 Depth=2
	jmp	.LBB115_91
.LBB115_91:                             # %for.inc327
                                        #   in Loop: Header=BB115_86 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_86
.LBB115_92:                             # %for.end329
                                        #   in Loop: Header=BB115_84 Depth=1
	jmp	.LBB115_93
.LBB115_93:                             # %for.inc330
                                        #   in Loop: Header=BB115_84 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_84
.LBB115_94:                             # %for.end332
	jmp	.LBB115_95
.LBB115_95:                             # %if.end333
	movl	$0, -8(%rbp)
.LBB115_96:                             # %for.cond334
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_98 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB115_103
# %bb.97:                               # %for.body337
                                        #   in Loop: Header=BB115_96 Depth=1
	movl	$0, -4(%rbp)
.LBB115_98:                             # %for.cond338
                                        #   Parent Loop BB115_96 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB115_101
# %bb.99:                               # %for.body341
                                        #   in Loop: Header=BB115_98 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.100:                              # %for.inc382
                                        #   in Loop: Header=BB115_98 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_98
.LBB115_101:                            # %for.end384
                                        #   in Loop: Header=BB115_96 Depth=1
	jmp	.LBB115_102
.LBB115_102:                            # %for.inc385
                                        #   in Loop: Header=BB115_96 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_96
.LBB115_103:                            # %for.end387
	jmp	.LBB115_157
.LBB115_104:                            # %if.else388
	movl	$0, -16(%rbp)
.LBB115_105:                            # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_107 Depth 2
                                        #       Child Loop BB115_109 Depth 3
                                        #         Child Loop BB115_111 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_120
# %bb.106:                              # %for.body393
                                        #   in Loop: Header=BB115_105 Depth=1
	movl	$0, -12(%rbp)
.LBB115_107:                            # %for.cond394
                                        #   Parent Loop BB115_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB115_109 Depth 3
                                        #         Child Loop BB115_111 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB115_118
# %bb.108:                              # %for.body397
                                        #   in Loop: Header=BB115_107 Depth=2
	movl	$0, -8(%rbp)
.LBB115_109:                            # %for.cond398
                                        #   Parent Loop BB115_105 Depth=1
                                        #     Parent Loop BB115_107 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB115_111 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB115_116
# %bb.110:                              # %for.body401
                                        #   in Loop: Header=BB115_109 Depth=3
	movl	$0, -4(%rbp)
.LBB115_111:                            # %for.cond402
                                        #   Parent Loop BB115_105 Depth=1
                                        #     Parent Loop BB115_107 Depth=2
                                        #       Parent Loop BB115_109 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB115_114
# %bb.112:                              # %for.body405
                                        #   in Loop: Header=BB115_111 Depth=4
	movq	cofAC8x8, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.113:                              # %for.inc423
                                        #   in Loop: Header=BB115_111 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_111
.LBB115_114:                            # %for.end425
                                        #   in Loop: Header=BB115_109 Depth=3
	jmp	.LBB115_115
.LBB115_115:                            # %for.inc426
                                        #   in Loop: Header=BB115_109 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_109
.LBB115_116:                            # %for.end428
                                        #   in Loop: Header=BB115_107 Depth=2
	jmp	.LBB115_117
.LBB115_117:                            # %for.inc429
                                        #   in Loop: Header=BB115_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_107
.LBB115_118:                            # %for.end431
                                        #   in Loop: Header=BB115_105 Depth=1
	jmp	.LBB115_119
.LBB115_119:                            # %for.inc432
                                        #   in Loop: Header=BB115_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_105
.LBB115_120:                            # %for.end434
	cmpl	$5, cnt_nonz_8x8
	jg	.LBB115_136
# %bb.121:                              # %land.lhs.true437
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB115_136
# %bb.122:                              # %land.lhs.true441
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB115_124
# %bb.123:                              # %lor.lhs.false447
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB115_136
.LBB115_124:                            # %if.then451
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB115_125:                            # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_127 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB115_135
# %bb.126:                              # %for.body457
                                        #   in Loop: Header=BB115_125 Depth=1
	movl	$0, -4(%rbp)
.LBB115_127:                            # %for.cond458
                                        #   Parent Loop BB115_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB115_133
# %bb.128:                              # %for.body461
                                        #   in Loop: Header=BB115_127 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB115_130
# %bb.129:                              # %if.then464
                                        #   in Loop: Header=BB115_127 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB115_131
.LBB115_130:                            # %if.else478
                                        #   in Loop: Header=BB115_127 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB115_131:                            # %if.end483
                                        #   in Loop: Header=BB115_127 Depth=2
	jmp	.LBB115_132
.LBB115_132:                            # %for.inc484
                                        #   in Loop: Header=BB115_127 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_127
.LBB115_133:                            # %for.end486
                                        #   in Loop: Header=BB115_125 Depth=1
	jmp	.LBB115_134
.LBB115_134:                            # %for.inc487
                                        #   in Loop: Header=BB115_125 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_125
.LBB115_135:                            # %for.end489
	jmp	.LBB115_148
.LBB115_136:                            # %if.else490
	movl	cbp8x8, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movslq	cbp_blk8x8, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB115_137:                            # %for.cond494
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_139 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB115_147
# %bb.138:                              # %for.body497
                                        #   in Loop: Header=BB115_137 Depth=1
	movl	$0, -4(%rbp)
.LBB115_139:                            # %for.cond498
                                        #   Parent Loop BB115_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB115_145
# %bb.140:                              # %for.body501
                                        #   in Loop: Header=BB115_139 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB115_142
# %bb.141:                              # %if.then504
                                        #   in Loop: Header=BB115_139 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB115_143
.LBB115_142:                            # %if.else518
                                        #   in Loop: Header=BB115_139 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB115_143:                            # %if.end527
                                        #   in Loop: Header=BB115_139 Depth=2
	jmp	.LBB115_144
.LBB115_144:                            # %for.inc528
                                        #   in Loop: Header=BB115_139 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_139
.LBB115_145:                            # %for.end530
                                        #   in Loop: Header=BB115_137 Depth=1
	jmp	.LBB115_146
.LBB115_146:                            # %for.inc531
                                        #   in Loop: Header=BB115_137 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_137
.LBB115_147:                            # %for.end533
	jmp	.LBB115_148
.LBB115_148:                            # %if.end534
	movl	$0, -8(%rbp)
.LBB115_149:                            # %for.cond535
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_151 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB115_156
# %bb.150:                              # %for.body538
                                        #   in Loop: Header=BB115_149 Depth=1
	movl	$0, -4(%rbp)
.LBB115_151:                            # %for.cond539
                                        #   Parent Loop BB115_149 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB115_154
# %bb.152:                              # %for.body542
                                        #   in Loop: Header=BB115_151 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.153:                              # %for.inc583
                                        #   in Loop: Header=BB115_151 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_151
.LBB115_154:                            # %for.end585
                                        #   in Loop: Header=BB115_149 Depth=1
	jmp	.LBB115_155
.LBB115_155:                            # %for.inc586
                                        #   in Loop: Header=BB115_149 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_149
.LBB115_156:                            # %for.end588
	jmp	.LBB115_157
.LBB115_157:                            # %if.end589
	cmpl	$1640342252, -40(%rbp)  # imm = 0x61C5A2EC
	jne	.LBB115_159
.LBB115_158:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB115_159:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB115_158
.Lfunc_end115:
	.size	SetCoeffAndReconstruction8x8.86, .Lfunc_end115-SetCoeffAndReconstruction8x8.86
	.cfi_endproc
                                        # -- End function
	.globl	set_mbaff_parameters.87 # -- Begin function set_mbaff_parameters.87
	.p2align	4, 0x90
	.type	set_mbaff_parameters.87,@function
set_mbaff_parameters.87:                # @set_mbaff_parameters.87
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$970860385, -32(%rbp)   # imm = 0x39DE2761
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB116_2
# %bb.1:                                # %if.then
	jmp	.LBB116_82
.LBB116_2:                              # %if.end
	movl	$0, -8(%rbp)
.LBB116_3:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_5 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB116_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB116_3 Depth=1
	movl	$0, -4(%rbp)
.LBB116_5:                              # %for.cond3
                                        #   Parent Loop BB116_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB116_8
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB116_5 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB116_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_5
.LBB116_8:                              # %for.end
                                        #   in Loop: Header=BB116_3 Depth=1
	jmp	.LBB116_9
.LBB116_9:                              # %for.inc17
                                        #   in Loop: Header=BB116_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_3
.LBB116_10:                             # %for.end19
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB116_20
# %bb.11:                               # %if.then22
	movl	$0, -8(%rbp)
.LBB116_12:                             # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_14 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB116_19
# %bb.13:                               # %for.body26
                                        #   in Loop: Header=BB116_12 Depth=1
	movl	$0, -4(%rbp)
.LBB116_14:                             # %for.cond27
                                        #   Parent Loop BB116_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB116_17
# %bb.15:                               # %for.body30
                                        #   in Loop: Header=BB116_14 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.16:                               # %for.inc58
                                        #   in Loop: Header=BB116_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_14
.LBB116_17:                             # %for.end60
                                        #   in Loop: Header=BB116_12 Depth=1
	jmp	.LBB116_18
.LBB116_18:                             # %for.inc61
                                        #   in Loop: Header=BB116_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_12
.LBB116_19:                             # %for.end63
	jmp	.LBB116_20
.LBB116_20:                             # %if.end64
	movl	-28(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	rdopt, %rax
	cmpl	$0, 3096(%rax)
	jne	.LBB116_23
# %bb.21:                               # %land.lhs.true
	cmpl	$0, -28(%rbp)
	je	.LBB116_23
# %bb.22:                               # %if.then76
	movl	$0, -28(%rbp)
	movq	rdopt, %rax
	movl	$0, 3224(%rax)
.LBB116_23:                             # %if.end78
	movl	$0, -4(%rbp)
.LBB116_24:                             # %for.cond79
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_26 Depth 2
                                        #       Child Loop BB116_28 Depth 3
                                        #         Child Loop BB116_30 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_39
# %bb.25:                               # %for.body83
                                        #   in Loop: Header=BB116_24 Depth=1
	movl	$0, -8(%rbp)
.LBB116_26:                             # %for.cond84
                                        #   Parent Loop BB116_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB116_28 Depth 3
                                        #         Child Loop BB116_30 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB116_37
# %bb.27:                               # %for.body87
                                        #   in Loop: Header=BB116_26 Depth=2
	movl	$0, -12(%rbp)
.LBB116_28:                             # %for.cond88
                                        #   Parent Loop BB116_24 Depth=1
                                        #     Parent Loop BB116_26 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB116_30 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB116_35
# %bb.29:                               # %for.body91
                                        #   in Loop: Header=BB116_28 Depth=3
	movl	$0, -16(%rbp)
.LBB116_30:                             # %for.cond92
                                        #   Parent Loop BB116_24 Depth=1
                                        #     Parent Loop BB116_26 Depth=2
                                        #       Parent Loop BB116_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB116_33
# %bb.31:                               # %for.body95
                                        #   in Loop: Header=BB116_30 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc113
                                        #   in Loop: Header=BB116_30 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_30
.LBB116_33:                             # %for.end115
                                        #   in Loop: Header=BB116_28 Depth=3
	jmp	.LBB116_34
.LBB116_34:                             # %for.inc116
                                        #   in Loop: Header=BB116_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_28
.LBB116_35:                             # %for.end118
                                        #   in Loop: Header=BB116_26 Depth=2
	jmp	.LBB116_36
.LBB116_36:                             # %for.inc119
                                        #   in Loop: Header=BB116_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_26
.LBB116_37:                             # %for.end121
                                        #   in Loop: Header=BB116_24 Depth=1
	jmp	.LBB116_38
.LBB116_38:                             # %for.inc122
                                        #   in Loop: Header=BB116_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_24
.LBB116_39:                             # %for.end124
	movl	$0, -4(%rbp)
.LBB116_40:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_42 Depth 2
                                        #       Child Loop BB116_44 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB116_51
# %bb.41:                               # %for.body128
                                        #   in Loop: Header=BB116_40 Depth=1
	movl	$0, -12(%rbp)
.LBB116_42:                             # %for.cond129
                                        #   Parent Loop BB116_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB116_44 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB116_49
# %bb.43:                               # %for.body132
                                        #   in Loop: Header=BB116_42 Depth=2
	movl	$0, -16(%rbp)
.LBB116_44:                             # %for.cond133
                                        #   Parent Loop BB116_40 Depth=1
                                        #     Parent Loop BB116_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB116_47
# %bb.45:                               # %for.body136
                                        #   in Loop: Header=BB116_44 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.46:                               # %for.inc150
                                        #   in Loop: Header=BB116_44 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_44
.LBB116_47:                             # %for.end152
                                        #   in Loop: Header=BB116_42 Depth=2
	jmp	.LBB116_48
.LBB116_48:                             # %for.inc153
                                        #   in Loop: Header=BB116_42 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_42
.LBB116_49:                             # %for.end155
                                        #   in Loop: Header=BB116_40 Depth=1
	jmp	.LBB116_50
.LBB116_50:                             # %for.inc156
                                        #   in Loop: Header=BB116_40 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_40
.LBB116_51:                             # %for.end158
	movl	$0, -4(%rbp)
.LBB116_52:                             # %for.cond159
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB116_55
# %bb.53:                               # %for.body162
                                        #   in Loop: Header=BB116_52 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
# %bb.54:                               # %for.inc173
                                        #   in Loop: Header=BB116_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_52
.LBB116_55:                             # %for.end175
	movl	$0, -8(%rbp)
.LBB116_56:                             # %for.cond176
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_58 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB116_63
# %bb.57:                               # %for.body179
                                        #   in Loop: Header=BB116_56 Depth=1
	movl	$0, -4(%rbp)
.LBB116_58:                             # %for.cond180
                                        #   Parent Loop BB116_56 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB116_61
# %bb.59:                               # %for.body183
                                        #   in Loop: Header=BB116_58 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc196
                                        #   in Loop: Header=BB116_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_58
.LBB116_61:                             # %for.end198
                                        #   in Loop: Header=BB116_56 Depth=1
	jmp	.LBB116_62
.LBB116_62:                             # %for.inc199
                                        #   in Loop: Header=BB116_56 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_56
.LBB116_63:                             # %for.end201
	cmpl	$0, -36(%rbp)
	je	.LBB116_73
# %bb.64:                               # %if.then203
	movl	$0, -8(%rbp)
.LBB116_65:                             # %for.cond204
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_67 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB116_72
# %bb.66:                               # %for.body207
                                        #   in Loop: Header=BB116_65 Depth=1
	movl	$0, -4(%rbp)
.LBB116_67:                             # %for.cond208
                                        #   Parent Loop BB116_65 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB116_70
# %bb.68:                               # %for.body211
                                        #   in Loop: Header=BB116_67 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc228
                                        #   in Loop: Header=BB116_67 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_67
.LBB116_70:                             # %for.end230
                                        #   in Loop: Header=BB116_65 Depth=1
	jmp	.LBB116_71
.LBB116_71:                             # %for.inc231
                                        #   in Loop: Header=BB116_65 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_65
.LBB116_72:                             # %for.end233
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3100(%rcx)
.LBB116_73:                             # %if.end235
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB116_74:                             # %for.cond237
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_76 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_81
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB116_74 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB116_76:                             # %for.cond244
                                        #   Parent Loop BB116_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_79
# %bb.77:                               # %for.body249
                                        #   in Loop: Header=BB116_76 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.78:                               # %for.inc264
                                        #   in Loop: Header=BB116_76 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_76
.LBB116_79:                             # %for.end267
                                        #   in Loop: Header=BB116_74 Depth=1
	jmp	.LBB116_80
.LBB116_80:                             # %for.inc268
                                        #   in Loop: Header=BB116_74 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_74
.LBB116_81:                             # %for.end270.loopexit
	jmp	.LBB116_82
.LBB116_82:                             # %for.end270
	cmpl	$970860385, -32(%rbp)   # imm = 0x39DE2761
	jne	.LBB116_84
.LBB116_83:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB116_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB116_83
.Lfunc_end116:
	.size	set_mbaff_parameters.87, .Lfunc_end116-set_mbaff_parameters.87
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframeForBlocks.88 # -- Begin function SetModesAndRefframeForBlocks.88
	.p2align	4, 0x90
	.type	SetModesAndRefframeForBlocks.88,@function
SetModesAndRefframeForBlocks.88:        # @SetModesAndRefframeForBlocks.88
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$865592182, -36(%rbp)   # imm = 0x3397E376
	movl	%edi, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB117_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB117_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB117_4
.LBB117_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB117_4
.LBB117_4:                              # %cond.end
	movl	%ecx, -32(%rbp)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	cmpl	$1, -12(%rbp)
	jne	.LBB117_6
# %bb.5:                                # %if.then
	movq	img, %rax
	movslq	-12(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB117_7
.LBB117_6:                              # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB117_7:                              # %if.end
	movl	-12(%rbp), %eax
	movq	%rax, %rcx
	subq	$13, %rcx
	ja	.LBB117_42
# %bb.8:                                # %if.end
	movq	.LJTI117_0(,%rax,8), %rax
	jmpq	*%rax
.LBB117_9:                              # %sw.bb
	movl	$0, -4(%rbp)
.LBB117_10:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB117_16
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB117_10 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	cmpl	$0, -28(%rbp)
	je	.LBB117_13
# %bb.12:                               # %cond.true17
                                        #   in Loop: Header=BB117_10 Depth=1
	movq	direct_pdir, %rcx
	movq	img, %rax
	movl	144(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	shll	$1, %edx
	addl	%edx, %esi
	movslq	%esi, %rax
	movq	(%rcx,%rax,8), %rcx
	movq	img, %rax
	movl	148(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %esi
	movslq	%esi, %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB117_14
.LBB117_13:                             # %cond.false26
                                        #   in Loop: Header=BB117_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB117_14
.LBB117_14:                             # %cond.end27
                                        #   in Loop: Header=BB117_10 Depth=1
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB117_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_10
.LBB117_16:                             # %for.end
	jmp	.LBB117_43
.LBB117_17:                             # %sw.bb31
	movl	$0, -4(%rbp)
.LBB117_18:                             # %for.cond32
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB117_21
# %bb.19:                               # %for.body35
                                        #   in Loop: Header=BB117_18 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.20:                               # %for.inc47
                                        #   in Loop: Header=BB117_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_18
.LBB117_21:                             # %for.end49
	jmp	.LBB117_43
.LBB117_22:                             # %sw.bb50
	movl	$0, -4(%rbp)
.LBB117_23:                             # %for.cond51
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB117_26
# %bb.24:                               # %for.body54
                                        #   in Loop: Header=BB117_23 Depth=1
	movslq	-4(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.25:                               # %for.inc69
                                        #   in Loop: Header=BB117_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_23
.LBB117_26:                             # %for.end71
	jmp	.LBB117_43
.LBB117_27:                             # %sw.bb72
	movl	$0, -4(%rbp)
.LBB117_28:                             # %for.cond73
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB117_31
# %bb.29:                               # %for.body76
                                        #   in Loop: Header=BB117_28 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$11, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.30:                               # %for.inc83
                                        #   in Loop: Header=BB117_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_28
.LBB117_31:                             # %for.end85
	jmp	.LBB117_43
.LBB117_32:                             # %sw.bb86
	movl	$0, -4(%rbp)
.LBB117_33:                             # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB117_36
# %bb.34:                               # %for.body90
                                        #   in Loop: Header=BB117_33 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.35:                               # %for.inc97
                                        #   in Loop: Header=BB117_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_33
.LBB117_36:                             # %for.end99
	jmp	.LBB117_43
.LBB117_37:                             # %sw.bb100
	movl	$0, -4(%rbp)
.LBB117_38:                             # %for.cond101
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB117_41
# %bb.39:                               # %for.body104
                                        #   in Loop: Header=BB117_38 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$13, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.40:                               # %for.inc111
                                        #   in Loop: Header=BB117_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_38
.LBB117_41:                             # %for.end113
	movq	-24(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB117_43
.LBB117_42:                             # %sw.default
	movabsq	$.L.str, %rdi
	movb	$0, %al
	callq	printf
	movl	$1, %edi
	callq	exit
.LBB117_43:                             # %sw.epilog
	cmpl	$0, -12(%rbp)
	je	.LBB117_47
# %bb.44:                               # %lor.lhs.false
	cmpl	$9, -12(%rbp)
	je	.LBB117_47
# %bb.45:                               # %lor.lhs.false118
	cmpl	$10, -12(%rbp)
	je	.LBB117_47
# %bb.46:                               # %lor.lhs.false121
	cmpl	$13, -12(%rbp)
	jne	.LBB117_70
.LBB117_47:                             # %if.then124
	cmpl	$0, -28(%rbp)
	je	.LBB117_60
# %bb.48:                               # %if.then126
	movl	$0, -8(%rbp)
.LBB117_49:                             # %for.cond127
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB117_59
# %bb.50:                               # %for.body130
                                        #   in Loop: Header=BB117_49 Depth=1
	movl	$0, -4(%rbp)
.LBB117_51:                             # %for.cond131
                                        #   Parent Loop BB117_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB117_57
# %bb.52:                               # %for.body134
                                        #   in Loop: Header=BB117_51 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB117_54
# %bb.53:                               # %if.then136
                                        #   in Loop: Header=BB117_51 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB117_55
.LBB117_54:                             # %if.else174
                                        #   in Loop: Header=BB117_51 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB117_55:                             # %if.end195
                                        #   in Loop: Header=BB117_51 Depth=2
	jmp	.LBB117_56
.LBB117_56:                             # %for.inc196
                                        #   in Loop: Header=BB117_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_51
.LBB117_57:                             # %for.end198
                                        #   in Loop: Header=BB117_49 Depth=1
	jmp	.LBB117_58
.LBB117_58:                             # %for.inc199
                                        #   in Loop: Header=BB117_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_49
.LBB117_59:                             # %for.end201
	jmp	.LBB117_69
.LBB117_60:                             # %if.else202
	movl	$0, -8(%rbp)
.LBB117_61:                             # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB117_68
# %bb.62:                               # %for.body206
                                        #   in Loop: Header=BB117_61 Depth=1
	movl	$0, -4(%rbp)
.LBB117_63:                             # %for.cond207
                                        #   Parent Loop BB117_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB117_66
# %bb.64:                               # %for.body210
                                        #   in Loop: Header=BB117_63 Depth=2
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	cmovel	%eax, %ecx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.65:                               # %for.inc225
                                        #   in Loop: Header=BB117_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_63
.LBB117_66:                             # %for.end227
                                        #   in Loop: Header=BB117_61 Depth=1
	jmp	.LBB117_67
.LBB117_67:                             # %for.inc228
                                        #   in Loop: Header=BB117_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_61
.LBB117_68:                             # %for.end230
	jmp	.LBB117_69
.LBB117_69:                             # %if.end231
	jmp	.LBB117_127
.LBB117_70:                             # %if.else232
	cmpl	$0, -28(%rbp)
	je	.LBB117_110
# %bb.71:                               # %if.then234
	movl	$0, -8(%rbp)
.LBB117_72:                             # %for.cond235
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_74 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB117_109
# %bb.73:                               # %for.body238
                                        #   in Loop: Header=BB117_72 Depth=1
	movl	$0, -4(%rbp)
.LBB117_74:                             # %for.cond239
                                        #   Parent Loop BB117_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB117_107
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB117_74 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	cmpl	$8, -12(%rbp)
	jne	.LBB117_78
# %bb.76:                               # %land.lhs.true253
                                        #   in Loop: Header=BB117_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB117_78
# %bb.77:                               # %if.then259
                                        #   in Loop: Header=BB117_74 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB117_105
.LBB117_78:                             # %if.else298
                                        #   in Loop: Header=BB117_74 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB117_90
# %bb.79:                               # %land.lhs.true301
                                        #   in Loop: Header=BB117_74 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB117_90
# %bb.80:                               # %land.lhs.true304
                                        #   in Loop: Header=BB117_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB117_82
# %bb.81:                               # %lor.lhs.false312
                                        #   in Loop: Header=BB117_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB117_90
.LBB117_82:                             # %land.lhs.true320
                                        #   in Loop: Header=BB117_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB117_85
# %bb.83:                               # %lor.lhs.false323
                                        #   in Loop: Header=BB117_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB117_85
# %bb.84:                               # %lor.lhs.false329
                                        #   in Loop: Header=BB117_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB117_90
.LBB117_85:                             # %land.lhs.true331
                                        #   in Loop: Header=BB117_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB117_87
# %bb.86:                               # %lor.lhs.false339
                                        #   in Loop: Header=BB117_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB117_90
.LBB117_87:                             # %land.lhs.true347
                                        #   in Loop: Header=BB117_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB117_89
# %bb.88:                               # %lor.lhs.false350
                                        #   in Loop: Header=BB117_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB117_90
.LBB117_89:                             # %if.then356
                                        #   in Loop: Header=BB117_74 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB117_104
.LBB117_90:                             # %if.else377
                                        #   in Loop: Header=BB117_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB117_92
# %bb.91:                               # %lor.lhs.false385
                                        #   in Loop: Header=BB117_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB117_96
.LBB117_92:                             # %land.lhs.true393
                                        #   in Loop: Header=BB117_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB117_95
# %bb.93:                               # %lor.lhs.false396
                                        #   in Loop: Header=BB117_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB117_95
# %bb.94:                               # %lor.lhs.false402
                                        #   in Loop: Header=BB117_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB117_96
.LBB117_95:                             # %cond.true404
                                        #   in Loop: Header=BB117_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB117_97
.LBB117_96:                             # %cond.false410
                                        #   in Loop: Header=BB117_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB117_97
.LBB117_97:                             # %cond.end411
                                        #   in Loop: Header=BB117_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB117_99
# %bb.98:                               # %lor.lhs.false431
                                        #   in Loop: Header=BB117_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB117_102
.LBB117_99:                             # %land.lhs.true439
                                        #   in Loop: Header=BB117_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB117_101
# %bb.100:                              # %lor.lhs.false442
                                        #   in Loop: Header=BB117_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB117_102
.LBB117_101:                            # %cond.true448
                                        #   in Loop: Header=BB117_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8bwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB117_103
.LBB117_102:                            # %cond.false454
                                        #   in Loop: Header=BB117_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB117_103
.LBB117_103:                            # %cond.end455
                                        #   in Loop: Header=BB117_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB117_104:                            # %if.end468
                                        #   in Loop: Header=BB117_74 Depth=2
	jmp	.LBB117_105
.LBB117_105:                            # %if.end469
                                        #   in Loop: Header=BB117_74 Depth=2
	jmp	.LBB117_106
.LBB117_106:                            # %for.inc470
                                        #   in Loop: Header=BB117_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_74
.LBB117_107:                            # %for.end472
                                        #   in Loop: Header=BB117_72 Depth=1
	jmp	.LBB117_108
.LBB117_108:                            # %for.inc473
                                        #   in Loop: Header=BB117_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_72
.LBB117_109:                            # %for.end475
	jmp	.LBB117_126
.LBB117_110:                            # %if.else476
	movl	$0, -8(%rbp)
.LBB117_111:                            # %for.cond477
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_113 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB117_125
# %bb.112:                              # %for.body480
                                        #   in Loop: Header=BB117_111 Depth=1
	movl	$0, -4(%rbp)
.LBB117_113:                            # %for.cond481
                                        #   Parent Loop BB117_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB117_123
# %bb.114:                              # %for.body484
                                        #   in Loop: Header=BB117_113 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB117_116
# %bb.115:                              # %lor.lhs.false500
                                        #   in Loop: Header=BB117_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB117_120
.LBB117_116:                            # %land.lhs.true508
                                        #   in Loop: Header=BB117_113 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB117_119
# %bb.117:                              # %lor.lhs.false511
                                        #   in Loop: Header=BB117_113 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB117_119
# %bb.118:                              # %lor.lhs.false517
                                        #   in Loop: Header=BB117_113 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB117_120
.LBB117_119:                            # %cond.true519
                                        #   in Loop: Header=BB117_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB117_121
.LBB117_120:                            # %cond.false525
                                        #   in Loop: Header=BB117_113 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB117_121
.LBB117_121:                            # %cond.end526
                                        #   in Loop: Header=BB117_113 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.122:                              # %for.inc539
                                        #   in Loop: Header=BB117_113 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_113
.LBB117_123:                            # %for.end541
                                        #   in Loop: Header=BB117_111 Depth=1
	jmp	.LBB117_124
.LBB117_124:                            # %for.inc542
                                        #   in Loop: Header=BB117_111 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_111
.LBB117_125:                            # %for.end544
	jmp	.LBB117_126
.LBB117_126:                            # %if.end545
	jmp	.LBB117_127
.LBB117_127:                            # %if.end546
	movl	$0, -8(%rbp)
.LBB117_128:                            # %for.cond547
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_130 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB117_138
# %bb.129:                              # %for.body550
                                        #   in Loop: Header=BB117_128 Depth=1
	movl	$0, -4(%rbp)
.LBB117_130:                            # %for.cond551
                                        #   Parent Loop BB117_128 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB117_136
# %bb.131:                              # %for.body554
                                        #   in Loop: Header=BB117_130 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB117_133
# %bb.132:                              # %cond.true568
                                        #   in Loop: Header=BB117_130 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB117_134
.LBB117_133:                            # %cond.false584
                                        #   in Loop: Header=BB117_130 Depth=2
	movq	$-1, %rax
	jmp	.LBB117_134
.LBB117_134:                            # %cond.end585
                                        #   in Loop: Header=BB117_130 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.135:                              # %for.inc596
                                        #   in Loop: Header=BB117_130 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_130
.LBB117_136:                            # %for.end598
                                        #   in Loop: Header=BB117_128 Depth=1
	jmp	.LBB117_137
.LBB117_137:                            # %for.inc599
                                        #   in Loop: Header=BB117_128 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_128
.LBB117_138:                            # %for.end601
	cmpl	$0, -28(%rbp)
	je	.LBB117_151
# %bb.139:                              # %if.then603
	movl	$0, -8(%rbp)
.LBB117_140:                            # %for.cond604
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_142 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB117_150
# %bb.141:                              # %for.body607
                                        #   in Loop: Header=BB117_140 Depth=1
	movl	$0, -4(%rbp)
.LBB117_142:                            # %for.cond608
                                        #   Parent Loop BB117_140 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB117_148
# %bb.143:                              # %for.body611
                                        #   in Loop: Header=BB117_142 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB117_145
# %bb.144:                              # %cond.true625
                                        #   in Loop: Header=BB117_142 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB117_146
.LBB117_145:                            # %cond.false642
                                        #   in Loop: Header=BB117_142 Depth=2
	movq	$-1, %rax
	jmp	.LBB117_146
.LBB117_146:                            # %cond.end643
                                        #   in Loop: Header=BB117_142 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.147:                              # %for.inc655
                                        #   in Loop: Header=BB117_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_142
.LBB117_148:                            # %for.end657
                                        #   in Loop: Header=BB117_140 Depth=1
	jmp	.LBB117_149
.LBB117_149:                            # %for.inc658
                                        #   in Loop: Header=BB117_140 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_140
.LBB117_150:                            # %for.end660
	jmp	.LBB117_151
.LBB117_151:                            # %if.end661
	cmpl	$865592182, -36(%rbp)   # imm = 0x3397E376
	jne	.LBB117_153
.LBB117_152:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB117_153:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB117_152
.Lfunc_end117:
	.size	SetModesAndRefframeForBlocks.88, .Lfunc_end117-SetModesAndRefframeForBlocks.88
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI117_0:
	.quad	.LBB117_9
	.quad	.LBB117_17
	.quad	.LBB117_17
	.quad	.LBB117_17
	.quad	.LBB117_42
	.quad	.LBB117_42
	.quad	.LBB117_42
	.quad	.LBB117_42
	.quad	.LBB117_22
	.quad	.LBB117_27
	.quad	.LBB117_32
	.quad	.LBB117_42
	.quad	.LBB117_42
	.quad	.LBB117_37
                                        # -- End function
	.text
	.globl	CheckReliabilityOfRef.89 # -- Begin function CheckReliabilityOfRef.89
	.p2align	4, 0x90
	.type	CheckReliabilityOfRef.89,@function
CheckReliabilityOfRef.89:               # @CheckReliabilityOfRef.89
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$401785126, -104(%rbp)  # imm = 0x17F2C126
	movl	%edi, -80(%rbp)
	movl	%esi, -92(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -52(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB118_2
# %bb.1:                                # %cond.true
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	jmp	.LBB118_6
.LBB118_2:                              # %cond.false
	cmpl	$2, -52(%rbp)
	jne	.LBB118_4
# %bb.3:                                # %cond.true3
	movl	-80(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB118_5
.LBB118_4:                              # %cond.false5
	xorl	%eax, %eax
	jmp	.LBB118_5
.LBB118_5:                              # %cond.end
.LBB118_6:                              # %cond.end6
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB118_8
# %bb.7:                                # %lor.rhs
	cmpl	$2, -52(%rbp)
	sete	%cl
.LBB118_8:                              # %lor.end
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -100(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB118_10
# %bb.9:                                # %cond.true13
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	jmp	.LBB118_14
.LBB118_10:                             # %cond.false15
	cmpl	$3, -52(%rbp)
	jne	.LBB118_12
# %bb.11:                               # %cond.true17
	movl	-80(%rbp), %edx
	shll	$1, %edx
	jmp	.LBB118_13
.LBB118_12:                             # %cond.false19
	xorl	%edx, %edx
	jmp	.LBB118_13
.LBB118_13:                             # %cond.end20
.LBB118_14:                             # %cond.end22
	movl	%edx, -96(%rbp)
	movl	-96(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB118_16
# %bb.15:                               # %lor.rhs25
	cmpl	$3, -52(%rbp)
	sete	%cl
.LBB118_16:                             # %lor.end27
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -108(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -64(%rbp)
.LBB118_17:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_19 Depth 2
                                        #       Child Loop BB118_23 Depth 3
                                        #         Child Loop BB118_25 Depth 4
                                        #       Child Loop BB118_53 Depth 3
                                        #         Child Loop BB118_55 Depth 4
                                        #           Child Loop BB118_66 Depth 5
                                        #       Child Loop BB118_87 Depth 3
                                        #         Child Loop BB118_89 Depth 4
                                        #           Child Loop BB118_100 Depth 5
                                        #       Child Loop BB118_121 Depth 3
                                        #         Child Loop BB118_123 Depth 4
                                        #           Child Loop BB118_125 Depth 5
                                        #             Child Loop BB118_136 Depth 6
                                        #       Child Loop BB118_159 Depth 3
                                        #         Child Loop BB118_161 Depth 4
                                        #           Child Loop BB118_163 Depth 5
                                        #             Child Loop BB118_174 Depth 6
                                        #       Child Loop BB118_196 Depth 3
                                        #         Child Loop BB118_198 Depth 4
                                        #           Child Loop BB118_212 Depth 5
                                        #           Child Loop BB118_239 Depth 5
	movl	-64(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB118_266
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB118_17 Depth=1
	movl	-96(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB118_19:                             # %for.cond31
                                        #   Parent Loop BB118_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB118_23 Depth 3
                                        #         Child Loop BB118_25 Depth 4
                                        #       Child Loop BB118_53 Depth 3
                                        #         Child Loop BB118_55 Depth 4
                                        #           Child Loop BB118_66 Depth 5
                                        #       Child Loop BB118_87 Depth 3
                                        #         Child Loop BB118_89 Depth 4
                                        #           Child Loop BB118_100 Depth 5
                                        #       Child Loop BB118_121 Depth 3
                                        #         Child Loop BB118_123 Depth 4
                                        #           Child Loop BB118_125 Depth 5
                                        #             Child Loop BB118_136 Depth 6
                                        #       Child Loop BB118_159 Depth 3
                                        #         Child Loop BB118_161 Depth 4
                                        #           Child Loop BB118_163 Depth 5
                                        #             Child Loop BB118_174 Depth 6
                                        #       Child Loop BB118_196 Depth 3
                                        #         Child Loop BB118_198 Depth 4
                                        #           Child Loop BB118_212 Depth 5
                                        #           Child Loop BB118_239 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-108(%rbp), %eax
	jge	.LBB118_264
# %bb.20:                               # %for.body33
                                        #   in Loop: Header=BB118_19 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-64(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-68(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -72(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -76(%rbp)
	movl	-20(%rbp), %eax
	subl	-72(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	-28(%rbp), %eax
	subl	-76(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	cmpl	$0, -72(%rbp)
	jne	.LBB118_51
# %bb.21:                               # %land.lhs.true
                                        #   in Loop: Header=BB118_19 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB118_51
# %bb.22:                               # %if.then
                                        #   in Loop: Header=BB118_19 Depth=2
	movl	$0, -12(%rbp)
.LBB118_23:                             # %for.cond75
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB118_25 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB118_50
# %bb.24:                               # %for.body78
                                        #   in Loop: Header=BB118_23 Depth=3
	movl	$0, -16(%rbp)
.LBB118_25:                             # %for.cond79
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB118_48
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB118_25 Depth=4
	movq	pixel_map, %rax
	movl	-36(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB118_28
# %bb.27:                               # %cond.true86
                                        #   in Loop: Header=BB118_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB118_29
.LBB118_28:                             # %cond.false87
                                        #   in Loop: Header=BB118_25 Depth=4
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB118_29:                             # %cond.end89
                                        #   in Loop: Header=BB118_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB118_31
# %bb.30:                               # %cond.true93
                                        #   in Loop: Header=BB118_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB118_35
.LBB118_31:                             # %cond.false94
                                        #   in Loop: Header=BB118_25 Depth=4
	movl	-36(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB118_33
# %bb.32:                               # %cond.true98
                                        #   in Loop: Header=BB118_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB118_34
.LBB118_33:                             # %cond.false99
                                        #   in Loop: Header=BB118_25 Depth=4
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB118_34:                             # %cond.end101
                                        #   in Loop: Header=BB118_25 Depth=4
.LBB118_35:                             # %cond.end103
                                        #   in Loop: Header=BB118_25 Depth=4
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-40(%rbp), %ecx
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB118_37
# %bb.36:                               # %cond.true110
                                        #   in Loop: Header=BB118_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB118_38
.LBB118_37:                             # %cond.false111
                                        #   in Loop: Header=BB118_25 Depth=4
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB118_38:                             # %cond.end113
                                        #   in Loop: Header=BB118_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB118_40
# %bb.39:                               # %cond.true117
                                        #   in Loop: Header=BB118_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB118_44
.LBB118_40:                             # %cond.false118
                                        #   in Loop: Header=BB118_25 Depth=4
	movl	-40(%rbp), %ecx
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB118_42
# %bb.41:                               # %cond.true122
                                        #   in Loop: Header=BB118_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB118_43
.LBB118_42:                             # %cond.false123
                                        #   in Loop: Header=BB118_25 Depth=4
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB118_43:                             # %cond.end125
                                        #   in Loop: Header=BB118_25 Depth=4
.LBB118_44:                             # %cond.end127
                                        #   in Loop: Header=BB118_25 Depth=4
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB118_46
# %bb.45:                               # %if.then134
	movl	$0, -56(%rbp)
	jmp	.LBB118_267
.LBB118_46:                             # %if.end
                                        #   in Loop: Header=BB118_25 Depth=4
	jmp	.LBB118_47
.LBB118_47:                             # %for.inc
                                        #   in Loop: Header=BB118_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB118_25
.LBB118_48:                             # %for.end
                                        #   in Loop: Header=BB118_23 Depth=3
	jmp	.LBB118_49
.LBB118_49:                             # %for.inc135
                                        #   in Loop: Header=BB118_23 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_23
.LBB118_50:                             # %for.end137
                                        #   in Loop: Header=BB118_19 Depth=2
	jmp	.LBB118_262
.LBB118_51:                             # %if.else
                                        #   in Loop: Header=BB118_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB118_85
# %bb.52:                               # %if.then140
                                        #   in Loop: Header=BB118_19 Depth=2
	movl	$0, -12(%rbp)
.LBB118_53:                             # %for.cond141
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB118_55 Depth 4
                                        #           Child Loop BB118_66 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB118_84
# %bb.54:                               # %for.body144
                                        #   in Loop: Header=BB118_53 Depth=3
	movl	$0, -16(%rbp)
.LBB118_55:                             # %for.cond145
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_53 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB118_66 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB118_82
# %bb.56:                               # %for.body148
                                        #   in Loop: Header=BB118_55 Depth=4
	movl	-36(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_58
# %bb.57:                               # %cond.true152
                                        #   in Loop: Header=BB118_55 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB118_59
.LBB118_58:                             # %cond.false153
                                        #   in Loop: Header=BB118_55 Depth=4
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB118_59:                             # %cond.end155
                                        #   in Loop: Header=BB118_55 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_61
# %bb.60:                               # %cond.true159
                                        #   in Loop: Header=BB118_55 Depth=4
	xorl	%eax, %eax
	jmp	.LBB118_65
.LBB118_61:                             # %cond.false160
                                        #   in Loop: Header=BB118_55 Depth=4
	movl	-36(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_63
# %bb.62:                               # %cond.true164
                                        #   in Loop: Header=BB118_55 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB118_64
.LBB118_63:                             # %cond.false165
                                        #   in Loop: Header=BB118_55 Depth=4
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB118_64:                             # %cond.end167
                                        #   in Loop: Header=BB118_55 Depth=4
.LBB118_65:                             # %cond.end169
                                        #   in Loop: Header=BB118_55 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -32(%rbp)
.LBB118_66:                             # %for.cond171
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_53 Depth=3
                                        #         Parent Loop BB118_55 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -32(%rbp)
	jge	.LBB118_80
# %bb.67:                               # %for.body174
                                        #   in Loop: Header=BB118_66 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	addl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_69
# %bb.68:                               # %cond.true179
                                        #   in Loop: Header=BB118_66 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB118_70
.LBB118_69:                             # %cond.false180
                                        #   in Loop: Header=BB118_66 Depth=5
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
.LBB118_70:                             # %cond.end183
                                        #   in Loop: Header=BB118_66 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_72
# %bb.71:                               # %cond.true187
                                        #   in Loop: Header=BB118_66 Depth=5
	xorl	%eax, %eax
	jmp	.LBB118_76
.LBB118_72:                             # %cond.false188
                                        #   in Loop: Header=BB118_66 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	addl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_74
# %bb.73:                               # %cond.true193
                                        #   in Loop: Header=BB118_66 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB118_75
.LBB118_74:                             # %cond.false194
                                        #   in Loop: Header=BB118_66 Depth=5
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
.LBB118_75:                             # %cond.end197
                                        #   in Loop: Header=BB118_66 Depth=5
.LBB118_76:                             # %cond.end199
                                        #   in Loop: Header=BB118_66 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB118_78
# %bb.77:                               # %if.then208
	movl	$0, -56(%rbp)
	jmp	.LBB118_267
.LBB118_78:                             # %if.end209
                                        #   in Loop: Header=BB118_66 Depth=5
	jmp	.LBB118_79
.LBB118_79:                             # %for.inc210
                                        #   in Loop: Header=BB118_66 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB118_66
.LBB118_80:                             # %for.end212
                                        #   in Loop: Header=BB118_55 Depth=4
	jmp	.LBB118_81
.LBB118_81:                             # %for.inc213
                                        #   in Loop: Header=BB118_55 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB118_55
.LBB118_82:                             # %for.end215
                                        #   in Loop: Header=BB118_53 Depth=3
	jmp	.LBB118_83
.LBB118_83:                             # %for.inc216
                                        #   in Loop: Header=BB118_53 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_53
.LBB118_84:                             # %for.end218
                                        #   in Loop: Header=BB118_19 Depth=2
	jmp	.LBB118_261
.LBB118_85:                             # %if.else219
                                        #   in Loop: Header=BB118_19 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB118_119
# %bb.86:                               # %if.then222
                                        #   in Loop: Header=BB118_19 Depth=2
	movl	$0, -12(%rbp)
.LBB118_87:                             # %for.cond223
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB118_89 Depth 4
                                        #           Child Loop BB118_100 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB118_118
# %bb.88:                               # %for.body226
                                        #   in Loop: Header=BB118_87 Depth=3
	movl	$0, -16(%rbp)
.LBB118_89:                             # %for.cond227
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_87 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB118_100 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB118_116
# %bb.90:                               # %for.body230
                                        #   in Loop: Header=BB118_89 Depth=4
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_92
# %bb.91:                               # %cond.true234
                                        #   in Loop: Header=BB118_89 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB118_93
.LBB118_92:                             # %cond.false235
                                        #   in Loop: Header=BB118_89 Depth=4
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB118_93:                             # %cond.end237
                                        #   in Loop: Header=BB118_89 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_95
# %bb.94:                               # %cond.true241
                                        #   in Loop: Header=BB118_89 Depth=4
	xorl	%eax, %eax
	jmp	.LBB118_99
.LBB118_95:                             # %cond.false242
                                        #   in Loop: Header=BB118_89 Depth=4
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_97
# %bb.96:                               # %cond.true246
                                        #   in Loop: Header=BB118_89 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB118_98
.LBB118_97:                             # %cond.false247
                                        #   in Loop: Header=BB118_89 Depth=4
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB118_98:                             # %cond.end249
                                        #   in Loop: Header=BB118_89 Depth=4
.LBB118_99:                             # %cond.end251
                                        #   in Loop: Header=BB118_89 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -24(%rbp)
.LBB118_100:                            # %for.cond253
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_87 Depth=3
                                        #         Parent Loop BB118_89 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB118_114
# %bb.101:                              # %for.body256
                                        #   in Loop: Header=BB118_100 Depth=5
	movl	-36(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_103
# %bb.102:                              # %cond.true261
                                        #   in Loop: Header=BB118_100 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB118_104
.LBB118_103:                            # %cond.false262
                                        #   in Loop: Header=BB118_100 Depth=5
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB118_104:                            # %cond.end265
                                        #   in Loop: Header=BB118_100 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_106
# %bb.105:                              # %cond.true269
                                        #   in Loop: Header=BB118_100 Depth=5
	xorl	%eax, %eax
	jmp	.LBB118_110
.LBB118_106:                            # %cond.false270
                                        #   in Loop: Header=BB118_100 Depth=5
	movl	-36(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_108
# %bb.107:                              # %cond.true275
                                        #   in Loop: Header=BB118_100 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB118_109
.LBB118_108:                            # %cond.false276
                                        #   in Loop: Header=BB118_100 Depth=5
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB118_109:                            # %cond.end279
                                        #   in Loop: Header=BB118_100 Depth=5
.LBB118_110:                            # %cond.end281
                                        #   in Loop: Header=BB118_100 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB118_112
# %bb.111:                              # %if.then290
	movl	$0, -56(%rbp)
	jmp	.LBB118_267
.LBB118_112:                            # %if.end291
                                        #   in Loop: Header=BB118_100 Depth=5
	jmp	.LBB118_113
.LBB118_113:                            # %for.inc292
                                        #   in Loop: Header=BB118_100 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB118_100
.LBB118_114:                            # %for.end294
                                        #   in Loop: Header=BB118_89 Depth=4
	jmp	.LBB118_115
.LBB118_115:                            # %for.inc295
                                        #   in Loop: Header=BB118_89 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB118_89
.LBB118_116:                            # %for.end297
                                        #   in Loop: Header=BB118_87 Depth=3
	jmp	.LBB118_117
.LBB118_117:                            # %for.inc298
                                        #   in Loop: Header=BB118_87 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_87
.LBB118_118:                            # %for.end300
                                        #   in Loop: Header=BB118_19 Depth=2
	jmp	.LBB118_260
.LBB118_119:                            # %if.else301
                                        #   in Loop: Header=BB118_19 Depth=2
	cmpl	$2, -76(%rbp)
	jne	.LBB118_157
# %bb.120:                              # %if.then304
                                        #   in Loop: Header=BB118_19 Depth=2
	movl	$0, -12(%rbp)
.LBB118_121:                            # %for.cond305
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB118_123 Depth 4
                                        #           Child Loop BB118_125 Depth 5
                                        #             Child Loop BB118_136 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB118_156
# %bb.122:                              # %for.body308
                                        #   in Loop: Header=BB118_121 Depth=3
	movl	$0, -16(%rbp)
.LBB118_123:                            # %for.cond309
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_121 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB118_125 Depth 5
                                        #             Child Loop BB118_136 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB118_154
# %bb.124:                              # %for.body312
                                        #   in Loop: Header=BB118_123 Depth=4
	movl	$-2, -24(%rbp)
.LBB118_125:                            # %for.cond313
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_121 Depth=3
                                        #         Parent Loop BB118_123 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB118_136 Depth 6
	cmpl	$4, -24(%rbp)
	jge	.LBB118_152
# %bb.126:                              # %for.body316
                                        #   in Loop: Header=BB118_125 Depth=5
	movl	-36(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_128
# %bb.127:                              # %cond.true321
                                        #   in Loop: Header=BB118_125 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB118_129
.LBB118_128:                            # %cond.false322
                                        #   in Loop: Header=BB118_125 Depth=5
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB118_129:                            # %cond.end325
                                        #   in Loop: Header=BB118_125 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_131
# %bb.130:                              # %cond.true329
                                        #   in Loop: Header=BB118_125 Depth=5
	xorl	%eax, %eax
	jmp	.LBB118_135
.LBB118_131:                            # %cond.false330
                                        #   in Loop: Header=BB118_125 Depth=5
	movl	-36(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_133
# %bb.132:                              # %cond.true335
                                        #   in Loop: Header=BB118_125 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB118_134
.LBB118_133:                            # %cond.false336
                                        #   in Loop: Header=BB118_125 Depth=5
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB118_134:                            # %cond.end339
                                        #   in Loop: Header=BB118_125 Depth=5
.LBB118_135:                            # %cond.end341
                                        #   in Loop: Header=BB118_125 Depth=5
	movl	%eax, -48(%rbp)
	movl	$-2, -32(%rbp)
.LBB118_136:                            # %for.cond343
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_121 Depth=3
                                        #         Parent Loop BB118_123 Depth=4
                                        #           Parent Loop BB118_125 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -32(%rbp)
	jge	.LBB118_150
# %bb.137:                              # %for.body346
                                        #   in Loop: Header=BB118_136 Depth=6
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_139
# %bb.138:                              # %cond.true351
                                        #   in Loop: Header=BB118_136 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB118_140
.LBB118_139:                            # %cond.false352
                                        #   in Loop: Header=BB118_136 Depth=6
	movl	-28(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB118_140:                            # %cond.end355
                                        #   in Loop: Header=BB118_136 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_142
# %bb.141:                              # %cond.true359
                                        #   in Loop: Header=BB118_136 Depth=6
	xorl	%eax, %eax
	jmp	.LBB118_146
.LBB118_142:                            # %cond.false360
                                        #   in Loop: Header=BB118_136 Depth=6
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_144
# %bb.143:                              # %cond.true365
                                        #   in Loop: Header=BB118_136 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB118_145
.LBB118_144:                            # %cond.false366
                                        #   in Loop: Header=BB118_136 Depth=6
	movl	-28(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB118_145:                            # %cond.end369
                                        #   in Loop: Header=BB118_136 Depth=6
.LBB118_146:                            # %cond.end371
                                        #   in Loop: Header=BB118_136 Depth=6
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB118_148
# %bb.147:                              # %if.then380
	movl	$0, -56(%rbp)
	jmp	.LBB118_267
.LBB118_148:                            # %if.end381
                                        #   in Loop: Header=BB118_136 Depth=6
	jmp	.LBB118_149
.LBB118_149:                            # %for.inc382
                                        #   in Loop: Header=BB118_136 Depth=6
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB118_136
.LBB118_150:                            # %for.end384
                                        #   in Loop: Header=BB118_125 Depth=5
	jmp	.LBB118_151
.LBB118_151:                            # %for.inc385
                                        #   in Loop: Header=BB118_125 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB118_125
.LBB118_152:                            # %for.end387
                                        #   in Loop: Header=BB118_123 Depth=4
	jmp	.LBB118_153
.LBB118_153:                            # %for.inc388
                                        #   in Loop: Header=BB118_123 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB118_123
.LBB118_154:                            # %for.end390
                                        #   in Loop: Header=BB118_121 Depth=3
	jmp	.LBB118_155
.LBB118_155:                            # %for.inc391
                                        #   in Loop: Header=BB118_121 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_121
.LBB118_156:                            # %for.end393
                                        #   in Loop: Header=BB118_19 Depth=2
	jmp	.LBB118_259
.LBB118_157:                            # %if.else394
                                        #   in Loop: Header=BB118_19 Depth=2
	cmpl	$2, -72(%rbp)
	jne	.LBB118_195
# %bb.158:                              # %if.then397
                                        #   in Loop: Header=BB118_19 Depth=2
	movl	$0, -12(%rbp)
.LBB118_159:                            # %for.cond398
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB118_161 Depth 4
                                        #           Child Loop BB118_163 Depth 5
                                        #             Child Loop BB118_174 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB118_194
# %bb.160:                              # %for.body401
                                        #   in Loop: Header=BB118_159 Depth=3
	movl	$0, -16(%rbp)
.LBB118_161:                            # %for.cond402
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_159 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB118_163 Depth 5
                                        #             Child Loop BB118_174 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB118_192
# %bb.162:                              # %for.body405
                                        #   in Loop: Header=BB118_161 Depth=4
	movl	$-2, -32(%rbp)
.LBB118_163:                            # %for.cond406
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_159 Depth=3
                                        #         Parent Loop BB118_161 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB118_174 Depth 6
	cmpl	$4, -32(%rbp)
	jge	.LBB118_190
# %bb.164:                              # %for.body409
                                        #   in Loop: Header=BB118_163 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_166
# %bb.165:                              # %cond.true414
                                        #   in Loop: Header=BB118_163 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB118_167
.LBB118_166:                            # %cond.false415
                                        #   in Loop: Header=BB118_163 Depth=5
	movl	-28(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB118_167:                            # %cond.end418
                                        #   in Loop: Header=BB118_163 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_169
# %bb.168:                              # %cond.true422
                                        #   in Loop: Header=BB118_163 Depth=5
	xorl	%eax, %eax
	jmp	.LBB118_173
.LBB118_169:                            # %cond.false423
                                        #   in Loop: Header=BB118_163 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_171
# %bb.170:                              # %cond.true428
                                        #   in Loop: Header=BB118_163 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB118_172
.LBB118_171:                            # %cond.false429
                                        #   in Loop: Header=BB118_163 Depth=5
	movl	-28(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB118_172:                            # %cond.end432
                                        #   in Loop: Header=BB118_163 Depth=5
.LBB118_173:                            # %cond.end434
                                        #   in Loop: Header=BB118_163 Depth=5
	movl	%eax, -44(%rbp)
	movl	$-2, -24(%rbp)
.LBB118_174:                            # %for.cond436
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_159 Depth=3
                                        #         Parent Loop BB118_161 Depth=4
                                        #           Parent Loop BB118_163 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -24(%rbp)
	jge	.LBB118_188
# %bb.175:                              # %for.body439
                                        #   in Loop: Header=BB118_174 Depth=6
	movl	-36(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_177
# %bb.176:                              # %cond.true444
                                        #   in Loop: Header=BB118_174 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB118_178
.LBB118_177:                            # %cond.false445
                                        #   in Loop: Header=BB118_174 Depth=6
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB118_178:                            # %cond.end448
                                        #   in Loop: Header=BB118_174 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_180
# %bb.179:                              # %cond.true452
                                        #   in Loop: Header=BB118_174 Depth=6
	xorl	%eax, %eax
	jmp	.LBB118_184
.LBB118_180:                            # %cond.false453
                                        #   in Loop: Header=BB118_174 Depth=6
	movl	-36(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_182
# %bb.181:                              # %cond.true458
                                        #   in Loop: Header=BB118_174 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB118_183
.LBB118_182:                            # %cond.false459
                                        #   in Loop: Header=BB118_174 Depth=6
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB118_183:                            # %cond.end462
                                        #   in Loop: Header=BB118_174 Depth=6
.LBB118_184:                            # %cond.end464
                                        #   in Loop: Header=BB118_174 Depth=6
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB118_186
# %bb.185:                              # %if.then473
	movl	$0, -56(%rbp)
	jmp	.LBB118_267
.LBB118_186:                            # %if.end474
                                        #   in Loop: Header=BB118_174 Depth=6
	jmp	.LBB118_187
.LBB118_187:                            # %for.inc475
                                        #   in Loop: Header=BB118_174 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB118_174
.LBB118_188:                            # %for.end477
                                        #   in Loop: Header=BB118_163 Depth=5
	jmp	.LBB118_189
.LBB118_189:                            # %for.inc478
                                        #   in Loop: Header=BB118_163 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB118_163
.LBB118_190:                            # %for.end480
                                        #   in Loop: Header=BB118_161 Depth=4
	jmp	.LBB118_191
.LBB118_191:                            # %for.inc481
                                        #   in Loop: Header=BB118_161 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB118_161
.LBB118_192:                            # %for.end483
                                        #   in Loop: Header=BB118_159 Depth=3
	jmp	.LBB118_193
.LBB118_193:                            # %for.inc484
                                        #   in Loop: Header=BB118_159 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_159
.LBB118_194:                            # %for.end486
                                        #   in Loop: Header=BB118_19 Depth=2
	jmp	.LBB118_258
.LBB118_195:                            # %if.else487
                                        #   in Loop: Header=BB118_19 Depth=2
	movl	$0, -12(%rbp)
.LBB118_196:                            # %for.cond488
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB118_198 Depth 4
                                        #           Child Loop BB118_212 Depth 5
                                        #           Child Loop BB118_239 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB118_257
# %bb.197:                              # %for.body491
                                        #   in Loop: Header=BB118_196 Depth=3
	movl	$0, -16(%rbp)
.LBB118_198:                            # %for.cond492
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_196 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB118_212 Depth 5
                                        #           Child Loop BB118_239 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB118_255
# %bb.199:                              # %for.body495
                                        #   in Loop: Header=BB118_198 Depth=4
	cmpl	$1, -72(%rbp)
	jne	.LBB118_201
# %bb.200:                              # %cond.true498
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	jmp	.LBB118_202
.LBB118_201:                            # %cond.false500
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$1, %eax
.LBB118_202:                            # %cond.end503
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB118_204
# %bb.203:                              # %cond.true507
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB118_205
.LBB118_204:                            # %cond.false508
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-48(%rbp), %eax
.LBB118_205:                            # %cond.end509
                                        #   in Loop: Header=BB118_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_207
# %bb.206:                              # %cond.true513
                                        #   in Loop: Header=BB118_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB118_211
.LBB118_207:                            # %cond.false514
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB118_209
# %bb.208:                              # %cond.true517
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB118_210
.LBB118_209:                            # %cond.false518
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-48(%rbp), %eax
.LBB118_210:                            # %cond.end519
                                        #   in Loop: Header=BB118_198 Depth=4
.LBB118_211:                            # %cond.end521
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -32(%rbp)
.LBB118_212:                            # %for.cond523
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_196 Depth=3
                                        #         Parent Loop BB118_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -32(%rbp)
	jge	.LBB118_226
# %bb.213:                              # %for.body526
                                        #   in Loop: Header=BB118_212 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_215
# %bb.214:                              # %cond.true531
                                        #   in Loop: Header=BB118_212 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB118_216
.LBB118_215:                            # %cond.false532
                                        #   in Loop: Header=BB118_212 Depth=5
	movl	-28(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB118_216:                            # %cond.end535
                                        #   in Loop: Header=BB118_212 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_218
# %bb.217:                              # %cond.true539
                                        #   in Loop: Header=BB118_212 Depth=5
	xorl	%eax, %eax
	jmp	.LBB118_222
.LBB118_218:                            # %cond.false540
                                        #   in Loop: Header=BB118_212 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_220
# %bb.219:                              # %cond.true545
                                        #   in Loop: Header=BB118_212 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB118_221
.LBB118_220:                            # %cond.false546
                                        #   in Loop: Header=BB118_212 Depth=5
	movl	-28(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB118_221:                            # %cond.end549
                                        #   in Loop: Header=BB118_212 Depth=5
.LBB118_222:                            # %cond.end551
                                        #   in Loop: Header=BB118_212 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB118_224
# %bb.223:                              # %if.then560
	movl	$0, -56(%rbp)
	jmp	.LBB118_267
.LBB118_224:                            # %if.end561
                                        #   in Loop: Header=BB118_212 Depth=5
	jmp	.LBB118_225
.LBB118_225:                            # %for.inc562
                                        #   in Loop: Header=BB118_212 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB118_212
.LBB118_226:                            # %for.end564
                                        #   in Loop: Header=BB118_198 Depth=4
	cmpl	$1, -76(%rbp)
	jne	.LBB118_228
# %bb.227:                              # %cond.true567
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	jmp	.LBB118_229
.LBB118_228:                            # %cond.false569
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
.LBB118_229:                            # %cond.end572
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB118_231
# %bb.230:                              # %cond.true576
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB118_232
.LBB118_231:                            # %cond.false577
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-44(%rbp), %eax
.LBB118_232:                            # %cond.end578
                                        #   in Loop: Header=BB118_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_234
# %bb.233:                              # %cond.true582
                                        #   in Loop: Header=BB118_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB118_238
.LBB118_234:                            # %cond.false583
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-40(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB118_236
# %bb.235:                              # %cond.true586
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB118_237
.LBB118_236:                            # %cond.false587
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-44(%rbp), %eax
.LBB118_237:                            # %cond.end588
                                        #   in Loop: Header=BB118_198 Depth=4
.LBB118_238:                            # %cond.end590
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -24(%rbp)
.LBB118_239:                            # %for.cond592
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_196 Depth=3
                                        #         Parent Loop BB118_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB118_253
# %bb.240:                              # %for.body595
                                        #   in Loop: Header=BB118_239 Depth=5
	movl	-36(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_242
# %bb.241:                              # %cond.true600
                                        #   in Loop: Header=BB118_239 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB118_243
.LBB118_242:                            # %cond.false601
                                        #   in Loop: Header=BB118_239 Depth=5
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB118_243:                            # %cond.end604
                                        #   in Loop: Header=BB118_239 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_245
# %bb.244:                              # %cond.true608
                                        #   in Loop: Header=BB118_239 Depth=5
	xorl	%eax, %eax
	jmp	.LBB118_249
.LBB118_245:                            # %cond.false609
                                        #   in Loop: Header=BB118_239 Depth=5
	movl	-36(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_247
# %bb.246:                              # %cond.true614
                                        #   in Loop: Header=BB118_239 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB118_248
.LBB118_247:                            # %cond.false615
                                        #   in Loop: Header=BB118_239 Depth=5
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB118_248:                            # %cond.end618
                                        #   in Loop: Header=BB118_239 Depth=5
.LBB118_249:                            # %cond.end620
                                        #   in Loop: Header=BB118_239 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB118_251
# %bb.250:                              # %if.then629
	movl	$0, -56(%rbp)
	jmp	.LBB118_267
.LBB118_251:                            # %if.end630
                                        #   in Loop: Header=BB118_239 Depth=5
	jmp	.LBB118_252
.LBB118_252:                            # %for.inc631
                                        #   in Loop: Header=BB118_239 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB118_239
.LBB118_253:                            # %for.end633
                                        #   in Loop: Header=BB118_198 Depth=4
	jmp	.LBB118_254
.LBB118_254:                            # %for.inc634
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB118_198
.LBB118_255:                            # %for.end636
                                        #   in Loop: Header=BB118_196 Depth=3
	jmp	.LBB118_256
.LBB118_256:                            # %for.inc637
                                        #   in Loop: Header=BB118_196 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_196
.LBB118_257:                            # %for.end639
                                        #   in Loop: Header=BB118_19 Depth=2
	jmp	.LBB118_258
.LBB118_258:                            # %if.end640
                                        #   in Loop: Header=BB118_19 Depth=2
	jmp	.LBB118_259
.LBB118_259:                            # %if.end641
                                        #   in Loop: Header=BB118_19 Depth=2
	jmp	.LBB118_260
.LBB118_260:                            # %if.end642
                                        #   in Loop: Header=BB118_19 Depth=2
	jmp	.LBB118_261
.LBB118_261:                            # %if.end643
                                        #   in Loop: Header=BB118_19 Depth=2
	jmp	.LBB118_262
.LBB118_262:                            # %if.end644
                                        #   in Loop: Header=BB118_19 Depth=2
	jmp	.LBB118_263
.LBB118_263:                            # %for.inc645
                                        #   in Loop: Header=BB118_19 Depth=2
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB118_19
.LBB118_264:                            # %for.end647
                                        #   in Loop: Header=BB118_17 Depth=1
	jmp	.LBB118_265
.LBB118_265:                            # %for.inc648
                                        #   in Loop: Header=BB118_17 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB118_17
.LBB118_266:                            # %for.end650
	movl	$1, -56(%rbp)
.LBB118_267:                            # %return
	movl	-56(%rbp), %ebx
	cmpl	$401785126, -104(%rbp)  # imm = 0x17F2C126
	jne	.LBB118_269
.LBB118_268:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB118_269:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB118_268
.Lfunc_end118:
	.size	CheckReliabilityOfRef.89, .Lfunc_end118-CheckReliabilityOfRef.89
	.cfi_endproc
                                        # -- End function
	.globl	Intra16x16_Mode_Decision.90 # -- Begin function Intra16x16_Mode_Decision.90
	.p2align	4, 0x90
	.type	Intra16x16_Mode_Decision.90,@function
Intra16x16_Mode_Decision.90:            # @Intra16x16_Mode_Decision.90
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$86029475, -56(%rbp)    # imm = 0x520B4A3
	movq	%rdi, -72(%rbp)
	movq	%rsi, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	imgY_org, %rax
	movq	%rax, -80(%rbp)
	movq	imgUV_org, %rax
	movq	%rax, -64(%rbp)
	movb	$0, %al
	callq	intrapred_luma_16x16
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB119_2
# %bb.1:                                # %if.then
	movq	-48(%rbp), %rdi
	callq	find_sad_16x16
.LBB119_2:                              # %if.end
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB119_12
# %bb.3:                                # %if.then3
	movl	$0, -4(%rbp)
.LBB119_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_6 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB119_11
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB119_4 Depth=1
	movl	$0, -8(%rbp)
.LBB119_6:                              # %for.cond4
                                        #   Parent Loop BB119_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB119_9
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB119_6 Depth=2
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -36(%rbp)
	movl	-28(%rbp), %eax
	subl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB119_6 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_6
.LBB119_9:                              # %for.end
                                        #   in Loop: Header=BB119_4 Depth=1
	jmp	.LBB119_10
.LBB119_10:                             # %for.inc87
                                        #   in Loop: Header=BB119_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_4
.LBB119_11:                             # %for.end89
	jmp	.LBB119_12
.LBB119_12:                             # %if.end90
	movq	-48(%rbp), %rax
	movl	(%rax), %edi
	callq	dct_luma_16x16
	movq	-72(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB119_73
# %bb.13:                               # %if.then94
	movl	$0, -4(%rbp)
.LBB119_14:                             # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_16 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB119_21
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB119_14 Depth=1
	movl	$0, -8(%rbp)
.LBB119_16:                             # %for.cond99
                                        #   Parent Loop BB119_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB119_19
# %bb.17:                               # %for.body102
                                        #   in Loop: Header=BB119_16 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.18:                               # %for.inc121
                                        #   in Loop: Header=BB119_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_16
.LBB119_19:                             # %for.end123
                                        #   in Loop: Header=BB119_14 Depth=1
	jmp	.LBB119_20
.LBB119_20:                             # %for.inc124
                                        #   in Loop: Header=BB119_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_14
.LBB119_21:                             # %for.end126
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB119_22:                             # %for.cond128
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_24 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB119_29
# %bb.23:                               # %for.body131
                                        #   in Loop: Header=BB119_22 Depth=1
	movl	$0, -8(%rbp)
.LBB119_24:                             # %for.cond132
                                        #   Parent Loop BB119_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB119_27
# %bb.25:                               # %for.body135
                                        #   in Loop: Header=BB119_24 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.26:                               # %for.inc154
                                        #   in Loop: Header=BB119_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_24
.LBB119_27:                             # %for.end156
                                        #   in Loop: Header=BB119_22 Depth=1
	jmp	.LBB119_28
.LBB119_28:                             # %for.inc157
                                        #   in Loop: Header=BB119_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_22
.LBB119_29:                             # %for.end159
	movl	-52(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB119_30:                             # %for.cond161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_32 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB119_37
# %bb.31:                               # %for.body164
                                        #   in Loop: Header=BB119_30 Depth=1
	movl	$0, -8(%rbp)
.LBB119_32:                             # %for.cond165
                                        #   Parent Loop BB119_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB119_35
# %bb.33:                               # %for.body168
                                        #   in Loop: Header=BB119_32 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.34:                               # %for.inc178
                                        #   in Loop: Header=BB119_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_32
.LBB119_35:                             # %for.end180
                                        #   in Loop: Header=BB119_30 Depth=1
	jmp	.LBB119_36
.LBB119_36:                             # %for.inc181
                                        #   in Loop: Header=BB119_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_30
.LBB119_37:                             # %for.end183
	movl	-52(%rbp), %eax
	shll	$4, %eax
	movq	-72(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -4(%rbp)
.LBB119_38:                             # %for.cond186
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_40 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB119_72
# %bb.39:                               # %for.body189
                                        #   in Loop: Header=BB119_38 Depth=1
	movl	$0, -8(%rbp)
.LBB119_40:                             # %for.cond190
                                        #   Parent Loop BB119_38 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB119_70
# %bb.41:                               # %for.body193
                                        #   in Loop: Header=BB119_40 Depth=2
	xorl	%eax, %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-36(%rbp), %ecx
	movl	%ecx, -28(%rbp)
	movl	-36(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -16(%rbp)
	movl	-16(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -20(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB119_43
# %bb.42:                               # %cond.true
                                        #   in Loop: Header=BB119_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB119_44
.LBB119_43:                             # %cond.false
                                        #   in Loop: Header=BB119_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB119_44:                             # %cond.end
                                        #   in Loop: Header=BB119_40 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB119_46
# %bb.45:                               # %cond.true244
                                        #   in Loop: Header=BB119_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB119_50
.LBB119_46:                             # %cond.false246
                                        #   in Loop: Header=BB119_40 Depth=2
	xorl	%eax, %eax
	movl	-16(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB119_48
# %bb.47:                               # %cond.true259
                                        #   in Loop: Header=BB119_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB119_49
.LBB119_48:                             # %cond.false260
                                        #   in Loop: Header=BB119_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB119_49:                             # %cond.end271
                                        #   in Loop: Header=BB119_40 Depth=2
.LBB119_50:                             # %cond.end273
                                        #   in Loop: Header=BB119_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-24(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-32(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-28(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movq	-48(%rbp), %rdi
	movslq	(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB119_52
# %bb.51:                               # %cond.true294
                                        #   in Loop: Header=BB119_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB119_53
.LBB119_52:                             # %cond.false295
                                        #   in Loop: Header=BB119_40 Depth=2
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB119_53:                             # %cond.end305
                                        #   in Loop: Header=BB119_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB119_55
# %bb.54:                               # %cond.true309
                                        #   in Loop: Header=BB119_40 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB119_59
.LBB119_55:                             # %cond.false311
                                        #   in Loop: Header=BB119_40 Depth=2
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB119_57
# %bb.56:                               # %cond.true323
                                        #   in Loop: Header=BB119_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB119_58
.LBB119_57:                             # %cond.false324
                                        #   in Loop: Header=BB119_40 Depth=2
	movl	-28(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB119_58:                             # %cond.end334
                                        #   in Loop: Header=BB119_40 Depth=2
.LBB119_59:                             # %cond.end336
                                        #   in Loop: Header=BB119_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-24(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-32(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-20(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB119_61
# %bb.60:                               # %cond.true358
                                        #   in Loop: Header=BB119_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB119_62
.LBB119_61:                             # %cond.false359
                                        #   in Loop: Header=BB119_40 Depth=2
	movl	-20(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB119_62:                             # %cond.end370
                                        #   in Loop: Header=BB119_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB119_64
# %bb.63:                               # %cond.true374
                                        #   in Loop: Header=BB119_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB119_68
.LBB119_64:                             # %cond.false376
                                        #   in Loop: Header=BB119_40 Depth=2
	xorl	%eax, %eax
	movl	-20(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB119_66
# %bb.65:                               # %cond.true389
                                        #   in Loop: Header=BB119_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB119_67
.LBB119_66:                             # %cond.false390
                                        #   in Loop: Header=BB119_40 Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB119_67:                             # %cond.end401
                                        #   in Loop: Header=BB119_40 Depth=2
.LBB119_68:                             # %cond.end403
                                        #   in Loop: Header=BB119_40 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-24(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc414
                                        #   in Loop: Header=BB119_40 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_40
.LBB119_70:                             # %for.end416
                                        #   in Loop: Header=BB119_38 Depth=1
	jmp	.LBB119_71
.LBB119_71:                             # %for.inc417
                                        #   in Loop: Header=BB119_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_38
.LBB119_72:                             # %for.end419
	jmp	.LBB119_73
.LBB119_73:                             # %if.end420
	cmpl	$86029475, -56(%rbp)    # imm = 0x520B4A3
	jne	.LBB119_75
.LBB119_74:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB119_75:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB119_74
.Lfunc_end119:
	.size	Intra16x16_Mode_Decision.90, .Lfunc_end119-Intra16x16_Mode_Decision.90
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function encode_one_macroblock.91
.LCPI120_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI120_1:
	.quad	4622945017495814144     # double 12
.LCPI120_2:
	.quad	4607182418800017408     # double 1
.LCPI120_3:
	.quad	4587366580439587226     # double 0.050000000000000003
.LCPI120_4:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI120_5:
	.quad	4611686018427387904     # double 2
.LCPI120_6:
	.quad	4613937818241073152     # double 3
.LCPI120_7:
	.quad	4608983858650965606     # double 1.3999999999999999
.LCPI120_8:
	.quad	4616189618054758400     # double 4
.LCPI120_9:
	.quad	4604300115038500291     # double 0.68000000000000005
.LCPI120_10:
	.quad	4618441417868443648     # double 6
.LCPI120_11:
	.quad	4605380978949069210     # double 0.80000000000000004
.LCPI120_12:
	.quad	4600877379321698714     # double 0.40000000000000002
.LCPI120_13:
	.quad	4596373779694328218     # double 0.20000000000000001
.LCPI120_14:
	.quad	4606732058837280358     # double 0.94999999999999996
.LCPI120_15:
	.quad	4602678819172646912     # double 0.5
.LCPI120_16:
	.quad	4679240012837945344     # double 65536
.LCPI120_17:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI120_18:
	.quad	4625196817309499392     # double 16
	.text
	.globl	encode_one_macroblock.91
	.p2align	4, 0x90
	.type	encode_one_macroblock.91,@function
encode_one_macroblock.91:               # @encode_one_macroblock.91
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$480, %rsp              # imm = 0x1E0
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	vmovsd	.LCPI120_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	$784989816, -408(%rbp)  # imm = 0x2EC9FE78
	vxorps	%xmm1, %xmm1, %xmm1
	vmovsd	%xmm1, -296(%rbp)
	vmovsd	%xmm0, -472(%rbp)
	movl	$2147483647, -204(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -276(%rbp)
	movl	$0, -184(%rbp)
	movw	$0, -36(%rbp)
	movl	$0, -60(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -264(%rbp)
	movl	$0, -252(%rbp)
	movl	$0, -176(%rbp)
	movl	$0, -320(%rbp)
	movl	$0, -208(%rbp)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB120_2
# %bb.1:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB120_4
.LBB120_2:                              # %land.lhs.true
	movq	img, %rax
	movl	140(%rax), %eax
	movq	img, %rcx
	cmpl	88(%rcx), %eax
	jne	.LBB120_4
# %bb.3:                                # %land.lhs.true4
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	cmpl	92(%rcx), %eax
	movb	$1, %cl
	jne	.LBB120_5
.LBB120_4:                              # %lor.rhs
	movq	img, %rax
	cmpl	$2, 24(%rax)
	sete	%cl
.LBB120_5:                              # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -136(%rbp)
	movq	img, %rcx
	cmpl	$3, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -300(%rbp)
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -404(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	input, %rcx
	cmpl	$1, 2908(%rcx)
	jne	.LBB120_13
# %bb.6:                                # %land.lhs.true19
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$2, 2464(%rcx)
	jne	.LBB120_13
# %bb.7:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB120_12
# %bb.8:                                # %lor.lhs.false25
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB120_12
# %bb.9:                                # %lor.rhs29
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB120_11
# %bb.10:                               # %land.rhs33
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB120_11:                             # %land.end
.LBB120_12:                             # %lor.end36
.LBB120_13:                             # %land.end38
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	movl	$1, %edx
	cmovnel	%eax, %edx
	movl	%edx, -308(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB120_18
# %bb.14:                               # %land.lhs.true40
	xorl	%ecx, %ecx
	movq	input, %rax
	cmpl	$0, 2908(%rax)
	je	.LBB120_18
# %bb.15:                               # %land.rhs43
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %cl
	je	.LBB120_17
# %bb.16:                               # %lor.rhs47
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%cl
.LBB120_17:                             # %lor.end51
.LBB120_18:                             # %land.end53
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -280(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB120_20
# %bb.19:                               # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB120_21
.LBB120_20:                             # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB120_21
.LBB120_21:                             # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -424(%rbp)
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	%rcx, -392(%rbp)
	movw	$-1, -38(%rbp)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movq	%rcx, -448(%rbp)
	movq	img, %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB120_23
# %bb.22:                               # %land.rhs62
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB120_23:                             # %land.end64
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -284(%rbp)
	movl	$0, -132(%rbp)
	cmpl	$0, -284(%rbp)
	je	.LBB120_28
# %bb.24:                               # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB120_26
# %bb.25:                               # %if.then69
	movl	$4, -64(%rbp)
	jmp	.LBB120_27
.LBB120_26:                             # %if.else
	movl	$2, -64(%rbp)
.LBB120_27:                             # %if.end
	jmp	.LBB120_29
.LBB120_28:                             # %if.else70
	movl	$0, -64(%rbp)
.LBB120_29:                             # %if.end71
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB120_31
# %bb.30:                               # %if.then73
	movb	$0, %al
	callq	decide_intrabk_SAD
.LBB120_31:                             # %if.end74
	movq	img, %rax
	movl	12(%rax), %edi
	callq	RandomIntra
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orl	-136(%rbp), %eax
	movl	%eax, -136(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	movl	%eax, -332(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovel	%edx, %eax
	movl	%eax, -348(%rbp)
	movl	$1, -344(%rbp)
	cmpl	$0, -136(%rbp)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -384(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB120_33
# %bb.32:                               # %land.rhs86
	movq	input, %rax
	cmpl	$0, 2368(%rax)
	setne	%cl
.LBB120_33:                             # %land.end88
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -380(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB120_35
# %bb.34:                               # %land.rhs92
	movq	input, %rax
	cmpl	$0, 2372(%rax)
	setne	%al
.LBB120_35:                             # %land.end94
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -376(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB120_37
# %bb.36:                               # %land.rhs98
	movq	input, %rax
	cmpl	$0, 2376(%rax)
	setne	%cl
.LBB120_37:                             # %land.end100
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -372(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB120_39
# %bb.38:                               # %land.rhs104
	movq	input, %rax
	cmpl	$0, 2380(%rax)
	setne	%al
.LBB120_39:                             # %land.end106
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -368(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB120_41
# %bb.40:                               # %land.rhs110
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	setne	%cl
.LBB120_41:                             # %land.end112
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -364(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB120_43
# %bb.42:                               # %land.rhs116
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	setne	%al
.LBB120_43:                             # %land.end118
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -360(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB120_45
# %bb.44:                               # %land.rhs122
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	setne	%cl
.LBB120_45:                             # %land.end124
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -356(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB120_47
# %bb.46:                               # %if.then130
	movl	$0, -356(%rbp)
	movl	$0, -360(%rbp)
	movl	$0, -364(%rbp)
.LBB120_47:                             # %if.end134
	cmpl	$0, -368(%rbp)
	movb	$1, %al
	jne	.LBB120_51
# %bb.48:                               # %lor.lhs.false137
	cmpl	$0, -364(%rbp)
	movb	$1, %al
	jne	.LBB120_51
# %bb.49:                               # %lor.lhs.false140
	cmpl	$0, -360(%rbp)
	movb	$1, %al
	jne	.LBB120_51
# %bb.50:                               # %lor.rhs143
	cmpl	$0, -356(%rbp)
	setne	%al
.LBB120_51:                             # %lor.end146
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -352(%rbp)
	movl	-404(%rbp), %eax
	movl	%eax, -336(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB120_67
# %bb.52:                               # %if.then152
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB120_53:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_55 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_66
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB120_53 Depth=1
	movl	$0, -56(%rbp)
.LBB120_55:                             # %for.cond156
                                        #   Parent Loop BB120_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB120_64
# %bb.56:                               # %for.body161
                                        #   in Loop: Header=BB120_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB120_59
# %bb.57:                               # %land.lhs.true168
                                        #   in Loop: Header=BB120_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-88(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB120_59
# %bb.58:                               # %if.then177
                                        #   in Loop: Header=BB120_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB120_59:                             # %if.end183
                                        #   in Loop: Header=BB120_55 Depth=2
	movq	img, %rax
	cmpl	$2, 28(%rax)
	jne	.LBB120_62
# %bb.60:                               # %land.lhs.true187
                                        #   in Loop: Header=BB120_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-88(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB120_62
# %bb.61:                               # %if.then196
                                        #   in Loop: Header=BB120_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB120_62:                             # %if.end202
                                        #   in Loop: Header=BB120_55 Depth=2
	jmp	.LBB120_63
.LBB120_63:                             # %for.inc
                                        #   in Loop: Header=BB120_55 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB120_55
.LBB120_64:                             # %for.end
                                        #   in Loop: Header=BB120_53 Depth=1
	jmp	.LBB120_65
.LBB120_65:                             # %for.inc203
                                        #   in Loop: Header=BB120_53 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB120_53
.LBB120_66:                             # %for.end205
	jmp	.LBB120_93
.LBB120_67:                             # %if.else206
	cmpl	$0, -284(%rbp)
	je	.LBB120_83
# %bb.68:                               # %if.then208
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB120_69:                             # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_71 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_82
# %bb.70:                               # %for.body214
                                        #   in Loop: Header=BB120_69 Depth=1
	movl	$0, -56(%rbp)
.LBB120_71:                             # %for.cond215
                                        #   Parent Loop BB120_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB120_80
# %bb.72:                               # %for.body220
                                        #   in Loop: Header=BB120_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB120_75
# %bb.73:                               # %land.lhs.true230
                                        #   in Loop: Header=BB120_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, (%rax)
	jne	.LBB120_75
# %bb.74:                               # %if.then238
                                        #   in Loop: Header=BB120_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB120_75:                             # %if.end244
                                        #   in Loop: Header=BB120_71 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	jne	.LBB120_78
# %bb.76:                               # %land.lhs.true249
                                        #   in Loop: Header=BB120_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB120_78
# %bb.77:                               # %if.then257
                                        #   in Loop: Header=BB120_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB120_78:                             # %if.end263
                                        #   in Loop: Header=BB120_71 Depth=2
	jmp	.LBB120_79
.LBB120_79:                             # %for.inc264
                                        #   in Loop: Header=BB120_71 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB120_71
.LBB120_80:                             # %for.end266
                                        #   in Loop: Header=BB120_69 Depth=1
	jmp	.LBB120_81
.LBB120_81:                             # %for.inc267
                                        #   in Loop: Header=BB120_69 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB120_69
.LBB120_82:                             # %for.end269
	jmp	.LBB120_92
.LBB120_83:                             # %if.else270
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB120_84:                             # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_86 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_91
# %bb.85:                               # %for.body276
                                        #   in Loop: Header=BB120_84 Depth=1
	movl	$0, -56(%rbp)
.LBB120_86:                             # %for.cond277
                                        #   Parent Loop BB120_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB120_89
# %bb.87:                               # %for.body282
                                        #   in Loop: Header=BB120_86 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
# %bb.88:                               # %for.inc288
                                        #   in Loop: Header=BB120_86 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB120_86
.LBB120_89:                             # %for.end290
                                        #   in Loop: Header=BB120_84 Depth=1
	jmp	.LBB120_90
.LBB120_90:                             # %for.inc291
                                        #   in Loop: Header=BB120_84 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB120_84
.LBB120_91:                             # %for.end293
	jmp	.LBB120_92
.LBB120_92:                             # %if.end294
	jmp	.LBB120_93
.LBB120_93:                             # %if.end295
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB120_162
# %bb.94:                               # %if.then298
	vmovsd	.LCPI120_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	40(%rax), %xmm0, %xmm1
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movq	input, %rax
	cmpl	$0, 3332(%rax)
	je	.LBB120_100
# %bb.95:                               # %if.then303
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB120_98
# %bb.96:                               # %land.lhs.true307
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB120_98
# %bb.97:                               # %if.then310
	vmovsd	.LCPI120_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI120_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	input, %rax
	vmovsd	3376(%rax), %xmm2       # xmm2 = mem[0],zero
	vmovsd	%xmm2, -456(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-456(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB120_99
.LBB120_98:                             # %if.else315
	vmovsd	.LCPI120_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI120_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	input, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	vmovsd	3336(%rax,%rcx,8), %xmm2 # xmm2 = mem[0],zero
	vmovsd	%xmm2, -464(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-464(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
.LBB120_99:                             # %if.end326
	jmp	.LBB120_159
.LBB120_100:                            # %if.else327
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB120_103
# %bb.101:                              # %land.lhs.true331
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB120_103
# %bb.102:                              # %cond.true335
	vmovsd	.LCPI120_2(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB120_104
.LBB120_103:                            # %cond.false336
	vmovsd	.LCPI120_2(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI120_3(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	input, %rax
	vcvtsi2sdl	20(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vsubsd	%xmm1, %xmm0, %xmm0
.LBB120_104:                            # %cond.end340
	vmovsd	%xmm0, -480(%rbp)
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	jle	.LBB120_130
# %bb.105:                              # %if.then344
	vmovsd	.LCPI120_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI120_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI120_9(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB120_116
# %bb.106:                              # %cond.true352
	vmovsd	.LCPI120_8(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI120_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB120_108
# %bb.107:                              # %cond.true356
	vmovsd	.LCPI120_8(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB120_109
.LBB120_108:                            # %cond.false357
	vmovsd	.LCPI120_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB120_109:                            # %cond.end359
	vmovsd	.LCPI120_5(%rip), %xmm2 # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB120_111
# %bb.110:                              # %cond.true363
	vmovsd	.LCPI120_5(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB120_115
.LBB120_111:                            # %cond.false364
	vmovsd	.LCPI120_8(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI120_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB120_113
# %bb.112:                              # %cond.true368
	vmovsd	.LCPI120_8(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB120_114
.LBB120_113:                            # %cond.false369
	vmovsd	.LCPI120_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB120_114:                            # %cond.end371
.LBB120_115:                            # %cond.end373
	jmp	.LBB120_129
.LBB120_116:                            # %cond.false375
	cmpl	$0, -300(%rbp)
	je	.LBB120_127
# %bb.117:                              # %cond.true377
	vmovsd	.LCPI120_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI120_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB120_119
# %bb.118:                              # %cond.true381
	vmovsd	.LCPI120_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB120_120
.LBB120_119:                            # %cond.false382
	vmovsd	.LCPI120_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB120_120:                            # %cond.end384
	vmovsd	.LCPI120_7(%rip), %xmm2 # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB120_122
# %bb.121:                              # %cond.true388
	vmovsd	.LCPI120_7(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB120_126
.LBB120_122:                            # %cond.false389
	vmovsd	.LCPI120_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI120_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB120_124
# %bb.123:                              # %cond.true393
	vmovsd	.LCPI120_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB120_125
.LBB120_124:                            # %cond.false394
	vmovsd	.LCPI120_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB120_125:                            # %cond.end396
.LBB120_126:                            # %cond.end398
	jmp	.LBB120_128
.LBB120_127:                            # %cond.false400
	vmovsd	.LCPI120_2(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB120_128
.LBB120_128:                            # %cond.end401
.LBB120_129:                            # %cond.end403
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB120_146
.LBB120_130:                            # %if.else406
	vmovsd	.LCPI120_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI120_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI120_4(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB120_132
# %bb.131:                              # %cond.true414
	vmovsd	.LCPI120_8(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB120_145
.LBB120_132:                            # %cond.false415
	cmpl	$0, -300(%rbp)
	je	.LBB120_143
# %bb.133:                              # %cond.true417
	vmovsd	.LCPI120_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI120_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB120_135
# %bb.134:                              # %cond.true421
	vmovsd	.LCPI120_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB120_136
.LBB120_135:                            # %cond.false422
	vmovsd	.LCPI120_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB120_136:                            # %cond.end424
	vmovsd	.LCPI120_7(%rip), %xmm2 # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB120_138
# %bb.137:                              # %cond.true428
	vmovsd	.LCPI120_7(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB120_142
.LBB120_138:                            # %cond.false429
	vmovsd	.LCPI120_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI120_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB120_140
# %bb.139:                              # %cond.true433
	vmovsd	.LCPI120_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB120_141
.LBB120_140:                            # %cond.false434
	vmovsd	.LCPI120_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB120_141:                            # %cond.end436
.LBB120_142:                            # %cond.end438
	jmp	.LBB120_144
.LBB120_143:                            # %cond.false440
	vmovsd	.LCPI120_2(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB120_144
.LBB120_144:                            # %cond.end441
.LBB120_145:                            # %cond.end443
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB120_146:                            # %if.end446
	movq	input, %rax
	cmpl	$2, 1320(%rax)
	jne	.LBB120_154
# %bb.147:                              # %if.then449
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB120_153
# %bb.148:                              # %land.lhs.true453
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB120_153
# %bb.149:                              # %if.then456
	vmovsd	.LCPI120_12(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI120_13(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB120_151
# %bb.150:                              # %cond.true464
	vmovsd	.LCPI120_12(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB120_152
.LBB120_151:                            # %cond.false465
	vmovsd	.LCPI120_13(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
.LBB120_152:                            # %cond.end473
	vmovsd	.LCPI120_2(%rip), %xmm1 # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB120_153:                            # %if.end477
	jmp	.LBB120_158
.LBB120_154:                            # %if.else478
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB120_157
# %bb.155:                              # %land.lhs.true482
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB120_157
# %bb.156:                              # %if.then485
	vmovsd	.LCPI120_11(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB120_157:                            # %if.end487
	jmp	.LBB120_158
.LBB120_158:                            # %if.end488
	vmovsd	-480(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB120_159:                            # %if.end490
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB120_161
# %bb.160:                              # %if.then492
	vmovsd	.LCPI120_14(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB120_161:                            # %if.end494
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	sqrt
	vmovsd	%xmm0, -168(%rbp)
	jmp	.LBB120_166
.LBB120_162:                            # %if.else496
	xorl	%eax, %eax
	movq	img, %rcx
	movl	40(%rcx), %ecx
	subl	$12, %ecx
	cmpl	%ecx, %eax
	jle	.LBB120_164
# %bb.163:                              # %cond.true501
	xorl	%eax, %eax
	jmp	.LBB120_165
.LBB120_164:                            # %cond.false502
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
.LBB120_165:                            # %cond.end505
	cltq
	vcvtsi2sdl	QP2QUANT(,%rax,4), %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	vmovsd	%xmm0, -160(%rbp)
.LBB120_166:                            # %if.end510
	vmovsd	.LCPI120_15(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI120_16(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -32(%rbp)
.LBB120_167:                            # %for.cond514
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$15, -32(%rbp)
	jge	.LBB120_170
# %bb.168:                              # %for.body517
                                        #   in Loop: Header=BB120_167 Depth=1
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
# %bb.169:                              # %for.inc520
                                        #   in Loop: Header=BB120_167 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB120_167
.LBB120_170:                            # %for.end522
	movl	$0, -260(%rbp)
.LBB120_171:                            # %for.cond523
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_181 Depth 2
                                        #       Child Loop BB120_184 Depth 3
                                        #         Child Loop BB120_190 Depth 4
                                        #         Child Loop BB120_210 Depth 4
                                        #         Child Loop BB120_300 Depth 4
                                        #           Child Loop BB120_302 Depth 5
                                        #         Child Loop BB120_309 Depth 4
                                        #           Child Loop BB120_311 Depth 5
                                        #         Child Loop BB120_326 Depth 4
                                        #           Child Loop BB120_328 Depth 5
                                        #         Child Loop BB120_335 Depth 4
                                        #           Child Loop BB120_337 Depth 5
                                        #         Child Loop BB120_355 Depth 4
                                        #           Child Loop BB120_357 Depth 5
                                        #         Child Loop BB120_374 Depth 4
                                        #           Child Loop BB120_376 Depth 5
                                        #     Child Loop BB120_416 Depth 2
                                        #       Child Loop BB120_418 Depth 3
                                        #         Child Loop BB120_445 Depth 4
                                        #         Child Loop BB120_464 Depth 4
                                        #           Child Loop BB120_466 Depth 5
                                        #         Child Loop BB120_473 Depth 4
                                        #         Child Loop BB120_508 Depth 4
                                        #           Child Loop BB120_510 Depth 5
                                        #         Child Loop BB120_532 Depth 4
                                        #           Child Loop BB120_534 Depth 5
                                        #             Child Loop BB120_536 Depth 6
                                        #         Child Loop BB120_544 Depth 4
                                        #           Child Loop BB120_546 Depth 5
                                        #       Child Loop BB120_569 Depth 3
                                        #         Child Loop BB120_571 Depth 4
                                        #           Child Loop BB120_573 Depth 5
                                        #       Child Loop BB120_581 Depth 3
                                        #         Child Loop BB120_583 Depth 4
                                        #     Child Loop BB120_601 Depth 2
                                        #       Child Loop BB120_603 Depth 3
                                        #         Child Loop BB120_614 Depth 4
                                        #         Child Loop BB120_633 Depth 4
                                        #           Child Loop BB120_635 Depth 5
                                        #         Child Loop BB120_642 Depth 4
                                        #         Child Loop BB120_677 Depth 4
                                        #           Child Loop BB120_679 Depth 5
                                        #         Child Loop BB120_701 Depth 4
                                        #           Child Loop BB120_703 Depth 5
                                        #             Child Loop BB120_705 Depth 6
                                        #         Child Loop BB120_713 Depth 4
                                        #           Child Loop BB120_715 Depth 5
                                        #         Child Loop BB120_723 Depth 4
                                        #           Child Loop BB120_725 Depth 5
                                        #       Child Loop BB120_745 Depth 3
                                        #         Child Loop BB120_747 Depth 4
                                        #           Child Loop BB120_749 Depth 5
                                        #       Child Loop BB120_757 Depth 3
                                        #         Child Loop BB120_759 Depth 4
                                        #       Child Loop BB120_766 Depth 3
                                        #         Child Loop BB120_768 Depth 4
                                        #       Child Loop BB120_778 Depth 3
                                        #         Child Loop BB120_780 Depth 4
                                        #       Child Loop BB120_786 Depth 3
                                        #       Child Loop BB120_791 Depth 3
                                        #         Child Loop BB120_793 Depth 4
                                        #     Child Loop BB120_803 Depth 2
                                        #       Child Loop BB120_805 Depth 3
                                        #     Child Loop BB120_835 Depth 2
                                        #       Child Loop BB120_853 Depth 3
                                        #         Child Loop BB120_908 Depth 4
                                        #           Child Loop BB120_911 Depth 5
                                        #             Child Loop BB120_913 Depth 6
                                        #           Child Loop BB120_920 Depth 5
                                        #             Child Loop BB120_922 Depth 6
                                        #         Child Loop BB120_955 Depth 4
                                        #           Child Loop BB120_957 Depth 5
                                        #     Child Loop BB120_981 Depth 2
                                        #       Child Loop BB120_1014 Depth 3
                                        #         Child Loop BB120_1017 Depth 4
                                        #           Child Loop BB120_1019 Depth 5
                                        #         Child Loop BB120_1026 Depth 4
                                        #           Child Loop BB120_1028 Depth 5
                                        #       Child Loop BB120_1061 Depth 3
                                        #         Child Loop BB120_1063 Depth 4
                                        #     Child Loop BB120_1113 Depth 2
                                        #       Child Loop BB120_1115 Depth 3
                                        #     Child Loop BB120_1127 Depth 2
                                        #       Child Loop BB120_1129 Depth 3
                                        #         Child Loop BB120_1131 Depth 4
                                        #     Child Loop BB120_1141 Depth 2
                                        #       Child Loop BB120_1143 Depth 3
                                        #     Child Loop BB120_1152 Depth 2
                                        #       Child Loop BB120_1154 Depth 3
                                        #     Child Loop BB120_1160 Depth 2
                                        #       Child Loop BB120_1162 Depth 3
                                        #     Child Loop BB120_1174 Depth 2
                                        #       Child Loop BB120_1176 Depth 3
                                        #         Child Loop BB120_1178 Depth 4
                                        #     Child Loop BB120_1189 Depth 2
                                        #       Child Loop BB120_1191 Depth 3
                                        #     Child Loop BB120_1202 Depth 2
                                        #       Child Loop BB120_1204 Depth 3
                                        #     Child Loop BB120_1211 Depth 2
                                        #       Child Loop BB120_1213 Depth 3
                                        #     Child Loop BB120_1221 Depth 2
                                        #       Child Loop BB120_1223 Depth 3
                                        #     Child Loop BB120_1229 Depth 2
                                        #       Child Loop BB120_1231 Depth 3
                                        #     Child Loop BB120_1237 Depth 2
                                        #       Child Loop BB120_1239 Depth 3
                                        #     Child Loop BB120_1245 Depth 2
                                        #       Child Loop BB120_1247 Depth 3
	movl	-260(%rbp), %eax
	cmpl	-308(%rbp), %eax
	jge	.LBB120_1291
# %bb.172:                              # %for.body526
                                        #   in Loop: Header=BB120_171 Depth=1
	cmpl	$2, -308(%rbp)
	jne	.LBB120_177
# %bb.173:                              # %if.then529
                                        #   in Loop: Header=BB120_171 Depth=1
	cmpl	$0, -260(%rbp)
	jne	.LBB120_175
# %bb.174:                              # %if.then532
                                        #   in Loop: Header=BB120_171 Depth=1
	movq	input, %rax
	movl	$1, 2464(%rax)
	jmp	.LBB120_176
.LBB120_175:                            # %if.else534
                                        #   in Loop: Header=BB120_171 Depth=1
	movq	input, %rax
	movl	$2, 2464(%rax)
.LBB120_176:                            # %if.end536
                                        #   in Loop: Header=BB120_171 Depth=1
	jmp	.LBB120_177
.LBB120_177:                            # %if.end537
                                        #   in Loop: Header=BB120_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
	cmpl	$0, -136(%rbp)
	jne	.LBB120_831
# %bb.178:                              # %if.then539
                                        #   in Loop: Header=BB120_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB120_180
# %bb.179:                              # %if.then541
                                        #   in Loop: Header=BB120_171 Depth=1
	movb	$0, %al
	callq	Get_Direct_Motion_Vectors
.LBB120_180:                            # %if.end542
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
	movl	$1, best_mode
	movl	$1, -32(%rbp)
.LBB120_181:                            # %for.cond543
                                        #   Parent Loop BB120_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_184 Depth 3
                                        #         Child Loop BB120_190 Depth 4
                                        #         Child Loop BB120_210 Depth 4
                                        #         Child Loop BB120_300 Depth 4
                                        #           Child Loop BB120_302 Depth 5
                                        #         Child Loop BB120_309 Depth 4
                                        #           Child Loop BB120_311 Depth 5
                                        #         Child Loop BB120_326 Depth 4
                                        #           Child Loop BB120_328 Depth 5
                                        #         Child Loop BB120_335 Depth 4
                                        #           Child Loop BB120_337 Depth 5
                                        #         Child Loop BB120_355 Depth 4
                                        #           Child Loop BB120_357 Depth 5
                                        #         Child Loop BB120_374 Depth 4
                                        #           Child Loop BB120_376 Depth 5
	cmpl	$4, -32(%rbp)
	jge	.LBB120_413
# %bb.182:                              # %for.body546
                                        #   in Loop: Header=BB120_181 Depth=2
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB120_411
# %bb.183:                              # %if.then553
                                        #   in Loop: Header=BB120_181 Depth=2
	movl	$0, -60(%rbp)
	movl	$0, -28(%rbp)
.LBB120_184:                            # %for.cond554
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_181 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB120_190 Depth 4
                                        #         Child Loop BB120_210 Depth 4
                                        #         Child Loop BB120_300 Depth 4
                                        #           Child Loop BB120_302 Depth 5
                                        #         Child Loop BB120_309 Depth 4
                                        #           Child Loop BB120_311 Depth 5
                                        #         Child Loop BB120_326 Depth 4
                                        #           Child Loop BB120_328 Depth 5
                                        #         Child Loop BB120_335 Depth 4
                                        #           Child Loop BB120_337 Depth 5
                                        #         Child Loop BB120_355 Depth 4
                                        #           Child Loop BB120_357 Depth 5
                                        #         Child Loop BB120_374 Depth 4
                                        #           Child Loop BB120_376 Depth 5
	movl	-28(%rbp), %eax
	movl	-32(%rbp), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	movl	$2, %edx
	cmovel	%ecx, %edx
	cmpl	%edx, %eax
	jge	.LBB120_404
# %bb.185:                              # %for.body560
                                        #   in Loop: Header=BB120_184 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	xorl	%ecx, %ecx
	cmpl	$1, -28(%rbp)
	jne	.LBB120_187
# %bb.186:                              # %land.rhs563
                                        #   in Loop: Header=BB120_184 Depth=3
	cmpl	$2, -32(%rbp)
	sete	%cl
.LBB120_187:                            # %land.end566
                                        #   in Loop: Header=BB120_184 Depth=3
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$2, %ecx
	cmovnel	%ecx, %edx
	movl	%edx, -24(%rbp)
	cmpl	$1, -28(%rbp)
	jne	.LBB120_189
# %bb.188:                              # %land.rhs571
                                        #   in Loop: Header=BB120_184 Depth=3
	cmpl	$3, -32(%rbp)
	sete	%al
.LBB120_189:                            # %land.end574
                                        #   in Loop: Header=BB120_184 Depth=3
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB120_190:                            # %for.cond577
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_181 Depth=2
                                        #       Parent Loop BB120_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB120_208
# %bb.191:                              # %for.body584
                                        #   in Loop: Header=BB120_190 Depth=4
	cmpl	$0, -280(%rbp)
	je	.LBB120_194
# %bb.192:                              # %lor.lhs.false586
                                        #   in Loop: Header=BB120_190 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB120_194
# %bb.193:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB120_190 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB120_206
.LBB120_194:                            # %if.then594
                                        #   in Loop: Header=BB120_190 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB120_199
# %bb.195:                              # %cond.true597
                                        #   in Loop: Header=BB120_190 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB120_197
# %bb.196:                              # %cond.true603
                                        #   in Loop: Header=BB120_190 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB120_198
.LBB120_197:                            # %cond.false604
                                        #   in Loop: Header=BB120_190 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB120_198:                            # %cond.end607
                                        #   in Loop: Header=BB120_190 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB120_203
.LBB120_199:                            # %cond.false610
                                        #   in Loop: Header=BB120_190 Depth=4
	vmovsd	.LCPI120_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB120_201
# %bb.200:                              # %cond.true615
                                        #   in Loop: Header=BB120_190 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB120_202
.LBB120_201:                            # %cond.false617
                                        #   in Loop: Header=BB120_190 Depth=4
	movl	$1, %eax
	jmp	.LBB120_202
.LBB120_202:                            # %cond.end618
                                        #   in Loop: Header=BB120_190 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB120_203:                            # %cond.end623
                                        #   in Loop: Header=BB120_190 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB120_205
# %bb.204:                              # %if.then635
                                        #   in Loop: Header=BB120_190 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB120_205:                            # %if.end636
                                        #   in Loop: Header=BB120_190 Depth=4
	jmp	.LBB120_206
.LBB120_206:                            # %if.end637
                                        #   in Loop: Header=BB120_190 Depth=4
	jmp	.LBB120_207
.LBB120_207:                            # %for.inc638
                                        #   in Loop: Header=BB120_190 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB120_190
.LBB120_208:                            # %for.end640
                                        #   in Loop: Header=BB120_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB120_296
# %bb.209:                              # %if.then642
                                        #   in Loop: Header=BB120_184 Depth=3
	movl	-204(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB120_210:                            # %for.cond643
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_181 Depth=2
                                        #       Parent Loop BB120_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB120_224
# %bb.211:                              # %for.body650
                                        #   in Loop: Header=BB120_210 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB120_216
# %bb.212:                              # %cond.true653
                                        #   in Loop: Header=BB120_210 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB120_214
# %bb.213:                              # %cond.true659
                                        #   in Loop: Header=BB120_210 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB120_215
.LBB120_214:                            # %cond.false660
                                        #   in Loop: Header=BB120_210 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB120_215:                            # %cond.end663
                                        #   in Loop: Header=BB120_210 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB120_220
.LBB120_216:                            # %cond.false667
                                        #   in Loop: Header=BB120_210 Depth=4
	vmovsd	.LCPI120_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB120_218
# %bb.217:                              # %cond.true672
                                        #   in Loop: Header=BB120_210 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB120_219
.LBB120_218:                            # %cond.false674
                                        #   in Loop: Header=BB120_210 Depth=4
	movl	$1, %eax
	jmp	.LBB120_219
.LBB120_219:                            # %cond.end675
                                        #   in Loop: Header=BB120_210 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB120_220:                            # %cond.end680
                                        #   in Loop: Header=BB120_210 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB120_222
# %bb.221:                              # %if.then692
                                        #   in Loop: Header=BB120_210 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB120_222:                            # %if.end693
                                        #   in Loop: Header=BB120_210 Depth=4
	jmp	.LBB120_223
.LBB120_223:                            # %for.inc694
                                        #   in Loop: Header=BB120_210 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB120_210
.LBB120_224:                            # %for.end696
                                        #   in Loop: Header=BB120_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB120_232
# %bb.225:                              # %cond.true699
                                        #   in Loop: Header=BB120_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB120_227
# %bb.226:                              # %cond.true705
                                        #   in Loop: Header=BB120_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB120_228
.LBB120_227:                            # %cond.false706
                                        #   in Loop: Header=BB120_184 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB120_228:                            # %cond.end709
                                        #   in Loop: Header=BB120_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB120_230
# %bb.229:                              # %cond.true718
                                        #   in Loop: Header=BB120_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB120_231
.LBB120_230:                            # %cond.false719
                                        #   in Loop: Header=BB120_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB120_231:                            # %cond.end721
                                        #   in Loop: Header=BB120_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB120_236
.LBB120_232:                            # %cond.false726
                                        #   in Loop: Header=BB120_184 Depth=3
	vmovsd	.LCPI120_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB120_234
# %bb.233:                              # %cond.true731
                                        #   in Loop: Header=BB120_184 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB120_235
.LBB120_234:                            # %cond.false733
                                        #   in Loop: Header=BB120_184 Depth=3
	movl	$1, %eax
	jmp	.LBB120_235
.LBB120_235:                            # %cond.end734
                                        #   in Loop: Header=BB120_184 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB120_236:                            # %cond.end739
                                        #   in Loop: Header=BB120_184 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB120_258
# %bb.237:                              # %land.lhs.true745
                                        #   in Loop: Header=BB120_184 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB120_258
# %bb.238:                              # %land.lhs.true749
                                        #   in Loop: Header=BB120_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB120_258
# %bb.239:                              # %if.then751
                                        #   in Loop: Header=BB120_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB120_247
# %bb.240:                              # %cond.true754
                                        #   in Loop: Header=BB120_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB120_242
# %bb.241:                              # %cond.true760
                                        #   in Loop: Header=BB120_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB120_243
.LBB120_242:                            # %cond.false761
                                        #   in Loop: Header=BB120_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB120_243:                            # %cond.end763
                                        #   in Loop: Header=BB120_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB120_245
# %bb.244:                              # %cond.true772
                                        #   in Loop: Header=BB120_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB120_246
.LBB120_245:                            # %cond.false773
                                        #   in Loop: Header=BB120_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB120_246:                            # %cond.end775
                                        #   in Loop: Header=BB120_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB120_248
.LBB120_247:                            # %cond.false780
                                        #   in Loop: Header=BB120_184 Depth=3
	vmovsd	.LCPI120_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB120_248:                            # %cond.end784
                                        #   in Loop: Header=BB120_184 Depth=3
	movl	%eax, -148(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r9d, %r9d
	callq	BPredPartitionCost
	addl	-148(%rbp), %eax
	movl	%eax, -148(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB120_256
# %bb.249:                              # %cond.true790
                                        #   in Loop: Header=BB120_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB120_251
# %bb.250:                              # %cond.true796
                                        #   in Loop: Header=BB120_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB120_252
.LBB120_251:                            # %cond.false797
                                        #   in Loop: Header=BB120_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB120_252:                            # %cond.end799
                                        #   in Loop: Header=BB120_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB120_254
# %bb.253:                              # %cond.true808
                                        #   in Loop: Header=BB120_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB120_255
.LBB120_254:                            # %cond.false809
                                        #   in Loop: Header=BB120_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB120_255:                            # %cond.end811
                                        #   in Loop: Header=BB120_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB120_257
.LBB120_256:                            # %cond.false816
                                        #   in Loop: Header=BB120_184 Depth=3
	vmovsd	.LCPI120_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB120_257:                            # %cond.end820
                                        #   in Loop: Header=BB120_184 Depth=3
	movl	%eax, -188(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$1, %r9d
	callq	BPredPartitionCost
	addl	-188(%rbp), %eax
	movl	%eax, -188(%rbp)
	jmp	.LBB120_259
.LBB120_258:                            # %if.else824
                                        #   in Loop: Header=BB120_184 Depth=3
	movl	$2147483647, -148(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -188(%rbp) # imm = 0x7FFFFFFF
.LBB120_259:                            # %if.end825
                                        #   in Loop: Header=BB120_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB120_286
# %bb.260:                              # %land.lhs.true828
                                        #   in Loop: Header=BB120_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB120_286
# %bb.261:                              # %if.then831
                                        #   in Loop: Header=BB120_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB120_266
# %bb.262:                              # %land.lhs.true834
                                        #   in Loop: Header=BB120_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB120_266
# %bb.263:                              # %land.lhs.true837
                                        #   in Loop: Header=BB120_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB120_266
# %bb.264:                              # %land.lhs.true840
                                        #   in Loop: Header=BB120_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-188(%rbp), %eax
	jge	.LBB120_266
# %bb.265:                              # %if.then843
                                        #   in Loop: Header=BB120_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB120_285
.LBB120_266:                            # %if.else845
                                        #   in Loop: Header=BB120_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB120_271
# %bb.267:                              # %land.lhs.true848
                                        #   in Loop: Header=BB120_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB120_271
# %bb.268:                              # %land.lhs.true851
                                        #   in Loop: Header=BB120_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB120_271
# %bb.269:                              # %land.lhs.true854
                                        #   in Loop: Header=BB120_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-188(%rbp), %eax
	jge	.LBB120_271
# %bb.270:                              # %if.then857
                                        #   in Loop: Header=BB120_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB120_284
.LBB120_271:                            # %if.else859
                                        #   in Loop: Header=BB120_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB120_276
# %bb.272:                              # %land.lhs.true862
                                        #   in Loop: Header=BB120_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB120_276
# %bb.273:                              # %land.lhs.true865
                                        #   in Loop: Header=BB120_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB120_276
# %bb.274:                              # %land.lhs.true868
                                        #   in Loop: Header=BB120_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-188(%rbp), %eax
	jge	.LBB120_276
# %bb.275:                              # %if.then871
                                        #   in Loop: Header=BB120_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movw	$0, -38(%rbp)
	jmp	.LBB120_283
.LBB120_276:                            # %if.else876
                                        #   in Loop: Header=BB120_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB120_281
# %bb.277:                              # %land.lhs.true879
                                        #   in Loop: Header=BB120_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB120_281
# %bb.278:                              # %land.lhs.true882
                                        #   in Loop: Header=BB120_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB120_281
# %bb.279:                              # %land.lhs.true885
                                        #   in Loop: Header=BB120_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-188(%rbp), %eax
	jg	.LBB120_281
# %bb.280:                              # %if.then888
                                        #   in Loop: Header=BB120_184 Depth=3
	movw	$2, -50(%rbp)
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movl	-148(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$1, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$1, 71952(%rax,%rcx,2)
	jmp	.LBB120_282
.LBB120_281:                            # %if.else893
                                        #   in Loop: Header=BB120_184 Depth=3
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movw	$2, -50(%rbp)
	movl	-188(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$2, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$2, 71952(%rax,%rcx,2)
.LBB120_282:                            # %if.end898
                                        #   in Loop: Header=BB120_184 Depth=3
	jmp	.LBB120_283
.LBB120_283:                            # %if.end899
                                        #   in Loop: Header=BB120_184 Depth=3
	jmp	.LBB120_284
.LBB120_284:                            # %if.end900
                                        #   in Loop: Header=BB120_184 Depth=3
	jmp	.LBB120_285
.LBB120_285:                            # %if.end901
                                        #   in Loop: Header=BB120_184 Depth=3
	jmp	.LBB120_295
.LBB120_286:                            # %if.else902
                                        #   in Loop: Header=BB120_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB120_289
# %bb.287:                              # %land.lhs.true905
                                        #   in Loop: Header=BB120_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB120_289
# %bb.288:                              # %if.then908
                                        #   in Loop: Header=BB120_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB120_294
.LBB120_289:                            # %if.else910
                                        #   in Loop: Header=BB120_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB120_292
# %bb.290:                              # %land.lhs.true913
                                        #   in Loop: Header=BB120_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB120_292
# %bb.291:                              # %if.then916
                                        #   in Loop: Header=BB120_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB120_293
.LBB120_292:                            # %if.else918
                                        #   in Loop: Header=BB120_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB120_293:                            # %if.end920
                                        #   in Loop: Header=BB120_184 Depth=3
	jmp	.LBB120_294
.LBB120_294:                            # %if.end921
                                        #   in Loop: Header=BB120_184 Depth=3
	jmp	.LBB120_295
.LBB120_295:                            # %if.end922
                                        #   in Loop: Header=BB120_184 Depth=3
	jmp	.LBB120_297
.LBB120_296:                            # %if.else923
                                        #   in Loop: Header=BB120_184 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB120_297:                            # %if.end925
                                        #   in Loop: Header=BB120_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB120_353
# %bb.298:                              # %if.then928
                                        #   in Loop: Header=BB120_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB120_308
# %bb.299:                              # %if.then932
                                        #   in Loop: Header=BB120_184 Depth=3
	movl	$0, -24(%rbp)
.LBB120_300:                            # %for.cond933
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_181 Depth=2
                                        #       Parent Loop BB120_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB120_302 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB120_307
# %bb.301:                              # %for.body936
                                        #   in Loop: Header=BB120_300 Depth=4
	movl	$0, -20(%rbp)
.LBB120_302:                            # %for.cond937
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_181 Depth=2
                                        #       Parent Loop BB120_184 Depth=3
                                        #         Parent Loop BB120_300 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB120_305
# %bb.303:                              # %for.body940
                                        #   in Loop: Header=BB120_302 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.304:                              # %for.inc997
                                        #   in Loop: Header=BB120_302 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_302
.LBB120_305:                            # %for.end999
                                        #   in Loop: Header=BB120_300 Depth=4
	jmp	.LBB120_306
.LBB120_306:                            # %for.inc1000
                                        #   in Loop: Header=BB120_300 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_300
.LBB120_307:                            # %for.end1002
                                        #   in Loop: Header=BB120_184 Depth=3
	jmp	.LBB120_323
.LBB120_308:                            # %if.else1003
                                        #   in Loop: Header=BB120_184 Depth=3
	movl	$0, -24(%rbp)
.LBB120_309:                            # %for.cond1004
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_181 Depth=2
                                        #       Parent Loop BB120_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB120_311 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB120_322
# %bb.310:                              # %for.body1007
                                        #   in Loop: Header=BB120_309 Depth=4
	movl	$0, -20(%rbp)
.LBB120_311:                            # %for.cond1008
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_181 Depth=2
                                        #       Parent Loop BB120_184 Depth=3
                                        #         Parent Loop BB120_309 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB120_320
# %bb.312:                              # %for.body1011
                                        #   in Loop: Header=BB120_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB120_317
# %bb.313:                              # %if.then1016
                                        #   in Loop: Header=BB120_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB120_315
# %bb.314:                              # %cond.true1023
                                        #   in Loop: Header=BB120_311 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB120_316
.LBB120_315:                            # %cond.false1024
                                        #   in Loop: Header=BB120_311 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB120_316:                            # %cond.end1025
                                        #   in Loop: Header=BB120_311 Depth=5
	movq	%rax, -440(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-440(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-440(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB120_318
.LBB120_317:                            # %if.else1111
                                        #   in Loop: Header=BB120_311 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB120_318:                            # %if.end1217
                                        #   in Loop: Header=BB120_311 Depth=5
	jmp	.LBB120_319
.LBB120_319:                            # %for.inc1218
                                        #   in Loop: Header=BB120_311 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_311
.LBB120_320:                            # %for.end1220
                                        #   in Loop: Header=BB120_309 Depth=4
	jmp	.LBB120_321
.LBB120_321:                            # %for.inc1221
                                        #   in Loop: Header=BB120_309 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_309
.LBB120_322:                            # %for.end1223
                                        #   in Loop: Header=BB120_184 Depth=3
	jmp	.LBB120_323
.LBB120_323:                            # %if.end1224
                                        #   in Loop: Header=BB120_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB120_352
# %bb.324:                              # %if.then1226
                                        #   in Loop: Header=BB120_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB120_334
# %bb.325:                              # %if.then1230
                                        #   in Loop: Header=BB120_184 Depth=3
	movl	$0, -24(%rbp)
.LBB120_326:                            # %for.cond1231
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_181 Depth=2
                                        #       Parent Loop BB120_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB120_328 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB120_333
# %bb.327:                              # %for.body1234
                                        #   in Loop: Header=BB120_326 Depth=4
	movl	$0, -20(%rbp)
.LBB120_328:                            # %for.cond1235
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_181 Depth=2
                                        #       Parent Loop BB120_184 Depth=3
                                        #         Parent Loop BB120_326 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB120_331
# %bb.329:                              # %for.body1238
                                        #   in Loop: Header=BB120_328 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.330:                              # %for.inc1301
                                        #   in Loop: Header=BB120_328 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_328
.LBB120_331:                            # %for.end1303
                                        #   in Loop: Header=BB120_326 Depth=4
	jmp	.LBB120_332
.LBB120_332:                            # %for.inc1304
                                        #   in Loop: Header=BB120_326 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_326
.LBB120_333:                            # %for.end1306
                                        #   in Loop: Header=BB120_184 Depth=3
	jmp	.LBB120_351
.LBB120_334:                            # %if.else1307
                                        #   in Loop: Header=BB120_184 Depth=3
	movl	$0, -24(%rbp)
.LBB120_335:                            # %for.cond1308
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_181 Depth=2
                                        #       Parent Loop BB120_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB120_337 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB120_350
# %bb.336:                              # %for.body1311
                                        #   in Loop: Header=BB120_335 Depth=4
	movl	$0, -20(%rbp)
.LBB120_337:                            # %for.cond1312
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_181 Depth=2
                                        #       Parent Loop BB120_184 Depth=3
                                        #         Parent Loop BB120_335 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB120_348
# %bb.338:                              # %for.body1315
                                        #   in Loop: Header=BB120_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB120_343
# %bb.339:                              # %if.then1320
                                        #   in Loop: Header=BB120_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB120_341
# %bb.340:                              # %cond.true1328
                                        #   in Loop: Header=BB120_337 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB120_342
.LBB120_341:                            # %cond.false1330
                                        #   in Loop: Header=BB120_337 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB120_342:                            # %cond.end1332
                                        #   in Loop: Header=BB120_337 Depth=5
	movq	%rax, -432(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-432(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-432(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB120_346
.LBB120_343:                            # %if.else1419
                                        #   in Loop: Header=BB120_337 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB120_345
# %bb.344:                              # %if.then1474
                                        #   in Loop: Header=BB120_337 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB120_345:                            # %if.end1529
                                        #   in Loop: Header=BB120_337 Depth=5
	jmp	.LBB120_346
.LBB120_346:                            # %if.end1530
                                        #   in Loop: Header=BB120_337 Depth=5
	jmp	.LBB120_347
.LBB120_347:                            # %for.inc1531
                                        #   in Loop: Header=BB120_337 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_337
.LBB120_348:                            # %for.end1533
                                        #   in Loop: Header=BB120_335 Depth=4
	jmp	.LBB120_349
.LBB120_349:                            # %for.inc1534
                                        #   in Loop: Header=BB120_335 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_335
.LBB120_350:                            # %for.end1536
                                        #   in Loop: Header=BB120_184 Depth=3
	jmp	.LBB120_351
.LBB120_351:                            # %if.end1537
                                        #   in Loop: Header=BB120_184 Depth=3
	jmp	.LBB120_352
.LBB120_352:                            # %if.end1538
                                        #   in Loop: Header=BB120_184 Depth=3
	jmp	.LBB120_393
.LBB120_353:                            # %if.else1539
                                        #   in Loop: Header=BB120_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB120_373
# %bb.354:                              # %if.then1542
                                        #   in Loop: Header=BB120_184 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -24(%rbp)
.LBB120_355:                            # %for.cond1546
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_181 Depth=2
                                        #       Parent Loop BB120_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB120_357 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB120_372
# %bb.356:                              # %for.body1549
                                        #   in Loop: Header=BB120_355 Depth=4
	movl	$0, -20(%rbp)
.LBB120_357:                            # %for.cond1550
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_181 Depth=2
                                        #       Parent Loop BB120_184 Depth=3
                                        #         Parent Loop BB120_355 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB120_370
# %bb.358:                              # %for.body1553
                                        #   in Loop: Header=BB120_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB120_360
# %bb.359:                              # %if.then1557
                                        #   in Loop: Header=BB120_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB120_361
.LBB120_360:                            # %if.else1596
                                        #   in Loop: Header=BB120_357 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB120_361:                            # %if.end1676
                                        #   in Loop: Header=BB120_357 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB120_368
# %bb.362:                              # %if.then1678
                                        #   in Loop: Header=BB120_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB120_364
# %bb.363:                              # %if.then1682
                                        #   in Loop: Header=BB120_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB120_367
.LBB120_364:                            # %if.else1721
                                        #   in Loop: Header=BB120_357 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB120_366
# %bb.365:                              # %if.then1758
                                        #   in Loop: Header=BB120_357 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB120_366:                            # %if.end1805
                                        #   in Loop: Header=BB120_357 Depth=5
	jmp	.LBB120_367
.LBB120_367:                            # %if.end1806
                                        #   in Loop: Header=BB120_357 Depth=5
	jmp	.LBB120_368
.LBB120_368:                            # %if.end1807
                                        #   in Loop: Header=BB120_357 Depth=5
	jmp	.LBB120_369
.LBB120_369:                            # %for.inc1808
                                        #   in Loop: Header=BB120_357 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_357
.LBB120_370:                            # %for.end1810
                                        #   in Loop: Header=BB120_355 Depth=4
	jmp	.LBB120_371
.LBB120_371:                            # %for.inc1811
                                        #   in Loop: Header=BB120_355 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_355
.LBB120_372:                            # %for.end1813
                                        #   in Loop: Header=BB120_184 Depth=3
	jmp	.LBB120_392
.LBB120_373:                            # %if.else1814
                                        #   in Loop: Header=BB120_184 Depth=3
	movq	img, %rax
	movl	144(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -24(%rbp)
.LBB120_374:                            # %for.cond1818
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_181 Depth=2
                                        #       Parent Loop BB120_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB120_376 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB120_391
# %bb.375:                              # %for.body1821
                                        #   in Loop: Header=BB120_374 Depth=4
	movl	$0, -20(%rbp)
.LBB120_376:                            # %for.cond1822
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_181 Depth=2
                                        #       Parent Loop BB120_184 Depth=3
                                        #         Parent Loop BB120_374 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB120_389
# %bb.377:                              # %for.body1825
                                        #   in Loop: Header=BB120_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB120_379
# %bb.378:                              # %if.then1829
                                        #   in Loop: Header=BB120_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB120_380
.LBB120_379:                            # %if.else1868
                                        #   in Loop: Header=BB120_376 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB120_380:                            # %if.end1948
                                        #   in Loop: Header=BB120_376 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB120_387
# %bb.381:                              # %if.then1950
                                        #   in Loop: Header=BB120_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB120_383
# %bb.382:                              # %if.then1954
                                        #   in Loop: Header=BB120_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB120_386
.LBB120_383:                            # %if.else1993
                                        #   in Loop: Header=BB120_376 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB120_385
# %bb.384:                              # %if.then2030
                                        #   in Loop: Header=BB120_376 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB120_385:                            # %if.end2077
                                        #   in Loop: Header=BB120_376 Depth=5
	jmp	.LBB120_386
.LBB120_386:                            # %if.end2078
                                        #   in Loop: Header=BB120_376 Depth=5
	jmp	.LBB120_387
.LBB120_387:                            # %if.end2079
                                        #   in Loop: Header=BB120_376 Depth=5
	jmp	.LBB120_388
.LBB120_388:                            # %for.inc2080
                                        #   in Loop: Header=BB120_376 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_376
.LBB120_389:                            # %for.end2082
                                        #   in Loop: Header=BB120_374 Depth=4
	jmp	.LBB120_390
.LBB120_390:                            # %for.inc2083
                                        #   in Loop: Header=BB120_374 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_374
.LBB120_391:                            # %for.end2085
                                        #   in Loop: Header=BB120_184 Depth=3
	jmp	.LBB120_392
.LBB120_392:                            # %if.end2086
                                        #   in Loop: Header=BB120_184 Depth=3
	jmp	.LBB120_393
.LBB120_393:                            # %if.end2087
                                        #   in Loop: Header=BB120_184 Depth=3
	cmpl	$3, -32(%rbp)
	jne	.LBB120_395
# %bb.394:                              # %if.then2090
                                        #   in Loop: Header=BB120_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	jmp	.LBB120_399
.LBB120_395:                            # %if.else2106
                                        #   in Loop: Header=BB120_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB120_397
# %bb.396:                              # %if.then2109
                                        #   in Loop: Header=BB120_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	jmp	.LBB120_398
.LBB120_397:                            # %if.else2131
                                        #   in Loop: Header=BB120_184 Depth=3
	movw	-36(%rbp), %ax
	movw	%ax, best8x8fwref+14
	movw	%ax, best8x8fwref+12
	movw	%ax, best8x8fwref+10
	movw	%ax, best8x8fwref+8
	movw	-50(%rbp), %ax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movw	-38(%rbp), %ax
	movw	%ax, best8x8bwref+14
	movw	%ax, best8x8bwref+12
	movw	%ax, best8x8bwref+10
	movw	%ax, best8x8bwref+8
.LBB120_398:                            # %if.end2132
                                        #   in Loop: Header=BB120_184 Depth=3
	jmp	.LBB120_399
.LBB120_399:                            # %if.end2133
                                        #   in Loop: Header=BB120_184 Depth=3
	cmpl	$1, -32(%rbp)
	jle	.LBB120_402
# %bb.400:                              # %land.lhs.true2136
                                        #   in Loop: Header=BB120_184 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB120_402
# %bb.401:                              # %if.then2139
                                        #   in Loop: Header=BB120_184 Depth=3
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movswl	-50(%rbp), %edx
	movswl	-36(%rbp), %ecx
	movswl	-38(%rbp), %r8d
	callq	SetRefAndMotionVectors
.LBB120_402:                            # %if.end2143
                                        #   in Loop: Header=BB120_184 Depth=3
	jmp	.LBB120_403
.LBB120_403:                            # %for.inc2144
                                        #   in Loop: Header=BB120_184 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB120_184
.LBB120_404:                            # %for.end2146
                                        #   in Loop: Header=BB120_181 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB120_408
# %bb.405:                              # %if.then2149
                                        #   in Loop: Header=BB120_181 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB120_407
# %bb.406:                              # %if.then2152
                                        #   in Loop: Header=BB120_181 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	leaq	-60(%rbp), %rsi
	callq	TransformDecision
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB120_407:                            # %if.end2155
                                        #   in Loop: Header=BB120_181 Depth=2
	jmp	.LBB120_408
.LBB120_408:                            # %if.end2156
                                        #   in Loop: Header=BB120_181 Depth=2
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB120_410
# %bb.409:                              # %if.then2159
                                        #   in Loop: Header=BB120_181 Depth=2
	movl	-32(%rbp), %eax
	movl	%eax, best_mode
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -320(%rbp)
.LBB120_410:                            # %if.end2161
                                        #   in Loop: Header=BB120_181 Depth=2
	jmp	.LBB120_411
.LBB120_411:                            # %if.end2162
                                        #   in Loop: Header=BB120_181 Depth=2
	jmp	.LBB120_412
.LBB120_412:                            # %for.inc2163
                                        #   in Loop: Header=BB120_181 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB120_181
.LBB120_413:                            # %for.end2165
                                        #   in Loop: Header=BB120_171 Depth=1
	cmpl	$0, -352(%rbp)
	je	.LBB120_826
# %bb.414:                              # %if.then2168
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	$0, -140(%rbp)
	movl	$2147483647, cost8_8x8ts # imm = 0x7FFFFFFF
	movq	cs_mb, %rdi
	callq	store_coding_state
	movq	-48(%rbp), %rax
	movl	$-1, 568(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB120_599
# %bb.415:                              # %if.then2171
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -144(%rbp)
	movl	$0, -28(%rbp)
.LBB120_416:                            # %for.cond2172
                                        #   Parent Loop BB120_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_418 Depth 3
                                        #         Child Loop BB120_445 Depth 4
                                        #         Child Loop BB120_464 Depth 4
                                        #           Child Loop BB120_466 Depth 5
                                        #         Child Loop BB120_473 Depth 4
                                        #         Child Loop BB120_508 Depth 4
                                        #           Child Loop BB120_510 Depth 5
                                        #         Child Loop BB120_532 Depth 4
                                        #           Child Loop BB120_534 Depth 5
                                        #             Child Loop BB120_536 Depth 6
                                        #         Child Loop BB120_544 Depth 4
                                        #           Child Loop BB120_546 Depth 5
                                        #       Child Loop BB120_569 Depth 3
                                        #         Child Loop BB120_571 Depth 4
                                        #           Child Loop BB120_573 Depth 5
                                        #       Child Loop BB120_581 Depth 3
                                        #         Child Loop BB120_583 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB120_598
# %bb.417:                              # %for.body2175
                                        #   in Loop: Header=BB120_416 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI120_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -412(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -416(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movl	$2147483647, -172(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -248(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB120_418:                            # %for.cond2184
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB120_445 Depth 4
                                        #         Child Loop BB120_464 Depth 4
                                        #           Child Loop BB120_466 Depth 5
                                        #         Child Loop BB120_473 Depth 4
                                        #         Child Loop BB120_508 Depth 4
                                        #           Child Loop BB120_510 Depth 5
                                        #         Child Loop BB120_532 Depth 4
                                        #           Child Loop BB120_534 Depth 5
                                        #             Child Loop BB120_536 Depth 6
                                        #         Child Loop BB120_544 Depth 4
                                        #           Child Loop BB120_546 Depth 5
	cmpl	$2, -80(%rbp)
	jge	.LBB120_559
# %bb.419:                              # %for.body2187
                                        #   in Loop: Header=BB120_418 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB120_421
# %bb.420:                              # %land.lhs.true2193
                                        #   in Loop: Header=BB120_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB120_423
.LBB120_421:                            # %lor.lhs.false2196
                                        #   in Loop: Header=BB120_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB120_557
# %bb.422:                              # %land.lhs.true2199
                                        #   in Loop: Header=BB120_418 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB120_557
.LBB120_423:                            # %if.then2201
                                        #   in Loop: Header=BB120_418 Depth=3
	movq	$0, -240(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB120_444
# %bb.424:                              # %if.then2204
                                        #   in Loop: Header=BB120_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB120_443
# %bb.425:                              # %if.then2207
                                        #   in Loop: Header=BB120_418 Depth=3
	movl	$0, -224(%rbp)
	movl	$0, -216(%rbp)
	movl	-28(%rbp), %edi
	leaq	-216(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -224(%rbp)
	cmpl	$2147483647, -224(%rbp) # imm = 0x7FFFFFFF
	je	.LBB120_427
# %bb.426:                              # %lor.lhs.false2211
                                        #   in Loop: Header=BB120_418 Depth=3
	cmpl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB120_428
.LBB120_427:                            # %if.then2214
                                        #   in Loop: Header=BB120_418 Depth=3
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -208(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB120_429
.LBB120_428:                            # %if.else2215
                                        #   in Loop: Header=BB120_418 Depth=3
	movl	-224(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-216(%rbp), %eax
	addl	-208(%rbp), %eax
	movl	%eax, -208(%rbp)
.LBB120_429:                            # %if.end2218
                                        #   in Loop: Header=BB120_418 Depth=3
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB120_431
	jmp	.LBB120_430
.LBB120_430:                            # %if.end2218
                                        #   in Loop: Header=BB120_418 Depth=3
	subl	$2, %eax
	je	.LBB120_438
	jmp	.LBB120_439
.LBB120_431:                            # %sw.bb
                                        #   in Loop: Header=BB120_418 Depth=3
	movl	-216(%rbp), %eax
	cmpl	-224(%rbp), %eax
	jl	.LBB120_435
# %bb.432:                              # %lor.lhs.false2222
                                        #   in Loop: Header=BB120_418 Depth=3
	cmpl	$0, -364(%rbp)
	je	.LBB120_435
# %bb.433:                              # %land.lhs.true2225
                                        #   in Loop: Header=BB120_418 Depth=3
	cmpl	$0, -360(%rbp)
	je	.LBB120_435
# %bb.434:                              # %land.lhs.true2228
                                        #   in Loop: Header=BB120_418 Depth=3
	cmpl	$0, -356(%rbp)
	jne	.LBB120_436
.LBB120_435:                            # %if.then2231
                                        #   in Loop: Header=BB120_418 Depth=3
	movl	-216(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB120_437
.LBB120_436:                            # %if.else2232
                                        #   in Loop: Header=BB120_418 Depth=3
	movl	-224(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB120_437:                            # %if.end2233
                                        #   in Loop: Header=BB120_418 Depth=3
	jmp	.LBB120_440
.LBB120_438:                            # %sw.bb2234
                                        #   in Loop: Header=BB120_418 Depth=3
	movl	-216(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB120_440
.LBB120_439:                            # %sw.default
                                        #   in Loop: Header=BB120_418 Depth=3
	movl	-224(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB120_440:                            # %sw.epilog
                                        #   in Loop: Header=BB120_418 Depth=3
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB120_442
# %bb.441:                              # %if.then2238
                                        #   in Loop: Header=BB120_418 Depth=3
	movl	-172(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB120_442:                            # %if.end2240
                                        #   in Loop: Header=BB120_418 Depth=3
	movl	-264(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -264(%rbp)
.LBB120_443:                            # %if.end2242
                                        #   in Loop: Header=BB120_418 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB120_518
.LBB120_444:                            # %if.else2278
                                        #   in Loop: Header=BB120_418 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-204(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB120_445:                            # %for.cond2279
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_416 Depth=2
                                        #       Parent Loop BB120_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB120_463
# %bb.446:                              # %for.body2286
                                        #   in Loop: Header=BB120_445 Depth=4
	cmpl	$0, -280(%rbp)
	je	.LBB120_449
# %bb.447:                              # %lor.lhs.false2288
                                        #   in Loop: Header=BB120_445 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB120_449
# %bb.448:                              # %lor.lhs.false2292
                                        #   in Loop: Header=BB120_445 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB120_461
.LBB120_449:                            # %if.then2296
                                        #   in Loop: Header=BB120_445 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB120_454
# %bb.450:                              # %cond.true2299
                                        #   in Loop: Header=BB120_445 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB120_452
# %bb.451:                              # %cond.true2305
                                        #   in Loop: Header=BB120_445 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB120_453
.LBB120_452:                            # %cond.false2306
                                        #   in Loop: Header=BB120_445 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB120_453:                            # %cond.end2309
                                        #   in Loop: Header=BB120_445 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB120_458
.LBB120_454:                            # %cond.false2313
                                        #   in Loop: Header=BB120_445 Depth=4
	vmovsd	.LCPI120_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB120_456
# %bb.455:                              # %cond.true2318
                                        #   in Loop: Header=BB120_445 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB120_457
.LBB120_456:                            # %cond.false2320
                                        #   in Loop: Header=BB120_445 Depth=4
	movl	$1, %eax
	jmp	.LBB120_457
.LBB120_457:                            # %cond.end2321
                                        #   in Loop: Header=BB120_445 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB120_458:                            # %cond.end2326
                                        #   in Loop: Header=BB120_445 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB120_460
# %bb.459:                              # %if.then2338
                                        #   in Loop: Header=BB120_445 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB120_460:                            # %if.end2339
                                        #   in Loop: Header=BB120_445 Depth=4
	jmp	.LBB120_461
.LBB120_461:                            # %if.end2340
                                        #   in Loop: Header=BB120_445 Depth=4
	jmp	.LBB120_462
.LBB120_462:                            # %for.inc2341
                                        #   in Loop: Header=BB120_445 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB120_445
.LBB120_463:                            # %for.end2343
                                        #   in Loop: Header=BB120_418 Depth=3
	movl	$0, -24(%rbp)
.LBB120_464:                            # %for.cond2344
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_416 Depth=2
                                        #       Parent Loop BB120_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB120_466 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB120_471
# %bb.465:                              # %for.body2347
                                        #   in Loop: Header=BB120_464 Depth=4
	movl	$0, -20(%rbp)
.LBB120_466:                            # %for.cond2348
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_416 Depth=2
                                        #       Parent Loop BB120_418 Depth=3
                                        #         Parent Loop BB120_464 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB120_469
# %bb.467:                              # %for.body2351
                                        #   in Loop: Header=BB120_466 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.468:                              # %for.inc2403
                                        #   in Loop: Header=BB120_466 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_466
.LBB120_469:                            # %for.end2405
                                        #   in Loop: Header=BB120_464 Depth=4
	jmp	.LBB120_470
.LBB120_470:                            # %for.inc2406
                                        #   in Loop: Header=BB120_464 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_464
.LBB120_471:                            # %for.end2408
                                        #   in Loop: Header=BB120_418 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB120_516
# %bb.472:                              # %if.then2410
                                        #   in Loop: Header=BB120_418 Depth=3
	movl	-204(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB120_473:                            # %for.cond2411
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_416 Depth=2
                                        #       Parent Loop BB120_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB120_487
# %bb.474:                              # %for.body2418
                                        #   in Loop: Header=BB120_473 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB120_479
# %bb.475:                              # %cond.true2421
                                        #   in Loop: Header=BB120_473 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB120_477
# %bb.476:                              # %cond.true2427
                                        #   in Loop: Header=BB120_473 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB120_478
.LBB120_477:                            # %cond.false2428
                                        #   in Loop: Header=BB120_473 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB120_478:                            # %cond.end2431
                                        #   in Loop: Header=BB120_473 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB120_483
.LBB120_479:                            # %cond.false2435
                                        #   in Loop: Header=BB120_473 Depth=4
	vmovsd	.LCPI120_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB120_481
# %bb.480:                              # %cond.true2440
                                        #   in Loop: Header=BB120_473 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB120_482
.LBB120_481:                            # %cond.false2442
                                        #   in Loop: Header=BB120_473 Depth=4
	movl	$1, %eax
	jmp	.LBB120_482
.LBB120_482:                            # %cond.end2443
                                        #   in Loop: Header=BB120_473 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB120_483:                            # %cond.end2448
                                        #   in Loop: Header=BB120_473 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB120_485
# %bb.484:                              # %if.then2460
                                        #   in Loop: Header=BB120_473 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB120_485:                            # %if.end2461
                                        #   in Loop: Header=BB120_473 Depth=4
	jmp	.LBB120_486
.LBB120_486:                            # %for.inc2462
                                        #   in Loop: Header=BB120_473 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB120_473
.LBB120_487:                            # %for.end2464
                                        #   in Loop: Header=BB120_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB120_495
# %bb.488:                              # %cond.true2467
                                        #   in Loop: Header=BB120_418 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB120_490
# %bb.489:                              # %cond.true2473
                                        #   in Loop: Header=BB120_418 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB120_491
.LBB120_490:                            # %cond.false2474
                                        #   in Loop: Header=BB120_418 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB120_491:                            # %cond.end2477
                                        #   in Loop: Header=BB120_418 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB120_493
# %bb.492:                              # %cond.true2486
                                        #   in Loop: Header=BB120_418 Depth=3
	xorl	%edx, %edx
	jmp	.LBB120_494
.LBB120_493:                            # %cond.false2487
                                        #   in Loop: Header=BB120_418 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB120_494:                            # %cond.end2489
                                        #   in Loop: Header=BB120_418 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB120_499
.LBB120_495:                            # %cond.false2494
                                        #   in Loop: Header=BB120_418 Depth=3
	vmovsd	.LCPI120_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB120_497
# %bb.496:                              # %cond.true2499
                                        #   in Loop: Header=BB120_418 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB120_498
.LBB120_497:                            # %cond.false2501
                                        #   in Loop: Header=BB120_418 Depth=3
	movl	$1, %eax
	jmp	.LBB120_498
.LBB120_498:                            # %cond.end2502
                                        #   in Loop: Header=BB120_418 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB120_499:                            # %cond.end2507
                                        #   in Loop: Header=BB120_418 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB120_502
# %bb.500:                              # %land.lhs.true2513
                                        #   in Loop: Header=BB120_418 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB120_502
# %bb.501:                              # %if.then2516
                                        #   in Loop: Header=BB120_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB120_507
.LBB120_502:                            # %if.else2517
                                        #   in Loop: Header=BB120_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB120_505
# %bb.503:                              # %land.lhs.true2520
                                        #   in Loop: Header=BB120_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB120_505
# %bb.504:                              # %if.then2523
                                        #   in Loop: Header=BB120_418 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB120_506
.LBB120_505:                            # %if.else2524
                                        #   in Loop: Header=BB120_418 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB120_506:                            # %if.end2525
                                        #   in Loop: Header=BB120_418 Depth=3
	jmp	.LBB120_507
.LBB120_507:                            # %if.end2526
                                        #   in Loop: Header=BB120_418 Depth=3
	movl	$0, -24(%rbp)
.LBB120_508:                            # %for.cond2527
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_416 Depth=2
                                        #       Parent Loop BB120_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB120_510 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB120_515
# %bb.509:                              # %for.body2530
                                        #   in Loop: Header=BB120_508 Depth=4
	movl	$0, -20(%rbp)
.LBB120_510:                            # %for.cond2531
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_416 Depth=2
                                        #       Parent Loop BB120_418 Depth=3
                                        #         Parent Loop BB120_508 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB120_513
# %bb.511:                              # %for.body2534
                                        #   in Loop: Header=BB120_510 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.512:                              # %for.inc2565
                                        #   in Loop: Header=BB120_510 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_510
.LBB120_513:                            # %for.end2567
                                        #   in Loop: Header=BB120_508 Depth=4
	jmp	.LBB120_514
.LBB120_514:                            # %for.inc2568
                                        #   in Loop: Header=BB120_508 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_508
.LBB120_515:                            # %for.end2570
                                        #   in Loop: Header=BB120_418 Depth=3
	jmp	.LBB120_517
.LBB120_516:                            # %if.else2571
                                        #   in Loop: Header=BB120_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB120_517:                            # %if.end2572
                                        #   in Loop: Header=BB120_418 Depth=3
	jmp	.LBB120_518
.LBB120_518:                            # %if.end2573
                                        #   in Loop: Header=BB120_418 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB120_520
# %bb.519:                              # %if.then2576
                                        #   in Loop: Header=BB120_418 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-276(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB120_526
.LBB120_520:                            # %if.else2578
                                        #   in Loop: Header=BB120_418 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB120_525
# %bb.521:                              # %if.then2581
                                        #   in Loop: Header=BB120_418 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB120_523
# %bb.522:                              # %cond.true2591
                                        #   in Loop: Header=BB120_418 Depth=3
	xorl	%eax, %eax
	jmp	.LBB120_524
.LBB120_523:                            # %cond.false2592
                                        #   in Loop: Header=BB120_418 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB120_524:                            # %cond.end2597
                                        #   in Loop: Header=BB120_418 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB120_525:                            # %if.end2603
                                        #   in Loop: Header=BB120_418 Depth=3
	jmp	.LBB120_526
.LBB120_526:                            # %if.end2604
                                        #   in Loop: Header=BB120_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB120_528
# %bb.527:                              # %land.lhs.true2607
                                        #   in Loop: Header=BB120_418 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-248(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB120_530
.LBB120_528:                            # %lor.lhs.false2610
                                        #   in Loop: Header=BB120_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB120_556
# %bb.529:                              # %land.lhs.true2613
                                        #   in Loop: Header=BB120_418 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB120_556
.LBB120_530:                            # %if.then2616
                                        #   in Loop: Header=BB120_418 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -172(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, part8x8mode(,%rcx,4)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8pdir(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8fwref(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8bwref(,%rcx,2)
	movl	-276(%rbp), %eax
	movl	%eax, -184(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB120_555
# %bb.531:                              # %if.then2627
                                        #   in Loop: Header=BB120_418 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB120_532:                            # %for.cond2638
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_416 Depth=2
                                        #       Parent Loop BB120_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB120_534 Depth 5
                                        #             Child Loop BB120_536 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB120_543
# %bb.533:                              # %for.body2641
                                        #   in Loop: Header=BB120_532 Depth=4
	movl	$0, -24(%rbp)
.LBB120_534:                            # %for.cond2642
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_416 Depth=2
                                        #       Parent Loop BB120_418 Depth=3
                                        #         Parent Loop BB120_532 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB120_536 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB120_541
# %bb.535:                              # %for.body2645
                                        #   in Loop: Header=BB120_534 Depth=5
	movl	$0, -20(%rbp)
.LBB120_536:                            # %for.cond2646
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_416 Depth=2
                                        #       Parent Loop BB120_418 Depth=3
                                        #         Parent Loop BB120_532 Depth=4
                                        #           Parent Loop BB120_534 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB120_539
# %bb.537:                              # %for.body2649
                                        #   in Loop: Header=BB120_536 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.538:                              # %for.inc2666
                                        #   in Loop: Header=BB120_536 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_536
.LBB120_539:                            # %for.end2668
                                        #   in Loop: Header=BB120_534 Depth=5
	jmp	.LBB120_540
.LBB120_540:                            # %for.inc2669
                                        #   in Loop: Header=BB120_534 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_534
.LBB120_541:                            # %for.end2671
                                        #   in Loop: Header=BB120_532 Depth=4
	jmp	.LBB120_542
.LBB120_542:                            # %for.inc2672
                                        #   in Loop: Header=BB120_532 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB120_532
.LBB120_543:                            # %for.end2674
                                        #   in Loop: Header=BB120_418 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB120_544:                            # %for.cond2675
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_416 Depth=2
                                        #       Parent Loop BB120_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB120_546 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_554
# %bb.545:                              # %for.body2679
                                        #   in Loop: Header=BB120_544 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB120_546:                            # %for.cond2680
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_416 Depth=2
                                        #       Parent Loop BB120_418 Depth=3
                                        #         Parent Loop BB120_544 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_552
# %bb.547:                              # %for.body2684
                                        #   in Loop: Header=BB120_546 Depth=5
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB120_549
# %bb.548:                              # %if.then2686
                                        #   in Loop: Header=BB120_546 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB120_550
.LBB120_549:                            # %if.else2705
                                        #   in Loop: Header=BB120_546 Depth=5
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB120_550:                            # %if.end2754
                                        #   in Loop: Header=BB120_546 Depth=5
	jmp	.LBB120_551
.LBB120_551:                            # %for.inc2755
                                        #   in Loop: Header=BB120_546 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_546
.LBB120_552:                            # %for.end2757
                                        #   in Loop: Header=BB120_544 Depth=4
	jmp	.LBB120_553
.LBB120_553:                            # %for.inc2758
                                        #   in Loop: Header=BB120_544 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_544
.LBB120_554:                            # %for.end2760
                                        #   in Loop: Header=BB120_418 Depth=3
	jmp	.LBB120_555
.LBB120_555:                            # %if.end2761
                                        #   in Loop: Header=BB120_418 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB120_556:                            # %if.end2762
                                        #   in Loop: Header=BB120_418 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB120_557:                            # %if.end2763
                                        #   in Loop: Header=BB120_418 Depth=3
	jmp	.LBB120_558
.LBB120_558:                            # %for.inc2764
                                        #   in Loop: Header=BB120_418 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB120_418
.LBB120_559:                            # %for.end2766
                                        #   in Loop: Header=BB120_416 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB120_592
# %bb.560:                              # %if.then2769
                                        #   in Loop: Header=BB120_416 Depth=2
	movl	-172(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	part8x8pdir(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -240(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB120_562
# %bb.561:                              # %lor.lhs.false2778
                                        #   in Loop: Header=BB120_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB120_563
.LBB120_562:                            # %cond.true2782
                                        #   in Loop: Header=BB120_416 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB120_564
.LBB120_563:                            # %cond.false2783
                                        #   in Loop: Header=BB120_416 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB120_564
.LBB120_564:                            # %cond.end2784
                                        #   in Loop: Header=BB120_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB120_566
# %bb.565:                              # %lor.lhs.false2789
                                        #   in Loop: Header=BB120_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB120_567
.LBB120_566:                            # %cond.true2793
                                        #   in Loop: Header=BB120_416 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB120_568
.LBB120_567:                            # %cond.false2794
                                        #   in Loop: Header=BB120_416 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB120_568
.LBB120_568:                            # %cond.end2795
                                        #   in Loop: Header=BB120_416 Depth=2
	movslq	-28(%rbp), %rcx
	movw	part8x8fwref(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-288(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	part8x8bwref(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -184(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB120_569:                            # %for.cond2813
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB120_571 Depth 4
                                        #           Child Loop BB120_573 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB120_580
# %bb.570:                              # %for.body2816
                                        #   in Loop: Header=BB120_569 Depth=3
	movl	$0, -24(%rbp)
.LBB120_571:                            # %for.cond2817
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_416 Depth=2
                                        #       Parent Loop BB120_569 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB120_573 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB120_578
# %bb.572:                              # %for.body2820
                                        #   in Loop: Header=BB120_571 Depth=4
	movl	$0, -20(%rbp)
.LBB120_573:                            # %for.cond2821
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_416 Depth=2
                                        #       Parent Loop BB120_569 Depth=3
                                        #         Parent Loop BB120_571 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB120_576
# %bb.574:                              # %for.body2824
                                        #   in Loop: Header=BB120_573 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.575:                              # %for.inc2842
                                        #   in Loop: Header=BB120_573 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_573
.LBB120_576:                            # %for.end2844
                                        #   in Loop: Header=BB120_571 Depth=4
	jmp	.LBB120_577
.LBB120_577:                            # %for.inc2845
                                        #   in Loop: Header=BB120_571 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_571
.LBB120_578:                            # %for.end2847
                                        #   in Loop: Header=BB120_569 Depth=3
	jmp	.LBB120_579
.LBB120_579:                            # %for.inc2848
                                        #   in Loop: Header=BB120_569 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB120_569
.LBB120_580:                            # %for.end2850
                                        #   in Loop: Header=BB120_416 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB120_581:                            # %for.cond2851
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB120_583 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_591
# %bb.582:                              # %for.body2855
                                        #   in Loop: Header=BB120_581 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB120_583:                            # %for.cond2856
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_416 Depth=2
                                        #       Parent Loop BB120_581 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_589
# %bb.584:                              # %for.body2860
                                        #   in Loop: Header=BB120_583 Depth=4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB120_586
# %bb.585:                              # %if.then2863
                                        #   in Loop: Header=BB120_583 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB120_587
.LBB120_586:                            # %if.else2886
                                        #   in Loop: Header=BB120_583 Depth=4
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB120_587:                            # %if.end2935
                                        #   in Loop: Header=BB120_583 Depth=4
	jmp	.LBB120_588
.LBB120_588:                            # %for.inc2936
                                        #   in Loop: Header=BB120_583 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_583
.LBB120_589:                            # %for.end2938
                                        #   in Loop: Header=BB120_581 Depth=3
	jmp	.LBB120_590
.LBB120_590:                            # %for.inc2939
                                        #   in Loop: Header=BB120_581 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_581
.LBB120_591:                            # %for.end2941
                                        #   in Loop: Header=BB120_416 Depth=2
	jmp	.LBB120_592
.LBB120_592:                            # %if.end2942
                                        #   in Loop: Header=BB120_416 Depth=2
	cmpl	$0, -184(%rbp)
	je	.LBB120_594
# %bb.593:                              # %if.then2944
                                        #   in Loop: Header=BB120_416 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-184(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB120_594:                            # %if.end2948
                                        #   in Loop: Header=BB120_416 Depth=2
	movl	-28(%rbp), %esi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-108(%rbp), %eax
	xorl	%edi, %edi
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8
	movl	-28(%rbp), %edi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %esi
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	cmpl	$3, -28(%rbp)
	jge	.LBB120_596
# %bb.595:                              # %if.then2973
                                        #   in Loop: Header=BB120_416 Depth=2
	movq	cs_b8, %rdi
	callq	reset_coding_state
.LBB120_596:                            # %if.end2974
                                        #   in Loop: Header=BB120_416 Depth=2
	jmp	.LBB120_597
.LBB120_597:                            # %for.inc2975
                                        #   in Loop: Header=BB120_416 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB120_416
.LBB120_598:                            # %for.end2977
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	cbp8x8, %eax
	movl	%eax, cbp8_8x8ts
	movslq	cbp_blk8x8, %rax
	movq	%rax, cbp_blk8_8x8ts
	movl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz8_8x8ts
	movl	-140(%rbp), %eax
	movl	%eax, cost8_8x8ts
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB120_599:                            # %if.end2980
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB120_802
# %bb.600:                              # %if.then2984
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	$0, -140(%rbp)
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -144(%rbp)
	movl	$0, -28(%rbp)
.LBB120_601:                            # %for.cond2985
                                        #   Parent Loop BB120_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_603 Depth 3
                                        #         Child Loop BB120_614 Depth 4
                                        #         Child Loop BB120_633 Depth 4
                                        #           Child Loop BB120_635 Depth 5
                                        #         Child Loop BB120_642 Depth 4
                                        #         Child Loop BB120_677 Depth 4
                                        #           Child Loop BB120_679 Depth 5
                                        #         Child Loop BB120_701 Depth 4
                                        #           Child Loop BB120_703 Depth 5
                                        #             Child Loop BB120_705 Depth 6
                                        #         Child Loop BB120_713 Depth 4
                                        #           Child Loop BB120_715 Depth 5
                                        #         Child Loop BB120_723 Depth 4
                                        #           Child Loop BB120_725 Depth 5
                                        #       Child Loop BB120_745 Depth 3
                                        #         Child Loop BB120_747 Depth 4
                                        #           Child Loop BB120_749 Depth 5
                                        #       Child Loop BB120_757 Depth 3
                                        #         Child Loop BB120_759 Depth 4
                                        #       Child Loop BB120_766 Depth 3
                                        #         Child Loop BB120_768 Depth 4
                                        #       Child Loop BB120_778 Depth 3
                                        #         Child Loop BB120_780 Depth 4
                                        #       Child Loop BB120_786 Depth 3
                                        #       Child Loop BB120_791 Depth 3
                                        #         Child Loop BB120_793 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB120_801
# %bb.602:                              # %for.body2988
                                        #   in Loop: Header=BB120_601 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI120_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -412(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -416(%rbp)
	movl	$2147483647, -172(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -248(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB120_603:                            # %for.cond2997
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB120_614 Depth 4
                                        #         Child Loop BB120_633 Depth 4
                                        #           Child Loop BB120_635 Depth 5
                                        #         Child Loop BB120_642 Depth 4
                                        #         Child Loop BB120_677 Depth 4
                                        #           Child Loop BB120_679 Depth 5
                                        #         Child Loop BB120_701 Depth 4
                                        #           Child Loop BB120_703 Depth 5
                                        #             Child Loop BB120_705 Depth 6
                                        #         Child Loop BB120_713 Depth 4
                                        #           Child Loop BB120_715 Depth 5
                                        #         Child Loop BB120_723 Depth 4
                                        #           Child Loop BB120_725 Depth 5
	cmpl	$5, -80(%rbp)
	jge	.LBB120_735
# %bb.604:                              # %for.body3000
                                        #   in Loop: Header=BB120_603 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cltq
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB120_733
# %bb.605:                              # %if.then3006
                                        #   in Loop: Header=BB120_603 Depth=3
	movq	$0, -240(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB120_613
# %bb.606:                              # %if.then3009
                                        #   in Loop: Header=BB120_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB120_612
# %bb.607:                              # %if.then3012
                                        #   in Loop: Header=BB120_603 Depth=3
	movl	-28(%rbp), %edi
	leaq	-216(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -60(%rbp)
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB120_609
# %bb.608:                              # %lor.lhs.false3016
                                        #   in Loop: Header=BB120_603 Depth=3
	cmpl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB120_610
.LBB120_609:                            # %if.then3019
                                        #   in Loop: Header=BB120_603 Depth=3
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB120_611
.LBB120_610:                            # %if.else3020
                                        #   in Loop: Header=BB120_603 Depth=3
	movl	-60(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
.LBB120_611:                            # %if.end3022
                                        #   in Loop: Header=BB120_603 Depth=3
	movl	-264(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -264(%rbp)
.LBB120_612:                            # %if.end3024
                                        #   in Loop: Header=BB120_603 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB120_687
.LBB120_613:                            # %if.else3060
                                        #   in Loop: Header=BB120_603 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-204(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB120_614:                            # %for.cond3061
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_601 Depth=2
                                        #       Parent Loop BB120_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB120_632
# %bb.615:                              # %for.body3068
                                        #   in Loop: Header=BB120_614 Depth=4
	cmpl	$0, -280(%rbp)
	je	.LBB120_618
# %bb.616:                              # %lor.lhs.false3070
                                        #   in Loop: Header=BB120_614 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB120_618
# %bb.617:                              # %lor.lhs.false3074
                                        #   in Loop: Header=BB120_614 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB120_630
.LBB120_618:                            # %if.then3078
                                        #   in Loop: Header=BB120_614 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB120_623
# %bb.619:                              # %cond.true3081
                                        #   in Loop: Header=BB120_614 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB120_621
# %bb.620:                              # %cond.true3087
                                        #   in Loop: Header=BB120_614 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB120_622
.LBB120_621:                            # %cond.false3088
                                        #   in Loop: Header=BB120_614 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB120_622:                            # %cond.end3091
                                        #   in Loop: Header=BB120_614 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB120_627
.LBB120_623:                            # %cond.false3095
                                        #   in Loop: Header=BB120_614 Depth=4
	vmovsd	.LCPI120_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB120_625
# %bb.624:                              # %cond.true3100
                                        #   in Loop: Header=BB120_614 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB120_626
.LBB120_625:                            # %cond.false3102
                                        #   in Loop: Header=BB120_614 Depth=4
	movl	$1, %eax
	jmp	.LBB120_626
.LBB120_626:                            # %cond.end3103
                                        #   in Loop: Header=BB120_614 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB120_627:                            # %cond.end3108
                                        #   in Loop: Header=BB120_614 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB120_629
# %bb.628:                              # %if.then3120
                                        #   in Loop: Header=BB120_614 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB120_629:                            # %if.end3121
                                        #   in Loop: Header=BB120_614 Depth=4
	jmp	.LBB120_630
.LBB120_630:                            # %if.end3122
                                        #   in Loop: Header=BB120_614 Depth=4
	jmp	.LBB120_631
.LBB120_631:                            # %for.inc3123
                                        #   in Loop: Header=BB120_614 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB120_614
.LBB120_632:                            # %for.end3125
                                        #   in Loop: Header=BB120_603 Depth=3
	movl	$0, -24(%rbp)
.LBB120_633:                            # %for.cond3126
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_601 Depth=2
                                        #       Parent Loop BB120_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB120_635 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB120_640
# %bb.634:                              # %for.body3129
                                        #   in Loop: Header=BB120_633 Depth=4
	movl	$0, -20(%rbp)
.LBB120_635:                            # %for.cond3130
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_601 Depth=2
                                        #       Parent Loop BB120_603 Depth=3
                                        #         Parent Loop BB120_633 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB120_638
# %bb.636:                              # %for.body3133
                                        #   in Loop: Header=BB120_635 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.637:                              # %for.inc3185
                                        #   in Loop: Header=BB120_635 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_635
.LBB120_638:                            # %for.end3187
                                        #   in Loop: Header=BB120_633 Depth=4
	jmp	.LBB120_639
.LBB120_639:                            # %for.inc3188
                                        #   in Loop: Header=BB120_633 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_633
.LBB120_640:                            # %for.end3190
                                        #   in Loop: Header=BB120_603 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB120_685
# %bb.641:                              # %if.then3192
                                        #   in Loop: Header=BB120_603 Depth=3
	movl	-204(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB120_642:                            # %for.cond3193
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_601 Depth=2
                                        #       Parent Loop BB120_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB120_656
# %bb.643:                              # %for.body3200
                                        #   in Loop: Header=BB120_642 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB120_648
# %bb.644:                              # %cond.true3203
                                        #   in Loop: Header=BB120_642 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB120_646
# %bb.645:                              # %cond.true3209
                                        #   in Loop: Header=BB120_642 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB120_647
.LBB120_646:                            # %cond.false3210
                                        #   in Loop: Header=BB120_642 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB120_647:                            # %cond.end3213
                                        #   in Loop: Header=BB120_642 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB120_652
.LBB120_648:                            # %cond.false3217
                                        #   in Loop: Header=BB120_642 Depth=4
	vmovsd	.LCPI120_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB120_650
# %bb.649:                              # %cond.true3222
                                        #   in Loop: Header=BB120_642 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB120_651
.LBB120_650:                            # %cond.false3224
                                        #   in Loop: Header=BB120_642 Depth=4
	movl	$1, %eax
	jmp	.LBB120_651
.LBB120_651:                            # %cond.end3225
                                        #   in Loop: Header=BB120_642 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB120_652:                            # %cond.end3230
                                        #   in Loop: Header=BB120_642 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB120_654
# %bb.653:                              # %if.then3242
                                        #   in Loop: Header=BB120_642 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB120_654:                            # %if.end3243
                                        #   in Loop: Header=BB120_642 Depth=4
	jmp	.LBB120_655
.LBB120_655:                            # %for.inc3244
                                        #   in Loop: Header=BB120_642 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB120_642
.LBB120_656:                            # %for.end3246
                                        #   in Loop: Header=BB120_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB120_664
# %bb.657:                              # %cond.true3249
                                        #   in Loop: Header=BB120_603 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB120_659
# %bb.658:                              # %cond.true3255
                                        #   in Loop: Header=BB120_603 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB120_660
.LBB120_659:                            # %cond.false3256
                                        #   in Loop: Header=BB120_603 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB120_660:                            # %cond.end3259
                                        #   in Loop: Header=BB120_603 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB120_662
# %bb.661:                              # %cond.true3268
                                        #   in Loop: Header=BB120_603 Depth=3
	xorl	%edx, %edx
	jmp	.LBB120_663
.LBB120_662:                            # %cond.false3269
                                        #   in Loop: Header=BB120_603 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB120_663:                            # %cond.end3271
                                        #   in Loop: Header=BB120_603 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB120_668
.LBB120_664:                            # %cond.false3276
                                        #   in Loop: Header=BB120_603 Depth=3
	vmovsd	.LCPI120_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB120_666
# %bb.665:                              # %cond.true3281
                                        #   in Loop: Header=BB120_603 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB120_667
.LBB120_666:                            # %cond.false3283
                                        #   in Loop: Header=BB120_603 Depth=3
	movl	$1, %eax
	jmp	.LBB120_667
.LBB120_667:                            # %cond.end3284
                                        #   in Loop: Header=BB120_603 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB120_668:                            # %cond.end3289
                                        #   in Loop: Header=BB120_603 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB120_671
# %bb.669:                              # %land.lhs.true3295
                                        #   in Loop: Header=BB120_603 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB120_671
# %bb.670:                              # %if.then3298
                                        #   in Loop: Header=BB120_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB120_676
.LBB120_671:                            # %if.else3299
                                        #   in Loop: Header=BB120_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB120_674
# %bb.672:                              # %land.lhs.true3302
                                        #   in Loop: Header=BB120_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB120_674
# %bb.673:                              # %if.then3305
                                        #   in Loop: Header=BB120_603 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB120_675
.LBB120_674:                            # %if.else3306
                                        #   in Loop: Header=BB120_603 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB120_675:                            # %if.end3307
                                        #   in Loop: Header=BB120_603 Depth=3
	jmp	.LBB120_676
.LBB120_676:                            # %if.end3308
                                        #   in Loop: Header=BB120_603 Depth=3
	movl	$0, -24(%rbp)
.LBB120_677:                            # %for.cond3309
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_601 Depth=2
                                        #       Parent Loop BB120_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB120_679 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB120_684
# %bb.678:                              # %for.body3312
                                        #   in Loop: Header=BB120_677 Depth=4
	movl	$0, -20(%rbp)
.LBB120_679:                            # %for.cond3313
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_601 Depth=2
                                        #       Parent Loop BB120_603 Depth=3
                                        #         Parent Loop BB120_677 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB120_682
# %bb.680:                              # %for.body3316
                                        #   in Loop: Header=BB120_679 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.681:                              # %for.inc3347
                                        #   in Loop: Header=BB120_679 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_679
.LBB120_682:                            # %for.end3349
                                        #   in Loop: Header=BB120_677 Depth=4
	jmp	.LBB120_683
.LBB120_683:                            # %for.inc3350
                                        #   in Loop: Header=BB120_677 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_677
.LBB120_684:                            # %for.end3352
                                        #   in Loop: Header=BB120_603 Depth=3
	jmp	.LBB120_686
.LBB120_685:                            # %if.else3353
                                        #   in Loop: Header=BB120_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB120_686:                            # %if.end3354
                                        #   in Loop: Header=BB120_603 Depth=3
	jmp	.LBB120_687
.LBB120_687:                            # %if.end3355
                                        #   in Loop: Header=BB120_603 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB120_689
# %bb.688:                              # %if.then3358
                                        #   in Loop: Header=BB120_603 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-276(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB120_695
.LBB120_689:                            # %if.else3360
                                        #   in Loop: Header=BB120_603 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB120_694
# %bb.690:                              # %if.then3363
                                        #   in Loop: Header=BB120_603 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB120_692
# %bb.691:                              # %cond.true3373
                                        #   in Loop: Header=BB120_603 Depth=3
	xorl	%eax, %eax
	jmp	.LBB120_693
.LBB120_692:                            # %cond.false3374
                                        #   in Loop: Header=BB120_603 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB120_693:                            # %cond.end3379
                                        #   in Loop: Header=BB120_603 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB120_694:                            # %if.end3385
                                        #   in Loop: Header=BB120_603 Depth=3
	jmp	.LBB120_695
.LBB120_695:                            # %if.end3386
                                        #   in Loop: Header=BB120_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB120_697
# %bb.696:                              # %land.lhs.true3389
                                        #   in Loop: Header=BB120_603 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-248(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB120_699
.LBB120_697:                            # %lor.lhs.false3392
                                        #   in Loop: Header=BB120_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB120_732
# %bb.698:                              # %land.lhs.true3395
                                        #   in Loop: Header=BB120_603 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB120_732
.LBB120_699:                            # %if.then3398
                                        #   in Loop: Header=BB120_603 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -172(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8mode(,%rcx,2)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+64(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+64(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+64(,%rcx,2)
	movl	-276(%rbp), %eax
	movl	%eax, -184(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB120_721
# %bb.700:                              # %if.then3410
                                        #   in Loop: Header=BB120_603 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB120_701:                            # %for.cond3422
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_601 Depth=2
                                        #       Parent Loop BB120_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB120_703 Depth 5
                                        #             Child Loop BB120_705 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB120_712
# %bb.702:                              # %for.body3425
                                        #   in Loop: Header=BB120_701 Depth=4
	movl	$0, -24(%rbp)
.LBB120_703:                            # %for.cond3426
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_601 Depth=2
                                        #       Parent Loop BB120_603 Depth=3
                                        #         Parent Loop BB120_701 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB120_705 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB120_710
# %bb.704:                              # %for.body3429
                                        #   in Loop: Header=BB120_703 Depth=5
	movl	$0, -20(%rbp)
.LBB120_705:                            # %for.cond3430
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_601 Depth=2
                                        #       Parent Loop BB120_603 Depth=3
                                        #         Parent Loop BB120_701 Depth=4
                                        #           Parent Loop BB120_703 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB120_708
# %bb.706:                              # %for.body3433
                                        #   in Loop: Header=BB120_705 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.707:                              # %for.inc3451
                                        #   in Loop: Header=BB120_705 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_705
.LBB120_708:                            # %for.end3453
                                        #   in Loop: Header=BB120_703 Depth=5
	jmp	.LBB120_709
.LBB120_709:                            # %for.inc3454
                                        #   in Loop: Header=BB120_703 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_703
.LBB120_710:                            # %for.end3456
                                        #   in Loop: Header=BB120_701 Depth=4
	jmp	.LBB120_711
.LBB120_711:                            # %for.inc3457
                                        #   in Loop: Header=BB120_701 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB120_701
.LBB120_712:                            # %for.end3459
                                        #   in Loop: Header=BB120_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB120_713:                            # %for.cond3460
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_601 Depth=2
                                        #       Parent Loop BB120_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB120_715 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_720
# %bb.714:                              # %for.body3464
                                        #   in Loop: Header=BB120_713 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB120_715:                            # %for.cond3465
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_601 Depth=2
                                        #       Parent Loop BB120_603 Depth=3
                                        #         Parent Loop BB120_713 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_718
# %bb.716:                              # %for.body3469
                                        #   in Loop: Header=BB120_715 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.717:                              # %for.inc3492
                                        #   in Loop: Header=BB120_715 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_715
.LBB120_718:                            # %for.end3494
                                        #   in Loop: Header=BB120_713 Depth=4
	jmp	.LBB120_719
.LBB120_719:                            # %for.inc3495
                                        #   in Loop: Header=BB120_713 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_713
.LBB120_720:                            # %for.end3497
                                        #   in Loop: Header=BB120_603 Depth=3
	jmp	.LBB120_721
.LBB120_721:                            # %if.end3498
                                        #   in Loop: Header=BB120_603 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB120_731
# %bb.722:                              # %if.then3501
                                        #   in Loop: Header=BB120_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB120_723:                            # %for.cond3502
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_601 Depth=2
                                        #       Parent Loop BB120_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB120_725 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_730
# %bb.724:                              # %for.body3506
                                        #   in Loop: Header=BB120_723 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB120_725:                            # %for.cond3507
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_601 Depth=2
                                        #       Parent Loop BB120_603 Depth=3
                                        #         Parent Loop BB120_723 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_728
# %bb.726:                              # %for.body3511
                                        #   in Loop: Header=BB120_725 Depth=5
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.727:                              # %for.inc3560
                                        #   in Loop: Header=BB120_725 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_725
.LBB120_728:                            # %for.end3562
                                        #   in Loop: Header=BB120_723 Depth=4
	jmp	.LBB120_729
.LBB120_729:                            # %for.inc3563
                                        #   in Loop: Header=BB120_723 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_723
.LBB120_730:                            # %for.end3565
                                        #   in Loop: Header=BB120_603 Depth=3
	jmp	.LBB120_731
.LBB120_731:                            # %if.end3566
                                        #   in Loop: Header=BB120_603 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB120_732:                            # %if.end3567
                                        #   in Loop: Header=BB120_603 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB120_733:                            # %if.end3568
                                        #   in Loop: Header=BB120_603 Depth=3
	jmp	.LBB120_734
.LBB120_734:                            # %for.inc3569
                                        #   in Loop: Header=BB120_603 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB120_603
.LBB120_735:                            # %for.end3571
                                        #   in Loop: Header=BB120_601 Depth=2
	movl	-172(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB120_775
# %bb.736:                              # %if.then3575
                                        #   in Loop: Header=BB120_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	best8x8pdir+64(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -240(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB120_738
# %bb.737:                              # %lor.lhs.false3584
                                        #   in Loop: Header=BB120_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB120_739
.LBB120_738:                            # %cond.true3588
                                        #   in Loop: Header=BB120_601 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB120_740
.LBB120_739:                            # %cond.false3589
                                        #   in Loop: Header=BB120_601 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB120_740
.LBB120_740:                            # %cond.end3590
                                        #   in Loop: Header=BB120_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB120_742
# %bb.741:                              # %lor.lhs.false3595
                                        #   in Loop: Header=BB120_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB120_743
.LBB120_742:                            # %cond.true3599
                                        #   in Loop: Header=BB120_601 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB120_744
.LBB120_743:                            # %cond.false3600
                                        #   in Loop: Header=BB120_601 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB120_744
.LBB120_744:                            # %cond.end3601
                                        #   in Loop: Header=BB120_601 Depth=2
	movslq	-28(%rbp), %rcx
	movw	best8x8fwref+64(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-288(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	best8x8bwref+64(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -184(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB120_745:                            # %for.cond3619
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB120_747 Depth 4
                                        #           Child Loop BB120_749 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB120_756
# %bb.746:                              # %for.body3622
                                        #   in Loop: Header=BB120_745 Depth=3
	movl	$0, -24(%rbp)
.LBB120_747:                            # %for.cond3623
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_601 Depth=2
                                        #       Parent Loop BB120_745 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB120_749 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB120_754
# %bb.748:                              # %for.body3626
                                        #   in Loop: Header=BB120_747 Depth=4
	movl	$0, -20(%rbp)
.LBB120_749:                            # %for.cond3627
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_601 Depth=2
                                        #       Parent Loop BB120_745 Depth=3
                                        #         Parent Loop BB120_747 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB120_752
# %bb.750:                              # %for.body3630
                                        #   in Loop: Header=BB120_749 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.751:                              # %for.inc3648
                                        #   in Loop: Header=BB120_749 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_749
.LBB120_752:                            # %for.end3650
                                        #   in Loop: Header=BB120_747 Depth=4
	jmp	.LBB120_753
.LBB120_753:                            # %for.inc3651
                                        #   in Loop: Header=BB120_747 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_747
.LBB120_754:                            # %for.end3653
                                        #   in Loop: Header=BB120_745 Depth=3
	jmp	.LBB120_755
.LBB120_755:                            # %for.inc3654
                                        #   in Loop: Header=BB120_745 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB120_745
.LBB120_756:                            # %for.end3656
                                        #   in Loop: Header=BB120_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB120_757:                            # %for.cond3657
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB120_759 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_764
# %bb.758:                              # %for.body3661
                                        #   in Loop: Header=BB120_757 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB120_759:                            # %for.cond3662
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_601 Depth=2
                                        #       Parent Loop BB120_757 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_762
# %bb.760:                              # %for.body3666
                                        #   in Loop: Header=BB120_759 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.761:                              # %for.inc3689
                                        #   in Loop: Header=BB120_759 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_759
.LBB120_762:                            # %for.end3691
                                        #   in Loop: Header=BB120_757 Depth=3
	jmp	.LBB120_763
.LBB120_763:                            # %for.inc3692
                                        #   in Loop: Header=BB120_757 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_757
.LBB120_764:                            # %for.end3694
                                        #   in Loop: Header=BB120_601 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB120_774
# %bb.765:                              # %if.then3697
                                        #   in Loop: Header=BB120_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB120_766:                            # %for.cond3698
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB120_768 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_773
# %bb.767:                              # %for.body3702
                                        #   in Loop: Header=BB120_766 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB120_768:                            # %for.cond3703
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_601 Depth=2
                                        #       Parent Loop BB120_766 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_771
# %bb.769:                              # %for.body3707
                                        #   in Loop: Header=BB120_768 Depth=4
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.770:                              # %for.inc3756
                                        #   in Loop: Header=BB120_768 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_768
.LBB120_771:                            # %for.end3758
                                        #   in Loop: Header=BB120_766 Depth=3
	jmp	.LBB120_772
.LBB120_772:                            # %for.inc3759
                                        #   in Loop: Header=BB120_766 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_766
.LBB120_773:                            # %for.end3761
                                        #   in Loop: Header=BB120_601 Depth=2
	jmp	.LBB120_774
.LBB120_774:                            # %if.end3762
                                        #   in Loop: Header=BB120_601 Depth=2
	jmp	.LBB120_775
.LBB120_775:                            # %if.end3763
                                        #   in Loop: Header=BB120_601 Depth=2
	cmpl	$0, -184(%rbp)
	je	.LBB120_777
# %bb.776:                              # %if.then3765
                                        #   in Loop: Header=BB120_601 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-184(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB120_777:                            # %if.end3769
                                        #   in Loop: Header=BB120_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	148(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	%eax, %ecx
	movl	%ecx, -104(%rbp)
	movq	img, %rax
	movl	144(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
	movl	%ecx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB120_778:                            # %for.cond3781
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB120_780 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_785
# %bb.779:                              # %for.body3785
                                        #   in Loop: Header=BB120_778 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB120_780:                            # %for.cond3786
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_601 Depth=2
                                        #       Parent Loop BB120_778 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_783
# %bb.781:                              # %for.body3790
                                        #   in Loop: Header=BB120_780 Depth=4
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
# %bb.782:                              # %for.inc3795
                                        #   in Loop: Header=BB120_780 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_780
.LBB120_783:                            # %for.end3797
                                        #   in Loop: Header=BB120_778 Depth=3
	jmp	.LBB120_784
.LBB120_784:                            # %for.inc3798
                                        #   in Loop: Header=BB120_778 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_778
.LBB120_785:                            # %for.end3800
                                        #   in Loop: Header=BB120_601 Depth=2
	movl	-28(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB120_786:                            # %for.cond3802
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_601 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_789
# %bb.787:                              # %for.body3806
                                        #   in Loop: Header=BB120_786 Depth=3
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.788:                              # %for.inc3809
                                        #   in Loop: Header=BB120_786 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_786
.LBB120_789:                            # %for.end3811
                                        #   in Loop: Header=BB120_601 Depth=2
	cmpl	$3, -28(%rbp)
	jge	.LBB120_799
# %bb.790:                              # %if.then3814
                                        #   in Loop: Header=BB120_601 Depth=2
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB120_791:                            # %for.cond3819
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB120_793 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_798
# %bb.792:                              # %for.body3823
                                        #   in Loop: Header=BB120_791 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB120_793:                            # %for.cond3824
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_601 Depth=2
                                        #       Parent Loop BB120_791 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_796
# %bb.794:                              # %for.body3828
                                        #   in Loop: Header=BB120_793 Depth=4
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.795:                              # %for.inc3842
                                        #   in Loop: Header=BB120_793 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_793
.LBB120_796:                            # %for.end3844
                                        #   in Loop: Header=BB120_791 Depth=3
	jmp	.LBB120_797
.LBB120_797:                            # %for.inc3845
                                        #   in Loop: Header=BB120_791 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_791
.LBB120_798:                            # %for.end3847
                                        #   in Loop: Header=BB120_601 Depth=2
	jmp	.LBB120_799
.LBB120_799:                            # %if.end3848
                                        #   in Loop: Header=BB120_601 Depth=2
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movslq	-28(%rbp), %rax
	movswl	best8x8pdir+64(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	best8x8fwref+64(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	best8x8bwref+64(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	movq	cs_b8, %rdi
	callq	reset_coding_state
# %bb.800:                              # %for.inc3858
                                        #   in Loop: Header=BB120_601 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB120_601
.LBB120_801:                            # %for.end3860
                                        #   in Loop: Header=BB120_171 Depth=1
	jmp	.LBB120_802
.LBB120_802:                            # %if.end3861
                                        #   in Loop: Header=BB120_171 Depth=1
	movq	cs_mb, %rdi
	callq	reset_coding_state
	movl	$0, -20(%rbp)
.LBB120_803:                            # %for.cond3862
                                        #   Parent Loop BB120_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_805 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB120_810
# %bb.804:                              # %for.body3865
                                        #   in Loop: Header=BB120_803 Depth=2
	movl	$0, -24(%rbp)
.LBB120_805:                            # %for.cond3866
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_803 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB120_808
# %bb.806:                              # %for.body3869
                                        #   in Loop: Header=BB120_805 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.807:                              # %for.inc3888
                                        #   in Loop: Header=BB120_805 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_805
.LBB120_808:                            # %for.end3890
                                        #   in Loop: Header=BB120_803 Depth=2
	jmp	.LBB120_809
.LBB120_809:                            # %for.inc3891
                                        #   in Loop: Header=BB120_803 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_803
.LBB120_810:                            # %for.end3893
                                        #   in Loop: Header=BB120_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB120_825
# %bb.811:                              # %land.lhs.true3896
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	-140(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jl	.LBB120_813
# %bb.812:                              # %lor.lhs.false3899
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB120_825
.LBB120_813:                            # %if.then3902
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	$8, best_mode
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB120_823
# %bb.814:                              # %if.then3905
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB120_816
# %bb.815:                              # %if.then3908
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB120_822
.LBB120_816:                            # %if.else3910
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	-140(%rbp), %eax
	cmpl	cost8_8x8ts, %eax
	jge	.LBB120_818
# %bb.817:                              # %if.then3913
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB120_821
.LBB120_818:                            # %if.else3915
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	callq	GetBestTransformP8x8
	cmpl	$0, %eax
	jne	.LBB120_820
# %bb.819:                              # %if.then3920
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB120_820:                            # %if.end3922
                                        #   in Loop: Header=BB120_171 Depth=1
	jmp	.LBB120_821
.LBB120_821:                            # %if.end3923
                                        #   in Loop: Header=BB120_171 Depth=1
	jmp	.LBB120_822
.LBB120_822:                            # %if.end3924
                                        #   in Loop: Header=BB120_171 Depth=1
	jmp	.LBB120_824
.LBB120_823:                            # %if.else3925
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB120_824:                            # %if.end3927
                                        #   in Loop: Header=BB120_171 Depth=1
	jmp	.LBB120_825
.LBB120_825:                            # %if.end3928
                                        #   in Loop: Header=BB120_171 Depth=1
	jmp	.LBB120_827
.LBB120_826:                            # %if.else3929
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
.LBB120_827:                            # %if.end3930
                                        #   in Loop: Header=BB120_171 Depth=1
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB120_829
# %bb.828:                              # %lor.lhs.false3934
                                        #   in Loop: Header=BB120_171 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB120_830
.LBB120_829:                            # %if.then3938
                                        #   in Loop: Header=BB120_171 Depth=1
	movb	$0, %al
	callq	FindSkipModeMotionVector
.LBB120_830:                            # %if.end3939
                                        #   in Loop: Header=BB120_171 Depth=1
	jmp	.LBB120_832
.LBB120_831:                            # %if.else3940
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
.LBB120_832:                            # %if.end3941
                                        #   in Loop: Header=BB120_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB120_1083
# %bb.833:                              # %if.then3944
                                        #   in Loop: Header=BB120_171 Depth=1
	vmovsd	-472(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB120_978
# %bb.834:                              # %if.then3947
                                        #   in Loop: Header=BB120_171 Depth=1
	leaq	-268(%rbp), %rdi
	leaq	-272(%rbp), %rsi
	leaq	-312(%rbp), %rdx
	callq	IntraChromaPrediction
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
.LBB120_835:                            # %for.cond3949
                                        #   Parent Loop BB120_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_853 Depth 3
                                        #         Child Loop BB120_908 Depth 4
                                        #           Child Loop BB120_911 Depth 5
                                        #             Child Loop BB120_913 Depth 6
                                        #           Child Loop BB120_920 Depth 5
                                        #             Child Loop BB120_922 Depth 6
                                        #         Child Loop BB120_955 Depth 4
                                        #           Child Loop BB120_957 Depth 5
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jg	.LBB120_977
# %bb.836:                              # %for.body3953
                                        #   in Loop: Header=BB120_835 Depth=2
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB120_838
# %bb.837:                              # %land.lhs.true3956
                                        #   in Loop: Header=BB120_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	jne	.LBB120_846
.LBB120_838:                            # %lor.lhs.false3960
                                        #   in Loop: Header=BB120_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$2, 524(%rax)
	jne	.LBB120_840
# %bb.839:                              # %land.lhs.true3964
                                        #   in Loop: Header=BB120_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB120_846
.LBB120_840:                            # %lor.lhs.false3966
                                        #   in Loop: Header=BB120_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$1, 524(%rax)
	jne	.LBB120_842
# %bb.841:                              # %land.lhs.true3970
                                        #   in Loop: Header=BB120_835 Depth=2
	cmpl	$0, -272(%rbp)
	je	.LBB120_846
.LBB120_842:                            # %lor.lhs.false3972
                                        #   in Loop: Header=BB120_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jne	.LBB120_847
# %bb.843:                              # %land.lhs.true3976
                                        #   in Loop: Header=BB120_835 Depth=2
	cmpl	$0, -272(%rbp)
	je	.LBB120_846
# %bb.844:                              # %lor.lhs.false3978
                                        #   in Loop: Header=BB120_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB120_846
# %bb.845:                              # %lor.lhs.false3980
                                        #   in Loop: Header=BB120_835 Depth=2
	cmpl	$0, -312(%rbp)
	jne	.LBB120_847
.LBB120_846:                            # %if.then3982
                                        #   in Loop: Header=BB120_835 Depth=2
	jmp	.LBB120_976
.LBB120_847:                            # %if.end3983
                                        #   in Loop: Header=BB120_835 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB120_849
# %bb.848:                              # %if.then3986
                                        #   in Loop: Header=BB120_835 Depth=2
	movl	$11, -316(%rbp)
	jmp	.LBB120_850
.LBB120_849:                            # %if.else3987
                                        #   in Loop: Header=BB120_835 Depth=2
	movl	$8, -316(%rbp)
.LBB120_850:                            # %if.end3988
                                        #   in Loop: Header=BB120_835 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB120_852
# %bb.851:                              # %if.then3991
                                        #   in Loop: Header=BB120_835 Depth=2
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB120_852:                            # %if.end3994
                                        #   in Loop: Header=BB120_835 Depth=2
	movl	$0, -124(%rbp)
	movl	$0, -80(%rbp)
.LBB120_853:                            # %for.cond3995
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_835 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB120_908 Depth 4
                                        #           Child Loop BB120_911 Depth 5
                                        #             Child Loop BB120_913 Depth 6
                                        #           Child Loop BB120_920 Depth 5
                                        #             Child Loop BB120_922 Depth 6
                                        #         Child Loop BB120_955 Depth 4
                                        #           Child Loop BB120_957 Depth 5
	movl	-80(%rbp), %eax
	cmpl	-316(%rbp), %eax
	jge	.LBB120_975
# %bb.854:                              # %for.body3998
                                        #   in Loop: Header=BB120_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB120_868
# %bb.855:                              # %if.then4003
                                        #   in Loop: Header=BB120_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table_RCT(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$10, -32(%rbp)
	jne	.LBB120_857
# %bb.856:                              # %if.then4008
                                        #   in Loop: Header=BB120_853 Depth=3
	movl	-80(%rbp), %eax
	subl	$5, %eax
	movl	%eax, -128(%rbp)
.LBB120_857:                            # %if.end4010
                                        #   in Loop: Header=BB120_853 Depth=3
	cmpl	$10, -32(%rbp)
	jne	.LBB120_867
# %bb.858:                              # %land.lhs.true4013
                                        #   in Loop: Header=BB120_853 Depth=3
	cmpl	$0, -128(%rbp)
	jne	.LBB120_860
# %bb.859:                              # %land.lhs.true4016
                                        #   in Loop: Header=BB120_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB120_866
.LBB120_860:                            # %lor.lhs.false4018
                                        #   in Loop: Header=BB120_853 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB120_862
# %bb.861:                              # %land.lhs.true4021
                                        #   in Loop: Header=BB120_853 Depth=3
	cmpl	$0, -272(%rbp)
	je	.LBB120_866
.LBB120_862:                            # %lor.lhs.false4023
                                        #   in Loop: Header=BB120_853 Depth=3
	cmpl	$3, -128(%rbp)
	jne	.LBB120_867
# %bb.863:                              # %land.lhs.true4026
                                        #   in Loop: Header=BB120_853 Depth=3
	cmpl	$0, -272(%rbp)
	je	.LBB120_866
# %bb.864:                              # %lor.lhs.false4028
                                        #   in Loop: Header=BB120_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB120_866
# %bb.865:                              # %lor.lhs.false4030
                                        #   in Loop: Header=BB120_853 Depth=3
	cmpl	$0, -312(%rbp)
	jne	.LBB120_867
.LBB120_866:                            # %if.then4032
                                        #   in Loop: Header=BB120_853 Depth=3
	jmp	.LBB120_974
.LBB120_867:                            # %if.end4033
                                        #   in Loop: Header=BB120_853 Depth=3
	jmp	.LBB120_869
.LBB120_868:                            # %if.else4034
                                        #   in Loop: Header=BB120_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -128(%rbp)
.LBB120_869:                            # %if.end4037
                                        #   in Loop: Header=BB120_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB120_881
# %bb.870:                              # %land.lhs.true4040
                                        #   in Loop: Header=BB120_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB120_881
# %bb.871:                              # %if.then4044
                                        #   in Loop: Header=BB120_853 Depth=3
	movl	-124(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB120_878
# %bb.872:                              # %land.lhs.true4048
                                        #   in Loop: Header=BB120_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB120_878
# %bb.873:                              # %if.then4052
                                        #   in Loop: Header=BB120_853 Depth=3
	cmpl	$2, -124(%rbp)
	jne	.LBB120_877
# %bb.874:                              # %land.lhs.true4055
                                        #   in Loop: Header=BB120_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB120_877
# %bb.875:                              # %land.lhs.true4062
                                        #   in Loop: Header=BB120_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB120_877
# %bb.876:                              # %if.then4065
                                        #   in Loop: Header=BB120_853 Depth=3
	movl	-124(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -124(%rbp)
.LBB120_877:                            # %if.end4066
                                        #   in Loop: Header=BB120_853 Depth=3
	jmp	.LBB120_878
.LBB120_878:                            # %if.end4067
                                        #   in Loop: Header=BB120_853 Depth=3
	cmpl	$2, -124(%rbp)
	jge	.LBB120_880
# %bb.879:                              # %if.then4070
                                        #   in Loop: Header=BB120_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB120_880:                            # %if.end4072
                                        #   in Loop: Header=BB120_853 Depth=3
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
.LBB120_881:                            # %if.end4074
                                        #   in Loop: Header=BB120_853 Depth=3
	movq	img, %rax
	movl	$0, 72392(%rax)
	movq	input, %rax
	cmpl	$0, 1312(%rax)
	je	.LBB120_888
# %bb.882:                              # %land.lhs.true4076
                                        #   in Loop: Header=BB120_853 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB120_888
# %bb.883:                              # %if.then4080
                                        #   in Loop: Header=BB120_853 Depth=3
	cmpl	$10, -32(%rbp)
	jl	.LBB120_887
# %bb.884:                              # %land.lhs.true4083
                                        #   in Loop: Header=BB120_853 Depth=3
	cmpl	$0, best_mode
	jne	.LBB120_887
# %bb.885:                              # %land.lhs.true4086
                                        #   in Loop: Header=BB120_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB120_887
# %bb.886:                              # %if.then4089
                                        #   in Loop: Header=BB120_853 Depth=3
	movslq	-32(%rbp), %rax
	movl	$0, -384(%rbp,%rax,4)
.LBB120_887:                            # %if.end4092
                                        #   in Loop: Header=BB120_853 Depth=3
	jmp	.LBB120_888
.LBB120_888:                            # %if.end4093
                                        #   in Loop: Header=BB120_853 Depth=3
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB120_965
# %bb.889:                              # %if.then4097
                                        #   in Loop: Header=BB120_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB120_903
# %bb.890:                              # %if.then4102
                                        #   in Loop: Header=BB120_853 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB120_893
# %bb.891:                              # %land.lhs.true4105
                                        #   in Loop: Header=BB120_853 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB120_893
# %bb.892:                              # %if.then4108
                                        #   in Loop: Header=BB120_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB120_902
.LBB120_893:                            # %if.else4110
                                        #   in Loop: Header=BB120_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB120_897
# %bb.894:                              # %land.lhs.true4113
                                        #   in Loop: Header=BB120_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB120_897
# %bb.895:                              # %land.lhs.true4115
                                        #   in Loop: Header=BB120_853 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB120_897
# %bb.896:                              # %if.then4118
                                        #   in Loop: Header=BB120_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB120_901
.LBB120_897:                            # %if.else4120
                                        #   in Loop: Header=BB120_853 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB120_900
# %bb.898:                              # %land.lhs.true4123
                                        #   in Loop: Header=BB120_853 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB120_900
# %bb.899:                              # %if.then4126
                                        #   in Loop: Header=BB120_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB120_900:                            # %if.end4128
                                        #   in Loop: Header=BB120_853 Depth=3
	jmp	.LBB120_901
.LBB120_901:                            # %if.end4129
                                        #   in Loop: Header=BB120_853 Depth=3
	jmp	.LBB120_902
.LBB120_902:                            # %if.end4130
                                        #   in Loop: Header=BB120_853 Depth=3
	jmp	.LBB120_903
.LBB120_903:                            # %if.end4131
                                        #   in Loop: Header=BB120_853 Depth=3
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB120_907
# %bb.904:                              # %lor.lhs.false4135
                                        #   in Loop: Header=BB120_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB120_907
# %bb.905:                              # %lor.lhs.false4138
                                        #   in Loop: Header=BB120_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB120_907
# %bb.906:                              # %lor.lhs.false4142
                                        #   in Loop: Header=BB120_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB120_947
.LBB120_907:                            # %if.then4146
                                        #   in Loop: Header=BB120_853 Depth=3
	jmp	.LBB120_908
.LBB120_908:                            # %while.body
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_835 Depth=2
                                        #       Parent Loop BB120_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB120_911 Depth 5
                                        #             Child Loop BB120_913 Depth 6
                                        #           Child Loop BB120_920 Depth 5
                                        #             Child Loop BB120_922 Depth 6
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB120_929
# %bb.909:                              # %if.then4149
                                        #   in Loop: Header=BB120_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB120_919
# %bb.910:                              # %if.then4152
                                        #   in Loop: Header=BB120_908 Depth=4
	movl	$0, -20(%rbp)
.LBB120_911:                            # %for.cond4153
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_835 Depth=2
                                        #       Parent Loop BB120_853 Depth=3
                                        #         Parent Loop BB120_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB120_913 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB120_918
# %bb.912:                              # %for.body4156
                                        #   in Loop: Header=BB120_911 Depth=5
	movl	$0, -24(%rbp)
.LBB120_913:                            # %for.cond4157
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_835 Depth=2
                                        #       Parent Loop BB120_853 Depth=3
                                        #         Parent Loop BB120_908 Depth=4
                                        #           Parent Loop BB120_911 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB120_916
# %bb.914:                              # %for.body4160
                                        #   in Loop: Header=BB120_913 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.915:                              # %for.inc4180
                                        #   in Loop: Header=BB120_913 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_913
.LBB120_916:                            # %for.end4182
                                        #   in Loop: Header=BB120_911 Depth=5
	jmp	.LBB120_917
.LBB120_917:                            # %for.inc4183
                                        #   in Loop: Header=BB120_911 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_911
.LBB120_918:                            # %for.end4185
                                        #   in Loop: Header=BB120_908 Depth=4
	jmp	.LBB120_928
.LBB120_919:                            # %if.else4186
                                        #   in Loop: Header=BB120_908 Depth=4
	movl	$0, -20(%rbp)
.LBB120_920:                            # %for.cond4187
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_835 Depth=2
                                        #       Parent Loop BB120_853 Depth=3
                                        #         Parent Loop BB120_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB120_922 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB120_927
# %bb.921:                              # %for.body4190
                                        #   in Loop: Header=BB120_920 Depth=5
	movl	$0, -24(%rbp)
.LBB120_922:                            # %for.cond4191
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_835 Depth=2
                                        #       Parent Loop BB120_853 Depth=3
                                        #         Parent Loop BB120_908 Depth=4
                                        #           Parent Loop BB120_920 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB120_925
# %bb.923:                              # %for.body4194
                                        #   in Loop: Header=BB120_922 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.924:                              # %for.inc4213
                                        #   in Loop: Header=BB120_922 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_922
.LBB120_925:                            # %for.end4215
                                        #   in Loop: Header=BB120_920 Depth=5
	jmp	.LBB120_926
.LBB120_926:                            # %for.inc4216
                                        #   in Loop: Header=BB120_920 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_920
.LBB120_927:                            # %for.end4218
                                        #   in Loop: Header=BB120_908 Depth=4
	jmp	.LBB120_928
.LBB120_928:                            # %if.end4219
                                        #   in Loop: Header=BB120_908 Depth=4
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB120_929:                            # %if.end4220
                                        #   in Loop: Header=BB120_908 Depth=4
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB120_945
# %bb.930:                              # %if.then4224
                                        #   in Loop: Header=BB120_908 Depth=4
	cmpl	$1, -32(%rbp)
	jl	.LBB120_935
# %bb.931:                              # %land.lhs.true4227
                                        #   in Loop: Header=BB120_908 Depth=4
	cmpl	$3, -32(%rbp)
	jg	.LBB120_935
# %bb.932:                              # %land.lhs.true4230
                                        #   in Loop: Header=BB120_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB120_935
# %bb.933:                              # %if.then4234
                                        #   in Loop: Header=BB120_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB120_934:                            # %while.body.backedge
                                        #   in Loop: Header=BB120_908 Depth=4
	jmp	.LBB120_908
.LBB120_935:                            # %if.else4236
                                        #   in Loop: Header=BB120_908 Depth=4
	cmpl	$0, -32(%rbp)
	jne	.LBB120_940
# %bb.936:                              # %land.lhs.true4239
                                        #   in Loop: Header=BB120_908 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB120_940
# %bb.937:                              # %land.lhs.true4241
                                        #   in Loop: Header=BB120_908 Depth=4
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB120_940
# %bb.938:                              # %land.lhs.true4244
                                        #   in Loop: Header=BB120_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB120_940
# %bb.939:                              # %if.then4248
                                        #   in Loop: Header=BB120_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB120_934
.LBB120_940:                            # %if.else4250
                                        #   in Loop: Header=BB120_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB120_944
# %bb.941:                              # %land.lhs.true4253
                                        #   in Loop: Header=BB120_908 Depth=4
	cmpl	$0, -368(%rbp)
	je	.LBB120_944
# %bb.942:                              # %land.lhs.true4256
                                        #   in Loop: Header=BB120_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB120_944
# %bb.943:                              # %if.then4260
                                        #   in Loop: Header=BB120_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB120_934
.LBB120_944:                            # %if.else4262
                                        #   in Loop: Header=BB120_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB120_946
.LBB120_945:                            # %if.else4264
                                        #   in Loop: Header=BB120_853 Depth=3
	jmp	.LBB120_946
.LBB120_946:                            # %while.end
                                        #   in Loop: Header=BB120_853 Depth=3
	jmp	.LBB120_947
.LBB120_947:                            # %if.end4265
                                        #   in Loop: Header=BB120_853 Depth=3
	cmpl	$0, -384(%rbp)
	je	.LBB120_964
# %bb.948:                              # %land.lhs.true4268
                                        #   in Loop: Header=BB120_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB120_964
# %bb.949:                              # %land.lhs.true4270
                                        #   in Loop: Header=BB120_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB120_964
# %bb.950:                              # %land.lhs.true4273
                                        #   in Loop: Header=BB120_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB120_964
# %bb.951:                              # %land.lhs.true4276
                                        #   in Loop: Header=BB120_853 Depth=3
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB120_964
# %bb.952:                              # %land.lhs.true4281
                                        #   in Loop: Header=BB120_853 Depth=3
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB120_964
# %bb.953:                              # %if.then4283
                                        #   in Loop: Header=BB120_853 Depth=3
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB120_963
# %bb.954:                              # %if.then4287
                                        #   in Loop: Header=BB120_853 Depth=3
	movl	$0, -20(%rbp)
.LBB120_955:                            # %for.cond4288
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_835 Depth=2
                                        #       Parent Loop BB120_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB120_957 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB120_962
# %bb.956:                              # %for.body4291
                                        #   in Loop: Header=BB120_955 Depth=4
	movl	$0, -24(%rbp)
.LBB120_957:                            # %for.cond4292
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_835 Depth=2
                                        #       Parent Loop BB120_853 Depth=3
                                        #         Parent Loop BB120_955 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB120_960
# %bb.958:                              # %for.body4295
                                        #   in Loop: Header=BB120_957 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.959:                              # %for.inc4314
                                        #   in Loop: Header=BB120_957 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_957
.LBB120_960:                            # %for.end4316
                                        #   in Loop: Header=BB120_955 Depth=4
	jmp	.LBB120_961
.LBB120_961:                            # %for.inc4317
                                        #   in Loop: Header=BB120_955 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_955
.LBB120_962:                            # %for.end4319
                                        #   in Loop: Header=BB120_853 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB120_963:                            # %if.end4320
                                        #   in Loop: Header=BB120_853 Depth=3
	jmp	.LBB120_964
.LBB120_964:                            # %if.end4321
                                        #   in Loop: Header=BB120_853 Depth=3
	jmp	.LBB120_965
.LBB120_965:                            # %if.end4322
                                        #   in Loop: Header=BB120_853 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB120_973
# %bb.966:                              # %land.lhs.true4325
                                        #   in Loop: Header=BB120_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB120_973
# %bb.967:                              # %if.then4329
                                        #   in Loop: Header=BB120_853 Depth=3
	cmpl	$2, -124(%rbp)
	jne	.LBB120_972
# %bb.968:                              # %land.lhs.true4332
                                        #   in Loop: Header=BB120_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB120_972
# %bb.969:                              # %land.lhs.true4339
                                        #   in Loop: Header=BB120_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB120_972
# %bb.970:                              # %land.lhs.true4342
                                        #   in Loop: Header=BB120_853 Depth=3
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB120_972
# %bb.971:                              # %if.then4346
                                        #   in Loop: Header=BB120_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB120_972:                            # %if.end4356
                                        #   in Loop: Header=BB120_853 Depth=3
	jmp	.LBB120_973
.LBB120_973:                            # %if.end4357
                                        #   in Loop: Header=BB120_853 Depth=3
	jmp	.LBB120_974
.LBB120_974:                            # %for.inc4358
                                        #   in Loop: Header=BB120_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB120_853
.LBB120_975:                            # %for.end4360
                                        #   in Loop: Header=BB120_835 Depth=2
	jmp	.LBB120_976
.LBB120_976:                            # %for.inc4361
                                        #   in Loop: Header=BB120_835 Depth=2
	movq	-48(%rbp), %rax
	movl	524(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 524(%rax)
	jmp	.LBB120_835
.LBB120_977:                            # %for.end4364
                                        #   in Loop: Header=BB120_171 Depth=1
	jmp	.LBB120_1082
.LBB120_978:                            # %if.else4365
                                        #   in Loop: Header=BB120_171 Depth=1
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB120_980
# %bb.979:                              # %if.then4368
                                        #   in Loop: Header=BB120_171 Depth=1
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB120_980:                            # %if.end4371
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	$0, -124(%rbp)
	movl	$0, -80(%rbp)
.LBB120_981:                            # %for.cond4372
                                        #   Parent Loop BB120_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_1014 Depth 3
                                        #         Child Loop BB120_1017 Depth 4
                                        #           Child Loop BB120_1019 Depth 5
                                        #         Child Loop BB120_1026 Depth 4
                                        #           Child Loop BB120_1028 Depth 5
                                        #       Child Loop BB120_1061 Depth 3
                                        #         Child Loop BB120_1063 Depth 4
	cmpl	$8, -80(%rbp)
	jge	.LBB120_1081
# %bb.982:                              # %for.body4375
                                        #   in Loop: Header=BB120_981 Depth=2
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB120_994
# %bb.983:                              # %land.lhs.true4380
                                        #   in Loop: Header=BB120_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB120_994
# %bb.984:                              # %if.then4384
                                        #   in Loop: Header=BB120_981 Depth=2
	movl	-124(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB120_991
# %bb.985:                              # %land.lhs.true4388
                                        #   in Loop: Header=BB120_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB120_991
# %bb.986:                              # %if.then4392
                                        #   in Loop: Header=BB120_981 Depth=2
	cmpl	$2, -124(%rbp)
	jne	.LBB120_990
# %bb.987:                              # %land.lhs.true4395
                                        #   in Loop: Header=BB120_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB120_990
# %bb.988:                              # %land.lhs.true4402
                                        #   in Loop: Header=BB120_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB120_990
# %bb.989:                              # %if.then4405
                                        #   in Loop: Header=BB120_981 Depth=2
	movl	-124(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -124(%rbp)
.LBB120_990:                            # %if.end4407
                                        #   in Loop: Header=BB120_981 Depth=2
	jmp	.LBB120_991
.LBB120_991:                            # %if.end4408
                                        #   in Loop: Header=BB120_981 Depth=2
	cmpl	$2, -124(%rbp)
	jge	.LBB120_993
# %bb.992:                              # %if.then4411
                                        #   in Loop: Header=BB120_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB120_993:                            # %if.end4413
                                        #   in Loop: Header=BB120_981 Depth=2
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
.LBB120_994:                            # %if.end4415
                                        #   in Loop: Header=BB120_981 Depth=2
	movq	img, %rax
	movl	$0, 72392(%rax)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB120_1071
# %bb.995:                              # %if.then4420
                                        #   in Loop: Header=BB120_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB120_1009
# %bb.996:                              # %if.then4425
                                        #   in Loop: Header=BB120_981 Depth=2
	cmpl	$1, -32(%rbp)
	jl	.LBB120_999
# %bb.997:                              # %land.lhs.true4428
                                        #   in Loop: Header=BB120_981 Depth=2
	cmpl	$3, -32(%rbp)
	jg	.LBB120_999
# %bb.998:                              # %if.then4431
                                        #   in Loop: Header=BB120_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB120_1008
.LBB120_999:                            # %if.else4433
                                        #   in Loop: Header=BB120_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB120_1003
# %bb.1000:                             # %land.lhs.true4436
                                        #   in Loop: Header=BB120_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB120_1003
# %bb.1001:                             # %land.lhs.true4438
                                        #   in Loop: Header=BB120_981 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB120_1003
# %bb.1002:                             # %if.then4441
                                        #   in Loop: Header=BB120_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB120_1007
.LBB120_1003:                           # %if.else4443
                                        #   in Loop: Header=BB120_981 Depth=2
	cmpl	$8, -32(%rbp)
	jne	.LBB120_1006
# %bb.1004:                             # %land.lhs.true4446
                                        #   in Loop: Header=BB120_981 Depth=2
	cmpl	$0, -368(%rbp)
	je	.LBB120_1006
# %bb.1005:                             # %if.then4449
                                        #   in Loop: Header=BB120_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB120_1006:                           # %if.end4451
                                        #   in Loop: Header=BB120_981 Depth=2
	jmp	.LBB120_1007
.LBB120_1007:                           # %if.end4452
                                        #   in Loop: Header=BB120_981 Depth=2
	jmp	.LBB120_1008
.LBB120_1008:                           # %if.end4453
                                        #   in Loop: Header=BB120_981 Depth=2
	jmp	.LBB120_1009
.LBB120_1009:                           # %if.end4454
                                        #   in Loop: Header=BB120_981 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB120_1013
# %bb.1010:                             # %lor.lhs.false4458
                                        #   in Loop: Header=BB120_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB120_1013
# %bb.1011:                             # %lor.lhs.false4462
                                        #   in Loop: Header=BB120_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB120_1013
# %bb.1012:                             # %lor.lhs.false4466
                                        #   in Loop: Header=BB120_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB120_1053
.LBB120_1013:                           # %if.then4470
                                        #   in Loop: Header=BB120_981 Depth=2
	jmp	.LBB120_1014
.LBB120_1014:                           # %while.body4471
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB120_1017 Depth 4
                                        #           Child Loop BB120_1019 Depth 5
                                        #         Child Loop BB120_1026 Depth 4
                                        #           Child Loop BB120_1028 Depth 5
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB120_1035
# %bb.1015:                             # %if.then4474
                                        #   in Loop: Header=BB120_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB120_1025
# %bb.1016:                             # %if.then4477
                                        #   in Loop: Header=BB120_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB120_1017:                           # %for.cond4478
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_981 Depth=2
                                        #       Parent Loop BB120_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB120_1019 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB120_1024
# %bb.1018:                             # %for.body4481
                                        #   in Loop: Header=BB120_1017 Depth=4
	movl	$0, -24(%rbp)
.LBB120_1019:                           # %for.cond4482
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_981 Depth=2
                                        #       Parent Loop BB120_1014 Depth=3
                                        #         Parent Loop BB120_1017 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB120_1022
# %bb.1020:                             # %for.body4485
                                        #   in Loop: Header=BB120_1019 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1021:                             # %for.inc4505
                                        #   in Loop: Header=BB120_1019 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_1019
.LBB120_1022:                           # %for.end4507
                                        #   in Loop: Header=BB120_1017 Depth=4
	jmp	.LBB120_1023
.LBB120_1023:                           # %for.inc4508
                                        #   in Loop: Header=BB120_1017 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_1017
.LBB120_1024:                           # %for.end4510
                                        #   in Loop: Header=BB120_1014 Depth=3
	jmp	.LBB120_1034
.LBB120_1025:                           # %if.else4511
                                        #   in Loop: Header=BB120_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB120_1026:                           # %for.cond4512
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_981 Depth=2
                                        #       Parent Loop BB120_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB120_1028 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB120_1033
# %bb.1027:                             # %for.body4515
                                        #   in Loop: Header=BB120_1026 Depth=4
	movl	$0, -24(%rbp)
.LBB120_1028:                           # %for.cond4516
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_981 Depth=2
                                        #       Parent Loop BB120_1014 Depth=3
                                        #         Parent Loop BB120_1026 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB120_1031
# %bb.1029:                             # %for.body4519
                                        #   in Loop: Header=BB120_1028 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1030:                             # %for.inc4538
                                        #   in Loop: Header=BB120_1028 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_1028
.LBB120_1031:                           # %for.end4540
                                        #   in Loop: Header=BB120_1026 Depth=4
	jmp	.LBB120_1032
.LBB120_1032:                           # %for.inc4541
                                        #   in Loop: Header=BB120_1026 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_1026
.LBB120_1033:                           # %for.end4543
                                        #   in Loop: Header=BB120_1014 Depth=3
	jmp	.LBB120_1034
.LBB120_1034:                           # %if.end4544
                                        #   in Loop: Header=BB120_1014 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB120_1035:                           # %if.end4545
                                        #   in Loop: Header=BB120_1014 Depth=3
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB120_1051
# %bb.1036:                             # %if.then4549
                                        #   in Loop: Header=BB120_1014 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB120_1041
# %bb.1037:                             # %land.lhs.true4552
                                        #   in Loop: Header=BB120_1014 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB120_1041
# %bb.1038:                             # %land.lhs.true4555
                                        #   in Loop: Header=BB120_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB120_1041
# %bb.1039:                             # %if.then4559
                                        #   in Loop: Header=BB120_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB120_1040:                           # %while.body4471.backedge
                                        #   in Loop: Header=BB120_1014 Depth=3
	jmp	.LBB120_1014
.LBB120_1041:                           # %if.else4561
                                        #   in Loop: Header=BB120_1014 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB120_1046
# %bb.1042:                             # %land.lhs.true4564
                                        #   in Loop: Header=BB120_1014 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB120_1046
# %bb.1043:                             # %land.lhs.true4566
                                        #   in Loop: Header=BB120_1014 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB120_1046
# %bb.1044:                             # %land.lhs.true4569
                                        #   in Loop: Header=BB120_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB120_1046
# %bb.1045:                             # %if.then4573
                                        #   in Loop: Header=BB120_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB120_1040
.LBB120_1046:                           # %if.else4575
                                        #   in Loop: Header=BB120_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB120_1050
# %bb.1047:                             # %land.lhs.true4578
                                        #   in Loop: Header=BB120_1014 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB120_1050
# %bb.1048:                             # %land.lhs.true4581
                                        #   in Loop: Header=BB120_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB120_1050
# %bb.1049:                             # %if.then4585
                                        #   in Loop: Header=BB120_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB120_1040
.LBB120_1050:                           # %if.else4587
                                        #   in Loop: Header=BB120_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB120_1052
.LBB120_1051:                           # %if.else4589
                                        #   in Loop: Header=BB120_981 Depth=2
	jmp	.LBB120_1052
.LBB120_1052:                           # %while.end4590
                                        #   in Loop: Header=BB120_981 Depth=2
	jmp	.LBB120_1053
.LBB120_1053:                           # %if.end4591
                                        #   in Loop: Header=BB120_981 Depth=2
	cmpl	$0, -384(%rbp)
	je	.LBB120_1070
# %bb.1054:                             # %land.lhs.true4594
                                        #   in Loop: Header=BB120_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB120_1070
# %bb.1055:                             # %land.lhs.true4596
                                        #   in Loop: Header=BB120_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB120_1070
# %bb.1056:                             # %land.lhs.true4599
                                        #   in Loop: Header=BB120_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB120_1070
# %bb.1057:                             # %land.lhs.true4602
                                        #   in Loop: Header=BB120_981 Depth=2
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB120_1070
# %bb.1058:                             # %land.lhs.true4607
                                        #   in Loop: Header=BB120_981 Depth=2
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB120_1070
# %bb.1059:                             # %if.then4610
                                        #   in Loop: Header=BB120_981 Depth=2
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB120_1069
# %bb.1060:                             # %if.then4614
                                        #   in Loop: Header=BB120_981 Depth=2
	movl	$0, -20(%rbp)
.LBB120_1061:                           # %for.cond4615
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB120_1063 Depth 4
	cmpl	$16, -20(%rbp)
	jge	.LBB120_1068
# %bb.1062:                             # %for.body4618
                                        #   in Loop: Header=BB120_1061 Depth=3
	movl	$0, -24(%rbp)
.LBB120_1063:                           # %for.cond4619
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_981 Depth=2
                                        #       Parent Loop BB120_1061 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -24(%rbp)
	jge	.LBB120_1066
# %bb.1064:                             # %for.body4622
                                        #   in Loop: Header=BB120_1063 Depth=4
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1065:                             # %for.inc4641
                                        #   in Loop: Header=BB120_1063 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_1063
.LBB120_1066:                           # %for.end4643
                                        #   in Loop: Header=BB120_1061 Depth=3
	jmp	.LBB120_1067
.LBB120_1067:                           # %for.inc4644
                                        #   in Loop: Header=BB120_1061 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_1061
.LBB120_1068:                           # %for.end4646
                                        #   in Loop: Header=BB120_981 Depth=2
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB120_1069:                           # %if.end4647
                                        #   in Loop: Header=BB120_981 Depth=2
	jmp	.LBB120_1070
.LBB120_1070:                           # %if.end4648
                                        #   in Loop: Header=BB120_981 Depth=2
	jmp	.LBB120_1071
.LBB120_1071:                           # %if.end4649
                                        #   in Loop: Header=BB120_981 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB120_1079
# %bb.1072:                             # %land.lhs.true4652
                                        #   in Loop: Header=BB120_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB120_1079
# %bb.1073:                             # %if.then4656
                                        #   in Loop: Header=BB120_981 Depth=2
	cmpl	$2, -124(%rbp)
	jne	.LBB120_1078
# %bb.1074:                             # %land.lhs.true4659
                                        #   in Loop: Header=BB120_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB120_1078
# %bb.1075:                             # %land.lhs.true4666
                                        #   in Loop: Header=BB120_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB120_1078
# %bb.1076:                             # %land.lhs.true4669
                                        #   in Loop: Header=BB120_981 Depth=2
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB120_1078
# %bb.1077:                             # %if.then4673
                                        #   in Loop: Header=BB120_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB120_1078:                           # %if.end4683
                                        #   in Loop: Header=BB120_981 Depth=2
	jmp	.LBB120_1079
.LBB120_1079:                           # %if.end4684
                                        #   in Loop: Header=BB120_981 Depth=2
	jmp	.LBB120_1080
.LBB120_1080:                           # %for.inc4685
                                        #   in Loop: Header=BB120_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB120_981
.LBB120_1081:                           # %for.end4687
                                        #   in Loop: Header=BB120_171 Depth=1
	jmp	.LBB120_1082
.LBB120_1082:                           # %if.end4688
                                        #   in Loop: Header=BB120_171 Depth=1
	jmp	.LBB120_1284
.LBB120_1083:                           # %if.else4689
                                        #   in Loop: Header=BB120_171 Depth=1
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -220(%rbp)
	movq	-48(%rbp), %rax
	movl	576(%rax), %eax
	movl	%eax, -304(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB120_1085
# %bb.1084:                             # %if.then4694
                                        #   in Loop: Header=BB120_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB120_1085:                           # %if.end4695
                                        #   in Loop: Header=BB120_171 Depth=1
	cmpl	$0, -384(%rbp)
	je	.LBB120_1123
# %bb.1086:                             # %land.lhs.true4698
                                        #   in Loop: Header=BB120_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB120_1123
# %bb.1087:                             # %if.then4700
                                        #   in Loop: Header=BB120_171 Depth=1
	cmpl	$0, -264(%rbp)
	je	.LBB120_1100
# %bb.1088:                             # %if.then4702
                                        #   in Loop: Header=BB120_171 Depth=1
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB120_1090
	jmp	.LBB120_1089
.LBB120_1089:                           # %if.then4702
                                        #   in Loop: Header=BB120_171 Depth=1
	subl	$2, %eax
	je	.LBB120_1097
	jmp	.LBB120_1098
.LBB120_1090:                           # %sw.bb4704
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	-208(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jl	.LBB120_1094
# %bb.1091:                             # %lor.lhs.false4707
                                        #   in Loop: Header=BB120_171 Depth=1
	cmpl	$0, -364(%rbp)
	je	.LBB120_1094
# %bb.1092:                             # %land.lhs.true4710
                                        #   in Loop: Header=BB120_171 Depth=1
	cmpl	$0, -360(%rbp)
	je	.LBB120_1094
# %bb.1093:                             # %land.lhs.true4713
                                        #   in Loop: Header=BB120_171 Depth=1
	cmpl	$0, -356(%rbp)
	jne	.LBB120_1095
.LBB120_1094:                           # %if.then4716
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	-208(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB120_1096
.LBB120_1095:                           # %if.else4717
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB120_1096:                           # %if.end4718
                                        #   in Loop: Header=BB120_171 Depth=1
	jmp	.LBB120_1099
.LBB120_1097:                           # %sw.bb4719
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	-208(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB120_1099
.LBB120_1098:                           # %sw.default4720
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB120_1099:                           # %sw.epilog4721
                                        #   in Loop: Header=BB120_171 Depth=1
	jmp	.LBB120_1101
.LBB120_1100:                           # %if.else4722
                                        #   in Loop: Header=BB120_171 Depth=1
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	Get_Direct_CostMB
	movl	%eax, -60(%rbp)
.LBB120_1101:                           # %if.end4724
                                        #   in Loop: Header=BB120_171 Depth=1
	vmovsd	.LCPI120_17(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI120_18(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-60(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB120_1121
# %bb.1102:                             # %if.then4731
                                        #   in Loop: Header=BB120_171 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB120_1111
# %bb.1103:                             # %land.lhs.true4734
                                        #   in Loop: Header=BB120_171 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB120_1111
# %bb.1104:                             # %if.then4737
                                        #   in Loop: Header=BB120_171 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB120_1106
# %bb.1105:                             # %if.then4741
                                        #   in Loop: Header=BB120_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB120_1110
.LBB120_1106:                           # %if.else4743
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	-208(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB120_1108
# %bb.1107:                             # %if.then4746
                                        #   in Loop: Header=BB120_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB120_1109
.LBB120_1108:                           # %if.else4748
                                        #   in Loop: Header=BB120_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB120_1109:                           # %if.end4750
                                        #   in Loop: Header=BB120_171 Depth=1
	jmp	.LBB120_1110
.LBB120_1110:                           # %if.end4751
                                        #   in Loop: Header=BB120_171 Depth=1
	jmp	.LBB120_1112
.LBB120_1111:                           # %if.else4752
                                        #   in Loop: Header=BB120_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB120_1112:                           # %if.end4754
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	$0, -20(%rbp)
.LBB120_1113:                           # %for.cond4755
                                        #   Parent Loop BB120_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_1115 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB120_1120
# %bb.1114:                             # %for.body4758
                                        #   in Loop: Header=BB120_1113 Depth=2
	movl	$0, -24(%rbp)
.LBB120_1115:                           # %for.cond4759
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_1113 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB120_1118
# %bb.1116:                             # %for.body4762
                                        #   in Loop: Header=BB120_1115 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1117:                             # %for.inc4783
                                        #   in Loop: Header=BB120_1115 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_1115
.LBB120_1118:                           # %for.end4785
                                        #   in Loop: Header=BB120_1113 Depth=2
	jmp	.LBB120_1119
.LBB120_1119:                           # %for.inc4786
                                        #   in Loop: Header=BB120_1113 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_1113
.LBB120_1120:                           # %for.end4788
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, best_mode
	jmp	.LBB120_1122
.LBB120_1121:                           # %if.else4789
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	-220(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-304(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB120_1122:                           # %if.end4792
                                        #   in Loop: Header=BB120_171 Depth=1
	jmp	.LBB120_1123
.LBB120_1123:                           # %if.end4793
                                        #   in Loop: Header=BB120_171 Depth=1
	cmpl	$0, -332(%rbp)
	je	.LBB120_1170
# %bb.1124:                             # %if.then4796
                                        #   in Loop: Header=BB120_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$13, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movl	%eax, -176(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB120_1168
# %bb.1125:                             # %if.then4802
                                        #   in Loop: Header=BB120_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB120_1149
# %bb.1126:                             # %if.then4805
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	$0, -20(%rbp)
.LBB120_1127:                           # %for.cond4806
                                        #   Parent Loop BB120_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_1129 Depth 3
                                        #         Child Loop BB120_1131 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB120_1140
# %bb.1128:                             # %for.body4809
                                        #   in Loop: Header=BB120_1127 Depth=2
	movl	$0, -24(%rbp)
.LBB120_1129:                           # %for.cond4810
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_1127 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB120_1131 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB120_1138
# %bb.1130:                             # %for.body4813
                                        #   in Loop: Header=BB120_1129 Depth=3
	movl	$0, -56(%rbp)
.LBB120_1131:                           # %for.cond4814
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_1127 Depth=2
                                        #       Parent Loop BB120_1129 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB120_1136
# %bb.1132:                             # %for.body4817
                                        #   in Loop: Header=BB120_1131 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB120_1134
# %bb.1133:                             # %if.then4825
                                        #   in Loop: Header=BB120_1131 Depth=4
	movl	$2, -132(%rbp)
.LBB120_1134:                           # %if.end4826
                                        #   in Loop: Header=BB120_1131 Depth=4
	jmp	.LBB120_1135
.LBB120_1135:                           # %for.inc4827
                                        #   in Loop: Header=BB120_1131 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB120_1131
.LBB120_1136:                           # %for.end4829
                                        #   in Loop: Header=BB120_1129 Depth=3
	jmp	.LBB120_1137
.LBB120_1137:                           # %for.inc4830
                                        #   in Loop: Header=BB120_1129 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_1129
.LBB120_1138:                           # %for.end4832
                                        #   in Loop: Header=BB120_1127 Depth=2
	jmp	.LBB120_1139
.LBB120_1139:                           # %for.inc4833
                                        #   in Loop: Header=BB120_1127 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_1127
.LBB120_1140:                           # %for.end4835
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-176(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	$0, -24(%rbp)
.LBB120_1141:                           # %for.cond4840
                                        #   Parent Loop BB120_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_1143 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB120_1148
# %bb.1142:                             # %for.body4843
                                        #   in Loop: Header=BB120_1141 Depth=2
	movl	$0, -20(%rbp)
.LBB120_1143:                           # %for.cond4844
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_1141 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB120_1146
# %bb.1144:                             # %for.body4847
                                        #   in Loop: Header=BB120_1143 Depth=3
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgU, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgV, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1145:                             # %for.inc4875
                                        #   in Loop: Header=BB120_1143 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_1143
.LBB120_1146:                           # %for.end4877
                                        #   in Loop: Header=BB120_1141 Depth=2
	jmp	.LBB120_1147
.LBB120_1147:                           # %for.inc4878
                                        #   in Loop: Header=BB120_1141 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_1141
.LBB120_1148:                           # %for.end4880
                                        #   in Loop: Header=BB120_171 Depth=1
	jmp	.LBB120_1149
.LBB120_1149:                           # %if.end4881
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	-176(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB120_1151
# %bb.1150:                             # %if.then4886
                                        #   in Loop: Header=BB120_171 Depth=1
	movq	cofAC, %rax
	movq	%rax, -400(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-400(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB120_1151:                           # %if.end4889
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	$0, -24(%rbp)
.LBB120_1152:                           # %for.cond4890
                                        #   Parent Loop BB120_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_1154 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB120_1159
# %bb.1153:                             # %for.body4893
                                        #   in Loop: Header=BB120_1152 Depth=2
	movl	$0, -20(%rbp)
.LBB120_1154:                           # %for.cond4894
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_1152 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB120_1157
# %bb.1155:                             # %for.body4897
                                        #   in Loop: Header=BB120_1154 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgY, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1156:                             # %for.inc4911
                                        #   in Loop: Header=BB120_1154 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_1154
.LBB120_1157:                           # %for.end4913
                                        #   in Loop: Header=BB120_1152 Depth=2
	jmp	.LBB120_1158
.LBB120_1158:                           # %for.inc4914
                                        #   in Loop: Header=BB120_1152 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_1152
.LBB120_1159:                           # %for.end4916
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	$0, -20(%rbp)
.LBB120_1160:                           # %for.cond4917
                                        #   Parent Loop BB120_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_1162 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB120_1167
# %bb.1161:                             # %for.body4920
                                        #   in Loop: Header=BB120_1160 Depth=2
	movl	$0, -24(%rbp)
.LBB120_1162:                           # %for.cond4921
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_1160 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB120_1165
# %bb.1163:                             # %for.body4924
                                        #   in Loop: Header=BB120_1162 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1164:                             # %for.inc4945
                                        #   in Loop: Header=BB120_1162 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_1162
.LBB120_1165:                           # %for.end4947
                                        #   in Loop: Header=BB120_1160 Depth=2
	jmp	.LBB120_1166
.LBB120_1166:                           # %for.inc4948
                                        #   in Loop: Header=BB120_1160 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_1160
.LBB120_1167:                           # %for.end4950
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$13, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -220(%rbp)
	jmp	.LBB120_1169
.LBB120_1168:                           # %if.else4952
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	-220(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB120_1169:                           # %if.end4954
                                        #   in Loop: Header=BB120_171 Depth=1
	jmp	.LBB120_1170
.LBB120_1170:                           # %if.end4955
                                        #   in Loop: Header=BB120_171 Depth=1
	cmpl	$0, -348(%rbp)
	je	.LBB120_1199
# %bb.1171:                             # %if.then4958
                                        #   in Loop: Header=BB120_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$9, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movl	%eax, -176(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB120_1197
# %bb.1172:                             # %if.then4964
                                        #   in Loop: Header=BB120_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB120_1188
# %bb.1173:                             # %if.then4967
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	$0, -20(%rbp)
.LBB120_1174:                           # %for.cond4968
                                        #   Parent Loop BB120_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_1176 Depth 3
                                        #         Child Loop BB120_1178 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB120_1187
# %bb.1175:                             # %for.body4971
                                        #   in Loop: Header=BB120_1174 Depth=2
	movl	$0, -24(%rbp)
.LBB120_1176:                           # %for.cond4972
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_1174 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB120_1178 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB120_1185
# %bb.1177:                             # %for.body4975
                                        #   in Loop: Header=BB120_1176 Depth=3
	movl	$0, -56(%rbp)
.LBB120_1178:                           # %for.cond4976
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_1174 Depth=2
                                        #       Parent Loop BB120_1176 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB120_1183
# %bb.1179:                             # %for.body4979
                                        #   in Loop: Header=BB120_1178 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB120_1181
# %bb.1180:                             # %if.then4987
                                        #   in Loop: Header=BB120_1178 Depth=4
	movl	$2, -132(%rbp)
.LBB120_1181:                           # %if.end4988
                                        #   in Loop: Header=BB120_1178 Depth=4
	jmp	.LBB120_1182
.LBB120_1182:                           # %for.inc4989
                                        #   in Loop: Header=BB120_1178 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB120_1178
.LBB120_1183:                           # %for.end4991
                                        #   in Loop: Header=BB120_1176 Depth=3
	jmp	.LBB120_1184
.LBB120_1184:                           # %for.inc4992
                                        #   in Loop: Header=BB120_1176 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_1176
.LBB120_1185:                           # %for.end4994
                                        #   in Loop: Header=BB120_1174 Depth=2
	jmp	.LBB120_1186
.LBB120_1186:                           # %for.inc4995
                                        #   in Loop: Header=BB120_1174 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_1174
.LBB120_1187:                           # %for.end4997
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-176(%rbp), %eax
	movl	%eax, -176(%rbp)
.LBB120_1188:                           # %if.end5002
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	-176(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movl	$0, -20(%rbp)
.LBB120_1189:                           # %for.cond5004
                                        #   Parent Loop BB120_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_1191 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB120_1196
# %bb.1190:                             # %for.body5007
                                        #   in Loop: Header=BB120_1189 Depth=2
	movl	$0, -24(%rbp)
.LBB120_1191:                           # %for.cond5008
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_1189 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB120_1194
# %bb.1192:                             # %for.body5011
                                        #   in Loop: Header=BB120_1191 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1193:                             # %for.inc5032
                                        #   in Loop: Header=BB120_1191 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_1191
.LBB120_1194:                           # %for.end5034
                                        #   in Loop: Header=BB120_1189 Depth=2
	jmp	.LBB120_1195
.LBB120_1195:                           # %for.inc5035
                                        #   in Loop: Header=BB120_1189 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_1189
.LBB120_1196:                           # %for.end5037
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$9, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -220(%rbp)
	jmp	.LBB120_1198
.LBB120_1197:                           # %if.else5039
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	-220(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movq	cofAC, %rax
	movq	%rax, -400(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-400(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB120_1198:                           # %if.end5043
                                        #   in Loop: Header=BB120_171 Depth=1
	jmp	.LBB120_1199
.LBB120_1199:                           # %if.end5044
                                        #   in Loop: Header=BB120_171 Depth=1
	cmpl	$0, -344(%rbp)
	je	.LBB120_1283
# %bb.1200:                             # %if.then5047
                                        #   in Loop: Header=BB120_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movb	$0, %al
	callq	intrapred_luma_16x16
	leaq	-128(%rbp), %rdi
	callq	find_sad_16x16
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB120_1281
# %bb.1201:                             # %if.then5052
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	$0, -20(%rbp)
.LBB120_1202:                           # %for.cond5053
                                        #   Parent Loop BB120_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_1204 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB120_1209
# %bb.1203:                             # %for.body5056
                                        #   in Loop: Header=BB120_1202 Depth=2
	movl	$0, -24(%rbp)
.LBB120_1204:                           # %for.cond5057
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_1202 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB120_1207
# %bb.1205:                             # %for.body5060
                                        #   in Loop: Header=BB120_1204 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1206:                             # %for.inc5082
                                        #   in Loop: Header=BB120_1204 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_1204
.LBB120_1207:                           # %for.end5084
                                        #   in Loop: Header=BB120_1202 Depth=2
	jmp	.LBB120_1208
.LBB120_1208:                           # %for.inc5085
                                        #   in Loop: Header=BB120_1202 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_1202
.LBB120_1209:                           # %for.end5087
                                        #   in Loop: Header=BB120_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB120_1219
# %bb.1210:                             # %if.then5090
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	$0, -24(%rbp)
.LBB120_1211:                           # %for.cond5091
                                        #   Parent Loop BB120_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_1213 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB120_1218
# %bb.1212:                             # %for.body5094
                                        #   in Loop: Header=BB120_1211 Depth=2
	movl	$0, -20(%rbp)
.LBB120_1213:                           # %for.cond5095
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_1211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB120_1216
# %bb.1214:                             # %for.body5098
                                        #   in Loop: Header=BB120_1213 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -180(%rbp)
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -228(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -212(%rbp)
	movl	-212(%rbp), %eax
	subl	-180(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-180(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -256(%rbp)
	movl	-228(%rbp), %eax
	subl	-256(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-256(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1215:                             # %for.inc5192
                                        #   in Loop: Header=BB120_1213 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_1213
.LBB120_1216:                           # %for.end5194
                                        #   in Loop: Header=BB120_1211 Depth=2
	jmp	.LBB120_1217
.LBB120_1217:                           # %for.inc5195
                                        #   in Loop: Header=BB120_1211 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_1211
.LBB120_1218:                           # %for.end5197
                                        #   in Loop: Header=BB120_171 Depth=1
	jmp	.LBB120_1219
.LBB120_1219:                           # %if.end5198
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	$10, best_mode
	movl	-128(%rbp), %edi
	callq	dct_luma_16x16
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB120_1280
# %bb.1220:                             # %if.then5203
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	$0, -24(%rbp)
.LBB120_1221:                           # %for.cond5204
                                        #   Parent Loop BB120_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_1223 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB120_1228
# %bb.1222:                             # %for.body5207
                                        #   in Loop: Header=BB120_1221 Depth=2
	movl	$0, -20(%rbp)
.LBB120_1223:                           # %for.cond5208
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_1221 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB120_1226
# %bb.1224:                             # %for.body5211
                                        #   in Loop: Header=BB120_1223 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1225:                             # %for.inc5230
                                        #   in Loop: Header=BB120_1223 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_1223
.LBB120_1226:                           # %for.end5232
                                        #   in Loop: Header=BB120_1221 Depth=2
	jmp	.LBB120_1227
.LBB120_1227:                           # %for.inc5233
                                        #   in Loop: Header=BB120_1221 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_1221
.LBB120_1228:                           # %for.end5235
                                        #   in Loop: Header=BB120_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB120_1229:                           # %for.cond5237
                                        #   Parent Loop BB120_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_1231 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB120_1236
# %bb.1230:                             # %for.body5240
                                        #   in Loop: Header=BB120_1229 Depth=2
	movl	$0, -20(%rbp)
.LBB120_1231:                           # %for.cond5241
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_1229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB120_1234
# %bb.1232:                             # %for.body5244
                                        #   in Loop: Header=BB120_1231 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1233:                             # %for.inc5263
                                        #   in Loop: Header=BB120_1231 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_1231
.LBB120_1234:                           # %for.end5265
                                        #   in Loop: Header=BB120_1229 Depth=2
	jmp	.LBB120_1235
.LBB120_1235:                           # %for.inc5266
                                        #   in Loop: Header=BB120_1229 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_1229
.LBB120_1236:                           # %for.end5268
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB120_1237:                           # %for.cond5270
                                        #   Parent Loop BB120_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_1239 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB120_1244
# %bb.1238:                             # %for.body5273
                                        #   in Loop: Header=BB120_1237 Depth=2
	movl	$0, -20(%rbp)
.LBB120_1239:                           # %for.cond5274
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_1237 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB120_1242
# %bb.1240:                             # %for.body5277
                                        #   in Loop: Header=BB120_1239 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1241:                             # %for.inc5287
                                        #   in Loop: Header=BB120_1239 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_1239
.LBB120_1242:                           # %for.end5289
                                        #   in Loop: Header=BB120_1237 Depth=2
	jmp	.LBB120_1243
.LBB120_1243:                           # %for.inc5290
                                        #   in Loop: Header=BB120_1237 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_1237
.LBB120_1244:                           # %for.end5292
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	-132(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -24(%rbp)
.LBB120_1245:                           # %for.cond5296
                                        #   Parent Loop BB120_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_1247 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB120_1279
# %bb.1246:                             # %for.body5299
                                        #   in Loop: Header=BB120_1245 Depth=2
	movl	$0, -20(%rbp)
.LBB120_1247:                           # %for.cond5300
                                        #   Parent Loop BB120_171 Depth=1
                                        #     Parent Loop BB120_1245 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB120_1277
# %bb.1248:                             # %for.body5303
                                        #   in Loop: Header=BB120_1247 Depth=3
	xorl	%eax, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -256(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-256(%rbp), %ecx
	movl	%ecx, -228(%rbp)
	movl	-256(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -180(%rbp)
	movl	-180(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -212(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-180(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB120_1250
# %bb.1249:                             # %cond.true5343
                                        #   in Loop: Header=BB120_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB120_1251
.LBB120_1250:                           # %cond.false5344
                                        #   in Loop: Header=BB120_1247 Depth=3
	movl	-180(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB120_1251:                           # %cond.end5356
                                        #   in Loop: Header=BB120_1247 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB120_1253
# %bb.1252:                             # %cond.true5360
                                        #   in Loop: Header=BB120_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB120_1257
.LBB120_1253:                           # %cond.false5362
                                        #   in Loop: Header=BB120_1247 Depth=3
	xorl	%eax, %eax
	movl	-180(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB120_1255
# %bb.1254:                             # %cond.true5376
                                        #   in Loop: Header=BB120_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB120_1256
.LBB120_1255:                           # %cond.false5377
                                        #   in Loop: Header=BB120_1247 Depth=3
	movl	-180(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB120_1256:                           # %cond.end5389
                                        #   in Loop: Header=BB120_1247 Depth=3
.LBB120_1257:                           # %cond.end5391
                                        #   in Loop: Header=BB120_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-228(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-128(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB120_1259
# %bb.1258:                             # %cond.true5415
                                        #   in Loop: Header=BB120_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB120_1260
.LBB120_1259:                           # %cond.false5416
                                        #   in Loop: Header=BB120_1247 Depth=3
	movl	-228(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-128(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB120_1260:                           # %cond.end5426
                                        #   in Loop: Header=BB120_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB120_1262
# %bb.1261:                             # %cond.true5430
                                        #   in Loop: Header=BB120_1247 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_1266
.LBB120_1262:                           # %cond.false5432
                                        #   in Loop: Header=BB120_1247 Depth=3
	xorl	%eax, %eax
	movl	-228(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-128(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB120_1264
# %bb.1263:                             # %cond.true5444
                                        #   in Loop: Header=BB120_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB120_1265
.LBB120_1264:                           # %cond.false5445
                                        #   in Loop: Header=BB120_1247 Depth=3
	movl	-228(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB120_1265:                           # %cond.end5455
                                        #   in Loop: Header=BB120_1247 Depth=3
.LBB120_1266:                           # %cond.end5457
                                        #   in Loop: Header=BB120_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-212(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB120_1268
# %bb.1267:                             # %cond.true5483
                                        #   in Loop: Header=BB120_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB120_1269
.LBB120_1268:                           # %cond.false5484
                                        #   in Loop: Header=BB120_1247 Depth=3
	movl	-212(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB120_1269:                           # %cond.end5496
                                        #   in Loop: Header=BB120_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB120_1271
# %bb.1270:                             # %cond.true5500
                                        #   in Loop: Header=BB120_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB120_1275
.LBB120_1271:                           # %cond.false5502
                                        #   in Loop: Header=BB120_1247 Depth=3
	xorl	%eax, %eax
	movl	-212(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB120_1273
# %bb.1272:                             # %cond.true5516
                                        #   in Loop: Header=BB120_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB120_1274
.LBB120_1273:                           # %cond.false5517
                                        #   in Loop: Header=BB120_1247 Depth=3
	movl	-212(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB120_1274:                           # %cond.end5529
                                        #   in Loop: Header=BB120_1247 Depth=3
.LBB120_1275:                           # %cond.end5531
                                        #   in Loop: Header=BB120_1247 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1276:                             # %for.inc5544
                                        #   in Loop: Header=BB120_1247 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_1247
.LBB120_1277:                           # %for.end5546
                                        #   in Loop: Header=BB120_1245 Depth=2
	jmp	.LBB120_1278
.LBB120_1278:                           # %for.inc5547
                                        #   in Loop: Header=BB120_1245 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_1245
.LBB120_1279:                           # %for.end5549
                                        #   in Loop: Header=BB120_171 Depth=1
	jmp	.LBB120_1280
.LBB120_1280:                           # %if.end5550
                                        #   in Loop: Header=BB120_171 Depth=1
	jmp	.LBB120_1282
.LBB120_1281:                           # %if.else5551
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	-220(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-304(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB120_1282:                           # %if.end5554
                                        #   in Loop: Header=BB120_171 Depth=1
	jmp	.LBB120_1283
.LBB120_1283:                           # %if.end5555
                                        #   in Loop: Header=BB120_171 Depth=1
	jmp	.LBB120_1284
.LBB120_1284:                           # %if.end5556
                                        #   in Loop: Header=BB120_171 Depth=1
	cmpl	$0, -260(%rbp)
	jne	.LBB120_1289
# %bb.1285:                             # %if.then5559
                                        #   in Loop: Header=BB120_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB120_1288
# %bb.1286:                             # %lor.lhs.false5563
                                        #   in Loop: Header=BB120_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB120_1288
# %bb.1287:                             # %lor.rhs5567
                                        #   in Loop: Header=BB120_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB120_1288:                           # %lor.end5571
                                        #   in Loop: Header=BB120_171 Depth=1
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -252(%rbp)
.LBB120_1289:                           # %if.end5574
                                        #   in Loop: Header=BB120_171 Depth=1
	jmp	.LBB120_1290
.LBB120_1290:                           # %for.inc5575
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	-260(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -260(%rbp)
	jmp	.LBB120_171
.LBB120_1291:                           # %for.end5577
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB120_1300
# %bb.1292:                             # %if.then5580
	cmpl	$0, cbp
	jne	.LBB120_1294
# %bb.1293:                             # %lor.lhs.false5583
	cmpl	$10, best_mode
	jne	.LBB120_1295
.LBB120_1294:                           # %if.then5586
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB120_1299
.LBB120_1295:                           # %if.else5587
	cmpl	$0, cbp
	jne	.LBB120_1298
# %bb.1296:                             # %land.lhs.true5590
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB120_1298
# %bb.1297:                             # %if.then5592
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB120_1298:                           # %if.end5597
	jmp	.LBB120_1299
.LBB120_1299:                           # %if.end5598
	callq	set_stored_macroblock_parameters
	jmp	.LBB120_1395
.LBB120_1300:                           # %if.else5599
	movl	best_mode, %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$8, best_mode
	jne	.LBB120_1314
# %bb.1301:                             # %if.then5602
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB120_1305
# %bb.1302:                             # %land.lhs.true5605
	cmpl	$0, cbp8_8x8ts
	jne	.LBB120_1305
# %bb.1303:                             # %land.lhs.true5608
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB120_1305
# %bb.1304:                             # %if.then5612
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB120_1305:                           # %if.end5614
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB120_1306:                           # %for.cond5616
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_1308 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_1313
# %bb.1307:                             # %for.body5621
                                        #   in Loop: Header=BB120_1306 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB120_1308:                           # %for.cond5623
                                        #   Parent Loop BB120_1306 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_1311
# %bb.1309:                             # %for.body5628
                                        #   in Loop: Header=BB120_1308 Depth=2
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1310:                             # %for.inc5636
                                        #   in Loop: Header=BB120_1308 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB120_1308
.LBB120_1311:                           # %for.end5639
                                        #   in Loop: Header=BB120_1306 Depth=1
	jmp	.LBB120_1312
.LBB120_1312:                           # %for.inc5640
                                        #   in Loop: Header=BB120_1306 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_1306
.LBB120_1313:                           # %for.end5642
	jmp	.LBB120_1370
.LBB120_1314:                           # %if.else5643
	cmpl	$13, best_mode
	jne	.LBB120_1342
# %bb.1315:                             # %if.then5646
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB120_1316:                           # %for.cond5647
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_1318 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB120_1323
# %bb.1317:                             # %for.body5650
                                        #   in Loop: Header=BB120_1316 Depth=1
	movl	$0, -24(%rbp)
.LBB120_1318:                           # %for.cond5651
                                        #   Parent Loop BB120_1316 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB120_1321
# %bb.1319:                             # %for.body5654
                                        #   in Loop: Header=BB120_1318 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.1320:                             # %for.inc5677
                                        #   in Loop: Header=BB120_1318 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB120_1318
.LBB120_1321:                           # %for.end5680
                                        #   in Loop: Header=BB120_1316 Depth=1
	jmp	.LBB120_1322
.LBB120_1322:                           # %for.inc5681
                                        #   in Loop: Header=BB120_1316 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_1316
.LBB120_1323:                           # %for.end5683
	movl	$0, -24(%rbp)
.LBB120_1324:                           # %for.cond5684
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_1326 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB120_1331
# %bb.1325:                             # %for.body5687
                                        #   in Loop: Header=BB120_1324 Depth=1
	movl	$0, -20(%rbp)
.LBB120_1326:                           # %for.cond5688
                                        #   Parent Loop BB120_1324 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB120_1329
# %bb.1327:                             # %for.body5691
                                        #   in Loop: Header=BB120_1326 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgY, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1328:                             # %for.inc5705
                                        #   in Loop: Header=BB120_1326 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_1326
.LBB120_1329:                           # %for.end5707
                                        #   in Loop: Header=BB120_1324 Depth=1
	jmp	.LBB120_1330
.LBB120_1330:                           # %for.inc5708
                                        #   in Loop: Header=BB120_1324 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_1324
.LBB120_1331:                           # %for.end5710
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB120_1341
# %bb.1332:                             # %if.then5713
	movl	$0, -24(%rbp)
.LBB120_1333:                           # %for.cond5714
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_1335 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB120_1340
# %bb.1334:                             # %for.body5717
                                        #   in Loop: Header=BB120_1333 Depth=1
	movl	$0, -20(%rbp)
.LBB120_1335:                           # %for.cond5718
                                        #   Parent Loop BB120_1333 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB120_1338
# %bb.1336:                             # %for.body5721
                                        #   in Loop: Header=BB120_1335 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgU, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgV, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1337:                             # %for.inc5750
                                        #   in Loop: Header=BB120_1335 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_1335
.LBB120_1338:                           # %for.end5752
                                        #   in Loop: Header=BB120_1333 Depth=1
	jmp	.LBB120_1339
.LBB120_1339:                           # %for.inc5753
                                        #   in Loop: Header=BB120_1333 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_1333
.LBB120_1340:                           # %for.end5755
	jmp	.LBB120_1341
.LBB120_1341:                           # %if.end5756
	jmp	.LBB120_1342
.LBB120_1342:                           # %if.end5757
	cmpl	$9, best_mode
	je	.LBB120_1369
# %bb.1343:                             # %land.lhs.true5760
	cmpl	$13, best_mode
	je	.LBB120_1369
# %bb.1344:                             # %if.then5763
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB120_1345:                           # %for.cond5765
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_1347 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_1352
# %bb.1346:                             # %for.body5770
                                        #   in Loop: Header=BB120_1345 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB120_1347:                           # %for.cond5772
                                        #   Parent Loop BB120_1345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_1350
# %bb.1348:                             # %for.body5777
                                        #   in Loop: Header=BB120_1347 Depth=2
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1349:                             # %for.inc5785
                                        #   in Loop: Header=BB120_1347 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB120_1347
.LBB120_1350:                           # %for.end5788
                                        #   in Loop: Header=BB120_1345 Depth=1
	jmp	.LBB120_1351
.LBB120_1351:                           # %for.inc5789
                                        #   in Loop: Header=BB120_1345 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_1345
.LBB120_1352:                           # %for.end5791
	cmpl	$10, best_mode
	je	.LBB120_1368
# %bb.1353:                             # %if.then5794
	cmpl	$1, best_mode
	jl	.LBB120_1356
# %bb.1354:                             # %land.lhs.true5797
	cmpl	$3, best_mode
	jg	.LBB120_1356
# %bb.1355:                             # %if.then5800
	movl	-320(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB120_1356:                           # %if.end5802
	movb	$0, %al
	callq	LumaResidualCoding
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB120_1359
# %bb.1357:                             # %land.lhs.true5806
	cmpl	$0, best_mode
	jne	.LBB120_1359
# %bb.1358:                             # %if.then5809
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB120_1359:                           # %if.end5811
	movl	$0, -20(%rbp)
.LBB120_1360:                           # %for.cond5812
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_1362 Depth 2
	cmpl	$16, -20(%rbp)
	jge	.LBB120_1367
# %bb.1361:                             # %for.body5815
                                        #   in Loop: Header=BB120_1360 Depth=1
	movl	$0, -24(%rbp)
.LBB120_1362:                           # %for.cond5816
                                        #   Parent Loop BB120_1360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -24(%rbp)
	jge	.LBB120_1365
# %bb.1363:                             # %for.body5819
                                        #   in Loop: Header=BB120_1362 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1364:                             # %for.inc5840
                                        #   in Loop: Header=BB120_1362 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB120_1362
.LBB120_1365:                           # %for.end5842
                                        #   in Loop: Header=BB120_1360 Depth=1
	jmp	.LBB120_1366
.LBB120_1366:                           # %for.inc5843
                                        #   in Loop: Header=BB120_1360 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_1360
.LBB120_1367:                           # %for.end5845
	jmp	.LBB120_1368
.LBB120_1368:                           # %if.end5846
	jmp	.LBB120_1369
.LBB120_1369:                           # %if.end5847
	jmp	.LBB120_1370
.LBB120_1370:                           # %if.end5848
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB120_1374
# %bb.1371:                             # %land.lhs.true5853
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB120_1374
# %bb.1372:                             # %lor.lhs.false5857
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB120_1374
# %bb.1373:                             # %if.then5861
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB120_1374:                           # %if.end5863
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB120_1376
# %bb.1375:                             # %if.then5867
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB120_1376:                           # %if.end5868
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -288(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB120_1380
# %bb.1377:                             # %land.lhs.true5871
	cmpl	$9, best_mode
	je	.LBB120_1382
# %bb.1378:                             # %lor.lhs.false5874
	cmpl	$10, best_mode
	je	.LBB120_1382
# %bb.1379:                             # %lor.lhs.false5877
	cmpl	$13, best_mode
	je	.LBB120_1382
.LBB120_1380:                           # %land.lhs.true5880
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB120_1382
# %bb.1381:                             # %if.then5884
	leaq	-288(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB120_1382:                           # %if.end5885
	cmpl	$10, best_mode
	jne	.LBB120_1384
# %bb.1383:                             # %if.then5888
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-128(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB120_1384:                           # %if.end5892
	movq	-48(%rbp), %rdi
	movl	-108(%rbp), %esi
	callq	SetMotionVectorsMB
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB120_1386
# %bb.1385:                             # %lor.lhs.false5896
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB120_1392
.LBB120_1386:                           # %land.lhs.true5900
	cmpl	$1, best_mode
	jne	.LBB120_1392
# %bb.1387:                             # %land.lhs.true5903
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB120_1392
# %bb.1388:                             # %land.lhs.true5907
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB120_1392
# %bb.1389:                             # %land.lhs.true5919
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movq	-448(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB120_1392
# %bb.1390:                             # %land.lhs.true5939
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movq	-448(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	2(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB120_1392
# %bb.1391:                             # %if.then5959
	movq	-48(%rbp), %rax
	movl	$0, 484(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 480(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 476(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 472(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB120_1392:                           # %if.end5969
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB120_1394
# %bb.1393:                             # %if.then5972
	callq	set_mbaff_parameters
.LBB120_1394:                           # %if.end5973
	jmp	.LBB120_1395
.LBB120_1395:                           # %if.end5974
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB120_1410
# %bb.1396:                             # %if.then5977
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB120_1409
# %bb.1397:                             # %if.then5981
	movb	$0, %al
	callq	calc_MAD
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	%xmm0, (%rax,%rcx,8)
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB120_1408
# %bb.1398:                             # %if.then5988
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	movq	img, %rax
	vaddsd	72544(%rax), %xmm0, %xmm0
	vmovsd	%xmm0, 72544(%rax)
	cmpl	$0, cbp
	jne	.LBB120_1400
# %bb.1399:                             # %lor.lhs.false5996
	cmpl	$10, best_mode
	jne	.LBB120_1401
.LBB120_1400:                           # %if.then5999
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB120_1402
.LBB120_1401:                           # %if.else6001
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB120_1402:                           # %if.end6008
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB120_1407
# %bb.1403:                             # %if.then6010
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB120_1405
# %bb.1404:                             # %if.then6013
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP
	jmp	.LBB120_1406
.LBB120_1405:                           # %if.else6016
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
.LBB120_1406:                           # %if.end6019
	jmp	.LBB120_1407
.LBB120_1407:                           # %if.end6020
	jmp	.LBB120_1408
.LBB120_1408:                           # %if.end6021
	jmp	.LBB120_1409
.LBB120_1409:                           # %if.end6022
	jmp	.LBB120_1410
.LBB120_1410:                           # %if.end6023
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB120_1412
# %bb.1411:                             # %if.then6026
	vmovsd	-248(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
	jmp	.LBB120_1413
.LBB120_1412:                           # %if.else6028
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm0
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB120_1413:                           # %if.end6031
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB120_1430
# %bb.1414:                             # %if.then6034
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB120_1429
# %bb.1415:                             # %if.then6038
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB120_1417
# %bb.1416:                             # %cond.true6041
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB120_1420
	jmp	.LBB120_1428
.LBB120_1417:                           # %cond.false6042
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB120_1419
# %bb.1418:                             # %cond.true6046
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB120_1428
	jmp	.LBB120_1420
.LBB120_1419:                           # %cond.false6049
	movb	$1, %al
	testb	$1, %al
	jne	.LBB120_1420
	jmp	.LBB120_1428
.LBB120_1420:                           # %land.lhs.true6050
	movq	-424(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB120_1422
# %bb.1421:                             # %cond.true6053
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB120_1425
	jmp	.LBB120_1428
.LBB120_1422:                           # %cond.false6054
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB120_1424
# %bb.1423:                             # %cond.true6058
	movq	-424(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB120_1428
	jmp	.LBB120_1425
.LBB120_1424:                           # %cond.false6061
	movb	$1, %al
	testb	$1, %al
	jne	.LBB120_1425
	jmp	.LBB120_1428
.LBB120_1425:                           # %if.then6062
	callq	field_flag_inference
	cmpl	-284(%rbp), %eax
	je	.LBB120_1427
# %bb.1426:                             # %if.then6066
	vmovsd	.LCPI120_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB120_1427:                           # %if.end6068
	jmp	.LBB120_1428
.LBB120_1428:                           # %if.end6069
	jmp	.LBB120_1429
.LBB120_1429:                           # %if.end6070
	jmp	.LBB120_1430
.LBB120_1430:                           # %if.end6071
	movq	input, %rax
	cmpl	$1, 2908(%rax)
	jne	.LBB120_1453
# %bb.1431:                             # %if.then6075
	movq	input, %rax
	cmpl	$1, 2464(%rax)
	jne	.LBB120_1433
# %bb.1432:                             # %if.then6079
	xorl	%eax, %eax
	movl	-136(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB120_1452
.LBB120_1433:                           # %if.else6127
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB120_1451
# %bb.1434:                             # %if.then6131
	xorl	%eax, %eax
	cmpl	$0, -252(%rbp)
	jne	.LBB120_1438
# %bb.1435:                             # %land.rhs6134
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB120_1437
# %bb.1436:                             # %lor.rhs6138
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB120_1437:                           # %lor.end6142
.LBB120_1438:                           # %land.end6144
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -252(%rbp)
	jne	.LBB120_1442
# %bb.1439:                             # %land.rhs6158
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB120_1441
# %bb.1440:                             # %lor.rhs6162
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB120_1441:                           # %lor.end6166
.LBB120_1442:                           # %land.end6168
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rcx
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rcx,%rsi,8), %rcx
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rcx,%rsi)
	cmpl	$0, -252(%rbp)
	jne	.LBB120_1446
# %bb.1443:                             # %land.rhs6183
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB120_1445
# %bb.1444:                             # %lor.rhs6187
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB120_1445:                           # %lor.end6191
.LBB120_1446:                           # %land.end6193
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -252(%rbp)
	jne	.LBB120_1450
# %bb.1447:                             # %land.rhs6208
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB120_1449
# %bb.1448:                             # %lor.rhs6212
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB120_1449:                           # %lor.end6216
.LBB120_1450:                           # %land.end6218
	xorl	%eax, %eax
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB120_1451:                           # %if.end6232
	jmp	.LBB120_1452
.LBB120_1452:                           # %if.end6233
	jmp	.LBB120_1464
.LBB120_1453:                           # %if.else6234
	movq	input, %rax
	cmpl	$2, 2908(%rax)
	jne	.LBB120_1463
# %bb.1454:                             # %if.then6238
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB120_1456
# %bb.1455:                             # %lor.rhs6242
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB120_1456:                           # %lor.end6246
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB120_1458
# %bb.1457:                             # %lor.rhs6261
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB120_1458:                           # %lor.end6265
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB120_1460
# %bb.1459:                             # %lor.rhs6281
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB120_1460:                           # %lor.end6285
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB120_1462
# %bb.1461:                             # %lor.rhs6301
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB120_1462:                           # %lor.end6305
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
.LBB120_1463:                           # %if.end6319
	jmp	.LBB120_1464
.LBB120_1464:                           # %if.end6320
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB120_1466
# %bb.1465:                             # %if.then6323
	movl	best_mode, %edi
	movl	-64(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %esi
	callq	skip_intrabk_SAD
.LBB120_1466:                           # %if.end6327
	cmpl	$784989816, -408(%rbp)  # imm = 0x2EC9FE78
	jne	.LBB120_1468
.LBB120_1467:
	addq	$480, %rsp              # imm = 0x1E0
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB120_1468:                           # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB120_1467
.Lfunc_end120:
	.size	encode_one_macroblock.91, .Lfunc_end120-encode_one_macroblock.91
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function encode_one_macroblock.92
.LCPI121_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI121_1:
	.quad	4622945017495814144     # double 12
.LCPI121_2:
	.quad	4607182418800017408     # double 1
.LCPI121_3:
	.quad	4587366580439587226     # double 0.050000000000000003
.LCPI121_4:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI121_5:
	.quad	4611686018427387904     # double 2
.LCPI121_6:
	.quad	4613937818241073152     # double 3
.LCPI121_7:
	.quad	4608983858650965606     # double 1.3999999999999999
.LCPI121_8:
	.quad	4616189618054758400     # double 4
.LCPI121_9:
	.quad	4604300115038500291     # double 0.68000000000000005
.LCPI121_10:
	.quad	4618441417868443648     # double 6
.LCPI121_11:
	.quad	4605380978949069210     # double 0.80000000000000004
.LCPI121_12:
	.quad	4600877379321698714     # double 0.40000000000000002
.LCPI121_13:
	.quad	4596373779694328218     # double 0.20000000000000001
.LCPI121_14:
	.quad	4606732058837280358     # double 0.94999999999999996
.LCPI121_15:
	.quad	4602678819172646912     # double 0.5
.LCPI121_16:
	.quad	4679240012837945344     # double 65536
.LCPI121_17:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI121_18:
	.quad	4625196817309499392     # double 16
	.text
	.globl	encode_one_macroblock.92
	.p2align	4, 0x90
	.type	encode_one_macroblock.92,@function
encode_one_macroblock.92:               # @encode_one_macroblock.92
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$480, %rsp              # imm = 0x1E0
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	vmovsd	.LCPI121_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	$511994871, -404(%rbp)  # imm = 0x1E846BF7
	vxorps	%xmm1, %xmm1, %xmm1
	vmovsd	%xmm1, -296(%rbp)
	vmovsd	%xmm0, -472(%rbp)
	movl	$2147483647, -204(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -272(%rbp)
	movl	$0, -172(%rbp)
	movw	$0, -36(%rbp)
	movl	$0, -60(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, -140(%rbp)
	movl	$0, -260(%rbp)
	movl	$0, -252(%rbp)
	movl	$0, -180(%rbp)
	movl	$0, -304(%rbp)
	movl	$0, -208(%rbp)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB121_2
# %bb.1:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB121_4
.LBB121_2:                              # %land.lhs.true
	movq	img, %rax
	movl	140(%rax), %eax
	movq	img, %rcx
	cmpl	88(%rcx), %eax
	jne	.LBB121_4
# %bb.3:                                # %land.lhs.true4
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	cmpl	92(%rcx), %eax
	movb	$1, %cl
	jne	.LBB121_5
.LBB121_4:                              # %lor.rhs
	movq	img, %rax
	cmpl	$2, 24(%rax)
	sete	%cl
.LBB121_5:                              # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -136(%rbp)
	movq	img, %rcx
	cmpl	$3, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -300(%rbp)
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -412(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	input, %rcx
	cmpl	$1, 2908(%rcx)
	jne	.LBB121_13
# %bb.6:                                # %land.lhs.true19
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$2, 2464(%rcx)
	jne	.LBB121_13
# %bb.7:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB121_12
# %bb.8:                                # %lor.lhs.false25
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB121_12
# %bb.9:                                # %lor.rhs29
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB121_11
# %bb.10:                               # %land.rhs33
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB121_11:                             # %land.end
.LBB121_12:                             # %lor.end36
.LBB121_13:                             # %land.end38
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	movl	$1, %edx
	cmovnel	%eax, %edx
	movl	%edx, -316(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB121_18
# %bb.14:                               # %land.lhs.true40
	xorl	%ecx, %ecx
	movq	input, %rax
	cmpl	$0, 2908(%rax)
	je	.LBB121_18
# %bb.15:                               # %land.rhs43
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %cl
	je	.LBB121_17
# %bb.16:                               # %lor.rhs47
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%cl
.LBB121_17:                             # %lor.end51
.LBB121_18:                             # %land.end53
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -280(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB121_20
# %bb.19:                               # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB121_21
.LBB121_20:                             # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB121_21
.LBB121_21:                             # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -424(%rbp)
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	%rcx, -400(%rbp)
	movw	$-1, -38(%rbp)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movq	%rcx, -440(%rbp)
	movq	img, %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB121_23
# %bb.22:                               # %land.rhs62
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB121_23:                             # %land.end64
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -288(%rbp)
	movl	$0, -132(%rbp)
	cmpl	$0, -288(%rbp)
	je	.LBB121_28
# %bb.24:                               # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB121_26
# %bb.25:                               # %if.then69
	movl	$4, -64(%rbp)
	jmp	.LBB121_27
.LBB121_26:                             # %if.else
	movl	$2, -64(%rbp)
.LBB121_27:                             # %if.end
	jmp	.LBB121_29
.LBB121_28:                             # %if.else70
	movl	$0, -64(%rbp)
.LBB121_29:                             # %if.end71
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB121_31
# %bb.30:                               # %if.then73
	movb	$0, %al
	callq	decide_intrabk_SAD
.LBB121_31:                             # %if.end74
	movq	img, %rax
	movl	12(%rax), %edi
	callq	RandomIntra
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orl	-136(%rbp), %eax
	movl	%eax, -136(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	movl	%eax, -332(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovel	%edx, %eax
	movl	%eax, -348(%rbp)
	movl	$1, -344(%rbp)
	cmpl	$0, -136(%rbp)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -384(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB121_33
# %bb.32:                               # %land.rhs86
	movq	input, %rax
	cmpl	$0, 2368(%rax)
	setne	%cl
.LBB121_33:                             # %land.end88
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -380(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB121_35
# %bb.34:                               # %land.rhs92
	movq	input, %rax
	cmpl	$0, 2372(%rax)
	setne	%al
.LBB121_35:                             # %land.end94
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -376(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB121_37
# %bb.36:                               # %land.rhs98
	movq	input, %rax
	cmpl	$0, 2376(%rax)
	setne	%cl
.LBB121_37:                             # %land.end100
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -372(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB121_39
# %bb.38:                               # %land.rhs104
	movq	input, %rax
	cmpl	$0, 2380(%rax)
	setne	%al
.LBB121_39:                             # %land.end106
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -368(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB121_41
# %bb.40:                               # %land.rhs110
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	setne	%cl
.LBB121_41:                             # %land.end112
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -364(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB121_43
# %bb.42:                               # %land.rhs116
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	setne	%al
.LBB121_43:                             # %land.end118
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -360(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB121_45
# %bb.44:                               # %land.rhs122
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	setne	%cl
.LBB121_45:                             # %land.end124
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -356(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB121_47
# %bb.46:                               # %if.then130
	movl	$0, -356(%rbp)
	movl	$0, -360(%rbp)
	movl	$0, -364(%rbp)
.LBB121_47:                             # %if.end134
	cmpl	$0, -368(%rbp)
	movb	$1, %al
	jne	.LBB121_51
# %bb.48:                               # %lor.lhs.false137
	cmpl	$0, -364(%rbp)
	movb	$1, %al
	jne	.LBB121_51
# %bb.49:                               # %lor.lhs.false140
	cmpl	$0, -360(%rbp)
	movb	$1, %al
	jne	.LBB121_51
# %bb.50:                               # %lor.rhs143
	cmpl	$0, -356(%rbp)
	setne	%al
.LBB121_51:                             # %lor.end146
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -352(%rbp)
	movl	-412(%rbp), %eax
	movl	%eax, -336(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB121_67
# %bb.52:                               # %if.then152
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -84(%rbp)
.LBB121_53:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_55 Depth 2
	movl	-84(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_66
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB121_53 Depth=1
	movl	$0, -56(%rbp)
.LBB121_55:                             # %for.cond156
                                        #   Parent Loop BB121_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-84(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB121_64
# %bb.56:                               # %for.body161
                                        #   in Loop: Header=BB121_55 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB121_59
# %bb.57:                               # %land.lhs.true168
                                        #   in Loop: Header=BB121_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-84(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB121_59
# %bb.58:                               # %if.then177
                                        #   in Loop: Header=BB121_55 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB121_59:                             # %if.end183
                                        #   in Loop: Header=BB121_55 Depth=2
	movq	img, %rax
	cmpl	$2, 28(%rax)
	jne	.LBB121_62
# %bb.60:                               # %land.lhs.true187
                                        #   in Loop: Header=BB121_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-84(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB121_62
# %bb.61:                               # %if.then196
                                        #   in Loop: Header=BB121_55 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB121_62:                             # %if.end202
                                        #   in Loop: Header=BB121_55 Depth=2
	jmp	.LBB121_63
.LBB121_63:                             # %for.inc
                                        #   in Loop: Header=BB121_55 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB121_55
.LBB121_64:                             # %for.end
                                        #   in Loop: Header=BB121_53 Depth=1
	jmp	.LBB121_65
.LBB121_65:                             # %for.inc203
                                        #   in Loop: Header=BB121_53 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB121_53
.LBB121_66:                             # %for.end205
	jmp	.LBB121_93
.LBB121_67:                             # %if.else206
	cmpl	$0, -288(%rbp)
	je	.LBB121_83
# %bb.68:                               # %if.then208
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -84(%rbp)
.LBB121_69:                             # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_71 Depth 2
	movl	-84(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_82
# %bb.70:                               # %for.body214
                                        #   in Loop: Header=BB121_69 Depth=1
	movl	$0, -56(%rbp)
.LBB121_71:                             # %for.cond215
                                        #   Parent Loop BB121_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-84(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB121_80
# %bb.72:                               # %for.body220
                                        #   in Loop: Header=BB121_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB121_75
# %bb.73:                               # %land.lhs.true230
                                        #   in Loop: Header=BB121_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, (%rax)
	jne	.LBB121_75
# %bb.74:                               # %if.then238
                                        #   in Loop: Header=BB121_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB121_75:                             # %if.end244
                                        #   in Loop: Header=BB121_71 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	jne	.LBB121_78
# %bb.76:                               # %land.lhs.true249
                                        #   in Loop: Header=BB121_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB121_78
# %bb.77:                               # %if.then257
                                        #   in Loop: Header=BB121_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB121_78:                             # %if.end263
                                        #   in Loop: Header=BB121_71 Depth=2
	jmp	.LBB121_79
.LBB121_79:                             # %for.inc264
                                        #   in Loop: Header=BB121_71 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB121_71
.LBB121_80:                             # %for.end266
                                        #   in Loop: Header=BB121_69 Depth=1
	jmp	.LBB121_81
.LBB121_81:                             # %for.inc267
                                        #   in Loop: Header=BB121_69 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB121_69
.LBB121_82:                             # %for.end269
	jmp	.LBB121_92
.LBB121_83:                             # %if.else270
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -84(%rbp)
.LBB121_84:                             # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_86 Depth 2
	movl	-84(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_91
# %bb.85:                               # %for.body276
                                        #   in Loop: Header=BB121_84 Depth=1
	movl	$0, -56(%rbp)
.LBB121_86:                             # %for.cond277
                                        #   Parent Loop BB121_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-84(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB121_89
# %bb.87:                               # %for.body282
                                        #   in Loop: Header=BB121_86 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
# %bb.88:                               # %for.inc288
                                        #   in Loop: Header=BB121_86 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB121_86
.LBB121_89:                             # %for.end290
                                        #   in Loop: Header=BB121_84 Depth=1
	jmp	.LBB121_90
.LBB121_90:                             # %for.inc291
                                        #   in Loop: Header=BB121_84 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB121_84
.LBB121_91:                             # %for.end293
	jmp	.LBB121_92
.LBB121_92:                             # %if.end294
	jmp	.LBB121_93
.LBB121_93:                             # %if.end295
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB121_162
# %bb.94:                               # %if.then298
	vmovsd	.LCPI121_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	40(%rax), %xmm0, %xmm1
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movq	input, %rax
	cmpl	$0, 3332(%rax)
	je	.LBB121_100
# %bb.95:                               # %if.then303
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB121_98
# %bb.96:                               # %land.lhs.true307
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB121_98
# %bb.97:                               # %if.then310
	vmovsd	.LCPI121_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI121_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	input, %rax
	vmovsd	3376(%rax), %xmm2       # xmm2 = mem[0],zero
	vmovsd	%xmm2, -456(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-456(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB121_99
.LBB121_98:                             # %if.else315
	vmovsd	.LCPI121_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI121_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	input, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	vmovsd	3336(%rax,%rcx,8), %xmm2 # xmm2 = mem[0],zero
	vmovsd	%xmm2, -464(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-464(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
.LBB121_99:                             # %if.end326
	jmp	.LBB121_159
.LBB121_100:                            # %if.else327
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB121_103
# %bb.101:                              # %land.lhs.true331
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB121_103
# %bb.102:                              # %cond.true335
	vmovsd	.LCPI121_2(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB121_104
.LBB121_103:                            # %cond.false336
	vmovsd	.LCPI121_2(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI121_3(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	input, %rax
	vcvtsi2sdl	20(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vsubsd	%xmm1, %xmm0, %xmm0
.LBB121_104:                            # %cond.end340
	vmovsd	%xmm0, -480(%rbp)
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	jle	.LBB121_130
# %bb.105:                              # %if.then344
	vmovsd	.LCPI121_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI121_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI121_9(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB121_116
# %bb.106:                              # %cond.true352
	vmovsd	.LCPI121_8(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI121_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB121_108
# %bb.107:                              # %cond.true356
	vmovsd	.LCPI121_8(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB121_109
.LBB121_108:                            # %cond.false357
	vmovsd	.LCPI121_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB121_109:                            # %cond.end359
	vmovsd	.LCPI121_5(%rip), %xmm2 # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB121_111
# %bb.110:                              # %cond.true363
	vmovsd	.LCPI121_5(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB121_115
.LBB121_111:                            # %cond.false364
	vmovsd	.LCPI121_8(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI121_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB121_113
# %bb.112:                              # %cond.true368
	vmovsd	.LCPI121_8(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB121_114
.LBB121_113:                            # %cond.false369
	vmovsd	.LCPI121_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB121_114:                            # %cond.end371
.LBB121_115:                            # %cond.end373
	jmp	.LBB121_129
.LBB121_116:                            # %cond.false375
	cmpl	$0, -300(%rbp)
	je	.LBB121_127
# %bb.117:                              # %cond.true377
	vmovsd	.LCPI121_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI121_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB121_119
# %bb.118:                              # %cond.true381
	vmovsd	.LCPI121_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB121_120
.LBB121_119:                            # %cond.false382
	vmovsd	.LCPI121_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB121_120:                            # %cond.end384
	vmovsd	.LCPI121_7(%rip), %xmm2 # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB121_122
# %bb.121:                              # %cond.true388
	vmovsd	.LCPI121_7(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB121_126
.LBB121_122:                            # %cond.false389
	vmovsd	.LCPI121_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI121_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB121_124
# %bb.123:                              # %cond.true393
	vmovsd	.LCPI121_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB121_125
.LBB121_124:                            # %cond.false394
	vmovsd	.LCPI121_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB121_125:                            # %cond.end396
.LBB121_126:                            # %cond.end398
	jmp	.LBB121_128
.LBB121_127:                            # %cond.false400
	vmovsd	.LCPI121_2(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB121_128
.LBB121_128:                            # %cond.end401
.LBB121_129:                            # %cond.end403
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB121_146
.LBB121_130:                            # %if.else406
	vmovsd	.LCPI121_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI121_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI121_4(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB121_132
# %bb.131:                              # %cond.true414
	vmovsd	.LCPI121_8(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB121_145
.LBB121_132:                            # %cond.false415
	cmpl	$0, -300(%rbp)
	je	.LBB121_143
# %bb.133:                              # %cond.true417
	vmovsd	.LCPI121_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI121_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB121_135
# %bb.134:                              # %cond.true421
	vmovsd	.LCPI121_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB121_136
.LBB121_135:                            # %cond.false422
	vmovsd	.LCPI121_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB121_136:                            # %cond.end424
	vmovsd	.LCPI121_7(%rip), %xmm2 # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB121_138
# %bb.137:                              # %cond.true428
	vmovsd	.LCPI121_7(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB121_142
.LBB121_138:                            # %cond.false429
	vmovsd	.LCPI121_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI121_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB121_140
# %bb.139:                              # %cond.true433
	vmovsd	.LCPI121_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB121_141
.LBB121_140:                            # %cond.false434
	vmovsd	.LCPI121_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB121_141:                            # %cond.end436
.LBB121_142:                            # %cond.end438
	jmp	.LBB121_144
.LBB121_143:                            # %cond.false440
	vmovsd	.LCPI121_2(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB121_144
.LBB121_144:                            # %cond.end441
.LBB121_145:                            # %cond.end443
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB121_146:                            # %if.end446
	movq	input, %rax
	cmpl	$2, 1320(%rax)
	jne	.LBB121_154
# %bb.147:                              # %if.then449
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB121_153
# %bb.148:                              # %land.lhs.true453
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB121_153
# %bb.149:                              # %if.then456
	vmovsd	.LCPI121_12(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI121_13(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB121_151
# %bb.150:                              # %cond.true464
	vmovsd	.LCPI121_12(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB121_152
.LBB121_151:                            # %cond.false465
	vmovsd	.LCPI121_13(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
.LBB121_152:                            # %cond.end473
	vmovsd	.LCPI121_2(%rip), %xmm1 # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB121_153:                            # %if.end477
	jmp	.LBB121_158
.LBB121_154:                            # %if.else478
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB121_157
# %bb.155:                              # %land.lhs.true482
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB121_157
# %bb.156:                              # %if.then485
	vmovsd	.LCPI121_11(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB121_157:                            # %if.end487
	jmp	.LBB121_158
.LBB121_158:                            # %if.end488
	vmovsd	-480(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB121_159:                            # %if.end490
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB121_161
# %bb.160:                              # %if.then492
	vmovsd	.LCPI121_14(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB121_161:                            # %if.end494
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	sqrt
	vmovsd	%xmm0, -168(%rbp)
	jmp	.LBB121_166
.LBB121_162:                            # %if.else496
	xorl	%eax, %eax
	movq	img, %rcx
	movl	40(%rcx), %ecx
	subl	$12, %ecx
	cmpl	%ecx, %eax
	jle	.LBB121_164
# %bb.163:                              # %cond.true501
	xorl	%eax, %eax
	jmp	.LBB121_165
.LBB121_164:                            # %cond.false502
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
.LBB121_165:                            # %cond.end505
	cltq
	vcvtsi2sdl	QP2QUANT(,%rax,4), %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	vmovsd	%xmm0, -160(%rbp)
.LBB121_166:                            # %if.end510
	vmovsd	.LCPI121_15(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI121_16(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -32(%rbp)
.LBB121_167:                            # %for.cond514
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$15, -32(%rbp)
	jge	.LBB121_170
# %bb.168:                              # %for.body517
                                        #   in Loop: Header=BB121_167 Depth=1
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
# %bb.169:                              # %for.inc520
                                        #   in Loop: Header=BB121_167 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB121_167
.LBB121_170:                            # %for.end522
	movl	$0, -264(%rbp)
.LBB121_171:                            # %for.cond523
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_181 Depth 2
                                        #       Child Loop BB121_184 Depth 3
                                        #         Child Loop BB121_190 Depth 4
                                        #         Child Loop BB121_210 Depth 4
                                        #         Child Loop BB121_300 Depth 4
                                        #           Child Loop BB121_302 Depth 5
                                        #         Child Loop BB121_309 Depth 4
                                        #           Child Loop BB121_311 Depth 5
                                        #         Child Loop BB121_326 Depth 4
                                        #           Child Loop BB121_328 Depth 5
                                        #         Child Loop BB121_335 Depth 4
                                        #           Child Loop BB121_337 Depth 5
                                        #         Child Loop BB121_355 Depth 4
                                        #           Child Loop BB121_357 Depth 5
                                        #         Child Loop BB121_374 Depth 4
                                        #           Child Loop BB121_376 Depth 5
                                        #     Child Loop BB121_416 Depth 2
                                        #       Child Loop BB121_418 Depth 3
                                        #         Child Loop BB121_445 Depth 4
                                        #         Child Loop BB121_464 Depth 4
                                        #           Child Loop BB121_466 Depth 5
                                        #         Child Loop BB121_473 Depth 4
                                        #         Child Loop BB121_508 Depth 4
                                        #           Child Loop BB121_510 Depth 5
                                        #         Child Loop BB121_532 Depth 4
                                        #           Child Loop BB121_534 Depth 5
                                        #             Child Loop BB121_536 Depth 6
                                        #         Child Loop BB121_544 Depth 4
                                        #           Child Loop BB121_546 Depth 5
                                        #       Child Loop BB121_569 Depth 3
                                        #         Child Loop BB121_571 Depth 4
                                        #           Child Loop BB121_573 Depth 5
                                        #       Child Loop BB121_581 Depth 3
                                        #         Child Loop BB121_583 Depth 4
                                        #     Child Loop BB121_601 Depth 2
                                        #       Child Loop BB121_603 Depth 3
                                        #         Child Loop BB121_614 Depth 4
                                        #         Child Loop BB121_633 Depth 4
                                        #           Child Loop BB121_635 Depth 5
                                        #         Child Loop BB121_642 Depth 4
                                        #         Child Loop BB121_677 Depth 4
                                        #           Child Loop BB121_679 Depth 5
                                        #         Child Loop BB121_701 Depth 4
                                        #           Child Loop BB121_703 Depth 5
                                        #             Child Loop BB121_705 Depth 6
                                        #         Child Loop BB121_713 Depth 4
                                        #           Child Loop BB121_715 Depth 5
                                        #         Child Loop BB121_723 Depth 4
                                        #           Child Loop BB121_725 Depth 5
                                        #       Child Loop BB121_745 Depth 3
                                        #         Child Loop BB121_747 Depth 4
                                        #           Child Loop BB121_749 Depth 5
                                        #       Child Loop BB121_757 Depth 3
                                        #         Child Loop BB121_759 Depth 4
                                        #       Child Loop BB121_766 Depth 3
                                        #         Child Loop BB121_768 Depth 4
                                        #       Child Loop BB121_778 Depth 3
                                        #         Child Loop BB121_780 Depth 4
                                        #       Child Loop BB121_786 Depth 3
                                        #       Child Loop BB121_791 Depth 3
                                        #         Child Loop BB121_793 Depth 4
                                        #     Child Loop BB121_803 Depth 2
                                        #       Child Loop BB121_805 Depth 3
                                        #     Child Loop BB121_835 Depth 2
                                        #       Child Loop BB121_853 Depth 3
                                        #         Child Loop BB121_908 Depth 4
                                        #           Child Loop BB121_911 Depth 5
                                        #             Child Loop BB121_913 Depth 6
                                        #           Child Loop BB121_920 Depth 5
                                        #             Child Loop BB121_922 Depth 6
                                        #         Child Loop BB121_955 Depth 4
                                        #           Child Loop BB121_957 Depth 5
                                        #     Child Loop BB121_981 Depth 2
                                        #       Child Loop BB121_1014 Depth 3
                                        #         Child Loop BB121_1017 Depth 4
                                        #           Child Loop BB121_1019 Depth 5
                                        #         Child Loop BB121_1026 Depth 4
                                        #           Child Loop BB121_1028 Depth 5
                                        #       Child Loop BB121_1061 Depth 3
                                        #         Child Loop BB121_1063 Depth 4
                                        #     Child Loop BB121_1113 Depth 2
                                        #       Child Loop BB121_1115 Depth 3
                                        #     Child Loop BB121_1127 Depth 2
                                        #       Child Loop BB121_1129 Depth 3
                                        #         Child Loop BB121_1131 Depth 4
                                        #     Child Loop BB121_1141 Depth 2
                                        #       Child Loop BB121_1143 Depth 3
                                        #     Child Loop BB121_1152 Depth 2
                                        #       Child Loop BB121_1154 Depth 3
                                        #     Child Loop BB121_1160 Depth 2
                                        #       Child Loop BB121_1162 Depth 3
                                        #     Child Loop BB121_1174 Depth 2
                                        #       Child Loop BB121_1176 Depth 3
                                        #         Child Loop BB121_1178 Depth 4
                                        #     Child Loop BB121_1189 Depth 2
                                        #       Child Loop BB121_1191 Depth 3
                                        #     Child Loop BB121_1202 Depth 2
                                        #       Child Loop BB121_1204 Depth 3
                                        #     Child Loop BB121_1211 Depth 2
                                        #       Child Loop BB121_1213 Depth 3
                                        #     Child Loop BB121_1221 Depth 2
                                        #       Child Loop BB121_1223 Depth 3
                                        #     Child Loop BB121_1229 Depth 2
                                        #       Child Loop BB121_1231 Depth 3
                                        #     Child Loop BB121_1237 Depth 2
                                        #       Child Loop BB121_1239 Depth 3
                                        #     Child Loop BB121_1245 Depth 2
                                        #       Child Loop BB121_1247 Depth 3
	movl	-264(%rbp), %eax
	cmpl	-316(%rbp), %eax
	jge	.LBB121_1291
# %bb.172:                              # %for.body526
                                        #   in Loop: Header=BB121_171 Depth=1
	cmpl	$2, -316(%rbp)
	jne	.LBB121_177
# %bb.173:                              # %if.then529
                                        #   in Loop: Header=BB121_171 Depth=1
	cmpl	$0, -264(%rbp)
	jne	.LBB121_175
# %bb.174:                              # %if.then532
                                        #   in Loop: Header=BB121_171 Depth=1
	movq	input, %rax
	movl	$1, 2464(%rax)
	jmp	.LBB121_176
.LBB121_175:                            # %if.else534
                                        #   in Loop: Header=BB121_171 Depth=1
	movq	input, %rax
	movl	$2, 2464(%rax)
.LBB121_176:                            # %if.end536
                                        #   in Loop: Header=BB121_171 Depth=1
	jmp	.LBB121_177
.LBB121_177:                            # %if.end537
                                        #   in Loop: Header=BB121_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
	cmpl	$0, -136(%rbp)
	jne	.LBB121_831
# %bb.178:                              # %if.then539
                                        #   in Loop: Header=BB121_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB121_180
# %bb.179:                              # %if.then541
                                        #   in Loop: Header=BB121_171 Depth=1
	movb	$0, %al
	callq	Get_Direct_Motion_Vectors
.LBB121_180:                            # %if.end542
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
	movl	$1, best_mode
	movl	$1, -32(%rbp)
.LBB121_181:                            # %for.cond543
                                        #   Parent Loop BB121_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB121_184 Depth 3
                                        #         Child Loop BB121_190 Depth 4
                                        #         Child Loop BB121_210 Depth 4
                                        #         Child Loop BB121_300 Depth 4
                                        #           Child Loop BB121_302 Depth 5
                                        #         Child Loop BB121_309 Depth 4
                                        #           Child Loop BB121_311 Depth 5
                                        #         Child Loop BB121_326 Depth 4
                                        #           Child Loop BB121_328 Depth 5
                                        #         Child Loop BB121_335 Depth 4
                                        #           Child Loop BB121_337 Depth 5
                                        #         Child Loop BB121_355 Depth 4
                                        #           Child Loop BB121_357 Depth 5
                                        #         Child Loop BB121_374 Depth 4
                                        #           Child Loop BB121_376 Depth 5
	cmpl	$4, -32(%rbp)
	jge	.LBB121_413
# %bb.182:                              # %for.body546
                                        #   in Loop: Header=BB121_181 Depth=2
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB121_411
# %bb.183:                              # %if.then553
                                        #   in Loop: Header=BB121_181 Depth=2
	movl	$0, -60(%rbp)
	movl	$0, -28(%rbp)
.LBB121_184:                            # %for.cond554
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_181 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB121_190 Depth 4
                                        #         Child Loop BB121_210 Depth 4
                                        #         Child Loop BB121_300 Depth 4
                                        #           Child Loop BB121_302 Depth 5
                                        #         Child Loop BB121_309 Depth 4
                                        #           Child Loop BB121_311 Depth 5
                                        #         Child Loop BB121_326 Depth 4
                                        #           Child Loop BB121_328 Depth 5
                                        #         Child Loop BB121_335 Depth 4
                                        #           Child Loop BB121_337 Depth 5
                                        #         Child Loop BB121_355 Depth 4
                                        #           Child Loop BB121_357 Depth 5
                                        #         Child Loop BB121_374 Depth 4
                                        #           Child Loop BB121_376 Depth 5
	movl	-28(%rbp), %eax
	movl	-32(%rbp), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	movl	$2, %edx
	cmovel	%ecx, %edx
	cmpl	%edx, %eax
	jge	.LBB121_404
# %bb.185:                              # %for.body560
                                        #   in Loop: Header=BB121_184 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	xorl	%ecx, %ecx
	cmpl	$1, -28(%rbp)
	jne	.LBB121_187
# %bb.186:                              # %land.rhs563
                                        #   in Loop: Header=BB121_184 Depth=3
	cmpl	$2, -32(%rbp)
	sete	%cl
.LBB121_187:                            # %land.end566
                                        #   in Loop: Header=BB121_184 Depth=3
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$2, %ecx
	cmovnel	%ecx, %edx
	movl	%edx, -24(%rbp)
	cmpl	$1, -28(%rbp)
	jne	.LBB121_189
# %bb.188:                              # %land.rhs571
                                        #   in Loop: Header=BB121_184 Depth=3
	cmpl	$3, -32(%rbp)
	sete	%al
.LBB121_189:                            # %land.end574
                                        #   in Loop: Header=BB121_184 Depth=3
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB121_190:                            # %for.cond577
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_181 Depth=2
                                        #       Parent Loop BB121_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB121_208
# %bb.191:                              # %for.body584
                                        #   in Loop: Header=BB121_190 Depth=4
	cmpl	$0, -280(%rbp)
	je	.LBB121_194
# %bb.192:                              # %lor.lhs.false586
                                        #   in Loop: Header=BB121_190 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB121_194
# %bb.193:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB121_190 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB121_206
.LBB121_194:                            # %if.then594
                                        #   in Loop: Header=BB121_190 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB121_199
# %bb.195:                              # %cond.true597
                                        #   in Loop: Header=BB121_190 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB121_197
# %bb.196:                              # %cond.true603
                                        #   in Loop: Header=BB121_190 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB121_198
.LBB121_197:                            # %cond.false604
                                        #   in Loop: Header=BB121_190 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB121_198:                            # %cond.end607
                                        #   in Loop: Header=BB121_190 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB121_203
.LBB121_199:                            # %cond.false610
                                        #   in Loop: Header=BB121_190 Depth=4
	vmovsd	.LCPI121_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB121_201
# %bb.200:                              # %cond.true615
                                        #   in Loop: Header=BB121_190 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB121_202
.LBB121_201:                            # %cond.false617
                                        #   in Loop: Header=BB121_190 Depth=4
	movl	$1, %eax
	jmp	.LBB121_202
.LBB121_202:                            # %cond.end618
                                        #   in Loop: Header=BB121_190 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB121_203:                            # %cond.end623
                                        #   in Loop: Header=BB121_190 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB121_205
# %bb.204:                              # %if.then635
                                        #   in Loop: Header=BB121_190 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB121_205:                            # %if.end636
                                        #   in Loop: Header=BB121_190 Depth=4
	jmp	.LBB121_206
.LBB121_206:                            # %if.end637
                                        #   in Loop: Header=BB121_190 Depth=4
	jmp	.LBB121_207
.LBB121_207:                            # %for.inc638
                                        #   in Loop: Header=BB121_190 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB121_190
.LBB121_208:                            # %for.end640
                                        #   in Loop: Header=BB121_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB121_296
# %bb.209:                              # %if.then642
                                        #   in Loop: Header=BB121_184 Depth=3
	movl	-204(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB121_210:                            # %for.cond643
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_181 Depth=2
                                        #       Parent Loop BB121_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB121_224
# %bb.211:                              # %for.body650
                                        #   in Loop: Header=BB121_210 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB121_216
# %bb.212:                              # %cond.true653
                                        #   in Loop: Header=BB121_210 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB121_214
# %bb.213:                              # %cond.true659
                                        #   in Loop: Header=BB121_210 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB121_215
.LBB121_214:                            # %cond.false660
                                        #   in Loop: Header=BB121_210 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB121_215:                            # %cond.end663
                                        #   in Loop: Header=BB121_210 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB121_220
.LBB121_216:                            # %cond.false667
                                        #   in Loop: Header=BB121_210 Depth=4
	vmovsd	.LCPI121_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB121_218
# %bb.217:                              # %cond.true672
                                        #   in Loop: Header=BB121_210 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB121_219
.LBB121_218:                            # %cond.false674
                                        #   in Loop: Header=BB121_210 Depth=4
	movl	$1, %eax
	jmp	.LBB121_219
.LBB121_219:                            # %cond.end675
                                        #   in Loop: Header=BB121_210 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB121_220:                            # %cond.end680
                                        #   in Loop: Header=BB121_210 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB121_222
# %bb.221:                              # %if.then692
                                        #   in Loop: Header=BB121_210 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB121_222:                            # %if.end693
                                        #   in Loop: Header=BB121_210 Depth=4
	jmp	.LBB121_223
.LBB121_223:                            # %for.inc694
                                        #   in Loop: Header=BB121_210 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB121_210
.LBB121_224:                            # %for.end696
                                        #   in Loop: Header=BB121_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB121_232
# %bb.225:                              # %cond.true699
                                        #   in Loop: Header=BB121_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB121_227
# %bb.226:                              # %cond.true705
                                        #   in Loop: Header=BB121_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB121_228
.LBB121_227:                            # %cond.false706
                                        #   in Loop: Header=BB121_184 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB121_228:                            # %cond.end709
                                        #   in Loop: Header=BB121_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB121_230
# %bb.229:                              # %cond.true718
                                        #   in Loop: Header=BB121_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB121_231
.LBB121_230:                            # %cond.false719
                                        #   in Loop: Header=BB121_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB121_231:                            # %cond.end721
                                        #   in Loop: Header=BB121_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB121_236
.LBB121_232:                            # %cond.false726
                                        #   in Loop: Header=BB121_184 Depth=3
	vmovsd	.LCPI121_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB121_234
# %bb.233:                              # %cond.true731
                                        #   in Loop: Header=BB121_184 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB121_235
.LBB121_234:                            # %cond.false733
                                        #   in Loop: Header=BB121_184 Depth=3
	movl	$1, %eax
	jmp	.LBB121_235
.LBB121_235:                            # %cond.end734
                                        #   in Loop: Header=BB121_184 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB121_236:                            # %cond.end739
                                        #   in Loop: Header=BB121_184 Depth=3
	movl	%eax, -88(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB121_258
# %bb.237:                              # %land.lhs.true745
                                        #   in Loop: Header=BB121_184 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB121_258
# %bb.238:                              # %land.lhs.true749
                                        #   in Loop: Header=BB121_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB121_258
# %bb.239:                              # %if.then751
                                        #   in Loop: Header=BB121_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB121_247
# %bb.240:                              # %cond.true754
                                        #   in Loop: Header=BB121_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB121_242
# %bb.241:                              # %cond.true760
                                        #   in Loop: Header=BB121_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB121_243
.LBB121_242:                            # %cond.false761
                                        #   in Loop: Header=BB121_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB121_243:                            # %cond.end763
                                        #   in Loop: Header=BB121_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB121_245
# %bb.244:                              # %cond.true772
                                        #   in Loop: Header=BB121_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB121_246
.LBB121_245:                            # %cond.false773
                                        #   in Loop: Header=BB121_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB121_246:                            # %cond.end775
                                        #   in Loop: Header=BB121_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB121_248
.LBB121_247:                            # %cond.false780
                                        #   in Loop: Header=BB121_184 Depth=3
	vmovsd	.LCPI121_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB121_248:                            # %cond.end784
                                        #   in Loop: Header=BB121_184 Depth=3
	movl	%eax, -148(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r9d, %r9d
	callq	BPredPartitionCost
	addl	-148(%rbp), %eax
	movl	%eax, -148(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB121_256
# %bb.249:                              # %cond.true790
                                        #   in Loop: Header=BB121_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB121_251
# %bb.250:                              # %cond.true796
                                        #   in Loop: Header=BB121_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB121_252
.LBB121_251:                            # %cond.false797
                                        #   in Loop: Header=BB121_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB121_252:                            # %cond.end799
                                        #   in Loop: Header=BB121_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB121_254
# %bb.253:                              # %cond.true808
                                        #   in Loop: Header=BB121_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB121_255
.LBB121_254:                            # %cond.false809
                                        #   in Loop: Header=BB121_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB121_255:                            # %cond.end811
                                        #   in Loop: Header=BB121_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB121_257
.LBB121_256:                            # %cond.false816
                                        #   in Loop: Header=BB121_184 Depth=3
	vmovsd	.LCPI121_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB121_257:                            # %cond.end820
                                        #   in Loop: Header=BB121_184 Depth=3
	movl	%eax, -184(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$1, %r9d
	callq	BPredPartitionCost
	addl	-184(%rbp), %eax
	movl	%eax, -184(%rbp)
	jmp	.LBB121_259
.LBB121_258:                            # %if.else824
                                        #   in Loop: Header=BB121_184 Depth=3
	movl	$2147483647, -148(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -184(%rbp) # imm = 0x7FFFFFFF
.LBB121_259:                            # %if.end825
                                        #   in Loop: Header=BB121_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB121_286
# %bb.260:                              # %land.lhs.true828
                                        #   in Loop: Header=BB121_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB121_286
# %bb.261:                              # %if.then831
                                        #   in Loop: Header=BB121_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB121_266
# %bb.262:                              # %land.lhs.true834
                                        #   in Loop: Header=BB121_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB121_266
# %bb.263:                              # %land.lhs.true837
                                        #   in Loop: Header=BB121_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB121_266
# %bb.264:                              # %land.lhs.true840
                                        #   in Loop: Header=BB121_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jge	.LBB121_266
# %bb.265:                              # %if.then843
                                        #   in Loop: Header=BB121_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB121_285
.LBB121_266:                            # %if.else845
                                        #   in Loop: Header=BB121_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB121_271
# %bb.267:                              # %land.lhs.true848
                                        #   in Loop: Header=BB121_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB121_271
# %bb.268:                              # %land.lhs.true851
                                        #   in Loop: Header=BB121_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB121_271
# %bb.269:                              # %land.lhs.true854
                                        #   in Loop: Header=BB121_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jge	.LBB121_271
# %bb.270:                              # %if.then857
                                        #   in Loop: Header=BB121_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB121_284
.LBB121_271:                            # %if.else859
                                        #   in Loop: Header=BB121_184 Depth=3
	movl	-88(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB121_276
# %bb.272:                              # %land.lhs.true862
                                        #   in Loop: Header=BB121_184 Depth=3
	movl	-88(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB121_276
# %bb.273:                              # %land.lhs.true865
                                        #   in Loop: Header=BB121_184 Depth=3
	movl	-88(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB121_276
# %bb.274:                              # %land.lhs.true868
                                        #   in Loop: Header=BB121_184 Depth=3
	movl	-88(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jge	.LBB121_276
# %bb.275:                              # %if.then871
                                        #   in Loop: Header=BB121_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-88(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movw	$0, -38(%rbp)
	jmp	.LBB121_283
.LBB121_276:                            # %if.else876
                                        #   in Loop: Header=BB121_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB121_281
# %bb.277:                              # %land.lhs.true879
                                        #   in Loop: Header=BB121_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB121_281
# %bb.278:                              # %land.lhs.true882
                                        #   in Loop: Header=BB121_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB121_281
# %bb.279:                              # %land.lhs.true885
                                        #   in Loop: Header=BB121_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jg	.LBB121_281
# %bb.280:                              # %if.then888
                                        #   in Loop: Header=BB121_184 Depth=3
	movw	$2, -50(%rbp)
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movl	-148(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$1, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$1, 71952(%rax,%rcx,2)
	jmp	.LBB121_282
.LBB121_281:                            # %if.else893
                                        #   in Loop: Header=BB121_184 Depth=3
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movw	$2, -50(%rbp)
	movl	-184(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$2, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$2, 71952(%rax,%rcx,2)
.LBB121_282:                            # %if.end898
                                        #   in Loop: Header=BB121_184 Depth=3
	jmp	.LBB121_283
.LBB121_283:                            # %if.end899
                                        #   in Loop: Header=BB121_184 Depth=3
	jmp	.LBB121_284
.LBB121_284:                            # %if.end900
                                        #   in Loop: Header=BB121_184 Depth=3
	jmp	.LBB121_285
.LBB121_285:                            # %if.end901
                                        #   in Loop: Header=BB121_184 Depth=3
	jmp	.LBB121_295
.LBB121_286:                            # %if.else902
                                        #   in Loop: Header=BB121_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB121_289
# %bb.287:                              # %land.lhs.true905
                                        #   in Loop: Header=BB121_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB121_289
# %bb.288:                              # %if.then908
                                        #   in Loop: Header=BB121_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB121_294
.LBB121_289:                            # %if.else910
                                        #   in Loop: Header=BB121_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB121_292
# %bb.290:                              # %land.lhs.true913
                                        #   in Loop: Header=BB121_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB121_292
# %bb.291:                              # %if.then916
                                        #   in Loop: Header=BB121_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB121_293
.LBB121_292:                            # %if.else918
                                        #   in Loop: Header=BB121_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-88(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB121_293:                            # %if.end920
                                        #   in Loop: Header=BB121_184 Depth=3
	jmp	.LBB121_294
.LBB121_294:                            # %if.end921
                                        #   in Loop: Header=BB121_184 Depth=3
	jmp	.LBB121_295
.LBB121_295:                            # %if.end922
                                        #   in Loop: Header=BB121_184 Depth=3
	jmp	.LBB121_297
.LBB121_296:                            # %if.else923
                                        #   in Loop: Header=BB121_184 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB121_297:                            # %if.end925
                                        #   in Loop: Header=BB121_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB121_353
# %bb.298:                              # %if.then928
                                        #   in Loop: Header=BB121_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB121_308
# %bb.299:                              # %if.then932
                                        #   in Loop: Header=BB121_184 Depth=3
	movl	$0, -24(%rbp)
.LBB121_300:                            # %for.cond933
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_181 Depth=2
                                        #       Parent Loop BB121_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB121_302 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB121_307
# %bb.301:                              # %for.body936
                                        #   in Loop: Header=BB121_300 Depth=4
	movl	$0, -20(%rbp)
.LBB121_302:                            # %for.cond937
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_181 Depth=2
                                        #       Parent Loop BB121_184 Depth=3
                                        #         Parent Loop BB121_300 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB121_305
# %bb.303:                              # %for.body940
                                        #   in Loop: Header=BB121_302 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.304:                              # %for.inc997
                                        #   in Loop: Header=BB121_302 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_302
.LBB121_305:                            # %for.end999
                                        #   in Loop: Header=BB121_300 Depth=4
	jmp	.LBB121_306
.LBB121_306:                            # %for.inc1000
                                        #   in Loop: Header=BB121_300 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_300
.LBB121_307:                            # %for.end1002
                                        #   in Loop: Header=BB121_184 Depth=3
	jmp	.LBB121_323
.LBB121_308:                            # %if.else1003
                                        #   in Loop: Header=BB121_184 Depth=3
	movl	$0, -24(%rbp)
.LBB121_309:                            # %for.cond1004
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_181 Depth=2
                                        #       Parent Loop BB121_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB121_311 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB121_322
# %bb.310:                              # %for.body1007
                                        #   in Loop: Header=BB121_309 Depth=4
	movl	$0, -20(%rbp)
.LBB121_311:                            # %for.cond1008
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_181 Depth=2
                                        #       Parent Loop BB121_184 Depth=3
                                        #         Parent Loop BB121_309 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB121_320
# %bb.312:                              # %for.body1011
                                        #   in Loop: Header=BB121_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB121_317
# %bb.313:                              # %if.then1016
                                        #   in Loop: Header=BB121_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB121_315
# %bb.314:                              # %cond.true1023
                                        #   in Loop: Header=BB121_311 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB121_316
.LBB121_315:                            # %cond.false1024
                                        #   in Loop: Header=BB121_311 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB121_316:                            # %cond.end1025
                                        #   in Loop: Header=BB121_311 Depth=5
	movq	%rax, -432(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-432(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-432(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB121_318
.LBB121_317:                            # %if.else1111
                                        #   in Loop: Header=BB121_311 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB121_318:                            # %if.end1217
                                        #   in Loop: Header=BB121_311 Depth=5
	jmp	.LBB121_319
.LBB121_319:                            # %for.inc1218
                                        #   in Loop: Header=BB121_311 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_311
.LBB121_320:                            # %for.end1220
                                        #   in Loop: Header=BB121_309 Depth=4
	jmp	.LBB121_321
.LBB121_321:                            # %for.inc1221
                                        #   in Loop: Header=BB121_309 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_309
.LBB121_322:                            # %for.end1223
                                        #   in Loop: Header=BB121_184 Depth=3
	jmp	.LBB121_323
.LBB121_323:                            # %if.end1224
                                        #   in Loop: Header=BB121_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB121_352
# %bb.324:                              # %if.then1226
                                        #   in Loop: Header=BB121_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB121_334
# %bb.325:                              # %if.then1230
                                        #   in Loop: Header=BB121_184 Depth=3
	movl	$0, -24(%rbp)
.LBB121_326:                            # %for.cond1231
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_181 Depth=2
                                        #       Parent Loop BB121_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB121_328 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB121_333
# %bb.327:                              # %for.body1234
                                        #   in Loop: Header=BB121_326 Depth=4
	movl	$0, -20(%rbp)
.LBB121_328:                            # %for.cond1235
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_181 Depth=2
                                        #       Parent Loop BB121_184 Depth=3
                                        #         Parent Loop BB121_326 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB121_331
# %bb.329:                              # %for.body1238
                                        #   in Loop: Header=BB121_328 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.330:                              # %for.inc1301
                                        #   in Loop: Header=BB121_328 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_328
.LBB121_331:                            # %for.end1303
                                        #   in Loop: Header=BB121_326 Depth=4
	jmp	.LBB121_332
.LBB121_332:                            # %for.inc1304
                                        #   in Loop: Header=BB121_326 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_326
.LBB121_333:                            # %for.end1306
                                        #   in Loop: Header=BB121_184 Depth=3
	jmp	.LBB121_351
.LBB121_334:                            # %if.else1307
                                        #   in Loop: Header=BB121_184 Depth=3
	movl	$0, -24(%rbp)
.LBB121_335:                            # %for.cond1308
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_181 Depth=2
                                        #       Parent Loop BB121_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB121_337 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB121_350
# %bb.336:                              # %for.body1311
                                        #   in Loop: Header=BB121_335 Depth=4
	movl	$0, -20(%rbp)
.LBB121_337:                            # %for.cond1312
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_181 Depth=2
                                        #       Parent Loop BB121_184 Depth=3
                                        #         Parent Loop BB121_335 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB121_348
# %bb.338:                              # %for.body1315
                                        #   in Loop: Header=BB121_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB121_343
# %bb.339:                              # %if.then1320
                                        #   in Loop: Header=BB121_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB121_341
# %bb.340:                              # %cond.true1328
                                        #   in Loop: Header=BB121_337 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB121_342
.LBB121_341:                            # %cond.false1330
                                        #   in Loop: Header=BB121_337 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB121_342:                            # %cond.end1332
                                        #   in Loop: Header=BB121_337 Depth=5
	movq	%rax, -448(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-448(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-448(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB121_346
.LBB121_343:                            # %if.else1419
                                        #   in Loop: Header=BB121_337 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB121_345
# %bb.344:                              # %if.then1474
                                        #   in Loop: Header=BB121_337 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB121_345:                            # %if.end1529
                                        #   in Loop: Header=BB121_337 Depth=5
	jmp	.LBB121_346
.LBB121_346:                            # %if.end1530
                                        #   in Loop: Header=BB121_337 Depth=5
	jmp	.LBB121_347
.LBB121_347:                            # %for.inc1531
                                        #   in Loop: Header=BB121_337 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_337
.LBB121_348:                            # %for.end1533
                                        #   in Loop: Header=BB121_335 Depth=4
	jmp	.LBB121_349
.LBB121_349:                            # %for.inc1534
                                        #   in Loop: Header=BB121_335 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_335
.LBB121_350:                            # %for.end1536
                                        #   in Loop: Header=BB121_184 Depth=3
	jmp	.LBB121_351
.LBB121_351:                            # %if.end1537
                                        #   in Loop: Header=BB121_184 Depth=3
	jmp	.LBB121_352
.LBB121_352:                            # %if.end1538
                                        #   in Loop: Header=BB121_184 Depth=3
	jmp	.LBB121_393
.LBB121_353:                            # %if.else1539
                                        #   in Loop: Header=BB121_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB121_373
# %bb.354:                              # %if.then1542
                                        #   in Loop: Header=BB121_184 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -24(%rbp)
.LBB121_355:                            # %for.cond1546
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_181 Depth=2
                                        #       Parent Loop BB121_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB121_357 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB121_372
# %bb.356:                              # %for.body1549
                                        #   in Loop: Header=BB121_355 Depth=4
	movl	$0, -20(%rbp)
.LBB121_357:                            # %for.cond1550
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_181 Depth=2
                                        #       Parent Loop BB121_184 Depth=3
                                        #         Parent Loop BB121_355 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB121_370
# %bb.358:                              # %for.body1553
                                        #   in Loop: Header=BB121_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB121_360
# %bb.359:                              # %if.then1557
                                        #   in Loop: Header=BB121_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB121_361
.LBB121_360:                            # %if.else1596
                                        #   in Loop: Header=BB121_357 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB121_361:                            # %if.end1676
                                        #   in Loop: Header=BB121_357 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB121_368
# %bb.362:                              # %if.then1678
                                        #   in Loop: Header=BB121_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB121_364
# %bb.363:                              # %if.then1682
                                        #   in Loop: Header=BB121_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB121_367
.LBB121_364:                            # %if.else1721
                                        #   in Loop: Header=BB121_357 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB121_366
# %bb.365:                              # %if.then1758
                                        #   in Loop: Header=BB121_357 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB121_366:                            # %if.end1805
                                        #   in Loop: Header=BB121_357 Depth=5
	jmp	.LBB121_367
.LBB121_367:                            # %if.end1806
                                        #   in Loop: Header=BB121_357 Depth=5
	jmp	.LBB121_368
.LBB121_368:                            # %if.end1807
                                        #   in Loop: Header=BB121_357 Depth=5
	jmp	.LBB121_369
.LBB121_369:                            # %for.inc1808
                                        #   in Loop: Header=BB121_357 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_357
.LBB121_370:                            # %for.end1810
                                        #   in Loop: Header=BB121_355 Depth=4
	jmp	.LBB121_371
.LBB121_371:                            # %for.inc1811
                                        #   in Loop: Header=BB121_355 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_355
.LBB121_372:                            # %for.end1813
                                        #   in Loop: Header=BB121_184 Depth=3
	jmp	.LBB121_392
.LBB121_373:                            # %if.else1814
                                        #   in Loop: Header=BB121_184 Depth=3
	movq	img, %rax
	movl	144(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -24(%rbp)
.LBB121_374:                            # %for.cond1818
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_181 Depth=2
                                        #       Parent Loop BB121_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB121_376 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB121_391
# %bb.375:                              # %for.body1821
                                        #   in Loop: Header=BB121_374 Depth=4
	movl	$0, -20(%rbp)
.LBB121_376:                            # %for.cond1822
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_181 Depth=2
                                        #       Parent Loop BB121_184 Depth=3
                                        #         Parent Loop BB121_374 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB121_389
# %bb.377:                              # %for.body1825
                                        #   in Loop: Header=BB121_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB121_379
# %bb.378:                              # %if.then1829
                                        #   in Loop: Header=BB121_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB121_380
.LBB121_379:                            # %if.else1868
                                        #   in Loop: Header=BB121_376 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB121_380:                            # %if.end1948
                                        #   in Loop: Header=BB121_376 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB121_387
# %bb.381:                              # %if.then1950
                                        #   in Loop: Header=BB121_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB121_383
# %bb.382:                              # %if.then1954
                                        #   in Loop: Header=BB121_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB121_386
.LBB121_383:                            # %if.else1993
                                        #   in Loop: Header=BB121_376 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB121_385
# %bb.384:                              # %if.then2030
                                        #   in Loop: Header=BB121_376 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB121_385:                            # %if.end2077
                                        #   in Loop: Header=BB121_376 Depth=5
	jmp	.LBB121_386
.LBB121_386:                            # %if.end2078
                                        #   in Loop: Header=BB121_376 Depth=5
	jmp	.LBB121_387
.LBB121_387:                            # %if.end2079
                                        #   in Loop: Header=BB121_376 Depth=5
	jmp	.LBB121_388
.LBB121_388:                            # %for.inc2080
                                        #   in Loop: Header=BB121_376 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_376
.LBB121_389:                            # %for.end2082
                                        #   in Loop: Header=BB121_374 Depth=4
	jmp	.LBB121_390
.LBB121_390:                            # %for.inc2083
                                        #   in Loop: Header=BB121_374 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_374
.LBB121_391:                            # %for.end2085
                                        #   in Loop: Header=BB121_184 Depth=3
	jmp	.LBB121_392
.LBB121_392:                            # %if.end2086
                                        #   in Loop: Header=BB121_184 Depth=3
	jmp	.LBB121_393
.LBB121_393:                            # %if.end2087
                                        #   in Loop: Header=BB121_184 Depth=3
	cmpl	$3, -32(%rbp)
	jne	.LBB121_395
# %bb.394:                              # %if.then2090
                                        #   in Loop: Header=BB121_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	jmp	.LBB121_399
.LBB121_395:                            # %if.else2106
                                        #   in Loop: Header=BB121_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB121_397
# %bb.396:                              # %if.then2109
                                        #   in Loop: Header=BB121_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	jmp	.LBB121_398
.LBB121_397:                            # %if.else2131
                                        #   in Loop: Header=BB121_184 Depth=3
	movw	-36(%rbp), %ax
	movw	%ax, best8x8fwref+14
	movw	%ax, best8x8fwref+12
	movw	%ax, best8x8fwref+10
	movw	%ax, best8x8fwref+8
	movw	-50(%rbp), %ax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movw	-38(%rbp), %ax
	movw	%ax, best8x8bwref+14
	movw	%ax, best8x8bwref+12
	movw	%ax, best8x8bwref+10
	movw	%ax, best8x8bwref+8
.LBB121_398:                            # %if.end2132
                                        #   in Loop: Header=BB121_184 Depth=3
	jmp	.LBB121_399
.LBB121_399:                            # %if.end2133
                                        #   in Loop: Header=BB121_184 Depth=3
	cmpl	$1, -32(%rbp)
	jle	.LBB121_402
# %bb.400:                              # %land.lhs.true2136
                                        #   in Loop: Header=BB121_184 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB121_402
# %bb.401:                              # %if.then2139
                                        #   in Loop: Header=BB121_184 Depth=3
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movswl	-50(%rbp), %edx
	movswl	-36(%rbp), %ecx
	movswl	-38(%rbp), %r8d
	callq	SetRefAndMotionVectors
.LBB121_402:                            # %if.end2143
                                        #   in Loop: Header=BB121_184 Depth=3
	jmp	.LBB121_403
.LBB121_403:                            # %for.inc2144
                                        #   in Loop: Header=BB121_184 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB121_184
.LBB121_404:                            # %for.end2146
                                        #   in Loop: Header=BB121_181 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB121_408
# %bb.405:                              # %if.then2149
                                        #   in Loop: Header=BB121_181 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB121_407
# %bb.406:                              # %if.then2152
                                        #   in Loop: Header=BB121_181 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	leaq	-60(%rbp), %rsi
	callq	TransformDecision
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB121_407:                            # %if.end2155
                                        #   in Loop: Header=BB121_181 Depth=2
	jmp	.LBB121_408
.LBB121_408:                            # %if.end2156
                                        #   in Loop: Header=BB121_181 Depth=2
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB121_410
# %bb.409:                              # %if.then2159
                                        #   in Loop: Header=BB121_181 Depth=2
	movl	-32(%rbp), %eax
	movl	%eax, best_mode
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -304(%rbp)
.LBB121_410:                            # %if.end2161
                                        #   in Loop: Header=BB121_181 Depth=2
	jmp	.LBB121_411
.LBB121_411:                            # %if.end2162
                                        #   in Loop: Header=BB121_181 Depth=2
	jmp	.LBB121_412
.LBB121_412:                            # %for.inc2163
                                        #   in Loop: Header=BB121_181 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB121_181
.LBB121_413:                            # %for.end2165
                                        #   in Loop: Header=BB121_171 Depth=1
	cmpl	$0, -352(%rbp)
	je	.LBB121_826
# %bb.414:                              # %if.then2168
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	$0, -144(%rbp)
	movl	$2147483647, cost8_8x8ts # imm = 0x7FFFFFFF
	movq	cs_mb, %rdi
	callq	store_coding_state
	movq	-48(%rbp), %rax
	movl	$-1, 568(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB121_599
# %bb.415:                              # %if.then2171
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -140(%rbp)
	movl	$0, -28(%rbp)
.LBB121_416:                            # %for.cond2172
                                        #   Parent Loop BB121_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB121_418 Depth 3
                                        #         Child Loop BB121_445 Depth 4
                                        #         Child Loop BB121_464 Depth 4
                                        #           Child Loop BB121_466 Depth 5
                                        #         Child Loop BB121_473 Depth 4
                                        #         Child Loop BB121_508 Depth 4
                                        #           Child Loop BB121_510 Depth 5
                                        #         Child Loop BB121_532 Depth 4
                                        #           Child Loop BB121_534 Depth 5
                                        #             Child Loop BB121_536 Depth 6
                                        #         Child Loop BB121_544 Depth 4
                                        #           Child Loop BB121_546 Depth 5
                                        #       Child Loop BB121_569 Depth 3
                                        #         Child Loop BB121_571 Depth 4
                                        #           Child Loop BB121_573 Depth 5
                                        #       Child Loop BB121_581 Depth 3
                                        #         Child Loop BB121_583 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB121_598
# %bb.417:                              # %for.body2175
                                        #   in Loop: Header=BB121_416 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI121_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -416(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -408(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movl	$2147483647, -176(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -248(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB121_418:                            # %for.cond2184
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB121_445 Depth 4
                                        #         Child Loop BB121_464 Depth 4
                                        #           Child Loop BB121_466 Depth 5
                                        #         Child Loop BB121_473 Depth 4
                                        #         Child Loop BB121_508 Depth 4
                                        #           Child Loop BB121_510 Depth 5
                                        #         Child Loop BB121_532 Depth 4
                                        #           Child Loop BB121_534 Depth 5
                                        #             Child Loop BB121_536 Depth 6
                                        #         Child Loop BB121_544 Depth 4
                                        #           Child Loop BB121_546 Depth 5
	cmpl	$2, -80(%rbp)
	jge	.LBB121_559
# %bb.419:                              # %for.body2187
                                        #   in Loop: Header=BB121_418 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB121_421
# %bb.420:                              # %land.lhs.true2193
                                        #   in Loop: Header=BB121_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB121_423
.LBB121_421:                            # %lor.lhs.false2196
                                        #   in Loop: Header=BB121_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB121_557
# %bb.422:                              # %land.lhs.true2199
                                        #   in Loop: Header=BB121_418 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB121_557
.LBB121_423:                            # %if.then2201
                                        #   in Loop: Header=BB121_418 Depth=3
	movq	$0, -240(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB121_444
# %bb.424:                              # %if.then2204
                                        #   in Loop: Header=BB121_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB121_443
# %bb.425:                              # %if.then2207
                                        #   in Loop: Header=BB121_418 Depth=3
	movl	$0, -212(%rbp)
	movl	$0, -216(%rbp)
	movl	-28(%rbp), %edi
	leaq	-216(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -212(%rbp)
	cmpl	$2147483647, -212(%rbp) # imm = 0x7FFFFFFF
	je	.LBB121_427
# %bb.426:                              # %lor.lhs.false2211
                                        #   in Loop: Header=BB121_418 Depth=3
	cmpl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB121_428
.LBB121_427:                            # %if.then2214
                                        #   in Loop: Header=BB121_418 Depth=3
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -208(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB121_429
.LBB121_428:                            # %if.else2215
                                        #   in Loop: Header=BB121_418 Depth=3
	movl	-212(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-216(%rbp), %eax
	addl	-208(%rbp), %eax
	movl	%eax, -208(%rbp)
.LBB121_429:                            # %if.end2218
                                        #   in Loop: Header=BB121_418 Depth=3
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB121_431
	jmp	.LBB121_430
.LBB121_430:                            # %if.end2218
                                        #   in Loop: Header=BB121_418 Depth=3
	subl	$2, %eax
	je	.LBB121_438
	jmp	.LBB121_439
.LBB121_431:                            # %sw.bb
                                        #   in Loop: Header=BB121_418 Depth=3
	movl	-216(%rbp), %eax
	cmpl	-212(%rbp), %eax
	jl	.LBB121_435
# %bb.432:                              # %lor.lhs.false2222
                                        #   in Loop: Header=BB121_418 Depth=3
	cmpl	$0, -364(%rbp)
	je	.LBB121_435
# %bb.433:                              # %land.lhs.true2225
                                        #   in Loop: Header=BB121_418 Depth=3
	cmpl	$0, -360(%rbp)
	je	.LBB121_435
# %bb.434:                              # %land.lhs.true2228
                                        #   in Loop: Header=BB121_418 Depth=3
	cmpl	$0, -356(%rbp)
	jne	.LBB121_436
.LBB121_435:                            # %if.then2231
                                        #   in Loop: Header=BB121_418 Depth=3
	movl	-216(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB121_437
.LBB121_436:                            # %if.else2232
                                        #   in Loop: Header=BB121_418 Depth=3
	movl	-212(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB121_437:                            # %if.end2233
                                        #   in Loop: Header=BB121_418 Depth=3
	jmp	.LBB121_440
.LBB121_438:                            # %sw.bb2234
                                        #   in Loop: Header=BB121_418 Depth=3
	movl	-216(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB121_440
.LBB121_439:                            # %sw.default
                                        #   in Loop: Header=BB121_418 Depth=3
	movl	-212(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB121_440:                            # %sw.epilog
                                        #   in Loop: Header=BB121_418 Depth=3
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB121_442
# %bb.441:                              # %if.then2238
                                        #   in Loop: Header=BB121_418 Depth=3
	movl	-176(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB121_442:                            # %if.end2240
                                        #   in Loop: Header=BB121_418 Depth=3
	movl	-260(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -260(%rbp)
.LBB121_443:                            # %if.end2242
                                        #   in Loop: Header=BB121_418 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB121_518
.LBB121_444:                            # %if.else2278
                                        #   in Loop: Header=BB121_418 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-204(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB121_445:                            # %for.cond2279
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_416 Depth=2
                                        #       Parent Loop BB121_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB121_463
# %bb.446:                              # %for.body2286
                                        #   in Loop: Header=BB121_445 Depth=4
	cmpl	$0, -280(%rbp)
	je	.LBB121_449
# %bb.447:                              # %lor.lhs.false2288
                                        #   in Loop: Header=BB121_445 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB121_449
# %bb.448:                              # %lor.lhs.false2292
                                        #   in Loop: Header=BB121_445 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB121_461
.LBB121_449:                            # %if.then2296
                                        #   in Loop: Header=BB121_445 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB121_454
# %bb.450:                              # %cond.true2299
                                        #   in Loop: Header=BB121_445 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB121_452
# %bb.451:                              # %cond.true2305
                                        #   in Loop: Header=BB121_445 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB121_453
.LBB121_452:                            # %cond.false2306
                                        #   in Loop: Header=BB121_445 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB121_453:                            # %cond.end2309
                                        #   in Loop: Header=BB121_445 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB121_458
.LBB121_454:                            # %cond.false2313
                                        #   in Loop: Header=BB121_445 Depth=4
	vmovsd	.LCPI121_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB121_456
# %bb.455:                              # %cond.true2318
                                        #   in Loop: Header=BB121_445 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB121_457
.LBB121_456:                            # %cond.false2320
                                        #   in Loop: Header=BB121_445 Depth=4
	movl	$1, %eax
	jmp	.LBB121_457
.LBB121_457:                            # %cond.end2321
                                        #   in Loop: Header=BB121_445 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB121_458:                            # %cond.end2326
                                        #   in Loop: Header=BB121_445 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB121_460
# %bb.459:                              # %if.then2338
                                        #   in Loop: Header=BB121_445 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB121_460:                            # %if.end2339
                                        #   in Loop: Header=BB121_445 Depth=4
	jmp	.LBB121_461
.LBB121_461:                            # %if.end2340
                                        #   in Loop: Header=BB121_445 Depth=4
	jmp	.LBB121_462
.LBB121_462:                            # %for.inc2341
                                        #   in Loop: Header=BB121_445 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB121_445
.LBB121_463:                            # %for.end2343
                                        #   in Loop: Header=BB121_418 Depth=3
	movl	$0, -24(%rbp)
.LBB121_464:                            # %for.cond2344
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_416 Depth=2
                                        #       Parent Loop BB121_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB121_466 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB121_471
# %bb.465:                              # %for.body2347
                                        #   in Loop: Header=BB121_464 Depth=4
	movl	$0, -20(%rbp)
.LBB121_466:                            # %for.cond2348
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_416 Depth=2
                                        #       Parent Loop BB121_418 Depth=3
                                        #         Parent Loop BB121_464 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB121_469
# %bb.467:                              # %for.body2351
                                        #   in Loop: Header=BB121_466 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.468:                              # %for.inc2403
                                        #   in Loop: Header=BB121_466 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_466
.LBB121_469:                            # %for.end2405
                                        #   in Loop: Header=BB121_464 Depth=4
	jmp	.LBB121_470
.LBB121_470:                            # %for.inc2406
                                        #   in Loop: Header=BB121_464 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_464
.LBB121_471:                            # %for.end2408
                                        #   in Loop: Header=BB121_418 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB121_516
# %bb.472:                              # %if.then2410
                                        #   in Loop: Header=BB121_418 Depth=3
	movl	-204(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB121_473:                            # %for.cond2411
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_416 Depth=2
                                        #       Parent Loop BB121_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB121_487
# %bb.474:                              # %for.body2418
                                        #   in Loop: Header=BB121_473 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB121_479
# %bb.475:                              # %cond.true2421
                                        #   in Loop: Header=BB121_473 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB121_477
# %bb.476:                              # %cond.true2427
                                        #   in Loop: Header=BB121_473 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB121_478
.LBB121_477:                            # %cond.false2428
                                        #   in Loop: Header=BB121_473 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB121_478:                            # %cond.end2431
                                        #   in Loop: Header=BB121_473 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB121_483
.LBB121_479:                            # %cond.false2435
                                        #   in Loop: Header=BB121_473 Depth=4
	vmovsd	.LCPI121_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB121_481
# %bb.480:                              # %cond.true2440
                                        #   in Loop: Header=BB121_473 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB121_482
.LBB121_481:                            # %cond.false2442
                                        #   in Loop: Header=BB121_473 Depth=4
	movl	$1, %eax
	jmp	.LBB121_482
.LBB121_482:                            # %cond.end2443
                                        #   in Loop: Header=BB121_473 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB121_483:                            # %cond.end2448
                                        #   in Loop: Header=BB121_473 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB121_485
# %bb.484:                              # %if.then2460
                                        #   in Loop: Header=BB121_473 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB121_485:                            # %if.end2461
                                        #   in Loop: Header=BB121_473 Depth=4
	jmp	.LBB121_486
.LBB121_486:                            # %for.inc2462
                                        #   in Loop: Header=BB121_473 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB121_473
.LBB121_487:                            # %for.end2464
                                        #   in Loop: Header=BB121_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB121_495
# %bb.488:                              # %cond.true2467
                                        #   in Loop: Header=BB121_418 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB121_490
# %bb.489:                              # %cond.true2473
                                        #   in Loop: Header=BB121_418 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB121_491
.LBB121_490:                            # %cond.false2474
                                        #   in Loop: Header=BB121_418 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB121_491:                            # %cond.end2477
                                        #   in Loop: Header=BB121_418 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB121_493
# %bb.492:                              # %cond.true2486
                                        #   in Loop: Header=BB121_418 Depth=3
	xorl	%edx, %edx
	jmp	.LBB121_494
.LBB121_493:                            # %cond.false2487
                                        #   in Loop: Header=BB121_418 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB121_494:                            # %cond.end2489
                                        #   in Loop: Header=BB121_418 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB121_499
.LBB121_495:                            # %cond.false2494
                                        #   in Loop: Header=BB121_418 Depth=3
	vmovsd	.LCPI121_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB121_497
# %bb.496:                              # %cond.true2499
                                        #   in Loop: Header=BB121_418 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB121_498
.LBB121_497:                            # %cond.false2501
                                        #   in Loop: Header=BB121_418 Depth=3
	movl	$1, %eax
	jmp	.LBB121_498
.LBB121_498:                            # %cond.end2502
                                        #   in Loop: Header=BB121_418 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB121_499:                            # %cond.end2507
                                        #   in Loop: Header=BB121_418 Depth=3
	movl	%eax, -88(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB121_502
# %bb.500:                              # %land.lhs.true2513
                                        #   in Loop: Header=BB121_418 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB121_502
# %bb.501:                              # %if.then2516
                                        #   in Loop: Header=BB121_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB121_507
.LBB121_502:                            # %if.else2517
                                        #   in Loop: Header=BB121_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB121_505
# %bb.503:                              # %land.lhs.true2520
                                        #   in Loop: Header=BB121_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB121_505
# %bb.504:                              # %if.then2523
                                        #   in Loop: Header=BB121_418 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB121_506
.LBB121_505:                            # %if.else2524
                                        #   in Loop: Header=BB121_418 Depth=3
	movw	$2, -50(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB121_506:                            # %if.end2525
                                        #   in Loop: Header=BB121_418 Depth=3
	jmp	.LBB121_507
.LBB121_507:                            # %if.end2526
                                        #   in Loop: Header=BB121_418 Depth=3
	movl	$0, -24(%rbp)
.LBB121_508:                            # %for.cond2527
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_416 Depth=2
                                        #       Parent Loop BB121_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB121_510 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB121_515
# %bb.509:                              # %for.body2530
                                        #   in Loop: Header=BB121_508 Depth=4
	movl	$0, -20(%rbp)
.LBB121_510:                            # %for.cond2531
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_416 Depth=2
                                        #       Parent Loop BB121_418 Depth=3
                                        #         Parent Loop BB121_508 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB121_513
# %bb.511:                              # %for.body2534
                                        #   in Loop: Header=BB121_510 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.512:                              # %for.inc2565
                                        #   in Loop: Header=BB121_510 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_510
.LBB121_513:                            # %for.end2567
                                        #   in Loop: Header=BB121_508 Depth=4
	jmp	.LBB121_514
.LBB121_514:                            # %for.inc2568
                                        #   in Loop: Header=BB121_508 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_508
.LBB121_515:                            # %for.end2570
                                        #   in Loop: Header=BB121_418 Depth=3
	jmp	.LBB121_517
.LBB121_516:                            # %if.else2571
                                        #   in Loop: Header=BB121_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB121_517:                            # %if.end2572
                                        #   in Loop: Header=BB121_418 Depth=3
	jmp	.LBB121_518
.LBB121_518:                            # %if.end2573
                                        #   in Loop: Header=BB121_418 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB121_520
# %bb.519:                              # %if.then2576
                                        #   in Loop: Header=BB121_418 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-272(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB121_526
.LBB121_520:                            # %if.else2578
                                        #   in Loop: Header=BB121_418 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB121_525
# %bb.521:                              # %if.then2581
                                        #   in Loop: Header=BB121_418 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB121_523
# %bb.522:                              # %cond.true2591
                                        #   in Loop: Header=BB121_418 Depth=3
	xorl	%eax, %eax
	jmp	.LBB121_524
.LBB121_523:                            # %cond.false2592
                                        #   in Loop: Header=BB121_418 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB121_524:                            # %cond.end2597
                                        #   in Loop: Header=BB121_418 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB121_525:                            # %if.end2603
                                        #   in Loop: Header=BB121_418 Depth=3
	jmp	.LBB121_526
.LBB121_526:                            # %if.end2604
                                        #   in Loop: Header=BB121_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB121_528
# %bb.527:                              # %land.lhs.true2607
                                        #   in Loop: Header=BB121_418 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-248(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB121_530
.LBB121_528:                            # %lor.lhs.false2610
                                        #   in Loop: Header=BB121_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB121_556
# %bb.529:                              # %land.lhs.true2613
                                        #   in Loop: Header=BB121_418 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-176(%rbp), %eax
	jge	.LBB121_556
.LBB121_530:                            # %if.then2616
                                        #   in Loop: Header=BB121_418 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -176(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, part8x8mode(,%rcx,4)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8pdir(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8fwref(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8bwref(,%rcx,2)
	movl	-272(%rbp), %eax
	movl	%eax, -172(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB121_555
# %bb.531:                              # %if.then2627
                                        #   in Loop: Header=BB121_418 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB121_532:                            # %for.cond2638
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_416 Depth=2
                                        #       Parent Loop BB121_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB121_534 Depth 5
                                        #             Child Loop BB121_536 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB121_543
# %bb.533:                              # %for.body2641
                                        #   in Loop: Header=BB121_532 Depth=4
	movl	$0, -24(%rbp)
.LBB121_534:                            # %for.cond2642
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_416 Depth=2
                                        #       Parent Loop BB121_418 Depth=3
                                        #         Parent Loop BB121_532 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB121_536 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB121_541
# %bb.535:                              # %for.body2645
                                        #   in Loop: Header=BB121_534 Depth=5
	movl	$0, -20(%rbp)
.LBB121_536:                            # %for.cond2646
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_416 Depth=2
                                        #       Parent Loop BB121_418 Depth=3
                                        #         Parent Loop BB121_532 Depth=4
                                        #           Parent Loop BB121_534 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB121_539
# %bb.537:                              # %for.body2649
                                        #   in Loop: Header=BB121_536 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.538:                              # %for.inc2666
                                        #   in Loop: Header=BB121_536 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_536
.LBB121_539:                            # %for.end2668
                                        #   in Loop: Header=BB121_534 Depth=5
	jmp	.LBB121_540
.LBB121_540:                            # %for.inc2669
                                        #   in Loop: Header=BB121_534 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_534
.LBB121_541:                            # %for.end2671
                                        #   in Loop: Header=BB121_532 Depth=4
	jmp	.LBB121_542
.LBB121_542:                            # %for.inc2672
                                        #   in Loop: Header=BB121_532 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB121_532
.LBB121_543:                            # %for.end2674
                                        #   in Loop: Header=BB121_418 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB121_544:                            # %for.cond2675
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_416 Depth=2
                                        #       Parent Loop BB121_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB121_546 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_554
# %bb.545:                              # %for.body2679
                                        #   in Loop: Header=BB121_544 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB121_546:                            # %for.cond2680
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_416 Depth=2
                                        #       Parent Loop BB121_418 Depth=3
                                        #         Parent Loop BB121_544 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_552
# %bb.547:                              # %for.body2684
                                        #   in Loop: Header=BB121_546 Depth=5
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB121_549
# %bb.548:                              # %if.then2686
                                        #   in Loop: Header=BB121_546 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB121_550
.LBB121_549:                            # %if.else2705
                                        #   in Loop: Header=BB121_546 Depth=5
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB121_550:                            # %if.end2754
                                        #   in Loop: Header=BB121_546 Depth=5
	jmp	.LBB121_551
.LBB121_551:                            # %for.inc2755
                                        #   in Loop: Header=BB121_546 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_546
.LBB121_552:                            # %for.end2757
                                        #   in Loop: Header=BB121_544 Depth=4
	jmp	.LBB121_553
.LBB121_553:                            # %for.inc2758
                                        #   in Loop: Header=BB121_544 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_544
.LBB121_554:                            # %for.end2760
                                        #   in Loop: Header=BB121_418 Depth=3
	jmp	.LBB121_555
.LBB121_555:                            # %if.end2761
                                        #   in Loop: Header=BB121_418 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB121_556:                            # %if.end2762
                                        #   in Loop: Header=BB121_418 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB121_557:                            # %if.end2763
                                        #   in Loop: Header=BB121_418 Depth=3
	jmp	.LBB121_558
.LBB121_558:                            # %for.inc2764
                                        #   in Loop: Header=BB121_418 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB121_418
.LBB121_559:                            # %for.end2766
                                        #   in Loop: Header=BB121_416 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB121_592
# %bb.560:                              # %if.then2769
                                        #   in Loop: Header=BB121_416 Depth=2
	movl	-176(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	part8x8pdir(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -240(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB121_562
# %bb.561:                              # %lor.lhs.false2778
                                        #   in Loop: Header=BB121_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB121_563
.LBB121_562:                            # %cond.true2782
                                        #   in Loop: Header=BB121_416 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB121_564
.LBB121_563:                            # %cond.false2783
                                        #   in Loop: Header=BB121_416 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB121_564
.LBB121_564:                            # %cond.end2784
                                        #   in Loop: Header=BB121_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB121_566
# %bb.565:                              # %lor.lhs.false2789
                                        #   in Loop: Header=BB121_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB121_567
.LBB121_566:                            # %cond.true2793
                                        #   in Loop: Header=BB121_416 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB121_568
.LBB121_567:                            # %cond.false2794
                                        #   in Loop: Header=BB121_416 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB121_568
.LBB121_568:                            # %cond.end2795
                                        #   in Loop: Header=BB121_416 Depth=2
	movslq	-28(%rbp), %rcx
	movw	part8x8fwref(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-284(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	part8x8bwref(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -172(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB121_569:                            # %for.cond2813
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB121_571 Depth 4
                                        #           Child Loop BB121_573 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB121_580
# %bb.570:                              # %for.body2816
                                        #   in Loop: Header=BB121_569 Depth=3
	movl	$0, -24(%rbp)
.LBB121_571:                            # %for.cond2817
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_416 Depth=2
                                        #       Parent Loop BB121_569 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB121_573 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB121_578
# %bb.572:                              # %for.body2820
                                        #   in Loop: Header=BB121_571 Depth=4
	movl	$0, -20(%rbp)
.LBB121_573:                            # %for.cond2821
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_416 Depth=2
                                        #       Parent Loop BB121_569 Depth=3
                                        #         Parent Loop BB121_571 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB121_576
# %bb.574:                              # %for.body2824
                                        #   in Loop: Header=BB121_573 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.575:                              # %for.inc2842
                                        #   in Loop: Header=BB121_573 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_573
.LBB121_576:                            # %for.end2844
                                        #   in Loop: Header=BB121_571 Depth=4
	jmp	.LBB121_577
.LBB121_577:                            # %for.inc2845
                                        #   in Loop: Header=BB121_571 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_571
.LBB121_578:                            # %for.end2847
                                        #   in Loop: Header=BB121_569 Depth=3
	jmp	.LBB121_579
.LBB121_579:                            # %for.inc2848
                                        #   in Loop: Header=BB121_569 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB121_569
.LBB121_580:                            # %for.end2850
                                        #   in Loop: Header=BB121_416 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB121_581:                            # %for.cond2851
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB121_583 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_591
# %bb.582:                              # %for.body2855
                                        #   in Loop: Header=BB121_581 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB121_583:                            # %for.cond2856
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_416 Depth=2
                                        #       Parent Loop BB121_581 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_589
# %bb.584:                              # %for.body2860
                                        #   in Loop: Header=BB121_583 Depth=4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB121_586
# %bb.585:                              # %if.then2863
                                        #   in Loop: Header=BB121_583 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB121_587
.LBB121_586:                            # %if.else2886
                                        #   in Loop: Header=BB121_583 Depth=4
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB121_587:                            # %if.end2935
                                        #   in Loop: Header=BB121_583 Depth=4
	jmp	.LBB121_588
.LBB121_588:                            # %for.inc2936
                                        #   in Loop: Header=BB121_583 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_583
.LBB121_589:                            # %for.end2938
                                        #   in Loop: Header=BB121_581 Depth=3
	jmp	.LBB121_590
.LBB121_590:                            # %for.inc2939
                                        #   in Loop: Header=BB121_581 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_581
.LBB121_591:                            # %for.end2941
                                        #   in Loop: Header=BB121_416 Depth=2
	jmp	.LBB121_592
.LBB121_592:                            # %if.end2942
                                        #   in Loop: Header=BB121_416 Depth=2
	cmpl	$0, -172(%rbp)
	je	.LBB121_594
# %bb.593:                              # %if.then2944
                                        #   in Loop: Header=BB121_416 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-172(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB121_594:                            # %if.end2948
                                        #   in Loop: Header=BB121_416 Depth=2
	movl	-28(%rbp), %esi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-108(%rbp), %eax
	xorl	%edi, %edi
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8
	movl	-28(%rbp), %edi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %esi
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	cmpl	$3, -28(%rbp)
	jge	.LBB121_596
# %bb.595:                              # %if.then2973
                                        #   in Loop: Header=BB121_416 Depth=2
	movq	cs_b8, %rdi
	callq	reset_coding_state
.LBB121_596:                            # %if.end2974
                                        #   in Loop: Header=BB121_416 Depth=2
	jmp	.LBB121_597
.LBB121_597:                            # %for.inc2975
                                        #   in Loop: Header=BB121_416 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB121_416
.LBB121_598:                            # %for.end2977
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	cbp8x8, %eax
	movl	%eax, cbp8_8x8ts
	movslq	cbp_blk8x8, %rax
	movq	%rax, cbp_blk8_8x8ts
	movl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz8_8x8ts
	movl	-144(%rbp), %eax
	movl	%eax, cost8_8x8ts
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB121_599:                            # %if.end2980
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB121_802
# %bb.600:                              # %if.then2984
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	$0, -144(%rbp)
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -140(%rbp)
	movl	$0, -28(%rbp)
.LBB121_601:                            # %for.cond2985
                                        #   Parent Loop BB121_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB121_603 Depth 3
                                        #         Child Loop BB121_614 Depth 4
                                        #         Child Loop BB121_633 Depth 4
                                        #           Child Loop BB121_635 Depth 5
                                        #         Child Loop BB121_642 Depth 4
                                        #         Child Loop BB121_677 Depth 4
                                        #           Child Loop BB121_679 Depth 5
                                        #         Child Loop BB121_701 Depth 4
                                        #           Child Loop BB121_703 Depth 5
                                        #             Child Loop BB121_705 Depth 6
                                        #         Child Loop BB121_713 Depth 4
                                        #           Child Loop BB121_715 Depth 5
                                        #         Child Loop BB121_723 Depth 4
                                        #           Child Loop BB121_725 Depth 5
                                        #       Child Loop BB121_745 Depth 3
                                        #         Child Loop BB121_747 Depth 4
                                        #           Child Loop BB121_749 Depth 5
                                        #       Child Loop BB121_757 Depth 3
                                        #         Child Loop BB121_759 Depth 4
                                        #       Child Loop BB121_766 Depth 3
                                        #         Child Loop BB121_768 Depth 4
                                        #       Child Loop BB121_778 Depth 3
                                        #         Child Loop BB121_780 Depth 4
                                        #       Child Loop BB121_786 Depth 3
                                        #       Child Loop BB121_791 Depth 3
                                        #         Child Loop BB121_793 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB121_801
# %bb.602:                              # %for.body2988
                                        #   in Loop: Header=BB121_601 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI121_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -416(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -408(%rbp)
	movl	$2147483647, -176(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -248(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB121_603:                            # %for.cond2997
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB121_614 Depth 4
                                        #         Child Loop BB121_633 Depth 4
                                        #           Child Loop BB121_635 Depth 5
                                        #         Child Loop BB121_642 Depth 4
                                        #         Child Loop BB121_677 Depth 4
                                        #           Child Loop BB121_679 Depth 5
                                        #         Child Loop BB121_701 Depth 4
                                        #           Child Loop BB121_703 Depth 5
                                        #             Child Loop BB121_705 Depth 6
                                        #         Child Loop BB121_713 Depth 4
                                        #           Child Loop BB121_715 Depth 5
                                        #         Child Loop BB121_723 Depth 4
                                        #           Child Loop BB121_725 Depth 5
	cmpl	$5, -80(%rbp)
	jge	.LBB121_735
# %bb.604:                              # %for.body3000
                                        #   in Loop: Header=BB121_603 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cltq
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB121_733
# %bb.605:                              # %if.then3006
                                        #   in Loop: Header=BB121_603 Depth=3
	movq	$0, -240(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB121_613
# %bb.606:                              # %if.then3009
                                        #   in Loop: Header=BB121_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB121_612
# %bb.607:                              # %if.then3012
                                        #   in Loop: Header=BB121_603 Depth=3
	movl	-28(%rbp), %edi
	leaq	-216(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -60(%rbp)
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB121_609
# %bb.608:                              # %lor.lhs.false3016
                                        #   in Loop: Header=BB121_603 Depth=3
	cmpl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB121_610
.LBB121_609:                            # %if.then3019
                                        #   in Loop: Header=BB121_603 Depth=3
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB121_611
.LBB121_610:                            # %if.else3020
                                        #   in Loop: Header=BB121_603 Depth=3
	movl	-60(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
.LBB121_611:                            # %if.end3022
                                        #   in Loop: Header=BB121_603 Depth=3
	movl	-260(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -260(%rbp)
.LBB121_612:                            # %if.end3024
                                        #   in Loop: Header=BB121_603 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB121_687
.LBB121_613:                            # %if.else3060
                                        #   in Loop: Header=BB121_603 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-204(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB121_614:                            # %for.cond3061
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_601 Depth=2
                                        #       Parent Loop BB121_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB121_632
# %bb.615:                              # %for.body3068
                                        #   in Loop: Header=BB121_614 Depth=4
	cmpl	$0, -280(%rbp)
	je	.LBB121_618
# %bb.616:                              # %lor.lhs.false3070
                                        #   in Loop: Header=BB121_614 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB121_618
# %bb.617:                              # %lor.lhs.false3074
                                        #   in Loop: Header=BB121_614 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB121_630
.LBB121_618:                            # %if.then3078
                                        #   in Loop: Header=BB121_614 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB121_623
# %bb.619:                              # %cond.true3081
                                        #   in Loop: Header=BB121_614 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB121_621
# %bb.620:                              # %cond.true3087
                                        #   in Loop: Header=BB121_614 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB121_622
.LBB121_621:                            # %cond.false3088
                                        #   in Loop: Header=BB121_614 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB121_622:                            # %cond.end3091
                                        #   in Loop: Header=BB121_614 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB121_627
.LBB121_623:                            # %cond.false3095
                                        #   in Loop: Header=BB121_614 Depth=4
	vmovsd	.LCPI121_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB121_625
# %bb.624:                              # %cond.true3100
                                        #   in Loop: Header=BB121_614 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB121_626
.LBB121_625:                            # %cond.false3102
                                        #   in Loop: Header=BB121_614 Depth=4
	movl	$1, %eax
	jmp	.LBB121_626
.LBB121_626:                            # %cond.end3103
                                        #   in Loop: Header=BB121_614 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB121_627:                            # %cond.end3108
                                        #   in Loop: Header=BB121_614 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB121_629
# %bb.628:                              # %if.then3120
                                        #   in Loop: Header=BB121_614 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB121_629:                            # %if.end3121
                                        #   in Loop: Header=BB121_614 Depth=4
	jmp	.LBB121_630
.LBB121_630:                            # %if.end3122
                                        #   in Loop: Header=BB121_614 Depth=4
	jmp	.LBB121_631
.LBB121_631:                            # %for.inc3123
                                        #   in Loop: Header=BB121_614 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB121_614
.LBB121_632:                            # %for.end3125
                                        #   in Loop: Header=BB121_603 Depth=3
	movl	$0, -24(%rbp)
.LBB121_633:                            # %for.cond3126
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_601 Depth=2
                                        #       Parent Loop BB121_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB121_635 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB121_640
# %bb.634:                              # %for.body3129
                                        #   in Loop: Header=BB121_633 Depth=4
	movl	$0, -20(%rbp)
.LBB121_635:                            # %for.cond3130
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_601 Depth=2
                                        #       Parent Loop BB121_603 Depth=3
                                        #         Parent Loop BB121_633 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB121_638
# %bb.636:                              # %for.body3133
                                        #   in Loop: Header=BB121_635 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.637:                              # %for.inc3185
                                        #   in Loop: Header=BB121_635 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_635
.LBB121_638:                            # %for.end3187
                                        #   in Loop: Header=BB121_633 Depth=4
	jmp	.LBB121_639
.LBB121_639:                            # %for.inc3188
                                        #   in Loop: Header=BB121_633 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_633
.LBB121_640:                            # %for.end3190
                                        #   in Loop: Header=BB121_603 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB121_685
# %bb.641:                              # %if.then3192
                                        #   in Loop: Header=BB121_603 Depth=3
	movl	-204(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB121_642:                            # %for.cond3193
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_601 Depth=2
                                        #       Parent Loop BB121_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB121_656
# %bb.643:                              # %for.body3200
                                        #   in Loop: Header=BB121_642 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB121_648
# %bb.644:                              # %cond.true3203
                                        #   in Loop: Header=BB121_642 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB121_646
# %bb.645:                              # %cond.true3209
                                        #   in Loop: Header=BB121_642 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB121_647
.LBB121_646:                            # %cond.false3210
                                        #   in Loop: Header=BB121_642 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB121_647:                            # %cond.end3213
                                        #   in Loop: Header=BB121_642 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB121_652
.LBB121_648:                            # %cond.false3217
                                        #   in Loop: Header=BB121_642 Depth=4
	vmovsd	.LCPI121_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB121_650
# %bb.649:                              # %cond.true3222
                                        #   in Loop: Header=BB121_642 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB121_651
.LBB121_650:                            # %cond.false3224
                                        #   in Loop: Header=BB121_642 Depth=4
	movl	$1, %eax
	jmp	.LBB121_651
.LBB121_651:                            # %cond.end3225
                                        #   in Loop: Header=BB121_642 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB121_652:                            # %cond.end3230
                                        #   in Loop: Header=BB121_642 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB121_654
# %bb.653:                              # %if.then3242
                                        #   in Loop: Header=BB121_642 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB121_654:                            # %if.end3243
                                        #   in Loop: Header=BB121_642 Depth=4
	jmp	.LBB121_655
.LBB121_655:                            # %for.inc3244
                                        #   in Loop: Header=BB121_642 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB121_642
.LBB121_656:                            # %for.end3246
                                        #   in Loop: Header=BB121_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB121_664
# %bb.657:                              # %cond.true3249
                                        #   in Loop: Header=BB121_603 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB121_659
# %bb.658:                              # %cond.true3255
                                        #   in Loop: Header=BB121_603 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB121_660
.LBB121_659:                            # %cond.false3256
                                        #   in Loop: Header=BB121_603 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB121_660:                            # %cond.end3259
                                        #   in Loop: Header=BB121_603 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB121_662
# %bb.661:                              # %cond.true3268
                                        #   in Loop: Header=BB121_603 Depth=3
	xorl	%edx, %edx
	jmp	.LBB121_663
.LBB121_662:                            # %cond.false3269
                                        #   in Loop: Header=BB121_603 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB121_663:                            # %cond.end3271
                                        #   in Loop: Header=BB121_603 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB121_668
.LBB121_664:                            # %cond.false3276
                                        #   in Loop: Header=BB121_603 Depth=3
	vmovsd	.LCPI121_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB121_666
# %bb.665:                              # %cond.true3281
                                        #   in Loop: Header=BB121_603 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB121_667
.LBB121_666:                            # %cond.false3283
                                        #   in Loop: Header=BB121_603 Depth=3
	movl	$1, %eax
	jmp	.LBB121_667
.LBB121_667:                            # %cond.end3284
                                        #   in Loop: Header=BB121_603 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB121_668:                            # %cond.end3289
                                        #   in Loop: Header=BB121_603 Depth=3
	movl	%eax, -88(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB121_671
# %bb.669:                              # %land.lhs.true3295
                                        #   in Loop: Header=BB121_603 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB121_671
# %bb.670:                              # %if.then3298
                                        #   in Loop: Header=BB121_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB121_676
.LBB121_671:                            # %if.else3299
                                        #   in Loop: Header=BB121_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB121_674
# %bb.672:                              # %land.lhs.true3302
                                        #   in Loop: Header=BB121_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB121_674
# %bb.673:                              # %if.then3305
                                        #   in Loop: Header=BB121_603 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB121_675
.LBB121_674:                            # %if.else3306
                                        #   in Loop: Header=BB121_603 Depth=3
	movw	$2, -50(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB121_675:                            # %if.end3307
                                        #   in Loop: Header=BB121_603 Depth=3
	jmp	.LBB121_676
.LBB121_676:                            # %if.end3308
                                        #   in Loop: Header=BB121_603 Depth=3
	movl	$0, -24(%rbp)
.LBB121_677:                            # %for.cond3309
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_601 Depth=2
                                        #       Parent Loop BB121_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB121_679 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB121_684
# %bb.678:                              # %for.body3312
                                        #   in Loop: Header=BB121_677 Depth=4
	movl	$0, -20(%rbp)
.LBB121_679:                            # %for.cond3313
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_601 Depth=2
                                        #       Parent Loop BB121_603 Depth=3
                                        #         Parent Loop BB121_677 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB121_682
# %bb.680:                              # %for.body3316
                                        #   in Loop: Header=BB121_679 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.681:                              # %for.inc3347
                                        #   in Loop: Header=BB121_679 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_679
.LBB121_682:                            # %for.end3349
                                        #   in Loop: Header=BB121_677 Depth=4
	jmp	.LBB121_683
.LBB121_683:                            # %for.inc3350
                                        #   in Loop: Header=BB121_677 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_677
.LBB121_684:                            # %for.end3352
                                        #   in Loop: Header=BB121_603 Depth=3
	jmp	.LBB121_686
.LBB121_685:                            # %if.else3353
                                        #   in Loop: Header=BB121_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB121_686:                            # %if.end3354
                                        #   in Loop: Header=BB121_603 Depth=3
	jmp	.LBB121_687
.LBB121_687:                            # %if.end3355
                                        #   in Loop: Header=BB121_603 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB121_689
# %bb.688:                              # %if.then3358
                                        #   in Loop: Header=BB121_603 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-272(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB121_695
.LBB121_689:                            # %if.else3360
                                        #   in Loop: Header=BB121_603 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB121_694
# %bb.690:                              # %if.then3363
                                        #   in Loop: Header=BB121_603 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB121_692
# %bb.691:                              # %cond.true3373
                                        #   in Loop: Header=BB121_603 Depth=3
	xorl	%eax, %eax
	jmp	.LBB121_693
.LBB121_692:                            # %cond.false3374
                                        #   in Loop: Header=BB121_603 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB121_693:                            # %cond.end3379
                                        #   in Loop: Header=BB121_603 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB121_694:                            # %if.end3385
                                        #   in Loop: Header=BB121_603 Depth=3
	jmp	.LBB121_695
.LBB121_695:                            # %if.end3386
                                        #   in Loop: Header=BB121_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB121_697
# %bb.696:                              # %land.lhs.true3389
                                        #   in Loop: Header=BB121_603 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-248(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB121_699
.LBB121_697:                            # %lor.lhs.false3392
                                        #   in Loop: Header=BB121_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB121_732
# %bb.698:                              # %land.lhs.true3395
                                        #   in Loop: Header=BB121_603 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-176(%rbp), %eax
	jge	.LBB121_732
.LBB121_699:                            # %if.then3398
                                        #   in Loop: Header=BB121_603 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -176(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8mode(,%rcx,2)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+64(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+64(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+64(,%rcx,2)
	movl	-272(%rbp), %eax
	movl	%eax, -172(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB121_721
# %bb.700:                              # %if.then3410
                                        #   in Loop: Header=BB121_603 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB121_701:                            # %for.cond3422
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_601 Depth=2
                                        #       Parent Loop BB121_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB121_703 Depth 5
                                        #             Child Loop BB121_705 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB121_712
# %bb.702:                              # %for.body3425
                                        #   in Loop: Header=BB121_701 Depth=4
	movl	$0, -24(%rbp)
.LBB121_703:                            # %for.cond3426
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_601 Depth=2
                                        #       Parent Loop BB121_603 Depth=3
                                        #         Parent Loop BB121_701 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB121_705 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB121_710
# %bb.704:                              # %for.body3429
                                        #   in Loop: Header=BB121_703 Depth=5
	movl	$0, -20(%rbp)
.LBB121_705:                            # %for.cond3430
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_601 Depth=2
                                        #       Parent Loop BB121_603 Depth=3
                                        #         Parent Loop BB121_701 Depth=4
                                        #           Parent Loop BB121_703 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB121_708
# %bb.706:                              # %for.body3433
                                        #   in Loop: Header=BB121_705 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.707:                              # %for.inc3451
                                        #   in Loop: Header=BB121_705 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_705
.LBB121_708:                            # %for.end3453
                                        #   in Loop: Header=BB121_703 Depth=5
	jmp	.LBB121_709
.LBB121_709:                            # %for.inc3454
                                        #   in Loop: Header=BB121_703 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_703
.LBB121_710:                            # %for.end3456
                                        #   in Loop: Header=BB121_701 Depth=4
	jmp	.LBB121_711
.LBB121_711:                            # %for.inc3457
                                        #   in Loop: Header=BB121_701 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB121_701
.LBB121_712:                            # %for.end3459
                                        #   in Loop: Header=BB121_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB121_713:                            # %for.cond3460
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_601 Depth=2
                                        #       Parent Loop BB121_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB121_715 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_720
# %bb.714:                              # %for.body3464
                                        #   in Loop: Header=BB121_713 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB121_715:                            # %for.cond3465
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_601 Depth=2
                                        #       Parent Loop BB121_603 Depth=3
                                        #         Parent Loop BB121_713 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_718
# %bb.716:                              # %for.body3469
                                        #   in Loop: Header=BB121_715 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.717:                              # %for.inc3492
                                        #   in Loop: Header=BB121_715 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_715
.LBB121_718:                            # %for.end3494
                                        #   in Loop: Header=BB121_713 Depth=4
	jmp	.LBB121_719
.LBB121_719:                            # %for.inc3495
                                        #   in Loop: Header=BB121_713 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_713
.LBB121_720:                            # %for.end3497
                                        #   in Loop: Header=BB121_603 Depth=3
	jmp	.LBB121_721
.LBB121_721:                            # %if.end3498
                                        #   in Loop: Header=BB121_603 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB121_731
# %bb.722:                              # %if.then3501
                                        #   in Loop: Header=BB121_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB121_723:                            # %for.cond3502
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_601 Depth=2
                                        #       Parent Loop BB121_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB121_725 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_730
# %bb.724:                              # %for.body3506
                                        #   in Loop: Header=BB121_723 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB121_725:                            # %for.cond3507
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_601 Depth=2
                                        #       Parent Loop BB121_603 Depth=3
                                        #         Parent Loop BB121_723 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_728
# %bb.726:                              # %for.body3511
                                        #   in Loop: Header=BB121_725 Depth=5
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.727:                              # %for.inc3560
                                        #   in Loop: Header=BB121_725 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_725
.LBB121_728:                            # %for.end3562
                                        #   in Loop: Header=BB121_723 Depth=4
	jmp	.LBB121_729
.LBB121_729:                            # %for.inc3563
                                        #   in Loop: Header=BB121_723 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_723
.LBB121_730:                            # %for.end3565
                                        #   in Loop: Header=BB121_603 Depth=3
	jmp	.LBB121_731
.LBB121_731:                            # %if.end3566
                                        #   in Loop: Header=BB121_603 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB121_732:                            # %if.end3567
                                        #   in Loop: Header=BB121_603 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB121_733:                            # %if.end3568
                                        #   in Loop: Header=BB121_603 Depth=3
	jmp	.LBB121_734
.LBB121_734:                            # %for.inc3569
                                        #   in Loop: Header=BB121_603 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB121_603
.LBB121_735:                            # %for.end3571
                                        #   in Loop: Header=BB121_601 Depth=2
	movl	-176(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB121_775
# %bb.736:                              # %if.then3575
                                        #   in Loop: Header=BB121_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	best8x8pdir+64(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -240(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB121_738
# %bb.737:                              # %lor.lhs.false3584
                                        #   in Loop: Header=BB121_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB121_739
.LBB121_738:                            # %cond.true3588
                                        #   in Loop: Header=BB121_601 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB121_740
.LBB121_739:                            # %cond.false3589
                                        #   in Loop: Header=BB121_601 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB121_740
.LBB121_740:                            # %cond.end3590
                                        #   in Loop: Header=BB121_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB121_742
# %bb.741:                              # %lor.lhs.false3595
                                        #   in Loop: Header=BB121_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB121_743
.LBB121_742:                            # %cond.true3599
                                        #   in Loop: Header=BB121_601 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB121_744
.LBB121_743:                            # %cond.false3600
                                        #   in Loop: Header=BB121_601 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB121_744
.LBB121_744:                            # %cond.end3601
                                        #   in Loop: Header=BB121_601 Depth=2
	movslq	-28(%rbp), %rcx
	movw	best8x8fwref+64(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-284(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	best8x8bwref+64(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -172(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB121_745:                            # %for.cond3619
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB121_747 Depth 4
                                        #           Child Loop BB121_749 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB121_756
# %bb.746:                              # %for.body3622
                                        #   in Loop: Header=BB121_745 Depth=3
	movl	$0, -24(%rbp)
.LBB121_747:                            # %for.cond3623
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_601 Depth=2
                                        #       Parent Loop BB121_745 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB121_749 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB121_754
# %bb.748:                              # %for.body3626
                                        #   in Loop: Header=BB121_747 Depth=4
	movl	$0, -20(%rbp)
.LBB121_749:                            # %for.cond3627
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_601 Depth=2
                                        #       Parent Loop BB121_745 Depth=3
                                        #         Parent Loop BB121_747 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB121_752
# %bb.750:                              # %for.body3630
                                        #   in Loop: Header=BB121_749 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.751:                              # %for.inc3648
                                        #   in Loop: Header=BB121_749 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_749
.LBB121_752:                            # %for.end3650
                                        #   in Loop: Header=BB121_747 Depth=4
	jmp	.LBB121_753
.LBB121_753:                            # %for.inc3651
                                        #   in Loop: Header=BB121_747 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_747
.LBB121_754:                            # %for.end3653
                                        #   in Loop: Header=BB121_745 Depth=3
	jmp	.LBB121_755
.LBB121_755:                            # %for.inc3654
                                        #   in Loop: Header=BB121_745 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB121_745
.LBB121_756:                            # %for.end3656
                                        #   in Loop: Header=BB121_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB121_757:                            # %for.cond3657
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB121_759 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_764
# %bb.758:                              # %for.body3661
                                        #   in Loop: Header=BB121_757 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB121_759:                            # %for.cond3662
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_601 Depth=2
                                        #       Parent Loop BB121_757 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_762
# %bb.760:                              # %for.body3666
                                        #   in Loop: Header=BB121_759 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.761:                              # %for.inc3689
                                        #   in Loop: Header=BB121_759 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_759
.LBB121_762:                            # %for.end3691
                                        #   in Loop: Header=BB121_757 Depth=3
	jmp	.LBB121_763
.LBB121_763:                            # %for.inc3692
                                        #   in Loop: Header=BB121_757 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_757
.LBB121_764:                            # %for.end3694
                                        #   in Loop: Header=BB121_601 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB121_774
# %bb.765:                              # %if.then3697
                                        #   in Loop: Header=BB121_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB121_766:                            # %for.cond3698
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB121_768 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_773
# %bb.767:                              # %for.body3702
                                        #   in Loop: Header=BB121_766 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB121_768:                            # %for.cond3703
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_601 Depth=2
                                        #       Parent Loop BB121_766 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_771
# %bb.769:                              # %for.body3707
                                        #   in Loop: Header=BB121_768 Depth=4
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.770:                              # %for.inc3756
                                        #   in Loop: Header=BB121_768 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_768
.LBB121_771:                            # %for.end3758
                                        #   in Loop: Header=BB121_766 Depth=3
	jmp	.LBB121_772
.LBB121_772:                            # %for.inc3759
                                        #   in Loop: Header=BB121_766 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_766
.LBB121_773:                            # %for.end3761
                                        #   in Loop: Header=BB121_601 Depth=2
	jmp	.LBB121_774
.LBB121_774:                            # %if.end3762
                                        #   in Loop: Header=BB121_601 Depth=2
	jmp	.LBB121_775
.LBB121_775:                            # %if.end3763
                                        #   in Loop: Header=BB121_601 Depth=2
	cmpl	$0, -172(%rbp)
	je	.LBB121_777
# %bb.776:                              # %if.then3765
                                        #   in Loop: Header=BB121_601 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-172(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB121_777:                            # %if.end3769
                                        #   in Loop: Header=BB121_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	148(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	%eax, %ecx
	movl	%ecx, -104(%rbp)
	movq	img, %rax
	movl	144(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
	movl	%ecx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB121_778:                            # %for.cond3781
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB121_780 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_785
# %bb.779:                              # %for.body3785
                                        #   in Loop: Header=BB121_778 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB121_780:                            # %for.cond3786
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_601 Depth=2
                                        #       Parent Loop BB121_778 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_783
# %bb.781:                              # %for.body3790
                                        #   in Loop: Header=BB121_780 Depth=4
	movq	-400(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
# %bb.782:                              # %for.inc3795
                                        #   in Loop: Header=BB121_780 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_780
.LBB121_783:                            # %for.end3797
                                        #   in Loop: Header=BB121_778 Depth=3
	jmp	.LBB121_784
.LBB121_784:                            # %for.inc3798
                                        #   in Loop: Header=BB121_778 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_778
.LBB121_785:                            # %for.end3800
                                        #   in Loop: Header=BB121_601 Depth=2
	movl	-28(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB121_786:                            # %for.cond3802
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_601 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_789
# %bb.787:                              # %for.body3806
                                        #   in Loop: Header=BB121_786 Depth=3
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.788:                              # %for.inc3809
                                        #   in Loop: Header=BB121_786 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_786
.LBB121_789:                            # %for.end3811
                                        #   in Loop: Header=BB121_601 Depth=2
	cmpl	$3, -28(%rbp)
	jge	.LBB121_799
# %bb.790:                              # %if.then3814
                                        #   in Loop: Header=BB121_601 Depth=2
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB121_791:                            # %for.cond3819
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB121_793 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_798
# %bb.792:                              # %for.body3823
                                        #   in Loop: Header=BB121_791 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB121_793:                            # %for.cond3824
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_601 Depth=2
                                        #       Parent Loop BB121_791 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_796
# %bb.794:                              # %for.body3828
                                        #   in Loop: Header=BB121_793 Depth=4
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.795:                              # %for.inc3842
                                        #   in Loop: Header=BB121_793 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_793
.LBB121_796:                            # %for.end3844
                                        #   in Loop: Header=BB121_791 Depth=3
	jmp	.LBB121_797
.LBB121_797:                            # %for.inc3845
                                        #   in Loop: Header=BB121_791 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_791
.LBB121_798:                            # %for.end3847
                                        #   in Loop: Header=BB121_601 Depth=2
	jmp	.LBB121_799
.LBB121_799:                            # %if.end3848
                                        #   in Loop: Header=BB121_601 Depth=2
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movslq	-28(%rbp), %rax
	movswl	best8x8pdir+64(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	best8x8fwref+64(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	best8x8bwref+64(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	movq	cs_b8, %rdi
	callq	reset_coding_state
# %bb.800:                              # %for.inc3858
                                        #   in Loop: Header=BB121_601 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB121_601
.LBB121_801:                            # %for.end3860
                                        #   in Loop: Header=BB121_171 Depth=1
	jmp	.LBB121_802
.LBB121_802:                            # %if.end3861
                                        #   in Loop: Header=BB121_171 Depth=1
	movq	cs_mb, %rdi
	callq	reset_coding_state
	movl	$0, -20(%rbp)
.LBB121_803:                            # %for.cond3862
                                        #   Parent Loop BB121_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB121_805 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB121_810
# %bb.804:                              # %for.body3865
                                        #   in Loop: Header=BB121_803 Depth=2
	movl	$0, -24(%rbp)
.LBB121_805:                            # %for.cond3866
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_803 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB121_808
# %bb.806:                              # %for.body3869
                                        #   in Loop: Header=BB121_805 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.807:                              # %for.inc3888
                                        #   in Loop: Header=BB121_805 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_805
.LBB121_808:                            # %for.end3890
                                        #   in Loop: Header=BB121_803 Depth=2
	jmp	.LBB121_809
.LBB121_809:                            # %for.inc3891
                                        #   in Loop: Header=BB121_803 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_803
.LBB121_810:                            # %for.end3893
                                        #   in Loop: Header=BB121_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB121_825
# %bb.811:                              # %land.lhs.true3896
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	-144(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jl	.LBB121_813
# %bb.812:                              # %lor.lhs.false3899
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB121_825
.LBB121_813:                            # %if.then3902
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	$8, best_mode
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB121_823
# %bb.814:                              # %if.then3905
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB121_816
# %bb.815:                              # %if.then3908
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB121_822
.LBB121_816:                            # %if.else3910
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	-144(%rbp), %eax
	cmpl	cost8_8x8ts, %eax
	jge	.LBB121_818
# %bb.817:                              # %if.then3913
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB121_821
.LBB121_818:                            # %if.else3915
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	callq	GetBestTransformP8x8
	cmpl	$0, %eax
	jne	.LBB121_820
# %bb.819:                              # %if.then3920
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB121_820:                            # %if.end3922
                                        #   in Loop: Header=BB121_171 Depth=1
	jmp	.LBB121_821
.LBB121_821:                            # %if.end3923
                                        #   in Loop: Header=BB121_171 Depth=1
	jmp	.LBB121_822
.LBB121_822:                            # %if.end3924
                                        #   in Loop: Header=BB121_171 Depth=1
	jmp	.LBB121_824
.LBB121_823:                            # %if.else3925
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB121_824:                            # %if.end3927
                                        #   in Loop: Header=BB121_171 Depth=1
	jmp	.LBB121_825
.LBB121_825:                            # %if.end3928
                                        #   in Loop: Header=BB121_171 Depth=1
	jmp	.LBB121_827
.LBB121_826:                            # %if.else3929
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
.LBB121_827:                            # %if.end3930
                                        #   in Loop: Header=BB121_171 Depth=1
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB121_829
# %bb.828:                              # %lor.lhs.false3934
                                        #   in Loop: Header=BB121_171 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB121_830
.LBB121_829:                            # %if.then3938
                                        #   in Loop: Header=BB121_171 Depth=1
	movb	$0, %al
	callq	FindSkipModeMotionVector
.LBB121_830:                            # %if.end3939
                                        #   in Loop: Header=BB121_171 Depth=1
	jmp	.LBB121_832
.LBB121_831:                            # %if.else3940
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
.LBB121_832:                            # %if.end3941
                                        #   in Loop: Header=BB121_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB121_1083
# %bb.833:                              # %if.then3944
                                        #   in Loop: Header=BB121_171 Depth=1
	vmovsd	-472(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB121_978
# %bb.834:                              # %if.then3947
                                        #   in Loop: Header=BB121_171 Depth=1
	leaq	-276(%rbp), %rdi
	leaq	-268(%rbp), %rsi
	leaq	-308(%rbp), %rdx
	callq	IntraChromaPrediction
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
.LBB121_835:                            # %for.cond3949
                                        #   Parent Loop BB121_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB121_853 Depth 3
                                        #         Child Loop BB121_908 Depth 4
                                        #           Child Loop BB121_911 Depth 5
                                        #             Child Loop BB121_913 Depth 6
                                        #           Child Loop BB121_920 Depth 5
                                        #             Child Loop BB121_922 Depth 6
                                        #         Child Loop BB121_955 Depth 4
                                        #           Child Loop BB121_957 Depth 5
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jg	.LBB121_977
# %bb.836:                              # %for.body3953
                                        #   in Loop: Header=BB121_835 Depth=2
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB121_838
# %bb.837:                              # %land.lhs.true3956
                                        #   in Loop: Header=BB121_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	jne	.LBB121_846
.LBB121_838:                            # %lor.lhs.false3960
                                        #   in Loop: Header=BB121_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$2, 524(%rax)
	jne	.LBB121_840
# %bb.839:                              # %land.lhs.true3964
                                        #   in Loop: Header=BB121_835 Depth=2
	cmpl	$0, -276(%rbp)
	je	.LBB121_846
.LBB121_840:                            # %lor.lhs.false3966
                                        #   in Loop: Header=BB121_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$1, 524(%rax)
	jne	.LBB121_842
# %bb.841:                              # %land.lhs.true3970
                                        #   in Loop: Header=BB121_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB121_846
.LBB121_842:                            # %lor.lhs.false3972
                                        #   in Loop: Header=BB121_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jne	.LBB121_847
# %bb.843:                              # %land.lhs.true3976
                                        #   in Loop: Header=BB121_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB121_846
# %bb.844:                              # %lor.lhs.false3978
                                        #   in Loop: Header=BB121_835 Depth=2
	cmpl	$0, -276(%rbp)
	je	.LBB121_846
# %bb.845:                              # %lor.lhs.false3980
                                        #   in Loop: Header=BB121_835 Depth=2
	cmpl	$0, -308(%rbp)
	jne	.LBB121_847
.LBB121_846:                            # %if.then3982
                                        #   in Loop: Header=BB121_835 Depth=2
	jmp	.LBB121_976
.LBB121_847:                            # %if.end3983
                                        #   in Loop: Header=BB121_835 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB121_849
# %bb.848:                              # %if.then3986
                                        #   in Loop: Header=BB121_835 Depth=2
	movl	$11, -312(%rbp)
	jmp	.LBB121_850
.LBB121_849:                            # %if.else3987
                                        #   in Loop: Header=BB121_835 Depth=2
	movl	$8, -312(%rbp)
.LBB121_850:                            # %if.end3988
                                        #   in Loop: Header=BB121_835 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB121_852
# %bb.851:                              # %if.then3991
                                        #   in Loop: Header=BB121_835 Depth=2
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB121_852:                            # %if.end3994
                                        #   in Loop: Header=BB121_835 Depth=2
	movl	$0, -128(%rbp)
	movl	$0, -80(%rbp)
.LBB121_853:                            # %for.cond3995
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_835 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB121_908 Depth 4
                                        #           Child Loop BB121_911 Depth 5
                                        #             Child Loop BB121_913 Depth 6
                                        #           Child Loop BB121_920 Depth 5
                                        #             Child Loop BB121_922 Depth 6
                                        #         Child Loop BB121_955 Depth 4
                                        #           Child Loop BB121_957 Depth 5
	movl	-80(%rbp), %eax
	cmpl	-312(%rbp), %eax
	jge	.LBB121_975
# %bb.854:                              # %for.body3998
                                        #   in Loop: Header=BB121_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB121_868
# %bb.855:                              # %if.then4003
                                        #   in Loop: Header=BB121_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table_RCT(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$10, -32(%rbp)
	jne	.LBB121_857
# %bb.856:                              # %if.then4008
                                        #   in Loop: Header=BB121_853 Depth=3
	movl	-80(%rbp), %eax
	subl	$5, %eax
	movl	%eax, -124(%rbp)
.LBB121_857:                            # %if.end4010
                                        #   in Loop: Header=BB121_853 Depth=3
	cmpl	$10, -32(%rbp)
	jne	.LBB121_867
# %bb.858:                              # %land.lhs.true4013
                                        #   in Loop: Header=BB121_853 Depth=3
	cmpl	$0, -124(%rbp)
	jne	.LBB121_860
# %bb.859:                              # %land.lhs.true4016
                                        #   in Loop: Header=BB121_853 Depth=3
	cmpl	$0, -276(%rbp)
	je	.LBB121_866
.LBB121_860:                            # %lor.lhs.false4018
                                        #   in Loop: Header=BB121_853 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB121_862
# %bb.861:                              # %land.lhs.true4021
                                        #   in Loop: Header=BB121_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB121_866
.LBB121_862:                            # %lor.lhs.false4023
                                        #   in Loop: Header=BB121_853 Depth=3
	cmpl	$3, -124(%rbp)
	jne	.LBB121_867
# %bb.863:                              # %land.lhs.true4026
                                        #   in Loop: Header=BB121_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB121_866
# %bb.864:                              # %lor.lhs.false4028
                                        #   in Loop: Header=BB121_853 Depth=3
	cmpl	$0, -276(%rbp)
	je	.LBB121_866
# %bb.865:                              # %lor.lhs.false4030
                                        #   in Loop: Header=BB121_853 Depth=3
	cmpl	$0, -308(%rbp)
	jne	.LBB121_867
.LBB121_866:                            # %if.then4032
                                        #   in Loop: Header=BB121_853 Depth=3
	jmp	.LBB121_974
.LBB121_867:                            # %if.end4033
                                        #   in Loop: Header=BB121_853 Depth=3
	jmp	.LBB121_869
.LBB121_868:                            # %if.else4034
                                        #   in Loop: Header=BB121_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -124(%rbp)
.LBB121_869:                            # %if.end4037
                                        #   in Loop: Header=BB121_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB121_881
# %bb.870:                              # %land.lhs.true4040
                                        #   in Loop: Header=BB121_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB121_881
# %bb.871:                              # %if.then4044
                                        #   in Loop: Header=BB121_853 Depth=3
	movl	-128(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB121_878
# %bb.872:                              # %land.lhs.true4048
                                        #   in Loop: Header=BB121_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB121_878
# %bb.873:                              # %if.then4052
                                        #   in Loop: Header=BB121_853 Depth=3
	cmpl	$2, -128(%rbp)
	jne	.LBB121_877
# %bb.874:                              # %land.lhs.true4055
                                        #   in Loop: Header=BB121_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB121_877
# %bb.875:                              # %land.lhs.true4062
                                        #   in Loop: Header=BB121_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB121_877
# %bb.876:                              # %if.then4065
                                        #   in Loop: Header=BB121_853 Depth=3
	movl	-128(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -128(%rbp)
.LBB121_877:                            # %if.end4066
                                        #   in Loop: Header=BB121_853 Depth=3
	jmp	.LBB121_878
.LBB121_878:                            # %if.end4067
                                        #   in Loop: Header=BB121_853 Depth=3
	cmpl	$2, -128(%rbp)
	jge	.LBB121_880
# %bb.879:                              # %if.then4070
                                        #   in Loop: Header=BB121_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB121_880:                            # %if.end4072
                                        #   in Loop: Header=BB121_853 Depth=3
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -128(%rbp)
.LBB121_881:                            # %if.end4074
                                        #   in Loop: Header=BB121_853 Depth=3
	movq	img, %rax
	movl	$0, 72392(%rax)
	movq	input, %rax
	cmpl	$0, 1312(%rax)
	je	.LBB121_888
# %bb.882:                              # %land.lhs.true4076
                                        #   in Loop: Header=BB121_853 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB121_888
# %bb.883:                              # %if.then4080
                                        #   in Loop: Header=BB121_853 Depth=3
	cmpl	$10, -32(%rbp)
	jl	.LBB121_887
# %bb.884:                              # %land.lhs.true4083
                                        #   in Loop: Header=BB121_853 Depth=3
	cmpl	$0, best_mode
	jne	.LBB121_887
# %bb.885:                              # %land.lhs.true4086
                                        #   in Loop: Header=BB121_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB121_887
# %bb.886:                              # %if.then4089
                                        #   in Loop: Header=BB121_853 Depth=3
	movslq	-32(%rbp), %rax
	movl	$0, -384(%rbp,%rax,4)
.LBB121_887:                            # %if.end4092
                                        #   in Loop: Header=BB121_853 Depth=3
	jmp	.LBB121_888
.LBB121_888:                            # %if.end4093
                                        #   in Loop: Header=BB121_853 Depth=3
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB121_965
# %bb.889:                              # %if.then4097
                                        #   in Loop: Header=BB121_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB121_903
# %bb.890:                              # %if.then4102
                                        #   in Loop: Header=BB121_853 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB121_893
# %bb.891:                              # %land.lhs.true4105
                                        #   in Loop: Header=BB121_853 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB121_893
# %bb.892:                              # %if.then4108
                                        #   in Loop: Header=BB121_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB121_902
.LBB121_893:                            # %if.else4110
                                        #   in Loop: Header=BB121_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB121_897
# %bb.894:                              # %land.lhs.true4113
                                        #   in Loop: Header=BB121_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB121_897
# %bb.895:                              # %land.lhs.true4115
                                        #   in Loop: Header=BB121_853 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB121_897
# %bb.896:                              # %if.then4118
                                        #   in Loop: Header=BB121_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB121_901
.LBB121_897:                            # %if.else4120
                                        #   in Loop: Header=BB121_853 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB121_900
# %bb.898:                              # %land.lhs.true4123
                                        #   in Loop: Header=BB121_853 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB121_900
# %bb.899:                              # %if.then4126
                                        #   in Loop: Header=BB121_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB121_900:                            # %if.end4128
                                        #   in Loop: Header=BB121_853 Depth=3
	jmp	.LBB121_901
.LBB121_901:                            # %if.end4129
                                        #   in Loop: Header=BB121_853 Depth=3
	jmp	.LBB121_902
.LBB121_902:                            # %if.end4130
                                        #   in Loop: Header=BB121_853 Depth=3
	jmp	.LBB121_903
.LBB121_903:                            # %if.end4131
                                        #   in Loop: Header=BB121_853 Depth=3
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB121_907
# %bb.904:                              # %lor.lhs.false4135
                                        #   in Loop: Header=BB121_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB121_907
# %bb.905:                              # %lor.lhs.false4138
                                        #   in Loop: Header=BB121_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB121_907
# %bb.906:                              # %lor.lhs.false4142
                                        #   in Loop: Header=BB121_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB121_947
.LBB121_907:                            # %if.then4146
                                        #   in Loop: Header=BB121_853 Depth=3
	jmp	.LBB121_908
.LBB121_908:                            # %while.body
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_835 Depth=2
                                        #       Parent Loop BB121_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB121_911 Depth 5
                                        #             Child Loop BB121_913 Depth 6
                                        #           Child Loop BB121_920 Depth 5
                                        #             Child Loop BB121_922 Depth 6
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB121_929
# %bb.909:                              # %if.then4149
                                        #   in Loop: Header=BB121_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB121_919
# %bb.910:                              # %if.then4152
                                        #   in Loop: Header=BB121_908 Depth=4
	movl	$0, -20(%rbp)
.LBB121_911:                            # %for.cond4153
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_835 Depth=2
                                        #       Parent Loop BB121_853 Depth=3
                                        #         Parent Loop BB121_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB121_913 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB121_918
# %bb.912:                              # %for.body4156
                                        #   in Loop: Header=BB121_911 Depth=5
	movl	$0, -24(%rbp)
.LBB121_913:                            # %for.cond4157
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_835 Depth=2
                                        #       Parent Loop BB121_853 Depth=3
                                        #         Parent Loop BB121_908 Depth=4
                                        #           Parent Loop BB121_911 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB121_916
# %bb.914:                              # %for.body4160
                                        #   in Loop: Header=BB121_913 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.915:                              # %for.inc4180
                                        #   in Loop: Header=BB121_913 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_913
.LBB121_916:                            # %for.end4182
                                        #   in Loop: Header=BB121_911 Depth=5
	jmp	.LBB121_917
.LBB121_917:                            # %for.inc4183
                                        #   in Loop: Header=BB121_911 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_911
.LBB121_918:                            # %for.end4185
                                        #   in Loop: Header=BB121_908 Depth=4
	jmp	.LBB121_928
.LBB121_919:                            # %if.else4186
                                        #   in Loop: Header=BB121_908 Depth=4
	movl	$0, -20(%rbp)
.LBB121_920:                            # %for.cond4187
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_835 Depth=2
                                        #       Parent Loop BB121_853 Depth=3
                                        #         Parent Loop BB121_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB121_922 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB121_927
# %bb.921:                              # %for.body4190
                                        #   in Loop: Header=BB121_920 Depth=5
	movl	$0, -24(%rbp)
.LBB121_922:                            # %for.cond4191
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_835 Depth=2
                                        #       Parent Loop BB121_853 Depth=3
                                        #         Parent Loop BB121_908 Depth=4
                                        #           Parent Loop BB121_920 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB121_925
# %bb.923:                              # %for.body4194
                                        #   in Loop: Header=BB121_922 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.924:                              # %for.inc4213
                                        #   in Loop: Header=BB121_922 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_922
.LBB121_925:                            # %for.end4215
                                        #   in Loop: Header=BB121_920 Depth=5
	jmp	.LBB121_926
.LBB121_926:                            # %for.inc4216
                                        #   in Loop: Header=BB121_920 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_920
.LBB121_927:                            # %for.end4218
                                        #   in Loop: Header=BB121_908 Depth=4
	jmp	.LBB121_928
.LBB121_928:                            # %if.end4219
                                        #   in Loop: Header=BB121_908 Depth=4
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB121_929:                            # %if.end4220
                                        #   in Loop: Header=BB121_908 Depth=4
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB121_945
# %bb.930:                              # %if.then4224
                                        #   in Loop: Header=BB121_908 Depth=4
	cmpl	$1, -32(%rbp)
	jl	.LBB121_935
# %bb.931:                              # %land.lhs.true4227
                                        #   in Loop: Header=BB121_908 Depth=4
	cmpl	$3, -32(%rbp)
	jg	.LBB121_935
# %bb.932:                              # %land.lhs.true4230
                                        #   in Loop: Header=BB121_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB121_935
# %bb.933:                              # %if.then4234
                                        #   in Loop: Header=BB121_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB121_934:                            # %while.body.backedge
                                        #   in Loop: Header=BB121_908 Depth=4
	jmp	.LBB121_908
.LBB121_935:                            # %if.else4236
                                        #   in Loop: Header=BB121_908 Depth=4
	cmpl	$0, -32(%rbp)
	jne	.LBB121_940
# %bb.936:                              # %land.lhs.true4239
                                        #   in Loop: Header=BB121_908 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB121_940
# %bb.937:                              # %land.lhs.true4241
                                        #   in Loop: Header=BB121_908 Depth=4
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB121_940
# %bb.938:                              # %land.lhs.true4244
                                        #   in Loop: Header=BB121_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB121_940
# %bb.939:                              # %if.then4248
                                        #   in Loop: Header=BB121_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB121_934
.LBB121_940:                            # %if.else4250
                                        #   in Loop: Header=BB121_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB121_944
# %bb.941:                              # %land.lhs.true4253
                                        #   in Loop: Header=BB121_908 Depth=4
	cmpl	$0, -368(%rbp)
	je	.LBB121_944
# %bb.942:                              # %land.lhs.true4256
                                        #   in Loop: Header=BB121_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB121_944
# %bb.943:                              # %if.then4260
                                        #   in Loop: Header=BB121_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB121_934
.LBB121_944:                            # %if.else4262
                                        #   in Loop: Header=BB121_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB121_946
.LBB121_945:                            # %if.else4264
                                        #   in Loop: Header=BB121_853 Depth=3
	jmp	.LBB121_946
.LBB121_946:                            # %while.end
                                        #   in Loop: Header=BB121_853 Depth=3
	jmp	.LBB121_947
.LBB121_947:                            # %if.end4265
                                        #   in Loop: Header=BB121_853 Depth=3
	cmpl	$0, -384(%rbp)
	je	.LBB121_964
# %bb.948:                              # %land.lhs.true4268
                                        #   in Loop: Header=BB121_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB121_964
# %bb.949:                              # %land.lhs.true4270
                                        #   in Loop: Header=BB121_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB121_964
# %bb.950:                              # %land.lhs.true4273
                                        #   in Loop: Header=BB121_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB121_964
# %bb.951:                              # %land.lhs.true4276
                                        #   in Loop: Header=BB121_853 Depth=3
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB121_964
# %bb.952:                              # %land.lhs.true4281
                                        #   in Loop: Header=BB121_853 Depth=3
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB121_964
# %bb.953:                              # %if.then4283
                                        #   in Loop: Header=BB121_853 Depth=3
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB121_963
# %bb.954:                              # %if.then4287
                                        #   in Loop: Header=BB121_853 Depth=3
	movl	$0, -20(%rbp)
.LBB121_955:                            # %for.cond4288
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_835 Depth=2
                                        #       Parent Loop BB121_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB121_957 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB121_962
# %bb.956:                              # %for.body4291
                                        #   in Loop: Header=BB121_955 Depth=4
	movl	$0, -24(%rbp)
.LBB121_957:                            # %for.cond4292
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_835 Depth=2
                                        #       Parent Loop BB121_853 Depth=3
                                        #         Parent Loop BB121_955 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB121_960
# %bb.958:                              # %for.body4295
                                        #   in Loop: Header=BB121_957 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.959:                              # %for.inc4314
                                        #   in Loop: Header=BB121_957 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_957
.LBB121_960:                            # %for.end4316
                                        #   in Loop: Header=BB121_955 Depth=4
	jmp	.LBB121_961
.LBB121_961:                            # %for.inc4317
                                        #   in Loop: Header=BB121_955 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_955
.LBB121_962:                            # %for.end4319
                                        #   in Loop: Header=BB121_853 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB121_963:                            # %if.end4320
                                        #   in Loop: Header=BB121_853 Depth=3
	jmp	.LBB121_964
.LBB121_964:                            # %if.end4321
                                        #   in Loop: Header=BB121_853 Depth=3
	jmp	.LBB121_965
.LBB121_965:                            # %if.end4322
                                        #   in Loop: Header=BB121_853 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB121_973
# %bb.966:                              # %land.lhs.true4325
                                        #   in Loop: Header=BB121_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB121_973
# %bb.967:                              # %if.then4329
                                        #   in Loop: Header=BB121_853 Depth=3
	cmpl	$2, -128(%rbp)
	jne	.LBB121_972
# %bb.968:                              # %land.lhs.true4332
                                        #   in Loop: Header=BB121_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB121_972
# %bb.969:                              # %land.lhs.true4339
                                        #   in Loop: Header=BB121_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB121_972
# %bb.970:                              # %land.lhs.true4342
                                        #   in Loop: Header=BB121_853 Depth=3
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB121_972
# %bb.971:                              # %if.then4346
                                        #   in Loop: Header=BB121_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB121_972:                            # %if.end4356
                                        #   in Loop: Header=BB121_853 Depth=3
	jmp	.LBB121_973
.LBB121_973:                            # %if.end4357
                                        #   in Loop: Header=BB121_853 Depth=3
	jmp	.LBB121_974
.LBB121_974:                            # %for.inc4358
                                        #   in Loop: Header=BB121_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB121_853
.LBB121_975:                            # %for.end4360
                                        #   in Loop: Header=BB121_835 Depth=2
	jmp	.LBB121_976
.LBB121_976:                            # %for.inc4361
                                        #   in Loop: Header=BB121_835 Depth=2
	movq	-48(%rbp), %rax
	movl	524(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 524(%rax)
	jmp	.LBB121_835
.LBB121_977:                            # %for.end4364
                                        #   in Loop: Header=BB121_171 Depth=1
	jmp	.LBB121_1082
.LBB121_978:                            # %if.else4365
                                        #   in Loop: Header=BB121_171 Depth=1
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB121_980
# %bb.979:                              # %if.then4368
                                        #   in Loop: Header=BB121_171 Depth=1
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB121_980:                            # %if.end4371
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	$0, -128(%rbp)
	movl	$0, -80(%rbp)
.LBB121_981:                            # %for.cond4372
                                        #   Parent Loop BB121_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB121_1014 Depth 3
                                        #         Child Loop BB121_1017 Depth 4
                                        #           Child Loop BB121_1019 Depth 5
                                        #         Child Loop BB121_1026 Depth 4
                                        #           Child Loop BB121_1028 Depth 5
                                        #       Child Loop BB121_1061 Depth 3
                                        #         Child Loop BB121_1063 Depth 4
	cmpl	$8, -80(%rbp)
	jge	.LBB121_1081
# %bb.982:                              # %for.body4375
                                        #   in Loop: Header=BB121_981 Depth=2
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB121_994
# %bb.983:                              # %land.lhs.true4380
                                        #   in Loop: Header=BB121_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB121_994
# %bb.984:                              # %if.then4384
                                        #   in Loop: Header=BB121_981 Depth=2
	movl	-128(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB121_991
# %bb.985:                              # %land.lhs.true4388
                                        #   in Loop: Header=BB121_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB121_991
# %bb.986:                              # %if.then4392
                                        #   in Loop: Header=BB121_981 Depth=2
	cmpl	$2, -128(%rbp)
	jne	.LBB121_990
# %bb.987:                              # %land.lhs.true4395
                                        #   in Loop: Header=BB121_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB121_990
# %bb.988:                              # %land.lhs.true4402
                                        #   in Loop: Header=BB121_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB121_990
# %bb.989:                              # %if.then4405
                                        #   in Loop: Header=BB121_981 Depth=2
	movl	-128(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -128(%rbp)
.LBB121_990:                            # %if.end4407
                                        #   in Loop: Header=BB121_981 Depth=2
	jmp	.LBB121_991
.LBB121_991:                            # %if.end4408
                                        #   in Loop: Header=BB121_981 Depth=2
	cmpl	$2, -128(%rbp)
	jge	.LBB121_993
# %bb.992:                              # %if.then4411
                                        #   in Loop: Header=BB121_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB121_993:                            # %if.end4413
                                        #   in Loop: Header=BB121_981 Depth=2
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -128(%rbp)
.LBB121_994:                            # %if.end4415
                                        #   in Loop: Header=BB121_981 Depth=2
	movq	img, %rax
	movl	$0, 72392(%rax)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB121_1071
# %bb.995:                              # %if.then4420
                                        #   in Loop: Header=BB121_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB121_1009
# %bb.996:                              # %if.then4425
                                        #   in Loop: Header=BB121_981 Depth=2
	cmpl	$1, -32(%rbp)
	jl	.LBB121_999
# %bb.997:                              # %land.lhs.true4428
                                        #   in Loop: Header=BB121_981 Depth=2
	cmpl	$3, -32(%rbp)
	jg	.LBB121_999
# %bb.998:                              # %if.then4431
                                        #   in Loop: Header=BB121_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB121_1008
.LBB121_999:                            # %if.else4433
                                        #   in Loop: Header=BB121_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB121_1003
# %bb.1000:                             # %land.lhs.true4436
                                        #   in Loop: Header=BB121_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB121_1003
# %bb.1001:                             # %land.lhs.true4438
                                        #   in Loop: Header=BB121_981 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB121_1003
# %bb.1002:                             # %if.then4441
                                        #   in Loop: Header=BB121_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB121_1007
.LBB121_1003:                           # %if.else4443
                                        #   in Loop: Header=BB121_981 Depth=2
	cmpl	$8, -32(%rbp)
	jne	.LBB121_1006
# %bb.1004:                             # %land.lhs.true4446
                                        #   in Loop: Header=BB121_981 Depth=2
	cmpl	$0, -368(%rbp)
	je	.LBB121_1006
# %bb.1005:                             # %if.then4449
                                        #   in Loop: Header=BB121_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB121_1006:                           # %if.end4451
                                        #   in Loop: Header=BB121_981 Depth=2
	jmp	.LBB121_1007
.LBB121_1007:                           # %if.end4452
                                        #   in Loop: Header=BB121_981 Depth=2
	jmp	.LBB121_1008
.LBB121_1008:                           # %if.end4453
                                        #   in Loop: Header=BB121_981 Depth=2
	jmp	.LBB121_1009
.LBB121_1009:                           # %if.end4454
                                        #   in Loop: Header=BB121_981 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB121_1013
# %bb.1010:                             # %lor.lhs.false4458
                                        #   in Loop: Header=BB121_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB121_1013
# %bb.1011:                             # %lor.lhs.false4462
                                        #   in Loop: Header=BB121_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB121_1013
# %bb.1012:                             # %lor.lhs.false4466
                                        #   in Loop: Header=BB121_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB121_1053
.LBB121_1013:                           # %if.then4470
                                        #   in Loop: Header=BB121_981 Depth=2
	jmp	.LBB121_1014
.LBB121_1014:                           # %while.body4471
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB121_1017 Depth 4
                                        #           Child Loop BB121_1019 Depth 5
                                        #         Child Loop BB121_1026 Depth 4
                                        #           Child Loop BB121_1028 Depth 5
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB121_1035
# %bb.1015:                             # %if.then4474
                                        #   in Loop: Header=BB121_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB121_1025
# %bb.1016:                             # %if.then4477
                                        #   in Loop: Header=BB121_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB121_1017:                           # %for.cond4478
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_981 Depth=2
                                        #       Parent Loop BB121_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB121_1019 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB121_1024
# %bb.1018:                             # %for.body4481
                                        #   in Loop: Header=BB121_1017 Depth=4
	movl	$0, -24(%rbp)
.LBB121_1019:                           # %for.cond4482
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_981 Depth=2
                                        #       Parent Loop BB121_1014 Depth=3
                                        #         Parent Loop BB121_1017 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB121_1022
# %bb.1020:                             # %for.body4485
                                        #   in Loop: Header=BB121_1019 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1021:                             # %for.inc4505
                                        #   in Loop: Header=BB121_1019 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_1019
.LBB121_1022:                           # %for.end4507
                                        #   in Loop: Header=BB121_1017 Depth=4
	jmp	.LBB121_1023
.LBB121_1023:                           # %for.inc4508
                                        #   in Loop: Header=BB121_1017 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_1017
.LBB121_1024:                           # %for.end4510
                                        #   in Loop: Header=BB121_1014 Depth=3
	jmp	.LBB121_1034
.LBB121_1025:                           # %if.else4511
                                        #   in Loop: Header=BB121_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB121_1026:                           # %for.cond4512
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_981 Depth=2
                                        #       Parent Loop BB121_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB121_1028 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB121_1033
# %bb.1027:                             # %for.body4515
                                        #   in Loop: Header=BB121_1026 Depth=4
	movl	$0, -24(%rbp)
.LBB121_1028:                           # %for.cond4516
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_981 Depth=2
                                        #       Parent Loop BB121_1014 Depth=3
                                        #         Parent Loop BB121_1026 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB121_1031
# %bb.1029:                             # %for.body4519
                                        #   in Loop: Header=BB121_1028 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1030:                             # %for.inc4538
                                        #   in Loop: Header=BB121_1028 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_1028
.LBB121_1031:                           # %for.end4540
                                        #   in Loop: Header=BB121_1026 Depth=4
	jmp	.LBB121_1032
.LBB121_1032:                           # %for.inc4541
                                        #   in Loop: Header=BB121_1026 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_1026
.LBB121_1033:                           # %for.end4543
                                        #   in Loop: Header=BB121_1014 Depth=3
	jmp	.LBB121_1034
.LBB121_1034:                           # %if.end4544
                                        #   in Loop: Header=BB121_1014 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB121_1035:                           # %if.end4545
                                        #   in Loop: Header=BB121_1014 Depth=3
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB121_1051
# %bb.1036:                             # %if.then4549
                                        #   in Loop: Header=BB121_1014 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB121_1041
# %bb.1037:                             # %land.lhs.true4552
                                        #   in Loop: Header=BB121_1014 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB121_1041
# %bb.1038:                             # %land.lhs.true4555
                                        #   in Loop: Header=BB121_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB121_1041
# %bb.1039:                             # %if.then4559
                                        #   in Loop: Header=BB121_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB121_1040:                           # %while.body4471.backedge
                                        #   in Loop: Header=BB121_1014 Depth=3
	jmp	.LBB121_1014
.LBB121_1041:                           # %if.else4561
                                        #   in Loop: Header=BB121_1014 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB121_1046
# %bb.1042:                             # %land.lhs.true4564
                                        #   in Loop: Header=BB121_1014 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB121_1046
# %bb.1043:                             # %land.lhs.true4566
                                        #   in Loop: Header=BB121_1014 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB121_1046
# %bb.1044:                             # %land.lhs.true4569
                                        #   in Loop: Header=BB121_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB121_1046
# %bb.1045:                             # %if.then4573
                                        #   in Loop: Header=BB121_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB121_1040
.LBB121_1046:                           # %if.else4575
                                        #   in Loop: Header=BB121_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB121_1050
# %bb.1047:                             # %land.lhs.true4578
                                        #   in Loop: Header=BB121_1014 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB121_1050
# %bb.1048:                             # %land.lhs.true4581
                                        #   in Loop: Header=BB121_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB121_1050
# %bb.1049:                             # %if.then4585
                                        #   in Loop: Header=BB121_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB121_1040
.LBB121_1050:                           # %if.else4587
                                        #   in Loop: Header=BB121_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB121_1052
.LBB121_1051:                           # %if.else4589
                                        #   in Loop: Header=BB121_981 Depth=2
	jmp	.LBB121_1052
.LBB121_1052:                           # %while.end4590
                                        #   in Loop: Header=BB121_981 Depth=2
	jmp	.LBB121_1053
.LBB121_1053:                           # %if.end4591
                                        #   in Loop: Header=BB121_981 Depth=2
	cmpl	$0, -384(%rbp)
	je	.LBB121_1070
# %bb.1054:                             # %land.lhs.true4594
                                        #   in Loop: Header=BB121_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB121_1070
# %bb.1055:                             # %land.lhs.true4596
                                        #   in Loop: Header=BB121_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB121_1070
# %bb.1056:                             # %land.lhs.true4599
                                        #   in Loop: Header=BB121_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB121_1070
# %bb.1057:                             # %land.lhs.true4602
                                        #   in Loop: Header=BB121_981 Depth=2
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB121_1070
# %bb.1058:                             # %land.lhs.true4607
                                        #   in Loop: Header=BB121_981 Depth=2
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB121_1070
# %bb.1059:                             # %if.then4610
                                        #   in Loop: Header=BB121_981 Depth=2
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB121_1069
# %bb.1060:                             # %if.then4614
                                        #   in Loop: Header=BB121_981 Depth=2
	movl	$0, -20(%rbp)
.LBB121_1061:                           # %for.cond4615
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB121_1063 Depth 4
	cmpl	$16, -20(%rbp)
	jge	.LBB121_1068
# %bb.1062:                             # %for.body4618
                                        #   in Loop: Header=BB121_1061 Depth=3
	movl	$0, -24(%rbp)
.LBB121_1063:                           # %for.cond4619
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_981 Depth=2
                                        #       Parent Loop BB121_1061 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -24(%rbp)
	jge	.LBB121_1066
# %bb.1064:                             # %for.body4622
                                        #   in Loop: Header=BB121_1063 Depth=4
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1065:                             # %for.inc4641
                                        #   in Loop: Header=BB121_1063 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_1063
.LBB121_1066:                           # %for.end4643
                                        #   in Loop: Header=BB121_1061 Depth=3
	jmp	.LBB121_1067
.LBB121_1067:                           # %for.inc4644
                                        #   in Loop: Header=BB121_1061 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_1061
.LBB121_1068:                           # %for.end4646
                                        #   in Loop: Header=BB121_981 Depth=2
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB121_1069:                           # %if.end4647
                                        #   in Loop: Header=BB121_981 Depth=2
	jmp	.LBB121_1070
.LBB121_1070:                           # %if.end4648
                                        #   in Loop: Header=BB121_981 Depth=2
	jmp	.LBB121_1071
.LBB121_1071:                           # %if.end4649
                                        #   in Loop: Header=BB121_981 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB121_1079
# %bb.1072:                             # %land.lhs.true4652
                                        #   in Loop: Header=BB121_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB121_1079
# %bb.1073:                             # %if.then4656
                                        #   in Loop: Header=BB121_981 Depth=2
	cmpl	$2, -128(%rbp)
	jne	.LBB121_1078
# %bb.1074:                             # %land.lhs.true4659
                                        #   in Loop: Header=BB121_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB121_1078
# %bb.1075:                             # %land.lhs.true4666
                                        #   in Loop: Header=BB121_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB121_1078
# %bb.1076:                             # %land.lhs.true4669
                                        #   in Loop: Header=BB121_981 Depth=2
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB121_1078
# %bb.1077:                             # %if.then4673
                                        #   in Loop: Header=BB121_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB121_1078:                           # %if.end4683
                                        #   in Loop: Header=BB121_981 Depth=2
	jmp	.LBB121_1079
.LBB121_1079:                           # %if.end4684
                                        #   in Loop: Header=BB121_981 Depth=2
	jmp	.LBB121_1080
.LBB121_1080:                           # %for.inc4685
                                        #   in Loop: Header=BB121_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB121_981
.LBB121_1081:                           # %for.end4687
                                        #   in Loop: Header=BB121_171 Depth=1
	jmp	.LBB121_1082
.LBB121_1082:                           # %if.end4688
                                        #   in Loop: Header=BB121_171 Depth=1
	jmp	.LBB121_1284
.LBB121_1083:                           # %if.else4689
                                        #   in Loop: Header=BB121_171 Depth=1
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -228(%rbp)
	movq	-48(%rbp), %rax
	movl	576(%rax), %eax
	movl	%eax, -320(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB121_1085
# %bb.1084:                             # %if.then4694
                                        #   in Loop: Header=BB121_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB121_1085:                           # %if.end4695
                                        #   in Loop: Header=BB121_171 Depth=1
	cmpl	$0, -384(%rbp)
	je	.LBB121_1123
# %bb.1086:                             # %land.lhs.true4698
                                        #   in Loop: Header=BB121_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB121_1123
# %bb.1087:                             # %if.then4700
                                        #   in Loop: Header=BB121_171 Depth=1
	cmpl	$0, -260(%rbp)
	je	.LBB121_1100
# %bb.1088:                             # %if.then4702
                                        #   in Loop: Header=BB121_171 Depth=1
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB121_1090
	jmp	.LBB121_1089
.LBB121_1089:                           # %if.then4702
                                        #   in Loop: Header=BB121_171 Depth=1
	subl	$2, %eax
	je	.LBB121_1097
	jmp	.LBB121_1098
.LBB121_1090:                           # %sw.bb4704
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	-208(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jl	.LBB121_1094
# %bb.1091:                             # %lor.lhs.false4707
                                        #   in Loop: Header=BB121_171 Depth=1
	cmpl	$0, -364(%rbp)
	je	.LBB121_1094
# %bb.1092:                             # %land.lhs.true4710
                                        #   in Loop: Header=BB121_171 Depth=1
	cmpl	$0, -360(%rbp)
	je	.LBB121_1094
# %bb.1093:                             # %land.lhs.true4713
                                        #   in Loop: Header=BB121_171 Depth=1
	cmpl	$0, -356(%rbp)
	jne	.LBB121_1095
.LBB121_1094:                           # %if.then4716
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	-208(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB121_1096
.LBB121_1095:                           # %if.else4717
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB121_1096:                           # %if.end4718
                                        #   in Loop: Header=BB121_171 Depth=1
	jmp	.LBB121_1099
.LBB121_1097:                           # %sw.bb4719
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	-208(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB121_1099
.LBB121_1098:                           # %sw.default4720
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB121_1099:                           # %sw.epilog4721
                                        #   in Loop: Header=BB121_171 Depth=1
	jmp	.LBB121_1101
.LBB121_1100:                           # %if.else4722
                                        #   in Loop: Header=BB121_171 Depth=1
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	Get_Direct_CostMB
	movl	%eax, -60(%rbp)
.LBB121_1101:                           # %if.end4724
                                        #   in Loop: Header=BB121_171 Depth=1
	vmovsd	.LCPI121_17(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI121_18(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-60(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB121_1121
# %bb.1102:                             # %if.then4731
                                        #   in Loop: Header=BB121_171 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB121_1111
# %bb.1103:                             # %land.lhs.true4734
                                        #   in Loop: Header=BB121_171 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB121_1111
# %bb.1104:                             # %if.then4737
                                        #   in Loop: Header=BB121_171 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB121_1106
# %bb.1105:                             # %if.then4741
                                        #   in Loop: Header=BB121_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB121_1110
.LBB121_1106:                           # %if.else4743
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	-208(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB121_1108
# %bb.1107:                             # %if.then4746
                                        #   in Loop: Header=BB121_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB121_1109
.LBB121_1108:                           # %if.else4748
                                        #   in Loop: Header=BB121_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB121_1109:                           # %if.end4750
                                        #   in Loop: Header=BB121_171 Depth=1
	jmp	.LBB121_1110
.LBB121_1110:                           # %if.end4751
                                        #   in Loop: Header=BB121_171 Depth=1
	jmp	.LBB121_1112
.LBB121_1111:                           # %if.else4752
                                        #   in Loop: Header=BB121_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB121_1112:                           # %if.end4754
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	$0, -20(%rbp)
.LBB121_1113:                           # %for.cond4755
                                        #   Parent Loop BB121_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB121_1115 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB121_1120
# %bb.1114:                             # %for.body4758
                                        #   in Loop: Header=BB121_1113 Depth=2
	movl	$0, -24(%rbp)
.LBB121_1115:                           # %for.cond4759
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_1113 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB121_1118
# %bb.1116:                             # %for.body4762
                                        #   in Loop: Header=BB121_1115 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1117:                             # %for.inc4783
                                        #   in Loop: Header=BB121_1115 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_1115
.LBB121_1118:                           # %for.end4785
                                        #   in Loop: Header=BB121_1113 Depth=2
	jmp	.LBB121_1119
.LBB121_1119:                           # %for.inc4786
                                        #   in Loop: Header=BB121_1113 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_1113
.LBB121_1120:                           # %for.end4788
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, best_mode
	jmp	.LBB121_1122
.LBB121_1121:                           # %if.else4789
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-320(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB121_1122:                           # %if.end4792
                                        #   in Loop: Header=BB121_171 Depth=1
	jmp	.LBB121_1123
.LBB121_1123:                           # %if.end4793
                                        #   in Loop: Header=BB121_171 Depth=1
	cmpl	$0, -332(%rbp)
	je	.LBB121_1170
# %bb.1124:                             # %if.then4796
                                        #   in Loop: Header=BB121_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$13, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movl	%eax, -180(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB121_1168
# %bb.1125:                             # %if.then4802
                                        #   in Loop: Header=BB121_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB121_1149
# %bb.1126:                             # %if.then4805
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	$0, -20(%rbp)
.LBB121_1127:                           # %for.cond4806
                                        #   Parent Loop BB121_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB121_1129 Depth 3
                                        #         Child Loop BB121_1131 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB121_1140
# %bb.1128:                             # %for.body4809
                                        #   in Loop: Header=BB121_1127 Depth=2
	movl	$0, -24(%rbp)
.LBB121_1129:                           # %for.cond4810
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_1127 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB121_1131 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB121_1138
# %bb.1130:                             # %for.body4813
                                        #   in Loop: Header=BB121_1129 Depth=3
	movl	$0, -56(%rbp)
.LBB121_1131:                           # %for.cond4814
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_1127 Depth=2
                                        #       Parent Loop BB121_1129 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB121_1136
# %bb.1132:                             # %for.body4817
                                        #   in Loop: Header=BB121_1131 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB121_1134
# %bb.1133:                             # %if.then4825
                                        #   in Loop: Header=BB121_1131 Depth=4
	movl	$2, -132(%rbp)
.LBB121_1134:                           # %if.end4826
                                        #   in Loop: Header=BB121_1131 Depth=4
	jmp	.LBB121_1135
.LBB121_1135:                           # %for.inc4827
                                        #   in Loop: Header=BB121_1131 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB121_1131
.LBB121_1136:                           # %for.end4829
                                        #   in Loop: Header=BB121_1129 Depth=3
	jmp	.LBB121_1137
.LBB121_1137:                           # %for.inc4830
                                        #   in Loop: Header=BB121_1129 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_1129
.LBB121_1138:                           # %for.end4832
                                        #   in Loop: Header=BB121_1127 Depth=2
	jmp	.LBB121_1139
.LBB121_1139:                           # %for.inc4833
                                        #   in Loop: Header=BB121_1127 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_1127
.LBB121_1140:                           # %for.end4835
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-180(%rbp), %eax
	movl	%eax, -180(%rbp)
	movl	$0, -24(%rbp)
.LBB121_1141:                           # %for.cond4840
                                        #   Parent Loop BB121_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB121_1143 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB121_1148
# %bb.1142:                             # %for.body4843
                                        #   in Loop: Header=BB121_1141 Depth=2
	movl	$0, -20(%rbp)
.LBB121_1143:                           # %for.cond4844
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_1141 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB121_1146
# %bb.1144:                             # %for.body4847
                                        #   in Loop: Header=BB121_1143 Depth=3
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgU, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgV, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1145:                             # %for.inc4875
                                        #   in Loop: Header=BB121_1143 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_1143
.LBB121_1146:                           # %for.end4877
                                        #   in Loop: Header=BB121_1141 Depth=2
	jmp	.LBB121_1147
.LBB121_1147:                           # %for.inc4878
                                        #   in Loop: Header=BB121_1141 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_1141
.LBB121_1148:                           # %for.end4880
                                        #   in Loop: Header=BB121_171 Depth=1
	jmp	.LBB121_1149
.LBB121_1149:                           # %if.end4881
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	-180(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB121_1151
# %bb.1150:                             # %if.then4886
                                        #   in Loop: Header=BB121_171 Depth=1
	movq	cofAC, %rax
	movq	%rax, -392(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-392(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB121_1151:                           # %if.end4889
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	$0, -24(%rbp)
.LBB121_1152:                           # %for.cond4890
                                        #   Parent Loop BB121_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB121_1154 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB121_1159
# %bb.1153:                             # %for.body4893
                                        #   in Loop: Header=BB121_1152 Depth=2
	movl	$0, -20(%rbp)
.LBB121_1154:                           # %for.cond4894
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_1152 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB121_1157
# %bb.1155:                             # %for.body4897
                                        #   in Loop: Header=BB121_1154 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgY, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1156:                             # %for.inc4911
                                        #   in Loop: Header=BB121_1154 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_1154
.LBB121_1157:                           # %for.end4913
                                        #   in Loop: Header=BB121_1152 Depth=2
	jmp	.LBB121_1158
.LBB121_1158:                           # %for.inc4914
                                        #   in Loop: Header=BB121_1152 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_1152
.LBB121_1159:                           # %for.end4916
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	$0, -20(%rbp)
.LBB121_1160:                           # %for.cond4917
                                        #   Parent Loop BB121_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB121_1162 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB121_1167
# %bb.1161:                             # %for.body4920
                                        #   in Loop: Header=BB121_1160 Depth=2
	movl	$0, -24(%rbp)
.LBB121_1162:                           # %for.cond4921
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_1160 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB121_1165
# %bb.1163:                             # %for.body4924
                                        #   in Loop: Header=BB121_1162 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1164:                             # %for.inc4945
                                        #   in Loop: Header=BB121_1162 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_1162
.LBB121_1165:                           # %for.end4947
                                        #   in Loop: Header=BB121_1160 Depth=2
	jmp	.LBB121_1166
.LBB121_1166:                           # %for.inc4948
                                        #   in Loop: Header=BB121_1160 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_1160
.LBB121_1167:                           # %for.end4950
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$13, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -228(%rbp)
	jmp	.LBB121_1169
.LBB121_1168:                           # %if.else4952
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB121_1169:                           # %if.end4954
                                        #   in Loop: Header=BB121_171 Depth=1
	jmp	.LBB121_1170
.LBB121_1170:                           # %if.end4955
                                        #   in Loop: Header=BB121_171 Depth=1
	cmpl	$0, -348(%rbp)
	je	.LBB121_1199
# %bb.1171:                             # %if.then4958
                                        #   in Loop: Header=BB121_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$9, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movl	%eax, -180(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB121_1197
# %bb.1172:                             # %if.then4964
                                        #   in Loop: Header=BB121_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB121_1188
# %bb.1173:                             # %if.then4967
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	$0, -20(%rbp)
.LBB121_1174:                           # %for.cond4968
                                        #   Parent Loop BB121_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB121_1176 Depth 3
                                        #         Child Loop BB121_1178 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB121_1187
# %bb.1175:                             # %for.body4971
                                        #   in Loop: Header=BB121_1174 Depth=2
	movl	$0, -24(%rbp)
.LBB121_1176:                           # %for.cond4972
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_1174 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB121_1178 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB121_1185
# %bb.1177:                             # %for.body4975
                                        #   in Loop: Header=BB121_1176 Depth=3
	movl	$0, -56(%rbp)
.LBB121_1178:                           # %for.cond4976
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_1174 Depth=2
                                        #       Parent Loop BB121_1176 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB121_1183
# %bb.1179:                             # %for.body4979
                                        #   in Loop: Header=BB121_1178 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB121_1181
# %bb.1180:                             # %if.then4987
                                        #   in Loop: Header=BB121_1178 Depth=4
	movl	$2, -132(%rbp)
.LBB121_1181:                           # %if.end4988
                                        #   in Loop: Header=BB121_1178 Depth=4
	jmp	.LBB121_1182
.LBB121_1182:                           # %for.inc4989
                                        #   in Loop: Header=BB121_1178 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB121_1178
.LBB121_1183:                           # %for.end4991
                                        #   in Loop: Header=BB121_1176 Depth=3
	jmp	.LBB121_1184
.LBB121_1184:                           # %for.inc4992
                                        #   in Loop: Header=BB121_1176 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_1176
.LBB121_1185:                           # %for.end4994
                                        #   in Loop: Header=BB121_1174 Depth=2
	jmp	.LBB121_1186
.LBB121_1186:                           # %for.inc4995
                                        #   in Loop: Header=BB121_1174 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_1174
.LBB121_1187:                           # %for.end4997
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-180(%rbp), %eax
	movl	%eax, -180(%rbp)
.LBB121_1188:                           # %if.end5002
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	-180(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movl	$0, -20(%rbp)
.LBB121_1189:                           # %for.cond5004
                                        #   Parent Loop BB121_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB121_1191 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB121_1196
# %bb.1190:                             # %for.body5007
                                        #   in Loop: Header=BB121_1189 Depth=2
	movl	$0, -24(%rbp)
.LBB121_1191:                           # %for.cond5008
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_1189 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB121_1194
# %bb.1192:                             # %for.body5011
                                        #   in Loop: Header=BB121_1191 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1193:                             # %for.inc5032
                                        #   in Loop: Header=BB121_1191 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_1191
.LBB121_1194:                           # %for.end5034
                                        #   in Loop: Header=BB121_1189 Depth=2
	jmp	.LBB121_1195
.LBB121_1195:                           # %for.inc5035
                                        #   in Loop: Header=BB121_1189 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_1189
.LBB121_1196:                           # %for.end5037
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$9, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -228(%rbp)
	jmp	.LBB121_1198
.LBB121_1197:                           # %if.else5039
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movq	cofAC, %rax
	movq	%rax, -392(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-392(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB121_1198:                           # %if.end5043
                                        #   in Loop: Header=BB121_171 Depth=1
	jmp	.LBB121_1199
.LBB121_1199:                           # %if.end5044
                                        #   in Loop: Header=BB121_171 Depth=1
	cmpl	$0, -344(%rbp)
	je	.LBB121_1283
# %bb.1200:                             # %if.then5047
                                        #   in Loop: Header=BB121_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movb	$0, %al
	callq	intrapred_luma_16x16
	leaq	-124(%rbp), %rdi
	callq	find_sad_16x16
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB121_1281
# %bb.1201:                             # %if.then5052
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	$0, -20(%rbp)
.LBB121_1202:                           # %for.cond5053
                                        #   Parent Loop BB121_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB121_1204 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB121_1209
# %bb.1203:                             # %for.body5056
                                        #   in Loop: Header=BB121_1202 Depth=2
	movl	$0, -24(%rbp)
.LBB121_1204:                           # %for.cond5057
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_1202 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB121_1207
# %bb.1205:                             # %for.body5060
                                        #   in Loop: Header=BB121_1204 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-124(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1206:                             # %for.inc5082
                                        #   in Loop: Header=BB121_1204 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_1204
.LBB121_1207:                           # %for.end5084
                                        #   in Loop: Header=BB121_1202 Depth=2
	jmp	.LBB121_1208
.LBB121_1208:                           # %for.inc5085
                                        #   in Loop: Header=BB121_1202 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_1202
.LBB121_1209:                           # %for.end5087
                                        #   in Loop: Header=BB121_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB121_1219
# %bb.1210:                             # %if.then5090
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	$0, -24(%rbp)
.LBB121_1211:                           # %for.cond5091
                                        #   Parent Loop BB121_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB121_1213 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB121_1218
# %bb.1212:                             # %for.body5094
                                        #   in Loop: Header=BB121_1211 Depth=2
	movl	$0, -20(%rbp)
.LBB121_1213:                           # %for.cond5095
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_1211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB121_1216
# %bb.1214:                             # %for.body5098
                                        #   in Loop: Header=BB121_1213 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -188(%rbp)
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-124(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -220(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -224(%rbp)
	movl	-224(%rbp), %eax
	subl	-188(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-188(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -256(%rbp)
	movl	-220(%rbp), %eax
	subl	-256(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-256(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1215:                             # %for.inc5192
                                        #   in Loop: Header=BB121_1213 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_1213
.LBB121_1216:                           # %for.end5194
                                        #   in Loop: Header=BB121_1211 Depth=2
	jmp	.LBB121_1217
.LBB121_1217:                           # %for.inc5195
                                        #   in Loop: Header=BB121_1211 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_1211
.LBB121_1218:                           # %for.end5197
                                        #   in Loop: Header=BB121_171 Depth=1
	jmp	.LBB121_1219
.LBB121_1219:                           # %if.end5198
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	$10, best_mode
	movl	-124(%rbp), %edi
	callq	dct_luma_16x16
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB121_1280
# %bb.1220:                             # %if.then5203
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	$0, -24(%rbp)
.LBB121_1221:                           # %for.cond5204
                                        #   Parent Loop BB121_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB121_1223 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB121_1228
# %bb.1222:                             # %for.body5207
                                        #   in Loop: Header=BB121_1221 Depth=2
	movl	$0, -20(%rbp)
.LBB121_1223:                           # %for.cond5208
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_1221 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB121_1226
# %bb.1224:                             # %for.body5211
                                        #   in Loop: Header=BB121_1223 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1225:                             # %for.inc5230
                                        #   in Loop: Header=BB121_1223 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_1223
.LBB121_1226:                           # %for.end5232
                                        #   in Loop: Header=BB121_1221 Depth=2
	jmp	.LBB121_1227
.LBB121_1227:                           # %for.inc5233
                                        #   in Loop: Header=BB121_1221 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_1221
.LBB121_1228:                           # %for.end5235
                                        #   in Loop: Header=BB121_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB121_1229:                           # %for.cond5237
                                        #   Parent Loop BB121_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB121_1231 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB121_1236
# %bb.1230:                             # %for.body5240
                                        #   in Loop: Header=BB121_1229 Depth=2
	movl	$0, -20(%rbp)
.LBB121_1231:                           # %for.cond5241
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_1229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB121_1234
# %bb.1232:                             # %for.body5244
                                        #   in Loop: Header=BB121_1231 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1233:                             # %for.inc5263
                                        #   in Loop: Header=BB121_1231 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_1231
.LBB121_1234:                           # %for.end5265
                                        #   in Loop: Header=BB121_1229 Depth=2
	jmp	.LBB121_1235
.LBB121_1235:                           # %for.inc5266
                                        #   in Loop: Header=BB121_1229 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_1229
.LBB121_1236:                           # %for.end5268
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB121_1237:                           # %for.cond5270
                                        #   Parent Loop BB121_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB121_1239 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB121_1244
# %bb.1238:                             # %for.body5273
                                        #   in Loop: Header=BB121_1237 Depth=2
	movl	$0, -20(%rbp)
.LBB121_1239:                           # %for.cond5274
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_1237 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB121_1242
# %bb.1240:                             # %for.body5277
                                        #   in Loop: Header=BB121_1239 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1241:                             # %for.inc5287
                                        #   in Loop: Header=BB121_1239 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_1239
.LBB121_1242:                           # %for.end5289
                                        #   in Loop: Header=BB121_1237 Depth=2
	jmp	.LBB121_1243
.LBB121_1243:                           # %for.inc5290
                                        #   in Loop: Header=BB121_1237 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_1237
.LBB121_1244:                           # %for.end5292
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	-132(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -24(%rbp)
.LBB121_1245:                           # %for.cond5296
                                        #   Parent Loop BB121_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB121_1247 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB121_1279
# %bb.1246:                             # %for.body5299
                                        #   in Loop: Header=BB121_1245 Depth=2
	movl	$0, -20(%rbp)
.LBB121_1247:                           # %for.cond5300
                                        #   Parent Loop BB121_171 Depth=1
                                        #     Parent Loop BB121_1245 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB121_1277
# %bb.1248:                             # %for.body5303
                                        #   in Loop: Header=BB121_1247 Depth=3
	xorl	%eax, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -256(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-256(%rbp), %ecx
	movl	%ecx, -220(%rbp)
	movl	-256(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -188(%rbp)
	movl	-188(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -224(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-188(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB121_1250
# %bb.1249:                             # %cond.true5343
                                        #   in Loop: Header=BB121_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB121_1251
.LBB121_1250:                           # %cond.false5344
                                        #   in Loop: Header=BB121_1247 Depth=3
	movl	-188(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB121_1251:                           # %cond.end5356
                                        #   in Loop: Header=BB121_1247 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB121_1253
# %bb.1252:                             # %cond.true5360
                                        #   in Loop: Header=BB121_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB121_1257
.LBB121_1253:                           # %cond.false5362
                                        #   in Loop: Header=BB121_1247 Depth=3
	xorl	%eax, %eax
	movl	-188(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB121_1255
# %bb.1254:                             # %cond.true5376
                                        #   in Loop: Header=BB121_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB121_1256
.LBB121_1255:                           # %cond.false5377
                                        #   in Loop: Header=BB121_1247 Depth=3
	movl	-188(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB121_1256:                           # %cond.end5389
                                        #   in Loop: Header=BB121_1247 Depth=3
.LBB121_1257:                           # %cond.end5391
                                        #   in Loop: Header=BB121_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-220(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-124(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB121_1259
# %bb.1258:                             # %cond.true5415
                                        #   in Loop: Header=BB121_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB121_1260
.LBB121_1259:                           # %cond.false5416
                                        #   in Loop: Header=BB121_1247 Depth=3
	movl	-220(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-124(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB121_1260:                           # %cond.end5426
                                        #   in Loop: Header=BB121_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB121_1262
# %bb.1261:                             # %cond.true5430
                                        #   in Loop: Header=BB121_1247 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB121_1266
.LBB121_1262:                           # %cond.false5432
                                        #   in Loop: Header=BB121_1247 Depth=3
	xorl	%eax, %eax
	movl	-220(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-124(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB121_1264
# %bb.1263:                             # %cond.true5444
                                        #   in Loop: Header=BB121_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB121_1265
.LBB121_1264:                           # %cond.false5445
                                        #   in Loop: Header=BB121_1247 Depth=3
	movl	-220(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-124(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB121_1265:                           # %cond.end5455
                                        #   in Loop: Header=BB121_1247 Depth=3
.LBB121_1266:                           # %cond.end5457
                                        #   in Loop: Header=BB121_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-224(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB121_1268
# %bb.1267:                             # %cond.true5483
                                        #   in Loop: Header=BB121_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB121_1269
.LBB121_1268:                           # %cond.false5484
                                        #   in Loop: Header=BB121_1247 Depth=3
	movl	-224(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB121_1269:                           # %cond.end5496
                                        #   in Loop: Header=BB121_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB121_1271
# %bb.1270:                             # %cond.true5500
                                        #   in Loop: Header=BB121_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB121_1275
.LBB121_1271:                           # %cond.false5502
                                        #   in Loop: Header=BB121_1247 Depth=3
	xorl	%eax, %eax
	movl	-224(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB121_1273
# %bb.1272:                             # %cond.true5516
                                        #   in Loop: Header=BB121_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB121_1274
.LBB121_1273:                           # %cond.false5517
                                        #   in Loop: Header=BB121_1247 Depth=3
	movl	-224(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB121_1274:                           # %cond.end5529
                                        #   in Loop: Header=BB121_1247 Depth=3
.LBB121_1275:                           # %cond.end5531
                                        #   in Loop: Header=BB121_1247 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1276:                             # %for.inc5544
                                        #   in Loop: Header=BB121_1247 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_1247
.LBB121_1277:                           # %for.end5546
                                        #   in Loop: Header=BB121_1245 Depth=2
	jmp	.LBB121_1278
.LBB121_1278:                           # %for.inc5547
                                        #   in Loop: Header=BB121_1245 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_1245
.LBB121_1279:                           # %for.end5549
                                        #   in Loop: Header=BB121_171 Depth=1
	jmp	.LBB121_1280
.LBB121_1280:                           # %if.end5550
                                        #   in Loop: Header=BB121_171 Depth=1
	jmp	.LBB121_1282
.LBB121_1281:                           # %if.else5551
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-320(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB121_1282:                           # %if.end5554
                                        #   in Loop: Header=BB121_171 Depth=1
	jmp	.LBB121_1283
.LBB121_1283:                           # %if.end5555
                                        #   in Loop: Header=BB121_171 Depth=1
	jmp	.LBB121_1284
.LBB121_1284:                           # %if.end5556
                                        #   in Loop: Header=BB121_171 Depth=1
	cmpl	$0, -264(%rbp)
	jne	.LBB121_1289
# %bb.1285:                             # %if.then5559
                                        #   in Loop: Header=BB121_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB121_1288
# %bb.1286:                             # %lor.lhs.false5563
                                        #   in Loop: Header=BB121_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB121_1288
# %bb.1287:                             # %lor.rhs5567
                                        #   in Loop: Header=BB121_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB121_1288:                           # %lor.end5571
                                        #   in Loop: Header=BB121_171 Depth=1
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -252(%rbp)
.LBB121_1289:                           # %if.end5574
                                        #   in Loop: Header=BB121_171 Depth=1
	jmp	.LBB121_1290
.LBB121_1290:                           # %for.inc5575
                                        #   in Loop: Header=BB121_171 Depth=1
	movl	-264(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -264(%rbp)
	jmp	.LBB121_171
.LBB121_1291:                           # %for.end5577
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB121_1300
# %bb.1292:                             # %if.then5580
	cmpl	$0, cbp
	jne	.LBB121_1294
# %bb.1293:                             # %lor.lhs.false5583
	cmpl	$10, best_mode
	jne	.LBB121_1295
.LBB121_1294:                           # %if.then5586
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB121_1299
.LBB121_1295:                           # %if.else5587
	cmpl	$0, cbp
	jne	.LBB121_1298
# %bb.1296:                             # %land.lhs.true5590
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB121_1298
# %bb.1297:                             # %if.then5592
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB121_1298:                           # %if.end5597
	jmp	.LBB121_1299
.LBB121_1299:                           # %if.end5598
	callq	set_stored_macroblock_parameters
	jmp	.LBB121_1395
.LBB121_1300:                           # %if.else5599
	movl	best_mode, %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$8, best_mode
	jne	.LBB121_1314
# %bb.1301:                             # %if.then5602
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB121_1305
# %bb.1302:                             # %land.lhs.true5605
	cmpl	$0, cbp8_8x8ts
	jne	.LBB121_1305
# %bb.1303:                             # %land.lhs.true5608
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB121_1305
# %bb.1304:                             # %if.then5612
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB121_1305:                           # %if.end5614
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB121_1306:                           # %for.cond5616
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_1308 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_1313
# %bb.1307:                             # %for.body5621
                                        #   in Loop: Header=BB121_1306 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB121_1308:                           # %for.cond5623
                                        #   Parent Loop BB121_1306 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_1311
# %bb.1309:                             # %for.body5628
                                        #   in Loop: Header=BB121_1308 Depth=2
	movq	-400(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1310:                             # %for.inc5636
                                        #   in Loop: Header=BB121_1308 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB121_1308
.LBB121_1311:                           # %for.end5639
                                        #   in Loop: Header=BB121_1306 Depth=1
	jmp	.LBB121_1312
.LBB121_1312:                           # %for.inc5640
                                        #   in Loop: Header=BB121_1306 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_1306
.LBB121_1313:                           # %for.end5642
	jmp	.LBB121_1370
.LBB121_1314:                           # %if.else5643
	cmpl	$13, best_mode
	jne	.LBB121_1342
# %bb.1315:                             # %if.then5646
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB121_1316:                           # %for.cond5647
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_1318 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB121_1323
# %bb.1317:                             # %for.body5650
                                        #   in Loop: Header=BB121_1316 Depth=1
	movl	$0, -24(%rbp)
.LBB121_1318:                           # %for.cond5651
                                        #   Parent Loop BB121_1316 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB121_1321
# %bb.1319:                             # %for.body5654
                                        #   in Loop: Header=BB121_1318 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.1320:                             # %for.inc5677
                                        #   in Loop: Header=BB121_1318 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB121_1318
.LBB121_1321:                           # %for.end5680
                                        #   in Loop: Header=BB121_1316 Depth=1
	jmp	.LBB121_1322
.LBB121_1322:                           # %for.inc5681
                                        #   in Loop: Header=BB121_1316 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_1316
.LBB121_1323:                           # %for.end5683
	movl	$0, -24(%rbp)
.LBB121_1324:                           # %for.cond5684
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_1326 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB121_1331
# %bb.1325:                             # %for.body5687
                                        #   in Loop: Header=BB121_1324 Depth=1
	movl	$0, -20(%rbp)
.LBB121_1326:                           # %for.cond5688
                                        #   Parent Loop BB121_1324 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB121_1329
# %bb.1327:                             # %for.body5691
                                        #   in Loop: Header=BB121_1326 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgY, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1328:                             # %for.inc5705
                                        #   in Loop: Header=BB121_1326 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_1326
.LBB121_1329:                           # %for.end5707
                                        #   in Loop: Header=BB121_1324 Depth=1
	jmp	.LBB121_1330
.LBB121_1330:                           # %for.inc5708
                                        #   in Loop: Header=BB121_1324 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_1324
.LBB121_1331:                           # %for.end5710
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB121_1341
# %bb.1332:                             # %if.then5713
	movl	$0, -24(%rbp)
.LBB121_1333:                           # %for.cond5714
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_1335 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB121_1340
# %bb.1334:                             # %for.body5717
                                        #   in Loop: Header=BB121_1333 Depth=1
	movl	$0, -20(%rbp)
.LBB121_1335:                           # %for.cond5718
                                        #   Parent Loop BB121_1333 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB121_1338
# %bb.1336:                             # %for.body5721
                                        #   in Loop: Header=BB121_1335 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgU, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgV, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1337:                             # %for.inc5750
                                        #   in Loop: Header=BB121_1335 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_1335
.LBB121_1338:                           # %for.end5752
                                        #   in Loop: Header=BB121_1333 Depth=1
	jmp	.LBB121_1339
.LBB121_1339:                           # %for.inc5753
                                        #   in Loop: Header=BB121_1333 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_1333
.LBB121_1340:                           # %for.end5755
	jmp	.LBB121_1341
.LBB121_1341:                           # %if.end5756
	jmp	.LBB121_1342
.LBB121_1342:                           # %if.end5757
	cmpl	$9, best_mode
	je	.LBB121_1369
# %bb.1343:                             # %land.lhs.true5760
	cmpl	$13, best_mode
	je	.LBB121_1369
# %bb.1344:                             # %if.then5763
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB121_1345:                           # %for.cond5765
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_1347 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_1352
# %bb.1346:                             # %for.body5770
                                        #   in Loop: Header=BB121_1345 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB121_1347:                           # %for.cond5772
                                        #   Parent Loop BB121_1345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_1350
# %bb.1348:                             # %for.body5777
                                        #   in Loop: Header=BB121_1347 Depth=2
	movq	-400(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1349:                             # %for.inc5785
                                        #   in Loop: Header=BB121_1347 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB121_1347
.LBB121_1350:                           # %for.end5788
                                        #   in Loop: Header=BB121_1345 Depth=1
	jmp	.LBB121_1351
.LBB121_1351:                           # %for.inc5789
                                        #   in Loop: Header=BB121_1345 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_1345
.LBB121_1352:                           # %for.end5791
	cmpl	$10, best_mode
	je	.LBB121_1368
# %bb.1353:                             # %if.then5794
	cmpl	$1, best_mode
	jl	.LBB121_1356
# %bb.1354:                             # %land.lhs.true5797
	cmpl	$3, best_mode
	jg	.LBB121_1356
# %bb.1355:                             # %if.then5800
	movl	-304(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB121_1356:                           # %if.end5802
	movb	$0, %al
	callq	LumaResidualCoding
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB121_1359
# %bb.1357:                             # %land.lhs.true5806
	cmpl	$0, best_mode
	jne	.LBB121_1359
# %bb.1358:                             # %if.then5809
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB121_1359:                           # %if.end5811
	movl	$0, -20(%rbp)
.LBB121_1360:                           # %for.cond5812
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_1362 Depth 2
	cmpl	$16, -20(%rbp)
	jge	.LBB121_1367
# %bb.1361:                             # %for.body5815
                                        #   in Loop: Header=BB121_1360 Depth=1
	movl	$0, -24(%rbp)
.LBB121_1362:                           # %for.cond5816
                                        #   Parent Loop BB121_1360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -24(%rbp)
	jge	.LBB121_1365
# %bb.1363:                             # %for.body5819
                                        #   in Loop: Header=BB121_1362 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1364:                             # %for.inc5840
                                        #   in Loop: Header=BB121_1362 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_1362
.LBB121_1365:                           # %for.end5842
                                        #   in Loop: Header=BB121_1360 Depth=1
	jmp	.LBB121_1366
.LBB121_1366:                           # %for.inc5843
                                        #   in Loop: Header=BB121_1360 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_1360
.LBB121_1367:                           # %for.end5845
	jmp	.LBB121_1368
.LBB121_1368:                           # %if.end5846
	jmp	.LBB121_1369
.LBB121_1369:                           # %if.end5847
	jmp	.LBB121_1370
.LBB121_1370:                           # %if.end5848
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB121_1374
# %bb.1371:                             # %land.lhs.true5853
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB121_1374
# %bb.1372:                             # %lor.lhs.false5857
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB121_1374
# %bb.1373:                             # %if.then5861
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB121_1374:                           # %if.end5863
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB121_1376
# %bb.1375:                             # %if.then5867
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB121_1376:                           # %if.end5868
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -284(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB121_1380
# %bb.1377:                             # %land.lhs.true5871
	cmpl	$9, best_mode
	je	.LBB121_1382
# %bb.1378:                             # %lor.lhs.false5874
	cmpl	$10, best_mode
	je	.LBB121_1382
# %bb.1379:                             # %lor.lhs.false5877
	cmpl	$13, best_mode
	je	.LBB121_1382
.LBB121_1380:                           # %land.lhs.true5880
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB121_1382
# %bb.1381:                             # %if.then5884
	leaq	-284(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB121_1382:                           # %if.end5885
	cmpl	$10, best_mode
	jne	.LBB121_1384
# %bb.1383:                             # %if.then5888
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-124(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB121_1384:                           # %if.end5892
	movq	-48(%rbp), %rdi
	movl	-108(%rbp), %esi
	callq	SetMotionVectorsMB
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB121_1386
# %bb.1385:                             # %lor.lhs.false5896
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB121_1392
.LBB121_1386:                           # %land.lhs.true5900
	cmpl	$1, best_mode
	jne	.LBB121_1392
# %bb.1387:                             # %land.lhs.true5903
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB121_1392
# %bb.1388:                             # %land.lhs.true5907
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB121_1392
# %bb.1389:                             # %land.lhs.true5919
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movq	-440(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB121_1392
# %bb.1390:                             # %land.lhs.true5939
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movq	-440(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	2(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB121_1392
# %bb.1391:                             # %if.then5959
	movq	-48(%rbp), %rax
	movl	$0, 484(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 480(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 476(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 472(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB121_1392:                           # %if.end5969
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB121_1394
# %bb.1393:                             # %if.then5972
	callq	set_mbaff_parameters
.LBB121_1394:                           # %if.end5973
	jmp	.LBB121_1395
.LBB121_1395:                           # %if.end5974
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB121_1410
# %bb.1396:                             # %if.then5977
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB121_1409
# %bb.1397:                             # %if.then5981
	movb	$0, %al
	callq	calc_MAD
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	%xmm0, (%rax,%rcx,8)
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB121_1408
# %bb.1398:                             # %if.then5988
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	movq	img, %rax
	vaddsd	72544(%rax), %xmm0, %xmm0
	vmovsd	%xmm0, 72544(%rax)
	cmpl	$0, cbp
	jne	.LBB121_1400
# %bb.1399:                             # %lor.lhs.false5996
	cmpl	$10, best_mode
	jne	.LBB121_1401
.LBB121_1400:                           # %if.then5999
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB121_1402
.LBB121_1401:                           # %if.else6001
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB121_1402:                           # %if.end6008
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB121_1407
# %bb.1403:                             # %if.then6010
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB121_1405
# %bb.1404:                             # %if.then6013
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP
	jmp	.LBB121_1406
.LBB121_1405:                           # %if.else6016
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
.LBB121_1406:                           # %if.end6019
	jmp	.LBB121_1407
.LBB121_1407:                           # %if.end6020
	jmp	.LBB121_1408
.LBB121_1408:                           # %if.end6021
	jmp	.LBB121_1409
.LBB121_1409:                           # %if.end6022
	jmp	.LBB121_1410
.LBB121_1410:                           # %if.end6023
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB121_1412
# %bb.1411:                             # %if.then6026
	vmovsd	-248(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
	jmp	.LBB121_1413
.LBB121_1412:                           # %if.else6028
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm0
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB121_1413:                           # %if.end6031
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB121_1430
# %bb.1414:                             # %if.then6034
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB121_1429
# %bb.1415:                             # %if.then6038
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB121_1417
# %bb.1416:                             # %cond.true6041
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB121_1420
	jmp	.LBB121_1428
.LBB121_1417:                           # %cond.false6042
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB121_1419
# %bb.1418:                             # %cond.true6046
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB121_1428
	jmp	.LBB121_1420
.LBB121_1419:                           # %cond.false6049
	movb	$1, %al
	testb	$1, %al
	jne	.LBB121_1420
	jmp	.LBB121_1428
.LBB121_1420:                           # %land.lhs.true6050
	movq	-424(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB121_1422
# %bb.1421:                             # %cond.true6053
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB121_1425
	jmp	.LBB121_1428
.LBB121_1422:                           # %cond.false6054
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB121_1424
# %bb.1423:                             # %cond.true6058
	movq	-424(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB121_1428
	jmp	.LBB121_1425
.LBB121_1424:                           # %cond.false6061
	movb	$1, %al
	testb	$1, %al
	jne	.LBB121_1425
	jmp	.LBB121_1428
.LBB121_1425:                           # %if.then6062
	callq	field_flag_inference
	cmpl	-288(%rbp), %eax
	je	.LBB121_1427
# %bb.1426:                             # %if.then6066
	vmovsd	.LCPI121_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB121_1427:                           # %if.end6068
	jmp	.LBB121_1428
.LBB121_1428:                           # %if.end6069
	jmp	.LBB121_1429
.LBB121_1429:                           # %if.end6070
	jmp	.LBB121_1430
.LBB121_1430:                           # %if.end6071
	movq	input, %rax
	cmpl	$1, 2908(%rax)
	jne	.LBB121_1453
# %bb.1431:                             # %if.then6075
	movq	input, %rax
	cmpl	$1, 2464(%rax)
	jne	.LBB121_1433
# %bb.1432:                             # %if.then6079
	xorl	%eax, %eax
	movl	-136(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB121_1452
.LBB121_1433:                           # %if.else6127
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB121_1451
# %bb.1434:                             # %if.then6131
	xorl	%eax, %eax
	cmpl	$0, -252(%rbp)
	jne	.LBB121_1438
# %bb.1435:                             # %land.rhs6134
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB121_1437
# %bb.1436:                             # %lor.rhs6138
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB121_1437:                           # %lor.end6142
.LBB121_1438:                           # %land.end6144
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -252(%rbp)
	jne	.LBB121_1442
# %bb.1439:                             # %land.rhs6158
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB121_1441
# %bb.1440:                             # %lor.rhs6162
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB121_1441:                           # %lor.end6166
.LBB121_1442:                           # %land.end6168
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rcx
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rcx,%rsi,8), %rcx
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rcx,%rsi)
	cmpl	$0, -252(%rbp)
	jne	.LBB121_1446
# %bb.1443:                             # %land.rhs6183
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB121_1445
# %bb.1444:                             # %lor.rhs6187
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB121_1445:                           # %lor.end6191
.LBB121_1446:                           # %land.end6193
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -252(%rbp)
	jne	.LBB121_1450
# %bb.1447:                             # %land.rhs6208
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB121_1449
# %bb.1448:                             # %lor.rhs6212
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB121_1449:                           # %lor.end6216
.LBB121_1450:                           # %land.end6218
	xorl	%eax, %eax
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB121_1451:                           # %if.end6232
	jmp	.LBB121_1452
.LBB121_1452:                           # %if.end6233
	jmp	.LBB121_1464
.LBB121_1453:                           # %if.else6234
	movq	input, %rax
	cmpl	$2, 2908(%rax)
	jne	.LBB121_1463
# %bb.1454:                             # %if.then6238
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB121_1456
# %bb.1455:                             # %lor.rhs6242
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB121_1456:                           # %lor.end6246
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB121_1458
# %bb.1457:                             # %lor.rhs6261
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB121_1458:                           # %lor.end6265
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB121_1460
# %bb.1459:                             # %lor.rhs6281
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB121_1460:                           # %lor.end6285
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB121_1462
# %bb.1461:                             # %lor.rhs6301
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB121_1462:                           # %lor.end6305
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
.LBB121_1463:                           # %if.end6319
	jmp	.LBB121_1464
.LBB121_1464:                           # %if.end6320
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB121_1466
# %bb.1465:                             # %if.then6323
	movl	best_mode, %edi
	movl	-64(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %esi
	callq	skip_intrabk_SAD
.LBB121_1466:                           # %if.end6327
	cmpl	$511994871, -404(%rbp)  # imm = 0x1E846BF7
	jne	.LBB121_1468
.LBB121_1467:
	addq	$480, %rsp              # imm = 0x1E0
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB121_1468:                           # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB121_1467
.Lfunc_end121:
	.size	encode_one_macroblock.92, .Lfunc_end121-encode_one_macroblock.92
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_8x8blocks.93
.LCPI122_0:
	.quad	4906019910204099648     # double 1.0E+20
	.text
	.globl	RDCost_for_8x8blocks.93
	.p2align	4, 0x90
	.type	RDCost_for_8x8blocks.93,@function
RDCost_for_8x8blocks.93:                # @RDCost_for_8x8blocks.93
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movw	16(%rbp), %ax
	xorl	%r10d, %r10d
	movl	$1018063558, -168(%rbp) # imm = 0x3CAE6AC6
	movq	%rdi, -144(%rbp)
	movq	%rsi, -208(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movw	%r8w, -18(%rbp)
	movw	%r9w, -42(%rbp)
	movl	$0, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -120(%rbp)
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -52(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -160(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB122_2
# %bb.1:                                # %land.rhs
	cmpl	$0, -40(%rbp)
	sete	%r10b
.LBB122_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -116(%rbp)
	movl	-40(%rbp), %edi
	movswl	-18(%rbp), %esi
	callq	B8Mode2Value
	movl	%eax, -128(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-112(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -184(%rbp)
	movq	-112(%rbp), %rax
	movl	$0, 580(%rax)
	cmpl	$0, -116(%rbp)
	je	.LBB122_10
# %bb.3:                                # %if.then
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB122_5
# %bb.4:                                # %if.then20
	vmovsd	.LCPI122_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	%xmm0, -192(%rbp)
	jmp	.LBB122_139
.LBB122_5:                              # %if.else
	xorl	%r8d, %r8d
	movq	-208(%rbp), %rsi
	movl	-36(%rbp), %edx
	movq	direct_pdir, %rcx
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rcx,%rdi,8), %rcx
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movw	(%rcx,%rdi,2), %r9w
	movq	direct_ref_idx, %rdi
	movq	(%rdi), %rdi
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-32(%rbp), %eax
	cltq
	movq	(%rdi,%rax,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %eax
	cmpl	%eax, %r8d
	jle	.LBB122_7
# %bb.6:                                # %cond.true
	xorl	%r10d, %r10d
	jmp	.LBB122_8
.LBB122_7:                              # %cond.false
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rax,%rdi,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %r10d
.LBB122_8:                              # %cond.end
	movq	direct_ref_idx, %rdi
	movq	8(%rdi), %rdi
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rdi,%rcx,8), %r11
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rbx
	leaq	-120(%rbp), %rdi
	movswl	%r9w, %ecx
	movl	$0, %r8d
	movl	$0, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	(%r11,%rbx,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
# %bb.9:                                # %if.end
	jmp	.LBB122_19
.LBB122_10:                             # %if.else62
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB122_12
# %bb.11:                               # %lor.lhs.false
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB122_13
.LBB122_12:                             # %cond.true69
	movl	-40(%rbp), %eax
	jmp	.LBB122_14
.LBB122_13:                             # %cond.false70
	xorl	%eax, %eax
	jmp	.LBB122_14
.LBB122_14:                             # %cond.end71
	movl	%eax, -172(%rbp)
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB122_16
# %bb.15:                               # %lor.lhs.false76
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB122_17
.LBB122_16:                             # %cond.true80
	movl	-40(%rbp), %eax
	jmp	.LBB122_18
.LBB122_17:                             # %cond.false81
	xorl	%eax, %eax
	jmp	.LBB122_18
.LBB122_18:                             # %cond.end82
	movl	%eax, -164(%rbp)
	movq	-208(%rbp), %rsi
	movl	-36(%rbp), %edx
	movw	-18(%rbp), %ax
	movl	-172(%rbp), %r8d
	movl	-164(%rbp), %r9d
	movw	-42(%rbp), %bx
	leaq	-120(%rbp), %rdi
	movswl	%ax, %ecx
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	16(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB122_19:                             # %if.end85
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB122_84
# %bb.20:                               # %if.then87
	movl	$0, -56(%rbp)
.LBB122_21:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_23 Depth 2
                                        #       Child Loop BB122_25 Depth 3
                                        #     Child Loop BB122_31 Depth 2
                                        #       Child Loop BB122_33 Depth 3
                                        #     Child Loop BB122_39 Depth 2
                                        #       Child Loop BB122_41 Depth 3
	cmpl	$4, -56(%rbp)
	jge	.LBB122_48
# %bb.22:                               # %for.body
                                        #   in Loop: Header=BB122_21 Depth=1
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -88(%rbp)
	movl	-48(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -80(%rbp)
	movl	$0, -16(%rbp)
.LBB122_23:                             # %for.cond96
                                        #   Parent Loop BB122_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB122_25 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB122_30
# %bb.24:                               # %for.body99
                                        #   in Loop: Header=BB122_23 Depth=2
	movl	$0, -12(%rbp)
.LBB122_25:                             # %for.cond100
                                        #   Parent Loop BB122_21 Depth=1
                                        #     Parent Loop BB122_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB122_28
# %bb.26:                               # %for.body103
                                        #   in Loop: Header=BB122_25 Depth=3
	movl	-12(%rbp), %eax
	addl	-88(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-80(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB122_25 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_25
.LBB122_28:                             # %for.end
                                        #   in Loop: Header=BB122_23 Depth=2
	jmp	.LBB122_29
.LBB122_29:                             # %for.inc114
                                        #   in Loop: Header=BB122_23 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_23
.LBB122_30:                             # %for.end116
                                        #   in Loop: Header=BB122_21 Depth=1
	movl	-36(%rbp), %edi
	addl	$4, %edi
	movl	-56(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB122_31:                             # %for.cond120
                                        #   Parent Loop BB122_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB122_33 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB122_38
# %bb.32:                               # %for.body123
                                        #   in Loop: Header=BB122_31 Depth=2
	movl	$0, -12(%rbp)
.LBB122_33:                             # %for.cond124
                                        #   Parent Loop BB122_21 Depth=1
                                        #     Parent Loop BB122_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB122_36
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB122_33 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-88(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-12(%rbp), %eax
	addl	-88(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-80(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc150
                                        #   in Loop: Header=BB122_33 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_33
.LBB122_36:                             # %for.end152
                                        #   in Loop: Header=BB122_31 Depth=2
	jmp	.LBB122_37
.LBB122_37:                             # %for.inc153
                                        #   in Loop: Header=BB122_31 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_31
.LBB122_38:                             # %for.end155
                                        #   in Loop: Header=BB122_21 Depth=1
	movl	-36(%rbp), %edi
	addl	$8, %edi
	movl	-56(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB122_39:                             # %for.cond159
                                        #   Parent Loop BB122_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB122_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB122_46
# %bb.40:                               # %for.body162
                                        #   in Loop: Header=BB122_39 Depth=2
	movl	$0, -12(%rbp)
.LBB122_41:                             # %for.cond163
                                        #   Parent Loop BB122_21 Depth=1
                                        #     Parent Loop BB122_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB122_44
# %bb.42:                               # %for.body166
                                        #   in Loop: Header=BB122_41 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-88(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc178
                                        #   in Loop: Header=BB122_41 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_41
.LBB122_44:                             # %for.end180
                                        #   in Loop: Header=BB122_39 Depth=2
	jmp	.LBB122_45
.LBB122_45:                             # %for.inc181
                                        #   in Loop: Header=BB122_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_39
.LBB122_46:                             # %for.end183
                                        #   in Loop: Header=BB122_21 Depth=1
	jmp	.LBB122_47
.LBB122_47:                             # %for.inc184
                                        #   in Loop: Header=BB122_21 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB122_21
.LBB122_48:                             # %for.end186
	movl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB122_49:                             # %for.cond187
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_51 Depth 2
	movl	-16(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB122_83
# %bb.50:                               # %for.body191
                                        #   in Loop: Header=BB122_49 Depth=1
	movl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB122_51:                             # %for.cond192
                                        #   Parent Loop BB122_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB122_81
# %bb.52:                               # %for.body196
                                        #   in Loop: Header=BB122_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -124(%rbp)
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rbx
	movslq	-16(%rbp), %rdx
	movl	(%rbx,%rdx,4), %edx
	addl	-124(%rbp), %edx
	movl	%edx, -92(%rbp)
	movl	-124(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resR, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -68(%rbp)
	movl	-68(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rbx
	movslq	-16(%rbp), %rsi
	addl	(%rbx,%rsi,4), %edx
	movl	%edx, -84(%rbp)
	movq	img, %rdx
	movl	72688(%rdx), %edx
	movl	-68(%rbp), %esi
	movslq	-12(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movslq	-16(%rbp), %rdi
	addl	(%rcx,%rdi,4), %esi
	cmpl	%esi, %eax
	jle	.LBB122_54
# %bb.53:                               # %cond.true228
                                        #   in Loop: Header=BB122_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB122_55
.LBB122_54:                             # %cond.false229
                                        #   in Loop: Header=BB122_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-68(%rbp), %eax
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB122_55:                             # %cond.end235
                                        #   in Loop: Header=BB122_51 Depth=2
	cmpl	%eax, %edx
	jge	.LBB122_57
# %bb.56:                               # %cond.true239
                                        #   in Loop: Header=BB122_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB122_61
.LBB122_57:                             # %cond.false241
                                        #   in Loop: Header=BB122_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-68(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB122_59
# %bb.58:                               # %cond.true249
                                        #   in Loop: Header=BB122_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB122_60
.LBB122_59:                             # %cond.false250
                                        #   in Loop: Header=BB122_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-68(%rbp), %eax
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB122_60:                             # %cond.end256
                                        #   in Loop: Header=BB122_51 Depth=2
.LBB122_61:                             # %cond.end258
                                        #   in Loop: Header=BB122_51 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-92(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB122_63
# %bb.62:                               # %cond.true275
                                        #   in Loop: Header=BB122_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB122_64
.LBB122_63:                             # %cond.false276
                                        #   in Loop: Header=BB122_51 Depth=2
	movl	-92(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB122_64:                             # %cond.end282
                                        #   in Loop: Header=BB122_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB122_66
# %bb.65:                               # %cond.true286
                                        #   in Loop: Header=BB122_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB122_70
.LBB122_66:                             # %cond.false288
                                        #   in Loop: Header=BB122_51 Depth=2
	xorl	%eax, %eax
	movl	-92(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB122_68
# %bb.67:                               # %cond.true296
                                        #   in Loop: Header=BB122_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB122_69
.LBB122_68:                             # %cond.false297
                                        #   in Loop: Header=BB122_51 Depth=2
	movl	-92(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB122_69:                             # %cond.end303
                                        #   in Loop: Header=BB122_51 Depth=2
.LBB122_70:                             # %cond.end305
                                        #   in Loop: Header=BB122_51 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-84(%rbp), %esi
	movslq	-12(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-16(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB122_72
# %bb.71:                               # %cond.true324
                                        #   in Loop: Header=BB122_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB122_73
.LBB122_72:                             # %cond.false325
                                        #   in Loop: Header=BB122_51 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-84(%rbp), %ecx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB122_73:                             # %cond.end331
                                        #   in Loop: Header=BB122_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB122_75
# %bb.74:                               # %cond.true335
                                        #   in Loop: Header=BB122_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB122_79
.LBB122_75:                             # %cond.false337
                                        #   in Loop: Header=BB122_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-84(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB122_77
# %bb.76:                               # %cond.true345
                                        #   in Loop: Header=BB122_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB122_78
.LBB122_77:                             # %cond.false346
                                        #   in Loop: Header=BB122_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-84(%rbp), %eax
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB122_78:                             # %cond.end352
                                        #   in Loop: Header=BB122_51 Depth=2
.LBB122_79:                             # %cond.end354
                                        #   in Loop: Header=BB122_51 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.80:                               # %for.inc367
                                        #   in Loop: Header=BB122_51 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_51
.LBB122_81:                             # %for.end369
                                        #   in Loop: Header=BB122_49 Depth=1
	jmp	.LBB122_82
.LBB122_82:                             # %for.inc370
                                        #   in Loop: Header=BB122_49 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_49
.LBB122_83:                             # %for.end372
	jmp	.LBB122_84
.LBB122_84:                             # %if.end373
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB122_87
# %bb.85:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB122_87
# %bb.86:                               # %if.then379
	movl	-36(%rbp), %edi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	compute_residue_b8block
.LBB122_87:                             # %if.end380
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB122_102
# %bb.88:                               # %land.lhs.true384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB122_102
# %bb.89:                               # %if.then388
	movl	$0, -76(%rbp)
.LBB122_90:                             # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_92 Depth 2
                                        #       Child Loop BB122_94 Depth 3
	movl	-76(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB122_101
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB122_90 Depth=1
	movl	-76(%rbp), %edi
	movl	-36(%rbp), %edx
	movl	-40(%rbp), %ecx
	movswl	-42(%rbp), %r8d
	movl	$8, %esi
	callq	decode_one_b8block
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB122_92:                             # %for.cond395
                                        #   Parent Loop BB122_90 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB122_94 Depth 3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB122_99
# %bb.93:                               # %for.body401
                                        #   in Loop: Header=BB122_92 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB122_94:                             # %for.cond403
                                        #   Parent Loop BB122_90 Depth=1
                                        #     Parent Loop BB122_92 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB122_97
# %bb.95:                               # %for.body409
                                        #   in Loop: Header=BB122_94 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-76(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
# %bb.96:                               # %for.inc427
                                        #   in Loop: Header=BB122_94 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_94
.LBB122_97:                             # %for.end429
                                        #   in Loop: Header=BB122_92 Depth=2
	jmp	.LBB122_98
.LBB122_98:                             # %for.inc430
                                        #   in Loop: Header=BB122_92 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_92
.LBB122_99:                             # %for.end432
                                        #   in Loop: Header=BB122_90 Depth=1
	jmp	.LBB122_100
.LBB122_100:                            # %for.inc433
                                        #   in Loop: Header=BB122_90 Depth=1
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB122_90
.LBB122_101:                            # %for.end435
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-64(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -64(%rbp)
	jmp	.LBB122_113
.LBB122_102:                            # %if.else439
	movl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB122_103:                            # %for.cond440
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_105 Depth 2
	movl	-16(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB122_112
# %bb.104:                              # %for.body444
                                        #   in Loop: Header=BB122_103 Depth=1
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB122_105:                            # %for.cond447
                                        #   Parent Loop BB122_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB122_110
# %bb.106:                              # %for.body453
                                        #   in Loop: Header=BB122_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB122_108
# %bb.107:                              # %if.then477
                                        #   in Loop: Header=BB122_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB122_108:                            # %if.end524
                                        #   in Loop: Header=BB122_105 Depth=2
	jmp	.LBB122_109
.LBB122_109:                            # %for.inc525
                                        #   in Loop: Header=BB122_105 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_105
.LBB122_110:                            # %for.end527
                                        #   in Loop: Header=BB122_103 Depth=1
	jmp	.LBB122_111
.LBB122_111:                            # %for.inc528
                                        #   in Loop: Header=BB122_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_103
.LBB122_112:                            # %for.end530
	jmp	.LBB122_113
.LBB122_113:                            # %if.end531
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB122_115
# %bb.114:                              # %if.then534
	movl	-128(%rbp), %edi
	movl	-156(%rbp), %esi
	leaq	-72(%rbp), %rdx
	leaq	-156(%rbp), %rcx
	callq	ue_linfo
	movl	-72(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB122_116
.LBB122_115:                            # %if.else536
	movl	-128(%rbp), %eax
	movq	-104(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-104(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-104(%rbp), %rax
	movl	$2, (%rax)
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-184(%rbp), %rcx
	movq	-104(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movq	112(%rax), %rax
	movq	-104(%rbp), %rdi
	movq	-136(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-104(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -104(%rbp)
	movq	-112(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB122_116:                            # %if.end547
	cmpl	$0, -116(%rbp)
	jne	.LBB122_134
# %bb.117:                              # %if.then549
	movq	img, %rax
	cmpl	$1, 72000(%rax)
	jle	.LBB122_121
# %bb.118:                              # %land.lhs.true552
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB122_120
# %bb.119:                              # %lor.lhs.false556
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB122_121
.LBB122_120:                            # %if.then560
	movl	-40(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movswl	-42(%rbp), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB122_121:                            # %if.end564
	movq	img, %rax
	cmpl	$1, 72004(%rax)
	jle	.LBB122_127
# %bb.122:                              # %land.lhs.true567
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB122_127
# %bb.123:                              # %if.then571
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB122_125
# %bb.124:                              # %lor.lhs.false575
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB122_126
.LBB122_125:                            # %if.then579
	movl	-40(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movswl	16(%rbp), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB122_126:                            # %if.end583
	jmp	.LBB122_127
.LBB122_127:                            # %if.end584
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB122_129
# %bb.128:                              # %lor.lhs.false588
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB122_130
.LBB122_129:                            # %if.then592
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	addl	$2, %edx
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movswl	-42(%rbp), %r8d
	movl	-40(%rbp), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB122_130:                            # %if.end598
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB122_132
# %bb.131:                              # %lor.lhs.false602
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB122_133
.LBB122_132:                            # %if.then606
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	addl	$2, %edx
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movswl	16(%rbp), %r8d
	movl	-40(%rbp), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB122_133:                            # %if.end612
	jmp	.LBB122_134
.LBB122_134:                            # %if.end613
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB122_136
# %bb.135:                              # %if.then617
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-184(%rbp), %rcx
	movslq	44(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	xorl	%esi, %esi
	movl	%eax, -72(%rbp)
	movl	-36(%rbp), %edi
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovgl	%eax, %esi
	movl	cbp8x8, %edx
	movq	-112(%rbp), %rcx
	movq	-152(%rbp), %r9
	movl	$1, %r8d
	callq	writeCBP_BIT_CABAC
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	subl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB122_136:                            # %if.end629
	movq	-144(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB122_138
# %bb.137:                              # %if.then631
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	movq	-112(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB122_138:                            # %if.end634
	vcvtsi2sdq	-64(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-24(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
.LBB122_139:                            # %return
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	cmpl	$1018063558, -168(%rbp) # imm = 0x3CAE6AC6
	jne	.LBB122_141
.LBB122_140:
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB122_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -216(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-216(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB122_140
.Lfunc_end122:
	.size	RDCost_for_8x8blocks.93, .Lfunc_end122-RDCost_for_8x8blocks.93
	.cfi_endproc
                                        # -- End function
	.globl	StoreNewMotionVectorsBlock8x8.94 # -- Begin function StoreNewMotionVectorsBlock8x8.94
	.p2align	4, 0x90
	.type	StoreNewMotionVectorsBlock8x8.94,@function
StoreNewMotionVectorsBlock8x8.94:       # @StoreNewMotionVectorsBlock8x8.94
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$1021548618, -72(%rbp)  # imm = 0x3CE3984A
	movl	%edi, -12(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -44(%rbp)
	movl	%r9d, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -24(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -40(%rbp)
	jge	.LBB123_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB123_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB123_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB123_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB123_4:                              # %for.cond6
                                        #   Parent Loop BB123_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB123_7
# %bb.5:                                # %for.body8
                                        #   in Loop: Header=BB123_4 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	$0, 2(%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, 2(%rax,%rcx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB123_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_4
.LBB123_7:                              # %for.end
                                        #   in Loop: Header=BB123_2 Depth=1
	jmp	.LBB123_8
.LBB123_8:                              # %for.inc39
                                        #   in Loop: Header=BB123_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_2
.LBB123_9:                              # %for.end41
	jmp	.LBB123_61
.LBB123_10:                             # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB123_20
# %bb.11:                               # %if.then42
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB123_12:                             # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_14 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB123_19
# %bb.13:                               # %for.body45
                                        #   in Loop: Header=BB123_12 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB123_14:                             # %for.cond46
                                        #   Parent Loop BB123_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB123_17
# %bb.15:                               # %for.body48
                                        #   in Loop: Header=BB123_14 Depth=2
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.16:                               # %for.inc117
                                        #   in Loop: Header=BB123_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_14
.LBB123_17:                             # %for.end119
                                        #   in Loop: Header=BB123_12 Depth=1
	jmp	.LBB123_18
.LBB123_18:                             # %for.inc120
                                        #   in Loop: Header=BB123_12 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_12
.LBB123_19:                             # %for.end122
	jmp	.LBB123_61
.LBB123_20:                             # %if.else
	cmpl	$0, -40(%rbp)
	je	.LBB123_22
# %bb.21:                               # %lor.lhs.false
	cmpl	$2, -40(%rbp)
	jne	.LBB123_31
.LBB123_22:                             # %if.then125
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB123_23:                             # %for.cond126
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_25 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB123_30
# %bb.24:                               # %for.body128
                                        #   in Loop: Header=BB123_23 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB123_25:                             # %for.cond129
                                        #   Parent Loop BB123_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB123_28
# %bb.26:                               # %for.body131
                                        #   in Loop: Header=BB123_25 Depth=2
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.27:                               # %for.inc204
                                        #   in Loop: Header=BB123_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_25
.LBB123_28:                             # %for.end206
                                        #   in Loop: Header=BB123_23 Depth=1
	jmp	.LBB123_29
.LBB123_29:                             # %for.inc207
                                        #   in Loop: Header=BB123_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_23
.LBB123_30:                             # %for.end209
	jmp	.LBB123_40
.LBB123_31:                             # %if.else210
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB123_32:                             # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_34 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB123_39
# %bb.33:                               # %for.body213
                                        #   in Loop: Header=BB123_32 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB123_34:                             # %for.cond214
                                        #   Parent Loop BB123_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB123_37
# %bb.35:                               # %for.body216
                                        #   in Loop: Header=BB123_34 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.36:                               # %for.inc233
                                        #   in Loop: Header=BB123_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_34
.LBB123_37:                             # %for.end235
                                        #   in Loop: Header=BB123_32 Depth=1
	jmp	.LBB123_38
.LBB123_38:                             # %for.inc236
                                        #   in Loop: Header=BB123_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_32
.LBB123_39:                             # %for.end238
	jmp	.LBB123_40
.LBB123_40:                             # %if.end239
	cmpl	$1, -40(%rbp)
	je	.LBB123_42
# %bb.41:                               # %lor.lhs.false241
	cmpl	$2, -40(%rbp)
	jne	.LBB123_51
.LBB123_42:                             # %if.then243
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB123_43:                             # %for.cond244
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_45 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB123_50
# %bb.44:                               # %for.body246
                                        #   in Loop: Header=BB123_43 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB123_45:                             # %for.cond247
                                        #   Parent Loop BB123_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB123_48
# %bb.46:                               # %for.body249
                                        #   in Loop: Header=BB123_45 Depth=2
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-64(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.47:                               # %for.inc322
                                        #   in Loop: Header=BB123_45 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_45
.LBB123_48:                             # %for.end324
                                        #   in Loop: Header=BB123_43 Depth=1
	jmp	.LBB123_49
.LBB123_49:                             # %for.inc325
                                        #   in Loop: Header=BB123_43 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_43
.LBB123_50:                             # %for.end327
	jmp	.LBB123_60
.LBB123_51:                             # %if.else328
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB123_52:                             # %for.cond329
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB123_59
# %bb.53:                               # %for.body331
                                        #   in Loop: Header=BB123_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB123_54:                             # %for.cond332
                                        #   Parent Loop BB123_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB123_57
# %bb.55:                               # %for.body334
                                        #   in Loop: Header=BB123_54 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	addq	$64, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.56:                               # %for.inc351
                                        #   in Loop: Header=BB123_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_54
.LBB123_57:                             # %for.end353
                                        #   in Loop: Header=BB123_52 Depth=1
	jmp	.LBB123_58
.LBB123_58:                             # %for.inc354
                                        #   in Loop: Header=BB123_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_52
.LBB123_59:                             # %for.end356
	jmp	.LBB123_60
.LBB123_60:                             # %if.end357
	jmp	.LBB123_61
.LBB123_61:                             # %if.end358
	cmpl	$1021548618, -72(%rbp)  # imm = 0x3CE3984A
	jne	.LBB123_63
.LBB123_62:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB123_63:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB123_62
.Lfunc_end123:
	.size	StoreNewMotionVectorsBlock8x8.94, .Lfunc_end123-StoreNewMotionVectorsBlock8x8.94
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_4x4IntraBlocks.95
.LCPI124_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI124_1:
	.quad	4616189618054758400     # double 4
	.text
	.globl	Mode_Decision_for_4x4IntraBlocks.95
	.p2align	4, 0x90
	.type	Mode_Decision_for_4x4IntraBlocks.95,@function
Mode_Decision_for_4x4IntraBlocks.95:    # @Mode_Decision_for_4x4IntraBlocks.95
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$488, %rsp              # imm = 0x1E8
	.cfi_offset %rbx, -24
	vmovsd	.LCPI124_0(%rip), %xmm1 # xmm1 = mem[0],zero
	movl	$1308704623, -164(%rbp) # imm = 0x4E013F6F
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	vmovsd	%xmm0, -144(%rbp)
	movq	%rdx, -152(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -40(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -176(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -180(%rbp)
	vmovsd	%xmm1, -128(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rax
	movl	524(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %esi
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-36(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-232(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB124_8
# %bb.1:                                # %if.then
	cmpl	$0, -208(%rbp)
	je	.LBB124_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-204(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB124_4
.LBB124_3:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB124_4
.LBB124_4:                              # %cond.end
	movl	%eax, -208(%rbp)
	cmpl	$0, -232(%rbp)
	je	.LBB124_6
# %bb.5:                                # %cond.true25
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-228(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB124_7
.LBB124_6:                              # %cond.false30
	xorl	%eax, %eax
	jmp	.LBB124_7
.LBB124_7:                              # %cond.end31
	movl	%eax, -232(%rbp)
.LBB124_8:                              # %if.end
	cmpl	$0, -232(%rbp)
	je	.LBB124_10
# %bb.9:                                # %cond.true36
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-216(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-212(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB124_11
.LBB124_10:                             # %cond.false41
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB124_11
.LBB124_11:                             # %cond.end42
	movl	%eax, -116(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB124_13
# %bb.12:                               # %cond.true46
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB124_14
.LBB124_13:                             # %cond.false54
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB124_14
.LBB124_14:                             # %cond.end55
	movl	%eax, -120(%rbp)
	cmpl	$0, -116(%rbp)
	jl	.LBB124_16
# %bb.15:                               # %lor.lhs.false
	cmpl	$0, -120(%rbp)
	jge	.LBB124_17
.LBB124_16:                             # %cond.true58
	movl	$2, %eax
	jmp	.LBB124_21
.LBB124_17:                             # %cond.false59
	movl	-116(%rbp), %eax
	cmpl	-120(%rbp), %eax
	jge	.LBB124_19
# %bb.18:                               # %cond.true61
	movl	-116(%rbp), %eax
	jmp	.LBB124_20
.LBB124_19:                             # %cond.false62
	movl	-120(%rbp), %eax
.LBB124_20:                             # %cond.end63
.LBB124_21:                             # %cond.end65
	movl	%eax, -100(%rbp)
	movq	-152(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	-64(%rbp), %edi
	movl	-48(%rbp), %esi
	leaq	-160(%rbp), %rdx
	leaq	-184(%rbp), %rcx
	leaq	-156(%rbp), %r8
	callq	intrapred_luma
	movl	$0, -44(%rbp)
.LBB124_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_49 Depth 2
                                        #       Child Loop BB124_51 Depth 3
                                        #     Child Loop BB124_64 Depth 2
                                        #       Child Loop BB124_66 Depth 3
                                        #     Child Loop BB124_73 Depth 2
                                        #       Child Loop BB124_75 Depth 3
                                        #     Child Loop BB124_81 Depth 2
                                        #       Child Loop BB124_83 Depth 3
                                        #     Child Loop BB124_91 Depth 2
                                        #       Child Loop BB124_93 Depth 3
                                        #     Child Loop BB124_99 Depth 2
                                        #       Child Loop BB124_101 Depth 3
                                        #     Child Loop BB124_107 Depth 2
                                        #       Child Loop BB124_109 Depth 3
                                        #     Child Loop BB124_115 Depth 2
                                        #       Child Loop BB124_117 Depth 3
                                        #     Child Loop BB124_123 Depth 2
                                        #       Child Loop BB124_125 Depth 3
                                        #     Child Loop BB124_131 Depth 2
                                        #       Child Loop BB124_133 Depth 3
                                        #     Child Loop BB124_166 Depth 2
                                        #       Child Loop BB124_168 Depth 3
                                        #     Child Loop BB124_175 Depth 2
                                        #       Child Loop BB124_177 Depth 3
                                        #     Child Loop BB124_183 Depth 2
                                        #       Child Loop BB124_185 Depth 3
                                        #     Child Loop BB124_191 Depth 2
                                        #       Child Loop BB124_193 Depth 3
                                        #     Child Loop BB124_199 Depth 2
                                        #       Child Loop BB124_201 Depth 3
                                        #         Child Loop BB124_203 Depth 4
                                        #     Child Loop BB124_211 Depth 2
                                        #       Child Loop BB124_213 Depth 3
	cmpl	$9, -44(%rbp)
	jge	.LBB124_224
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB124_22 Depth=1
	cmpl	$2, -44(%rbp)
	movb	$1, %al
	je	.LBB124_32
# %bb.24:                               # %lor.lhs.false69
                                        #   in Loop: Header=BB124_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB124_27
# %bb.25:                               # %lor.lhs.false71
                                        #   in Loop: Header=BB124_22 Depth=1
	cmpl	$7, -44(%rbp)
	je	.LBB124_27
# %bb.26:                               # %lor.lhs.false73
                                        #   in Loop: Header=BB124_22 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB124_28
.LBB124_27:                             # %land.lhs.true
                                        #   in Loop: Header=BB124_22 Depth=1
	cmpl	$0, -184(%rbp)
	movb	$1, %al
	jne	.LBB124_32
.LBB124_28:                             # %lor.lhs.false76
                                        #   in Loop: Header=BB124_22 Depth=1
	cmpl	$1, -44(%rbp)
	je	.LBB124_30
# %bb.29:                               # %lor.lhs.false78
                                        #   in Loop: Header=BB124_22 Depth=1
	cmpl	$8, -44(%rbp)
	jne	.LBB124_31
.LBB124_30:                             # %land.lhs.true80
                                        #   in Loop: Header=BB124_22 Depth=1
	cmpl	$0, -160(%rbp)
	movb	$1, %al
	jne	.LBB124_32
.LBB124_31:                             # %lor.rhs
                                        #   in Loop: Header=BB124_22 Depth=1
	cmpl	$0, -156(%rbp)
	setne	%al
.LBB124_32:                             # %lor.end
                                        #   in Loop: Header=BB124_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -168(%rbp)
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB124_34
# %bb.33:                               # %lor.lhs.false84
                                        #   in Loop: Header=BB124_22 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB124_46
.LBB124_34:                             # %if.then86
                                        #   in Loop: Header=BB124_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2400(%rax)
	je	.LBB124_38
# %bb.35:                               # %land.lhs.true88
                                        #   in Loop: Header=BB124_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB124_37
# %bb.36:                               # %lor.lhs.false90
                                        #   in Loop: Header=BB124_22 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB124_38
.LBB124_37:                             # %if.then92
                                        #   in Loop: Header=BB124_22 Depth=1
	jmp	.LBB124_223
.LBB124_38:                             # %if.end93
                                        #   in Loop: Header=BB124_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2404(%rax)
	je	.LBB124_42
# %bb.39:                               # %land.lhs.true95
                                        #   in Loop: Header=BB124_22 Depth=1
	cmpl	$3, -44(%rbp)
	je	.LBB124_41
# %bb.40:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB124_22 Depth=1
	cmpl	$4, -44(%rbp)
	jne	.LBB124_42
.LBB124_41:                             # %if.then99
                                        #   in Loop: Header=BB124_22 Depth=1
	jmp	.LBB124_223
.LBB124_42:                             # %if.end100
                                        #   in Loop: Header=BB124_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2408(%rax)
	je	.LBB124_45
# %bb.43:                               # %land.lhs.true102
                                        #   in Loop: Header=BB124_22 Depth=1
	cmpl	$5, -44(%rbp)
	jl	.LBB124_45
# %bb.44:                               # %if.then104
                                        #   in Loop: Header=BB124_22 Depth=1
	jmp	.LBB124_223
.LBB124_45:                             # %if.end105
                                        #   in Loop: Header=BB124_22 Depth=1
	jmp	.LBB124_46
.LBB124_46:                             # %if.end106
                                        #   in Loop: Header=BB124_22 Depth=1
	cmpl	$0, -168(%rbp)
	je	.LBB124_222
# %bb.47:                               # %if.then108
                                        #   in Loop: Header=BB124_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB124_62
# %bb.48:                               # %if.then110
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	$0, -16(%rbp)
	movl	$0, -108(%rbp)
.LBB124_49:                             # %for.cond111
                                        #   Parent Loop BB124_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_51 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB124_56
# %bb.50:                               # %for.body113
                                        #   in Loop: Header=BB124_49 Depth=2
	movl	$0, -12(%rbp)
.LBB124_51:                             # %for.cond114
                                        #   Parent Loop BB124_22 Depth=1
                                        #     Parent Loop BB124_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB124_54
# %bb.52:                               # %for.body116
                                        #   in Loop: Header=BB124_51 Depth=3
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-108(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.53:                               # %for.inc
                                        #   in Loop: Header=BB124_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB124_51
.LBB124_54:                             # %for.end
                                        #   in Loop: Header=BB124_49 Depth=2
	jmp	.LBB124_55
.LBB124_55:                             # %for.inc133
                                        #   in Loop: Header=BB124_49 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_49
.LBB124_56:                             # %for.end135
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	-44(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jne	.LBB124_58
# %bb.57:                               # %cond.true138
                                        #   in Loop: Header=BB124_22 Depth=1
	xorl	%eax, %eax
	jmp	.LBB124_59
.LBB124_58:                             # %cond.false139
                                        #   in Loop: Header=BB124_22 Depth=1
	vmovsd	.LCPI124_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-144(%rbp), %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB124_59:                             # %cond.end142
                                        #   in Loop: Header=BB124_22 Depth=1
	leaq	-368(%rbp), %rdi
	movl	%eax, -104(%rbp)
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-104(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB124_61
# %bb.60:                               # %if.then147
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB124_61:                             # %if.end148
                                        #   in Loop: Header=BB124_22 Depth=1
	jmp	.LBB124_221
.LBB124_62:                             # %if.else
                                        #   in Loop: Header=BB124_22 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB124_90
# %bb.63:                               # %if.then150
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	$0, -16(%rbp)
.LBB124_64:                             # %for.cond151
                                        #   Parent Loop BB124_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_66 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB124_71
# %bb.65:                               # %for.body154
                                        #   in Loop: Header=BB124_64 Depth=2
	movl	$0, -12(%rbp)
.LBB124_66:                             # %for.cond155
                                        #   Parent Loop BB124_22 Depth=1
                                        #     Parent Loop BB124_64 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB124_69
# %bb.67:                               # %for.body158
                                        #   in Loop: Header=BB124_66 Depth=3
	movq	img, %rax
	addq	$184, %rax
	movslq	-44(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc192
                                        #   in Loop: Header=BB124_66 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_66
.LBB124_69:                             # %for.end194
                                        #   in Loop: Header=BB124_64 Depth=2
	jmp	.LBB124_70
.LBB124_70:                             # %for.inc195
                                        #   in Loop: Header=BB124_64 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_64
.LBB124_71:                             # %for.end197
                                        #   in Loop: Header=BB124_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-100(%rbp), %r8d
	leaq	-112(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vmovsd	%xmm0, -136(%rbp)
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB124_89
# %bb.72:                               # %if.then201
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	$0, -16(%rbp)
.LBB124_73:                             # %for.cond202
                                        #   Parent Loop BB124_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_75 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB124_80
# %bb.74:                               # %for.body205
                                        #   in Loop: Header=BB124_73 Depth=2
	movl	$0, -12(%rbp)
.LBB124_75:                             # %for.cond206
                                        #   Parent Loop BB124_22 Depth=1
                                        #     Parent Loop BB124_73 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB124_78
# %bb.76:                               # %for.body209
                                        #   in Loop: Header=BB124_75 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.77:                               # %for.inc222
                                        #   in Loop: Header=BB124_75 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_75
.LBB124_78:                             # %for.end224
                                        #   in Loop: Header=BB124_73 Depth=2
	jmp	.LBB124_79
.LBB124_79:                             # %for.inc225
                                        #   in Loop: Header=BB124_73 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_73
.LBB124_80:                             # %for.end227
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	$0, -24(%rbp)
.LBB124_81:                             # %for.cond228
                                        #   Parent Loop BB124_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_83 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB124_88
# %bb.82:                               # %for.body231
                                        #   in Loop: Header=BB124_81 Depth=2
	movl	$0, -20(%rbp)
.LBB124_83:                             # %for.cond232
                                        #   Parent Loop BB124_22 Depth=1
                                        #     Parent Loop BB124_81 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB124_86
# %bb.84:                               # %for.body235
                                        #   in Loop: Header=BB124_83 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.85:                               # %for.inc247
                                        #   in Loop: Header=BB124_83 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_83
.LBB124_86:                             # %for.end249
                                        #   in Loop: Header=BB124_81 Depth=2
	jmp	.LBB124_87
.LBB124_87:                             # %for.inc250
                                        #   in Loop: Header=BB124_81 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_81
.LBB124_88:                             # %for.end252
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	-112(%rbp), %eax
	movl	%eax, -92(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB124_89:                             # %if.end253
                                        #   in Loop: Header=BB124_22 Depth=1
	movq	cs_cm, %rdi
	callq	reset_coding_state
	jmp	.LBB124_220
.LBB124_90:                             # %if.else254
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	$0, -16(%rbp)
.LBB124_91:                             # %for.cond255
                                        #   Parent Loop BB124_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_93 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB124_98
# %bb.92:                               # %for.body258
                                        #   in Loop: Header=BB124_91 Depth=2
	movl	$0, -12(%rbp)
.LBB124_93:                             # %for.cond259
                                        #   Parent Loop BB124_22 Depth=1
                                        #     Parent Loop BB124_91 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB124_96
# %bb.94:                               # %for.body262
                                        #   in Loop: Header=BB124_93 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.95:                               # %for.inc343
                                        #   in Loop: Header=BB124_93 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_93
.LBB124_96:                             # %for.end345
                                        #   in Loop: Header=BB124_91 Depth=2
	jmp	.LBB124_97
.LBB124_97:                             # %for.inc346
                                        #   in Loop: Header=BB124_91 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_91
.LBB124_98:                             # %for.end348
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	$0, -16(%rbp)
.LBB124_99:                             # %for.cond349
                                        #   Parent Loop BB124_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_101 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB124_106
# %bb.100:                              # %for.body352
                                        #   in Loop: Header=BB124_99 Depth=2
	movl	$0, -12(%rbp)
.LBB124_101:                            # %for.cond353
                                        #   Parent Loop BB124_22 Depth=1
                                        #     Parent Loop BB124_99 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB124_104
# %bb.102:                              # %for.body356
                                        #   in Loop: Header=BB124_101 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.103:                              # %for.inc366
                                        #   in Loop: Header=BB124_101 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_101
.LBB124_104:                            # %for.end368
                                        #   in Loop: Header=BB124_99 Depth=2
	jmp	.LBB124_105
.LBB124_105:                            # %for.inc369
                                        #   in Loop: Header=BB124_99 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_99
.LBB124_106:                            # %for.end371
                                        #   in Loop: Header=BB124_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-100(%rbp), %r8d
	leaq	-112(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -96(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB124_107:                            # %for.cond374
                                        #   Parent Loop BB124_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_109 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB124_114
# %bb.108:                              # %for.body377
                                        #   in Loop: Header=BB124_107 Depth=2
	movl	$0, -12(%rbp)
.LBB124_109:                            # %for.cond378
                                        #   Parent Loop BB124_22 Depth=1
                                        #     Parent Loop BB124_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB124_112
# %bb.110:                              # %for.body381
                                        #   in Loop: Header=BB124_109 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc400
                                        #   in Loop: Header=BB124_109 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_109
.LBB124_112:                            # %for.end402
                                        #   in Loop: Header=BB124_107 Depth=2
	jmp	.LBB124_113
.LBB124_113:                            # %for.inc403
                                        #   in Loop: Header=BB124_107 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_107
.LBB124_114:                            # %for.end405
                                        #   in Loop: Header=BB124_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %edi
	addl	$4, %edi
	movl	-32(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-96(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	$0, -16(%rbp)
.LBB124_115:                            # %for.cond409
                                        #   Parent Loop BB124_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_117 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB124_122
# %bb.116:                              # %for.body412
                                        #   in Loop: Header=BB124_115 Depth=2
	movl	$0, -12(%rbp)
.LBB124_117:                            # %for.cond413
                                        #   Parent Loop BB124_22 Depth=1
                                        #     Parent Loop BB124_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB124_120
# %bb.118:                              # %for.body416
                                        #   in Loop: Header=BB124_117 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc435
                                        #   in Loop: Header=BB124_117 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_117
.LBB124_120:                            # %for.end437
                                        #   in Loop: Header=BB124_115 Depth=2
	jmp	.LBB124_121
.LBB124_121:                            # %for.inc438
                                        #   in Loop: Header=BB124_115 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_115
.LBB124_122:                            # %for.end440
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	-28(%rbp), %edi
	addl	$8, %edi
	movl	-32(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-96(%rbp), %eax
	movl	%eax, -96(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB124_123:                            # %for.cond444
                                        #   Parent Loop BB124_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_125 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB124_130
# %bb.124:                              # %for.body447
                                        #   in Loop: Header=BB124_123 Depth=2
	movl	$0, -12(%rbp)
.LBB124_125:                            # %for.cond448
                                        #   Parent Loop BB124_22 Depth=1
                                        #     Parent Loop BB124_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB124_128
# %bb.126:                              # %for.body451
                                        #   in Loop: Header=BB124_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.127:                              # %for.inc461
                                        #   in Loop: Header=BB124_125 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_125
.LBB124_128:                            # %for.end463
                                        #   in Loop: Header=BB124_123 Depth=2
	jmp	.LBB124_129
.LBB124_129:                            # %for.inc464
                                        #   in Loop: Header=BB124_123 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_123
.LBB124_130:                            # %for.end466
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	$0, -16(%rbp)
.LBB124_131:                            # %for.cond467
                                        #   Parent Loop BB124_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_133 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB124_165
# %bb.132:                              # %for.body470
                                        #   in Loop: Header=BB124_131 Depth=2
	movl	$0, -12(%rbp)
.LBB124_133:                            # %for.cond471
                                        #   Parent Loop BB124_22 Depth=1
                                        #     Parent Loop BB124_131 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB124_163
# %bb.134:                              # %for.body474
                                        #   in Loop: Header=BB124_133 Depth=3
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -72(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -68(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB124_136
# %bb.135:                              # %cond.true515
                                        #   in Loop: Header=BB124_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB124_137
.LBB124_136:                            # %cond.false516
                                        #   in Loop: Header=BB124_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB124_137:                            # %cond.end529
                                        #   in Loop: Header=BB124_133 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB124_139
# %bb.138:                              # %cond.true533
                                        #   in Loop: Header=BB124_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB124_143
.LBB124_139:                            # %cond.false535
                                        #   in Loop: Header=BB124_133 Depth=3
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB124_141
# %bb.140:                              # %cond.true550
                                        #   in Loop: Header=BB124_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB124_142
.LBB124_141:                            # %cond.false551
                                        #   in Loop: Header=BB124_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB124_142:                            # %cond.end564
                                        #   in Loop: Header=BB124_133 Depth=3
.LBB124_143:                            # %cond.end566
                                        #   in Loop: Header=BB124_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-44(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB124_145
# %bb.144:                              # %cond.true587
                                        #   in Loop: Header=BB124_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB124_146
.LBB124_145:                            # %cond.false588
                                        #   in Loop: Header=BB124_133 Depth=3
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB124_146:                            # %cond.end598
                                        #   in Loop: Header=BB124_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB124_148
# %bb.147:                              # %cond.true602
                                        #   in Loop: Header=BB124_133 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB124_152
.LBB124_148:                            # %cond.false604
                                        #   in Loop: Header=BB124_133 Depth=3
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB124_150
# %bb.149:                              # %cond.true616
                                        #   in Loop: Header=BB124_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB124_151
.LBB124_150:                            # %cond.false617
                                        #   in Loop: Header=BB124_133 Depth=3
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB124_151:                            # %cond.end627
                                        #   in Loop: Header=BB124_133 Depth=3
.LBB124_152:                            # %cond.end629
                                        #   in Loop: Header=BB124_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB124_154
# %bb.153:                              # %cond.true654
                                        #   in Loop: Header=BB124_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB124_155
.LBB124_154:                            # %cond.false655
                                        #   in Loop: Header=BB124_133 Depth=3
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB124_155:                            # %cond.end668
                                        #   in Loop: Header=BB124_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB124_157
# %bb.156:                              # %cond.true672
                                        #   in Loop: Header=BB124_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB124_161
.LBB124_157:                            # %cond.false674
                                        #   in Loop: Header=BB124_133 Depth=3
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB124_159
# %bb.158:                              # %cond.true689
                                        #   in Loop: Header=BB124_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB124_160
.LBB124_159:                            # %cond.false690
                                        #   in Loop: Header=BB124_133 Depth=3
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB124_160:                            # %cond.end703
                                        #   in Loop: Header=BB124_133 Depth=3
.LBB124_161:                            # %cond.end705
                                        #   in Loop: Header=BB124_133 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.162:                              # %for.inc716
                                        #   in Loop: Header=BB124_133 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_133
.LBB124_163:                            # %for.end718
                                        #   in Loop: Header=BB124_131 Depth=2
	jmp	.LBB124_164
.LBB124_164:                            # %for.inc719
                                        #   in Loop: Header=BB124_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_131
.LBB124_165:                            # %for.end721
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	$0, -88(%rbp)
	movl	$0, -24(%rbp)
.LBB124_166:                            # %for.cond722
                                        #   Parent Loop BB124_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_168 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB124_173
# %bb.167:                              # %for.body725
                                        #   in Loop: Header=BB124_166 Depth=2
	movl	-64(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB124_168:                            # %for.cond726
                                        #   Parent Loop BB124_22 Depth=1
                                        #     Parent Loop BB124_166 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_171
# %bb.169:                              # %for.body730
                                        #   in Loop: Header=BB124_168 Depth=3
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgY_org, %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
# %bb.170:                              # %for.inc829
                                        #   in Loop: Header=BB124_168 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_168
.LBB124_171:                            # %for.end831
                                        #   in Loop: Header=BB124_166 Depth=2
	jmp	.LBB124_172
.LBB124_172:                            # %for.inc832
                                        #   in Loop: Header=BB124_166 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_166
.LBB124_173:                            # %for.end834
                                        #   in Loop: Header=BB124_22 Depth=1
	vcvtsi2sdl	-88(%rbp), %xmm0, %xmm0
	vmovsd	-144(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-96(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -136(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB124_219
# %bb.174:                              # %if.then841
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	$0, -16(%rbp)
.LBB124_175:                            # %for.cond842
                                        #   Parent Loop BB124_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_177 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB124_182
# %bb.176:                              # %for.body845
                                        #   in Loop: Header=BB124_175 Depth=2
	movl	$0, -12(%rbp)
.LBB124_177:                            # %for.cond846
                                        #   Parent Loop BB124_22 Depth=1
                                        #     Parent Loop BB124_175 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB124_180
# %bb.178:                              # %for.body849
                                        #   in Loop: Header=BB124_177 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.179:                              # %for.inc863
                                        #   in Loop: Header=BB124_177 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_177
.LBB124_180:                            # %for.end865
                                        #   in Loop: Header=BB124_175 Depth=2
	jmp	.LBB124_181
.LBB124_181:                            # %for.inc866
                                        #   in Loop: Header=BB124_175 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_175
.LBB124_182:                            # %for.end868
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	$0, -16(%rbp)
.LBB124_183:                            # %for.cond869
                                        #   Parent Loop BB124_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_185 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB124_190
# %bb.184:                              # %for.body872
                                        #   in Loop: Header=BB124_183 Depth=2
	movl	$0, -12(%rbp)
.LBB124_185:                            # %for.cond873
                                        #   Parent Loop BB124_22 Depth=1
                                        #     Parent Loop BB124_183 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB124_188
# %bb.186:                              # %for.body876
                                        #   in Loop: Header=BB124_185 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	movabsq	$cofAC4x4_chroma, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.187:                              # %for.inc891
                                        #   in Loop: Header=BB124_185 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_185
.LBB124_188:                            # %for.end893
                                        #   in Loop: Header=BB124_183 Depth=2
	jmp	.LBB124_189
.LBB124_189:                            # %for.inc894
                                        #   in Loop: Header=BB124_183 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_183
.LBB124_190:                            # %for.end896
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	$0, -16(%rbp)
.LBB124_191:                            # %for.cond897
                                        #   Parent Loop BB124_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_193 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB124_198
# %bb.192:                              # %for.body900
                                        #   in Loop: Header=BB124_191 Depth=2
	movl	$0, -12(%rbp)
.LBB124_193:                            # %for.cond901
                                        #   Parent Loop BB124_22 Depth=1
                                        #     Parent Loop BB124_191 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB124_196
# %bb.194:                              # %for.body904
                                        #   in Loop: Header=BB124_193 Depth=3
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	imulq	$72, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.195:                              # %for.inc919
                                        #   in Loop: Header=BB124_193 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_193
.LBB124_196:                            # %for.end921
                                        #   in Loop: Header=BB124_191 Depth=2
	jmp	.LBB124_197
.LBB124_197:                            # %for.inc922
                                        #   in Loop: Header=BB124_191 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_191
.LBB124_198:                            # %for.end924
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	$0, -12(%rbp)
.LBB124_199:                            # %for.cond925
                                        #   Parent Loop BB124_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_201 Depth 3
                                        #         Child Loop BB124_203 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB124_210
# %bb.200:                              # %for.body928
                                        #   in Loop: Header=BB124_199 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movl	$0, -24(%rbp)
.LBB124_201:                            # %for.cond985
                                        #   Parent Loop BB124_22 Depth=1
                                        #     Parent Loop BB124_199 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB124_203 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB124_208
# %bb.202:                              # %for.body988
                                        #   in Loop: Header=BB124_201 Depth=3
	movl	$0, -20(%rbp)
.LBB124_203:                            # %for.cond989
                                        #   Parent Loop BB124_22 Depth=1
                                        #     Parent Loop BB124_199 Depth=2
                                        #       Parent Loop BB124_201 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -20(%rbp)
	jge	.LBB124_206
# %bb.204:                              # %for.body992
                                        #   in Loop: Header=BB124_203 Depth=4
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-496(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.205:                              # %for.inc1009
                                        #   in Loop: Header=BB124_203 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_203
.LBB124_206:                            # %for.end1011
                                        #   in Loop: Header=BB124_201 Depth=3
	jmp	.LBB124_207
.LBB124_207:                            # %for.inc1012
                                        #   in Loop: Header=BB124_201 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_201
.LBB124_208:                            # %for.end1014
                                        #   in Loop: Header=BB124_199 Depth=2
	jmp	.LBB124_209
.LBB124_209:                            # %for.inc1015
                                        #   in Loop: Header=BB124_199 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_199
.LBB124_210:                            # %for.end1017
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	$0, -24(%rbp)
.LBB124_211:                            # %for.cond1018
                                        #   Parent Loop BB124_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_213 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB124_218
# %bb.212:                              # %for.body1021
                                        #   in Loop: Header=BB124_211 Depth=2
	movl	$0, -20(%rbp)
.LBB124_213:                            # %for.cond1022
                                        #   Parent Loop BB124_22 Depth=1
                                        #     Parent Loop BB124_211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB124_216
# %bb.214:                              # %for.body1025
                                        #   in Loop: Header=BB124_213 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.215:                              # %for.inc1038
                                        #   in Loop: Header=BB124_213 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_213
.LBB124_216:                            # %for.end1040
                                        #   in Loop: Header=BB124_211 Depth=2
	jmp	.LBB124_217
.LBB124_217:                            # %for.inc1041
                                        #   in Loop: Header=BB124_211 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_211
.LBB124_218:                            # %for.end1043
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	-112(%rbp), %eax
	movl	%eax, -92(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB124_219:                            # %if.end1044
                                        #   in Loop: Header=BB124_22 Depth=1
	jmp	.LBB124_220
.LBB124_220:                            # %if.end1045
                                        #   in Loop: Header=BB124_22 Depth=1
	jmp	.LBB124_221
.LBB124_221:                            # %if.end1046
                                        #   in Loop: Header=BB124_22 Depth=1
	jmp	.LBB124_222
.LBB124_222:                            # %if.end1047
                                        #   in Loop: Header=BB124_22 Depth=1
	jmp	.LBB124_223
.LBB124_223:                            # %for.inc1048
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB124_22
.LBB124_224:                            # %for.end1050
	movl	-60(%rbp), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-176(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-180(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB124_226
# %bb.225:                              # %cond.true1058
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB124_230
.LBB124_226:                            # %cond.false1059
	movl	-60(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB124_228
# %bb.227:                              # %cond.true1062
	movl	-60(%rbp), %eax
	jmp	.LBB124_229
.LBB124_228:                            # %cond.false1063
	movl	-60(%rbp), %eax
	subl	$1, %eax
.LBB124_229:                            # %cond.end1065
.LBB124_230:                            # %cond.end1067
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	shll	$2, %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, 332(%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB124_318
# %bb.231:                              # %if.then1079
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB124_241
# %bb.232:                              # %if.then1082
	movl	$0, -16(%rbp)
.LBB124_233:                            # %for.cond1083
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_235 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB124_240
# %bb.234:                              # %for.body1086
                                        #   in Loop: Header=BB124_233 Depth=1
	movl	$0, -12(%rbp)
.LBB124_235:                            # %for.cond1087
                                        #   Parent Loop BB124_233 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB124_238
# %bb.236:                              # %for.body1090
                                        #   in Loop: Header=BB124_235 Depth=2
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.237:                              # %for.inc1126
                                        #   in Loop: Header=BB124_235 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_235
.LBB124_238:                            # %for.end1128
                                        #   in Loop: Header=BB124_233 Depth=1
	jmp	.LBB124_239
.LBB124_239:                            # %for.inc1129
                                        #   in Loop: Header=BB124_233 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_233
.LBB124_240:                            # %for.end1131
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	leaq	-172(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -92(%rbp)
	jmp	.LBB124_317
.LBB124_241:                            # %if.else1133
	movl	$0, -16(%rbp)
.LBB124_242:                            # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_244 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB124_249
# %bb.243:                              # %for.body1137
                                        #   in Loop: Header=BB124_242 Depth=1
	movl	$0, -12(%rbp)
.LBB124_244:                            # %for.cond1138
                                        #   Parent Loop BB124_242 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB124_247
# %bb.245:                              # %for.body1141
                                        #   in Loop: Header=BB124_244 Depth=2
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.246:                              # %for.inc1224
                                        #   in Loop: Header=BB124_244 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_244
.LBB124_247:                            # %for.end1226
                                        #   in Loop: Header=BB124_242 Depth=1
	jmp	.LBB124_248
.LBB124_248:                            # %for.inc1227
                                        #   in Loop: Header=BB124_242 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_242
.LBB124_249:                            # %for.end1229
	movl	$0, -16(%rbp)
.LBB124_250:                            # %for.cond1230
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_252 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB124_257
# %bb.251:                              # %for.body1233
                                        #   in Loop: Header=BB124_250 Depth=1
	movl	$0, -12(%rbp)
.LBB124_252:                            # %for.cond1234
                                        #   Parent Loop BB124_250 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB124_255
# %bb.253:                              # %for.body1237
                                        #   in Loop: Header=BB124_252 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.254:                              # %for.inc1247
                                        #   in Loop: Header=BB124_252 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_252
.LBB124_255:                            # %for.end1249
                                        #   in Loop: Header=BB124_250 Depth=1
	jmp	.LBB124_256
.LBB124_256:                            # %for.inc1250
                                        #   in Loop: Header=BB124_250 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_250
.LBB124_257:                            # %for.end1252
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	leaq	-172(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -92(%rbp)
	movl	$0, -16(%rbp)
.LBB124_258:                            # %for.cond1254
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_260 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB124_265
# %bb.259:                              # %for.body1257
                                        #   in Loop: Header=BB124_258 Depth=1
	movl	$0, -12(%rbp)
.LBB124_260:                            # %for.cond1258
                                        #   Parent Loop BB124_258 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB124_263
# %bb.261:                              # %for.body1261
                                        #   in Loop: Header=BB124_260 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.262:                              # %for.inc1280
                                        #   in Loop: Header=BB124_260 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_260
.LBB124_263:                            # %for.end1282
                                        #   in Loop: Header=BB124_258 Depth=1
	jmp	.LBB124_264
.LBB124_264:                            # %for.inc1283
                                        #   in Loop: Header=BB124_258 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_258
.LBB124_265:                            # %for.end1285
	movl	-28(%rbp), %esi
	addl	$4, %esi
	movl	-32(%rbp), %edx
	xorl	%edi, %edi
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%edx, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rbx,%rax,4)
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level_temp, %rsi
	addq	%rax, %rsi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rsi,%rax,4), %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%rbx,%rax,4)
	movl	$0, -16(%rbp)
.LBB124_266:                            # %for.cond1324
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_268 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB124_273
# %bb.267:                              # %for.body1327
                                        #   in Loop: Header=BB124_266 Depth=1
	movl	$0, -12(%rbp)
.LBB124_268:                            # %for.cond1328
                                        #   Parent Loop BB124_266 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB124_271
# %bb.269:                              # %for.body1331
                                        #   in Loop: Header=BB124_268 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.270:                              # %for.inc1350
                                        #   in Loop: Header=BB124_268 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_268
.LBB124_271:                            # %for.end1352
                                        #   in Loop: Header=BB124_266 Depth=1
	jmp	.LBB124_272
.LBB124_272:                            # %for.inc1353
                                        #   in Loop: Header=BB124_266 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_266
.LBB124_273:                            # %for.end1355
	movl	-28(%rbp), %esi
	addl	$8, %esi
	movl	-32(%rbp), %edx
	movl	$1, %edi
	callq	dct_chroma4x4
	movl	%eax, %r9d
	movabsq	$dc_level, %r8
	addq	$64, %r8
	movabsq	$dc_level_temp, %rdi
	addq	$64, %rdi
	movabsq	$cbp_chroma_block, %rcx
	addq	$64, %rcx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%r9d, (%rcx,%rax,4)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%r8,%rax,4)
	movl	$0, -16(%rbp)
.LBB124_274:                            # %for.cond1394
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_276 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB124_281
# %bb.275:                              # %for.body1397
                                        #   in Loop: Header=BB124_274 Depth=1
	movl	$0, -12(%rbp)
.LBB124_276:                            # %for.cond1398
                                        #   Parent Loop BB124_274 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB124_279
# %bb.277:                              # %for.body1401
                                        #   in Loop: Header=BB124_276 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.278:                              # %for.inc1411
                                        #   in Loop: Header=BB124_276 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_276
.LBB124_279:                            # %for.end1413
                                        #   in Loop: Header=BB124_274 Depth=1
	jmp	.LBB124_280
.LBB124_280:                            # %for.inc1414
                                        #   in Loop: Header=BB124_274 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_274
.LBB124_281:                            # %for.end1416
	movl	$0, -16(%rbp)
.LBB124_282:                            # %for.cond1417
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_284 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB124_316
# %bb.283:                              # %for.body1420
                                        #   in Loop: Header=BB124_282 Depth=1
	movl	$0, -12(%rbp)
.LBB124_284:                            # %for.cond1421
                                        #   Parent Loop BB124_282 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB124_314
# %bb.285:                              # %for.body1424
                                        #   in Loop: Header=BB124_284 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -72(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -68(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB124_287
# %bb.286:                              # %cond.true1466
                                        #   in Loop: Header=BB124_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB124_288
.LBB124_287:                            # %cond.false1467
                                        #   in Loop: Header=BB124_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB124_288:                            # %cond.end1480
                                        #   in Loop: Header=BB124_284 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB124_290
# %bb.289:                              # %cond.true1484
                                        #   in Loop: Header=BB124_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB124_294
.LBB124_290:                            # %cond.false1486
                                        #   in Loop: Header=BB124_284 Depth=2
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB124_292
# %bb.291:                              # %cond.true1501
                                        #   in Loop: Header=BB124_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB124_293
.LBB124_292:                            # %cond.false1502
                                        #   in Loop: Header=BB124_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB124_293:                            # %cond.end1515
                                        #   in Loop: Header=BB124_284 Depth=2
.LBB124_294:                            # %cond.end1517
                                        #   in Loop: Header=BB124_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-60(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB124_296
# %bb.295:                              # %cond.true1540
                                        #   in Loop: Header=BB124_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB124_297
.LBB124_296:                            # %cond.false1541
                                        #   in Loop: Header=BB124_284 Depth=2
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB124_297:                            # %cond.end1551
                                        #   in Loop: Header=BB124_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB124_299
# %bb.298:                              # %cond.true1555
                                        #   in Loop: Header=BB124_284 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB124_303
.LBB124_299:                            # %cond.false1557
                                        #   in Loop: Header=BB124_284 Depth=2
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB124_301
# %bb.300:                              # %cond.true1569
                                        #   in Loop: Header=BB124_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB124_302
.LBB124_301:                            # %cond.false1570
                                        #   in Loop: Header=BB124_284 Depth=2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB124_302:                            # %cond.end1580
                                        #   in Loop: Header=BB124_284 Depth=2
.LBB124_303:                            # %cond.end1582
                                        #   in Loop: Header=BB124_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB124_305
# %bb.304:                              # %cond.true1607
                                        #   in Loop: Header=BB124_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB124_306
.LBB124_305:                            # %cond.false1608
                                        #   in Loop: Header=BB124_284 Depth=2
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB124_306:                            # %cond.end1621
                                        #   in Loop: Header=BB124_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB124_308
# %bb.307:                              # %cond.true1625
                                        #   in Loop: Header=BB124_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB124_312
.LBB124_308:                            # %cond.false1627
                                        #   in Loop: Header=BB124_284 Depth=2
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB124_310
# %bb.309:                              # %cond.true1642
                                        #   in Loop: Header=BB124_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB124_311
.LBB124_310:                            # %cond.false1643
                                        #   in Loop: Header=BB124_284 Depth=2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB124_311:                            # %cond.end1656
                                        #   in Loop: Header=BB124_284 Depth=2
.LBB124_312:                            # %cond.end1658
                                        #   in Loop: Header=BB124_284 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.313:                              # %for.inc1669
                                        #   in Loop: Header=BB124_284 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_284
.LBB124_314:                            # %for.end1671
                                        #   in Loop: Header=BB124_282 Depth=1
	jmp	.LBB124_315
.LBB124_315:                            # %for.inc1672
                                        #   in Loop: Header=BB124_282 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_282
.LBB124_316:                            # %for.end1674
	jmp	.LBB124_317
.LBB124_317:                            # %if.end1675
	jmp	.LBB124_367
.LBB124_318:                            # %if.else1676
	movl	$0, -16(%rbp)
.LBB124_319:                            # %for.cond1677
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_321 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB124_326
# %bb.320:                              # %for.body1680
                                        #   in Loop: Header=BB124_319 Depth=1
	movl	$0, -12(%rbp)
.LBB124_321:                            # %for.cond1681
                                        #   Parent Loop BB124_319 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB124_324
# %bb.322:                              # %for.body1684
                                        #   in Loop: Header=BB124_321 Depth=2
	movq	cofAC4x4, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.323:                              # %for.inc1698
                                        #   in Loop: Header=BB124_321 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_321
.LBB124_324:                            # %for.end1700
                                        #   in Loop: Header=BB124_319 Depth=1
	jmp	.LBB124_325
.LBB124_325:                            # %for.inc1701
                                        #   in Loop: Header=BB124_319 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_319
.LBB124_326:                            # %for.end1703
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB124_344
# %bb.327:                              # %if.then1706
	movl	$0, -16(%rbp)
.LBB124_328:                            # %for.cond1707
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_330 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB124_335
# %bb.329:                              # %for.body1710
                                        #   in Loop: Header=BB124_328 Depth=1
	movl	$0, -12(%rbp)
.LBB124_330:                            # %for.cond1711
                                        #   Parent Loop BB124_328 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB124_333
# %bb.331:                              # %for.body1714
                                        #   in Loop: Header=BB124_330 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$72, %rax, %rax
	movabsq	$cofAC4x4_chroma, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.332:                              # %for.inc1729
                                        #   in Loop: Header=BB124_330 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_330
.LBB124_333:                            # %for.end1731
                                        #   in Loop: Header=BB124_328 Depth=1
	jmp	.LBB124_334
.LBB124_334:                            # %for.inc1732
                                        #   in Loop: Header=BB124_328 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_328
.LBB124_335:                            # %for.end1734
	movl	$0, -16(%rbp)
.LBB124_336:                            # %for.cond1735
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_338 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB124_343
# %bb.337:                              # %for.body1738
                                        #   in Loop: Header=BB124_336 Depth=1
	movl	$0, -12(%rbp)
.LBB124_338:                            # %for.cond1739
                                        #   Parent Loop BB124_336 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB124_341
# %bb.339:                              # %for.body1742
                                        #   in Loop: Header=BB124_338 Depth=2
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.340:                              # %for.inc1757
                                        #   in Loop: Header=BB124_338 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_338
.LBB124_341:                            # %for.end1759
                                        #   in Loop: Header=BB124_336 Depth=1
	jmp	.LBB124_342
.LBB124_342:                            # %for.inc1760
                                        #   in Loop: Header=BB124_336 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_336
.LBB124_343:                            # %for.end1762
	jmp	.LBB124_344
.LBB124_344:                            # %if.end1763
	movl	$0, -24(%rbp)
.LBB124_345:                            # %for.cond1764
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_347 Depth 2
	cmpl	$4, -24(%rbp)
	jge	.LBB124_352
# %bb.346:                              # %for.body1767
                                        #   in Loop: Header=BB124_345 Depth=1
	movl	$0, -20(%rbp)
.LBB124_347:                            # %for.cond1768
                                        #   Parent Loop BB124_345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB124_350
# %bb.348:                              # %for.body1771
                                        #   in Loop: Header=BB124_347 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-36(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.349:                              # %for.inc1798
                                        #   in Loop: Header=BB124_347 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_347
.LBB124_350:                            # %for.end1800
                                        #   in Loop: Header=BB124_345 Depth=1
	jmp	.LBB124_351
.LBB124_351:                            # %for.inc1801
                                        #   in Loop: Header=BB124_345 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_345
.LBB124_352:                            # %for.end1803
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB124_366
# %bb.353:                              # %if.then1806
	movl	$0, -12(%rbp)
.LBB124_354:                            # %for.cond1807
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_356 Depth 2
                                        #       Child Loop BB124_358 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB124_365
# %bb.355:                              # %for.body1810
                                        #   in Loop: Header=BB124_354 Depth=1
	movl	$0, -24(%rbp)
.LBB124_356:                            # %for.cond1811
                                        #   Parent Loop BB124_354 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_358 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB124_363
# %bb.357:                              # %for.body1814
                                        #   in Loop: Header=BB124_356 Depth=2
	movl	$0, -20(%rbp)
.LBB124_358:                            # %for.cond1815
                                        #   Parent Loop BB124_354 Depth=1
                                        #     Parent Loop BB124_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB124_361
# %bb.359:                              # %for.body1818
                                        #   in Loop: Header=BB124_358 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	leaq	-496(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.360:                              # %for.inc1835
                                        #   in Loop: Header=BB124_358 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_358
.LBB124_361:                            # %for.end1837
                                        #   in Loop: Header=BB124_356 Depth=2
	jmp	.LBB124_362
.LBB124_362:                            # %for.inc1838
                                        #   in Loop: Header=BB124_356 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_356
.LBB124_363:                            # %for.end1840
                                        #   in Loop: Header=BB124_354 Depth=1
	jmp	.LBB124_364
.LBB124_364:                            # %for.inc1841
                                        #   in Loop: Header=BB124_354 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_354
.LBB124_365:                            # %for.end1843
	jmp	.LBB124_366
.LBB124_366:                            # %if.end1844
	jmp	.LBB124_367
.LBB124_367:                            # %if.end1845
	movl	-92(%rbp), %ebx
	cmpl	$1308704623, -164(%rbp) # imm = 0x4E013F6F
	jne	.LBB124_369
.LBB124_368:
	movl	%ebx, %eax
	addq	$488, %rsp              # imm = 0x1E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB124_369:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB124_368
.Lfunc_end124:
	.size	Mode_Decision_for_4x4IntraBlocks.95, .Lfunc_end124-Mode_Decision_for_4x4IntraBlocks.95
	.cfi_endproc
                                        # -- End function
	.globl	Intra16x16_Mode_Decision.96 # -- Begin function Intra16x16_Mode_Decision.96
	.p2align	4, 0x90
	.type	Intra16x16_Mode_Decision.96,@function
Intra16x16_Mode_Decision.96:            # @Intra16x16_Mode_Decision.96
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1058204774, -56(%rbp)  # imm = 0x3F12EC66
	movq	%rdi, -64(%rbp)
	movq	%rsi, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	imgY_org, %rax
	movq	%rax, -80(%rbp)
	movq	imgUV_org, %rax
	movq	%rax, -72(%rbp)
	movb	$0, %al
	callq	intrapred_luma_16x16
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB125_2
# %bb.1:                                # %if.then
	movq	-48(%rbp), %rdi
	callq	find_sad_16x16
.LBB125_2:                              # %if.end
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB125_12
# %bb.3:                                # %if.then3
	movl	$0, -8(%rbp)
.LBB125_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_6 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB125_11
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB125_4 Depth=1
	movl	$0, -4(%rbp)
.LBB125_6:                              # %for.cond4
                                        #   Parent Loop BB125_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB125_9
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB125_6 Depth=2
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -32(%rbp)
	movq	-72(%rbp), %rax
	movq	8(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -36(%rbp)
	movl	-32(%rbp), %eax
	subl	-36(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-36(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB125_6 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_6
.LBB125_9:                              # %for.end
                                        #   in Loop: Header=BB125_4 Depth=1
	jmp	.LBB125_10
.LBB125_10:                             # %for.inc87
                                        #   in Loop: Header=BB125_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_4
.LBB125_11:                             # %for.end89
	jmp	.LBB125_12
.LBB125_12:                             # %if.end90
	movq	-48(%rbp), %rax
	movl	(%rax), %edi
	callq	dct_luma_16x16
	movq	-64(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB125_73
# %bb.13:                               # %if.then94
	movl	$0, -8(%rbp)
.LBB125_14:                             # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_16 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB125_21
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB125_14 Depth=1
	movl	$0, -4(%rbp)
.LBB125_16:                             # %for.cond99
                                        #   Parent Loop BB125_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB125_19
# %bb.17:                               # %for.body102
                                        #   in Loop: Header=BB125_16 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.18:                               # %for.inc121
                                        #   in Loop: Header=BB125_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_16
.LBB125_19:                             # %for.end123
                                        #   in Loop: Header=BB125_14 Depth=1
	jmp	.LBB125_20
.LBB125_20:                             # %for.inc124
                                        #   in Loop: Header=BB125_14 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_14
.LBB125_21:                             # %for.end126
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB125_22:                             # %for.cond128
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_24 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB125_29
# %bb.23:                               # %for.body131
                                        #   in Loop: Header=BB125_22 Depth=1
	movl	$0, -4(%rbp)
.LBB125_24:                             # %for.cond132
                                        #   Parent Loop BB125_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB125_27
# %bb.25:                               # %for.body135
                                        #   in Loop: Header=BB125_24 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.26:                               # %for.inc154
                                        #   in Loop: Header=BB125_24 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_24
.LBB125_27:                             # %for.end156
                                        #   in Loop: Header=BB125_22 Depth=1
	jmp	.LBB125_28
.LBB125_28:                             # %for.inc157
                                        #   in Loop: Header=BB125_22 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_22
.LBB125_29:                             # %for.end159
	movl	-52(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB125_30:                             # %for.cond161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_32 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB125_37
# %bb.31:                               # %for.body164
                                        #   in Loop: Header=BB125_30 Depth=1
	movl	$0, -4(%rbp)
.LBB125_32:                             # %for.cond165
                                        #   Parent Loop BB125_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB125_35
# %bb.33:                               # %for.body168
                                        #   in Loop: Header=BB125_32 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.34:                               # %for.inc178
                                        #   in Loop: Header=BB125_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_32
.LBB125_35:                             # %for.end180
                                        #   in Loop: Header=BB125_30 Depth=1
	jmp	.LBB125_36
.LBB125_36:                             # %for.inc181
                                        #   in Loop: Header=BB125_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_30
.LBB125_37:                             # %for.end183
	movl	-52(%rbp), %eax
	shll	$4, %eax
	movq	-64(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -8(%rbp)
.LBB125_38:                             # %for.cond186
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_40 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB125_72
# %bb.39:                               # %for.body189
                                        #   in Loop: Header=BB125_38 Depth=1
	movl	$0, -4(%rbp)
.LBB125_40:                             # %for.cond190
                                        #   Parent Loop BB125_38 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB125_70
# %bb.41:                               # %for.body193
                                        #   in Loop: Header=BB125_40 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-36(%rbp), %ecx
	movl	%ecx, -32(%rbp)
	movl	-36(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -16(%rbp)
	movl	-16(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -24(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB125_43
# %bb.42:                               # %cond.true
                                        #   in Loop: Header=BB125_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB125_44
.LBB125_43:                             # %cond.false
                                        #   in Loop: Header=BB125_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB125_44:                             # %cond.end
                                        #   in Loop: Header=BB125_40 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB125_46
# %bb.45:                               # %cond.true244
                                        #   in Loop: Header=BB125_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB125_50
.LBB125_46:                             # %cond.false246
                                        #   in Loop: Header=BB125_40 Depth=2
	xorl	%eax, %eax
	movl	-16(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB125_48
# %bb.47:                               # %cond.true259
                                        #   in Loop: Header=BB125_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB125_49
.LBB125_48:                             # %cond.false260
                                        #   in Loop: Header=BB125_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB125_49:                             # %cond.end271
                                        #   in Loop: Header=BB125_40 Depth=2
.LBB125_50:                             # %cond.end273
                                        #   in Loop: Header=BB125_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-20(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-28(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-32(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movq	-48(%rbp), %rdi
	movslq	(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB125_52
# %bb.51:                               # %cond.true294
                                        #   in Loop: Header=BB125_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB125_53
.LBB125_52:                             # %cond.false295
                                        #   in Loop: Header=BB125_40 Depth=2
	movl	-32(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB125_53:                             # %cond.end305
                                        #   in Loop: Header=BB125_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB125_55
# %bb.54:                               # %cond.true309
                                        #   in Loop: Header=BB125_40 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB125_59
.LBB125_55:                             # %cond.false311
                                        #   in Loop: Header=BB125_40 Depth=2
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB125_57
# %bb.56:                               # %cond.true323
                                        #   in Loop: Header=BB125_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB125_58
.LBB125_57:                             # %cond.false324
                                        #   in Loop: Header=BB125_40 Depth=2
	movl	-32(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB125_58:                             # %cond.end334
                                        #   in Loop: Header=BB125_40 Depth=2
.LBB125_59:                             # %cond.end336
                                        #   in Loop: Header=BB125_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-20(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-28(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-24(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB125_61
# %bb.60:                               # %cond.true358
                                        #   in Loop: Header=BB125_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB125_62
.LBB125_61:                             # %cond.false359
                                        #   in Loop: Header=BB125_40 Depth=2
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB125_62:                             # %cond.end370
                                        #   in Loop: Header=BB125_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB125_64
# %bb.63:                               # %cond.true374
                                        #   in Loop: Header=BB125_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB125_68
.LBB125_64:                             # %cond.false376
                                        #   in Loop: Header=BB125_40 Depth=2
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB125_66
# %bb.65:                               # %cond.true389
                                        #   in Loop: Header=BB125_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB125_67
.LBB125_66:                             # %cond.false390
                                        #   in Loop: Header=BB125_40 Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB125_67:                             # %cond.end401
                                        #   in Loop: Header=BB125_40 Depth=2
.LBB125_68:                             # %cond.end403
                                        #   in Loop: Header=BB125_40 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-20(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc414
                                        #   in Loop: Header=BB125_40 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_40
.LBB125_70:                             # %for.end416
                                        #   in Loop: Header=BB125_38 Depth=1
	jmp	.LBB125_71
.LBB125_71:                             # %for.inc417
                                        #   in Loop: Header=BB125_38 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_38
.LBB125_72:                             # %for.end419
	jmp	.LBB125_73
.LBB125_73:                             # %if.end420
	cmpl	$1058204774, -56(%rbp)  # imm = 0x3F12EC66
	jne	.LBB125_75
.LBB125_74:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB125_75:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB125_74
.Lfunc_end125:
	.size	Intra16x16_Mode_Decision.96, .Lfunc_end125-Intra16x16_Mode_Decision.96
	.cfi_endproc
                                        # -- End function
	.globl	Intra16x16_Mode_Decision.97 # -- Begin function Intra16x16_Mode_Decision.97
	.p2align	4, 0x90
	.type	Intra16x16_Mode_Decision.97,@function
Intra16x16_Mode_Decision.97:            # @Intra16x16_Mode_Decision.97
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$538799537, -56(%rbp)   # imm = 0x201D6DB1
	movq	%rdi, -64(%rbp)
	movq	%rsi, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	imgY_org, %rax
	movq	%rax, -80(%rbp)
	movq	imgUV_org, %rax
	movq	%rax, -72(%rbp)
	movb	$0, %al
	callq	intrapred_luma_16x16
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB126_2
# %bb.1:                                # %if.then
	movq	-48(%rbp), %rdi
	callq	find_sad_16x16
.LBB126_2:                              # %if.end
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB126_12
# %bb.3:                                # %if.then3
	movl	$0, -8(%rbp)
.LBB126_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_6 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB126_11
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB126_4 Depth=1
	movl	$0, -4(%rbp)
.LBB126_6:                              # %for.cond4
                                        #   Parent Loop BB126_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB126_9
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB126_6 Depth=2
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movq	-72(%rbp), %rax
	movq	8(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	subl	-36(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-36(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB126_6 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_6
.LBB126_9:                              # %for.end
                                        #   in Loop: Header=BB126_4 Depth=1
	jmp	.LBB126_10
.LBB126_10:                             # %for.inc87
                                        #   in Loop: Header=BB126_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB126_4
.LBB126_11:                             # %for.end89
	jmp	.LBB126_12
.LBB126_12:                             # %if.end90
	movq	-48(%rbp), %rax
	movl	(%rax), %edi
	callq	dct_luma_16x16
	movq	-64(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB126_73
# %bb.13:                               # %if.then94
	movl	$0, -8(%rbp)
.LBB126_14:                             # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_16 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB126_21
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB126_14 Depth=1
	movl	$0, -4(%rbp)
.LBB126_16:                             # %for.cond99
                                        #   Parent Loop BB126_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB126_19
# %bb.17:                               # %for.body102
                                        #   in Loop: Header=BB126_16 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.18:                               # %for.inc121
                                        #   in Loop: Header=BB126_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_16
.LBB126_19:                             # %for.end123
                                        #   in Loop: Header=BB126_14 Depth=1
	jmp	.LBB126_20
.LBB126_20:                             # %for.inc124
                                        #   in Loop: Header=BB126_14 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB126_14
.LBB126_21:                             # %for.end126
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB126_22:                             # %for.cond128
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_24 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB126_29
# %bb.23:                               # %for.body131
                                        #   in Loop: Header=BB126_22 Depth=1
	movl	$0, -4(%rbp)
.LBB126_24:                             # %for.cond132
                                        #   Parent Loop BB126_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB126_27
# %bb.25:                               # %for.body135
                                        #   in Loop: Header=BB126_24 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.26:                               # %for.inc154
                                        #   in Loop: Header=BB126_24 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_24
.LBB126_27:                             # %for.end156
                                        #   in Loop: Header=BB126_22 Depth=1
	jmp	.LBB126_28
.LBB126_28:                             # %for.inc157
                                        #   in Loop: Header=BB126_22 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB126_22
.LBB126_29:                             # %for.end159
	movl	-52(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB126_30:                             # %for.cond161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_32 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB126_37
# %bb.31:                               # %for.body164
                                        #   in Loop: Header=BB126_30 Depth=1
	movl	$0, -4(%rbp)
.LBB126_32:                             # %for.cond165
                                        #   Parent Loop BB126_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB126_35
# %bb.33:                               # %for.body168
                                        #   in Loop: Header=BB126_32 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.34:                               # %for.inc178
                                        #   in Loop: Header=BB126_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_32
.LBB126_35:                             # %for.end180
                                        #   in Loop: Header=BB126_30 Depth=1
	jmp	.LBB126_36
.LBB126_36:                             # %for.inc181
                                        #   in Loop: Header=BB126_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB126_30
.LBB126_37:                             # %for.end183
	movl	-52(%rbp), %eax
	shll	$4, %eax
	movq	-64(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -8(%rbp)
.LBB126_38:                             # %for.cond186
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_40 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB126_72
# %bb.39:                               # %for.body189
                                        #   in Loop: Header=BB126_38 Depth=1
	movl	$0, -4(%rbp)
.LBB126_40:                             # %for.cond190
                                        #   Parent Loop BB126_38 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB126_70
# %bb.41:                               # %for.body193
                                        #   in Loop: Header=BB126_40 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-36(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movl	-36(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -16(%rbp)
	movl	-16(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -32(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB126_43
# %bb.42:                               # %cond.true
                                        #   in Loop: Header=BB126_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB126_44
.LBB126_43:                             # %cond.false
                                        #   in Loop: Header=BB126_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB126_44:                             # %cond.end
                                        #   in Loop: Header=BB126_40 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB126_46
# %bb.45:                               # %cond.true244
                                        #   in Loop: Header=BB126_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB126_50
.LBB126_46:                             # %cond.false246
                                        #   in Loop: Header=BB126_40 Depth=2
	xorl	%eax, %eax
	movl	-16(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB126_48
# %bb.47:                               # %cond.true259
                                        #   in Loop: Header=BB126_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB126_49
.LBB126_48:                             # %cond.false260
                                        #   in Loop: Header=BB126_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB126_49:                             # %cond.end271
                                        #   in Loop: Header=BB126_40 Depth=2
.LBB126_50:                             # %cond.end273
                                        #   in Loop: Header=BB126_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-24(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-28(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-20(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movq	-48(%rbp), %rdi
	movslq	(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB126_52
# %bb.51:                               # %cond.true294
                                        #   in Loop: Header=BB126_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB126_53
.LBB126_52:                             # %cond.false295
                                        #   in Loop: Header=BB126_40 Depth=2
	movl	-20(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB126_53:                             # %cond.end305
                                        #   in Loop: Header=BB126_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB126_55
# %bb.54:                               # %cond.true309
                                        #   in Loop: Header=BB126_40 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB126_59
.LBB126_55:                             # %cond.false311
                                        #   in Loop: Header=BB126_40 Depth=2
	xorl	%eax, %eax
	movl	-20(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB126_57
# %bb.56:                               # %cond.true323
                                        #   in Loop: Header=BB126_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB126_58
.LBB126_57:                             # %cond.false324
                                        #   in Loop: Header=BB126_40 Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB126_58:                             # %cond.end334
                                        #   in Loop: Header=BB126_40 Depth=2
.LBB126_59:                             # %cond.end336
                                        #   in Loop: Header=BB126_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-24(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-28(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-32(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB126_61
# %bb.60:                               # %cond.true358
                                        #   in Loop: Header=BB126_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB126_62
.LBB126_61:                             # %cond.false359
                                        #   in Loop: Header=BB126_40 Depth=2
	movl	-32(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB126_62:                             # %cond.end370
                                        #   in Loop: Header=BB126_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB126_64
# %bb.63:                               # %cond.true374
                                        #   in Loop: Header=BB126_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB126_68
.LBB126_64:                             # %cond.false376
                                        #   in Loop: Header=BB126_40 Depth=2
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB126_66
# %bb.65:                               # %cond.true389
                                        #   in Loop: Header=BB126_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB126_67
.LBB126_66:                             # %cond.false390
                                        #   in Loop: Header=BB126_40 Depth=2
	movl	-32(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB126_67:                             # %cond.end401
                                        #   in Loop: Header=BB126_40 Depth=2
.LBB126_68:                             # %cond.end403
                                        #   in Loop: Header=BB126_40 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-24(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc414
                                        #   in Loop: Header=BB126_40 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_40
.LBB126_70:                             # %for.end416
                                        #   in Loop: Header=BB126_38 Depth=1
	jmp	.LBB126_71
.LBB126_71:                             # %for.inc417
                                        #   in Loop: Header=BB126_38 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB126_38
.LBB126_72:                             # %for.end419
	jmp	.LBB126_73
.LBB126_73:                             # %if.end420
	cmpl	$538799537, -56(%rbp)   # imm = 0x201D6DB1
	jne	.LBB126_75
.LBB126_74:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB126_75:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB126_74
.Lfunc_end126:
	.size	Intra16x16_Mode_Decision.97, .Lfunc_end126-Intra16x16_Mode_Decision.97
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4Blocks_Chroma.98 # -- Begin function RDCost_for_4x4Blocks_Chroma.98
	.p2align	4, 0x90
	.type	RDCost_for_4x4Blocks_Chroma.98,@function
RDCost_for_4x4Blocks_Chroma.98:         # @RDCost_for_4x4Blocks_Chroma.98
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$1868894114, -60(%rbp)  # imm = 0x6F650FA2
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -56(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	cmpl	$7, -16(%rbp)
	jle	.LBB127_2
# %bb.1:                                # %if.then
	movl	$1, -28(%rbp)
	jmp	.LBB127_3
.LBB127_2:                              # %if.else
	movl	$0, -28(%rbp)
.LBB127_3:                              # %if.end
	movl	-56(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-28(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-28(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB127_5
# %bb.4:                                # %if.then21
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	shll	$4, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %edi
	shll	$1, %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %edi
	orl	%edi, %ecx
	movl	$7, %edi
	movl	%r8d, %edx
	callq	writeCoeff4x4_CAVLC
	movl	%eax, -36(%rbp)
	jmp	.LBB127_18
.LBB127_5:                              # %if.else31
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -96(%rbp)
	movl	$1, -52(%rbp)
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rax
	movl	%edx, 72(%rax)
	movl	$0, -32(%rbp)
.LBB127_6:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$17, -32(%rbp)
	jge	.LBB127_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB127_6 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB127_8:                              # %land.end
                                        #   in Loop: Header=BB127_6 Depth=1
	testb	$1, %al
	jne	.LBB127_9
	jmp	.LBB127_17
.LBB127_9:                              # %for.body
                                        #   in Loop: Header=BB127_6 Depth=1
	movq	-112(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-96(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -116(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB127_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB127_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB127_12
.LBB127_11:                             # %if.else54
                                        #   in Loop: Header=BB127_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB127_12:                             # %if.end55
                                        #   in Loop: Header=BB127_6 Depth=1
	movq	-24(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-24(%rbp), %rax
	movl	$10, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB127_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB127_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB127_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB127_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB127_15:                             # %lor.end
                                        #   in Loop: Header=BB127_6 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-28(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-88(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.16:                               # %for.inc
                                        #   in Loop: Header=BB127_6 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB127_6
.LBB127_17:                             # %for.end
	jmp	.LBB127_18
.LBB127_18:                             # %if.end73
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	-36(%rbp), %ebx
	cmpl	$1868894114, -60(%rbp)  # imm = 0x6F650FA2
	jne	.LBB127_20
.LBB127_19:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB127_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB127_19
.Lfunc_end127:
	.size	RDCost_for_4x4Blocks_Chroma.98, .Lfunc_end127-RDCost_for_4x4Blocks_Chroma.98
	.cfi_endproc
                                        # -- End function
	.globl	CheckReliabilityOfRef.99 # -- Begin function CheckReliabilityOfRef.99
	.p2align	4, 0x90
	.type	CheckReliabilityOfRef.99,@function
CheckReliabilityOfRef.99:               # @CheckReliabilityOfRef.99
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1911183824, -108(%rbp) # imm = 0x71EA59D0
	movl	%edi, -80(%rbp)
	movl	%esi, -88(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -52(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB128_2
# %bb.1:                                # %cond.true
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	jmp	.LBB128_6
.LBB128_2:                              # %cond.false
	cmpl	$2, -52(%rbp)
	jne	.LBB128_4
# %bb.3:                                # %cond.true3
	movl	-80(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB128_5
.LBB128_4:                              # %cond.false5
	xorl	%eax, %eax
	jmp	.LBB128_5
.LBB128_5:                              # %cond.end
.LBB128_6:                              # %cond.end6
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB128_8
# %bb.7:                                # %lor.rhs
	cmpl	$2, -52(%rbp)
	sete	%cl
.LBB128_8:                              # %lor.end
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -104(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB128_10
# %bb.9:                                # %cond.true13
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	jmp	.LBB128_14
.LBB128_10:                             # %cond.false15
	cmpl	$3, -52(%rbp)
	jne	.LBB128_12
# %bb.11:                               # %cond.true17
	movl	-80(%rbp), %edx
	shll	$1, %edx
	jmp	.LBB128_13
.LBB128_12:                             # %cond.false19
	xorl	%edx, %edx
	jmp	.LBB128_13
.LBB128_13:                             # %cond.end20
.LBB128_14:                             # %cond.end22
	movl	%edx, -96(%rbp)
	movl	-96(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB128_16
# %bb.15:                               # %lor.rhs25
	cmpl	$3, -52(%rbp)
	sete	%cl
.LBB128_16:                             # %lor.end27
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -100(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB128_17:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_19 Depth 2
                                        #       Child Loop BB128_23 Depth 3
                                        #         Child Loop BB128_25 Depth 4
                                        #       Child Loop BB128_53 Depth 3
                                        #         Child Loop BB128_55 Depth 4
                                        #           Child Loop BB128_66 Depth 5
                                        #       Child Loop BB128_87 Depth 3
                                        #         Child Loop BB128_89 Depth 4
                                        #           Child Loop BB128_100 Depth 5
                                        #       Child Loop BB128_121 Depth 3
                                        #         Child Loop BB128_123 Depth 4
                                        #           Child Loop BB128_125 Depth 5
                                        #             Child Loop BB128_136 Depth 6
                                        #       Child Loop BB128_159 Depth 3
                                        #         Child Loop BB128_161 Depth 4
                                        #           Child Loop BB128_163 Depth 5
                                        #             Child Loop BB128_174 Depth 6
                                        #       Child Loop BB128_196 Depth 3
                                        #         Child Loop BB128_198 Depth 4
                                        #           Child Loop BB128_212 Depth 5
                                        #           Child Loop BB128_239 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB128_266
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB128_17 Depth=1
	movl	-96(%rbp), %eax
	movl	%eax, -64(%rbp)
.LBB128_19:                             # %for.cond31
                                        #   Parent Loop BB128_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB128_23 Depth 3
                                        #         Child Loop BB128_25 Depth 4
                                        #       Child Loop BB128_53 Depth 3
                                        #         Child Loop BB128_55 Depth 4
                                        #           Child Loop BB128_66 Depth 5
                                        #       Child Loop BB128_87 Depth 3
                                        #         Child Loop BB128_89 Depth 4
                                        #           Child Loop BB128_100 Depth 5
                                        #       Child Loop BB128_121 Depth 3
                                        #         Child Loop BB128_123 Depth 4
                                        #           Child Loop BB128_125 Depth 5
                                        #             Child Loop BB128_136 Depth 6
                                        #       Child Loop BB128_159 Depth 3
                                        #         Child Loop BB128_161 Depth 4
                                        #           Child Loop BB128_163 Depth 5
                                        #             Child Loop BB128_174 Depth 6
                                        #       Child Loop BB128_196 Depth 3
                                        #         Child Loop BB128_198 Depth 4
                                        #           Child Loop BB128_212 Depth 5
                                        #           Child Loop BB128_239 Depth 5
	movl	-64(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB128_264
# %bb.20:                               # %for.body33
                                        #   in Loop: Header=BB128_19 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-88(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-68(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-88(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-64(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -76(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -72(%rbp)
	movl	-20(%rbp), %eax
	subl	-76(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	-28(%rbp), %eax
	subl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	cmpl	$0, -76(%rbp)
	jne	.LBB128_51
# %bb.21:                               # %land.lhs.true
                                        #   in Loop: Header=BB128_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB128_51
# %bb.22:                               # %if.then
                                        #   in Loop: Header=BB128_19 Depth=2
	movl	$0, -12(%rbp)
.LBB128_23:                             # %for.cond75
                                        #   Parent Loop BB128_17 Depth=1
                                        #     Parent Loop BB128_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB128_25 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB128_50
# %bb.24:                               # %for.body78
                                        #   in Loop: Header=BB128_23 Depth=3
	movl	$0, -16(%rbp)
.LBB128_25:                             # %for.cond79
                                        #   Parent Loop BB128_17 Depth=1
                                        #     Parent Loop BB128_19 Depth=2
                                        #       Parent Loop BB128_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB128_48
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB128_25 Depth=4
	movq	pixel_map, %rax
	movl	-40(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB128_28
# %bb.27:                               # %cond.true86
                                        #   in Loop: Header=BB128_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB128_29
.LBB128_28:                             # %cond.false87
                                        #   in Loop: Header=BB128_25 Depth=4
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB128_29:                             # %cond.end89
                                        #   in Loop: Header=BB128_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB128_31
# %bb.30:                               # %cond.true93
                                        #   in Loop: Header=BB128_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB128_35
.LBB128_31:                             # %cond.false94
                                        #   in Loop: Header=BB128_25 Depth=4
	movl	-40(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB128_33
# %bb.32:                               # %cond.true98
                                        #   in Loop: Header=BB128_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB128_34
.LBB128_33:                             # %cond.false99
                                        #   in Loop: Header=BB128_25 Depth=4
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB128_34:                             # %cond.end101
                                        #   in Loop: Header=BB128_25 Depth=4
.LBB128_35:                             # %cond.end103
                                        #   in Loop: Header=BB128_25 Depth=4
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB128_37
# %bb.36:                               # %cond.true110
                                        #   in Loop: Header=BB128_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB128_38
.LBB128_37:                             # %cond.false111
                                        #   in Loop: Header=BB128_25 Depth=4
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB128_38:                             # %cond.end113
                                        #   in Loop: Header=BB128_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB128_40
# %bb.39:                               # %cond.true117
                                        #   in Loop: Header=BB128_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB128_44
.LBB128_40:                             # %cond.false118
                                        #   in Loop: Header=BB128_25 Depth=4
	movl	-36(%rbp), %ecx
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB128_42
# %bb.41:                               # %cond.true122
                                        #   in Loop: Header=BB128_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB128_43
.LBB128_42:                             # %cond.false123
                                        #   in Loop: Header=BB128_25 Depth=4
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB128_43:                             # %cond.end125
                                        #   in Loop: Header=BB128_25 Depth=4
.LBB128_44:                             # %cond.end127
                                        #   in Loop: Header=BB128_25 Depth=4
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB128_46
# %bb.45:                               # %if.then134
	movl	$0, -56(%rbp)
	jmp	.LBB128_267
.LBB128_46:                             # %if.end
                                        #   in Loop: Header=BB128_25 Depth=4
	jmp	.LBB128_47
.LBB128_47:                             # %for.inc
                                        #   in Loop: Header=BB128_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB128_25
.LBB128_48:                             # %for.end
                                        #   in Loop: Header=BB128_23 Depth=3
	jmp	.LBB128_49
.LBB128_49:                             # %for.inc135
                                        #   in Loop: Header=BB128_23 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB128_23
.LBB128_50:                             # %for.end137
                                        #   in Loop: Header=BB128_19 Depth=2
	jmp	.LBB128_262
.LBB128_51:                             # %if.else
                                        #   in Loop: Header=BB128_19 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB128_85
# %bb.52:                               # %if.then140
                                        #   in Loop: Header=BB128_19 Depth=2
	movl	$0, -12(%rbp)
.LBB128_53:                             # %for.cond141
                                        #   Parent Loop BB128_17 Depth=1
                                        #     Parent Loop BB128_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB128_55 Depth 4
                                        #           Child Loop BB128_66 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB128_84
# %bb.54:                               # %for.body144
                                        #   in Loop: Header=BB128_53 Depth=3
	movl	$0, -16(%rbp)
.LBB128_55:                             # %for.cond145
                                        #   Parent Loop BB128_17 Depth=1
                                        #     Parent Loop BB128_19 Depth=2
                                        #       Parent Loop BB128_53 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB128_66 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB128_82
# %bb.56:                               # %for.body148
                                        #   in Loop: Header=BB128_55 Depth=4
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB128_58
# %bb.57:                               # %cond.true152
                                        #   in Loop: Header=BB128_55 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB128_59
.LBB128_58:                             # %cond.false153
                                        #   in Loop: Header=BB128_55 Depth=4
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB128_59:                             # %cond.end155
                                        #   in Loop: Header=BB128_55 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB128_61
# %bb.60:                               # %cond.true159
                                        #   in Loop: Header=BB128_55 Depth=4
	xorl	%eax, %eax
	jmp	.LBB128_65
.LBB128_61:                             # %cond.false160
                                        #   in Loop: Header=BB128_55 Depth=4
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB128_63
# %bb.62:                               # %cond.true164
                                        #   in Loop: Header=BB128_55 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB128_64
.LBB128_63:                             # %cond.false165
                                        #   in Loop: Header=BB128_55 Depth=4
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB128_64:                             # %cond.end167
                                        #   in Loop: Header=BB128_55 Depth=4
.LBB128_65:                             # %cond.end169
                                        #   in Loop: Header=BB128_55 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -24(%rbp)
.LBB128_66:                             # %for.cond171
                                        #   Parent Loop BB128_17 Depth=1
                                        #     Parent Loop BB128_19 Depth=2
                                        #       Parent Loop BB128_53 Depth=3
                                        #         Parent Loop BB128_55 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB128_80
# %bb.67:                               # %for.body174
                                        #   in Loop: Header=BB128_66 Depth=5
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB128_69
# %bb.68:                               # %cond.true179
                                        #   in Loop: Header=BB128_66 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB128_70
.LBB128_69:                             # %cond.false180
                                        #   in Loop: Header=BB128_66 Depth=5
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
.LBB128_70:                             # %cond.end183
                                        #   in Loop: Header=BB128_66 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB128_72
# %bb.71:                               # %cond.true187
                                        #   in Loop: Header=BB128_66 Depth=5
	xorl	%eax, %eax
	jmp	.LBB128_76
.LBB128_72:                             # %cond.false188
                                        #   in Loop: Header=BB128_66 Depth=5
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB128_74
# %bb.73:                               # %cond.true193
                                        #   in Loop: Header=BB128_66 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB128_75
.LBB128_74:                             # %cond.false194
                                        #   in Loop: Header=BB128_66 Depth=5
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
.LBB128_75:                             # %cond.end197
                                        #   in Loop: Header=BB128_66 Depth=5
.LBB128_76:                             # %cond.end199
                                        #   in Loop: Header=BB128_66 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB128_78
# %bb.77:                               # %if.then208
	movl	$0, -56(%rbp)
	jmp	.LBB128_267
.LBB128_78:                             # %if.end209
                                        #   in Loop: Header=BB128_66 Depth=5
	jmp	.LBB128_79
.LBB128_79:                             # %for.inc210
                                        #   in Loop: Header=BB128_66 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB128_66
.LBB128_80:                             # %for.end212
                                        #   in Loop: Header=BB128_55 Depth=4
	jmp	.LBB128_81
.LBB128_81:                             # %for.inc213
                                        #   in Loop: Header=BB128_55 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB128_55
.LBB128_82:                             # %for.end215
                                        #   in Loop: Header=BB128_53 Depth=3
	jmp	.LBB128_83
.LBB128_83:                             # %for.inc216
                                        #   in Loop: Header=BB128_53 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB128_53
.LBB128_84:                             # %for.end218
                                        #   in Loop: Header=BB128_19 Depth=2
	jmp	.LBB128_261
.LBB128_85:                             # %if.else219
                                        #   in Loop: Header=BB128_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB128_119
# %bb.86:                               # %if.then222
                                        #   in Loop: Header=BB128_19 Depth=2
	movl	$0, -12(%rbp)
.LBB128_87:                             # %for.cond223
                                        #   Parent Loop BB128_17 Depth=1
                                        #     Parent Loop BB128_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB128_89 Depth 4
                                        #           Child Loop BB128_100 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB128_118
# %bb.88:                               # %for.body226
                                        #   in Loop: Header=BB128_87 Depth=3
	movl	$0, -16(%rbp)
.LBB128_89:                             # %for.cond227
                                        #   Parent Loop BB128_17 Depth=1
                                        #     Parent Loop BB128_19 Depth=2
                                        #       Parent Loop BB128_87 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB128_100 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB128_116
# %bb.90:                               # %for.body230
                                        #   in Loop: Header=BB128_89 Depth=4
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB128_92
# %bb.91:                               # %cond.true234
                                        #   in Loop: Header=BB128_89 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB128_93
.LBB128_92:                             # %cond.false235
                                        #   in Loop: Header=BB128_89 Depth=4
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB128_93:                             # %cond.end237
                                        #   in Loop: Header=BB128_89 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB128_95
# %bb.94:                               # %cond.true241
                                        #   in Loop: Header=BB128_89 Depth=4
	xorl	%eax, %eax
	jmp	.LBB128_99
.LBB128_95:                             # %cond.false242
                                        #   in Loop: Header=BB128_89 Depth=4
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB128_97
# %bb.96:                               # %cond.true246
                                        #   in Loop: Header=BB128_89 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB128_98
.LBB128_97:                             # %cond.false247
                                        #   in Loop: Header=BB128_89 Depth=4
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB128_98:                             # %cond.end249
                                        #   in Loop: Header=BB128_89 Depth=4
.LBB128_99:                             # %cond.end251
                                        #   in Loop: Header=BB128_89 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -32(%rbp)
.LBB128_100:                            # %for.cond253
                                        #   Parent Loop BB128_17 Depth=1
                                        #     Parent Loop BB128_19 Depth=2
                                        #       Parent Loop BB128_87 Depth=3
                                        #         Parent Loop BB128_89 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -32(%rbp)
	jge	.LBB128_114
# %bb.101:                              # %for.body256
                                        #   in Loop: Header=BB128_100 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB128_103
# %bb.102:                              # %cond.true261
                                        #   in Loop: Header=BB128_100 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB128_104
.LBB128_103:                            # %cond.false262
                                        #   in Loop: Header=BB128_100 Depth=5
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB128_104:                            # %cond.end265
                                        #   in Loop: Header=BB128_100 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB128_106
# %bb.105:                              # %cond.true269
                                        #   in Loop: Header=BB128_100 Depth=5
	xorl	%eax, %eax
	jmp	.LBB128_110
.LBB128_106:                            # %cond.false270
                                        #   in Loop: Header=BB128_100 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB128_108
# %bb.107:                              # %cond.true275
                                        #   in Loop: Header=BB128_100 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB128_109
.LBB128_108:                            # %cond.false276
                                        #   in Loop: Header=BB128_100 Depth=5
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB128_109:                            # %cond.end279
                                        #   in Loop: Header=BB128_100 Depth=5
.LBB128_110:                            # %cond.end281
                                        #   in Loop: Header=BB128_100 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB128_112
# %bb.111:                              # %if.then290
	movl	$0, -56(%rbp)
	jmp	.LBB128_267
.LBB128_112:                            # %if.end291
                                        #   in Loop: Header=BB128_100 Depth=5
	jmp	.LBB128_113
.LBB128_113:                            # %for.inc292
                                        #   in Loop: Header=BB128_100 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB128_100
.LBB128_114:                            # %for.end294
                                        #   in Loop: Header=BB128_89 Depth=4
	jmp	.LBB128_115
.LBB128_115:                            # %for.inc295
                                        #   in Loop: Header=BB128_89 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB128_89
.LBB128_116:                            # %for.end297
                                        #   in Loop: Header=BB128_87 Depth=3
	jmp	.LBB128_117
.LBB128_117:                            # %for.inc298
                                        #   in Loop: Header=BB128_87 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB128_87
.LBB128_118:                            # %for.end300
                                        #   in Loop: Header=BB128_19 Depth=2
	jmp	.LBB128_260
.LBB128_119:                            # %if.else301
                                        #   in Loop: Header=BB128_19 Depth=2
	cmpl	$2, -72(%rbp)
	jne	.LBB128_157
# %bb.120:                              # %if.then304
                                        #   in Loop: Header=BB128_19 Depth=2
	movl	$0, -12(%rbp)
.LBB128_121:                            # %for.cond305
                                        #   Parent Loop BB128_17 Depth=1
                                        #     Parent Loop BB128_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB128_123 Depth 4
                                        #           Child Loop BB128_125 Depth 5
                                        #             Child Loop BB128_136 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB128_156
# %bb.122:                              # %for.body308
                                        #   in Loop: Header=BB128_121 Depth=3
	movl	$0, -16(%rbp)
.LBB128_123:                            # %for.cond309
                                        #   Parent Loop BB128_17 Depth=1
                                        #     Parent Loop BB128_19 Depth=2
                                        #       Parent Loop BB128_121 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB128_125 Depth 5
                                        #             Child Loop BB128_136 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB128_154
# %bb.124:                              # %for.body312
                                        #   in Loop: Header=BB128_123 Depth=4
	movl	$-2, -32(%rbp)
.LBB128_125:                            # %for.cond313
                                        #   Parent Loop BB128_17 Depth=1
                                        #     Parent Loop BB128_19 Depth=2
                                        #       Parent Loop BB128_121 Depth=3
                                        #         Parent Loop BB128_123 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB128_136 Depth 6
	cmpl	$4, -32(%rbp)
	jge	.LBB128_152
# %bb.126:                              # %for.body316
                                        #   in Loop: Header=BB128_125 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB128_128
# %bb.127:                              # %cond.true321
                                        #   in Loop: Header=BB128_125 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB128_129
.LBB128_128:                            # %cond.false322
                                        #   in Loop: Header=BB128_125 Depth=5
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB128_129:                            # %cond.end325
                                        #   in Loop: Header=BB128_125 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB128_131
# %bb.130:                              # %cond.true329
                                        #   in Loop: Header=BB128_125 Depth=5
	xorl	%eax, %eax
	jmp	.LBB128_135
.LBB128_131:                            # %cond.false330
                                        #   in Loop: Header=BB128_125 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB128_133
# %bb.132:                              # %cond.true335
                                        #   in Loop: Header=BB128_125 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB128_134
.LBB128_133:                            # %cond.false336
                                        #   in Loop: Header=BB128_125 Depth=5
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB128_134:                            # %cond.end339
                                        #   in Loop: Header=BB128_125 Depth=5
.LBB128_135:                            # %cond.end341
                                        #   in Loop: Header=BB128_125 Depth=5
	movl	%eax, -48(%rbp)
	movl	$-2, -24(%rbp)
.LBB128_136:                            # %for.cond343
                                        #   Parent Loop BB128_17 Depth=1
                                        #     Parent Loop BB128_19 Depth=2
                                        #       Parent Loop BB128_121 Depth=3
                                        #         Parent Loop BB128_123 Depth=4
                                        #           Parent Loop BB128_125 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -24(%rbp)
	jge	.LBB128_150
# %bb.137:                              # %for.body346
                                        #   in Loop: Header=BB128_136 Depth=6
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB128_139
# %bb.138:                              # %cond.true351
                                        #   in Loop: Header=BB128_136 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB128_140
.LBB128_139:                            # %cond.false352
                                        #   in Loop: Header=BB128_136 Depth=6
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB128_140:                            # %cond.end355
                                        #   in Loop: Header=BB128_136 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB128_142
# %bb.141:                              # %cond.true359
                                        #   in Loop: Header=BB128_136 Depth=6
	xorl	%eax, %eax
	jmp	.LBB128_146
.LBB128_142:                            # %cond.false360
                                        #   in Loop: Header=BB128_136 Depth=6
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB128_144
# %bb.143:                              # %cond.true365
                                        #   in Loop: Header=BB128_136 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB128_145
.LBB128_144:                            # %cond.false366
                                        #   in Loop: Header=BB128_136 Depth=6
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB128_145:                            # %cond.end369
                                        #   in Loop: Header=BB128_136 Depth=6
.LBB128_146:                            # %cond.end371
                                        #   in Loop: Header=BB128_136 Depth=6
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB128_148
# %bb.147:                              # %if.then380
	movl	$0, -56(%rbp)
	jmp	.LBB128_267
.LBB128_148:                            # %if.end381
                                        #   in Loop: Header=BB128_136 Depth=6
	jmp	.LBB128_149
.LBB128_149:                            # %for.inc382
                                        #   in Loop: Header=BB128_136 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB128_136
.LBB128_150:                            # %for.end384
                                        #   in Loop: Header=BB128_125 Depth=5
	jmp	.LBB128_151
.LBB128_151:                            # %for.inc385
                                        #   in Loop: Header=BB128_125 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB128_125
.LBB128_152:                            # %for.end387
                                        #   in Loop: Header=BB128_123 Depth=4
	jmp	.LBB128_153
.LBB128_153:                            # %for.inc388
                                        #   in Loop: Header=BB128_123 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB128_123
.LBB128_154:                            # %for.end390
                                        #   in Loop: Header=BB128_121 Depth=3
	jmp	.LBB128_155
.LBB128_155:                            # %for.inc391
                                        #   in Loop: Header=BB128_121 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB128_121
.LBB128_156:                            # %for.end393
                                        #   in Loop: Header=BB128_19 Depth=2
	jmp	.LBB128_259
.LBB128_157:                            # %if.else394
                                        #   in Loop: Header=BB128_19 Depth=2
	cmpl	$2, -76(%rbp)
	jne	.LBB128_195
# %bb.158:                              # %if.then397
                                        #   in Loop: Header=BB128_19 Depth=2
	movl	$0, -12(%rbp)
.LBB128_159:                            # %for.cond398
                                        #   Parent Loop BB128_17 Depth=1
                                        #     Parent Loop BB128_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB128_161 Depth 4
                                        #           Child Loop BB128_163 Depth 5
                                        #             Child Loop BB128_174 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB128_194
# %bb.160:                              # %for.body401
                                        #   in Loop: Header=BB128_159 Depth=3
	movl	$0, -16(%rbp)
.LBB128_161:                            # %for.cond402
                                        #   Parent Loop BB128_17 Depth=1
                                        #     Parent Loop BB128_19 Depth=2
                                        #       Parent Loop BB128_159 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB128_163 Depth 5
                                        #             Child Loop BB128_174 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB128_192
# %bb.162:                              # %for.body405
                                        #   in Loop: Header=BB128_161 Depth=4
	movl	$-2, -24(%rbp)
.LBB128_163:                            # %for.cond406
                                        #   Parent Loop BB128_17 Depth=1
                                        #     Parent Loop BB128_19 Depth=2
                                        #       Parent Loop BB128_159 Depth=3
                                        #         Parent Loop BB128_161 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB128_174 Depth 6
	cmpl	$4, -24(%rbp)
	jge	.LBB128_190
# %bb.164:                              # %for.body409
                                        #   in Loop: Header=BB128_163 Depth=5
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB128_166
# %bb.165:                              # %cond.true414
                                        #   in Loop: Header=BB128_163 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB128_167
.LBB128_166:                            # %cond.false415
                                        #   in Loop: Header=BB128_163 Depth=5
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB128_167:                            # %cond.end418
                                        #   in Loop: Header=BB128_163 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB128_169
# %bb.168:                              # %cond.true422
                                        #   in Loop: Header=BB128_163 Depth=5
	xorl	%eax, %eax
	jmp	.LBB128_173
.LBB128_169:                            # %cond.false423
                                        #   in Loop: Header=BB128_163 Depth=5
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB128_171
# %bb.170:                              # %cond.true428
                                        #   in Loop: Header=BB128_163 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB128_172
.LBB128_171:                            # %cond.false429
                                        #   in Loop: Header=BB128_163 Depth=5
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB128_172:                            # %cond.end432
                                        #   in Loop: Header=BB128_163 Depth=5
.LBB128_173:                            # %cond.end434
                                        #   in Loop: Header=BB128_163 Depth=5
	movl	%eax, -44(%rbp)
	movl	$-2, -32(%rbp)
.LBB128_174:                            # %for.cond436
                                        #   Parent Loop BB128_17 Depth=1
                                        #     Parent Loop BB128_19 Depth=2
                                        #       Parent Loop BB128_159 Depth=3
                                        #         Parent Loop BB128_161 Depth=4
                                        #           Parent Loop BB128_163 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -32(%rbp)
	jge	.LBB128_188
# %bb.175:                              # %for.body439
                                        #   in Loop: Header=BB128_174 Depth=6
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB128_177
# %bb.176:                              # %cond.true444
                                        #   in Loop: Header=BB128_174 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB128_178
.LBB128_177:                            # %cond.false445
                                        #   in Loop: Header=BB128_174 Depth=6
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB128_178:                            # %cond.end448
                                        #   in Loop: Header=BB128_174 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB128_180
# %bb.179:                              # %cond.true452
                                        #   in Loop: Header=BB128_174 Depth=6
	xorl	%eax, %eax
	jmp	.LBB128_184
.LBB128_180:                            # %cond.false453
                                        #   in Loop: Header=BB128_174 Depth=6
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB128_182
# %bb.181:                              # %cond.true458
                                        #   in Loop: Header=BB128_174 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB128_183
.LBB128_182:                            # %cond.false459
                                        #   in Loop: Header=BB128_174 Depth=6
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB128_183:                            # %cond.end462
                                        #   in Loop: Header=BB128_174 Depth=6
.LBB128_184:                            # %cond.end464
                                        #   in Loop: Header=BB128_174 Depth=6
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB128_186
# %bb.185:                              # %if.then473
	movl	$0, -56(%rbp)
	jmp	.LBB128_267
.LBB128_186:                            # %if.end474
                                        #   in Loop: Header=BB128_174 Depth=6
	jmp	.LBB128_187
.LBB128_187:                            # %for.inc475
                                        #   in Loop: Header=BB128_174 Depth=6
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB128_174
.LBB128_188:                            # %for.end477
                                        #   in Loop: Header=BB128_163 Depth=5
	jmp	.LBB128_189
.LBB128_189:                            # %for.inc478
                                        #   in Loop: Header=BB128_163 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB128_163
.LBB128_190:                            # %for.end480
                                        #   in Loop: Header=BB128_161 Depth=4
	jmp	.LBB128_191
.LBB128_191:                            # %for.inc481
                                        #   in Loop: Header=BB128_161 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB128_161
.LBB128_192:                            # %for.end483
                                        #   in Loop: Header=BB128_159 Depth=3
	jmp	.LBB128_193
.LBB128_193:                            # %for.inc484
                                        #   in Loop: Header=BB128_159 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB128_159
.LBB128_194:                            # %for.end486
                                        #   in Loop: Header=BB128_19 Depth=2
	jmp	.LBB128_258
.LBB128_195:                            # %if.else487
                                        #   in Loop: Header=BB128_19 Depth=2
	movl	$0, -12(%rbp)
.LBB128_196:                            # %for.cond488
                                        #   Parent Loop BB128_17 Depth=1
                                        #     Parent Loop BB128_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB128_198 Depth 4
                                        #           Child Loop BB128_212 Depth 5
                                        #           Child Loop BB128_239 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB128_257
# %bb.197:                              # %for.body491
                                        #   in Loop: Header=BB128_196 Depth=3
	movl	$0, -16(%rbp)
.LBB128_198:                            # %for.cond492
                                        #   Parent Loop BB128_17 Depth=1
                                        #     Parent Loop BB128_19 Depth=2
                                        #       Parent Loop BB128_196 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB128_212 Depth 5
                                        #           Child Loop BB128_239 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB128_255
# %bb.199:                              # %for.body495
                                        #   in Loop: Header=BB128_198 Depth=4
	cmpl	$1, -76(%rbp)
	jne	.LBB128_201
# %bb.200:                              # %cond.true498
                                        #   in Loop: Header=BB128_198 Depth=4
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	jmp	.LBB128_202
.LBB128_201:                            # %cond.false500
                                        #   in Loop: Header=BB128_198 Depth=4
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$1, %eax
.LBB128_202:                            # %cond.end503
                                        #   in Loop: Header=BB128_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB128_204
# %bb.203:                              # %cond.true507
                                        #   in Loop: Header=BB128_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB128_205
.LBB128_204:                            # %cond.false508
                                        #   in Loop: Header=BB128_198 Depth=4
	movl	-48(%rbp), %eax
.LBB128_205:                            # %cond.end509
                                        #   in Loop: Header=BB128_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB128_207
# %bb.206:                              # %cond.true513
                                        #   in Loop: Header=BB128_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB128_211
.LBB128_207:                            # %cond.false514
                                        #   in Loop: Header=BB128_198 Depth=4
	movl	-40(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB128_209
# %bb.208:                              # %cond.true517
                                        #   in Loop: Header=BB128_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB128_210
.LBB128_209:                            # %cond.false518
                                        #   in Loop: Header=BB128_198 Depth=4
	movl	-48(%rbp), %eax
.LBB128_210:                            # %cond.end519
                                        #   in Loop: Header=BB128_198 Depth=4
.LBB128_211:                            # %cond.end521
                                        #   in Loop: Header=BB128_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -24(%rbp)
.LBB128_212:                            # %for.cond523
                                        #   Parent Loop BB128_17 Depth=1
                                        #     Parent Loop BB128_19 Depth=2
                                        #       Parent Loop BB128_196 Depth=3
                                        #         Parent Loop BB128_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB128_226
# %bb.213:                              # %for.body526
                                        #   in Loop: Header=BB128_212 Depth=5
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB128_215
# %bb.214:                              # %cond.true531
                                        #   in Loop: Header=BB128_212 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB128_216
.LBB128_215:                            # %cond.false532
                                        #   in Loop: Header=BB128_212 Depth=5
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB128_216:                            # %cond.end535
                                        #   in Loop: Header=BB128_212 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB128_218
# %bb.217:                              # %cond.true539
                                        #   in Loop: Header=BB128_212 Depth=5
	xorl	%eax, %eax
	jmp	.LBB128_222
.LBB128_218:                            # %cond.false540
                                        #   in Loop: Header=BB128_212 Depth=5
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB128_220
# %bb.219:                              # %cond.true545
                                        #   in Loop: Header=BB128_212 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB128_221
.LBB128_220:                            # %cond.false546
                                        #   in Loop: Header=BB128_212 Depth=5
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB128_221:                            # %cond.end549
                                        #   in Loop: Header=BB128_212 Depth=5
.LBB128_222:                            # %cond.end551
                                        #   in Loop: Header=BB128_212 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB128_224
# %bb.223:                              # %if.then560
	movl	$0, -56(%rbp)
	jmp	.LBB128_267
.LBB128_224:                            # %if.end561
                                        #   in Loop: Header=BB128_212 Depth=5
	jmp	.LBB128_225
.LBB128_225:                            # %for.inc562
                                        #   in Loop: Header=BB128_212 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB128_212
.LBB128_226:                            # %for.end564
                                        #   in Loop: Header=BB128_198 Depth=4
	cmpl	$1, -72(%rbp)
	jne	.LBB128_228
# %bb.227:                              # %cond.true567
                                        #   in Loop: Header=BB128_198 Depth=4
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	jmp	.LBB128_229
.LBB128_228:                            # %cond.false569
                                        #   in Loop: Header=BB128_198 Depth=4
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
.LBB128_229:                            # %cond.end572
                                        #   in Loop: Header=BB128_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB128_231
# %bb.230:                              # %cond.true576
                                        #   in Loop: Header=BB128_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB128_232
.LBB128_231:                            # %cond.false577
                                        #   in Loop: Header=BB128_198 Depth=4
	movl	-44(%rbp), %eax
.LBB128_232:                            # %cond.end578
                                        #   in Loop: Header=BB128_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB128_234
# %bb.233:                              # %cond.true582
                                        #   in Loop: Header=BB128_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB128_238
.LBB128_234:                            # %cond.false583
                                        #   in Loop: Header=BB128_198 Depth=4
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB128_236
# %bb.235:                              # %cond.true586
                                        #   in Loop: Header=BB128_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB128_237
.LBB128_236:                            # %cond.false587
                                        #   in Loop: Header=BB128_198 Depth=4
	movl	-44(%rbp), %eax
.LBB128_237:                            # %cond.end588
                                        #   in Loop: Header=BB128_198 Depth=4
.LBB128_238:                            # %cond.end590
                                        #   in Loop: Header=BB128_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -32(%rbp)
.LBB128_239:                            # %for.cond592
                                        #   Parent Loop BB128_17 Depth=1
                                        #     Parent Loop BB128_19 Depth=2
                                        #       Parent Loop BB128_196 Depth=3
                                        #         Parent Loop BB128_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -32(%rbp)
	jge	.LBB128_253
# %bb.240:                              # %for.body595
                                        #   in Loop: Header=BB128_239 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB128_242
# %bb.241:                              # %cond.true600
                                        #   in Loop: Header=BB128_239 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB128_243
.LBB128_242:                            # %cond.false601
                                        #   in Loop: Header=BB128_239 Depth=5
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB128_243:                            # %cond.end604
                                        #   in Loop: Header=BB128_239 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB128_245
# %bb.244:                              # %cond.true608
                                        #   in Loop: Header=BB128_239 Depth=5
	xorl	%eax, %eax
	jmp	.LBB128_249
.LBB128_245:                            # %cond.false609
                                        #   in Loop: Header=BB128_239 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB128_247
# %bb.246:                              # %cond.true614
                                        #   in Loop: Header=BB128_239 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB128_248
.LBB128_247:                            # %cond.false615
                                        #   in Loop: Header=BB128_239 Depth=5
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB128_248:                            # %cond.end618
                                        #   in Loop: Header=BB128_239 Depth=5
.LBB128_249:                            # %cond.end620
                                        #   in Loop: Header=BB128_239 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB128_251
# %bb.250:                              # %if.then629
	movl	$0, -56(%rbp)
	jmp	.LBB128_267
.LBB128_251:                            # %if.end630
                                        #   in Loop: Header=BB128_239 Depth=5
	jmp	.LBB128_252
.LBB128_252:                            # %for.inc631
                                        #   in Loop: Header=BB128_239 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB128_239
.LBB128_253:                            # %for.end633
                                        #   in Loop: Header=BB128_198 Depth=4
	jmp	.LBB128_254
.LBB128_254:                            # %for.inc634
                                        #   in Loop: Header=BB128_198 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB128_198
.LBB128_255:                            # %for.end636
                                        #   in Loop: Header=BB128_196 Depth=3
	jmp	.LBB128_256
.LBB128_256:                            # %for.inc637
                                        #   in Loop: Header=BB128_196 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB128_196
.LBB128_257:                            # %for.end639
                                        #   in Loop: Header=BB128_19 Depth=2
	jmp	.LBB128_258
.LBB128_258:                            # %if.end640
                                        #   in Loop: Header=BB128_19 Depth=2
	jmp	.LBB128_259
.LBB128_259:                            # %if.end641
                                        #   in Loop: Header=BB128_19 Depth=2
	jmp	.LBB128_260
.LBB128_260:                            # %if.end642
                                        #   in Loop: Header=BB128_19 Depth=2
	jmp	.LBB128_261
.LBB128_261:                            # %if.end643
                                        #   in Loop: Header=BB128_19 Depth=2
	jmp	.LBB128_262
.LBB128_262:                            # %if.end644
                                        #   in Loop: Header=BB128_19 Depth=2
	jmp	.LBB128_263
.LBB128_263:                            # %for.inc645
                                        #   in Loop: Header=BB128_19 Depth=2
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB128_19
.LBB128_264:                            # %for.end647
                                        #   in Loop: Header=BB128_17 Depth=1
	jmp	.LBB128_265
.LBB128_265:                            # %for.inc648
                                        #   in Loop: Header=BB128_17 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB128_17
.LBB128_266:                            # %for.end650
	movl	$1, -56(%rbp)
.LBB128_267:                            # %return
	movl	-56(%rbp), %ebx
	cmpl	$1911183824, -108(%rbp) # imm = 0x71EA59D0
	jne	.LBB128_269
.LBB128_268:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB128_269:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB128_268
.Lfunc_end128:
	.size	CheckReliabilityOfRef.99, .Lfunc_end128-CheckReliabilityOfRef.99
	.cfi_endproc
                                        # -- End function
	.globl	SetCoeffAndReconstruction8x8.100 # -- Begin function SetCoeffAndReconstruction8x8.100
	.p2align	4, 0x90
	.type	SetCoeffAndReconstruction8x8.100,@function
SetCoeffAndReconstruction8x8.100:       # @SetCoeffAndReconstruction8x8.100
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$63177932, -36(%rbp)    # imm = 0x3C404CC
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB129_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB129_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB129_4
.LBB129_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB129_4
.LBB129_4:                              # %cond.end
	movl	%ecx, -28(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB129_104
# %bb.5:                                # %if.then
	movl	$0, -4(%rbp)
.LBB129_6:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB129_9
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB129_6 Depth=1
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB129_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_6
.LBB129_9:                              # %for.end
	cmpl	$0, -32(%rbp)
	je	.LBB129_19
# %bb.10:                               # %if.then15
	movl	$0, -8(%rbp)
.LBB129_11:                             # %for.cond16
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB129_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB129_11 Depth=1
	movl	$0, -4(%rbp)
.LBB129_13:                             # %for.cond20
                                        #   Parent Loop BB129_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB129_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB129_13 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	movw	part8x8bwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.15:                               # %for.inc50
                                        #   in Loop: Header=BB129_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_13
.LBB129_16:                             # %for.end52
                                        #   in Loop: Header=BB129_11 Depth=1
	jmp	.LBB129_17
.LBB129_17:                             # %for.inc53
                                        #   in Loop: Header=BB129_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_11
.LBB129_18:                             # %for.end55
	jmp	.LBB129_28
.LBB129_19:                             # %if.else
	movl	$0, -8(%rbp)
.LBB129_20:                             # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_22 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB129_27
# %bb.21:                               # %for.body59
                                        #   in Loop: Header=BB129_20 Depth=1
	movl	$0, -4(%rbp)
.LBB129_22:                             # %for.cond60
                                        #   Parent Loop BB129_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB129_25
# %bb.23:                               # %for.body63
                                        #   in Loop: Header=BB129_22 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.24:                               # %for.inc84
                                        #   in Loop: Header=BB129_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_22
.LBB129_25:                             # %for.end86
                                        #   in Loop: Header=BB129_20 Depth=1
	jmp	.LBB129_26
.LBB129_26:                             # %for.inc87
                                        #   in Loop: Header=BB129_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_20
.LBB129_27:                             # %for.end89
	jmp	.LBB129_28
.LBB129_28:                             # %if.end
	movl	$0, -8(%rbp)
.LBB129_29:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_31 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB129_39
# %bb.30:                               # %for.body93
                                        #   in Loop: Header=BB129_29 Depth=1
	movl	$0, -4(%rbp)
.LBB129_31:                             # %for.cond94
                                        #   Parent Loop BB129_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB129_37
# %bb.32:                               # %for.body97
                                        #   in Loop: Header=BB129_31 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB129_34
# %bb.33:                               # %cond.true111
                                        #   in Loop: Header=BB129_31 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB129_35
.LBB129_34:                             # %cond.false127
                                        #   in Loop: Header=BB129_31 Depth=2
	movq	$-1, %rax
	jmp	.LBB129_35
.LBB129_35:                             # %cond.end128
                                        #   in Loop: Header=BB129_31 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.36:                               # %for.inc139
                                        #   in Loop: Header=BB129_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_31
.LBB129_37:                             # %for.end141
                                        #   in Loop: Header=BB129_29 Depth=1
	jmp	.LBB129_38
.LBB129_38:                             # %for.inc142
                                        #   in Loop: Header=BB129_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_29
.LBB129_39:                             # %for.end144
	cmpl	$0, -32(%rbp)
	je	.LBB129_52
# %bb.40:                               # %if.then146
	movl	$0, -8(%rbp)
.LBB129_41:                             # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_43 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB129_51
# %bb.42:                               # %for.body150
                                        #   in Loop: Header=BB129_41 Depth=1
	movl	$0, -4(%rbp)
.LBB129_43:                             # %for.cond151
                                        #   Parent Loop BB129_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB129_49
# %bb.44:                               # %for.body154
                                        #   in Loop: Header=BB129_43 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB129_46
# %bb.45:                               # %cond.true168
                                        #   in Loop: Header=BB129_43 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB129_47
.LBB129_46:                             # %cond.false185
                                        #   in Loop: Header=BB129_43 Depth=2
	movq	$-1, %rax
	jmp	.LBB129_47
.LBB129_47:                             # %cond.end186
                                        #   in Loop: Header=BB129_43 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.48:                               # %for.inc198
                                        #   in Loop: Header=BB129_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_43
.LBB129_49:                             # %for.end200
                                        #   in Loop: Header=BB129_41 Depth=1
	jmp	.LBB129_50
.LBB129_50:                             # %for.inc201
                                        #   in Loop: Header=BB129_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_41
.LBB129_51:                             # %for.end203
	jmp	.LBB129_52
.LBB129_52:                             # %if.end204
	movl	$1, %edi
	callq	StoreMV8x8
	xorl	%edi, %edi
	callq	RestoreMV8x8
	movl	$0, -16(%rbp)
.LBB129_53:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_55 Depth 2
                                        #       Child Loop BB129_57 Depth 3
                                        #         Child Loop BB129_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB129_68
# %bb.54:                               # %for.body208
                                        #   in Loop: Header=BB129_53 Depth=1
	movl	$0, -12(%rbp)
.LBB129_55:                             # %for.cond209
                                        #   Parent Loop BB129_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB129_57 Depth 3
                                        #         Child Loop BB129_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB129_66
# %bb.56:                               # %for.body212
                                        #   in Loop: Header=BB129_55 Depth=2
	movl	$0, -8(%rbp)
.LBB129_57:                             # %for.cond213
                                        #   Parent Loop BB129_53 Depth=1
                                        #     Parent Loop BB129_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB129_59 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB129_64
# %bb.58:                               # %for.body216
                                        #   in Loop: Header=BB129_57 Depth=3
	movl	$0, -4(%rbp)
.LBB129_59:                             # %for.cond217
                                        #   Parent Loop BB129_53 Depth=1
                                        #     Parent Loop BB129_55 Depth=2
                                        #       Parent Loop BB129_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB129_62
# %bb.60:                               # %for.body220
                                        #   in Loop: Header=BB129_59 Depth=4
	movq	cofAC_8x8ts, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc237
                                        #   in Loop: Header=BB129_59 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_59
.LBB129_62:                             # %for.end239
                                        #   in Loop: Header=BB129_57 Depth=3
	jmp	.LBB129_63
.LBB129_63:                             # %for.inc240
                                        #   in Loop: Header=BB129_57 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_57
.LBB129_64:                             # %for.end242
                                        #   in Loop: Header=BB129_55 Depth=2
	jmp	.LBB129_65
.LBB129_65:                             # %for.inc243
                                        #   in Loop: Header=BB129_55 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB129_55
.LBB129_66:                             # %for.end245
                                        #   in Loop: Header=BB129_53 Depth=1
	jmp	.LBB129_67
.LBB129_67:                             # %for.inc246
                                        #   in Loop: Header=BB129_53 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB129_53
.LBB129_68:                             # %for.end248
	cmpl	$5, cnt_nonz8_8x8ts
	jg	.LBB129_83
# %bb.69:                               # %land.lhs.true251
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB129_71
# %bb.70:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB129_83
.LBB129_71:                             # %if.then257
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB129_72:                             # %for.cond258
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_74 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB129_82
# %bb.73:                               # %for.body261
                                        #   in Loop: Header=BB129_72 Depth=1
	movl	$0, -4(%rbp)
.LBB129_74:                             # %for.cond262
                                        #   Parent Loop BB129_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB129_80
# %bb.75:                               # %for.body265
                                        #   in Loop: Header=BB129_74 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB129_77
# %bb.76:                               # %if.then267
                                        #   in Loop: Header=BB129_74 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB129_78
.LBB129_77:                             # %if.else278
                                        #   in Loop: Header=BB129_74 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB129_78:                             # %if.end283
                                        #   in Loop: Header=BB129_74 Depth=2
	jmp	.LBB129_79
.LBB129_79:                             # %for.inc284
                                        #   in Loop: Header=BB129_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_74
.LBB129_80:                             # %for.end286
                                        #   in Loop: Header=BB129_72 Depth=1
	jmp	.LBB129_81
.LBB129_81:                             # %for.inc287
                                        #   in Loop: Header=BB129_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_72
.LBB129_82:                             # %for.end289
	jmp	.LBB129_95
.LBB129_83:                             # %if.else290
	movl	cbp8_8x8ts, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk8_8x8ts, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB129_84:                             # %for.cond293
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_86 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB129_94
# %bb.85:                               # %for.body296
                                        #   in Loop: Header=BB129_84 Depth=1
	movl	$0, -4(%rbp)
.LBB129_86:                             # %for.cond297
                                        #   Parent Loop BB129_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB129_92
# %bb.87:                               # %for.body300
                                        #   in Loop: Header=BB129_86 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB129_89
# %bb.88:                               # %if.then303
                                        #   in Loop: Header=BB129_86 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB129_90
.LBB129_89:                             # %if.else317
                                        #   in Loop: Header=BB129_86 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB129_90:                             # %if.end326
                                        #   in Loop: Header=BB129_86 Depth=2
	jmp	.LBB129_91
.LBB129_91:                             # %for.inc327
                                        #   in Loop: Header=BB129_86 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_86
.LBB129_92:                             # %for.end329
                                        #   in Loop: Header=BB129_84 Depth=1
	jmp	.LBB129_93
.LBB129_93:                             # %for.inc330
                                        #   in Loop: Header=BB129_84 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_84
.LBB129_94:                             # %for.end332
	jmp	.LBB129_95
.LBB129_95:                             # %if.end333
	movl	$0, -8(%rbp)
.LBB129_96:                             # %for.cond334
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_98 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB129_103
# %bb.97:                               # %for.body337
                                        #   in Loop: Header=BB129_96 Depth=1
	movl	$0, -4(%rbp)
.LBB129_98:                             # %for.cond338
                                        #   Parent Loop BB129_96 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB129_101
# %bb.99:                               # %for.body341
                                        #   in Loop: Header=BB129_98 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.100:                              # %for.inc382
                                        #   in Loop: Header=BB129_98 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_98
.LBB129_101:                            # %for.end384
                                        #   in Loop: Header=BB129_96 Depth=1
	jmp	.LBB129_102
.LBB129_102:                            # %for.inc385
                                        #   in Loop: Header=BB129_96 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_96
.LBB129_103:                            # %for.end387
	jmp	.LBB129_157
.LBB129_104:                            # %if.else388
	movl	$0, -16(%rbp)
.LBB129_105:                            # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_107 Depth 2
                                        #       Child Loop BB129_109 Depth 3
                                        #         Child Loop BB129_111 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB129_120
# %bb.106:                              # %for.body393
                                        #   in Loop: Header=BB129_105 Depth=1
	movl	$0, -12(%rbp)
.LBB129_107:                            # %for.cond394
                                        #   Parent Loop BB129_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB129_109 Depth 3
                                        #         Child Loop BB129_111 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB129_118
# %bb.108:                              # %for.body397
                                        #   in Loop: Header=BB129_107 Depth=2
	movl	$0, -8(%rbp)
.LBB129_109:                            # %for.cond398
                                        #   Parent Loop BB129_105 Depth=1
                                        #     Parent Loop BB129_107 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB129_111 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB129_116
# %bb.110:                              # %for.body401
                                        #   in Loop: Header=BB129_109 Depth=3
	movl	$0, -4(%rbp)
.LBB129_111:                            # %for.cond402
                                        #   Parent Loop BB129_105 Depth=1
                                        #     Parent Loop BB129_107 Depth=2
                                        #       Parent Loop BB129_109 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB129_114
# %bb.112:                              # %for.body405
                                        #   in Loop: Header=BB129_111 Depth=4
	movq	cofAC8x8, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.113:                              # %for.inc423
                                        #   in Loop: Header=BB129_111 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_111
.LBB129_114:                            # %for.end425
                                        #   in Loop: Header=BB129_109 Depth=3
	jmp	.LBB129_115
.LBB129_115:                            # %for.inc426
                                        #   in Loop: Header=BB129_109 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_109
.LBB129_116:                            # %for.end428
                                        #   in Loop: Header=BB129_107 Depth=2
	jmp	.LBB129_117
.LBB129_117:                            # %for.inc429
                                        #   in Loop: Header=BB129_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB129_107
.LBB129_118:                            # %for.end431
                                        #   in Loop: Header=BB129_105 Depth=1
	jmp	.LBB129_119
.LBB129_119:                            # %for.inc432
                                        #   in Loop: Header=BB129_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB129_105
.LBB129_120:                            # %for.end434
	cmpl	$5, cnt_nonz_8x8
	jg	.LBB129_136
# %bb.121:                              # %land.lhs.true437
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB129_136
# %bb.122:                              # %land.lhs.true441
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB129_124
# %bb.123:                              # %lor.lhs.false447
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB129_136
.LBB129_124:                            # %if.then451
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB129_125:                            # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_127 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB129_135
# %bb.126:                              # %for.body457
                                        #   in Loop: Header=BB129_125 Depth=1
	movl	$0, -4(%rbp)
.LBB129_127:                            # %for.cond458
                                        #   Parent Loop BB129_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB129_133
# %bb.128:                              # %for.body461
                                        #   in Loop: Header=BB129_127 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB129_130
# %bb.129:                              # %if.then464
                                        #   in Loop: Header=BB129_127 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB129_131
.LBB129_130:                            # %if.else478
                                        #   in Loop: Header=BB129_127 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB129_131:                            # %if.end483
                                        #   in Loop: Header=BB129_127 Depth=2
	jmp	.LBB129_132
.LBB129_132:                            # %for.inc484
                                        #   in Loop: Header=BB129_127 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_127
.LBB129_133:                            # %for.end486
                                        #   in Loop: Header=BB129_125 Depth=1
	jmp	.LBB129_134
.LBB129_134:                            # %for.inc487
                                        #   in Loop: Header=BB129_125 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_125
.LBB129_135:                            # %for.end489
	jmp	.LBB129_148
.LBB129_136:                            # %if.else490
	movl	cbp8x8, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movslq	cbp_blk8x8, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB129_137:                            # %for.cond494
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_139 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB129_147
# %bb.138:                              # %for.body497
                                        #   in Loop: Header=BB129_137 Depth=1
	movl	$0, -4(%rbp)
.LBB129_139:                            # %for.cond498
                                        #   Parent Loop BB129_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB129_145
# %bb.140:                              # %for.body501
                                        #   in Loop: Header=BB129_139 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB129_142
# %bb.141:                              # %if.then504
                                        #   in Loop: Header=BB129_139 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB129_143
.LBB129_142:                            # %if.else518
                                        #   in Loop: Header=BB129_139 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB129_143:                            # %if.end527
                                        #   in Loop: Header=BB129_139 Depth=2
	jmp	.LBB129_144
.LBB129_144:                            # %for.inc528
                                        #   in Loop: Header=BB129_139 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_139
.LBB129_145:                            # %for.end530
                                        #   in Loop: Header=BB129_137 Depth=1
	jmp	.LBB129_146
.LBB129_146:                            # %for.inc531
                                        #   in Loop: Header=BB129_137 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_137
.LBB129_147:                            # %for.end533
	jmp	.LBB129_148
.LBB129_148:                            # %if.end534
	movl	$0, -8(%rbp)
.LBB129_149:                            # %for.cond535
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_151 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB129_156
# %bb.150:                              # %for.body538
                                        #   in Loop: Header=BB129_149 Depth=1
	movl	$0, -4(%rbp)
.LBB129_151:                            # %for.cond539
                                        #   Parent Loop BB129_149 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB129_154
# %bb.152:                              # %for.body542
                                        #   in Loop: Header=BB129_151 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.153:                              # %for.inc583
                                        #   in Loop: Header=BB129_151 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_151
.LBB129_154:                            # %for.end585
                                        #   in Loop: Header=BB129_149 Depth=1
	jmp	.LBB129_155
.LBB129_155:                            # %for.inc586
                                        #   in Loop: Header=BB129_149 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_149
.LBB129_156:                            # %for.end588
	jmp	.LBB129_157
.LBB129_157:                            # %if.end589
	cmpl	$63177932, -36(%rbp)    # imm = 0x3C404CC
	jne	.LBB129_159
.LBB129_158:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB129_159:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB129_158
.Lfunc_end129:
	.size	SetCoeffAndReconstruction8x8.100, .Lfunc_end129-SetCoeffAndReconstruction8x8.100
	.cfi_endproc
                                        # -- End function
	.type	cofDC,@object           # @cofDC
	.bss
	.globl	cofDC
	.p2align	3
cofDC:
	.quad	0
	.size	cofDC, 8

	.type	cofAC,@object           # @cofAC
	.globl	cofAC
	.p2align	3
cofAC:
	.quad	0
	.size	cofAC, 8

	.type	cofAC8x8,@object        # @cofAC8x8
	.globl	cofAC8x8
	.p2align	3
cofAC8x8:
	.quad	0
	.size	cofAC8x8, 8

	.type	cofAC4x4intern,@object  # @cofAC4x4intern
	.globl	cofAC4x4intern
	.p2align	3
cofAC4x4intern:
	.quad	0
	.size	cofAC4x4intern, 8

	.type	cofAC_8x8ts,@object     # @cofAC_8x8ts
	.globl	cofAC_8x8ts
	.p2align	3
cofAC_8x8ts:
	.quad	0
	.size	cofAC_8x8ts, 8

	.type	cs_mb,@object           # @cs_mb
	.globl	cs_mb
	.p2align	3
cs_mb:
	.quad	0
	.size	cs_mb, 8

	.type	cs_b8,@object           # @cs_b8
	.globl	cs_b8
	.p2align	3
cs_b8:
	.quad	0
	.size	cs_b8, 8

	.type	cs_cm,@object           # @cs_cm
	.globl	cs_cm
	.p2align	3
cs_cm:
	.quad	0
	.size	cs_cm, 8

	.type	cs_imb,@object          # @cs_imb
	.globl	cs_imb
	.p2align	3
cs_imb:
	.quad	0
	.size	cs_imb, 8

	.type	cs_ib8,@object          # @cs_ib8
	.globl	cs_ib8
	.p2align	3
cs_ib8:
	.quad	0
	.size	cs_ib8, 8

	.type	cs_ib4,@object          # @cs_ib4
	.globl	cs_ib4
	.p2align	3
cs_ib4:
	.quad	0
	.size	cs_ib4, 8

	.type	cs_pc,@object           # @cs_pc
	.globl	cs_pc
	.p2align	3
cs_pc:
	.quad	0
	.size	cs_pc, 8

	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	cofAC4x4,@object        # @cofAC4x4
	.globl	cofAC4x4
	.p2align	3
cofAC4x4:
	.quad	0
	.size	cofAC4x4, 8

	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	cofAC4x4_chroma,@object # @cofAC4x4_chroma
	.comm	cofAC4x4_chroma,288,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	cbp8x8,@object          # @cbp8x8
	.comm	cbp8x8,4,4
	.type	best8x8pdir,@object     # @best8x8pdir
	.comm	best8x8pdir,120,16
	.type	best8x8mode,@object     # @best8x8mode
	.comm	best8x8mode,8,2
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"Unsupported mode in SetModesAndRefframeForBlocks!\n"
	.size	.L.str, 51

	.type	best8x8fwref,@object    # @best8x8fwref
	.comm	best8x8fwref,120,16
	.type	best8x8bwref,@object    # @best8x8bwref
	.comm	best8x8bwref,120,16
	.type	part8x8mode,@object     # @part8x8mode
	.comm	part8x8mode,16,16
	.type	part8x8pdir,@object     # @part8x8pdir
	.comm	part8x8pdir,8,2
	.type	part8x8fwref,@object    # @part8x8fwref
	.comm	part8x8fwref,8,2
	.type	part8x8bwref,@object    # @part8x8bwref
	.comm	part8x8bwref,8,2
	.type	cnt_nonz8_8x8ts,@object # @cnt_nonz8_8x8ts
	.comm	cnt_nonz8_8x8ts,4,4
	.type	mpr_8x8ts,@object       # @mpr_8x8ts
	.comm	mpr_8x8ts,512,16
	.type	cbp8_8x8ts,@object      # @cbp8_8x8ts
	.comm	cbp8_8x8ts,4,4
	.type	cbp_blk8_8x8ts,@object  # @cbp_blk8_8x8ts
	.comm	cbp_blk8_8x8ts,8,8
	.type	rec_mbY_8x8ts,@object   # @rec_mbY_8x8ts
	.comm	rec_mbY_8x8ts,512,16
	.type	rec_resG_8x8ts,@object  # @rec_resG_8x8ts
	.comm	rec_resG_8x8ts,1024,16
	.type	mprRGB_8x8ts,@object    # @mprRGB_8x8ts
	.comm	mprRGB_8x8ts,3072,16
	.type	resTrans_R_8x8ts,@object # @resTrans_R_8x8ts
	.comm	resTrans_R_8x8ts,1024,16
	.type	resTrans_B_8x8ts,@object # @resTrans_B_8x8ts
	.comm	resTrans_B_8x8ts,1024,16
	.type	cnt_nonz_8x8,@object    # @cnt_nonz_8x8
	.comm	cnt_nonz_8x8,4,4
	.type	mpr8x8,@object          # @mpr8x8
	.comm	mpr8x8,512,16
	.type	cbp_blk8x8,@object      # @cbp_blk8x8
	.comm	cbp_blk8x8,4,4
	.type	rec_mbY8x8,@object      # @rec_mbY8x8
	.comm	rec_mbY8x8,512,16
	.type	rec_resG_8x8,@object    # @rec_resG_8x8
	.comm	rec_resG_8x8,1024,16
	.type	mprRGB_8x8,@object      # @mprRGB_8x8
	.comm	mprRGB_8x8,3072,16
	.type	resTrans_R_8x8,@object  # @resTrans_R_8x8
	.comm	resTrans_R_8x8,1024,16
	.type	resTrans_B_8x8,@object  # @resTrans_B_8x8
	.comm	resTrans_B_8x8,1024,16
	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"invalid direction mode"
	.size	.L.str.1, 23

	.type	pred,@object            # @pred
	.local	pred
	.comm	pred,1024,16
	.type	best_mode,@object       # @best_mode
	.comm	best_mode,4,4
	.type	best_c_imode,@object    # @best_c_imode
	.comm	best_c_imode,4,4
	.type	best_i16offset,@object  # @best_i16offset
	.comm	best_i16offset,4,4
	.type	bi_pred_me,@object      # @bi_pred_me
	.comm	bi_pred_me,4,4
	.type	b8mode,@object          # @b8mode
	.comm	b8mode,8,2
	.type	b8pdir,@object          # @b8pdir
	.comm	b8pdir,8,2
	.type	b4_ipredmode,@object    # @b4_ipredmode
	.comm	b4_ipredmode,64,16
	.type	b4_intra_pred_modes,@object # @b4_intra_pred_modes
	.comm	b4_intra_pred_modes,64,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	rec_mbY,@object         # @rec_mbY
	.comm	rec_mbY,512,16
	.type	rec_mbU,@object         # @rec_mbU
	.comm	rec_mbU,512,16
	.type	rec_mbV,@object         # @rec_mbV
	.comm	rec_mbV,512,16
	.type	cbp,@object             # @cbp
	.comm	cbp,4,4
	.type	cbp_blk,@object         # @cbp_blk
	.comm	cbp_blk,8,8
	.type	luma_transform_size_8x8_flag,@object # @luma_transform_size_8x8_flag
	.comm	luma_transform_size_8x8_flag,4,4
	.type	frefframe,@object       # @frefframe
	.comm	frefframe,32,16
	.type	brefframe,@object       # @brefframe
	.comm	brefframe,32,16
	.type	all_mv8x8,@object       # @all_mv8x8
	.comm	all_mv8x8,256,16
	.type	pred_mv8x8,@object      # @pred_mv8x8
	.comm	pred_mv8x8,256,16
	.type	encode_one_macroblock.b8_mode_table,@object # @encode_one_macroblock.b8_mode_table
	.section	.rodata,"a",@progbits
	.p2align	4
encode_one_macroblock.b8_mode_table:
	.long	0                       # 0x0
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	6                       # 0x6
	.long	7                       # 0x7
	.long	0                       # 0x0
	.size	encode_one_macroblock.b8_mode_table, 24

	.type	encode_one_macroblock.mb_mode_table,@object # @encode_one_macroblock.mb_mode_table
	.p2align	4
encode_one_macroblock.mb_mode_table:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	8                       # 0x8
	.long	10                      # 0xa
	.long	9                       # 0x9
	.long	13                      # 0xd
	.size	encode_one_macroblock.mb_mode_table, 32

	.type	encode_one_macroblock.mb_mode_table_RCT,@object # @encode_one_macroblock.mb_mode_table_RCT
	.p2align	4
encode_one_macroblock.mb_mode_table_RCT:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	8                       # 0x8
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	9                       # 0x9
	.long	13                      # 0xd
	.size	encode_one_macroblock.mb_mode_table_RCT, 44

	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	cost8_8x8ts,@object     # @cost8_8x8ts
	.comm	cost8_8x8ts,4,4
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	diffy,@object           # @diffy
	.comm	diffy,1024,16
	.type	temp_imgU,@object       # @temp_imgU
	.comm	temp_imgU,512,16
	.type	temp_imgV,@object       # @temp_imgV
	.comm	temp_imgV,512,16
	.type	temp_imgY,@object       # @temp_imgY
	.comm	temp_imgY,512,16
	.type	DELTA_QP,@object        # @DELTA_QP
	.comm	DELTA_QP,4,4
	.type	QP,@object              # @QP
	.comm	QP,4,4
	.type	DELTA_QP2,@object       # @DELTA_QP2
	.comm	DELTA_QP2,4,4
	.type	QP2,@object             # @QP2
	.comm	QP2,4,4
	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4
	.type	McostState,@object      # @McostState
	.comm	McostState,8,8
	.type	all_mincost,@object     # @all_mincost
	.comm	all_mincost,8,8
	.type	all_bwmincost,@object   # @all_bwmincost
	.comm	all_bwmincost,8,8
	.type	pred_SAD_space,@object  # @pred_SAD_space
	.comm	pred_SAD_space,4,4
	.type	pred_SAD_time,@object   # @pred_SAD_time
	.comm	pred_SAD_time,4,4
	.type	pred_SAD_ref,@object    # @pred_SAD_ref
	.comm	pred_SAD_ref,4,4
	.type	pred_SAD_uplayer,@object # @pred_SAD_uplayer
	.comm	pred_SAD_uplayer,4,4
	.type	FME_blocktype,@object   # @FME_blocktype
	.comm	FME_blocktype,4,4
	.type	pred_MV_time,@object    # @pred_MV_time
	.comm	pred_MV_time,8,4
	.type	pred_MV_ref,@object     # @pred_MV_ref
	.comm	pred_MV_ref,8,4
	.type	pred_MV_uplayer,@object # @pred_MV_uplayer
	.comm	pred_MV_uplayer,8,4
	.type	Quantize_step,@object   # @Quantize_step
	.comm	Quantize_step,4,4
	.type	Bsize,@object           # @Bsize
	.comm	Bsize,32,16
	.type	Thresh4x4,@object       # @Thresh4x4
	.comm	Thresh4x4,4,4
	.type	AlphaSec,@object        # @AlphaSec
	.comm	AlphaSec,32,16
	.type	AlphaThird,@object      # @AlphaThird
	.comm	AlphaThird,32,16
	.type	flag_intra,@object      # @flag_intra
	.comm	flag_intra,8,8
	.type	flag_intra_SAD,@object  # @flag_intra_SAD
	.comm	flag_intra_SAD,4,4
	.type	SearchState,@object     # @SearchState
	.comm	SearchState,8,8
	.type	bit_rate,@object        # @bit_rate
	.comm	bit_rate,8,8
	.type	frame_rate,@object      # @frame_rate
	.comm	frame_rate,8,8
	.type	GAMMAP,@object          # @GAMMAP
	.comm	GAMMAP,8,8
	.type	BETAP,@object           # @BETAP
	.comm	BETAP,8,8
	.type	RC_MAX_QUANT,@object    # @RC_MAX_QUANT
	.comm	RC_MAX_QUANT,4,4
	.type	RC_MIN_QUANT,@object    # @RC_MIN_QUANT
	.comm	RC_MIN_QUANT,4,4
	.type	BufferSize,@object      # @BufferSize
	.comm	BufferSize,8,8
	.type	GOPTargetBufferLevel,@object # @GOPTargetBufferLevel
	.comm	GOPTargetBufferLevel,8,8
	.type	CurrentBufferFullness,@object # @CurrentBufferFullness
	.comm	CurrentBufferFullness,8,8
	.type	TargetBufferLevel,@object # @TargetBufferLevel
	.comm	TargetBufferLevel,8,8
	.type	PreviousBit_Rate,@object # @PreviousBit_Rate
	.comm	PreviousBit_Rate,8,8
	.type	AWp,@object             # @AWp
	.comm	AWp,8,8
	.type	AWb,@object             # @AWb
	.comm	AWb,8,8
	.type	MyInitialQp,@object     # @MyInitialQp
	.comm	MyInitialQp,4,4
	.type	PAverageQp,@object      # @PAverageQp
	.comm	PAverageQp,4,4
	.type	PreviousPictureMAD,@object # @PreviousPictureMAD
	.comm	PreviousPictureMAD,8,8
	.type	MADPictureC1,@object    # @MADPictureC1
	.comm	MADPictureC1,8,8
	.type	MADPictureC2,@object    # @MADPictureC2
	.comm	MADPictureC2,8,8
	.type	PMADPictureC1,@object   # @PMADPictureC1
	.comm	PMADPictureC1,8,8
	.type	PMADPictureC2,@object   # @PMADPictureC2
	.comm	PMADPictureC2,8,8
	.type	PictureRejected,@object # @PictureRejected
	.comm	PictureRejected,84,16
	.type	PPictureMAD,@object     # @PPictureMAD
	.comm	PPictureMAD,168,16
	.type	PictureMAD,@object      # @PictureMAD
	.comm	PictureMAD,168,16
	.type	ReferenceMAD,@object    # @ReferenceMAD
	.comm	ReferenceMAD,168,16
	.type	m_rgRejected,@object    # @m_rgRejected
	.comm	m_rgRejected,84,16
	.type	m_rgQp,@object          # @m_rgQp
	.comm	m_rgQp,168,16
	.type	m_rgRp,@object          # @m_rgRp
	.comm	m_rgRp,168,16
	.type	m_X1,@object            # @m_X1
	.comm	m_X1,8,8
	.type	m_X2,@object            # @m_X2
	.comm	m_X2,8,8
	.type	m_Qc,@object            # @m_Qc
	.comm	m_Qc,4,4
	.type	m_Qstep,@object         # @m_Qstep
	.comm	m_Qstep,8,8
	.type	m_Qp,@object            # @m_Qp
	.comm	m_Qp,4,4
	.type	Pm_Qp,@object           # @Pm_Qp
	.comm	Pm_Qp,4,4
	.type	PreAveMBHeader,@object  # @PreAveMBHeader
	.comm	PreAveMBHeader,4,4
	.type	CurAveMBHeader,@object  # @CurAveMBHeader
	.comm	CurAveMBHeader,4,4
	.type	PPreHeader,@object      # @PPreHeader
	.comm	PPreHeader,4,4
	.type	PreviousQp1,@object     # @PreviousQp1
	.comm	PreviousQp1,4,4
	.type	PreviousQp2,@object     # @PreviousQp2
	.comm	PreviousQp2,4,4
	.type	NumberofBFrames,@object # @NumberofBFrames
	.comm	NumberofBFrames,4,4
	.type	TotalFrameQP,@object    # @TotalFrameQP
	.comm	TotalFrameQP,4,4
	.type	NumberofBasicUnit,@object # @NumberofBasicUnit
	.comm	NumberofBasicUnit,4,4
	.type	PAveHeaderBits1,@object # @PAveHeaderBits1
	.comm	PAveHeaderBits1,4,4
	.type	PAveHeaderBits2,@object # @PAveHeaderBits2
	.comm	PAveHeaderBits2,4,4
	.type	PAveHeaderBits3,@object # @PAveHeaderBits3
	.comm	PAveHeaderBits3,4,4
	.type	PAveFrameQP,@object     # @PAveFrameQP
	.comm	PAveFrameQP,4,4
	.type	TotalNumberofBasicUnit,@object # @TotalNumberofBasicUnit
	.comm	TotalNumberofBasicUnit,4,4
	.type	CodedBasicUnit,@object  # @CodedBasicUnit
	.comm	CodedBasicUnit,4,4
	.type	MINVALUE,@object        # @MINVALUE
	.comm	MINVALUE,8,8
	.type	CurrentFrameMAD,@object # @CurrentFrameMAD
	.comm	CurrentFrameMAD,8,8
	.type	CurrentBUMAD,@object    # @CurrentBUMAD
	.comm	CurrentBUMAD,8,8
	.type	TotalBUMAD,@object      # @TotalBUMAD
	.comm	TotalBUMAD,8,8
	.type	PreviousFrameMAD,@object # @PreviousFrameMAD
	.comm	PreviousFrameMAD,8,8
	.type	m_Hp,@object            # @m_Hp
	.comm	m_Hp,4,4
	.type	m_windowSize,@object    # @m_windowSize
	.comm	m_windowSize,4,4
	.type	MADm_windowSize,@object # @MADm_windowSize
	.comm	MADm_windowSize,4,4
	.type	DDquant,@object         # @DDquant
	.comm	DDquant,4,4
	.type	MBPerRow,@object        # @MBPerRow
	.comm	MBPerRow,4,4
	.type	AverageMADPreviousFrame,@object # @AverageMADPreviousFrame
	.comm	AverageMADPreviousFrame,8,8
	.type	TotalBasicUnitBits,@object # @TotalBasicUnitBits
	.comm	TotalBasicUnitBits,4,4
	.type	QPLastPFrame,@object    # @QPLastPFrame
	.comm	QPLastPFrame,4,4
	.type	QPLastGOP,@object       # @QPLastGOP
	.comm	QPLastGOP,4,4
	.type	Pm_rgQp,@object         # @Pm_rgQp
	.comm	Pm_rgQp,160,16
	.type	Pm_rgRp,@object         # @Pm_rgRp
	.comm	Pm_rgRp,160,16
	.type	Pm_X1,@object           # @Pm_X1
	.comm	Pm_X1,8,8
	.type	Pm_X2,@object           # @Pm_X2
	.comm	Pm_X2,8,8
	.type	Pm_Hp,@object           # @Pm_Hp
	.comm	Pm_Hp,4,4
	.type	FieldQPBuffer,@object   # @FieldQPBuffer
	.comm	FieldQPBuffer,4,4
	.type	FrameQPBuffer,@object   # @FrameQPBuffer
	.comm	FrameQPBuffer,4,4
	.type	FrameAveHeaderBits,@object # @FrameAveHeaderBits
	.comm	FrameAveHeaderBits,4,4
	.type	FieldAveHeaderBits,@object # @FieldAveHeaderBits
	.comm	FieldAveHeaderBits,4,4
	.type	BUPFMAD,@object         # @BUPFMAD
	.comm	BUPFMAD,8,8
	.type	BUCFMAD,@object         # @BUCFMAD
	.comm	BUCFMAD,8,8
	.type	FCBUCFMAD,@object       # @FCBUCFMAD
	.comm	FCBUCFMAD,8,8
	.type	FCBUPFMAD,@object       # @FCBUPFMAD
	.comm	FCBUPFMAD,8,8
	.type	GOPOverdue,@object      # @GOPOverdue
	.comm	GOPOverdue,4,4
	.type	diffyy,@object          # @diffyy
	.comm	diffyy,1024,16
	.type	diffy8,@object          # @diffy8
	.comm	diffy8,1024,16
	.type	best_transform_size,@object # @best_transform_size
	.comm	best_transform_size,16,16
	.type	NoMbPartLessThan8x8Flag,@object # @NoMbPartLessThan8x8Flag
	.comm	NoMbPartLessThan8x8Flag,4,4
	.type	mv8x8,@object           # @mv8x8
	.comm	mv8x8,128,16
	.type	ref8x8,@object          # @ref8x8
	.comm	ref8x8,64,16

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
