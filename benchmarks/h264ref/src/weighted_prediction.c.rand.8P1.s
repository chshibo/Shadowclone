	.text
	.file	"weighted_prediction.c"
	.globl	estimate_weighting_factor_P_slice # -- Begin function estimate_weighting_factor_P_slice
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice,@function
estimate_weighting_factor_P_slice:      # @estimate_weighting_factor_P_slice
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB0_9
# %bb.1:                                # %func_estimate_weighting_factor_P_slice.5
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.5
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_estimate_weighting_factor_P_slice.8
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.8
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_estimate_weighting_factor_P_slice.16
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.16
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_estimate_weighting_factor_P_slice.22
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.22
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %func_estimate_weighting_factor_P_slice.24
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.24
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_6:                                # %func_estimate_weighting_factor_P_slice.28
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.28
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_7:                                # %func_estimate_weighting_factor_P_slice.29
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.29
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_8:                                # %func_estimate_weighting_factor_P_slice.30
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.30
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB0_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB0_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB0_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB0_7
	jmp	.LBB0_8
.Lfunc_end0:
	.size	estimate_weighting_factor_P_slice, .Lfunc_end0-estimate_weighting_factor_P_slice
	.cfi_endproc
                                        # -- End function
	.globl	estimate_weighting_factor_B_slice # -- Begin function estimate_weighting_factor_B_slice
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice,@function
estimate_weighting_factor_B_slice:      # @estimate_weighting_factor_B_slice
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB1_9
# %bb.1:                                # %func_estimate_weighting_factor_B_slice.2
	callq	estimate_weighting_factor_B_slice.2
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_estimate_weighting_factor_B_slice.3
	.cfi_def_cfa %rbp, 16
	callq	estimate_weighting_factor_B_slice.3
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_3:                                # %func_estimate_weighting_factor_B_slice.6
	.cfi_def_cfa %rbp, 16
	callq	estimate_weighting_factor_B_slice.6
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_4:                                # %func_estimate_weighting_factor_B_slice.7
	.cfi_def_cfa %rbp, 16
	callq	estimate_weighting_factor_B_slice.7
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_5:                                # %func_estimate_weighting_factor_B_slice.10
	.cfi_def_cfa %rbp, 16
	callq	estimate_weighting_factor_B_slice.10
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_6:                                # %func_estimate_weighting_factor_B_slice.14
	.cfi_def_cfa %rbp, 16
	callq	estimate_weighting_factor_B_slice.14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_7:                                # %func_estimate_weighting_factor_B_slice.17
	.cfi_def_cfa %rbp, 16
	callq	estimate_weighting_factor_B_slice.17
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_8:                                # %func_estimate_weighting_factor_B_slice.20
	.cfi_def_cfa %rbp, 16
	callq	estimate_weighting_factor_B_slice.20
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB1_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB1_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB1_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB1_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB1_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB1_7
	jmp	.LBB1_8
.Lfunc_end1:
	.size	estimate_weighting_factor_B_slice, .Lfunc_end1-estimate_weighting_factor_B_slice
	.cfi_endproc
                                        # -- End function
	.globl	test_wp_P_slice         # -- Begin function test_wp_P_slice
	.p2align	4, 0x90
	.type	test_wp_P_slice,@function
test_wp_P_slice:                        # @test_wp_P_slice
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB2_9
# %bb.1:                                # %func_test_wp_P_slice.1
	movl	%ebx, %edi
	callq	test_wp_P_slice.1
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_test_wp_P_slice.9
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_P_slice.9
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_3:                                # %func_test_wp_P_slice.11
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_P_slice.11
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_4:                                # %func_test_wp_P_slice.12
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_P_slice.12
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_5:                                # %func_test_wp_P_slice.13
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_P_slice.13
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_6:                                # %func_test_wp_P_slice.18
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_P_slice.18
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_7:                                # %func_test_wp_P_slice.19
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_P_slice.19
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_8:                                # %func_test_wp_P_slice.23
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_P_slice.23
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB2_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB2_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB2_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB2_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB2_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB2_7
	jmp	.LBB2_8
.Lfunc_end2:
	.size	test_wp_P_slice, .Lfunc_end2-test_wp_P_slice
	.cfi_endproc
                                        # -- End function
	.globl	test_wp_B_slice         # -- Begin function test_wp_B_slice
	.p2align	4, 0x90
	.type	test_wp_B_slice,@function
test_wp_B_slice:                        # @test_wp_B_slice
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB3_9
# %bb.1:                                # %func_test_wp_B_slice.4
	movl	%ebx, %edi
	callq	test_wp_B_slice.4
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_test_wp_B_slice.15
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_B_slice.15
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_test_wp_B_slice.21
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_B_slice.21
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_test_wp_B_slice.25
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_B_slice.25
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %func_test_wp_B_slice.26
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_B_slice.26
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_6:                                # %func_test_wp_B_slice.27
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_B_slice.27
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_7:                                # %func_test_wp_B_slice.31
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_B_slice.31
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_8:                                # %func_test_wp_B_slice.32
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_B_slice.32
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB3_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB3_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB3_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB3_7
	jmp	.LBB3_8
.Lfunc_end3:
	.size	test_wp_B_slice, .Lfunc_end3-test_wp_B_slice
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.1
.LCPI4_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.1
	.p2align	4, 0x90
	.type	test_wp_P_slice.1,@function
test_wp_P_slice.1:                      # @test_wp_P_slice.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$1659768847, -60(%rbp)  # imm = 0x62EE100F
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB4_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB4_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB4_4
.LBB4_3:                                # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB4_4
.LBB4_4:                                # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB4_5:                                # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB4_7 Depth 2
                                        #       Child Loop BB4_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB4_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB4_5 Depth=1
	movl	$0, -24(%rbp)
.LBB4_7:                                # %for.cond9
                                        #   Parent Loop BB4_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB4_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB4_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB4_7 Depth=2
	movl	$0, -12(%rbp)
.LBB4_9:                                # %for.cond14
                                        #   Parent Loop BB4_5 Depth=1
                                        #     Parent Loop BB4_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB4_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB4_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB4_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB4_9
.LBB4_12:                               # %for.end
                                        #   in Loop: Header=BB4_7 Depth=2
	jmp	.LBB4_13
.LBB4_13:                               # %for.inc41
                                        #   in Loop: Header=BB4_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB4_7
.LBB4_14:                               # %for.end43
                                        #   in Loop: Header=BB4_5 Depth=1
	jmp	.LBB4_15
.LBB4_15:                               # %for.inc44
                                        #   in Loop: Header=BB4_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB4_5
.LBB4_16:                               # %for.end46
	movl	$0, -20(%rbp)
.LBB4_17:                               # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB4_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB4_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB4_17 Depth=1
	movl	$0, -24(%rbp)
.LBB4_19:                               # %for.cond50
                                        #   Parent Loop BB4_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB4_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB4_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB4_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB4_19
.LBB4_22:                               # %for.end60
                                        #   in Loop: Header=BB4_17 Depth=1
	jmp	.LBB4_23
.LBB4_23:                               # %for.inc61
                                        #   in Loop: Header=BB4_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB4_17
.LBB4_24:                               # %for.end63
	movl	$0, -16(%rbp)
.LBB4_25:                               # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB4_27 Depth 2
                                        #       Child Loop BB4_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB4_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB4_25 Depth=1
	movl	$0, -12(%rbp)
.LBB4_27:                               # %for.cond69
                                        #   Parent Loop BB4_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB4_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB4_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB4_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB4_29:                               # %for.cond85
                                        #   Parent Loop BB4_25 Depth=1
                                        #     Parent Loop BB4_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB4_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB4_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB4_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB4_29
.LBB4_32:                               # %for.end99
                                        #   in Loop: Header=BB4_27 Depth=2
	cmpl	$0, -64(%rbp)
	jne	.LBB4_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB4_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB4_34
	jp	.LBB4_34
	jmp	.LBB4_35
.LBB4_34:                               # %if.then106
                                        #   in Loop: Header=BB4_27 Depth=2
	vmovsd	.LCPI4_0(%rip), %xmm0   # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB4_36
.LBB4_35:                               # %if.else
                                        #   in Loop: Header=BB4_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB4_36:                               # %if.end
                                        #   in Loop: Header=BB4_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB4_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB4_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB4_39
.LBB4_38:                               # %if.then137
                                        #   in Loop: Header=BB4_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB4_39:                               # %if.end143
                                        #   in Loop: Header=BB4_27 Depth=2
	jmp	.LBB4_47
.LBB4_40:                               # %if.else144
                                        #   in Loop: Header=BB4_27 Depth=2
	vmovsd	.LCPI4_0(%rip), %xmm0   # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB4_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB4_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB4_46
.LBB4_42:                               # %cond.false168
                                        #   in Loop: Header=BB4_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB4_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB4_27 Depth=2
	movl	$127, %eax
	jmp	.LBB4_45
.LBB4_44:                               # %cond.false177
                                        #   in Loop: Header=BB4_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB4_45:                               # %cond.end183
                                        #   in Loop: Header=BB4_27 Depth=2
.LBB4_46:                               # %cond.end185
                                        #   in Loop: Header=BB4_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB4_47:                               # %if.end197
                                        #   in Loop: Header=BB4_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB4_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB4_27
.LBB4_49:                               # %for.end210
                                        #   in Loop: Header=BB4_25 Depth=1
	jmp	.LBB4_50
.LBB4_50:                               # %for.inc211
                                        #   in Loop: Header=BB4_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB4_25
.LBB4_51:                               # %for.end213
	movl	$0, -16(%rbp)
.LBB4_52:                               # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB4_54 Depth 2
                                        #       Child Loop BB4_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB4_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB4_52 Depth=1
	movl	$0, -36(%rbp)
.LBB4_54:                               # %for.cond219
                                        #   Parent Loop BB4_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB4_56 Depth 3
	movl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB4_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB4_54 Depth=2
	movl	$0, -32(%rbp)
.LBB4_56:                               # %for.cond225
                                        #   Parent Loop BB4_52 Depth=1
                                        #     Parent Loop BB4_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB4_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB4_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB4_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB4_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB4_60
.LBB4_59:                               # %if.then246
                                        #   in Loop: Header=BB4_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB4_63
.LBB4_60:                               # %if.end247
                                        #   in Loop: Header=BB4_56 Depth=3
	jmp	.LBB4_61
.LBB4_61:                               # %for.inc248
                                        #   in Loop: Header=BB4_56 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB4_56
.LBB4_62:                               # %for.end250.loopexit
                                        #   in Loop: Header=BB4_54 Depth=2
	jmp	.LBB4_63
.LBB4_63:                               # %for.end250
                                        #   in Loop: Header=BB4_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB4_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB4_52 Depth=1
	jmp	.LBB4_68
.LBB4_65:                               # %if.end254
                                        #   in Loop: Header=BB4_54 Depth=2
	jmp	.LBB4_66
.LBB4_66:                               # %for.inc255
                                        #   in Loop: Header=BB4_54 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB4_54
.LBB4_67:                               # %for.end257.loopexit
                                        #   in Loop: Header=BB4_52 Depth=1
	jmp	.LBB4_68
.LBB4_68:                               # %for.end257
                                        #   in Loop: Header=BB4_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB4_70
# %bb.69:                               # %if.then260
	jmp	.LBB4_73
.LBB4_70:                               # %if.end261
                                        #   in Loop: Header=BB4_52 Depth=1
	jmp	.LBB4_71
.LBB4_71:                               # %for.inc262
                                        #   in Loop: Header=BB4_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB4_52
.LBB4_72:                               # %for.end264.loopexit
	jmp	.LBB4_73
.LBB4_73:                               # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$1659768847, -60(%rbp)  # imm = 0x62EE100F
	jne	.LBB4_75
.LBB4_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_75:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB4_74
.Lfunc_end4:
	.size	test_wp_P_slice.1, .Lfunc_end4-test_wp_P_slice.1
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.2
.LCPI5_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.2
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.2,@function
estimate_weighting_factor_B_slice.2:    # @estimate_weighting_factor_B_slice.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$16522095, -92(%rbp)    # imm = 0xFC1B6F
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB5_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB5_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB5_4
.LBB5_3:                                # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB5_4
.LBB5_4:                                # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB5_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB5_7
.LBB5_6:                                # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB5_7:                                # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB5_8:                                # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB5_10 Depth 2
                                        #       Child Loop BB5_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB5_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB5_8 Depth=1
	movl	$0, -8(%rbp)
.LBB5_10:                               # %for.cond14
                                        #   Parent Loop BB5_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB5_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB5_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB5_10 Depth=2
	movl	$0, -16(%rbp)
.LBB5_12:                               # %for.cond19
                                        #   Parent Loop BB5_8 Depth=1
                                        #     Parent Loop BB5_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB5_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB5_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB5_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB5_12
.LBB5_15:                               # %for.end
                                        #   in Loop: Header=BB5_10 Depth=2
	jmp	.LBB5_16
.LBB5_16:                               # %for.inc50
                                        #   in Loop: Header=BB5_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB5_10
.LBB5_17:                               # %for.end52
                                        #   in Loop: Header=BB5_8 Depth=1
	jmp	.LBB5_18
.LBB5_18:                               # %for.inc53
                                        #   in Loop: Header=BB5_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB5_8
.LBB5_19:                               # %for.end55
	movl	$0, -4(%rbp)
.LBB5_20:                               # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB5_22 Depth 2
                                        #       Child Loop BB5_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB5_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB5_20 Depth=1
	movl	$0, -8(%rbp)
.LBB5_22:                               # %for.cond59
                                        #   Parent Loop BB5_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB5_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB5_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB5_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB5_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB5_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB5_29
.LBB5_25:                               # %cond.false70
                                        #   in Loop: Header=BB5_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB5_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB5_22 Depth=2
	movl	$127, %eax
	jmp	.LBB5_28
.LBB5_27:                               # %cond.false80
                                        #   in Loop: Header=BB5_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB5_28:                               # %cond.end88
                                        #   in Loop: Header=BB5_22 Depth=2
.LBB5_29:                               # %cond.end90
                                        #   in Loop: Header=BB5_22 Depth=2
	movl	%eax, -56(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB5_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB5_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB5_35
.LBB5_31:                               # %cond.false99
                                        #   in Loop: Header=BB5_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB5_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB5_22 Depth=2
	movl	$127, %eax
	jmp	.LBB5_34
.LBB5_33:                               # %cond.false107
                                        #   in Loop: Header=BB5_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB5_34:                               # %cond.end113
                                        #   in Loop: Header=BB5_22 Depth=2
.LBB5_35:                               # %cond.end115
                                        #   in Loop: Header=BB5_22 Depth=2
	movl	%eax, -60(%rbp)
	movl	$0, -20(%rbp)
.LBB5_36:                               # %for.cond117
                                        #   Parent Loop BB5_20 Depth=1
                                        #     Parent Loop BB5_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB5_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB5_36 Depth=3
	cmpl	$0, -56(%rbp)
	jne	.LBB5_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB5_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB5_49
.LBB5_39:                               # %if.else154
                                        #   in Loop: Header=BB5_36 Depth=3
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-56(%rbp)
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB5_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB5_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB5_45
.LBB5_41:                               # %cond.false160
                                        #   in Loop: Header=BB5_36 Depth=3
	movl	-64(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB5_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB5_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB5_44
.LBB5_43:                               # %cond.false166
                                        #   in Loop: Header=BB5_36 Depth=3
	movl	-64(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB5_44:                               # %cond.end170
                                        #   in Loop: Header=BB5_36 Depth=3
.LBB5_45:                               # %cond.end172
                                        #   in Loop: Header=BB5_36 Depth=3
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB5_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB5_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB5_48
.LBB5_47:                               # %if.then198
                                        #   in Loop: Header=BB5_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB5_48:                               # %if.end208
                                        #   in Loop: Header=BB5_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB5_49:                               # %if.end238
                                        #   in Loop: Header=BB5_36 Depth=3
	jmp	.LBB5_50
.LBB5_50:                               # %for.inc239
                                        #   in Loop: Header=BB5_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB5_36
.LBB5_51:                               # %for.end241
                                        #   in Loop: Header=BB5_22 Depth=2
	jmp	.LBB5_52
.LBB5_52:                               # %for.inc242
                                        #   in Loop: Header=BB5_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB5_22
.LBB5_53:                               # %for.end244
                                        #   in Loop: Header=BB5_20 Depth=1
	jmp	.LBB5_54
.LBB5_54:                               # %for.inc245
                                        #   in Loop: Header=BB5_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB5_20
.LBB5_55:                               # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB5_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB5_57:                               # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB5_59 Depth 2
                                        #       Child Loop BB5_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB5_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB5_57 Depth=1
	movl	$0, -8(%rbp)
.LBB5_59:                               # %for.cond254
                                        #   Parent Loop BB5_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB5_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB5_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB5_59 Depth=2
	movl	$0, -20(%rbp)
.LBB5_61:                               # %for.cond257
                                        #   Parent Loop BB5_57 Depth=1
                                        #     Parent Loop BB5_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB5_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB5_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB5_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB5_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB5_65
.LBB5_64:                               # %cond.false262
                                        #   in Loop: Header=BB5_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB5_65:                               # %cond.end263
                                        #   in Loop: Header=BB5_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -88(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB5_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB5_61
.LBB5_67:                               # %for.end295
                                        #   in Loop: Header=BB5_59 Depth=2
	jmp	.LBB5_68
.LBB5_68:                               # %for.inc296
                                        #   in Loop: Header=BB5_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB5_59
.LBB5_69:                               # %for.end298
                                        #   in Loop: Header=BB5_57 Depth=1
	jmp	.LBB5_70
.LBB5_70:                               # %for.inc299
                                        #   in Loop: Header=BB5_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB5_57
.LBB5_71:                               # %for.end301
	movl	$0, -12(%rbp)
.LBB5_72:                               # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB5_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB5_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB5_72 Depth=1
	movl	$0, -24(%rbp)
.LBB5_74:                               # %for.cond306
                                        #   Parent Loop BB5_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB5_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB5_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB5_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB5_74
.LBB5_77:                               # %for.end346
                                        #   in Loop: Header=BB5_72 Depth=1
	jmp	.LBB5_78
.LBB5_78:                               # %for.inc347
                                        #   in Loop: Header=BB5_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB5_72
.LBB5_79:                               # %for.end349
	movl	$0, -4(%rbp)
.LBB5_80:                               # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB5_82 Depth 2
                                        #       Child Loop BB5_84 Depth 3
                                        #       Child Loop BB5_88 Depth 3
                                        #         Child Loop BB5_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB5_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB5_80 Depth=1
	movl	$0, -8(%rbp)
.LBB5_82:                               # %for.cond353
                                        #   Parent Loop BB5_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB5_84 Depth 3
                                        #       Child Loop BB5_88 Depth 3
                                        #         Child Loop BB5_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB5_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB5_82 Depth=2
	movl	$0, -16(%rbp)
.LBB5_84:                               # %for.cond356
                                        #   Parent Loop BB5_80 Depth=1
                                        #     Parent Loop BB5_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB5_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB5_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB5_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB5_84
.LBB5_87:                               # %for.end380
                                        #   in Loop: Header=BB5_82 Depth=2
	movl	$0, -16(%rbp)
.LBB5_88:                               # %for.cond381
                                        #   Parent Loop BB5_80 Depth=1
                                        #     Parent Loop BB5_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB5_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB5_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB5_88 Depth=3
	movl	$0, -32(%rbp)
.LBB5_90:                               # %for.cond387
                                        #   Parent Loop BB5_80 Depth=1
                                        #     Parent Loop BB5_82 Depth=2
                                        #       Parent Loop BB5_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB5_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB5_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB5_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB5_90
.LBB5_93:                               # %for.end421
                                        #   in Loop: Header=BB5_88 Depth=3
	jmp	.LBB5_94
.LBB5_94:                               # %for.inc422
                                        #   in Loop: Header=BB5_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB5_88
.LBB5_95:                               # %for.end424
                                        #   in Loop: Header=BB5_82 Depth=2
	jmp	.LBB5_96
.LBB5_96:                               # %for.inc425
                                        #   in Loop: Header=BB5_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB5_82
.LBB5_97:                               # %for.end427
                                        #   in Loop: Header=BB5_80 Depth=1
	jmp	.LBB5_98
.LBB5_98:                               # %for.inc428
                                        #   in Loop: Header=BB5_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB5_80
.LBB5_99:                               # %for.end430
	jmp	.LBB5_189
.LBB5_100:                              # %if.else431
	movl	$0, -4(%rbp)
.LBB5_101:                              # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB5_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB5_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB5_101 Depth=1
	movl	$0, -8(%rbp)
.LBB5_103:                              # %for.cond436
                                        #   Parent Loop BB5_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB5_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB5_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB5_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB5_103
.LBB5_106:                              # %for.end447
                                        #   in Loop: Header=BB5_101 Depth=1
	jmp	.LBB5_107
.LBB5_107:                              # %for.inc448
                                        #   in Loop: Header=BB5_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB5_101
.LBB5_108:                              # %for.end450
	movl	$0, -12(%rbp)
.LBB5_109:                              # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB5_111 Depth 2
                                        #       Child Loop BB5_113 Depth 3
                                        #       Child Loop BB5_123 Depth 3
                                        #       Child Loop BB5_133 Depth 3
                                        #         Child Loop BB5_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB5_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB5_109 Depth=1
	movl	$0, -16(%rbp)
.LBB5_111:                              # %for.cond456
                                        #   Parent Loop BB5_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB5_113 Depth 3
                                        #       Child Loop BB5_123 Depth 3
                                        #       Child Loop BB5_133 Depth 3
                                        #         Child Loop BB5_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB5_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB5_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB5_113:                              # %for.cond476
                                        #   Parent Loop BB5_109 Depth=1
                                        #     Parent Loop BB5_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB5_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB5_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB5_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB5_113
.LBB5_116:                              # %for.end493
                                        #   in Loop: Header=BB5_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB5_117
	jp	.LBB5_117
	jmp	.LBB5_118
.LBB5_117:                              # %if.then500
                                        #   in Loop: Header=BB5_111 Depth=2
	vmovsd	.LCPI5_0(%rip), %xmm0   # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB5_119
.LBB5_118:                              # %if.else511
                                        #   in Loop: Header=BB5_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB5_119:                              # %if.end513
                                        #   in Loop: Header=BB5_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB5_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB5_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB5_122
.LBB5_121:                              # %if.then519
                                        #   in Loop: Header=BB5_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB5_122:                              # %if.end521
                                        #   in Loop: Header=BB5_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB5_123:                              # %for.cond554
                                        #   Parent Loop BB5_109 Depth=1
                                        #     Parent Loop BB5_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB5_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB5_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB5_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB5_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB5_130
.LBB5_126:                              # %cond.false571
                                        #   in Loop: Header=BB5_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB5_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB5_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB5_129
.LBB5_128:                              # %cond.false583
                                        #   in Loop: Header=BB5_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB5_129:                              # %cond.end591
                                        #   in Loop: Header=BB5_123 Depth=3
.LBB5_130:                              # %cond.end593
                                        #   in Loop: Header=BB5_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB5_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB5_123
.LBB5_132:                              # %for.end600
                                        #   in Loop: Header=BB5_111 Depth=2
	movl	$0, -4(%rbp)
.LBB5_133:                              # %for.cond601
                                        #   Parent Loop BB5_109 Depth=1
                                        #     Parent Loop BB5_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB5_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB5_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB5_133 Depth=3
	movl	$0, -8(%rbp)
.LBB5_135:                              # %for.cond608
                                        #   Parent Loop BB5_109 Depth=1
                                        #     Parent Loop BB5_111 Depth=2
                                        #       Parent Loop BB5_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB5_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB5_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB5_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB5_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB5_142
.LBB5_138:                              # %cond.false630
                                        #   in Loop: Header=BB5_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB5_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB5_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB5_141
.LBB5_140:                              # %cond.false648
                                        #   in Loop: Header=BB5_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB5_141:                              # %cond.end661
                                        #   in Loop: Header=BB5_135 Depth=4
.LBB5_142:                              # %cond.end663
                                        #   in Loop: Header=BB5_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB5_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB5_135
.LBB5_144:                              # %for.end675
                                        #   in Loop: Header=BB5_133 Depth=3
	jmp	.LBB5_145
.LBB5_145:                              # %for.inc676
                                        #   in Loop: Header=BB5_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB5_133
.LBB5_146:                              # %for.end678
                                        #   in Loop: Header=BB5_111 Depth=2
	jmp	.LBB5_147
.LBB5_147:                              # %for.inc679
                                        #   in Loop: Header=BB5_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB5_111
.LBB5_148:                              # %for.end681
                                        #   in Loop: Header=BB5_109 Depth=1
	jmp	.LBB5_149
.LBB5_149:                              # %for.inc682
                                        #   in Loop: Header=BB5_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB5_109
.LBB5_150:                              # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB5_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB5_152:                              # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB5_154 Depth 2
                                        #       Child Loop BB5_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB5_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB5_152 Depth=1
	movl	$0, -24(%rbp)
.LBB5_154:                              # %for.cond694
                                        #   Parent Loop BB5_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB5_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB5_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB5_154 Depth=2
	movl	$0, -20(%rbp)
.LBB5_156:                              # %for.cond700
                                        #   Parent Loop BB5_152 Depth=1
                                        #     Parent Loop BB5_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB5_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB5_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB5_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB5_156
.LBB5_159:                              # %for.end730
                                        #   in Loop: Header=BB5_154 Depth=2
	jmp	.LBB5_160
.LBB5_160:                              # %for.inc731
                                        #   in Loop: Header=BB5_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB5_154
.LBB5_161:                              # %for.end733
                                        #   in Loop: Header=BB5_152 Depth=1
	jmp	.LBB5_162
.LBB5_162:                              # %for.inc734
                                        #   in Loop: Header=BB5_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB5_152
.LBB5_163:                              # %for.end736
	jmp	.LBB5_173
.LBB5_164:                              # %if.else737
	movl	$0, -12(%rbp)
.LBB5_165:                              # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB5_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB5_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB5_165 Depth=1
	movl	$0, -24(%rbp)
.LBB5_167:                              # %for.cond743
                                        #   Parent Loop BB5_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB5_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB5_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB5_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB5_167
.LBB5_170:                              # %for.end784
                                        #   in Loop: Header=BB5_165 Depth=1
	jmp	.LBB5_171
.LBB5_171:                              # %for.inc785
                                        #   in Loop: Header=BB5_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB5_165
.LBB5_172:                              # %for.end787
	jmp	.LBB5_173
.LBB5_173:                              # %if.end788
	movl	$0, -4(%rbp)
.LBB5_174:                              # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB5_176 Depth 2
                                        #       Child Loop BB5_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB5_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB5_174 Depth=1
	movl	$0, -8(%rbp)
.LBB5_176:                              # %for.cond793
                                        #   Parent Loop BB5_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB5_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB5_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB5_176 Depth=2
	movl	$0, -20(%rbp)
.LBB5_178:                              # %for.cond797
                                        #   Parent Loop BB5_174 Depth=1
                                        #     Parent Loop BB5_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB5_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB5_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB5_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB5_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB5_182
.LBB5_181:                              # %cond.false804
                                        #   in Loop: Header=BB5_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB5_182:                              # %cond.end805
                                        #   in Loop: Header=BB5_178 Depth=3
	movl	%eax, -88(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB5_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB5_178
.LBB5_184:                              # %for.end833
                                        #   in Loop: Header=BB5_176 Depth=2
	jmp	.LBB5_185
.LBB5_185:                              # %for.inc834
                                        #   in Loop: Header=BB5_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB5_176
.LBB5_186:                              # %for.end836
                                        #   in Loop: Header=BB5_174 Depth=1
	jmp	.LBB5_187
.LBB5_187:                              # %for.inc837
                                        #   in Loop: Header=BB5_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB5_174
.LBB5_188:                              # %for.end839
	jmp	.LBB5_189
.LBB5_189:                              # %if.end840
	cmpl	$16522095, -92(%rbp)    # imm = 0xFC1B6F
	jne	.LBB5_191
.LBB5_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_191:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB5_190
.Lfunc_end5:
	.size	estimate_weighting_factor_B_slice.2, .Lfunc_end5-estimate_weighting_factor_B_slice.2
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.3
.LCPI6_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.3
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.3,@function
estimate_weighting_factor_B_slice.3:    # @estimate_weighting_factor_B_slice.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$1306996910, -92(%rbp)  # imm = 0x4DE730AE
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB6_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB6_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB6_4
.LBB6_3:                                # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB6_4
.LBB6_4:                                # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB6_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB6_7
.LBB6_6:                                # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB6_7:                                # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB6_8:                                # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_10 Depth 2
                                        #       Child Loop BB6_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB6_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB6_8 Depth=1
	movl	$0, -8(%rbp)
.LBB6_10:                               # %for.cond14
                                        #   Parent Loop BB6_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB6_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB6_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB6_10 Depth=2
	movl	$0, -16(%rbp)
.LBB6_12:                               # %for.cond19
                                        #   Parent Loop BB6_8 Depth=1
                                        #     Parent Loop BB6_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB6_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB6_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB6_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB6_12
.LBB6_15:                               # %for.end
                                        #   in Loop: Header=BB6_10 Depth=2
	jmp	.LBB6_16
.LBB6_16:                               # %for.inc50
                                        #   in Loop: Header=BB6_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB6_10
.LBB6_17:                               # %for.end52
                                        #   in Loop: Header=BB6_8 Depth=1
	jmp	.LBB6_18
.LBB6_18:                               # %for.inc53
                                        #   in Loop: Header=BB6_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB6_8
.LBB6_19:                               # %for.end55
	movl	$0, -4(%rbp)
.LBB6_20:                               # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_22 Depth 2
                                        #       Child Loop BB6_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB6_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB6_20 Depth=1
	movl	$0, -8(%rbp)
.LBB6_22:                               # %for.cond59
                                        #   Parent Loop BB6_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB6_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB6_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB6_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB6_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB6_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB6_29
.LBB6_25:                               # %cond.false70
                                        #   in Loop: Header=BB6_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB6_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB6_22 Depth=2
	movl	$127, %eax
	jmp	.LBB6_28
.LBB6_27:                               # %cond.false80
                                        #   in Loop: Header=BB6_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB6_28:                               # %cond.end88
                                        #   in Loop: Header=BB6_22 Depth=2
.LBB6_29:                               # %cond.end90
                                        #   in Loop: Header=BB6_22 Depth=2
	movl	%eax, -64(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB6_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB6_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB6_35
.LBB6_31:                               # %cond.false99
                                        #   in Loop: Header=BB6_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB6_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB6_22 Depth=2
	movl	$127, %eax
	jmp	.LBB6_34
.LBB6_33:                               # %cond.false107
                                        #   in Loop: Header=BB6_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB6_34:                               # %cond.end113
                                        #   in Loop: Header=BB6_22 Depth=2
.LBB6_35:                               # %cond.end115
                                        #   in Loop: Header=BB6_22 Depth=2
	movl	%eax, -60(%rbp)
	movl	$0, -20(%rbp)
.LBB6_36:                               # %for.cond117
                                        #   Parent Loop BB6_20 Depth=1
                                        #     Parent Loop BB6_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB6_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB6_36 Depth=3
	cmpl	$0, -64(%rbp)
	jne	.LBB6_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB6_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB6_49
.LBB6_39:                               # %if.else154
                                        #   in Loop: Header=BB6_36 Depth=3
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-64(%rbp)
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB6_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB6_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB6_45
.LBB6_41:                               # %cond.false160
                                        #   in Loop: Header=BB6_36 Depth=3
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB6_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB6_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB6_44
.LBB6_43:                               # %cond.false166
                                        #   in Loop: Header=BB6_36 Depth=3
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB6_44:                               # %cond.end170
                                        #   in Loop: Header=BB6_36 Depth=3
.LBB6_45:                               # %cond.end172
                                        #   in Loop: Header=BB6_36 Depth=3
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB6_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB6_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB6_48
.LBB6_47:                               # %if.then198
                                        #   in Loop: Header=BB6_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB6_48:                               # %if.end208
                                        #   in Loop: Header=BB6_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB6_49:                               # %if.end238
                                        #   in Loop: Header=BB6_36 Depth=3
	jmp	.LBB6_50
.LBB6_50:                               # %for.inc239
                                        #   in Loop: Header=BB6_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB6_36
.LBB6_51:                               # %for.end241
                                        #   in Loop: Header=BB6_22 Depth=2
	jmp	.LBB6_52
.LBB6_52:                               # %for.inc242
                                        #   in Loop: Header=BB6_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB6_22
.LBB6_53:                               # %for.end244
                                        #   in Loop: Header=BB6_20 Depth=1
	jmp	.LBB6_54
.LBB6_54:                               # %for.inc245
                                        #   in Loop: Header=BB6_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB6_20
.LBB6_55:                               # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB6_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB6_57:                               # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_59 Depth 2
                                        #       Child Loop BB6_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB6_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB6_57 Depth=1
	movl	$0, -8(%rbp)
.LBB6_59:                               # %for.cond254
                                        #   Parent Loop BB6_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB6_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB6_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB6_59 Depth=2
	movl	$0, -20(%rbp)
.LBB6_61:                               # %for.cond257
                                        #   Parent Loop BB6_57 Depth=1
                                        #     Parent Loop BB6_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB6_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB6_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB6_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB6_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB6_65
.LBB6_64:                               # %cond.false262
                                        #   in Loop: Header=BB6_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB6_65:                               # %cond.end263
                                        #   in Loop: Header=BB6_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -88(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB6_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB6_61
.LBB6_67:                               # %for.end295
                                        #   in Loop: Header=BB6_59 Depth=2
	jmp	.LBB6_68
.LBB6_68:                               # %for.inc296
                                        #   in Loop: Header=BB6_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB6_59
.LBB6_69:                               # %for.end298
                                        #   in Loop: Header=BB6_57 Depth=1
	jmp	.LBB6_70
.LBB6_70:                               # %for.inc299
                                        #   in Loop: Header=BB6_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB6_57
.LBB6_71:                               # %for.end301
	movl	$0, -12(%rbp)
.LBB6_72:                               # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB6_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB6_72 Depth=1
	movl	$0, -24(%rbp)
.LBB6_74:                               # %for.cond306
                                        #   Parent Loop BB6_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB6_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB6_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB6_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB6_74
.LBB6_77:                               # %for.end346
                                        #   in Loop: Header=BB6_72 Depth=1
	jmp	.LBB6_78
.LBB6_78:                               # %for.inc347
                                        #   in Loop: Header=BB6_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB6_72
.LBB6_79:                               # %for.end349
	movl	$0, -4(%rbp)
.LBB6_80:                               # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_82 Depth 2
                                        #       Child Loop BB6_84 Depth 3
                                        #       Child Loop BB6_88 Depth 3
                                        #         Child Loop BB6_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB6_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB6_80 Depth=1
	movl	$0, -8(%rbp)
.LBB6_82:                               # %for.cond353
                                        #   Parent Loop BB6_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB6_84 Depth 3
                                        #       Child Loop BB6_88 Depth 3
                                        #         Child Loop BB6_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB6_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB6_82 Depth=2
	movl	$0, -16(%rbp)
.LBB6_84:                               # %for.cond356
                                        #   Parent Loop BB6_80 Depth=1
                                        #     Parent Loop BB6_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB6_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB6_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB6_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB6_84
.LBB6_87:                               # %for.end380
                                        #   in Loop: Header=BB6_82 Depth=2
	movl	$0, -16(%rbp)
.LBB6_88:                               # %for.cond381
                                        #   Parent Loop BB6_80 Depth=1
                                        #     Parent Loop BB6_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB6_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB6_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB6_88 Depth=3
	movl	$0, -32(%rbp)
.LBB6_90:                               # %for.cond387
                                        #   Parent Loop BB6_80 Depth=1
                                        #     Parent Loop BB6_82 Depth=2
                                        #       Parent Loop BB6_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB6_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB6_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB6_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB6_90
.LBB6_93:                               # %for.end421
                                        #   in Loop: Header=BB6_88 Depth=3
	jmp	.LBB6_94
.LBB6_94:                               # %for.inc422
                                        #   in Loop: Header=BB6_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB6_88
.LBB6_95:                               # %for.end424
                                        #   in Loop: Header=BB6_82 Depth=2
	jmp	.LBB6_96
.LBB6_96:                               # %for.inc425
                                        #   in Loop: Header=BB6_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB6_82
.LBB6_97:                               # %for.end427
                                        #   in Loop: Header=BB6_80 Depth=1
	jmp	.LBB6_98
.LBB6_98:                               # %for.inc428
                                        #   in Loop: Header=BB6_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB6_80
.LBB6_99:                               # %for.end430
	jmp	.LBB6_189
.LBB6_100:                              # %if.else431
	movl	$0, -4(%rbp)
.LBB6_101:                              # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB6_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB6_101 Depth=1
	movl	$0, -8(%rbp)
.LBB6_103:                              # %for.cond436
                                        #   Parent Loop BB6_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB6_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB6_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB6_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB6_103
.LBB6_106:                              # %for.end447
                                        #   in Loop: Header=BB6_101 Depth=1
	jmp	.LBB6_107
.LBB6_107:                              # %for.inc448
                                        #   in Loop: Header=BB6_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB6_101
.LBB6_108:                              # %for.end450
	movl	$0, -12(%rbp)
.LBB6_109:                              # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_111 Depth 2
                                        #       Child Loop BB6_113 Depth 3
                                        #       Child Loop BB6_123 Depth 3
                                        #       Child Loop BB6_133 Depth 3
                                        #         Child Loop BB6_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB6_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB6_109 Depth=1
	movl	$0, -16(%rbp)
.LBB6_111:                              # %for.cond456
                                        #   Parent Loop BB6_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB6_113 Depth 3
                                        #       Child Loop BB6_123 Depth 3
                                        #       Child Loop BB6_133 Depth 3
                                        #         Child Loop BB6_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB6_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB6_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB6_113:                              # %for.cond476
                                        #   Parent Loop BB6_109 Depth=1
                                        #     Parent Loop BB6_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB6_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB6_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB6_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB6_113
.LBB6_116:                              # %for.end493
                                        #   in Loop: Header=BB6_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB6_117
	jp	.LBB6_117
	jmp	.LBB6_118
.LBB6_117:                              # %if.then500
                                        #   in Loop: Header=BB6_111 Depth=2
	vmovsd	.LCPI6_0(%rip), %xmm0   # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB6_119
.LBB6_118:                              # %if.else511
                                        #   in Loop: Header=BB6_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB6_119:                              # %if.end513
                                        #   in Loop: Header=BB6_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB6_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB6_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB6_122
.LBB6_121:                              # %if.then519
                                        #   in Loop: Header=BB6_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB6_122:                              # %if.end521
                                        #   in Loop: Header=BB6_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB6_123:                              # %for.cond554
                                        #   Parent Loop BB6_109 Depth=1
                                        #     Parent Loop BB6_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB6_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB6_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB6_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB6_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB6_130
.LBB6_126:                              # %cond.false571
                                        #   in Loop: Header=BB6_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB6_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB6_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB6_129
.LBB6_128:                              # %cond.false583
                                        #   in Loop: Header=BB6_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB6_129:                              # %cond.end591
                                        #   in Loop: Header=BB6_123 Depth=3
.LBB6_130:                              # %cond.end593
                                        #   in Loop: Header=BB6_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB6_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB6_123
.LBB6_132:                              # %for.end600
                                        #   in Loop: Header=BB6_111 Depth=2
	movl	$0, -4(%rbp)
.LBB6_133:                              # %for.cond601
                                        #   Parent Loop BB6_109 Depth=1
                                        #     Parent Loop BB6_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB6_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB6_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB6_133 Depth=3
	movl	$0, -8(%rbp)
.LBB6_135:                              # %for.cond608
                                        #   Parent Loop BB6_109 Depth=1
                                        #     Parent Loop BB6_111 Depth=2
                                        #       Parent Loop BB6_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB6_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB6_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB6_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB6_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB6_142
.LBB6_138:                              # %cond.false630
                                        #   in Loop: Header=BB6_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB6_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB6_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB6_141
.LBB6_140:                              # %cond.false648
                                        #   in Loop: Header=BB6_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB6_141:                              # %cond.end661
                                        #   in Loop: Header=BB6_135 Depth=4
.LBB6_142:                              # %cond.end663
                                        #   in Loop: Header=BB6_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB6_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB6_135
.LBB6_144:                              # %for.end675
                                        #   in Loop: Header=BB6_133 Depth=3
	jmp	.LBB6_145
.LBB6_145:                              # %for.inc676
                                        #   in Loop: Header=BB6_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB6_133
.LBB6_146:                              # %for.end678
                                        #   in Loop: Header=BB6_111 Depth=2
	jmp	.LBB6_147
.LBB6_147:                              # %for.inc679
                                        #   in Loop: Header=BB6_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB6_111
.LBB6_148:                              # %for.end681
                                        #   in Loop: Header=BB6_109 Depth=1
	jmp	.LBB6_149
.LBB6_149:                              # %for.inc682
                                        #   in Loop: Header=BB6_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB6_109
.LBB6_150:                              # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB6_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB6_152:                              # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_154 Depth 2
                                        #       Child Loop BB6_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB6_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB6_152 Depth=1
	movl	$0, -24(%rbp)
.LBB6_154:                              # %for.cond694
                                        #   Parent Loop BB6_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB6_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB6_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB6_154 Depth=2
	movl	$0, -20(%rbp)
.LBB6_156:                              # %for.cond700
                                        #   Parent Loop BB6_152 Depth=1
                                        #     Parent Loop BB6_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB6_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB6_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB6_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB6_156
.LBB6_159:                              # %for.end730
                                        #   in Loop: Header=BB6_154 Depth=2
	jmp	.LBB6_160
.LBB6_160:                              # %for.inc731
                                        #   in Loop: Header=BB6_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB6_154
.LBB6_161:                              # %for.end733
                                        #   in Loop: Header=BB6_152 Depth=1
	jmp	.LBB6_162
.LBB6_162:                              # %for.inc734
                                        #   in Loop: Header=BB6_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB6_152
.LBB6_163:                              # %for.end736
	jmp	.LBB6_173
.LBB6_164:                              # %if.else737
	movl	$0, -12(%rbp)
.LBB6_165:                              # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB6_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB6_165 Depth=1
	movl	$0, -24(%rbp)
.LBB6_167:                              # %for.cond743
                                        #   Parent Loop BB6_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB6_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB6_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB6_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB6_167
.LBB6_170:                              # %for.end784
                                        #   in Loop: Header=BB6_165 Depth=1
	jmp	.LBB6_171
.LBB6_171:                              # %for.inc785
                                        #   in Loop: Header=BB6_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB6_165
.LBB6_172:                              # %for.end787
	jmp	.LBB6_173
.LBB6_173:                              # %if.end788
	movl	$0, -4(%rbp)
.LBB6_174:                              # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_176 Depth 2
                                        #       Child Loop BB6_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB6_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB6_174 Depth=1
	movl	$0, -8(%rbp)
.LBB6_176:                              # %for.cond793
                                        #   Parent Loop BB6_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB6_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB6_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB6_176 Depth=2
	movl	$0, -20(%rbp)
.LBB6_178:                              # %for.cond797
                                        #   Parent Loop BB6_174 Depth=1
                                        #     Parent Loop BB6_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB6_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB6_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB6_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB6_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB6_182
.LBB6_181:                              # %cond.false804
                                        #   in Loop: Header=BB6_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB6_182:                              # %cond.end805
                                        #   in Loop: Header=BB6_178 Depth=3
	movl	%eax, -88(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB6_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB6_178
.LBB6_184:                              # %for.end833
                                        #   in Loop: Header=BB6_176 Depth=2
	jmp	.LBB6_185
.LBB6_185:                              # %for.inc834
                                        #   in Loop: Header=BB6_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB6_176
.LBB6_186:                              # %for.end836
                                        #   in Loop: Header=BB6_174 Depth=1
	jmp	.LBB6_187
.LBB6_187:                              # %for.inc837
                                        #   in Loop: Header=BB6_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB6_174
.LBB6_188:                              # %for.end839
	jmp	.LBB6_189
.LBB6_189:                              # %if.end840
	cmpl	$1306996910, -92(%rbp)  # imm = 0x4DE730AE
	jne	.LBB6_191
.LBB6_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_191:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB6_190
.Lfunc_end6:
	.size	estimate_weighting_factor_B_slice.3, .Lfunc_end6-estimate_weighting_factor_B_slice.3
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.4
.LCPI7_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.4
	.p2align	4, 0x90
	.type	test_wp_B_slice.4,@function
test_wp_B_slice.4:                      # @test_wp_B_slice.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$796882971, -88(%rbp)   # imm = 0x2F7F781B
	movl	%edi, -84(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB7_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB7_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB7_4
.LBB7_3:                                # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB7_4
.LBB7_4:                                # %cond.end
	movl	%ecx, -40(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -36(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB7_5:                                # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_7 Depth 2
                                        #       Child Loop BB7_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB7_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB7_5 Depth=1
	movl	$0, -24(%rbp)
.LBB7_7:                                # %for.cond9
                                        #   Parent Loop BB7_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB7_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB7_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB7_7 Depth=2
	movl	$0, -32(%rbp)
.LBB7_9:                                # %for.cond14
                                        #   Parent Loop BB7_5 Depth=1
                                        #     Parent Loop BB7_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB7_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB7_9 Depth=3
	movl	-36(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-36(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB7_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB7_9
.LBB7_12:                               # %for.end
                                        #   in Loop: Header=BB7_7 Depth=2
	jmp	.LBB7_13
.LBB7_13:                               # %for.inc41
                                        #   in Loop: Header=BB7_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB7_7
.LBB7_14:                               # %for.end43
                                        #   in Loop: Header=BB7_5 Depth=1
	jmp	.LBB7_15
.LBB7_15:                               # %for.inc44
                                        #   in Loop: Header=BB7_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB7_5
.LBB7_16:                               # %for.end46
	movl	$0, -12(%rbp)
.LBB7_17:                               # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_19 Depth 2
                                        #       Child Loop BB7_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB7_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB7_17 Depth=1
	movl	$0, -24(%rbp)
.LBB7_19:                               # %for.cond50
                                        #   Parent Loop BB7_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB7_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB7_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB7_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB7_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB7_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB7_26
.LBB7_22:                               # %cond.false61
                                        #   in Loop: Header=BB7_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB7_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB7_19 Depth=2
	movl	$127, %eax
	jmp	.LBB7_25
.LBB7_24:                               # %cond.false71
                                        #   in Loop: Header=BB7_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB7_25:                               # %cond.end79
                                        #   in Loop: Header=BB7_19 Depth=2
.LBB7_26:                               # %cond.end81
                                        #   in Loop: Header=BB7_19 Depth=2
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB7_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB7_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB7_32
.LBB7_28:                               # %cond.false90
                                        #   in Loop: Header=BB7_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB7_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB7_19 Depth=2
	movl	$127, %eax
	jmp	.LBB7_31
.LBB7_30:                               # %cond.false98
                                        #   in Loop: Header=BB7_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB7_31:                               # %cond.end104
                                        #   in Loop: Header=BB7_19 Depth=2
.LBB7_32:                               # %cond.end106
                                        #   in Loop: Header=BB7_19 Depth=2
	movl	%eax, -60(%rbp)
	movl	$0, -20(%rbp)
.LBB7_33:                               # %for.cond108
                                        #   Parent Loop BB7_17 Depth=1
                                        #     Parent Loop BB7_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB7_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB7_33 Depth=3
	cmpl	$0, -52(%rbp)
	jne	.LBB7_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB7_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB7_46
.LBB7_36:                               # %if.else
                                        #   in Loop: Header=BB7_33 Depth=3
	movl	-52(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-52(%rbp)
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB7_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB7_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB7_42
.LBB7_38:                               # %cond.false145
                                        #   in Loop: Header=BB7_33 Depth=3
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB7_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB7_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB7_41
.LBB7_40:                               # %cond.false151
                                        #   in Loop: Header=BB7_33 Depth=3
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB7_41:                               # %cond.end155
                                        #   in Loop: Header=BB7_33 Depth=3
.LBB7_42:                               # %cond.end157
                                        #   in Loop: Header=BB7_33 Depth=3
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB7_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB7_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB7_45
.LBB7_44:                               # %if.then183
                                        #   in Loop: Header=BB7_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB7_45:                               # %if.end
                                        #   in Loop: Header=BB7_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB7_46:                               # %if.end220
                                        #   in Loop: Header=BB7_33 Depth=3
	jmp	.LBB7_47
.LBB7_47:                               # %for.inc221
                                        #   in Loop: Header=BB7_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB7_33
.LBB7_48:                               # %for.end223
                                        #   in Loop: Header=BB7_19 Depth=2
	jmp	.LBB7_49
.LBB7_49:                               # %for.inc224
                                        #   in Loop: Header=BB7_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB7_19
.LBB7_50:                               # %for.end226
                                        #   in Loop: Header=BB7_17 Depth=1
	jmp	.LBB7_51
.LBB7_51:                               # %for.inc227
                                        #   in Loop: Header=BB7_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB7_17
.LBB7_52:                               # %for.end229
	cmpl	$1, -84(%rbp)
	jne	.LBB7_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB7_54:                               # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_56 Depth 2
                                        #       Child Loop BB7_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB7_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB7_54 Depth=1
	movl	$0, -24(%rbp)
.LBB7_56:                               # %for.cond235
                                        #   Parent Loop BB7_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB7_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB7_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB7_56 Depth=2
	movl	$0, -20(%rbp)
.LBB7_58:                               # %for.cond238
                                        #   Parent Loop BB7_54 Depth=1
                                        #     Parent Loop BB7_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB7_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB7_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB7_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB7_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB7_62
.LBB7_61:                               # %cond.false243
                                        #   in Loop: Header=BB7_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB7_62:                               # %cond.end244
                                        #   in Loop: Header=BB7_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -76(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB7_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB7_58
.LBB7_64:                               # %for.end276
                                        #   in Loop: Header=BB7_56 Depth=2
	jmp	.LBB7_65
.LBB7_65:                               # %for.inc277
                                        #   in Loop: Header=BB7_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB7_56
.LBB7_66:                               # %for.end279
                                        #   in Loop: Header=BB7_54 Depth=1
	jmp	.LBB7_67
.LBB7_67:                               # %for.inc280
                                        #   in Loop: Header=BB7_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB7_54
.LBB7_68:                               # %for.end282
	movl	$0, -16(%rbp)
.LBB7_69:                               # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB7_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB7_69 Depth=1
	movl	$0, -28(%rbp)
.LBB7_71:                               # %for.cond287
                                        #   Parent Loop BB7_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB7_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB7_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB7_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB7_71
.LBB7_74:                               # %for.end327
                                        #   in Loop: Header=BB7_69 Depth=1
	jmp	.LBB7_75
.LBB7_75:                               # %for.inc328
                                        #   in Loop: Header=BB7_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB7_69
.LBB7_76:                               # %for.end330
	jmp	.LBB7_142
.LBB7_77:                               # %if.else331
	movl	$0, -12(%rbp)
.LBB7_78:                               # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB7_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB7_78 Depth=1
	movl	$0, -24(%rbp)
.LBB7_80:                               # %for.cond335
                                        #   Parent Loop BB7_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB7_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB7_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB7_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB7_80
.LBB7_83:                               # %for.end345
                                        #   in Loop: Header=BB7_78 Depth=1
	jmp	.LBB7_84
.LBB7_84:                               # %for.inc346
                                        #   in Loop: Header=BB7_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB7_78
.LBB7_85:                               # %for.end348
	movl	$0, -16(%rbp)
.LBB7_86:                               # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_88 Depth 2
                                        #       Child Loop BB7_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB7_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB7_86 Depth=1
	movl	$0, -32(%rbp)
.LBB7_88:                               # %for.cond354
                                        #   Parent Loop BB7_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB7_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB7_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB7_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB7_90:                               # %for.cond372
                                        #   Parent Loop BB7_86 Depth=1
                                        #     Parent Loop BB7_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB7_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB7_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB7_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB7_90
.LBB7_93:                               # %for.end389
                                        #   in Loop: Header=BB7_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB7_94
	jp	.LBB7_94
	jmp	.LBB7_95
.LBB7_94:                               # %if.then396
                                        #   in Loop: Header=BB7_88 Depth=2
	vmovsd	.LCPI7_0(%rip), %xmm0   # xmm0 = mem[0],zero
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB7_96
.LBB7_95:                               # %if.else406
                                        #   in Loop: Header=BB7_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB7_96:                               # %if.end407
                                        #   in Loop: Header=BB7_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB7_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB7_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB7_99
.LBB7_98:                               # %if.then413
                                        #   in Loop: Header=BB7_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB7_99:                               # %if.end414
                                        #   in Loop: Header=BB7_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB7_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB7_88
.LBB7_101:                              # %for.end447
                                        #   in Loop: Header=BB7_86 Depth=1
	jmp	.LBB7_102
.LBB7_102:                              # %for.inc448
                                        #   in Loop: Header=BB7_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB7_86
.LBB7_103:                              # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB7_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB7_105:                              # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_107 Depth 2
                                        #       Child Loop BB7_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB7_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB7_105 Depth=1
	movl	$0, -28(%rbp)
.LBB7_107:                              # %for.cond459
                                        #   Parent Loop BB7_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB7_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB7_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB7_107 Depth=2
	movl	$0, -20(%rbp)
.LBB7_109:                              # %for.cond465
                                        #   Parent Loop BB7_105 Depth=1
                                        #     Parent Loop BB7_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB7_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB7_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB7_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB7_109
.LBB7_112:                              # %for.end495
                                        #   in Loop: Header=BB7_107 Depth=2
	jmp	.LBB7_113
.LBB7_113:                              # %for.inc496
                                        #   in Loop: Header=BB7_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB7_107
.LBB7_114:                              # %for.end498
                                        #   in Loop: Header=BB7_105 Depth=1
	jmp	.LBB7_115
.LBB7_115:                              # %for.inc499
                                        #   in Loop: Header=BB7_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB7_105
.LBB7_116:                              # %for.end501
	jmp	.LBB7_126
.LBB7_117:                              # %if.else502
	movl	$0, -16(%rbp)
.LBB7_118:                              # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB7_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB7_118 Depth=1
	movl	$0, -28(%rbp)
.LBB7_120:                              # %for.cond508
                                        #   Parent Loop BB7_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB7_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB7_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB7_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB7_120
.LBB7_123:                              # %for.end549
                                        #   in Loop: Header=BB7_118 Depth=1
	jmp	.LBB7_124
.LBB7_124:                              # %for.inc550
                                        #   in Loop: Header=BB7_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB7_118
.LBB7_125:                              # %for.end552
	jmp	.LBB7_126
.LBB7_126:                              # %if.end553
	movl	$0, -12(%rbp)
.LBB7_127:                              # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_129 Depth 2
                                        #       Child Loop BB7_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB7_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB7_127 Depth=1
	movl	$0, -24(%rbp)
.LBB7_129:                              # %for.cond558
                                        #   Parent Loop BB7_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB7_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB7_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB7_129 Depth=2
	movl	$0, -20(%rbp)
.LBB7_131:                              # %for.cond562
                                        #   Parent Loop BB7_127 Depth=1
                                        #     Parent Loop BB7_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB7_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB7_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB7_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB7_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB7_135
.LBB7_134:                              # %cond.false569
                                        #   in Loop: Header=BB7_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB7_135:                              # %cond.end570
                                        #   in Loop: Header=BB7_131 Depth=3
	movl	%eax, -76(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB7_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB7_131
.LBB7_137:                              # %for.end598
                                        #   in Loop: Header=BB7_129 Depth=2
	jmp	.LBB7_138
.LBB7_138:                              # %for.inc599
                                        #   in Loop: Header=BB7_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB7_129
.LBB7_139:                              # %for.end601
                                        #   in Loop: Header=BB7_127 Depth=1
	jmp	.LBB7_140
.LBB7_140:                              # %for.inc602
                                        #   in Loop: Header=BB7_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB7_127
.LBB7_141:                              # %for.end604
	jmp	.LBB7_142
.LBB7_142:                              # %if.end605
	movl	$0, -16(%rbp)
.LBB7_143:                              # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_145 Depth 2
                                        #       Child Loop BB7_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB7_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB7_143 Depth=1
	movl	$0, -28(%rbp)
.LBB7_145:                              # %for.cond611
                                        #   Parent Loop BB7_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB7_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB7_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB7_145 Depth=2
	movl	$0, -20(%rbp)
.LBB7_147:                              # %for.cond617
                                        #   Parent Loop BB7_143 Depth=1
                                        #     Parent Loop BB7_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB7_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB7_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB7_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB7_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB7_151
.LBB7_150:                              # %if.then638
                                        #   in Loop: Header=BB7_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB7_154
.LBB7_151:                              # %if.end639
                                        #   in Loop: Header=BB7_147 Depth=3
	jmp	.LBB7_152
.LBB7_152:                              # %for.inc640
                                        #   in Loop: Header=BB7_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB7_147
.LBB7_153:                              # %for.end642.loopexit
                                        #   in Loop: Header=BB7_145 Depth=2
	jmp	.LBB7_154
.LBB7_154:                              # %for.end642
                                        #   in Loop: Header=BB7_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB7_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB7_143 Depth=1
	jmp	.LBB7_159
.LBB7_156:                              # %if.end646
                                        #   in Loop: Header=BB7_145 Depth=2
	jmp	.LBB7_157
.LBB7_157:                              # %for.inc647
                                        #   in Loop: Header=BB7_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB7_145
.LBB7_158:                              # %for.end649.loopexit
                                        #   in Loop: Header=BB7_143 Depth=1
	jmp	.LBB7_159
.LBB7_159:                              # %for.end649
                                        #   in Loop: Header=BB7_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB7_161
# %bb.160:                              # %if.then652
	jmp	.LBB7_164
.LBB7_161:                              # %if.end653
                                        #   in Loop: Header=BB7_143 Depth=1
	jmp	.LBB7_162
.LBB7_162:                              # %for.inc654
                                        #   in Loop: Header=BB7_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB7_143
.LBB7_163:                              # %for.end656.loopexit
	jmp	.LBB7_164
.LBB7_164:                              # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$796882971, -88(%rbp)   # imm = 0x2F7F781B
	jne	.LBB7_166
.LBB7_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_166:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB7_165
.Lfunc_end7:
	.size	test_wp_B_slice.4, .Lfunc_end7-test_wp_B_slice.4
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.5
.LCPI8_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.5
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.5,@function
estimate_weighting_factor_P_slice.5:    # @estimate_weighting_factor_P_slice.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$1017719176, -64(%rbp)  # imm = 0x3CA92988
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB8_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB8_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB8_4
.LBB8_3:                                # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB8_4
.LBB8_4:                                # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB8_5:                                # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_7 Depth 2
                                        #       Child Loop BB8_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB8_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB8_5 Depth=1
	movl	$0, -16(%rbp)
.LBB8_7:                                # %for.cond12
                                        #   Parent Loop BB8_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB8_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB8_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB8_7 Depth=2
	movl	$0, -4(%rbp)
.LBB8_9:                                # %for.cond17
                                        #   Parent Loop BB8_5 Depth=1
                                        #     Parent Loop BB8_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB8_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB8_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB8_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB8_9
.LBB8_12:                               # %for.end
                                        #   in Loop: Header=BB8_7 Depth=2
	jmp	.LBB8_13
.LBB8_13:                               # %for.inc48
                                        #   in Loop: Header=BB8_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB8_7
.LBB8_14:                               # %for.end50
                                        #   in Loop: Header=BB8_5 Depth=1
	jmp	.LBB8_15
.LBB8_15:                               # %for.inc51
                                        #   in Loop: Header=BB8_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB8_5
.LBB8_16:                               # %for.end53
	movl	$0, -12(%rbp)
.LBB8_17:                               # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB8_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB8_17 Depth=1
	movl	$0, -16(%rbp)
.LBB8_19:                               # %for.cond57
                                        #   Parent Loop BB8_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB8_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB8_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-48(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB8_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB8_19
.LBB8_22:                               # %for.end67
                                        #   in Loop: Header=BB8_17 Depth=1
	jmp	.LBB8_23
.LBB8_23:                               # %for.inc68
                                        #   in Loop: Header=BB8_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB8_17
.LBB8_24:                               # %for.end70
	movl	$0, -8(%rbp)
.LBB8_25:                               # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_27 Depth 2
                                        #       Child Loop BB8_29 Depth 3
                                        #       Child Loop BB8_48 Depth 3
                                        #       Child Loop BB8_58 Depth 3
                                        #         Child Loop BB8_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB8_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB8_25 Depth=1
	movl	$0, -4(%rbp)
.LBB8_27:                               # %for.cond76
                                        #   Parent Loop BB8_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB8_29 Depth 3
                                        #       Child Loop BB8_48 Depth 3
                                        #       Child Loop BB8_58 Depth 3
                                        #         Child Loop BB8_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB8_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB8_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -56(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB8_29:                               # %for.cond92
                                        #   Parent Loop BB8_25 Depth=1
                                        #     Parent Loop BB8_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB8_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB8_29 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB8_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB8_29
.LBB8_32:                               # %for.end106
                                        #   in Loop: Header=BB8_27 Depth=2
	vcvtsi2sdl	-60(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB8_40
	jp	.LBB8_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB8_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB8_34
	jp	.LBB8_34
	jmp	.LBB8_35
.LBB8_34:                               # %if.then114
                                        #   in Loop: Header=BB8_27 Depth=2
	vmovsd	.LCPI8_0(%rip), %xmm0   # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-48(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB8_36
.LBB8_35:                               # %if.else
                                        #   in Loop: Header=BB8_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB8_36:                               # %if.end
                                        #   in Loop: Header=BB8_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB8_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB8_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB8_39
.LBB8_38:                               # %if.then147
                                        #   in Loop: Header=BB8_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB8_39:                               # %if.end154
                                        #   in Loop: Header=BB8_27 Depth=2
	jmp	.LBB8_47
.LBB8_40:                               # %if.else155
                                        #   in Loop: Header=BB8_27 Depth=2
	vmovsd	.LCPI8_0(%rip), %xmm0   # xmm0 = mem[0],zero
	vmovsd	-48(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB8_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB8_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB8_46
.LBB8_42:                               # %cond.false179
                                        #   in Loop: Header=BB8_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB8_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB8_27 Depth=2
	movl	$127, %eax
	jmp	.LBB8_45
.LBB8_44:                               # %cond.false188
                                        #   in Loop: Header=BB8_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB8_45:                               # %cond.end194
                                        #   in Loop: Header=BB8_27 Depth=2
.LBB8_46:                               # %cond.end196
                                        #   in Loop: Header=BB8_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB8_47:                               # %if.end209
                                        #   in Loop: Header=BB8_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB8_48:                               # %for.cond222
                                        #   Parent Loop BB8_25 Depth=1
                                        #     Parent Loop BB8_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB8_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB8_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB8_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB8_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB8_55
.LBB8_51:                               # %cond.false248
                                        #   in Loop: Header=BB8_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB8_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB8_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB8_54
.LBB8_53:                               # %cond.false270
                                        #   in Loop: Header=BB8_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB8_54:                               # %cond.end288
                                        #   in Loop: Header=BB8_48 Depth=3
.LBB8_55:                               # %cond.end290
                                        #   in Loop: Header=BB8_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB8_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB8_48
.LBB8_57:                               # %for.end297
                                        #   in Loop: Header=BB8_27 Depth=2
	movl	$0, -12(%rbp)
.LBB8_58:                               # %for.cond298
                                        #   Parent Loop BB8_25 Depth=1
                                        #     Parent Loop BB8_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB8_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB8_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB8_58 Depth=3
	movl	$0, -16(%rbp)
.LBB8_60:                               # %for.cond305
                                        #   Parent Loop BB8_25 Depth=1
                                        #     Parent Loop BB8_27 Depth=2
                                        #       Parent Loop BB8_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB8_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB8_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB8_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB8_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB8_67
.LBB8_63:                               # %cond.false336
                                        #   in Loop: Header=BB8_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB8_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB8_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB8_66
.LBB8_65:                               # %cond.false364
                                        #   in Loop: Header=BB8_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB8_66:                               # %cond.end387
                                        #   in Loop: Header=BB8_60 Depth=4
.LBB8_67:                               # %cond.end389
                                        #   in Loop: Header=BB8_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB8_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB8_60
.LBB8_69:                               # %for.end400
                                        #   in Loop: Header=BB8_58 Depth=3
	jmp	.LBB8_70
.LBB8_70:                               # %for.inc401
                                        #   in Loop: Header=BB8_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB8_58
.LBB8_71:                               # %for.end403
                                        #   in Loop: Header=BB8_27 Depth=2
	jmp	.LBB8_72
.LBB8_72:                               # %for.inc404
                                        #   in Loop: Header=BB8_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB8_27
.LBB8_73:                               # %for.end406
                                        #   in Loop: Header=BB8_25 Depth=1
	jmp	.LBB8_74
.LBB8_74:                               # %for.inc407
                                        #   in Loop: Header=BB8_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB8_25
.LBB8_75:                               # %for.end409
	movl	$0, -8(%rbp)
.LBB8_76:                               # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_78 Depth 2
                                        #       Child Loop BB8_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB8_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB8_76 Depth=1
	movl	$0, -20(%rbp)
.LBB8_78:                               # %for.cond415
                                        #   Parent Loop BB8_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB8_80 Depth 3
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB8_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB8_78 Depth=2
	movl	$0, -24(%rbp)
.LBB8_80:                               # %for.cond421
                                        #   Parent Loop BB8_76 Depth=1
                                        #     Parent Loop BB8_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -24(%rbp)
	jge	.LBB8_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB8_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB8_80 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB8_80
.LBB8_83:                               # %for.end451
                                        #   in Loop: Header=BB8_78 Depth=2
	jmp	.LBB8_84
.LBB8_84:                               # %for.inc452
                                        #   in Loop: Header=BB8_78 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB8_78
.LBB8_85:                               # %for.end454
                                        #   in Loop: Header=BB8_76 Depth=1
	jmp	.LBB8_86
.LBB8_86:                               # %for.inc455
                                        #   in Loop: Header=BB8_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB8_76
.LBB8_87:                               # %for.end457
	cmpl	$1017719176, -64(%rbp)  # imm = 0x3CA92988
	jne	.LBB8_89
.LBB8_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_89:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB8_88
.Lfunc_end8:
	.size	estimate_weighting_factor_P_slice.5, .Lfunc_end8-estimate_weighting_factor_P_slice.5
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.6
.LCPI9_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.6
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.6,@function
estimate_weighting_factor_B_slice.6:    # @estimate_weighting_factor_B_slice.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$1054530745, -88(%rbp)  # imm = 0x3EDADCB9
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB9_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB9_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB9_4
.LBB9_3:                                # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB9_4
.LBB9_4:                                # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB9_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB9_7
.LBB9_6:                                # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB9_7:                                # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB9_8:                                # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_10 Depth 2
                                        #       Child Loop BB9_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB9_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB9_8 Depth=1
	movl	$0, -8(%rbp)
.LBB9_10:                               # %for.cond14
                                        #   Parent Loop BB9_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB9_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB9_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB9_10 Depth=2
	movl	$0, -16(%rbp)
.LBB9_12:                               # %for.cond19
                                        #   Parent Loop BB9_8 Depth=1
                                        #     Parent Loop BB9_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB9_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB9_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB9_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB9_12
.LBB9_15:                               # %for.end
                                        #   in Loop: Header=BB9_10 Depth=2
	jmp	.LBB9_16
.LBB9_16:                               # %for.inc50
                                        #   in Loop: Header=BB9_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB9_10
.LBB9_17:                               # %for.end52
                                        #   in Loop: Header=BB9_8 Depth=1
	jmp	.LBB9_18
.LBB9_18:                               # %for.inc53
                                        #   in Loop: Header=BB9_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_8
.LBB9_19:                               # %for.end55
	movl	$0, -4(%rbp)
.LBB9_20:                               # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_22 Depth 2
                                        #       Child Loop BB9_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB9_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB9_20 Depth=1
	movl	$0, -8(%rbp)
.LBB9_22:                               # %for.cond59
                                        #   Parent Loop BB9_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB9_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB9_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB9_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB9_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB9_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB9_29
.LBB9_25:                               # %cond.false70
                                        #   in Loop: Header=BB9_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB9_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB9_22 Depth=2
	movl	$127, %eax
	jmp	.LBB9_28
.LBB9_27:                               # %cond.false80
                                        #   in Loop: Header=BB9_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB9_28:                               # %cond.end88
                                        #   in Loop: Header=BB9_22 Depth=2
.LBB9_29:                               # %cond.end90
                                        #   in Loop: Header=BB9_22 Depth=2
	movl	%eax, -56(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB9_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB9_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB9_35
.LBB9_31:                               # %cond.false99
                                        #   in Loop: Header=BB9_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB9_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB9_22 Depth=2
	movl	$127, %eax
	jmp	.LBB9_34
.LBB9_33:                               # %cond.false107
                                        #   in Loop: Header=BB9_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB9_34:                               # %cond.end113
                                        #   in Loop: Header=BB9_22 Depth=2
.LBB9_35:                               # %cond.end115
                                        #   in Loop: Header=BB9_22 Depth=2
	movl	%eax, -60(%rbp)
	movl	$0, -20(%rbp)
.LBB9_36:                               # %for.cond117
                                        #   Parent Loop BB9_20 Depth=1
                                        #     Parent Loop BB9_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB9_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB9_36 Depth=3
	cmpl	$0, -56(%rbp)
	jne	.LBB9_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB9_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB9_49
.LBB9_39:                               # %if.else154
                                        #   in Loop: Header=BB9_36 Depth=3
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-56(%rbp)
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB9_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB9_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB9_45
.LBB9_41:                               # %cond.false160
                                        #   in Loop: Header=BB9_36 Depth=3
	movl	-64(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB9_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB9_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB9_44
.LBB9_43:                               # %cond.false166
                                        #   in Loop: Header=BB9_36 Depth=3
	movl	-64(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB9_44:                               # %cond.end170
                                        #   in Loop: Header=BB9_36 Depth=3
.LBB9_45:                               # %cond.end172
                                        #   in Loop: Header=BB9_36 Depth=3
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB9_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB9_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB9_48
.LBB9_47:                               # %if.then198
                                        #   in Loop: Header=BB9_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB9_48:                               # %if.end208
                                        #   in Loop: Header=BB9_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB9_49:                               # %if.end238
                                        #   in Loop: Header=BB9_36 Depth=3
	jmp	.LBB9_50
.LBB9_50:                               # %for.inc239
                                        #   in Loop: Header=BB9_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB9_36
.LBB9_51:                               # %for.end241
                                        #   in Loop: Header=BB9_22 Depth=2
	jmp	.LBB9_52
.LBB9_52:                               # %for.inc242
                                        #   in Loop: Header=BB9_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB9_22
.LBB9_53:                               # %for.end244
                                        #   in Loop: Header=BB9_20 Depth=1
	jmp	.LBB9_54
.LBB9_54:                               # %for.inc245
                                        #   in Loop: Header=BB9_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_20
.LBB9_55:                               # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB9_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB9_57:                               # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_59 Depth 2
                                        #       Child Loop BB9_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB9_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB9_57 Depth=1
	movl	$0, -8(%rbp)
.LBB9_59:                               # %for.cond254
                                        #   Parent Loop BB9_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB9_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB9_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB9_59 Depth=2
	movl	$0, -20(%rbp)
.LBB9_61:                               # %for.cond257
                                        #   Parent Loop BB9_57 Depth=1
                                        #     Parent Loop BB9_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB9_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB9_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB9_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB9_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB9_65
.LBB9_64:                               # %cond.false262
                                        #   in Loop: Header=BB9_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB9_65:                               # %cond.end263
                                        #   in Loop: Header=BB9_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -84(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB9_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB9_61
.LBB9_67:                               # %for.end295
                                        #   in Loop: Header=BB9_59 Depth=2
	jmp	.LBB9_68
.LBB9_68:                               # %for.inc296
                                        #   in Loop: Header=BB9_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB9_59
.LBB9_69:                               # %for.end298
                                        #   in Loop: Header=BB9_57 Depth=1
	jmp	.LBB9_70
.LBB9_70:                               # %for.inc299
                                        #   in Loop: Header=BB9_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_57
.LBB9_71:                               # %for.end301
	movl	$0, -12(%rbp)
.LBB9_72:                               # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB9_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB9_72 Depth=1
	movl	$0, -24(%rbp)
.LBB9_74:                               # %for.cond306
                                        #   Parent Loop BB9_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB9_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB9_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB9_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB9_74
.LBB9_77:                               # %for.end346
                                        #   in Loop: Header=BB9_72 Depth=1
	jmp	.LBB9_78
.LBB9_78:                               # %for.inc347
                                        #   in Loop: Header=BB9_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB9_72
.LBB9_79:                               # %for.end349
	movl	$0, -4(%rbp)
.LBB9_80:                               # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_82 Depth 2
                                        #       Child Loop BB9_84 Depth 3
                                        #       Child Loop BB9_88 Depth 3
                                        #         Child Loop BB9_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB9_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB9_80 Depth=1
	movl	$0, -8(%rbp)
.LBB9_82:                               # %for.cond353
                                        #   Parent Loop BB9_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB9_84 Depth 3
                                        #       Child Loop BB9_88 Depth 3
                                        #         Child Loop BB9_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB9_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB9_82 Depth=2
	movl	$0, -16(%rbp)
.LBB9_84:                               # %for.cond356
                                        #   Parent Loop BB9_80 Depth=1
                                        #     Parent Loop BB9_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB9_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB9_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB9_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB9_84
.LBB9_87:                               # %for.end380
                                        #   in Loop: Header=BB9_82 Depth=2
	movl	$0, -16(%rbp)
.LBB9_88:                               # %for.cond381
                                        #   Parent Loop BB9_80 Depth=1
                                        #     Parent Loop BB9_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB9_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB9_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB9_88 Depth=3
	movl	$0, -32(%rbp)
.LBB9_90:                               # %for.cond387
                                        #   Parent Loop BB9_80 Depth=1
                                        #     Parent Loop BB9_82 Depth=2
                                        #       Parent Loop BB9_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB9_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB9_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB9_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB9_90
.LBB9_93:                               # %for.end421
                                        #   in Loop: Header=BB9_88 Depth=3
	jmp	.LBB9_94
.LBB9_94:                               # %for.inc422
                                        #   in Loop: Header=BB9_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB9_88
.LBB9_95:                               # %for.end424
                                        #   in Loop: Header=BB9_82 Depth=2
	jmp	.LBB9_96
.LBB9_96:                               # %for.inc425
                                        #   in Loop: Header=BB9_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB9_82
.LBB9_97:                               # %for.end427
                                        #   in Loop: Header=BB9_80 Depth=1
	jmp	.LBB9_98
.LBB9_98:                               # %for.inc428
                                        #   in Loop: Header=BB9_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_80
.LBB9_99:                               # %for.end430
	jmp	.LBB9_189
.LBB9_100:                              # %if.else431
	movl	$0, -4(%rbp)
.LBB9_101:                              # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB9_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB9_101 Depth=1
	movl	$0, -8(%rbp)
.LBB9_103:                              # %for.cond436
                                        #   Parent Loop BB9_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB9_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB9_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB9_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB9_103
.LBB9_106:                              # %for.end447
                                        #   in Loop: Header=BB9_101 Depth=1
	jmp	.LBB9_107
.LBB9_107:                              # %for.inc448
                                        #   in Loop: Header=BB9_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_101
.LBB9_108:                              # %for.end450
	movl	$0, -12(%rbp)
.LBB9_109:                              # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_111 Depth 2
                                        #       Child Loop BB9_113 Depth 3
                                        #       Child Loop BB9_123 Depth 3
                                        #       Child Loop BB9_133 Depth 3
                                        #         Child Loop BB9_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB9_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB9_109 Depth=1
	movl	$0, -16(%rbp)
.LBB9_111:                              # %for.cond456
                                        #   Parent Loop BB9_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB9_113 Depth 3
                                        #       Child Loop BB9_123 Depth 3
                                        #       Child Loop BB9_133 Depth 3
                                        #         Child Loop BB9_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB9_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB9_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB9_113:                              # %for.cond476
                                        #   Parent Loop BB9_109 Depth=1
                                        #     Parent Loop BB9_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB9_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB9_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB9_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_113
.LBB9_116:                              # %for.end493
                                        #   in Loop: Header=BB9_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB9_117
	jp	.LBB9_117
	jmp	.LBB9_118
.LBB9_117:                              # %if.then500
                                        #   in Loop: Header=BB9_111 Depth=2
	vmovsd	.LCPI9_0(%rip), %xmm0   # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB9_119
.LBB9_118:                              # %if.else511
                                        #   in Loop: Header=BB9_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB9_119:                              # %if.end513
                                        #   in Loop: Header=BB9_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB9_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB9_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB9_122
.LBB9_121:                              # %if.then519
                                        #   in Loop: Header=BB9_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB9_122:                              # %if.end521
                                        #   in Loop: Header=BB9_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB9_123:                              # %for.cond554
                                        #   Parent Loop BB9_109 Depth=1
                                        #     Parent Loop BB9_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB9_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB9_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB9_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB9_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB9_130
.LBB9_126:                              # %cond.false571
                                        #   in Loop: Header=BB9_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB9_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB9_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB9_129
.LBB9_128:                              # %cond.false583
                                        #   in Loop: Header=BB9_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB9_129:                              # %cond.end591
                                        #   in Loop: Header=BB9_123 Depth=3
.LBB9_130:                              # %cond.end593
                                        #   in Loop: Header=BB9_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB9_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_123
.LBB9_132:                              # %for.end600
                                        #   in Loop: Header=BB9_111 Depth=2
	movl	$0, -4(%rbp)
.LBB9_133:                              # %for.cond601
                                        #   Parent Loop BB9_109 Depth=1
                                        #     Parent Loop BB9_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB9_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB9_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB9_133 Depth=3
	movl	$0, -8(%rbp)
.LBB9_135:                              # %for.cond608
                                        #   Parent Loop BB9_109 Depth=1
                                        #     Parent Loop BB9_111 Depth=2
                                        #       Parent Loop BB9_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB9_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB9_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB9_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB9_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB9_142
.LBB9_138:                              # %cond.false630
                                        #   in Loop: Header=BB9_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB9_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB9_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB9_141
.LBB9_140:                              # %cond.false648
                                        #   in Loop: Header=BB9_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB9_141:                              # %cond.end661
                                        #   in Loop: Header=BB9_135 Depth=4
.LBB9_142:                              # %cond.end663
                                        #   in Loop: Header=BB9_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB9_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB9_135
.LBB9_144:                              # %for.end675
                                        #   in Loop: Header=BB9_133 Depth=3
	jmp	.LBB9_145
.LBB9_145:                              # %for.inc676
                                        #   in Loop: Header=BB9_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_133
.LBB9_146:                              # %for.end678
                                        #   in Loop: Header=BB9_111 Depth=2
	jmp	.LBB9_147
.LBB9_147:                              # %for.inc679
                                        #   in Loop: Header=BB9_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB9_111
.LBB9_148:                              # %for.end681
                                        #   in Loop: Header=BB9_109 Depth=1
	jmp	.LBB9_149
.LBB9_149:                              # %for.inc682
                                        #   in Loop: Header=BB9_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB9_109
.LBB9_150:                              # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB9_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB9_152:                              # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_154 Depth 2
                                        #       Child Loop BB9_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB9_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB9_152 Depth=1
	movl	$0, -24(%rbp)
.LBB9_154:                              # %for.cond694
                                        #   Parent Loop BB9_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB9_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB9_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB9_154 Depth=2
	movl	$0, -20(%rbp)
.LBB9_156:                              # %for.cond700
                                        #   Parent Loop BB9_152 Depth=1
                                        #     Parent Loop BB9_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB9_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB9_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB9_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB9_156
.LBB9_159:                              # %for.end730
                                        #   in Loop: Header=BB9_154 Depth=2
	jmp	.LBB9_160
.LBB9_160:                              # %for.inc731
                                        #   in Loop: Header=BB9_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB9_154
.LBB9_161:                              # %for.end733
                                        #   in Loop: Header=BB9_152 Depth=1
	jmp	.LBB9_162
.LBB9_162:                              # %for.inc734
                                        #   in Loop: Header=BB9_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB9_152
.LBB9_163:                              # %for.end736
	jmp	.LBB9_173
.LBB9_164:                              # %if.else737
	movl	$0, -12(%rbp)
.LBB9_165:                              # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB9_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB9_165 Depth=1
	movl	$0, -24(%rbp)
.LBB9_167:                              # %for.cond743
                                        #   Parent Loop BB9_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB9_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB9_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB9_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB9_167
.LBB9_170:                              # %for.end784
                                        #   in Loop: Header=BB9_165 Depth=1
	jmp	.LBB9_171
.LBB9_171:                              # %for.inc785
                                        #   in Loop: Header=BB9_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB9_165
.LBB9_172:                              # %for.end787
	jmp	.LBB9_173
.LBB9_173:                              # %if.end788
	movl	$0, -4(%rbp)
.LBB9_174:                              # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_176 Depth 2
                                        #       Child Loop BB9_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB9_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB9_174 Depth=1
	movl	$0, -8(%rbp)
.LBB9_176:                              # %for.cond793
                                        #   Parent Loop BB9_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB9_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB9_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB9_176 Depth=2
	movl	$0, -20(%rbp)
.LBB9_178:                              # %for.cond797
                                        #   Parent Loop BB9_174 Depth=1
                                        #     Parent Loop BB9_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB9_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB9_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB9_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB9_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB9_182
.LBB9_181:                              # %cond.false804
                                        #   in Loop: Header=BB9_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB9_182:                              # %cond.end805
                                        #   in Loop: Header=BB9_178 Depth=3
	movl	%eax, -84(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB9_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB9_178
.LBB9_184:                              # %for.end833
                                        #   in Loop: Header=BB9_176 Depth=2
	jmp	.LBB9_185
.LBB9_185:                              # %for.inc834
                                        #   in Loop: Header=BB9_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB9_176
.LBB9_186:                              # %for.end836
                                        #   in Loop: Header=BB9_174 Depth=1
	jmp	.LBB9_187
.LBB9_187:                              # %for.inc837
                                        #   in Loop: Header=BB9_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_174
.LBB9_188:                              # %for.end839
	jmp	.LBB9_189
.LBB9_189:                              # %if.end840
	cmpl	$1054530745, -88(%rbp)  # imm = 0x3EDADCB9
	jne	.LBB9_191
.LBB9_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_191:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB9_190
.Lfunc_end9:
	.size	estimate_weighting_factor_B_slice.6, .Lfunc_end9-estimate_weighting_factor_B_slice.6
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.7
.LCPI10_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.7
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.7,@function
estimate_weighting_factor_B_slice.7:    # @estimate_weighting_factor_B_slice.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$1640831252, -88(%rbp)  # imm = 0x61CD1914
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB10_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB10_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB10_4
.LBB10_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB10_4
.LBB10_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB10_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB10_7
.LBB10_6:                               # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB10_7:                               # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB10_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_10 Depth 2
                                        #       Child Loop BB10_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB10_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB10_8 Depth=1
	movl	$0, -8(%rbp)
.LBB10_10:                              # %for.cond14
                                        #   Parent Loop BB10_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB10_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB10_10 Depth=2
	movl	$0, -16(%rbp)
.LBB10_12:                              # %for.cond19
                                        #   Parent Loop BB10_8 Depth=1
                                        #     Parent Loop BB10_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB10_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB10_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB10_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB10_12
.LBB10_15:                              # %for.end
                                        #   in Loop: Header=BB10_10 Depth=2
	jmp	.LBB10_16
.LBB10_16:                              # %for.inc50
                                        #   in Loop: Header=BB10_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_10
.LBB10_17:                              # %for.end52
                                        #   in Loop: Header=BB10_8 Depth=1
	jmp	.LBB10_18
.LBB10_18:                              # %for.inc53
                                        #   in Loop: Header=BB10_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_8
.LBB10_19:                              # %for.end55
	movl	$0, -4(%rbp)
.LBB10_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_22 Depth 2
                                        #       Child Loop BB10_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB10_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB10_20 Depth=1
	movl	$0, -8(%rbp)
.LBB10_22:                              # %for.cond59
                                        #   Parent Loop BB10_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB10_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB10_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB10_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB10_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB10_29
.LBB10_25:                              # %cond.false70
                                        #   in Loop: Header=BB10_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB10_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB10_22 Depth=2
	movl	$127, %eax
	jmp	.LBB10_28
.LBB10_27:                              # %cond.false80
                                        #   in Loop: Header=BB10_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB10_28:                              # %cond.end88
                                        #   in Loop: Header=BB10_22 Depth=2
.LBB10_29:                              # %cond.end90
                                        #   in Loop: Header=BB10_22 Depth=2
	movl	%eax, -60(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB10_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB10_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB10_35
.LBB10_31:                              # %cond.false99
                                        #   in Loop: Header=BB10_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB10_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB10_22 Depth=2
	movl	$127, %eax
	jmp	.LBB10_34
.LBB10_33:                              # %cond.false107
                                        #   in Loop: Header=BB10_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB10_34:                              # %cond.end113
                                        #   in Loop: Header=BB10_22 Depth=2
.LBB10_35:                              # %cond.end115
                                        #   in Loop: Header=BB10_22 Depth=2
	movl	%eax, -64(%rbp)
	movl	$0, -20(%rbp)
.LBB10_36:                              # %for.cond117
                                        #   Parent Loop BB10_20 Depth=1
                                        #     Parent Loop BB10_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB10_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB10_36 Depth=3
	cmpl	$0, -60(%rbp)
	jne	.LBB10_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB10_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB10_49
.LBB10_39:                              # %if.else154
                                        #   in Loop: Header=BB10_36 Depth=3
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-60(%rbp)
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB10_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB10_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB10_45
.LBB10_41:                              # %cond.false160
                                        #   in Loop: Header=BB10_36 Depth=3
	movl	-56(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB10_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB10_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB10_44
.LBB10_43:                              # %cond.false166
                                        #   in Loop: Header=BB10_36 Depth=3
	movl	-56(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB10_44:                              # %cond.end170
                                        #   in Loop: Header=BB10_36 Depth=3
.LBB10_45:                              # %cond.end172
                                        #   in Loop: Header=BB10_36 Depth=3
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB10_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB10_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB10_48
.LBB10_47:                              # %if.then198
                                        #   in Loop: Header=BB10_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB10_48:                              # %if.end208
                                        #   in Loop: Header=BB10_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB10_49:                              # %if.end238
                                        #   in Loop: Header=BB10_36 Depth=3
	jmp	.LBB10_50
.LBB10_50:                              # %for.inc239
                                        #   in Loop: Header=BB10_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB10_36
.LBB10_51:                              # %for.end241
                                        #   in Loop: Header=BB10_22 Depth=2
	jmp	.LBB10_52
.LBB10_52:                              # %for.inc242
                                        #   in Loop: Header=BB10_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_22
.LBB10_53:                              # %for.end244
                                        #   in Loop: Header=BB10_20 Depth=1
	jmp	.LBB10_54
.LBB10_54:                              # %for.inc245
                                        #   in Loop: Header=BB10_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_20
.LBB10_55:                              # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB10_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB10_57:                              # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_59 Depth 2
                                        #       Child Loop BB10_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB10_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB10_57 Depth=1
	movl	$0, -8(%rbp)
.LBB10_59:                              # %for.cond254
                                        #   Parent Loop BB10_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB10_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB10_59 Depth=2
	movl	$0, -20(%rbp)
.LBB10_61:                              # %for.cond257
                                        #   Parent Loop BB10_57 Depth=1
                                        #     Parent Loop BB10_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB10_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB10_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB10_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB10_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB10_65
.LBB10_64:                              # %cond.false262
                                        #   in Loop: Header=BB10_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB10_65:                              # %cond.end263
                                        #   in Loop: Header=BB10_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -84(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB10_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB10_61
.LBB10_67:                              # %for.end295
                                        #   in Loop: Header=BB10_59 Depth=2
	jmp	.LBB10_68
.LBB10_68:                              # %for.inc296
                                        #   in Loop: Header=BB10_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_59
.LBB10_69:                              # %for.end298
                                        #   in Loop: Header=BB10_57 Depth=1
	jmp	.LBB10_70
.LBB10_70:                              # %for.inc299
                                        #   in Loop: Header=BB10_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_57
.LBB10_71:                              # %for.end301
	movl	$0, -12(%rbp)
.LBB10_72:                              # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB10_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB10_72 Depth=1
	movl	$0, -24(%rbp)
.LBB10_74:                              # %for.cond306
                                        #   Parent Loop BB10_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB10_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB10_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB10_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB10_74
.LBB10_77:                              # %for.end346
                                        #   in Loop: Header=BB10_72 Depth=1
	jmp	.LBB10_78
.LBB10_78:                              # %for.inc347
                                        #   in Loop: Header=BB10_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB10_72
.LBB10_79:                              # %for.end349
	movl	$0, -4(%rbp)
.LBB10_80:                              # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_82 Depth 2
                                        #       Child Loop BB10_84 Depth 3
                                        #       Child Loop BB10_88 Depth 3
                                        #         Child Loop BB10_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB10_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB10_80 Depth=1
	movl	$0, -8(%rbp)
.LBB10_82:                              # %for.cond353
                                        #   Parent Loop BB10_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_84 Depth 3
                                        #       Child Loop BB10_88 Depth 3
                                        #         Child Loop BB10_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB10_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB10_82 Depth=2
	movl	$0, -16(%rbp)
.LBB10_84:                              # %for.cond356
                                        #   Parent Loop BB10_80 Depth=1
                                        #     Parent Loop BB10_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB10_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB10_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB10_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB10_84
.LBB10_87:                              # %for.end380
                                        #   in Loop: Header=BB10_82 Depth=2
	movl	$0, -16(%rbp)
.LBB10_88:                              # %for.cond381
                                        #   Parent Loop BB10_80 Depth=1
                                        #     Parent Loop BB10_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB10_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB10_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB10_88 Depth=3
	movl	$0, -32(%rbp)
.LBB10_90:                              # %for.cond387
                                        #   Parent Loop BB10_80 Depth=1
                                        #     Parent Loop BB10_82 Depth=2
                                        #       Parent Loop BB10_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB10_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB10_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB10_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB10_90
.LBB10_93:                              # %for.end421
                                        #   in Loop: Header=BB10_88 Depth=3
	jmp	.LBB10_94
.LBB10_94:                              # %for.inc422
                                        #   in Loop: Header=BB10_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB10_88
.LBB10_95:                              # %for.end424
                                        #   in Loop: Header=BB10_82 Depth=2
	jmp	.LBB10_96
.LBB10_96:                              # %for.inc425
                                        #   in Loop: Header=BB10_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_82
.LBB10_97:                              # %for.end427
                                        #   in Loop: Header=BB10_80 Depth=1
	jmp	.LBB10_98
.LBB10_98:                              # %for.inc428
                                        #   in Loop: Header=BB10_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_80
.LBB10_99:                              # %for.end430
	jmp	.LBB10_189
.LBB10_100:                             # %if.else431
	movl	$0, -4(%rbp)
.LBB10_101:                             # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB10_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB10_101 Depth=1
	movl	$0, -8(%rbp)
.LBB10_103:                             # %for.cond436
                                        #   Parent Loop BB10_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB10_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB10_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB10_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_103
.LBB10_106:                             # %for.end447
                                        #   in Loop: Header=BB10_101 Depth=1
	jmp	.LBB10_107
.LBB10_107:                             # %for.inc448
                                        #   in Loop: Header=BB10_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_101
.LBB10_108:                             # %for.end450
	movl	$0, -12(%rbp)
.LBB10_109:                             # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_111 Depth 2
                                        #       Child Loop BB10_113 Depth 3
                                        #       Child Loop BB10_123 Depth 3
                                        #       Child Loop BB10_133 Depth 3
                                        #         Child Loop BB10_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB10_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB10_109 Depth=1
	movl	$0, -16(%rbp)
.LBB10_111:                             # %for.cond456
                                        #   Parent Loop BB10_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_113 Depth 3
                                        #       Child Loop BB10_123 Depth 3
                                        #       Child Loop BB10_133 Depth 3
                                        #         Child Loop BB10_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB10_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB10_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB10_113:                             # %for.cond476
                                        #   Parent Loop BB10_109 Depth=1
                                        #     Parent Loop BB10_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB10_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB10_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB10_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_113
.LBB10_116:                             # %for.end493
                                        #   in Loop: Header=BB10_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB10_117
	jp	.LBB10_117
	jmp	.LBB10_118
.LBB10_117:                             # %if.then500
                                        #   in Loop: Header=BB10_111 Depth=2
	vmovsd	.LCPI10_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB10_119
.LBB10_118:                             # %if.else511
                                        #   in Loop: Header=BB10_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB10_119:                             # %if.end513
                                        #   in Loop: Header=BB10_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB10_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB10_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB10_122
.LBB10_121:                             # %if.then519
                                        #   in Loop: Header=BB10_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB10_122:                             # %if.end521
                                        #   in Loop: Header=BB10_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB10_123:                             # %for.cond554
                                        #   Parent Loop BB10_109 Depth=1
                                        #     Parent Loop BB10_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB10_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB10_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB10_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB10_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB10_130
.LBB10_126:                             # %cond.false571
                                        #   in Loop: Header=BB10_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB10_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB10_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB10_129
.LBB10_128:                             # %cond.false583
                                        #   in Loop: Header=BB10_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB10_129:                             # %cond.end591
                                        #   in Loop: Header=BB10_123 Depth=3
.LBB10_130:                             # %cond.end593
                                        #   in Loop: Header=BB10_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB10_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_123
.LBB10_132:                             # %for.end600
                                        #   in Loop: Header=BB10_111 Depth=2
	movl	$0, -4(%rbp)
.LBB10_133:                             # %for.cond601
                                        #   Parent Loop BB10_109 Depth=1
                                        #     Parent Loop BB10_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB10_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB10_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB10_133 Depth=3
	movl	$0, -8(%rbp)
.LBB10_135:                             # %for.cond608
                                        #   Parent Loop BB10_109 Depth=1
                                        #     Parent Loop BB10_111 Depth=2
                                        #       Parent Loop BB10_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB10_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB10_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB10_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB10_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB10_142
.LBB10_138:                             # %cond.false630
                                        #   in Loop: Header=BB10_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB10_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB10_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB10_141
.LBB10_140:                             # %cond.false648
                                        #   in Loop: Header=BB10_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB10_141:                             # %cond.end661
                                        #   in Loop: Header=BB10_135 Depth=4
.LBB10_142:                             # %cond.end663
                                        #   in Loop: Header=BB10_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB10_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_135
.LBB10_144:                             # %for.end675
                                        #   in Loop: Header=BB10_133 Depth=3
	jmp	.LBB10_145
.LBB10_145:                             # %for.inc676
                                        #   in Loop: Header=BB10_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_133
.LBB10_146:                             # %for.end678
                                        #   in Loop: Header=BB10_111 Depth=2
	jmp	.LBB10_147
.LBB10_147:                             # %for.inc679
                                        #   in Loop: Header=BB10_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB10_111
.LBB10_148:                             # %for.end681
                                        #   in Loop: Header=BB10_109 Depth=1
	jmp	.LBB10_149
.LBB10_149:                             # %for.inc682
                                        #   in Loop: Header=BB10_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB10_109
.LBB10_150:                             # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB10_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB10_152:                             # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_154 Depth 2
                                        #       Child Loop BB10_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB10_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB10_152 Depth=1
	movl	$0, -24(%rbp)
.LBB10_154:                             # %for.cond694
                                        #   Parent Loop BB10_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB10_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB10_154 Depth=2
	movl	$0, -20(%rbp)
.LBB10_156:                             # %for.cond700
                                        #   Parent Loop BB10_152 Depth=1
                                        #     Parent Loop BB10_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB10_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB10_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB10_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB10_156
.LBB10_159:                             # %for.end730
                                        #   in Loop: Header=BB10_154 Depth=2
	jmp	.LBB10_160
.LBB10_160:                             # %for.inc731
                                        #   in Loop: Header=BB10_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB10_154
.LBB10_161:                             # %for.end733
                                        #   in Loop: Header=BB10_152 Depth=1
	jmp	.LBB10_162
.LBB10_162:                             # %for.inc734
                                        #   in Loop: Header=BB10_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB10_152
.LBB10_163:                             # %for.end736
	jmp	.LBB10_173
.LBB10_164:                             # %if.else737
	movl	$0, -12(%rbp)
.LBB10_165:                             # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB10_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB10_165 Depth=1
	movl	$0, -24(%rbp)
.LBB10_167:                             # %for.cond743
                                        #   Parent Loop BB10_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB10_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB10_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB10_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB10_167
.LBB10_170:                             # %for.end784
                                        #   in Loop: Header=BB10_165 Depth=1
	jmp	.LBB10_171
.LBB10_171:                             # %for.inc785
                                        #   in Loop: Header=BB10_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB10_165
.LBB10_172:                             # %for.end787
	jmp	.LBB10_173
.LBB10_173:                             # %if.end788
	movl	$0, -4(%rbp)
.LBB10_174:                             # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_176 Depth 2
                                        #       Child Loop BB10_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB10_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB10_174 Depth=1
	movl	$0, -8(%rbp)
.LBB10_176:                             # %for.cond793
                                        #   Parent Loop BB10_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB10_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB10_176 Depth=2
	movl	$0, -20(%rbp)
.LBB10_178:                             # %for.cond797
                                        #   Parent Loop BB10_174 Depth=1
                                        #     Parent Loop BB10_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB10_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB10_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB10_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB10_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB10_182
.LBB10_181:                             # %cond.false804
                                        #   in Loop: Header=BB10_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB10_182:                             # %cond.end805
                                        #   in Loop: Header=BB10_178 Depth=3
	movl	%eax, -84(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB10_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB10_178
.LBB10_184:                             # %for.end833
                                        #   in Loop: Header=BB10_176 Depth=2
	jmp	.LBB10_185
.LBB10_185:                             # %for.inc834
                                        #   in Loop: Header=BB10_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_176
.LBB10_186:                             # %for.end836
                                        #   in Loop: Header=BB10_174 Depth=1
	jmp	.LBB10_187
.LBB10_187:                             # %for.inc837
                                        #   in Loop: Header=BB10_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_174
.LBB10_188:                             # %for.end839
	jmp	.LBB10_189
.LBB10_189:                             # %if.end840
	cmpl	$1640831252, -88(%rbp)  # imm = 0x61CD1914
	jne	.LBB10_191
.LBB10_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_191:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB10_190
.Lfunc_end10:
	.size	estimate_weighting_factor_B_slice.7, .Lfunc_end10-estimate_weighting_factor_B_slice.7
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.8
.LCPI11_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.8
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.8,@function
estimate_weighting_factor_P_slice.8:    # @estimate_weighting_factor_P_slice.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$573641017, -60(%rbp)   # imm = 0x22311139
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB11_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB11_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB11_4
.LBB11_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB11_4
.LBB11_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB11_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_7 Depth 2
                                        #       Child Loop BB11_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB11_5 Depth=1
	movl	$0, -16(%rbp)
.LBB11_7:                               # %for.cond12
                                        #   Parent Loop BB11_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB11_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB11_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB11_7 Depth=2
	movl	$0, -4(%rbp)
.LBB11_9:                               # %for.cond17
                                        #   Parent Loop BB11_5 Depth=1
                                        #     Parent Loop BB11_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB11_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB11_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB11_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_9
.LBB11_12:                              # %for.end
                                        #   in Loop: Header=BB11_7 Depth=2
	jmp	.LBB11_13
.LBB11_13:                              # %for.inc48
                                        #   in Loop: Header=BB11_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_7
.LBB11_14:                              # %for.end50
                                        #   in Loop: Header=BB11_5 Depth=1
	jmp	.LBB11_15
.LBB11_15:                              # %for.inc51
                                        #   in Loop: Header=BB11_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_5
.LBB11_16:                              # %for.end53
	movl	$0, -12(%rbp)
.LBB11_17:                              # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB11_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB11_17 Depth=1
	movl	$0, -16(%rbp)
.LBB11_19:                              # %for.cond57
                                        #   Parent Loop BB11_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB11_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB11_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB11_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_19
.LBB11_22:                              # %for.end67
                                        #   in Loop: Header=BB11_17 Depth=1
	jmp	.LBB11_23
.LBB11_23:                              # %for.inc68
                                        #   in Loop: Header=BB11_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_17
.LBB11_24:                              # %for.end70
	movl	$0, -8(%rbp)
.LBB11_25:                              # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_27 Depth 2
                                        #       Child Loop BB11_29 Depth 3
                                        #       Child Loop BB11_48 Depth 3
                                        #       Child Loop BB11_58 Depth 3
                                        #         Child Loop BB11_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB11_25 Depth=1
	movl	$0, -4(%rbp)
.LBB11_27:                              # %for.cond76
                                        #   Parent Loop BB11_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB11_29 Depth 3
                                        #       Child Loop BB11_48 Depth 3
                                        #       Child Loop BB11_58 Depth 3
                                        #         Child Loop BB11_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB11_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB11_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -48(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB11_29:                              # %for.cond92
                                        #   Parent Loop BB11_25 Depth=1
                                        #     Parent Loop BB11_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB11_29 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB11_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_29
.LBB11_32:                              # %for.end106
                                        #   in Loop: Header=BB11_27 Depth=2
	vcvtsi2sdl	-64(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB11_40
	jp	.LBB11_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB11_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB11_34
	jp	.LBB11_34
	jmp	.LBB11_35
.LBB11_34:                              # %if.then114
                                        #   in Loop: Header=BB11_27 Depth=2
	vmovsd	.LCPI11_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB11_36
.LBB11_35:                              # %if.else
                                        #   in Loop: Header=BB11_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB11_36:                              # %if.end
                                        #   in Loop: Header=BB11_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB11_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB11_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB11_39
.LBB11_38:                              # %if.then147
                                        #   in Loop: Header=BB11_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB11_39:                              # %if.end154
                                        #   in Loop: Header=BB11_27 Depth=2
	jmp	.LBB11_47
.LBB11_40:                              # %if.else155
                                        #   in Loop: Header=BB11_27 Depth=2
	vmovsd	.LCPI11_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB11_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB11_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB11_46
.LBB11_42:                              # %cond.false179
                                        #   in Loop: Header=BB11_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB11_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB11_27 Depth=2
	movl	$127, %eax
	jmp	.LBB11_45
.LBB11_44:                              # %cond.false188
                                        #   in Loop: Header=BB11_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB11_45:                              # %cond.end194
                                        #   in Loop: Header=BB11_27 Depth=2
.LBB11_46:                              # %cond.end196
                                        #   in Loop: Header=BB11_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB11_47:                              # %if.end209
                                        #   in Loop: Header=BB11_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB11_48:                              # %for.cond222
                                        #   Parent Loop BB11_25 Depth=1
                                        #     Parent Loop BB11_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB11_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB11_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB11_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB11_55
.LBB11_51:                              # %cond.false248
                                        #   in Loop: Header=BB11_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB11_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB11_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_54
.LBB11_53:                              # %cond.false270
                                        #   in Loop: Header=BB11_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB11_54:                              # %cond.end288
                                        #   in Loop: Header=BB11_48 Depth=3
.LBB11_55:                              # %cond.end290
                                        #   in Loop: Header=BB11_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB11_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_48
.LBB11_57:                              # %for.end297
                                        #   in Loop: Header=BB11_27 Depth=2
	movl	$0, -12(%rbp)
.LBB11_58:                              # %for.cond298
                                        #   Parent Loop BB11_25 Depth=1
                                        #     Parent Loop BB11_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB11_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB11_58 Depth=3
	movl	$0, -16(%rbp)
.LBB11_60:                              # %for.cond305
                                        #   Parent Loop BB11_25 Depth=1
                                        #     Parent Loop BB11_27 Depth=2
                                        #       Parent Loop BB11_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB11_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB11_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB11_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB11_67
.LBB11_63:                              # %cond.false336
                                        #   in Loop: Header=BB11_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB11_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB11_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_66
.LBB11_65:                              # %cond.false364
                                        #   in Loop: Header=BB11_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB11_66:                              # %cond.end387
                                        #   in Loop: Header=BB11_60 Depth=4
.LBB11_67:                              # %cond.end389
                                        #   in Loop: Header=BB11_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB11_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_60
.LBB11_69:                              # %for.end400
                                        #   in Loop: Header=BB11_58 Depth=3
	jmp	.LBB11_70
.LBB11_70:                              # %for.inc401
                                        #   in Loop: Header=BB11_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_58
.LBB11_71:                              # %for.end403
                                        #   in Loop: Header=BB11_27 Depth=2
	jmp	.LBB11_72
.LBB11_72:                              # %for.inc404
                                        #   in Loop: Header=BB11_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_27
.LBB11_73:                              # %for.end406
                                        #   in Loop: Header=BB11_25 Depth=1
	jmp	.LBB11_74
.LBB11_74:                              # %for.inc407
                                        #   in Loop: Header=BB11_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_25
.LBB11_75:                              # %for.end409
	movl	$0, -8(%rbp)
.LBB11_76:                              # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_78 Depth 2
                                        #       Child Loop BB11_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB11_76 Depth=1
	movl	$0, -24(%rbp)
.LBB11_78:                              # %for.cond415
                                        #   Parent Loop BB11_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB11_80 Depth 3
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB11_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB11_78 Depth=2
	movl	$0, -20(%rbp)
.LBB11_80:                              # %for.cond421
                                        #   Parent Loop BB11_76 Depth=1
                                        #     Parent Loop BB11_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB11_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB11_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB11_80 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB11_80
.LBB11_83:                              # %for.end451
                                        #   in Loop: Header=BB11_78 Depth=2
	jmp	.LBB11_84
.LBB11_84:                              # %for.inc452
                                        #   in Loop: Header=BB11_78 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB11_78
.LBB11_85:                              # %for.end454
                                        #   in Loop: Header=BB11_76 Depth=1
	jmp	.LBB11_86
.LBB11_86:                              # %for.inc455
                                        #   in Loop: Header=BB11_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_76
.LBB11_87:                              # %for.end457
	cmpl	$573641017, -60(%rbp)   # imm = 0x22311139
	jne	.LBB11_89
.LBB11_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB11_88
.Lfunc_end11:
	.size	estimate_weighting_factor_P_slice.8, .Lfunc_end11-estimate_weighting_factor_P_slice.8
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.9
.LCPI12_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.9
	.p2align	4, 0x90
	.type	test_wp_P_slice.9,@function
test_wp_P_slice.9:                      # @test_wp_P_slice.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$494701325, -64(%rbp)   # imm = 0x1D7C8B0D
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB12_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB12_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB12_4
.LBB12_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB12_4
.LBB12_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB12_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_7 Depth 2
                                        #       Child Loop BB12_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB12_5 Depth=1
	movl	$0, -24(%rbp)
.LBB12_7:                               # %for.cond9
                                        #   Parent Loop BB12_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB12_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB12_7 Depth=2
	movl	$0, -12(%rbp)
.LBB12_9:                               # %for.cond14
                                        #   Parent Loop BB12_5 Depth=1
                                        #     Parent Loop BB12_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB12_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB12_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB12_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_9
.LBB12_12:                              # %for.end
                                        #   in Loop: Header=BB12_7 Depth=2
	jmp	.LBB12_13
.LBB12_13:                              # %for.inc41
                                        #   in Loop: Header=BB12_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB12_7
.LBB12_14:                              # %for.end43
                                        #   in Loop: Header=BB12_5 Depth=1
	jmp	.LBB12_15
.LBB12_15:                              # %for.inc44
                                        #   in Loop: Header=BB12_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB12_5
.LBB12_16:                              # %for.end46
	movl	$0, -20(%rbp)
.LBB12_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB12_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB12_17 Depth=1
	movl	$0, -24(%rbp)
.LBB12_19:                              # %for.cond50
                                        #   Parent Loop BB12_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB12_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB12_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB12_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB12_19
.LBB12_22:                              # %for.end60
                                        #   in Loop: Header=BB12_17 Depth=1
	jmp	.LBB12_23
.LBB12_23:                              # %for.inc61
                                        #   in Loop: Header=BB12_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB12_17
.LBB12_24:                              # %for.end63
	movl	$0, -16(%rbp)
.LBB12_25:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_27 Depth 2
                                        #       Child Loop BB12_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB12_25 Depth=1
	movl	$0, -12(%rbp)
.LBB12_27:                              # %for.cond69
                                        #   Parent Loop BB12_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB12_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB12_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB12_29:                              # %for.cond85
                                        #   Parent Loop BB12_25 Depth=1
                                        #     Parent Loop BB12_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB12_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB12_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB12_29
.LBB12_32:                              # %for.end99
                                        #   in Loop: Header=BB12_27 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB12_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB12_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB12_34
	jp	.LBB12_34
	jmp	.LBB12_35
.LBB12_34:                              # %if.then106
                                        #   in Loop: Header=BB12_27 Depth=2
	vmovsd	.LCPI12_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB12_36
.LBB12_35:                              # %if.else
                                        #   in Loop: Header=BB12_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB12_36:                              # %if.end
                                        #   in Loop: Header=BB12_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB12_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB12_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB12_39
.LBB12_38:                              # %if.then137
                                        #   in Loop: Header=BB12_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB12_39:                              # %if.end143
                                        #   in Loop: Header=BB12_27 Depth=2
	jmp	.LBB12_47
.LBB12_40:                              # %if.else144
                                        #   in Loop: Header=BB12_27 Depth=2
	vmovsd	.LCPI12_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB12_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB12_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB12_46
.LBB12_42:                              # %cond.false168
                                        #   in Loop: Header=BB12_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB12_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB12_27 Depth=2
	movl	$127, %eax
	jmp	.LBB12_45
.LBB12_44:                              # %cond.false177
                                        #   in Loop: Header=BB12_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB12_45:                              # %cond.end183
                                        #   in Loop: Header=BB12_27 Depth=2
.LBB12_46:                              # %cond.end185
                                        #   in Loop: Header=BB12_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB12_47:                              # %if.end197
                                        #   in Loop: Header=BB12_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB12_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_27
.LBB12_49:                              # %for.end210
                                        #   in Loop: Header=BB12_25 Depth=1
	jmp	.LBB12_50
.LBB12_50:                              # %for.inc211
                                        #   in Loop: Header=BB12_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_25
.LBB12_51:                              # %for.end213
	movl	$0, -16(%rbp)
.LBB12_52:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_54 Depth 2
                                        #       Child Loop BB12_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB12_52 Depth=1
	movl	$0, -32(%rbp)
.LBB12_54:                              # %for.cond219
                                        #   Parent Loop BB12_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_56 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB12_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB12_54 Depth=2
	movl	$0, -36(%rbp)
.LBB12_56:                              # %for.cond225
                                        #   Parent Loop BB12_52 Depth=1
                                        #     Parent Loop BB12_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -36(%rbp)
	jge	.LBB12_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB12_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB12_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB12_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB12_60
.LBB12_59:                              # %if.then246
                                        #   in Loop: Header=BB12_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB12_63
.LBB12_60:                              # %if.end247
                                        #   in Loop: Header=BB12_56 Depth=3
	jmp	.LBB12_61
.LBB12_61:                              # %for.inc248
                                        #   in Loop: Header=BB12_56 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB12_56
.LBB12_62:                              # %for.end250.loopexit
                                        #   in Loop: Header=BB12_54 Depth=2
	jmp	.LBB12_63
.LBB12_63:                              # %for.end250
                                        #   in Loop: Header=BB12_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB12_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB12_52 Depth=1
	jmp	.LBB12_68
.LBB12_65:                              # %if.end254
                                        #   in Loop: Header=BB12_54 Depth=2
	jmp	.LBB12_66
.LBB12_66:                              # %for.inc255
                                        #   in Loop: Header=BB12_54 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB12_54
.LBB12_67:                              # %for.end257.loopexit
                                        #   in Loop: Header=BB12_52 Depth=1
	jmp	.LBB12_68
.LBB12_68:                              # %for.end257
                                        #   in Loop: Header=BB12_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB12_70
# %bb.69:                               # %if.then260
	jmp	.LBB12_73
.LBB12_70:                              # %if.end261
                                        #   in Loop: Header=BB12_52 Depth=1
	jmp	.LBB12_71
.LBB12_71:                              # %for.inc262
                                        #   in Loop: Header=BB12_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_52
.LBB12_72:                              # %for.end264.loopexit
	jmp	.LBB12_73
.LBB12_73:                              # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$494701325, -64(%rbp)   # imm = 0x1D7C8B0D
	jne	.LBB12_75
.LBB12_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB12_74
.Lfunc_end12:
	.size	test_wp_P_slice.9, .Lfunc_end12-test_wp_P_slice.9
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.10
.LCPI13_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.10
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.10,@function
estimate_weighting_factor_B_slice.10:   # @estimate_weighting_factor_B_slice.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$750413550, -88(%rbp)   # imm = 0x2CBA66EE
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB13_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB13_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB13_4
.LBB13_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB13_4
.LBB13_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB13_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB13_7
.LBB13_6:                               # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB13_7:                               # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB13_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_10 Depth 2
                                        #       Child Loop BB13_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB13_8 Depth=1
	movl	$0, -8(%rbp)
.LBB13_10:                              # %for.cond14
                                        #   Parent Loop BB13_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB13_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB13_10 Depth=2
	movl	$0, -16(%rbp)
.LBB13_12:                              # %for.cond19
                                        #   Parent Loop BB13_8 Depth=1
                                        #     Parent Loop BB13_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB13_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB13_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB13_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_12
.LBB13_15:                              # %for.end
                                        #   in Loop: Header=BB13_10 Depth=2
	jmp	.LBB13_16
.LBB13_16:                              # %for.inc50
                                        #   in Loop: Header=BB13_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_10
.LBB13_17:                              # %for.end52
                                        #   in Loop: Header=BB13_8 Depth=1
	jmp	.LBB13_18
.LBB13_18:                              # %for.inc53
                                        #   in Loop: Header=BB13_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_8
.LBB13_19:                              # %for.end55
	movl	$0, -4(%rbp)
.LBB13_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_22 Depth 2
                                        #       Child Loop BB13_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB13_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB13_20 Depth=1
	movl	$0, -8(%rbp)
.LBB13_22:                              # %for.cond59
                                        #   Parent Loop BB13_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB13_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB13_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB13_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB13_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB13_29
.LBB13_25:                              # %cond.false70
                                        #   in Loop: Header=BB13_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB13_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB13_22 Depth=2
	movl	$127, %eax
	jmp	.LBB13_28
.LBB13_27:                              # %cond.false80
                                        #   in Loop: Header=BB13_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB13_28:                              # %cond.end88
                                        #   in Loop: Header=BB13_22 Depth=2
.LBB13_29:                              # %cond.end90
                                        #   in Loop: Header=BB13_22 Depth=2
	movl	%eax, -64(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB13_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB13_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB13_35
.LBB13_31:                              # %cond.false99
                                        #   in Loop: Header=BB13_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB13_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB13_22 Depth=2
	movl	$127, %eax
	jmp	.LBB13_34
.LBB13_33:                              # %cond.false107
                                        #   in Loop: Header=BB13_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB13_34:                              # %cond.end113
                                        #   in Loop: Header=BB13_22 Depth=2
.LBB13_35:                              # %cond.end115
                                        #   in Loop: Header=BB13_22 Depth=2
	movl	%eax, -60(%rbp)
	movl	$0, -20(%rbp)
.LBB13_36:                              # %for.cond117
                                        #   Parent Loop BB13_20 Depth=1
                                        #     Parent Loop BB13_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB13_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB13_36 Depth=3
	cmpl	$0, -64(%rbp)
	jne	.LBB13_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB13_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB13_49
.LBB13_39:                              # %if.else154
                                        #   in Loop: Header=BB13_36 Depth=3
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-64(%rbp)
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB13_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB13_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB13_45
.LBB13_41:                              # %cond.false160
                                        #   in Loop: Header=BB13_36 Depth=3
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB13_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB13_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB13_44
.LBB13_43:                              # %cond.false166
                                        #   in Loop: Header=BB13_36 Depth=3
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB13_44:                              # %cond.end170
                                        #   in Loop: Header=BB13_36 Depth=3
.LBB13_45:                              # %cond.end172
                                        #   in Loop: Header=BB13_36 Depth=3
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB13_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB13_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB13_48
.LBB13_47:                              # %if.then198
                                        #   in Loop: Header=BB13_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB13_48:                              # %if.end208
                                        #   in Loop: Header=BB13_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB13_49:                              # %if.end238
                                        #   in Loop: Header=BB13_36 Depth=3
	jmp	.LBB13_50
.LBB13_50:                              # %for.inc239
                                        #   in Loop: Header=BB13_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB13_36
.LBB13_51:                              # %for.end241
                                        #   in Loop: Header=BB13_22 Depth=2
	jmp	.LBB13_52
.LBB13_52:                              # %for.inc242
                                        #   in Loop: Header=BB13_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_22
.LBB13_53:                              # %for.end244
                                        #   in Loop: Header=BB13_20 Depth=1
	jmp	.LBB13_54
.LBB13_54:                              # %for.inc245
                                        #   in Loop: Header=BB13_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_20
.LBB13_55:                              # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB13_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB13_57:                              # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_59 Depth 2
                                        #       Child Loop BB13_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB13_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB13_57 Depth=1
	movl	$0, -8(%rbp)
.LBB13_59:                              # %for.cond254
                                        #   Parent Loop BB13_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB13_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB13_59 Depth=2
	movl	$0, -20(%rbp)
.LBB13_61:                              # %for.cond257
                                        #   Parent Loop BB13_57 Depth=1
                                        #     Parent Loop BB13_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB13_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB13_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB13_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB13_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB13_65
.LBB13_64:                              # %cond.false262
                                        #   in Loop: Header=BB13_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB13_65:                              # %cond.end263
                                        #   in Loop: Header=BB13_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -84(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB13_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB13_61
.LBB13_67:                              # %for.end295
                                        #   in Loop: Header=BB13_59 Depth=2
	jmp	.LBB13_68
.LBB13_68:                              # %for.inc296
                                        #   in Loop: Header=BB13_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_59
.LBB13_69:                              # %for.end298
                                        #   in Loop: Header=BB13_57 Depth=1
	jmp	.LBB13_70
.LBB13_70:                              # %for.inc299
                                        #   in Loop: Header=BB13_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_57
.LBB13_71:                              # %for.end301
	movl	$0, -12(%rbp)
.LBB13_72:                              # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB13_72 Depth=1
	movl	$0, -24(%rbp)
.LBB13_74:                              # %for.cond306
                                        #   Parent Loop BB13_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB13_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB13_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB13_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB13_74
.LBB13_77:                              # %for.end346
                                        #   in Loop: Header=BB13_72 Depth=1
	jmp	.LBB13_78
.LBB13_78:                              # %for.inc347
                                        #   in Loop: Header=BB13_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_72
.LBB13_79:                              # %for.end349
	movl	$0, -4(%rbp)
.LBB13_80:                              # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_82 Depth 2
                                        #       Child Loop BB13_84 Depth 3
                                        #       Child Loop BB13_88 Depth 3
                                        #         Child Loop BB13_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB13_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB13_80 Depth=1
	movl	$0, -8(%rbp)
.LBB13_82:                              # %for.cond353
                                        #   Parent Loop BB13_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_84 Depth 3
                                        #       Child Loop BB13_88 Depth 3
                                        #         Child Loop BB13_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB13_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB13_82 Depth=2
	movl	$0, -16(%rbp)
.LBB13_84:                              # %for.cond356
                                        #   Parent Loop BB13_80 Depth=1
                                        #     Parent Loop BB13_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB13_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB13_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_84
.LBB13_87:                              # %for.end380
                                        #   in Loop: Header=BB13_82 Depth=2
	movl	$0, -16(%rbp)
.LBB13_88:                              # %for.cond381
                                        #   Parent Loop BB13_80 Depth=1
                                        #     Parent Loop BB13_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB13_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB13_88 Depth=3
	movl	$0, -32(%rbp)
.LBB13_90:                              # %for.cond387
                                        #   Parent Loop BB13_80 Depth=1
                                        #     Parent Loop BB13_82 Depth=2
                                        #       Parent Loop BB13_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB13_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB13_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB13_90
.LBB13_93:                              # %for.end421
                                        #   in Loop: Header=BB13_88 Depth=3
	jmp	.LBB13_94
.LBB13_94:                              # %for.inc422
                                        #   in Loop: Header=BB13_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_88
.LBB13_95:                              # %for.end424
                                        #   in Loop: Header=BB13_82 Depth=2
	jmp	.LBB13_96
.LBB13_96:                              # %for.inc425
                                        #   in Loop: Header=BB13_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_82
.LBB13_97:                              # %for.end427
                                        #   in Loop: Header=BB13_80 Depth=1
	jmp	.LBB13_98
.LBB13_98:                              # %for.inc428
                                        #   in Loop: Header=BB13_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_80
.LBB13_99:                              # %for.end430
	jmp	.LBB13_189
.LBB13_100:                             # %if.else431
	movl	$0, -4(%rbp)
.LBB13_101:                             # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB13_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB13_101 Depth=1
	movl	$0, -8(%rbp)
.LBB13_103:                             # %for.cond436
                                        #   Parent Loop BB13_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB13_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB13_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB13_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_103
.LBB13_106:                             # %for.end447
                                        #   in Loop: Header=BB13_101 Depth=1
	jmp	.LBB13_107
.LBB13_107:                             # %for.inc448
                                        #   in Loop: Header=BB13_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_101
.LBB13_108:                             # %for.end450
	movl	$0, -12(%rbp)
.LBB13_109:                             # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_111 Depth 2
                                        #       Child Loop BB13_113 Depth 3
                                        #       Child Loop BB13_123 Depth 3
                                        #       Child Loop BB13_133 Depth 3
                                        #         Child Loop BB13_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB13_109 Depth=1
	movl	$0, -16(%rbp)
.LBB13_111:                             # %for.cond456
                                        #   Parent Loop BB13_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_113 Depth 3
                                        #       Child Loop BB13_123 Depth 3
                                        #       Child Loop BB13_133 Depth 3
                                        #         Child Loop BB13_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB13_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB13_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB13_113:                             # %for.cond476
                                        #   Parent Loop BB13_109 Depth=1
                                        #     Parent Loop BB13_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB13_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB13_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_113
.LBB13_116:                             # %for.end493
                                        #   in Loop: Header=BB13_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB13_117
	jp	.LBB13_117
	jmp	.LBB13_118
.LBB13_117:                             # %if.then500
                                        #   in Loop: Header=BB13_111 Depth=2
	vmovsd	.LCPI13_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB13_119
.LBB13_118:                             # %if.else511
                                        #   in Loop: Header=BB13_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB13_119:                             # %if.end513
                                        #   in Loop: Header=BB13_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB13_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB13_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB13_122
.LBB13_121:                             # %if.then519
                                        #   in Loop: Header=BB13_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB13_122:                             # %if.end521
                                        #   in Loop: Header=BB13_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB13_123:                             # %for.cond554
                                        #   Parent Loop BB13_109 Depth=1
                                        #     Parent Loop BB13_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB13_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB13_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB13_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB13_130
.LBB13_126:                             # %cond.false571
                                        #   in Loop: Header=BB13_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB13_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB13_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB13_129
.LBB13_128:                             # %cond.false583
                                        #   in Loop: Header=BB13_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB13_129:                             # %cond.end591
                                        #   in Loop: Header=BB13_123 Depth=3
.LBB13_130:                             # %cond.end593
                                        #   in Loop: Header=BB13_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB13_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_123
.LBB13_132:                             # %for.end600
                                        #   in Loop: Header=BB13_111 Depth=2
	movl	$0, -4(%rbp)
.LBB13_133:                             # %for.cond601
                                        #   Parent Loop BB13_109 Depth=1
                                        #     Parent Loop BB13_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB13_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB13_133 Depth=3
	movl	$0, -8(%rbp)
.LBB13_135:                             # %for.cond608
                                        #   Parent Loop BB13_109 Depth=1
                                        #     Parent Loop BB13_111 Depth=2
                                        #       Parent Loop BB13_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB13_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB13_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB13_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB13_142
.LBB13_138:                             # %cond.false630
                                        #   in Loop: Header=BB13_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB13_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB13_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB13_141
.LBB13_140:                             # %cond.false648
                                        #   in Loop: Header=BB13_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB13_141:                             # %cond.end661
                                        #   in Loop: Header=BB13_135 Depth=4
.LBB13_142:                             # %cond.end663
                                        #   in Loop: Header=BB13_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB13_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_135
.LBB13_144:                             # %for.end675
                                        #   in Loop: Header=BB13_133 Depth=3
	jmp	.LBB13_145
.LBB13_145:                             # %for.inc676
                                        #   in Loop: Header=BB13_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_133
.LBB13_146:                             # %for.end678
                                        #   in Loop: Header=BB13_111 Depth=2
	jmp	.LBB13_147
.LBB13_147:                             # %for.inc679
                                        #   in Loop: Header=BB13_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_111
.LBB13_148:                             # %for.end681
                                        #   in Loop: Header=BB13_109 Depth=1
	jmp	.LBB13_149
.LBB13_149:                             # %for.inc682
                                        #   in Loop: Header=BB13_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_109
.LBB13_150:                             # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB13_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB13_152:                             # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_154 Depth 2
                                        #       Child Loop BB13_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB13_152 Depth=1
	movl	$0, -24(%rbp)
.LBB13_154:                             # %for.cond694
                                        #   Parent Loop BB13_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB13_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB13_154 Depth=2
	movl	$0, -20(%rbp)
.LBB13_156:                             # %for.cond700
                                        #   Parent Loop BB13_152 Depth=1
                                        #     Parent Loop BB13_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB13_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB13_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB13_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB13_156
.LBB13_159:                             # %for.end730
                                        #   in Loop: Header=BB13_154 Depth=2
	jmp	.LBB13_160
.LBB13_160:                             # %for.inc731
                                        #   in Loop: Header=BB13_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB13_154
.LBB13_161:                             # %for.end733
                                        #   in Loop: Header=BB13_152 Depth=1
	jmp	.LBB13_162
.LBB13_162:                             # %for.inc734
                                        #   in Loop: Header=BB13_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_152
.LBB13_163:                             # %for.end736
	jmp	.LBB13_173
.LBB13_164:                             # %if.else737
	movl	$0, -12(%rbp)
.LBB13_165:                             # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB13_165 Depth=1
	movl	$0, -24(%rbp)
.LBB13_167:                             # %for.cond743
                                        #   Parent Loop BB13_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB13_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB13_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB13_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB13_167
.LBB13_170:                             # %for.end784
                                        #   in Loop: Header=BB13_165 Depth=1
	jmp	.LBB13_171
.LBB13_171:                             # %for.inc785
                                        #   in Loop: Header=BB13_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_165
.LBB13_172:                             # %for.end787
	jmp	.LBB13_173
.LBB13_173:                             # %if.end788
	movl	$0, -4(%rbp)
.LBB13_174:                             # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_176 Depth 2
                                        #       Child Loop BB13_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB13_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB13_174 Depth=1
	movl	$0, -8(%rbp)
.LBB13_176:                             # %for.cond793
                                        #   Parent Loop BB13_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB13_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB13_176 Depth=2
	movl	$0, -20(%rbp)
.LBB13_178:                             # %for.cond797
                                        #   Parent Loop BB13_174 Depth=1
                                        #     Parent Loop BB13_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB13_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB13_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB13_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB13_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB13_182
.LBB13_181:                             # %cond.false804
                                        #   in Loop: Header=BB13_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB13_182:                             # %cond.end805
                                        #   in Loop: Header=BB13_178 Depth=3
	movl	%eax, -84(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB13_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB13_178
.LBB13_184:                             # %for.end833
                                        #   in Loop: Header=BB13_176 Depth=2
	jmp	.LBB13_185
.LBB13_185:                             # %for.inc834
                                        #   in Loop: Header=BB13_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_176
.LBB13_186:                             # %for.end836
                                        #   in Loop: Header=BB13_174 Depth=1
	jmp	.LBB13_187
.LBB13_187:                             # %for.inc837
                                        #   in Loop: Header=BB13_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_174
.LBB13_188:                             # %for.end839
	jmp	.LBB13_189
.LBB13_189:                             # %if.end840
	cmpl	$750413550, -88(%rbp)   # imm = 0x2CBA66EE
	jne	.LBB13_191
.LBB13_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_191:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB13_190
.Lfunc_end13:
	.size	estimate_weighting_factor_B_slice.10, .Lfunc_end13-estimate_weighting_factor_B_slice.10
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.11
.LCPI14_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.11
	.p2align	4, 0x90
	.type	test_wp_P_slice.11,@function
test_wp_P_slice.11:                     # @test_wp_P_slice.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$432817440, -64(%rbp)   # imm = 0x19CC4520
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB14_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB14_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB14_4
.LBB14_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB14_4
.LBB14_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB14_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_7 Depth 2
                                        #       Child Loop BB14_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB14_5 Depth=1
	movl	$0, -24(%rbp)
.LBB14_7:                               # %for.cond9
                                        #   Parent Loop BB14_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB14_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB14_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB14_7 Depth=2
	movl	$0, -12(%rbp)
.LBB14_9:                               # %for.cond14
                                        #   Parent Loop BB14_5 Depth=1
                                        #     Parent Loop BB14_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB14_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB14_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB14_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_9
.LBB14_12:                              # %for.end
                                        #   in Loop: Header=BB14_7 Depth=2
	jmp	.LBB14_13
.LBB14_13:                              # %for.inc41
                                        #   in Loop: Header=BB14_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB14_7
.LBB14_14:                              # %for.end43
                                        #   in Loop: Header=BB14_5 Depth=1
	jmp	.LBB14_15
.LBB14_15:                              # %for.inc44
                                        #   in Loop: Header=BB14_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB14_5
.LBB14_16:                              # %for.end46
	movl	$0, -20(%rbp)
.LBB14_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB14_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB14_17 Depth=1
	movl	$0, -24(%rbp)
.LBB14_19:                              # %for.cond50
                                        #   Parent Loop BB14_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB14_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB14_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB14_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB14_19
.LBB14_22:                              # %for.end60
                                        #   in Loop: Header=BB14_17 Depth=1
	jmp	.LBB14_23
.LBB14_23:                              # %for.inc61
                                        #   in Loop: Header=BB14_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB14_17
.LBB14_24:                              # %for.end63
	movl	$0, -16(%rbp)
.LBB14_25:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_27 Depth 2
                                        #       Child Loop BB14_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB14_25 Depth=1
	movl	$0, -12(%rbp)
.LBB14_27:                              # %for.cond69
                                        #   Parent Loop BB14_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB14_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB14_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB14_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB14_29:                              # %for.cond85
                                        #   Parent Loop BB14_25 Depth=1
                                        #     Parent Loop BB14_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB14_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB14_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB14_29
.LBB14_32:                              # %for.end99
                                        #   in Loop: Header=BB14_27 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB14_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB14_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB14_34
	jp	.LBB14_34
	jmp	.LBB14_35
.LBB14_34:                              # %if.then106
                                        #   in Loop: Header=BB14_27 Depth=2
	vmovsd	.LCPI14_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB14_36
.LBB14_35:                              # %if.else
                                        #   in Loop: Header=BB14_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB14_36:                              # %if.end
                                        #   in Loop: Header=BB14_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB14_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB14_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB14_39
.LBB14_38:                              # %if.then137
                                        #   in Loop: Header=BB14_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB14_39:                              # %if.end143
                                        #   in Loop: Header=BB14_27 Depth=2
	jmp	.LBB14_47
.LBB14_40:                              # %if.else144
                                        #   in Loop: Header=BB14_27 Depth=2
	vmovsd	.LCPI14_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB14_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB14_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB14_46
.LBB14_42:                              # %cond.false168
                                        #   in Loop: Header=BB14_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB14_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB14_27 Depth=2
	movl	$127, %eax
	jmp	.LBB14_45
.LBB14_44:                              # %cond.false177
                                        #   in Loop: Header=BB14_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB14_45:                              # %cond.end183
                                        #   in Loop: Header=BB14_27 Depth=2
.LBB14_46:                              # %cond.end185
                                        #   in Loop: Header=BB14_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB14_47:                              # %if.end197
                                        #   in Loop: Header=BB14_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB14_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_27
.LBB14_49:                              # %for.end210
                                        #   in Loop: Header=BB14_25 Depth=1
	jmp	.LBB14_50
.LBB14_50:                              # %for.inc211
                                        #   in Loop: Header=BB14_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_25
.LBB14_51:                              # %for.end213
	movl	$0, -16(%rbp)
.LBB14_52:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_54 Depth 2
                                        #       Child Loop BB14_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB14_52 Depth=1
	movl	$0, -32(%rbp)
.LBB14_54:                              # %for.cond219
                                        #   Parent Loop BB14_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB14_56 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB14_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB14_54 Depth=2
	movl	$0, -36(%rbp)
.LBB14_56:                              # %for.cond225
                                        #   Parent Loop BB14_52 Depth=1
                                        #     Parent Loop BB14_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -36(%rbp)
	jge	.LBB14_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB14_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB14_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB14_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB14_60
.LBB14_59:                              # %if.then246
                                        #   in Loop: Header=BB14_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB14_63
.LBB14_60:                              # %if.end247
                                        #   in Loop: Header=BB14_56 Depth=3
	jmp	.LBB14_61
.LBB14_61:                              # %for.inc248
                                        #   in Loop: Header=BB14_56 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB14_56
.LBB14_62:                              # %for.end250.loopexit
                                        #   in Loop: Header=BB14_54 Depth=2
	jmp	.LBB14_63
.LBB14_63:                              # %for.end250
                                        #   in Loop: Header=BB14_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB14_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB14_52 Depth=1
	jmp	.LBB14_68
.LBB14_65:                              # %if.end254
                                        #   in Loop: Header=BB14_54 Depth=2
	jmp	.LBB14_66
.LBB14_66:                              # %for.inc255
                                        #   in Loop: Header=BB14_54 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB14_54
.LBB14_67:                              # %for.end257.loopexit
                                        #   in Loop: Header=BB14_52 Depth=1
	jmp	.LBB14_68
.LBB14_68:                              # %for.end257
                                        #   in Loop: Header=BB14_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB14_70
# %bb.69:                               # %if.then260
	jmp	.LBB14_73
.LBB14_70:                              # %if.end261
                                        #   in Loop: Header=BB14_52 Depth=1
	jmp	.LBB14_71
.LBB14_71:                              # %for.inc262
                                        #   in Loop: Header=BB14_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_52
.LBB14_72:                              # %for.end264.loopexit
	jmp	.LBB14_73
.LBB14_73:                              # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$432817440, -64(%rbp)   # imm = 0x19CC4520
	jne	.LBB14_75
.LBB14_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB14_74
.Lfunc_end14:
	.size	test_wp_P_slice.11, .Lfunc_end14-test_wp_P_slice.11
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.12
.LCPI15_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.12
	.p2align	4, 0x90
	.type	test_wp_P_slice.12,@function
test_wp_P_slice.12:                     # @test_wp_P_slice.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$1668314599, -60(%rbp)  # imm = 0x637075E7
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB15_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB15_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB15_4
.LBB15_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB15_4
.LBB15_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB15_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_7 Depth 2
                                        #       Child Loop BB15_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB15_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB15_5 Depth=1
	movl	$0, -24(%rbp)
.LBB15_7:                               # %for.cond9
                                        #   Parent Loop BB15_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB15_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB15_7 Depth=2
	movl	$0, -12(%rbp)
.LBB15_9:                               # %for.cond14
                                        #   Parent Loop BB15_5 Depth=1
                                        #     Parent Loop BB15_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB15_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB15_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB15_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_9
.LBB15_12:                              # %for.end
                                        #   in Loop: Header=BB15_7 Depth=2
	jmp	.LBB15_13
.LBB15_13:                              # %for.inc41
                                        #   in Loop: Header=BB15_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB15_7
.LBB15_14:                              # %for.end43
                                        #   in Loop: Header=BB15_5 Depth=1
	jmp	.LBB15_15
.LBB15_15:                              # %for.inc44
                                        #   in Loop: Header=BB15_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB15_5
.LBB15_16:                              # %for.end46
	movl	$0, -20(%rbp)
.LBB15_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB15_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB15_17 Depth=1
	movl	$0, -24(%rbp)
.LBB15_19:                              # %for.cond50
                                        #   Parent Loop BB15_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB15_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB15_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB15_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB15_19
.LBB15_22:                              # %for.end60
                                        #   in Loop: Header=BB15_17 Depth=1
	jmp	.LBB15_23
.LBB15_23:                              # %for.inc61
                                        #   in Loop: Header=BB15_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB15_17
.LBB15_24:                              # %for.end63
	movl	$0, -16(%rbp)
.LBB15_25:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_27 Depth 2
                                        #       Child Loop BB15_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB15_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB15_25 Depth=1
	movl	$0, -12(%rbp)
.LBB15_27:                              # %for.cond69
                                        #   Parent Loop BB15_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB15_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB15_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB15_29:                              # %for.cond85
                                        #   Parent Loop BB15_25 Depth=1
                                        #     Parent Loop BB15_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB15_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB15_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB15_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB15_29
.LBB15_32:                              # %for.end99
                                        #   in Loop: Header=BB15_27 Depth=2
	cmpl	$0, -64(%rbp)
	jne	.LBB15_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB15_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB15_34
	jp	.LBB15_34
	jmp	.LBB15_35
.LBB15_34:                              # %if.then106
                                        #   in Loop: Header=BB15_27 Depth=2
	vmovsd	.LCPI15_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB15_36
.LBB15_35:                              # %if.else
                                        #   in Loop: Header=BB15_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB15_36:                              # %if.end
                                        #   in Loop: Header=BB15_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB15_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB15_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB15_39
.LBB15_38:                              # %if.then137
                                        #   in Loop: Header=BB15_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB15_39:                              # %if.end143
                                        #   in Loop: Header=BB15_27 Depth=2
	jmp	.LBB15_47
.LBB15_40:                              # %if.else144
                                        #   in Loop: Header=BB15_27 Depth=2
	vmovsd	.LCPI15_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB15_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB15_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB15_46
.LBB15_42:                              # %cond.false168
                                        #   in Loop: Header=BB15_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB15_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB15_27 Depth=2
	movl	$127, %eax
	jmp	.LBB15_45
.LBB15_44:                              # %cond.false177
                                        #   in Loop: Header=BB15_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB15_45:                              # %cond.end183
                                        #   in Loop: Header=BB15_27 Depth=2
.LBB15_46:                              # %cond.end185
                                        #   in Loop: Header=BB15_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB15_47:                              # %if.end197
                                        #   in Loop: Header=BB15_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB15_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_27
.LBB15_49:                              # %for.end210
                                        #   in Loop: Header=BB15_25 Depth=1
	jmp	.LBB15_50
.LBB15_50:                              # %for.inc211
                                        #   in Loop: Header=BB15_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_25
.LBB15_51:                              # %for.end213
	movl	$0, -16(%rbp)
.LBB15_52:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_54 Depth 2
                                        #       Child Loop BB15_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB15_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB15_52 Depth=1
	movl	$0, -36(%rbp)
.LBB15_54:                              # %for.cond219
                                        #   Parent Loop BB15_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_56 Depth 3
	movl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB15_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB15_54 Depth=2
	movl	$0, -32(%rbp)
.LBB15_56:                              # %for.cond225
                                        #   Parent Loop BB15_52 Depth=1
                                        #     Parent Loop BB15_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB15_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB15_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB15_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB15_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB15_60
.LBB15_59:                              # %if.then246
                                        #   in Loop: Header=BB15_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB15_63
.LBB15_60:                              # %if.end247
                                        #   in Loop: Header=BB15_56 Depth=3
	jmp	.LBB15_61
.LBB15_61:                              # %for.inc248
                                        #   in Loop: Header=BB15_56 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB15_56
.LBB15_62:                              # %for.end250.loopexit
                                        #   in Loop: Header=BB15_54 Depth=2
	jmp	.LBB15_63
.LBB15_63:                              # %for.end250
                                        #   in Loop: Header=BB15_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB15_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB15_52 Depth=1
	jmp	.LBB15_68
.LBB15_65:                              # %if.end254
                                        #   in Loop: Header=BB15_54 Depth=2
	jmp	.LBB15_66
.LBB15_66:                              # %for.inc255
                                        #   in Loop: Header=BB15_54 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB15_54
.LBB15_67:                              # %for.end257.loopexit
                                        #   in Loop: Header=BB15_52 Depth=1
	jmp	.LBB15_68
.LBB15_68:                              # %for.end257
                                        #   in Loop: Header=BB15_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB15_70
# %bb.69:                               # %if.then260
	jmp	.LBB15_73
.LBB15_70:                              # %if.end261
                                        #   in Loop: Header=BB15_52 Depth=1
	jmp	.LBB15_71
.LBB15_71:                              # %for.inc262
                                        #   in Loop: Header=BB15_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_52
.LBB15_72:                              # %for.end264.loopexit
	jmp	.LBB15_73
.LBB15_73:                              # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$1668314599, -60(%rbp)  # imm = 0x637075E7
	jne	.LBB15_75
.LBB15_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB15_74
.Lfunc_end15:
	.size	test_wp_P_slice.12, .Lfunc_end15-test_wp_P_slice.12
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.13
.LCPI16_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.13
	.p2align	4, 0x90
	.type	test_wp_P_slice.13,@function
test_wp_P_slice.13:                     # @test_wp_P_slice.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$1610827782, -64(%rbp)  # imm = 0x60034806
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB16_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB16_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB16_4
.LBB16_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB16_4
.LBB16_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB16_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_7 Depth 2
                                        #       Child Loop BB16_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB16_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB16_5 Depth=1
	movl	$0, -24(%rbp)
.LBB16_7:                               # %for.cond9
                                        #   Parent Loop BB16_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB16_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB16_7 Depth=2
	movl	$0, -12(%rbp)
.LBB16_9:                               # %for.cond14
                                        #   Parent Loop BB16_5 Depth=1
                                        #     Parent Loop BB16_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB16_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB16_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB16_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_9
.LBB16_12:                              # %for.end
                                        #   in Loop: Header=BB16_7 Depth=2
	jmp	.LBB16_13
.LBB16_13:                              # %for.inc41
                                        #   in Loop: Header=BB16_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB16_7
.LBB16_14:                              # %for.end43
                                        #   in Loop: Header=BB16_5 Depth=1
	jmp	.LBB16_15
.LBB16_15:                              # %for.inc44
                                        #   in Loop: Header=BB16_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB16_5
.LBB16_16:                              # %for.end46
	movl	$0, -20(%rbp)
.LBB16_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB16_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB16_17 Depth=1
	movl	$0, -24(%rbp)
.LBB16_19:                              # %for.cond50
                                        #   Parent Loop BB16_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB16_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB16_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB16_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB16_19
.LBB16_22:                              # %for.end60
                                        #   in Loop: Header=BB16_17 Depth=1
	jmp	.LBB16_23
.LBB16_23:                              # %for.inc61
                                        #   in Loop: Header=BB16_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB16_17
.LBB16_24:                              # %for.end63
	movl	$0, -16(%rbp)
.LBB16_25:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_27 Depth 2
                                        #       Child Loop BB16_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB16_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB16_25 Depth=1
	movl	$0, -12(%rbp)
.LBB16_27:                              # %for.cond69
                                        #   Parent Loop BB16_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB16_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB16_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB16_29:                              # %for.cond85
                                        #   Parent Loop BB16_25 Depth=1
                                        #     Parent Loop BB16_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB16_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB16_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB16_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB16_29
.LBB16_32:                              # %for.end99
                                        #   in Loop: Header=BB16_27 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB16_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB16_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB16_34
	jp	.LBB16_34
	jmp	.LBB16_35
.LBB16_34:                              # %if.then106
                                        #   in Loop: Header=BB16_27 Depth=2
	vmovsd	.LCPI16_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB16_36
.LBB16_35:                              # %if.else
                                        #   in Loop: Header=BB16_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB16_36:                              # %if.end
                                        #   in Loop: Header=BB16_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB16_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB16_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB16_39
.LBB16_38:                              # %if.then137
                                        #   in Loop: Header=BB16_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB16_39:                              # %if.end143
                                        #   in Loop: Header=BB16_27 Depth=2
	jmp	.LBB16_47
.LBB16_40:                              # %if.else144
                                        #   in Loop: Header=BB16_27 Depth=2
	vmovsd	.LCPI16_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB16_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB16_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB16_46
.LBB16_42:                              # %cond.false168
                                        #   in Loop: Header=BB16_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB16_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB16_27 Depth=2
	movl	$127, %eax
	jmp	.LBB16_45
.LBB16_44:                              # %cond.false177
                                        #   in Loop: Header=BB16_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB16_45:                              # %cond.end183
                                        #   in Loop: Header=BB16_27 Depth=2
.LBB16_46:                              # %cond.end185
                                        #   in Loop: Header=BB16_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB16_47:                              # %if.end197
                                        #   in Loop: Header=BB16_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB16_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_27
.LBB16_49:                              # %for.end210
                                        #   in Loop: Header=BB16_25 Depth=1
	jmp	.LBB16_50
.LBB16_50:                              # %for.inc211
                                        #   in Loop: Header=BB16_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_25
.LBB16_51:                              # %for.end213
	movl	$0, -16(%rbp)
.LBB16_52:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_54 Depth 2
                                        #       Child Loop BB16_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB16_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB16_52 Depth=1
	movl	$0, -32(%rbp)
.LBB16_54:                              # %for.cond219
                                        #   Parent Loop BB16_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_56 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB16_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB16_54 Depth=2
	movl	$0, -36(%rbp)
.LBB16_56:                              # %for.cond225
                                        #   Parent Loop BB16_52 Depth=1
                                        #     Parent Loop BB16_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -36(%rbp)
	jge	.LBB16_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB16_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB16_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB16_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB16_60
.LBB16_59:                              # %if.then246
                                        #   in Loop: Header=BB16_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB16_63
.LBB16_60:                              # %if.end247
                                        #   in Loop: Header=BB16_56 Depth=3
	jmp	.LBB16_61
.LBB16_61:                              # %for.inc248
                                        #   in Loop: Header=BB16_56 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB16_56
.LBB16_62:                              # %for.end250.loopexit
                                        #   in Loop: Header=BB16_54 Depth=2
	jmp	.LBB16_63
.LBB16_63:                              # %for.end250
                                        #   in Loop: Header=BB16_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB16_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB16_52 Depth=1
	jmp	.LBB16_68
.LBB16_65:                              # %if.end254
                                        #   in Loop: Header=BB16_54 Depth=2
	jmp	.LBB16_66
.LBB16_66:                              # %for.inc255
                                        #   in Loop: Header=BB16_54 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB16_54
.LBB16_67:                              # %for.end257.loopexit
                                        #   in Loop: Header=BB16_52 Depth=1
	jmp	.LBB16_68
.LBB16_68:                              # %for.end257
                                        #   in Loop: Header=BB16_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB16_70
# %bb.69:                               # %if.then260
	jmp	.LBB16_73
.LBB16_70:                              # %if.end261
                                        #   in Loop: Header=BB16_52 Depth=1
	jmp	.LBB16_71
.LBB16_71:                              # %for.inc262
                                        #   in Loop: Header=BB16_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_52
.LBB16_72:                              # %for.end264.loopexit
	jmp	.LBB16_73
.LBB16_73:                              # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$1610827782, -64(%rbp)  # imm = 0x60034806
	jne	.LBB16_75
.LBB16_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB16_74
.Lfunc_end16:
	.size	test_wp_P_slice.13, .Lfunc_end16-test_wp_P_slice.13
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.14
.LCPI17_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.14
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.14,@function
estimate_weighting_factor_B_slice.14:   # @estimate_weighting_factor_B_slice.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$1253207128, -88(%rbp)  # imm = 0x4AB26C58
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB17_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB17_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB17_4
.LBB17_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB17_4
.LBB17_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB17_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB17_7
.LBB17_6:                               # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB17_7:                               # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB17_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_10 Depth 2
                                        #       Child Loop BB17_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB17_8 Depth=1
	movl	$0, -8(%rbp)
.LBB17_10:                              # %for.cond14
                                        #   Parent Loop BB17_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB17_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB17_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB17_10 Depth=2
	movl	$0, -16(%rbp)
.LBB17_12:                              # %for.cond19
                                        #   Parent Loop BB17_8 Depth=1
                                        #     Parent Loop BB17_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB17_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB17_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB17_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_12
.LBB17_15:                              # %for.end
                                        #   in Loop: Header=BB17_10 Depth=2
	jmp	.LBB17_16
.LBB17_16:                              # %for.inc50
                                        #   in Loop: Header=BB17_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_10
.LBB17_17:                              # %for.end52
                                        #   in Loop: Header=BB17_8 Depth=1
	jmp	.LBB17_18
.LBB17_18:                              # %for.inc53
                                        #   in Loop: Header=BB17_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_8
.LBB17_19:                              # %for.end55
	movl	$0, -4(%rbp)
.LBB17_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_22 Depth 2
                                        #       Child Loop BB17_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB17_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB17_20 Depth=1
	movl	$0, -8(%rbp)
.LBB17_22:                              # %for.cond59
                                        #   Parent Loop BB17_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB17_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB17_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB17_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB17_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB17_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB17_29
.LBB17_25:                              # %cond.false70
                                        #   in Loop: Header=BB17_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB17_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB17_22 Depth=2
	movl	$127, %eax
	jmp	.LBB17_28
.LBB17_27:                              # %cond.false80
                                        #   in Loop: Header=BB17_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB17_28:                              # %cond.end88
                                        #   in Loop: Header=BB17_22 Depth=2
.LBB17_29:                              # %cond.end90
                                        #   in Loop: Header=BB17_22 Depth=2
	movl	%eax, -64(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB17_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB17_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB17_35
.LBB17_31:                              # %cond.false99
                                        #   in Loop: Header=BB17_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB17_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB17_22 Depth=2
	movl	$127, %eax
	jmp	.LBB17_34
.LBB17_33:                              # %cond.false107
                                        #   in Loop: Header=BB17_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB17_34:                              # %cond.end113
                                        #   in Loop: Header=BB17_22 Depth=2
.LBB17_35:                              # %cond.end115
                                        #   in Loop: Header=BB17_22 Depth=2
	movl	%eax, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB17_36:                              # %for.cond117
                                        #   Parent Loop BB17_20 Depth=1
                                        #     Parent Loop BB17_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB17_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB17_36 Depth=3
	cmpl	$0, -64(%rbp)
	jne	.LBB17_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB17_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB17_49
.LBB17_39:                              # %if.else154
                                        #   in Loop: Header=BB17_36 Depth=3
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-64(%rbp)
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB17_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB17_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB17_45
.LBB17_41:                              # %cond.false160
                                        #   in Loop: Header=BB17_36 Depth=3
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB17_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB17_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB17_44
.LBB17_43:                              # %cond.false166
                                        #   in Loop: Header=BB17_36 Depth=3
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB17_44:                              # %cond.end170
                                        #   in Loop: Header=BB17_36 Depth=3
.LBB17_45:                              # %cond.end172
                                        #   in Loop: Header=BB17_36 Depth=3
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB17_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB17_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB17_48
.LBB17_47:                              # %if.then198
                                        #   in Loop: Header=BB17_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB17_48:                              # %if.end208
                                        #   in Loop: Header=BB17_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB17_49:                              # %if.end238
                                        #   in Loop: Header=BB17_36 Depth=3
	jmp	.LBB17_50
.LBB17_50:                              # %for.inc239
                                        #   in Loop: Header=BB17_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB17_36
.LBB17_51:                              # %for.end241
                                        #   in Loop: Header=BB17_22 Depth=2
	jmp	.LBB17_52
.LBB17_52:                              # %for.inc242
                                        #   in Loop: Header=BB17_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_22
.LBB17_53:                              # %for.end244
                                        #   in Loop: Header=BB17_20 Depth=1
	jmp	.LBB17_54
.LBB17_54:                              # %for.inc245
                                        #   in Loop: Header=BB17_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_20
.LBB17_55:                              # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB17_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB17_57:                              # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_59 Depth 2
                                        #       Child Loop BB17_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB17_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB17_57 Depth=1
	movl	$0, -8(%rbp)
.LBB17_59:                              # %for.cond254
                                        #   Parent Loop BB17_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB17_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB17_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB17_59 Depth=2
	movl	$0, -20(%rbp)
.LBB17_61:                              # %for.cond257
                                        #   Parent Loop BB17_57 Depth=1
                                        #     Parent Loop BB17_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB17_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB17_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB17_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB17_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB17_65
.LBB17_64:                              # %cond.false262
                                        #   in Loop: Header=BB17_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB17_65:                              # %cond.end263
                                        #   in Loop: Header=BB17_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -84(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB17_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB17_61
.LBB17_67:                              # %for.end295
                                        #   in Loop: Header=BB17_59 Depth=2
	jmp	.LBB17_68
.LBB17_68:                              # %for.inc296
                                        #   in Loop: Header=BB17_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_59
.LBB17_69:                              # %for.end298
                                        #   in Loop: Header=BB17_57 Depth=1
	jmp	.LBB17_70
.LBB17_70:                              # %for.inc299
                                        #   in Loop: Header=BB17_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_57
.LBB17_71:                              # %for.end301
	movl	$0, -12(%rbp)
.LBB17_72:                              # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	$0, -24(%rbp)
.LBB17_74:                              # %for.cond306
                                        #   Parent Loop BB17_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB17_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB17_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB17_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB17_74
.LBB17_77:                              # %for.end346
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_78
.LBB17_78:                              # %for.inc347
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_72
.LBB17_79:                              # %for.end349
	movl	$0, -4(%rbp)
.LBB17_80:                              # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_82 Depth 2
                                        #       Child Loop BB17_84 Depth 3
                                        #       Child Loop BB17_88 Depth 3
                                        #         Child Loop BB17_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB17_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB17_80 Depth=1
	movl	$0, -8(%rbp)
.LBB17_82:                              # %for.cond353
                                        #   Parent Loop BB17_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB17_84 Depth 3
                                        #       Child Loop BB17_88 Depth 3
                                        #         Child Loop BB17_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB17_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB17_82 Depth=2
	movl	$0, -16(%rbp)
.LBB17_84:                              # %for.cond356
                                        #   Parent Loop BB17_80 Depth=1
                                        #     Parent Loop BB17_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB17_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB17_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_84
.LBB17_87:                              # %for.end380
                                        #   in Loop: Header=BB17_82 Depth=2
	movl	$0, -16(%rbp)
.LBB17_88:                              # %for.cond381
                                        #   Parent Loop BB17_80 Depth=1
                                        #     Parent Loop BB17_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB17_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB17_88 Depth=3
	movl	$0, -32(%rbp)
.LBB17_90:                              # %for.cond387
                                        #   Parent Loop BB17_80 Depth=1
                                        #     Parent Loop BB17_82 Depth=2
                                        #       Parent Loop BB17_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB17_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB17_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB17_90
.LBB17_93:                              # %for.end421
                                        #   in Loop: Header=BB17_88 Depth=3
	jmp	.LBB17_94
.LBB17_94:                              # %for.inc422
                                        #   in Loop: Header=BB17_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_88
.LBB17_95:                              # %for.end424
                                        #   in Loop: Header=BB17_82 Depth=2
	jmp	.LBB17_96
.LBB17_96:                              # %for.inc425
                                        #   in Loop: Header=BB17_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_82
.LBB17_97:                              # %for.end427
                                        #   in Loop: Header=BB17_80 Depth=1
	jmp	.LBB17_98
.LBB17_98:                              # %for.inc428
                                        #   in Loop: Header=BB17_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_80
.LBB17_99:                              # %for.end430
	jmp	.LBB17_189
.LBB17_100:                             # %if.else431
	movl	$0, -4(%rbp)
.LBB17_101:                             # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB17_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB17_101 Depth=1
	movl	$0, -8(%rbp)
.LBB17_103:                             # %for.cond436
                                        #   Parent Loop BB17_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB17_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB17_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB17_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_103
.LBB17_106:                             # %for.end447
                                        #   in Loop: Header=BB17_101 Depth=1
	jmp	.LBB17_107
.LBB17_107:                             # %for.inc448
                                        #   in Loop: Header=BB17_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_101
.LBB17_108:                             # %for.end450
	movl	$0, -12(%rbp)
.LBB17_109:                             # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_111 Depth 2
                                        #       Child Loop BB17_113 Depth 3
                                        #       Child Loop BB17_123 Depth 3
                                        #       Child Loop BB17_133 Depth 3
                                        #         Child Loop BB17_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB17_109 Depth=1
	movl	$0, -16(%rbp)
.LBB17_111:                             # %for.cond456
                                        #   Parent Loop BB17_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB17_113 Depth 3
                                        #       Child Loop BB17_123 Depth 3
                                        #       Child Loop BB17_133 Depth 3
                                        #         Child Loop BB17_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB17_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB17_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB17_113:                             # %for.cond476
                                        #   Parent Loop BB17_109 Depth=1
                                        #     Parent Loop BB17_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB17_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB17_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_113
.LBB17_116:                             # %for.end493
                                        #   in Loop: Header=BB17_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB17_117
	jp	.LBB17_117
	jmp	.LBB17_118
.LBB17_117:                             # %if.then500
                                        #   in Loop: Header=BB17_111 Depth=2
	vmovsd	.LCPI17_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB17_119
.LBB17_118:                             # %if.else511
                                        #   in Loop: Header=BB17_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB17_119:                             # %if.end513
                                        #   in Loop: Header=BB17_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB17_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB17_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB17_122
.LBB17_121:                             # %if.then519
                                        #   in Loop: Header=BB17_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB17_122:                             # %if.end521
                                        #   in Loop: Header=BB17_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB17_123:                             # %for.cond554
                                        #   Parent Loop BB17_109 Depth=1
                                        #     Parent Loop BB17_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB17_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB17_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB17_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB17_130
.LBB17_126:                             # %cond.false571
                                        #   in Loop: Header=BB17_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB17_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB17_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB17_129
.LBB17_128:                             # %cond.false583
                                        #   in Loop: Header=BB17_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB17_129:                             # %cond.end591
                                        #   in Loop: Header=BB17_123 Depth=3
.LBB17_130:                             # %cond.end593
                                        #   in Loop: Header=BB17_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB17_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_123
.LBB17_132:                             # %for.end600
                                        #   in Loop: Header=BB17_111 Depth=2
	movl	$0, -4(%rbp)
.LBB17_133:                             # %for.cond601
                                        #   Parent Loop BB17_109 Depth=1
                                        #     Parent Loop BB17_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB17_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB17_133 Depth=3
	movl	$0, -8(%rbp)
.LBB17_135:                             # %for.cond608
                                        #   Parent Loop BB17_109 Depth=1
                                        #     Parent Loop BB17_111 Depth=2
                                        #       Parent Loop BB17_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB17_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB17_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB17_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB17_142
.LBB17_138:                             # %cond.false630
                                        #   in Loop: Header=BB17_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB17_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB17_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB17_141
.LBB17_140:                             # %cond.false648
                                        #   in Loop: Header=BB17_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB17_141:                             # %cond.end661
                                        #   in Loop: Header=BB17_135 Depth=4
.LBB17_142:                             # %cond.end663
                                        #   in Loop: Header=BB17_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB17_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_135
.LBB17_144:                             # %for.end675
                                        #   in Loop: Header=BB17_133 Depth=3
	jmp	.LBB17_145
.LBB17_145:                             # %for.inc676
                                        #   in Loop: Header=BB17_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_133
.LBB17_146:                             # %for.end678
                                        #   in Loop: Header=BB17_111 Depth=2
	jmp	.LBB17_147
.LBB17_147:                             # %for.inc679
                                        #   in Loop: Header=BB17_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_111
.LBB17_148:                             # %for.end681
                                        #   in Loop: Header=BB17_109 Depth=1
	jmp	.LBB17_149
.LBB17_149:                             # %for.inc682
                                        #   in Loop: Header=BB17_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_109
.LBB17_150:                             # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB17_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB17_152:                             # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_154 Depth 2
                                        #       Child Loop BB17_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB17_152 Depth=1
	movl	$0, -24(%rbp)
.LBB17_154:                             # %for.cond694
                                        #   Parent Loop BB17_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB17_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB17_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB17_154 Depth=2
	movl	$0, -20(%rbp)
.LBB17_156:                             # %for.cond700
                                        #   Parent Loop BB17_152 Depth=1
                                        #     Parent Loop BB17_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB17_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB17_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB17_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB17_156
.LBB17_159:                             # %for.end730
                                        #   in Loop: Header=BB17_154 Depth=2
	jmp	.LBB17_160
.LBB17_160:                             # %for.inc731
                                        #   in Loop: Header=BB17_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB17_154
.LBB17_161:                             # %for.end733
                                        #   in Loop: Header=BB17_152 Depth=1
	jmp	.LBB17_162
.LBB17_162:                             # %for.inc734
                                        #   in Loop: Header=BB17_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_152
.LBB17_163:                             # %for.end736
	jmp	.LBB17_173
.LBB17_164:                             # %if.else737
	movl	$0, -12(%rbp)
.LBB17_165:                             # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB17_165 Depth=1
	movl	$0, -24(%rbp)
.LBB17_167:                             # %for.cond743
                                        #   Parent Loop BB17_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB17_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB17_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB17_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB17_167
.LBB17_170:                             # %for.end784
                                        #   in Loop: Header=BB17_165 Depth=1
	jmp	.LBB17_171
.LBB17_171:                             # %for.inc785
                                        #   in Loop: Header=BB17_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_165
.LBB17_172:                             # %for.end787
	jmp	.LBB17_173
.LBB17_173:                             # %if.end788
	movl	$0, -4(%rbp)
.LBB17_174:                             # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_176 Depth 2
                                        #       Child Loop BB17_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB17_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB17_174 Depth=1
	movl	$0, -8(%rbp)
.LBB17_176:                             # %for.cond793
                                        #   Parent Loop BB17_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB17_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB17_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB17_176 Depth=2
	movl	$0, -20(%rbp)
.LBB17_178:                             # %for.cond797
                                        #   Parent Loop BB17_174 Depth=1
                                        #     Parent Loop BB17_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB17_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB17_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB17_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB17_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB17_182
.LBB17_181:                             # %cond.false804
                                        #   in Loop: Header=BB17_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB17_182:                             # %cond.end805
                                        #   in Loop: Header=BB17_178 Depth=3
	movl	%eax, -84(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB17_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB17_178
.LBB17_184:                             # %for.end833
                                        #   in Loop: Header=BB17_176 Depth=2
	jmp	.LBB17_185
.LBB17_185:                             # %for.inc834
                                        #   in Loop: Header=BB17_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_176
.LBB17_186:                             # %for.end836
                                        #   in Loop: Header=BB17_174 Depth=1
	jmp	.LBB17_187
.LBB17_187:                             # %for.inc837
                                        #   in Loop: Header=BB17_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_174
.LBB17_188:                             # %for.end839
	jmp	.LBB17_189
.LBB17_189:                             # %if.end840
	cmpl	$1253207128, -88(%rbp)  # imm = 0x4AB26C58
	jne	.LBB17_191
.LBB17_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_191:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB17_190
.Lfunc_end17:
	.size	estimate_weighting_factor_B_slice.14, .Lfunc_end17-estimate_weighting_factor_B_slice.14
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.15
.LCPI18_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.15
	.p2align	4, 0x90
	.type	test_wp_B_slice.15,@function
test_wp_B_slice.15:                     # @test_wp_B_slice.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$1360773832, -84(%rbp)  # imm = 0x511BC2C8
	movl	%edi, -80(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB18_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB18_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB18_4
.LBB18_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB18_4
.LBB18_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -36(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB18_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_7 Depth 2
                                        #       Child Loop BB18_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB18_5 Depth=1
	movl	$0, -24(%rbp)
.LBB18_7:                               # %for.cond9
                                        #   Parent Loop BB18_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB18_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB18_7 Depth=2
	movl	$0, -32(%rbp)
.LBB18_9:                               # %for.cond14
                                        #   Parent Loop BB18_5 Depth=1
                                        #     Parent Loop BB18_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB18_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB18_9 Depth=3
	movl	-36(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-36(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB18_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB18_9
.LBB18_12:                              # %for.end
                                        #   in Loop: Header=BB18_7 Depth=2
	jmp	.LBB18_13
.LBB18_13:                              # %for.inc41
                                        #   in Loop: Header=BB18_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB18_7
.LBB18_14:                              # %for.end43
                                        #   in Loop: Header=BB18_5 Depth=1
	jmp	.LBB18_15
.LBB18_15:                              # %for.inc44
                                        #   in Loop: Header=BB18_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_5
.LBB18_16:                              # %for.end46
	movl	$0, -12(%rbp)
.LBB18_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_19 Depth 2
                                        #       Child Loop BB18_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB18_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB18_17 Depth=1
	movl	$0, -24(%rbp)
.LBB18_19:                              # %for.cond50
                                        #   Parent Loop BB18_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB18_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB18_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB18_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB18_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB18_26
.LBB18_22:                              # %cond.false61
                                        #   in Loop: Header=BB18_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB18_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB18_19 Depth=2
	movl	$127, %eax
	jmp	.LBB18_25
.LBB18_24:                              # %cond.false71
                                        #   in Loop: Header=BB18_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB18_25:                              # %cond.end79
                                        #   in Loop: Header=BB18_19 Depth=2
.LBB18_26:                              # %cond.end81
                                        #   in Loop: Header=BB18_19 Depth=2
	movl	%eax, -56(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB18_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB18_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB18_32
.LBB18_28:                              # %cond.false90
                                        #   in Loop: Header=BB18_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB18_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB18_19 Depth=2
	movl	$127, %eax
	jmp	.LBB18_31
.LBB18_30:                              # %cond.false98
                                        #   in Loop: Header=BB18_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB18_31:                              # %cond.end104
                                        #   in Loop: Header=BB18_19 Depth=2
.LBB18_32:                              # %cond.end106
                                        #   in Loop: Header=BB18_19 Depth=2
	movl	%eax, -60(%rbp)
	movl	$0, -20(%rbp)
.LBB18_33:                              # %for.cond108
                                        #   Parent Loop BB18_17 Depth=1
                                        #     Parent Loop BB18_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB18_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB18_33 Depth=3
	cmpl	$0, -56(%rbp)
	jne	.LBB18_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB18_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB18_46
.LBB18_36:                              # %if.else
                                        #   in Loop: Header=BB18_33 Depth=3
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-56(%rbp)
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB18_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB18_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB18_42
.LBB18_38:                              # %cond.false145
                                        #   in Loop: Header=BB18_33 Depth=3
	movl	-52(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB18_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB18_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB18_41
.LBB18_40:                              # %cond.false151
                                        #   in Loop: Header=BB18_33 Depth=3
	movl	-52(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB18_41:                              # %cond.end155
                                        #   in Loop: Header=BB18_33 Depth=3
.LBB18_42:                              # %cond.end157
                                        #   in Loop: Header=BB18_33 Depth=3
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB18_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB18_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB18_45
.LBB18_44:                              # %if.then183
                                        #   in Loop: Header=BB18_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB18_45:                              # %if.end
                                        #   in Loop: Header=BB18_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB18_46:                              # %if.end220
                                        #   in Loop: Header=BB18_33 Depth=3
	jmp	.LBB18_47
.LBB18_47:                              # %for.inc221
                                        #   in Loop: Header=BB18_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB18_33
.LBB18_48:                              # %for.end223
                                        #   in Loop: Header=BB18_19 Depth=2
	jmp	.LBB18_49
.LBB18_49:                              # %for.inc224
                                        #   in Loop: Header=BB18_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB18_19
.LBB18_50:                              # %for.end226
                                        #   in Loop: Header=BB18_17 Depth=1
	jmp	.LBB18_51
.LBB18_51:                              # %for.inc227
                                        #   in Loop: Header=BB18_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_17
.LBB18_52:                              # %for.end229
	cmpl	$1, -80(%rbp)
	jne	.LBB18_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB18_54:                              # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_56 Depth 2
                                        #       Child Loop BB18_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB18_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB18_54 Depth=1
	movl	$0, -24(%rbp)
.LBB18_56:                              # %for.cond235
                                        #   Parent Loop BB18_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB18_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB18_56 Depth=2
	movl	$0, -20(%rbp)
.LBB18_58:                              # %for.cond238
                                        #   Parent Loop BB18_54 Depth=1
                                        #     Parent Loop BB18_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB18_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB18_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB18_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB18_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB18_62
.LBB18_61:                              # %cond.false243
                                        #   in Loop: Header=BB18_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB18_62:                              # %cond.end244
                                        #   in Loop: Header=BB18_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -88(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB18_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB18_58
.LBB18_64:                              # %for.end276
                                        #   in Loop: Header=BB18_56 Depth=2
	jmp	.LBB18_65
.LBB18_65:                              # %for.inc277
                                        #   in Loop: Header=BB18_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB18_56
.LBB18_66:                              # %for.end279
                                        #   in Loop: Header=BB18_54 Depth=1
	jmp	.LBB18_67
.LBB18_67:                              # %for.inc280
                                        #   in Loop: Header=BB18_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_54
.LBB18_68:                              # %for.end282
	movl	$0, -16(%rbp)
.LBB18_69:                              # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB18_69 Depth=1
	movl	$0, -28(%rbp)
.LBB18_71:                              # %for.cond287
                                        #   Parent Loop BB18_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB18_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB18_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB18_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB18_71
.LBB18_74:                              # %for.end327
                                        #   in Loop: Header=BB18_69 Depth=1
	jmp	.LBB18_75
.LBB18_75:                              # %for.inc328
                                        #   in Loop: Header=BB18_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_69
.LBB18_76:                              # %for.end330
	jmp	.LBB18_142
.LBB18_77:                              # %if.else331
	movl	$0, -12(%rbp)
.LBB18_78:                              # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB18_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB18_78 Depth=1
	movl	$0, -24(%rbp)
.LBB18_80:                              # %for.cond335
                                        #   Parent Loop BB18_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB18_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB18_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB18_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB18_80
.LBB18_83:                              # %for.end345
                                        #   in Loop: Header=BB18_78 Depth=1
	jmp	.LBB18_84
.LBB18_84:                              # %for.inc346
                                        #   in Loop: Header=BB18_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_78
.LBB18_85:                              # %for.end348
	movl	$0, -16(%rbp)
.LBB18_86:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_88 Depth 2
                                        #       Child Loop BB18_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB18_86 Depth=1
	movl	$0, -32(%rbp)
.LBB18_88:                              # %for.cond354
                                        #   Parent Loop BB18_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB18_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB18_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB18_90:                              # %for.cond372
                                        #   Parent Loop BB18_86 Depth=1
                                        #     Parent Loop BB18_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB18_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB18_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_90
.LBB18_93:                              # %for.end389
                                        #   in Loop: Header=BB18_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB18_94
	jp	.LBB18_94
	jmp	.LBB18_95
.LBB18_94:                              # %if.then396
                                        #   in Loop: Header=BB18_88 Depth=2
	vmovsd	.LCPI18_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB18_96
.LBB18_95:                              # %if.else406
                                        #   in Loop: Header=BB18_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB18_96:                              # %if.end407
                                        #   in Loop: Header=BB18_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB18_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB18_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB18_99
.LBB18_98:                              # %if.then413
                                        #   in Loop: Header=BB18_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB18_99:                              # %if.end414
                                        #   in Loop: Header=BB18_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB18_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB18_88
.LBB18_101:                             # %for.end447
                                        #   in Loop: Header=BB18_86 Depth=1
	jmp	.LBB18_102
.LBB18_102:                             # %for.inc448
                                        #   in Loop: Header=BB18_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_86
.LBB18_103:                             # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB18_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB18_105:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_107 Depth 2
                                        #       Child Loop BB18_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB18_105 Depth=1
	movl	$0, -28(%rbp)
.LBB18_107:                             # %for.cond459
                                        #   Parent Loop BB18_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB18_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB18_107 Depth=2
	movl	$0, -20(%rbp)
.LBB18_109:                             # %for.cond465
                                        #   Parent Loop BB18_105 Depth=1
                                        #     Parent Loop BB18_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB18_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB18_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB18_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB18_109
.LBB18_112:                             # %for.end495
                                        #   in Loop: Header=BB18_107 Depth=2
	jmp	.LBB18_113
.LBB18_113:                             # %for.inc496
                                        #   in Loop: Header=BB18_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB18_107
.LBB18_114:                             # %for.end498
                                        #   in Loop: Header=BB18_105 Depth=1
	jmp	.LBB18_115
.LBB18_115:                             # %for.inc499
                                        #   in Loop: Header=BB18_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_105
.LBB18_116:                             # %for.end501
	jmp	.LBB18_126
.LBB18_117:                             # %if.else502
	movl	$0, -16(%rbp)
.LBB18_118:                             # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB18_118 Depth=1
	movl	$0, -28(%rbp)
.LBB18_120:                             # %for.cond508
                                        #   Parent Loop BB18_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB18_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB18_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB18_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB18_120
.LBB18_123:                             # %for.end549
                                        #   in Loop: Header=BB18_118 Depth=1
	jmp	.LBB18_124
.LBB18_124:                             # %for.inc550
                                        #   in Loop: Header=BB18_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_118
.LBB18_125:                             # %for.end552
	jmp	.LBB18_126
.LBB18_126:                             # %if.end553
	movl	$0, -12(%rbp)
.LBB18_127:                             # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_129 Depth 2
                                        #       Child Loop BB18_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB18_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB18_127 Depth=1
	movl	$0, -24(%rbp)
.LBB18_129:                             # %for.cond558
                                        #   Parent Loop BB18_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB18_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB18_129 Depth=2
	movl	$0, -20(%rbp)
.LBB18_131:                             # %for.cond562
                                        #   Parent Loop BB18_127 Depth=1
                                        #     Parent Loop BB18_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB18_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB18_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB18_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB18_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB18_135
.LBB18_134:                             # %cond.false569
                                        #   in Loop: Header=BB18_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB18_135:                             # %cond.end570
                                        #   in Loop: Header=BB18_131 Depth=3
	movl	%eax, -88(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB18_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB18_131
.LBB18_137:                             # %for.end598
                                        #   in Loop: Header=BB18_129 Depth=2
	jmp	.LBB18_138
.LBB18_138:                             # %for.inc599
                                        #   in Loop: Header=BB18_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB18_129
.LBB18_139:                             # %for.end601
                                        #   in Loop: Header=BB18_127 Depth=1
	jmp	.LBB18_140
.LBB18_140:                             # %for.inc602
                                        #   in Loop: Header=BB18_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_127
.LBB18_141:                             # %for.end604
	jmp	.LBB18_142
.LBB18_142:                             # %if.end605
	movl	$0, -16(%rbp)
.LBB18_143:                             # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_145 Depth 2
                                        #       Child Loop BB18_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB18_143 Depth=1
	movl	$0, -28(%rbp)
.LBB18_145:                             # %for.cond611
                                        #   Parent Loop BB18_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB18_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB18_145 Depth=2
	movl	$0, -20(%rbp)
.LBB18_147:                             # %for.cond617
                                        #   Parent Loop BB18_143 Depth=1
                                        #     Parent Loop BB18_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB18_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB18_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB18_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB18_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB18_151
.LBB18_150:                             # %if.then638
                                        #   in Loop: Header=BB18_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB18_154
.LBB18_151:                             # %if.end639
                                        #   in Loop: Header=BB18_147 Depth=3
	jmp	.LBB18_152
.LBB18_152:                             # %for.inc640
                                        #   in Loop: Header=BB18_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB18_147
.LBB18_153:                             # %for.end642.loopexit
                                        #   in Loop: Header=BB18_145 Depth=2
	jmp	.LBB18_154
.LBB18_154:                             # %for.end642
                                        #   in Loop: Header=BB18_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB18_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB18_143 Depth=1
	jmp	.LBB18_159
.LBB18_156:                             # %if.end646
                                        #   in Loop: Header=BB18_145 Depth=2
	jmp	.LBB18_157
.LBB18_157:                             # %for.inc647
                                        #   in Loop: Header=BB18_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB18_145
.LBB18_158:                             # %for.end649.loopexit
                                        #   in Loop: Header=BB18_143 Depth=1
	jmp	.LBB18_159
.LBB18_159:                             # %for.end649
                                        #   in Loop: Header=BB18_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB18_161
# %bb.160:                              # %if.then652
	jmp	.LBB18_164
.LBB18_161:                             # %if.end653
                                        #   in Loop: Header=BB18_143 Depth=1
	jmp	.LBB18_162
.LBB18_162:                             # %for.inc654
                                        #   in Loop: Header=BB18_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_143
.LBB18_163:                             # %for.end656.loopexit
	jmp	.LBB18_164
.LBB18_164:                             # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$1360773832, -84(%rbp)  # imm = 0x511BC2C8
	jne	.LBB18_166
.LBB18_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_166:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB18_165
.Lfunc_end18:
	.size	test_wp_B_slice.15, .Lfunc_end18-test_wp_B_slice.15
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.16
.LCPI19_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.16
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.16,@function
estimate_weighting_factor_P_slice.16:   # @estimate_weighting_factor_P_slice.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$2107133858, -60(%rbp)  # imm = 0x7D984FA2
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB19_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB19_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB19_4
.LBB19_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB19_4
.LBB19_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB19_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_7 Depth 2
                                        #       Child Loop BB19_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB19_5 Depth=1
	movl	$0, -16(%rbp)
.LBB19_7:                               # %for.cond12
                                        #   Parent Loop BB19_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB19_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB19_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB19_7 Depth=2
	movl	$0, -4(%rbp)
.LBB19_9:                               # %for.cond17
                                        #   Parent Loop BB19_5 Depth=1
                                        #     Parent Loop BB19_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB19_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB19_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB19_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_9
.LBB19_12:                              # %for.end
                                        #   in Loop: Header=BB19_7 Depth=2
	jmp	.LBB19_13
.LBB19_13:                              # %for.inc48
                                        #   in Loop: Header=BB19_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB19_7
.LBB19_14:                              # %for.end50
                                        #   in Loop: Header=BB19_5 Depth=1
	jmp	.LBB19_15
.LBB19_15:                              # %for.inc51
                                        #   in Loop: Header=BB19_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB19_5
.LBB19_16:                              # %for.end53
	movl	$0, -12(%rbp)
.LBB19_17:                              # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB19_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB19_17 Depth=1
	movl	$0, -16(%rbp)
.LBB19_19:                              # %for.cond57
                                        #   Parent Loop BB19_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB19_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB19_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB19_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB19_19
.LBB19_22:                              # %for.end67
                                        #   in Loop: Header=BB19_17 Depth=1
	jmp	.LBB19_23
.LBB19_23:                              # %for.inc68
                                        #   in Loop: Header=BB19_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB19_17
.LBB19_24:                              # %for.end70
	movl	$0, -8(%rbp)
.LBB19_25:                              # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_27 Depth 2
                                        #       Child Loop BB19_29 Depth 3
                                        #       Child Loop BB19_48 Depth 3
                                        #       Child Loop BB19_58 Depth 3
                                        #         Child Loop BB19_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB19_25 Depth=1
	movl	$0, -4(%rbp)
.LBB19_27:                              # %for.cond76
                                        #   Parent Loop BB19_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB19_29 Depth 3
                                        #       Child Loop BB19_48 Depth 3
                                        #       Child Loop BB19_58 Depth 3
                                        #         Child Loop BB19_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB19_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB19_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -48(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB19_29:                              # %for.cond92
                                        #   Parent Loop BB19_25 Depth=1
                                        #     Parent Loop BB19_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB19_29 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB19_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB19_29
.LBB19_32:                              # %for.end106
                                        #   in Loop: Header=BB19_27 Depth=2
	vcvtsi2sdl	-64(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB19_40
	jp	.LBB19_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB19_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB19_34
	jp	.LBB19_34
	jmp	.LBB19_35
.LBB19_34:                              # %if.then114
                                        #   in Loop: Header=BB19_27 Depth=2
	vmovsd	.LCPI19_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB19_36
.LBB19_35:                              # %if.else
                                        #   in Loop: Header=BB19_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB19_36:                              # %if.end
                                        #   in Loop: Header=BB19_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB19_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB19_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB19_39
.LBB19_38:                              # %if.then147
                                        #   in Loop: Header=BB19_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB19_39:                              # %if.end154
                                        #   in Loop: Header=BB19_27 Depth=2
	jmp	.LBB19_47
.LBB19_40:                              # %if.else155
                                        #   in Loop: Header=BB19_27 Depth=2
	vmovsd	.LCPI19_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB19_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB19_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB19_46
.LBB19_42:                              # %cond.false179
                                        #   in Loop: Header=BB19_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB19_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB19_27 Depth=2
	movl	$127, %eax
	jmp	.LBB19_45
.LBB19_44:                              # %cond.false188
                                        #   in Loop: Header=BB19_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB19_45:                              # %cond.end194
                                        #   in Loop: Header=BB19_27 Depth=2
.LBB19_46:                              # %cond.end196
                                        #   in Loop: Header=BB19_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB19_47:                              # %if.end209
                                        #   in Loop: Header=BB19_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB19_48:                              # %for.cond222
                                        #   Parent Loop BB19_25 Depth=1
                                        #     Parent Loop BB19_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB19_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB19_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB19_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB19_55
.LBB19_51:                              # %cond.false248
                                        #   in Loop: Header=BB19_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB19_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB19_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB19_54
.LBB19_53:                              # %cond.false270
                                        #   in Loop: Header=BB19_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB19_54:                              # %cond.end288
                                        #   in Loop: Header=BB19_48 Depth=3
.LBB19_55:                              # %cond.end290
                                        #   in Loop: Header=BB19_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB19_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB19_48
.LBB19_57:                              # %for.end297
                                        #   in Loop: Header=BB19_27 Depth=2
	movl	$0, -12(%rbp)
.LBB19_58:                              # %for.cond298
                                        #   Parent Loop BB19_25 Depth=1
                                        #     Parent Loop BB19_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB19_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB19_58 Depth=3
	movl	$0, -16(%rbp)
.LBB19_60:                              # %for.cond305
                                        #   Parent Loop BB19_25 Depth=1
                                        #     Parent Loop BB19_27 Depth=2
                                        #       Parent Loop BB19_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB19_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB19_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB19_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB19_67
.LBB19_63:                              # %cond.false336
                                        #   in Loop: Header=BB19_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB19_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB19_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB19_66
.LBB19_65:                              # %cond.false364
                                        #   in Loop: Header=BB19_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB19_66:                              # %cond.end387
                                        #   in Loop: Header=BB19_60 Depth=4
.LBB19_67:                              # %cond.end389
                                        #   in Loop: Header=BB19_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB19_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB19_60
.LBB19_69:                              # %for.end400
                                        #   in Loop: Header=BB19_58 Depth=3
	jmp	.LBB19_70
.LBB19_70:                              # %for.inc401
                                        #   in Loop: Header=BB19_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB19_58
.LBB19_71:                              # %for.end403
                                        #   in Loop: Header=BB19_27 Depth=2
	jmp	.LBB19_72
.LBB19_72:                              # %for.inc404
                                        #   in Loop: Header=BB19_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_27
.LBB19_73:                              # %for.end406
                                        #   in Loop: Header=BB19_25 Depth=1
	jmp	.LBB19_74
.LBB19_74:                              # %for.inc407
                                        #   in Loop: Header=BB19_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_25
.LBB19_75:                              # %for.end409
	movl	$0, -8(%rbp)
.LBB19_76:                              # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_78 Depth 2
                                        #       Child Loop BB19_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB19_76 Depth=1
	movl	$0, -24(%rbp)
.LBB19_78:                              # %for.cond415
                                        #   Parent Loop BB19_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB19_80 Depth 3
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB19_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB19_78 Depth=2
	movl	$0, -20(%rbp)
.LBB19_80:                              # %for.cond421
                                        #   Parent Loop BB19_76 Depth=1
                                        #     Parent Loop BB19_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB19_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB19_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB19_80 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB19_80
.LBB19_83:                              # %for.end451
                                        #   in Loop: Header=BB19_78 Depth=2
	jmp	.LBB19_84
.LBB19_84:                              # %for.inc452
                                        #   in Loop: Header=BB19_78 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB19_78
.LBB19_85:                              # %for.end454
                                        #   in Loop: Header=BB19_76 Depth=1
	jmp	.LBB19_86
.LBB19_86:                              # %for.inc455
                                        #   in Loop: Header=BB19_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_76
.LBB19_87:                              # %for.end457
	cmpl	$2107133858, -60(%rbp)  # imm = 0x7D984FA2
	jne	.LBB19_89
.LBB19_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB19_88
.Lfunc_end19:
	.size	estimate_weighting_factor_P_slice.16, .Lfunc_end19-estimate_weighting_factor_P_slice.16
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.17
.LCPI20_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.17
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.17,@function
estimate_weighting_factor_B_slice.17:   # @estimate_weighting_factor_B_slice.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$2141515502, -88(%rbp)  # imm = 0x7FA4EEEE
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB20_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB20_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB20_4
.LBB20_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB20_4
.LBB20_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB20_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB20_7
.LBB20_6:                               # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB20_7:                               # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB20_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_10 Depth 2
                                        #       Child Loop BB20_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB20_8 Depth=1
	movl	$0, -8(%rbp)
.LBB20_10:                              # %for.cond14
                                        #   Parent Loop BB20_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB20_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB20_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB20_10 Depth=2
	movl	$0, -16(%rbp)
.LBB20_12:                              # %for.cond19
                                        #   Parent Loop BB20_8 Depth=1
                                        #     Parent Loop BB20_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB20_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB20_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB20_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_12
.LBB20_15:                              # %for.end
                                        #   in Loop: Header=BB20_10 Depth=2
	jmp	.LBB20_16
.LBB20_16:                              # %for.inc50
                                        #   in Loop: Header=BB20_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_10
.LBB20_17:                              # %for.end52
                                        #   in Loop: Header=BB20_8 Depth=1
	jmp	.LBB20_18
.LBB20_18:                              # %for.inc53
                                        #   in Loop: Header=BB20_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_8
.LBB20_19:                              # %for.end55
	movl	$0, -4(%rbp)
.LBB20_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_22 Depth 2
                                        #       Child Loop BB20_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB20_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB20_20 Depth=1
	movl	$0, -8(%rbp)
.LBB20_22:                              # %for.cond59
                                        #   Parent Loop BB20_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB20_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB20_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB20_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB20_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB20_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB20_29
.LBB20_25:                              # %cond.false70
                                        #   in Loop: Header=BB20_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB20_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB20_22 Depth=2
	movl	$127, %eax
	jmp	.LBB20_28
.LBB20_27:                              # %cond.false80
                                        #   in Loop: Header=BB20_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB20_28:                              # %cond.end88
                                        #   in Loop: Header=BB20_22 Depth=2
.LBB20_29:                              # %cond.end90
                                        #   in Loop: Header=BB20_22 Depth=2
	movl	%eax, -56(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB20_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB20_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB20_35
.LBB20_31:                              # %cond.false99
                                        #   in Loop: Header=BB20_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB20_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB20_22 Depth=2
	movl	$127, %eax
	jmp	.LBB20_34
.LBB20_33:                              # %cond.false107
                                        #   in Loop: Header=BB20_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB20_34:                              # %cond.end113
                                        #   in Loop: Header=BB20_22 Depth=2
.LBB20_35:                              # %cond.end115
                                        #   in Loop: Header=BB20_22 Depth=2
	movl	%eax, -60(%rbp)
	movl	$0, -20(%rbp)
.LBB20_36:                              # %for.cond117
                                        #   Parent Loop BB20_20 Depth=1
                                        #     Parent Loop BB20_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB20_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB20_36 Depth=3
	cmpl	$0, -56(%rbp)
	jne	.LBB20_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB20_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB20_49
.LBB20_39:                              # %if.else154
                                        #   in Loop: Header=BB20_36 Depth=3
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-56(%rbp)
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB20_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB20_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB20_45
.LBB20_41:                              # %cond.false160
                                        #   in Loop: Header=BB20_36 Depth=3
	movl	-64(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB20_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB20_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB20_44
.LBB20_43:                              # %cond.false166
                                        #   in Loop: Header=BB20_36 Depth=3
	movl	-64(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB20_44:                              # %cond.end170
                                        #   in Loop: Header=BB20_36 Depth=3
.LBB20_45:                              # %cond.end172
                                        #   in Loop: Header=BB20_36 Depth=3
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB20_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB20_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB20_48
.LBB20_47:                              # %if.then198
                                        #   in Loop: Header=BB20_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB20_48:                              # %if.end208
                                        #   in Loop: Header=BB20_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB20_49:                              # %if.end238
                                        #   in Loop: Header=BB20_36 Depth=3
	jmp	.LBB20_50
.LBB20_50:                              # %for.inc239
                                        #   in Loop: Header=BB20_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB20_36
.LBB20_51:                              # %for.end241
                                        #   in Loop: Header=BB20_22 Depth=2
	jmp	.LBB20_52
.LBB20_52:                              # %for.inc242
                                        #   in Loop: Header=BB20_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_22
.LBB20_53:                              # %for.end244
                                        #   in Loop: Header=BB20_20 Depth=1
	jmp	.LBB20_54
.LBB20_54:                              # %for.inc245
                                        #   in Loop: Header=BB20_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_20
.LBB20_55:                              # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB20_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB20_57:                              # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_59 Depth 2
                                        #       Child Loop BB20_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB20_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB20_57 Depth=1
	movl	$0, -8(%rbp)
.LBB20_59:                              # %for.cond254
                                        #   Parent Loop BB20_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB20_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB20_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB20_59 Depth=2
	movl	$0, -20(%rbp)
.LBB20_61:                              # %for.cond257
                                        #   Parent Loop BB20_57 Depth=1
                                        #     Parent Loop BB20_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB20_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB20_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB20_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB20_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB20_65
.LBB20_64:                              # %cond.false262
                                        #   in Loop: Header=BB20_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB20_65:                              # %cond.end263
                                        #   in Loop: Header=BB20_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -92(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB20_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB20_61
.LBB20_67:                              # %for.end295
                                        #   in Loop: Header=BB20_59 Depth=2
	jmp	.LBB20_68
.LBB20_68:                              # %for.inc296
                                        #   in Loop: Header=BB20_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_59
.LBB20_69:                              # %for.end298
                                        #   in Loop: Header=BB20_57 Depth=1
	jmp	.LBB20_70
.LBB20_70:                              # %for.inc299
                                        #   in Loop: Header=BB20_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_57
.LBB20_71:                              # %for.end301
	movl	$0, -12(%rbp)
.LBB20_72:                              # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB20_72 Depth=1
	movl	$0, -24(%rbp)
.LBB20_74:                              # %for.cond306
                                        #   Parent Loop BB20_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB20_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB20_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB20_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB20_74
.LBB20_77:                              # %for.end346
                                        #   in Loop: Header=BB20_72 Depth=1
	jmp	.LBB20_78
.LBB20_78:                              # %for.inc347
                                        #   in Loop: Header=BB20_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_72
.LBB20_79:                              # %for.end349
	movl	$0, -4(%rbp)
.LBB20_80:                              # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_82 Depth 2
                                        #       Child Loop BB20_84 Depth 3
                                        #       Child Loop BB20_88 Depth 3
                                        #         Child Loop BB20_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB20_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB20_80 Depth=1
	movl	$0, -8(%rbp)
.LBB20_82:                              # %for.cond353
                                        #   Parent Loop BB20_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB20_84 Depth 3
                                        #       Child Loop BB20_88 Depth 3
                                        #         Child Loop BB20_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB20_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB20_82 Depth=2
	movl	$0, -16(%rbp)
.LBB20_84:                              # %for.cond356
                                        #   Parent Loop BB20_80 Depth=1
                                        #     Parent Loop BB20_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB20_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB20_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_84
.LBB20_87:                              # %for.end380
                                        #   in Loop: Header=BB20_82 Depth=2
	movl	$0, -16(%rbp)
.LBB20_88:                              # %for.cond381
                                        #   Parent Loop BB20_80 Depth=1
                                        #     Parent Loop BB20_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB20_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB20_88 Depth=3
	movl	$0, -32(%rbp)
.LBB20_90:                              # %for.cond387
                                        #   Parent Loop BB20_80 Depth=1
                                        #     Parent Loop BB20_82 Depth=2
                                        #       Parent Loop BB20_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB20_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB20_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB20_90
.LBB20_93:                              # %for.end421
                                        #   in Loop: Header=BB20_88 Depth=3
	jmp	.LBB20_94
.LBB20_94:                              # %for.inc422
                                        #   in Loop: Header=BB20_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_88
.LBB20_95:                              # %for.end424
                                        #   in Loop: Header=BB20_82 Depth=2
	jmp	.LBB20_96
.LBB20_96:                              # %for.inc425
                                        #   in Loop: Header=BB20_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_82
.LBB20_97:                              # %for.end427
                                        #   in Loop: Header=BB20_80 Depth=1
	jmp	.LBB20_98
.LBB20_98:                              # %for.inc428
                                        #   in Loop: Header=BB20_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_80
.LBB20_99:                              # %for.end430
	jmp	.LBB20_189
.LBB20_100:                             # %if.else431
	movl	$0, -4(%rbp)
.LBB20_101:                             # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB20_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB20_101 Depth=1
	movl	$0, -8(%rbp)
.LBB20_103:                             # %for.cond436
                                        #   Parent Loop BB20_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB20_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB20_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB20_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_103
.LBB20_106:                             # %for.end447
                                        #   in Loop: Header=BB20_101 Depth=1
	jmp	.LBB20_107
.LBB20_107:                             # %for.inc448
                                        #   in Loop: Header=BB20_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_101
.LBB20_108:                             # %for.end450
	movl	$0, -12(%rbp)
.LBB20_109:                             # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_111 Depth 2
                                        #       Child Loop BB20_113 Depth 3
                                        #       Child Loop BB20_123 Depth 3
                                        #       Child Loop BB20_133 Depth 3
                                        #         Child Loop BB20_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB20_109 Depth=1
	movl	$0, -16(%rbp)
.LBB20_111:                             # %for.cond456
                                        #   Parent Loop BB20_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB20_113 Depth 3
                                        #       Child Loop BB20_123 Depth 3
                                        #       Child Loop BB20_133 Depth 3
                                        #         Child Loop BB20_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB20_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB20_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB20_113:                             # %for.cond476
                                        #   Parent Loop BB20_109 Depth=1
                                        #     Parent Loop BB20_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB20_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB20_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_113
.LBB20_116:                             # %for.end493
                                        #   in Loop: Header=BB20_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB20_117
	jp	.LBB20_117
	jmp	.LBB20_118
.LBB20_117:                             # %if.then500
                                        #   in Loop: Header=BB20_111 Depth=2
	vmovsd	.LCPI20_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB20_119
.LBB20_118:                             # %if.else511
                                        #   in Loop: Header=BB20_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB20_119:                             # %if.end513
                                        #   in Loop: Header=BB20_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB20_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB20_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB20_122
.LBB20_121:                             # %if.then519
                                        #   in Loop: Header=BB20_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB20_122:                             # %if.end521
                                        #   in Loop: Header=BB20_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB20_123:                             # %for.cond554
                                        #   Parent Loop BB20_109 Depth=1
                                        #     Parent Loop BB20_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB20_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB20_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB20_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB20_130
.LBB20_126:                             # %cond.false571
                                        #   in Loop: Header=BB20_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB20_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB20_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB20_129
.LBB20_128:                             # %cond.false583
                                        #   in Loop: Header=BB20_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB20_129:                             # %cond.end591
                                        #   in Loop: Header=BB20_123 Depth=3
.LBB20_130:                             # %cond.end593
                                        #   in Loop: Header=BB20_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB20_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_123
.LBB20_132:                             # %for.end600
                                        #   in Loop: Header=BB20_111 Depth=2
	movl	$0, -4(%rbp)
.LBB20_133:                             # %for.cond601
                                        #   Parent Loop BB20_109 Depth=1
                                        #     Parent Loop BB20_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB20_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB20_133 Depth=3
	movl	$0, -8(%rbp)
.LBB20_135:                             # %for.cond608
                                        #   Parent Loop BB20_109 Depth=1
                                        #     Parent Loop BB20_111 Depth=2
                                        #       Parent Loop BB20_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB20_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB20_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB20_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB20_142
.LBB20_138:                             # %cond.false630
                                        #   in Loop: Header=BB20_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB20_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB20_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB20_141
.LBB20_140:                             # %cond.false648
                                        #   in Loop: Header=BB20_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB20_141:                             # %cond.end661
                                        #   in Loop: Header=BB20_135 Depth=4
.LBB20_142:                             # %cond.end663
                                        #   in Loop: Header=BB20_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB20_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_135
.LBB20_144:                             # %for.end675
                                        #   in Loop: Header=BB20_133 Depth=3
	jmp	.LBB20_145
.LBB20_145:                             # %for.inc676
                                        #   in Loop: Header=BB20_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_133
.LBB20_146:                             # %for.end678
                                        #   in Loop: Header=BB20_111 Depth=2
	jmp	.LBB20_147
.LBB20_147:                             # %for.inc679
                                        #   in Loop: Header=BB20_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_111
.LBB20_148:                             # %for.end681
                                        #   in Loop: Header=BB20_109 Depth=1
	jmp	.LBB20_149
.LBB20_149:                             # %for.inc682
                                        #   in Loop: Header=BB20_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_109
.LBB20_150:                             # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB20_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB20_152:                             # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_154 Depth 2
                                        #       Child Loop BB20_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB20_152 Depth=1
	movl	$0, -24(%rbp)
.LBB20_154:                             # %for.cond694
                                        #   Parent Loop BB20_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB20_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB20_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB20_154 Depth=2
	movl	$0, -20(%rbp)
.LBB20_156:                             # %for.cond700
                                        #   Parent Loop BB20_152 Depth=1
                                        #     Parent Loop BB20_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB20_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB20_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB20_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB20_156
.LBB20_159:                             # %for.end730
                                        #   in Loop: Header=BB20_154 Depth=2
	jmp	.LBB20_160
.LBB20_160:                             # %for.inc731
                                        #   in Loop: Header=BB20_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB20_154
.LBB20_161:                             # %for.end733
                                        #   in Loop: Header=BB20_152 Depth=1
	jmp	.LBB20_162
.LBB20_162:                             # %for.inc734
                                        #   in Loop: Header=BB20_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_152
.LBB20_163:                             # %for.end736
	jmp	.LBB20_173
.LBB20_164:                             # %if.else737
	movl	$0, -12(%rbp)
.LBB20_165:                             # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB20_165 Depth=1
	movl	$0, -24(%rbp)
.LBB20_167:                             # %for.cond743
                                        #   Parent Loop BB20_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB20_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB20_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB20_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB20_167
.LBB20_170:                             # %for.end784
                                        #   in Loop: Header=BB20_165 Depth=1
	jmp	.LBB20_171
.LBB20_171:                             # %for.inc785
                                        #   in Loop: Header=BB20_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_165
.LBB20_172:                             # %for.end787
	jmp	.LBB20_173
.LBB20_173:                             # %if.end788
	movl	$0, -4(%rbp)
.LBB20_174:                             # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_176 Depth 2
                                        #       Child Loop BB20_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB20_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB20_174 Depth=1
	movl	$0, -8(%rbp)
.LBB20_176:                             # %for.cond793
                                        #   Parent Loop BB20_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB20_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB20_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB20_176 Depth=2
	movl	$0, -20(%rbp)
.LBB20_178:                             # %for.cond797
                                        #   Parent Loop BB20_174 Depth=1
                                        #     Parent Loop BB20_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB20_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB20_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB20_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB20_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB20_182
.LBB20_181:                             # %cond.false804
                                        #   in Loop: Header=BB20_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB20_182:                             # %cond.end805
                                        #   in Loop: Header=BB20_178 Depth=3
	movl	%eax, -92(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB20_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB20_178
.LBB20_184:                             # %for.end833
                                        #   in Loop: Header=BB20_176 Depth=2
	jmp	.LBB20_185
.LBB20_185:                             # %for.inc834
                                        #   in Loop: Header=BB20_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_176
.LBB20_186:                             # %for.end836
                                        #   in Loop: Header=BB20_174 Depth=1
	jmp	.LBB20_187
.LBB20_187:                             # %for.inc837
                                        #   in Loop: Header=BB20_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_174
.LBB20_188:                             # %for.end839
	jmp	.LBB20_189
.LBB20_189:                             # %if.end840
	cmpl	$2141515502, -88(%rbp)  # imm = 0x7FA4EEEE
	jne	.LBB20_191
.LBB20_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_191:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB20_190
.Lfunc_end20:
	.size	estimate_weighting_factor_B_slice.17, .Lfunc_end20-estimate_weighting_factor_B_slice.17
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.18
.LCPI21_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.18
	.p2align	4, 0x90
	.type	test_wp_P_slice.18,@function
test_wp_P_slice.18:                     # @test_wp_P_slice.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$1451222933, -60(%rbp)  # imm = 0x567FE795
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB21_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB21_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB21_4
.LBB21_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB21_4
.LBB21_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB21_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_7 Depth 2
                                        #       Child Loop BB21_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB21_5 Depth=1
	movl	$0, -24(%rbp)
.LBB21_7:                               # %for.cond9
                                        #   Parent Loop BB21_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB21_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB21_7 Depth=2
	movl	$0, -12(%rbp)
.LBB21_9:                               # %for.cond14
                                        #   Parent Loop BB21_5 Depth=1
                                        #     Parent Loop BB21_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB21_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB21_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB21_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_9
.LBB21_12:                              # %for.end
                                        #   in Loop: Header=BB21_7 Depth=2
	jmp	.LBB21_13
.LBB21_13:                              # %for.inc41
                                        #   in Loop: Header=BB21_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB21_7
.LBB21_14:                              # %for.end43
                                        #   in Loop: Header=BB21_5 Depth=1
	jmp	.LBB21_15
.LBB21_15:                              # %for.inc44
                                        #   in Loop: Header=BB21_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB21_5
.LBB21_16:                              # %for.end46
	movl	$0, -20(%rbp)
.LBB21_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB21_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB21_17 Depth=1
	movl	$0, -24(%rbp)
.LBB21_19:                              # %for.cond50
                                        #   Parent Loop BB21_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB21_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB21_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB21_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB21_19
.LBB21_22:                              # %for.end60
                                        #   in Loop: Header=BB21_17 Depth=1
	jmp	.LBB21_23
.LBB21_23:                              # %for.inc61
                                        #   in Loop: Header=BB21_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB21_17
.LBB21_24:                              # %for.end63
	movl	$0, -16(%rbp)
.LBB21_25:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_27 Depth 2
                                        #       Child Loop BB21_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB21_25 Depth=1
	movl	$0, -12(%rbp)
.LBB21_27:                              # %for.cond69
                                        #   Parent Loop BB21_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB21_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB21_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB21_29:                              # %for.cond85
                                        #   Parent Loop BB21_25 Depth=1
                                        #     Parent Loop BB21_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB21_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB21_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB21_29
.LBB21_32:                              # %for.end99
                                        #   in Loop: Header=BB21_27 Depth=2
	cmpl	$0, -64(%rbp)
	jne	.LBB21_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB21_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB21_34
	jp	.LBB21_34
	jmp	.LBB21_35
.LBB21_34:                              # %if.then106
                                        #   in Loop: Header=BB21_27 Depth=2
	vmovsd	.LCPI21_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB21_36
.LBB21_35:                              # %if.else
                                        #   in Loop: Header=BB21_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB21_36:                              # %if.end
                                        #   in Loop: Header=BB21_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB21_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB21_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB21_39
.LBB21_38:                              # %if.then137
                                        #   in Loop: Header=BB21_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB21_39:                              # %if.end143
                                        #   in Loop: Header=BB21_27 Depth=2
	jmp	.LBB21_47
.LBB21_40:                              # %if.else144
                                        #   in Loop: Header=BB21_27 Depth=2
	vmovsd	.LCPI21_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB21_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB21_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB21_46
.LBB21_42:                              # %cond.false168
                                        #   in Loop: Header=BB21_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB21_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB21_27 Depth=2
	movl	$127, %eax
	jmp	.LBB21_45
.LBB21_44:                              # %cond.false177
                                        #   in Loop: Header=BB21_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB21_45:                              # %cond.end183
                                        #   in Loop: Header=BB21_27 Depth=2
.LBB21_46:                              # %cond.end185
                                        #   in Loop: Header=BB21_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB21_47:                              # %if.end197
                                        #   in Loop: Header=BB21_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB21_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_27
.LBB21_49:                              # %for.end210
                                        #   in Loop: Header=BB21_25 Depth=1
	jmp	.LBB21_50
.LBB21_50:                              # %for.inc211
                                        #   in Loop: Header=BB21_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_25
.LBB21_51:                              # %for.end213
	movl	$0, -16(%rbp)
.LBB21_52:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_54 Depth 2
                                        #       Child Loop BB21_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB21_52 Depth=1
	movl	$0, -36(%rbp)
.LBB21_54:                              # %for.cond219
                                        #   Parent Loop BB21_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_56 Depth 3
	movl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB21_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB21_54 Depth=2
	movl	$0, -32(%rbp)
.LBB21_56:                              # %for.cond225
                                        #   Parent Loop BB21_52 Depth=1
                                        #     Parent Loop BB21_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB21_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB21_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB21_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB21_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB21_60
.LBB21_59:                              # %if.then246
                                        #   in Loop: Header=BB21_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB21_63
.LBB21_60:                              # %if.end247
                                        #   in Loop: Header=BB21_56 Depth=3
	jmp	.LBB21_61
.LBB21_61:                              # %for.inc248
                                        #   in Loop: Header=BB21_56 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB21_56
.LBB21_62:                              # %for.end250.loopexit
                                        #   in Loop: Header=BB21_54 Depth=2
	jmp	.LBB21_63
.LBB21_63:                              # %for.end250
                                        #   in Loop: Header=BB21_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB21_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB21_52 Depth=1
	jmp	.LBB21_68
.LBB21_65:                              # %if.end254
                                        #   in Loop: Header=BB21_54 Depth=2
	jmp	.LBB21_66
.LBB21_66:                              # %for.inc255
                                        #   in Loop: Header=BB21_54 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB21_54
.LBB21_67:                              # %for.end257.loopexit
                                        #   in Loop: Header=BB21_52 Depth=1
	jmp	.LBB21_68
.LBB21_68:                              # %for.end257
                                        #   in Loop: Header=BB21_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB21_70
# %bb.69:                               # %if.then260
	jmp	.LBB21_73
.LBB21_70:                              # %if.end261
                                        #   in Loop: Header=BB21_52 Depth=1
	jmp	.LBB21_71
.LBB21_71:                              # %for.inc262
                                        #   in Loop: Header=BB21_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_52
.LBB21_72:                              # %for.end264.loopexit
	jmp	.LBB21_73
.LBB21_73:                              # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$1451222933, -60(%rbp)  # imm = 0x567FE795
	jne	.LBB21_75
.LBB21_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB21_74
.Lfunc_end21:
	.size	test_wp_P_slice.18, .Lfunc_end21-test_wp_P_slice.18
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.19
.LCPI22_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.19
	.p2align	4, 0x90
	.type	test_wp_P_slice.19,@function
test_wp_P_slice.19:                     # @test_wp_P_slice.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$489665957, -64(%rbp)   # imm = 0x1D2FB5A5
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB22_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB22_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB22_4
.LBB22_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB22_4
.LBB22_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB22_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_7 Depth 2
                                        #       Child Loop BB22_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB22_5 Depth=1
	movl	$0, -24(%rbp)
.LBB22_7:                               # %for.cond9
                                        #   Parent Loop BB22_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB22_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB22_7 Depth=2
	movl	$0, -12(%rbp)
.LBB22_9:                               # %for.cond14
                                        #   Parent Loop BB22_5 Depth=1
                                        #     Parent Loop BB22_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB22_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB22_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB22_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_9
.LBB22_12:                              # %for.end
                                        #   in Loop: Header=BB22_7 Depth=2
	jmp	.LBB22_13
.LBB22_13:                              # %for.inc41
                                        #   in Loop: Header=BB22_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB22_7
.LBB22_14:                              # %for.end43
                                        #   in Loop: Header=BB22_5 Depth=1
	jmp	.LBB22_15
.LBB22_15:                              # %for.inc44
                                        #   in Loop: Header=BB22_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB22_5
.LBB22_16:                              # %for.end46
	movl	$0, -20(%rbp)
.LBB22_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB22_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB22_17 Depth=1
	movl	$0, -24(%rbp)
.LBB22_19:                              # %for.cond50
                                        #   Parent Loop BB22_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB22_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB22_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB22_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB22_19
.LBB22_22:                              # %for.end60
                                        #   in Loop: Header=BB22_17 Depth=1
	jmp	.LBB22_23
.LBB22_23:                              # %for.inc61
                                        #   in Loop: Header=BB22_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB22_17
.LBB22_24:                              # %for.end63
	movl	$0, -16(%rbp)
.LBB22_25:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_27 Depth 2
                                        #       Child Loop BB22_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB22_25 Depth=1
	movl	$0, -12(%rbp)
.LBB22_27:                              # %for.cond69
                                        #   Parent Loop BB22_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB22_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB22_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB22_29:                              # %for.cond85
                                        #   Parent Loop BB22_25 Depth=1
                                        #     Parent Loop BB22_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB22_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB22_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB22_29
.LBB22_32:                              # %for.end99
                                        #   in Loop: Header=BB22_27 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB22_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB22_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB22_34
	jp	.LBB22_34
	jmp	.LBB22_35
.LBB22_34:                              # %if.then106
                                        #   in Loop: Header=BB22_27 Depth=2
	vmovsd	.LCPI22_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB22_36
.LBB22_35:                              # %if.else
                                        #   in Loop: Header=BB22_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB22_36:                              # %if.end
                                        #   in Loop: Header=BB22_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB22_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB22_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB22_39
.LBB22_38:                              # %if.then137
                                        #   in Loop: Header=BB22_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB22_39:                              # %if.end143
                                        #   in Loop: Header=BB22_27 Depth=2
	jmp	.LBB22_47
.LBB22_40:                              # %if.else144
                                        #   in Loop: Header=BB22_27 Depth=2
	vmovsd	.LCPI22_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB22_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB22_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB22_46
.LBB22_42:                              # %cond.false168
                                        #   in Loop: Header=BB22_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB22_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB22_27 Depth=2
	movl	$127, %eax
	jmp	.LBB22_45
.LBB22_44:                              # %cond.false177
                                        #   in Loop: Header=BB22_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB22_45:                              # %cond.end183
                                        #   in Loop: Header=BB22_27 Depth=2
.LBB22_46:                              # %cond.end185
                                        #   in Loop: Header=BB22_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB22_47:                              # %if.end197
                                        #   in Loop: Header=BB22_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB22_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_27
.LBB22_49:                              # %for.end210
                                        #   in Loop: Header=BB22_25 Depth=1
	jmp	.LBB22_50
.LBB22_50:                              # %for.inc211
                                        #   in Loop: Header=BB22_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_25
.LBB22_51:                              # %for.end213
	movl	$0, -16(%rbp)
.LBB22_52:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_54 Depth 2
                                        #       Child Loop BB22_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB22_52 Depth=1
	movl	$0, -32(%rbp)
.LBB22_54:                              # %for.cond219
                                        #   Parent Loop BB22_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_56 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB22_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB22_54 Depth=2
	movl	$0, -36(%rbp)
.LBB22_56:                              # %for.cond225
                                        #   Parent Loop BB22_52 Depth=1
                                        #     Parent Loop BB22_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -36(%rbp)
	jge	.LBB22_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB22_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB22_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB22_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB22_60
.LBB22_59:                              # %if.then246
                                        #   in Loop: Header=BB22_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB22_63
.LBB22_60:                              # %if.end247
                                        #   in Loop: Header=BB22_56 Depth=3
	jmp	.LBB22_61
.LBB22_61:                              # %for.inc248
                                        #   in Loop: Header=BB22_56 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB22_56
.LBB22_62:                              # %for.end250.loopexit
                                        #   in Loop: Header=BB22_54 Depth=2
	jmp	.LBB22_63
.LBB22_63:                              # %for.end250
                                        #   in Loop: Header=BB22_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB22_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB22_52 Depth=1
	jmp	.LBB22_68
.LBB22_65:                              # %if.end254
                                        #   in Loop: Header=BB22_54 Depth=2
	jmp	.LBB22_66
.LBB22_66:                              # %for.inc255
                                        #   in Loop: Header=BB22_54 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB22_54
.LBB22_67:                              # %for.end257.loopexit
                                        #   in Loop: Header=BB22_52 Depth=1
	jmp	.LBB22_68
.LBB22_68:                              # %for.end257
                                        #   in Loop: Header=BB22_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB22_70
# %bb.69:                               # %if.then260
	jmp	.LBB22_73
.LBB22_70:                              # %if.end261
                                        #   in Loop: Header=BB22_52 Depth=1
	jmp	.LBB22_71
.LBB22_71:                              # %for.inc262
                                        #   in Loop: Header=BB22_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_52
.LBB22_72:                              # %for.end264.loopexit
	jmp	.LBB22_73
.LBB22_73:                              # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$489665957, -64(%rbp)   # imm = 0x1D2FB5A5
	jne	.LBB22_75
.LBB22_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB22_74
.Lfunc_end22:
	.size	test_wp_P_slice.19, .Lfunc_end22-test_wp_P_slice.19
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.20
.LCPI23_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.20
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.20,@function
estimate_weighting_factor_B_slice.20:   # @estimate_weighting_factor_B_slice.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$2008073497, -92(%rbp)  # imm = 0x77B0C519
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB23_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB23_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB23_4
.LBB23_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB23_4
.LBB23_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB23_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB23_7
.LBB23_6:                               # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB23_7:                               # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB23_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_10 Depth 2
                                        #       Child Loop BB23_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB23_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB23_8 Depth=1
	movl	$0, -8(%rbp)
.LBB23_10:                              # %for.cond14
                                        #   Parent Loop BB23_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB23_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB23_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB23_10 Depth=2
	movl	$0, -16(%rbp)
.LBB23_12:                              # %for.cond19
                                        #   Parent Loop BB23_8 Depth=1
                                        #     Parent Loop BB23_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB23_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB23_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB23_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_12
.LBB23_15:                              # %for.end
                                        #   in Loop: Header=BB23_10 Depth=2
	jmp	.LBB23_16
.LBB23_16:                              # %for.inc50
                                        #   in Loop: Header=BB23_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_10
.LBB23_17:                              # %for.end52
                                        #   in Loop: Header=BB23_8 Depth=1
	jmp	.LBB23_18
.LBB23_18:                              # %for.inc53
                                        #   in Loop: Header=BB23_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_8
.LBB23_19:                              # %for.end55
	movl	$0, -4(%rbp)
.LBB23_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_22 Depth 2
                                        #       Child Loop BB23_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB23_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB23_20 Depth=1
	movl	$0, -8(%rbp)
.LBB23_22:                              # %for.cond59
                                        #   Parent Loop BB23_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB23_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB23_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB23_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB23_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB23_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB23_29
.LBB23_25:                              # %cond.false70
                                        #   in Loop: Header=BB23_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB23_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB23_22 Depth=2
	movl	$127, %eax
	jmp	.LBB23_28
.LBB23_27:                              # %cond.false80
                                        #   in Loop: Header=BB23_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB23_28:                              # %cond.end88
                                        #   in Loop: Header=BB23_22 Depth=2
.LBB23_29:                              # %cond.end90
                                        #   in Loop: Header=BB23_22 Depth=2
	movl	%eax, -56(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB23_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB23_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB23_35
.LBB23_31:                              # %cond.false99
                                        #   in Loop: Header=BB23_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB23_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB23_22 Depth=2
	movl	$127, %eax
	jmp	.LBB23_34
.LBB23_33:                              # %cond.false107
                                        #   in Loop: Header=BB23_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB23_34:                              # %cond.end113
                                        #   in Loop: Header=BB23_22 Depth=2
.LBB23_35:                              # %cond.end115
                                        #   in Loop: Header=BB23_22 Depth=2
	movl	%eax, -60(%rbp)
	movl	$0, -20(%rbp)
.LBB23_36:                              # %for.cond117
                                        #   Parent Loop BB23_20 Depth=1
                                        #     Parent Loop BB23_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB23_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB23_36 Depth=3
	cmpl	$0, -56(%rbp)
	jne	.LBB23_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB23_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB23_49
.LBB23_39:                              # %if.else154
                                        #   in Loop: Header=BB23_36 Depth=3
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-56(%rbp)
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB23_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB23_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB23_45
.LBB23_41:                              # %cond.false160
                                        #   in Loop: Header=BB23_36 Depth=3
	movl	-64(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB23_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB23_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB23_44
.LBB23_43:                              # %cond.false166
                                        #   in Loop: Header=BB23_36 Depth=3
	movl	-64(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB23_44:                              # %cond.end170
                                        #   in Loop: Header=BB23_36 Depth=3
.LBB23_45:                              # %cond.end172
                                        #   in Loop: Header=BB23_36 Depth=3
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB23_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB23_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB23_48
.LBB23_47:                              # %if.then198
                                        #   in Loop: Header=BB23_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB23_48:                              # %if.end208
                                        #   in Loop: Header=BB23_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB23_49:                              # %if.end238
                                        #   in Loop: Header=BB23_36 Depth=3
	jmp	.LBB23_50
.LBB23_50:                              # %for.inc239
                                        #   in Loop: Header=BB23_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB23_36
.LBB23_51:                              # %for.end241
                                        #   in Loop: Header=BB23_22 Depth=2
	jmp	.LBB23_52
.LBB23_52:                              # %for.inc242
                                        #   in Loop: Header=BB23_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_22
.LBB23_53:                              # %for.end244
                                        #   in Loop: Header=BB23_20 Depth=1
	jmp	.LBB23_54
.LBB23_54:                              # %for.inc245
                                        #   in Loop: Header=BB23_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_20
.LBB23_55:                              # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB23_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB23_57:                              # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_59 Depth 2
                                        #       Child Loop BB23_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB23_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB23_57 Depth=1
	movl	$0, -8(%rbp)
.LBB23_59:                              # %for.cond254
                                        #   Parent Loop BB23_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB23_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB23_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB23_59 Depth=2
	movl	$0, -20(%rbp)
.LBB23_61:                              # %for.cond257
                                        #   Parent Loop BB23_57 Depth=1
                                        #     Parent Loop BB23_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB23_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB23_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB23_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB23_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB23_65
.LBB23_64:                              # %cond.false262
                                        #   in Loop: Header=BB23_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB23_65:                              # %cond.end263
                                        #   in Loop: Header=BB23_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -88(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB23_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB23_61
.LBB23_67:                              # %for.end295
                                        #   in Loop: Header=BB23_59 Depth=2
	jmp	.LBB23_68
.LBB23_68:                              # %for.inc296
                                        #   in Loop: Header=BB23_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_59
.LBB23_69:                              # %for.end298
                                        #   in Loop: Header=BB23_57 Depth=1
	jmp	.LBB23_70
.LBB23_70:                              # %for.inc299
                                        #   in Loop: Header=BB23_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_57
.LBB23_71:                              # %for.end301
	movl	$0, -12(%rbp)
.LBB23_72:                              # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB23_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB23_72 Depth=1
	movl	$0, -24(%rbp)
.LBB23_74:                              # %for.cond306
                                        #   Parent Loop BB23_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB23_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB23_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB23_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB23_74
.LBB23_77:                              # %for.end346
                                        #   in Loop: Header=BB23_72 Depth=1
	jmp	.LBB23_78
.LBB23_78:                              # %for.inc347
                                        #   in Loop: Header=BB23_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_72
.LBB23_79:                              # %for.end349
	movl	$0, -4(%rbp)
.LBB23_80:                              # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_82 Depth 2
                                        #       Child Loop BB23_84 Depth 3
                                        #       Child Loop BB23_88 Depth 3
                                        #         Child Loop BB23_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB23_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB23_80 Depth=1
	movl	$0, -8(%rbp)
.LBB23_82:                              # %for.cond353
                                        #   Parent Loop BB23_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB23_84 Depth 3
                                        #       Child Loop BB23_88 Depth 3
                                        #         Child Loop BB23_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB23_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB23_82 Depth=2
	movl	$0, -16(%rbp)
.LBB23_84:                              # %for.cond356
                                        #   Parent Loop BB23_80 Depth=1
                                        #     Parent Loop BB23_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB23_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB23_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB23_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_84
.LBB23_87:                              # %for.end380
                                        #   in Loop: Header=BB23_82 Depth=2
	movl	$0, -16(%rbp)
.LBB23_88:                              # %for.cond381
                                        #   Parent Loop BB23_80 Depth=1
                                        #     Parent Loop BB23_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB23_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB23_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB23_88 Depth=3
	movl	$0, -32(%rbp)
.LBB23_90:                              # %for.cond387
                                        #   Parent Loop BB23_80 Depth=1
                                        #     Parent Loop BB23_82 Depth=2
                                        #       Parent Loop BB23_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB23_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB23_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB23_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB23_90
.LBB23_93:                              # %for.end421
                                        #   in Loop: Header=BB23_88 Depth=3
	jmp	.LBB23_94
.LBB23_94:                              # %for.inc422
                                        #   in Loop: Header=BB23_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_88
.LBB23_95:                              # %for.end424
                                        #   in Loop: Header=BB23_82 Depth=2
	jmp	.LBB23_96
.LBB23_96:                              # %for.inc425
                                        #   in Loop: Header=BB23_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_82
.LBB23_97:                              # %for.end427
                                        #   in Loop: Header=BB23_80 Depth=1
	jmp	.LBB23_98
.LBB23_98:                              # %for.inc428
                                        #   in Loop: Header=BB23_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_80
.LBB23_99:                              # %for.end430
	jmp	.LBB23_189
.LBB23_100:                             # %if.else431
	movl	$0, -4(%rbp)
.LBB23_101:                             # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB23_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB23_101 Depth=1
	movl	$0, -8(%rbp)
.LBB23_103:                             # %for.cond436
                                        #   Parent Loop BB23_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB23_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB23_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB23_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_103
.LBB23_106:                             # %for.end447
                                        #   in Loop: Header=BB23_101 Depth=1
	jmp	.LBB23_107
.LBB23_107:                             # %for.inc448
                                        #   in Loop: Header=BB23_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_101
.LBB23_108:                             # %for.end450
	movl	$0, -12(%rbp)
.LBB23_109:                             # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_111 Depth 2
                                        #       Child Loop BB23_113 Depth 3
                                        #       Child Loop BB23_123 Depth 3
                                        #       Child Loop BB23_133 Depth 3
                                        #         Child Loop BB23_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB23_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB23_109 Depth=1
	movl	$0, -16(%rbp)
.LBB23_111:                             # %for.cond456
                                        #   Parent Loop BB23_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB23_113 Depth 3
                                        #       Child Loop BB23_123 Depth 3
                                        #       Child Loop BB23_133 Depth 3
                                        #         Child Loop BB23_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB23_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB23_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB23_113:                             # %for.cond476
                                        #   Parent Loop BB23_109 Depth=1
                                        #     Parent Loop BB23_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB23_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB23_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB23_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_113
.LBB23_116:                             # %for.end493
                                        #   in Loop: Header=BB23_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB23_117
	jp	.LBB23_117
	jmp	.LBB23_118
.LBB23_117:                             # %if.then500
                                        #   in Loop: Header=BB23_111 Depth=2
	vmovsd	.LCPI23_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB23_119
.LBB23_118:                             # %if.else511
                                        #   in Loop: Header=BB23_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB23_119:                             # %if.end513
                                        #   in Loop: Header=BB23_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB23_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB23_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB23_122
.LBB23_121:                             # %if.then519
                                        #   in Loop: Header=BB23_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB23_122:                             # %if.end521
                                        #   in Loop: Header=BB23_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB23_123:                             # %for.cond554
                                        #   Parent Loop BB23_109 Depth=1
                                        #     Parent Loop BB23_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB23_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB23_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB23_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB23_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB23_130
.LBB23_126:                             # %cond.false571
                                        #   in Loop: Header=BB23_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB23_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB23_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB23_129
.LBB23_128:                             # %cond.false583
                                        #   in Loop: Header=BB23_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB23_129:                             # %cond.end591
                                        #   in Loop: Header=BB23_123 Depth=3
.LBB23_130:                             # %cond.end593
                                        #   in Loop: Header=BB23_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB23_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_123
.LBB23_132:                             # %for.end600
                                        #   in Loop: Header=BB23_111 Depth=2
	movl	$0, -4(%rbp)
.LBB23_133:                             # %for.cond601
                                        #   Parent Loop BB23_109 Depth=1
                                        #     Parent Loop BB23_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB23_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB23_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB23_133 Depth=3
	movl	$0, -8(%rbp)
.LBB23_135:                             # %for.cond608
                                        #   Parent Loop BB23_109 Depth=1
                                        #     Parent Loop BB23_111 Depth=2
                                        #       Parent Loop BB23_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB23_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB23_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB23_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB23_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB23_142
.LBB23_138:                             # %cond.false630
                                        #   in Loop: Header=BB23_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB23_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB23_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB23_141
.LBB23_140:                             # %cond.false648
                                        #   in Loop: Header=BB23_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB23_141:                             # %cond.end661
                                        #   in Loop: Header=BB23_135 Depth=4
.LBB23_142:                             # %cond.end663
                                        #   in Loop: Header=BB23_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB23_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_135
.LBB23_144:                             # %for.end675
                                        #   in Loop: Header=BB23_133 Depth=3
	jmp	.LBB23_145
.LBB23_145:                             # %for.inc676
                                        #   in Loop: Header=BB23_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_133
.LBB23_146:                             # %for.end678
                                        #   in Loop: Header=BB23_111 Depth=2
	jmp	.LBB23_147
.LBB23_147:                             # %for.inc679
                                        #   in Loop: Header=BB23_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_111
.LBB23_148:                             # %for.end681
                                        #   in Loop: Header=BB23_109 Depth=1
	jmp	.LBB23_149
.LBB23_149:                             # %for.inc682
                                        #   in Loop: Header=BB23_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_109
.LBB23_150:                             # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB23_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB23_152:                             # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_154 Depth 2
                                        #       Child Loop BB23_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB23_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB23_152 Depth=1
	movl	$0, -24(%rbp)
.LBB23_154:                             # %for.cond694
                                        #   Parent Loop BB23_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB23_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB23_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB23_154 Depth=2
	movl	$0, -20(%rbp)
.LBB23_156:                             # %for.cond700
                                        #   Parent Loop BB23_152 Depth=1
                                        #     Parent Loop BB23_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB23_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB23_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB23_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB23_156
.LBB23_159:                             # %for.end730
                                        #   in Loop: Header=BB23_154 Depth=2
	jmp	.LBB23_160
.LBB23_160:                             # %for.inc731
                                        #   in Loop: Header=BB23_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB23_154
.LBB23_161:                             # %for.end733
                                        #   in Loop: Header=BB23_152 Depth=1
	jmp	.LBB23_162
.LBB23_162:                             # %for.inc734
                                        #   in Loop: Header=BB23_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_152
.LBB23_163:                             # %for.end736
	jmp	.LBB23_173
.LBB23_164:                             # %if.else737
	movl	$0, -12(%rbp)
.LBB23_165:                             # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB23_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB23_165 Depth=1
	movl	$0, -24(%rbp)
.LBB23_167:                             # %for.cond743
                                        #   Parent Loop BB23_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB23_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB23_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB23_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB23_167
.LBB23_170:                             # %for.end784
                                        #   in Loop: Header=BB23_165 Depth=1
	jmp	.LBB23_171
.LBB23_171:                             # %for.inc785
                                        #   in Loop: Header=BB23_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_165
.LBB23_172:                             # %for.end787
	jmp	.LBB23_173
.LBB23_173:                             # %if.end788
	movl	$0, -4(%rbp)
.LBB23_174:                             # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_176 Depth 2
                                        #       Child Loop BB23_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB23_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB23_174 Depth=1
	movl	$0, -8(%rbp)
.LBB23_176:                             # %for.cond793
                                        #   Parent Loop BB23_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB23_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB23_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB23_176 Depth=2
	movl	$0, -20(%rbp)
.LBB23_178:                             # %for.cond797
                                        #   Parent Loop BB23_174 Depth=1
                                        #     Parent Loop BB23_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB23_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB23_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB23_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB23_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB23_182
.LBB23_181:                             # %cond.false804
                                        #   in Loop: Header=BB23_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB23_182:                             # %cond.end805
                                        #   in Loop: Header=BB23_178 Depth=3
	movl	%eax, -88(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB23_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB23_178
.LBB23_184:                             # %for.end833
                                        #   in Loop: Header=BB23_176 Depth=2
	jmp	.LBB23_185
.LBB23_185:                             # %for.inc834
                                        #   in Loop: Header=BB23_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_176
.LBB23_186:                             # %for.end836
                                        #   in Loop: Header=BB23_174 Depth=1
	jmp	.LBB23_187
.LBB23_187:                             # %for.inc837
                                        #   in Loop: Header=BB23_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_174
.LBB23_188:                             # %for.end839
	jmp	.LBB23_189
.LBB23_189:                             # %if.end840
	cmpl	$2008073497, -92(%rbp)  # imm = 0x77B0C519
	jne	.LBB23_191
.LBB23_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_191:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB23_190
.Lfunc_end23:
	.size	estimate_weighting_factor_B_slice.20, .Lfunc_end23-estimate_weighting_factor_B_slice.20
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.21
.LCPI24_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.21
	.p2align	4, 0x90
	.type	test_wp_B_slice.21,@function
test_wp_B_slice.21:                     # @test_wp_B_slice.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$338886738, -84(%rbp)   # imm = 0x14330052
	movl	%edi, -80(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB24_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB24_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB24_4
.LBB24_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB24_4
.LBB24_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -36(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB24_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_7 Depth 2
                                        #       Child Loop BB24_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB24_5 Depth=1
	movl	$0, -24(%rbp)
.LBB24_7:                               # %for.cond9
                                        #   Parent Loop BB24_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB24_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB24_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB24_7 Depth=2
	movl	$0, -32(%rbp)
.LBB24_9:                               # %for.cond14
                                        #   Parent Loop BB24_5 Depth=1
                                        #     Parent Loop BB24_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB24_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB24_9 Depth=3
	movl	-36(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-36(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB24_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB24_9
.LBB24_12:                              # %for.end
                                        #   in Loop: Header=BB24_7 Depth=2
	jmp	.LBB24_13
.LBB24_13:                              # %for.inc41
                                        #   in Loop: Header=BB24_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB24_7
.LBB24_14:                              # %for.end43
                                        #   in Loop: Header=BB24_5 Depth=1
	jmp	.LBB24_15
.LBB24_15:                              # %for.inc44
                                        #   in Loop: Header=BB24_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_5
.LBB24_16:                              # %for.end46
	movl	$0, -12(%rbp)
.LBB24_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_19 Depth 2
                                        #       Child Loop BB24_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB24_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB24_17 Depth=1
	movl	$0, -24(%rbp)
.LBB24_19:                              # %for.cond50
                                        #   Parent Loop BB24_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB24_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB24_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB24_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB24_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB24_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB24_26
.LBB24_22:                              # %cond.false61
                                        #   in Loop: Header=BB24_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB24_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB24_19 Depth=2
	movl	$127, %eax
	jmp	.LBB24_25
.LBB24_24:                              # %cond.false71
                                        #   in Loop: Header=BB24_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB24_25:                              # %cond.end79
                                        #   in Loop: Header=BB24_19 Depth=2
.LBB24_26:                              # %cond.end81
                                        #   in Loop: Header=BB24_19 Depth=2
	movl	%eax, -60(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB24_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB24_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB24_32
.LBB24_28:                              # %cond.false90
                                        #   in Loop: Header=BB24_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB24_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB24_19 Depth=2
	movl	$127, %eax
	jmp	.LBB24_31
.LBB24_30:                              # %cond.false98
                                        #   in Loop: Header=BB24_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB24_31:                              # %cond.end104
                                        #   in Loop: Header=BB24_19 Depth=2
.LBB24_32:                              # %cond.end106
                                        #   in Loop: Header=BB24_19 Depth=2
	movl	%eax, -52(%rbp)
	movl	$0, -20(%rbp)
.LBB24_33:                              # %for.cond108
                                        #   Parent Loop BB24_17 Depth=1
                                        #     Parent Loop BB24_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB24_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB24_33 Depth=3
	cmpl	$0, -60(%rbp)
	jne	.LBB24_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB24_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB24_46
.LBB24_36:                              # %if.else
                                        #   in Loop: Header=BB24_33 Depth=3
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-60(%rbp)
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	imull	-52(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB24_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB24_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB24_42
.LBB24_38:                              # %cond.false145
                                        #   in Loop: Header=BB24_33 Depth=3
	movl	-56(%rbp), %eax
	imull	-52(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB24_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB24_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB24_41
.LBB24_40:                              # %cond.false151
                                        #   in Loop: Header=BB24_33 Depth=3
	movl	-56(%rbp), %eax
	imull	-52(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB24_41:                              # %cond.end155
                                        #   in Loop: Header=BB24_33 Depth=3
.LBB24_42:                              # %cond.end157
                                        #   in Loop: Header=BB24_33 Depth=3
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB24_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB24_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB24_45
.LBB24_44:                              # %if.then183
                                        #   in Loop: Header=BB24_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB24_45:                              # %if.end
                                        #   in Loop: Header=BB24_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB24_46:                              # %if.end220
                                        #   in Loop: Header=BB24_33 Depth=3
	jmp	.LBB24_47
.LBB24_47:                              # %for.inc221
                                        #   in Loop: Header=BB24_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB24_33
.LBB24_48:                              # %for.end223
                                        #   in Loop: Header=BB24_19 Depth=2
	jmp	.LBB24_49
.LBB24_49:                              # %for.inc224
                                        #   in Loop: Header=BB24_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB24_19
.LBB24_50:                              # %for.end226
                                        #   in Loop: Header=BB24_17 Depth=1
	jmp	.LBB24_51
.LBB24_51:                              # %for.inc227
                                        #   in Loop: Header=BB24_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_17
.LBB24_52:                              # %for.end229
	cmpl	$1, -80(%rbp)
	jne	.LBB24_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB24_54:                              # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_56 Depth 2
                                        #       Child Loop BB24_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB24_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB24_54 Depth=1
	movl	$0, -24(%rbp)
.LBB24_56:                              # %for.cond235
                                        #   Parent Loop BB24_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB24_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB24_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB24_56 Depth=2
	movl	$0, -20(%rbp)
.LBB24_58:                              # %for.cond238
                                        #   Parent Loop BB24_54 Depth=1
                                        #     Parent Loop BB24_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB24_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB24_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB24_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB24_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB24_62
.LBB24_61:                              # %cond.false243
                                        #   in Loop: Header=BB24_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB24_62:                              # %cond.end244
                                        #   in Loop: Header=BB24_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -88(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB24_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB24_58
.LBB24_64:                              # %for.end276
                                        #   in Loop: Header=BB24_56 Depth=2
	jmp	.LBB24_65
.LBB24_65:                              # %for.inc277
                                        #   in Loop: Header=BB24_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB24_56
.LBB24_66:                              # %for.end279
                                        #   in Loop: Header=BB24_54 Depth=1
	jmp	.LBB24_67
.LBB24_67:                              # %for.inc280
                                        #   in Loop: Header=BB24_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_54
.LBB24_68:                              # %for.end282
	movl	$0, -16(%rbp)
.LBB24_69:                              # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB24_69 Depth=1
	movl	$0, -28(%rbp)
.LBB24_71:                              # %for.cond287
                                        #   Parent Loop BB24_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB24_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB24_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB24_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB24_71
.LBB24_74:                              # %for.end327
                                        #   in Loop: Header=BB24_69 Depth=1
	jmp	.LBB24_75
.LBB24_75:                              # %for.inc328
                                        #   in Loop: Header=BB24_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_69
.LBB24_76:                              # %for.end330
	jmp	.LBB24_142
.LBB24_77:                              # %if.else331
	movl	$0, -12(%rbp)
.LBB24_78:                              # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB24_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB24_78 Depth=1
	movl	$0, -24(%rbp)
.LBB24_80:                              # %for.cond335
                                        #   Parent Loop BB24_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB24_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB24_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB24_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB24_80
.LBB24_83:                              # %for.end345
                                        #   in Loop: Header=BB24_78 Depth=1
	jmp	.LBB24_84
.LBB24_84:                              # %for.inc346
                                        #   in Loop: Header=BB24_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_78
.LBB24_85:                              # %for.end348
	movl	$0, -16(%rbp)
.LBB24_86:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_88 Depth 2
                                        #       Child Loop BB24_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB24_86 Depth=1
	movl	$0, -32(%rbp)
.LBB24_88:                              # %for.cond354
                                        #   Parent Loop BB24_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB24_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB24_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB24_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB24_90:                              # %for.cond372
                                        #   Parent Loop BB24_86 Depth=1
                                        #     Parent Loop BB24_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB24_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB24_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_90
.LBB24_93:                              # %for.end389
                                        #   in Loop: Header=BB24_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB24_94
	jp	.LBB24_94
	jmp	.LBB24_95
.LBB24_94:                              # %if.then396
                                        #   in Loop: Header=BB24_88 Depth=2
	vmovsd	.LCPI24_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB24_96
.LBB24_95:                              # %if.else406
                                        #   in Loop: Header=BB24_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB24_96:                              # %if.end407
                                        #   in Loop: Header=BB24_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB24_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB24_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB24_99
.LBB24_98:                              # %if.then413
                                        #   in Loop: Header=BB24_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB24_99:                              # %if.end414
                                        #   in Loop: Header=BB24_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB24_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB24_88
.LBB24_101:                             # %for.end447
                                        #   in Loop: Header=BB24_86 Depth=1
	jmp	.LBB24_102
.LBB24_102:                             # %for.inc448
                                        #   in Loop: Header=BB24_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_86
.LBB24_103:                             # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB24_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB24_105:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_107 Depth 2
                                        #       Child Loop BB24_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB24_105 Depth=1
	movl	$0, -28(%rbp)
.LBB24_107:                             # %for.cond459
                                        #   Parent Loop BB24_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB24_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB24_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB24_107 Depth=2
	movl	$0, -20(%rbp)
.LBB24_109:                             # %for.cond465
                                        #   Parent Loop BB24_105 Depth=1
                                        #     Parent Loop BB24_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB24_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB24_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB24_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB24_109
.LBB24_112:                             # %for.end495
                                        #   in Loop: Header=BB24_107 Depth=2
	jmp	.LBB24_113
.LBB24_113:                             # %for.inc496
                                        #   in Loop: Header=BB24_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB24_107
.LBB24_114:                             # %for.end498
                                        #   in Loop: Header=BB24_105 Depth=1
	jmp	.LBB24_115
.LBB24_115:                             # %for.inc499
                                        #   in Loop: Header=BB24_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_105
.LBB24_116:                             # %for.end501
	jmp	.LBB24_126
.LBB24_117:                             # %if.else502
	movl	$0, -16(%rbp)
.LBB24_118:                             # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB24_118 Depth=1
	movl	$0, -28(%rbp)
.LBB24_120:                             # %for.cond508
                                        #   Parent Loop BB24_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB24_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB24_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB24_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB24_120
.LBB24_123:                             # %for.end549
                                        #   in Loop: Header=BB24_118 Depth=1
	jmp	.LBB24_124
.LBB24_124:                             # %for.inc550
                                        #   in Loop: Header=BB24_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_118
.LBB24_125:                             # %for.end552
	jmp	.LBB24_126
.LBB24_126:                             # %if.end553
	movl	$0, -12(%rbp)
.LBB24_127:                             # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_129 Depth 2
                                        #       Child Loop BB24_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB24_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB24_127 Depth=1
	movl	$0, -24(%rbp)
.LBB24_129:                             # %for.cond558
                                        #   Parent Loop BB24_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB24_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB24_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB24_129 Depth=2
	movl	$0, -20(%rbp)
.LBB24_131:                             # %for.cond562
                                        #   Parent Loop BB24_127 Depth=1
                                        #     Parent Loop BB24_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB24_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB24_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB24_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB24_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB24_135
.LBB24_134:                             # %cond.false569
                                        #   in Loop: Header=BB24_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB24_135:                             # %cond.end570
                                        #   in Loop: Header=BB24_131 Depth=3
	movl	%eax, -88(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB24_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB24_131
.LBB24_137:                             # %for.end598
                                        #   in Loop: Header=BB24_129 Depth=2
	jmp	.LBB24_138
.LBB24_138:                             # %for.inc599
                                        #   in Loop: Header=BB24_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB24_129
.LBB24_139:                             # %for.end601
                                        #   in Loop: Header=BB24_127 Depth=1
	jmp	.LBB24_140
.LBB24_140:                             # %for.inc602
                                        #   in Loop: Header=BB24_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_127
.LBB24_141:                             # %for.end604
	jmp	.LBB24_142
.LBB24_142:                             # %if.end605
	movl	$0, -16(%rbp)
.LBB24_143:                             # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_145 Depth 2
                                        #       Child Loop BB24_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB24_143 Depth=1
	movl	$0, -28(%rbp)
.LBB24_145:                             # %for.cond611
                                        #   Parent Loop BB24_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB24_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB24_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB24_145 Depth=2
	movl	$0, -20(%rbp)
.LBB24_147:                             # %for.cond617
                                        #   Parent Loop BB24_143 Depth=1
                                        #     Parent Loop BB24_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB24_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB24_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB24_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB24_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB24_151
.LBB24_150:                             # %if.then638
                                        #   in Loop: Header=BB24_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB24_154
.LBB24_151:                             # %if.end639
                                        #   in Loop: Header=BB24_147 Depth=3
	jmp	.LBB24_152
.LBB24_152:                             # %for.inc640
                                        #   in Loop: Header=BB24_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB24_147
.LBB24_153:                             # %for.end642.loopexit
                                        #   in Loop: Header=BB24_145 Depth=2
	jmp	.LBB24_154
.LBB24_154:                             # %for.end642
                                        #   in Loop: Header=BB24_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB24_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB24_143 Depth=1
	jmp	.LBB24_159
.LBB24_156:                             # %if.end646
                                        #   in Loop: Header=BB24_145 Depth=2
	jmp	.LBB24_157
.LBB24_157:                             # %for.inc647
                                        #   in Loop: Header=BB24_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB24_145
.LBB24_158:                             # %for.end649.loopexit
                                        #   in Loop: Header=BB24_143 Depth=1
	jmp	.LBB24_159
.LBB24_159:                             # %for.end649
                                        #   in Loop: Header=BB24_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB24_161
# %bb.160:                              # %if.then652
	jmp	.LBB24_164
.LBB24_161:                             # %if.end653
                                        #   in Loop: Header=BB24_143 Depth=1
	jmp	.LBB24_162
.LBB24_162:                             # %for.inc654
                                        #   in Loop: Header=BB24_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_143
.LBB24_163:                             # %for.end656.loopexit
	jmp	.LBB24_164
.LBB24_164:                             # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$338886738, -84(%rbp)   # imm = 0x14330052
	jne	.LBB24_166
.LBB24_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_166:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB24_165
.Lfunc_end24:
	.size	test_wp_B_slice.21, .Lfunc_end24-test_wp_B_slice.21
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.22
.LCPI25_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.22
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.22,@function
estimate_weighting_factor_P_slice.22:   # @estimate_weighting_factor_P_slice.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$1729729478, -64(%rbp)  # imm = 0x671993C6
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB25_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB25_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB25_4
.LBB25_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB25_4
.LBB25_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB25_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_7 Depth 2
                                        #       Child Loop BB25_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB25_5 Depth=1
	movl	$0, -16(%rbp)
.LBB25_7:                               # %for.cond12
                                        #   Parent Loop BB25_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB25_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB25_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB25_7 Depth=2
	movl	$0, -4(%rbp)
.LBB25_9:                               # %for.cond17
                                        #   Parent Loop BB25_5 Depth=1
                                        #     Parent Loop BB25_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB25_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB25_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB25_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_9
.LBB25_12:                              # %for.end
                                        #   in Loop: Header=BB25_7 Depth=2
	jmp	.LBB25_13
.LBB25_13:                              # %for.inc48
                                        #   in Loop: Header=BB25_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_7
.LBB25_14:                              # %for.end50
                                        #   in Loop: Header=BB25_5 Depth=1
	jmp	.LBB25_15
.LBB25_15:                              # %for.inc51
                                        #   in Loop: Header=BB25_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_5
.LBB25_16:                              # %for.end53
	movl	$0, -12(%rbp)
.LBB25_17:                              # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB25_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB25_17 Depth=1
	movl	$0, -16(%rbp)
.LBB25_19:                              # %for.cond57
                                        #   Parent Loop BB25_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB25_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB25_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-48(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB25_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_19
.LBB25_22:                              # %for.end67
                                        #   in Loop: Header=BB25_17 Depth=1
	jmp	.LBB25_23
.LBB25_23:                              # %for.inc68
                                        #   in Loop: Header=BB25_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_17
.LBB25_24:                              # %for.end70
	movl	$0, -8(%rbp)
.LBB25_25:                              # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_27 Depth 2
                                        #       Child Loop BB25_29 Depth 3
                                        #       Child Loop BB25_48 Depth 3
                                        #       Child Loop BB25_58 Depth 3
                                        #         Child Loop BB25_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB25_25 Depth=1
	movl	$0, -4(%rbp)
.LBB25_27:                              # %for.cond76
                                        #   Parent Loop BB25_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB25_29 Depth 3
                                        #       Child Loop BB25_48 Depth 3
                                        #       Child Loop BB25_58 Depth 3
                                        #         Child Loop BB25_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB25_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB25_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -56(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB25_29:                              # %for.cond92
                                        #   Parent Loop BB25_25 Depth=1
                                        #     Parent Loop BB25_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB25_29 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB25_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_29
.LBB25_32:                              # %for.end106
                                        #   in Loop: Header=BB25_27 Depth=2
	vcvtsi2sdl	-60(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB25_40
	jp	.LBB25_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB25_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB25_34
	jp	.LBB25_34
	jmp	.LBB25_35
.LBB25_34:                              # %if.then114
                                        #   in Loop: Header=BB25_27 Depth=2
	vmovsd	.LCPI25_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-48(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB25_36
.LBB25_35:                              # %if.else
                                        #   in Loop: Header=BB25_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB25_36:                              # %if.end
                                        #   in Loop: Header=BB25_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB25_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB25_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB25_39
.LBB25_38:                              # %if.then147
                                        #   in Loop: Header=BB25_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB25_39:                              # %if.end154
                                        #   in Loop: Header=BB25_27 Depth=2
	jmp	.LBB25_47
.LBB25_40:                              # %if.else155
                                        #   in Loop: Header=BB25_27 Depth=2
	vmovsd	.LCPI25_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-48(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB25_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB25_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB25_46
.LBB25_42:                              # %cond.false179
                                        #   in Loop: Header=BB25_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB25_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB25_27 Depth=2
	movl	$127, %eax
	jmp	.LBB25_45
.LBB25_44:                              # %cond.false188
                                        #   in Loop: Header=BB25_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB25_45:                              # %cond.end194
                                        #   in Loop: Header=BB25_27 Depth=2
.LBB25_46:                              # %cond.end196
                                        #   in Loop: Header=BB25_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB25_47:                              # %if.end209
                                        #   in Loop: Header=BB25_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB25_48:                              # %for.cond222
                                        #   Parent Loop BB25_25 Depth=1
                                        #     Parent Loop BB25_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB25_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB25_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB25_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB25_55
.LBB25_51:                              # %cond.false248
                                        #   in Loop: Header=BB25_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB25_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB25_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_54
.LBB25_53:                              # %cond.false270
                                        #   in Loop: Header=BB25_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB25_54:                              # %cond.end288
                                        #   in Loop: Header=BB25_48 Depth=3
.LBB25_55:                              # %cond.end290
                                        #   in Loop: Header=BB25_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB25_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_48
.LBB25_57:                              # %for.end297
                                        #   in Loop: Header=BB25_27 Depth=2
	movl	$0, -12(%rbp)
.LBB25_58:                              # %for.cond298
                                        #   Parent Loop BB25_25 Depth=1
                                        #     Parent Loop BB25_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB25_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB25_58 Depth=3
	movl	$0, -16(%rbp)
.LBB25_60:                              # %for.cond305
                                        #   Parent Loop BB25_25 Depth=1
                                        #     Parent Loop BB25_27 Depth=2
                                        #       Parent Loop BB25_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB25_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB25_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB25_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB25_67
.LBB25_63:                              # %cond.false336
                                        #   in Loop: Header=BB25_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB25_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB25_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_66
.LBB25_65:                              # %cond.false364
                                        #   in Loop: Header=BB25_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB25_66:                              # %cond.end387
                                        #   in Loop: Header=BB25_60 Depth=4
.LBB25_67:                              # %cond.end389
                                        #   in Loop: Header=BB25_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB25_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_60
.LBB25_69:                              # %for.end400
                                        #   in Loop: Header=BB25_58 Depth=3
	jmp	.LBB25_70
.LBB25_70:                              # %for.inc401
                                        #   in Loop: Header=BB25_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_58
.LBB25_71:                              # %for.end403
                                        #   in Loop: Header=BB25_27 Depth=2
	jmp	.LBB25_72
.LBB25_72:                              # %for.inc404
                                        #   in Loop: Header=BB25_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_27
.LBB25_73:                              # %for.end406
                                        #   in Loop: Header=BB25_25 Depth=1
	jmp	.LBB25_74
.LBB25_74:                              # %for.inc407
                                        #   in Loop: Header=BB25_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_25
.LBB25_75:                              # %for.end409
	movl	$0, -8(%rbp)
.LBB25_76:                              # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_78 Depth 2
                                        #       Child Loop BB25_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB25_76 Depth=1
	movl	$0, -24(%rbp)
.LBB25_78:                              # %for.cond415
                                        #   Parent Loop BB25_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB25_80 Depth 3
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB25_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB25_78 Depth=2
	movl	$0, -20(%rbp)
.LBB25_80:                              # %for.cond421
                                        #   Parent Loop BB25_76 Depth=1
                                        #     Parent Loop BB25_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB25_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB25_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB25_80 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB25_80
.LBB25_83:                              # %for.end451
                                        #   in Loop: Header=BB25_78 Depth=2
	jmp	.LBB25_84
.LBB25_84:                              # %for.inc452
                                        #   in Loop: Header=BB25_78 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB25_78
.LBB25_85:                              # %for.end454
                                        #   in Loop: Header=BB25_76 Depth=1
	jmp	.LBB25_86
.LBB25_86:                              # %for.inc455
                                        #   in Loop: Header=BB25_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_76
.LBB25_87:                              # %for.end457
	cmpl	$1729729478, -64(%rbp)  # imm = 0x671993C6
	jne	.LBB25_89
.LBB25_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB25_88
.Lfunc_end25:
	.size	estimate_weighting_factor_P_slice.22, .Lfunc_end25-estimate_weighting_factor_P_slice.22
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.23
.LCPI26_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.23
	.p2align	4, 0x90
	.type	test_wp_P_slice.23,@function
test_wp_P_slice.23:                     # @test_wp_P_slice.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$1064669350, -64(%rbp)  # imm = 0x3F7590A6
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB26_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB26_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB26_4
.LBB26_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB26_4
.LBB26_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB26_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_7 Depth 2
                                        #       Child Loop BB26_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB26_5 Depth=1
	movl	$0, -24(%rbp)
.LBB26_7:                               # %for.cond9
                                        #   Parent Loop BB26_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB26_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB26_7 Depth=2
	movl	$0, -12(%rbp)
.LBB26_9:                               # %for.cond14
                                        #   Parent Loop BB26_5 Depth=1
                                        #     Parent Loop BB26_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB26_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB26_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB26_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_9
.LBB26_12:                              # %for.end
                                        #   in Loop: Header=BB26_7 Depth=2
	jmp	.LBB26_13
.LBB26_13:                              # %for.inc41
                                        #   in Loop: Header=BB26_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB26_7
.LBB26_14:                              # %for.end43
                                        #   in Loop: Header=BB26_5 Depth=1
	jmp	.LBB26_15
.LBB26_15:                              # %for.inc44
                                        #   in Loop: Header=BB26_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB26_5
.LBB26_16:                              # %for.end46
	movl	$0, -20(%rbp)
.LBB26_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB26_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	$0, -24(%rbp)
.LBB26_19:                              # %for.cond50
                                        #   Parent Loop BB26_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB26_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB26_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB26_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB26_19
.LBB26_22:                              # %for.end60
                                        #   in Loop: Header=BB26_17 Depth=1
	jmp	.LBB26_23
.LBB26_23:                              # %for.inc61
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB26_17
.LBB26_24:                              # %for.end63
	movl	$0, -16(%rbp)
.LBB26_25:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_27 Depth 2
                                        #       Child Loop BB26_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB26_25 Depth=1
	movl	$0, -12(%rbp)
.LBB26_27:                              # %for.cond69
                                        #   Parent Loop BB26_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB26_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB26_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB26_29:                              # %for.cond85
                                        #   Parent Loop BB26_25 Depth=1
                                        #     Parent Loop BB26_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB26_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB26_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB26_29
.LBB26_32:                              # %for.end99
                                        #   in Loop: Header=BB26_27 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB26_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB26_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB26_34
	jp	.LBB26_34
	jmp	.LBB26_35
.LBB26_34:                              # %if.then106
                                        #   in Loop: Header=BB26_27 Depth=2
	vmovsd	.LCPI26_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB26_36
.LBB26_35:                              # %if.else
                                        #   in Loop: Header=BB26_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB26_36:                              # %if.end
                                        #   in Loop: Header=BB26_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB26_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB26_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB26_39
.LBB26_38:                              # %if.then137
                                        #   in Loop: Header=BB26_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB26_39:                              # %if.end143
                                        #   in Loop: Header=BB26_27 Depth=2
	jmp	.LBB26_47
.LBB26_40:                              # %if.else144
                                        #   in Loop: Header=BB26_27 Depth=2
	vmovsd	.LCPI26_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB26_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB26_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB26_46
.LBB26_42:                              # %cond.false168
                                        #   in Loop: Header=BB26_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB26_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB26_27 Depth=2
	movl	$127, %eax
	jmp	.LBB26_45
.LBB26_44:                              # %cond.false177
                                        #   in Loop: Header=BB26_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB26_45:                              # %cond.end183
                                        #   in Loop: Header=BB26_27 Depth=2
.LBB26_46:                              # %cond.end185
                                        #   in Loop: Header=BB26_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB26_47:                              # %if.end197
                                        #   in Loop: Header=BB26_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB26_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_27
.LBB26_49:                              # %for.end210
                                        #   in Loop: Header=BB26_25 Depth=1
	jmp	.LBB26_50
.LBB26_50:                              # %for.inc211
                                        #   in Loop: Header=BB26_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_25
.LBB26_51:                              # %for.end213
	movl	$0, -16(%rbp)
.LBB26_52:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_54 Depth 2
                                        #       Child Loop BB26_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB26_52 Depth=1
	movl	$0, -32(%rbp)
.LBB26_54:                              # %for.cond219
                                        #   Parent Loop BB26_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_56 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB26_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB26_54 Depth=2
	movl	$0, -36(%rbp)
.LBB26_56:                              # %for.cond225
                                        #   Parent Loop BB26_52 Depth=1
                                        #     Parent Loop BB26_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -36(%rbp)
	jge	.LBB26_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB26_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB26_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB26_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB26_60
.LBB26_59:                              # %if.then246
                                        #   in Loop: Header=BB26_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB26_63
.LBB26_60:                              # %if.end247
                                        #   in Loop: Header=BB26_56 Depth=3
	jmp	.LBB26_61
.LBB26_61:                              # %for.inc248
                                        #   in Loop: Header=BB26_56 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB26_56
.LBB26_62:                              # %for.end250.loopexit
                                        #   in Loop: Header=BB26_54 Depth=2
	jmp	.LBB26_63
.LBB26_63:                              # %for.end250
                                        #   in Loop: Header=BB26_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB26_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB26_52 Depth=1
	jmp	.LBB26_68
.LBB26_65:                              # %if.end254
                                        #   in Loop: Header=BB26_54 Depth=2
	jmp	.LBB26_66
.LBB26_66:                              # %for.inc255
                                        #   in Loop: Header=BB26_54 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB26_54
.LBB26_67:                              # %for.end257.loopexit
                                        #   in Loop: Header=BB26_52 Depth=1
	jmp	.LBB26_68
.LBB26_68:                              # %for.end257
                                        #   in Loop: Header=BB26_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB26_70
# %bb.69:                               # %if.then260
	jmp	.LBB26_73
.LBB26_70:                              # %if.end261
                                        #   in Loop: Header=BB26_52 Depth=1
	jmp	.LBB26_71
.LBB26_71:                              # %for.inc262
                                        #   in Loop: Header=BB26_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_52
.LBB26_72:                              # %for.end264.loopexit
	jmp	.LBB26_73
.LBB26_73:                              # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$1064669350, -64(%rbp)  # imm = 0x3F7590A6
	jne	.LBB26_75
.LBB26_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB26_74
.Lfunc_end26:
	.size	test_wp_P_slice.23, .Lfunc_end26-test_wp_P_slice.23
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.24
.LCPI27_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.24
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.24,@function
estimate_weighting_factor_P_slice.24:   # @estimate_weighting_factor_P_slice.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$2015774573, -64(%rbp)  # imm = 0x7826476D
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB27_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB27_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB27_4
.LBB27_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB27_4
.LBB27_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB27_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_7 Depth 2
                                        #       Child Loop BB27_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB27_5 Depth=1
	movl	$0, -16(%rbp)
.LBB27_7:                               # %for.cond12
                                        #   Parent Loop BB27_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB27_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB27_7 Depth=2
	movl	$0, -4(%rbp)
.LBB27_9:                               # %for.cond17
                                        #   Parent Loop BB27_5 Depth=1
                                        #     Parent Loop BB27_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB27_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB27_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB27_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_9
.LBB27_12:                              # %for.end
                                        #   in Loop: Header=BB27_7 Depth=2
	jmp	.LBB27_13
.LBB27_13:                              # %for.inc48
                                        #   in Loop: Header=BB27_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_7
.LBB27_14:                              # %for.end50
                                        #   in Loop: Header=BB27_5 Depth=1
	jmp	.LBB27_15
.LBB27_15:                              # %for.inc51
                                        #   in Loop: Header=BB27_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_5
.LBB27_16:                              # %for.end53
	movl	$0, -12(%rbp)
.LBB27_17:                              # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB27_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB27_17 Depth=1
	movl	$0, -16(%rbp)
.LBB27_19:                              # %for.cond57
                                        #   Parent Loop BB27_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB27_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB27_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-48(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB27_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_19
.LBB27_22:                              # %for.end67
                                        #   in Loop: Header=BB27_17 Depth=1
	jmp	.LBB27_23
.LBB27_23:                              # %for.inc68
                                        #   in Loop: Header=BB27_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_17
.LBB27_24:                              # %for.end70
	movl	$0, -8(%rbp)
.LBB27_25:                              # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_27 Depth 2
                                        #       Child Loop BB27_29 Depth 3
                                        #       Child Loop BB27_48 Depth 3
                                        #       Child Loop BB27_58 Depth 3
                                        #         Child Loop BB27_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB27_25 Depth=1
	movl	$0, -4(%rbp)
.LBB27_27:                              # %for.cond76
                                        #   Parent Loop BB27_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_29 Depth 3
                                        #       Child Loop BB27_48 Depth 3
                                        #       Child Loop BB27_58 Depth 3
                                        #         Child Loop BB27_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB27_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB27_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -56(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB27_29:                              # %for.cond92
                                        #   Parent Loop BB27_25 Depth=1
                                        #     Parent Loop BB27_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB27_29 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB27_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_29
.LBB27_32:                              # %for.end106
                                        #   in Loop: Header=BB27_27 Depth=2
	vcvtsi2sdl	-60(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB27_40
	jp	.LBB27_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB27_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB27_34
	jp	.LBB27_34
	jmp	.LBB27_35
.LBB27_34:                              # %if.then114
                                        #   in Loop: Header=BB27_27 Depth=2
	vmovsd	.LCPI27_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-48(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB27_36
.LBB27_35:                              # %if.else
                                        #   in Loop: Header=BB27_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB27_36:                              # %if.end
                                        #   in Loop: Header=BB27_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB27_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB27_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB27_39
.LBB27_38:                              # %if.then147
                                        #   in Loop: Header=BB27_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB27_39:                              # %if.end154
                                        #   in Loop: Header=BB27_27 Depth=2
	jmp	.LBB27_47
.LBB27_40:                              # %if.else155
                                        #   in Loop: Header=BB27_27 Depth=2
	vmovsd	.LCPI27_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-48(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB27_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB27_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB27_46
.LBB27_42:                              # %cond.false179
                                        #   in Loop: Header=BB27_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB27_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB27_27 Depth=2
	movl	$127, %eax
	jmp	.LBB27_45
.LBB27_44:                              # %cond.false188
                                        #   in Loop: Header=BB27_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB27_45:                              # %cond.end194
                                        #   in Loop: Header=BB27_27 Depth=2
.LBB27_46:                              # %cond.end196
                                        #   in Loop: Header=BB27_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB27_47:                              # %if.end209
                                        #   in Loop: Header=BB27_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB27_48:                              # %for.cond222
                                        #   Parent Loop BB27_25 Depth=1
                                        #     Parent Loop BB27_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB27_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB27_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB27_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB27_55
.LBB27_51:                              # %cond.false248
                                        #   in Loop: Header=BB27_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB27_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB27_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB27_54
.LBB27_53:                              # %cond.false270
                                        #   in Loop: Header=BB27_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB27_54:                              # %cond.end288
                                        #   in Loop: Header=BB27_48 Depth=3
.LBB27_55:                              # %cond.end290
                                        #   in Loop: Header=BB27_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB27_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_48
.LBB27_57:                              # %for.end297
                                        #   in Loop: Header=BB27_27 Depth=2
	movl	$0, -12(%rbp)
.LBB27_58:                              # %for.cond298
                                        #   Parent Loop BB27_25 Depth=1
                                        #     Parent Loop BB27_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB27_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB27_58 Depth=3
	movl	$0, -16(%rbp)
.LBB27_60:                              # %for.cond305
                                        #   Parent Loop BB27_25 Depth=1
                                        #     Parent Loop BB27_27 Depth=2
                                        #       Parent Loop BB27_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB27_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB27_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB27_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB27_67
.LBB27_63:                              # %cond.false336
                                        #   in Loop: Header=BB27_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB27_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB27_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB27_66
.LBB27_65:                              # %cond.false364
                                        #   in Loop: Header=BB27_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB27_66:                              # %cond.end387
                                        #   in Loop: Header=BB27_60 Depth=4
.LBB27_67:                              # %cond.end389
                                        #   in Loop: Header=BB27_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB27_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_60
.LBB27_69:                              # %for.end400
                                        #   in Loop: Header=BB27_58 Depth=3
	jmp	.LBB27_70
.LBB27_70:                              # %for.inc401
                                        #   in Loop: Header=BB27_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_58
.LBB27_71:                              # %for.end403
                                        #   in Loop: Header=BB27_27 Depth=2
	jmp	.LBB27_72
.LBB27_72:                              # %for.inc404
                                        #   in Loop: Header=BB27_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_27
.LBB27_73:                              # %for.end406
                                        #   in Loop: Header=BB27_25 Depth=1
	jmp	.LBB27_74
.LBB27_74:                              # %for.inc407
                                        #   in Loop: Header=BB27_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_25
.LBB27_75:                              # %for.end409
	movl	$0, -8(%rbp)
.LBB27_76:                              # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_78 Depth 2
                                        #       Child Loop BB27_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB27_76 Depth=1
	movl	$0, -20(%rbp)
.LBB27_78:                              # %for.cond415
                                        #   Parent Loop BB27_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_80 Depth 3
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB27_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB27_78 Depth=2
	movl	$0, -24(%rbp)
.LBB27_80:                              # %for.cond421
                                        #   Parent Loop BB27_76 Depth=1
                                        #     Parent Loop BB27_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -24(%rbp)
	jge	.LBB27_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB27_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB27_80 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB27_80
.LBB27_83:                              # %for.end451
                                        #   in Loop: Header=BB27_78 Depth=2
	jmp	.LBB27_84
.LBB27_84:                              # %for.inc452
                                        #   in Loop: Header=BB27_78 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB27_78
.LBB27_85:                              # %for.end454
                                        #   in Loop: Header=BB27_76 Depth=1
	jmp	.LBB27_86
.LBB27_86:                              # %for.inc455
                                        #   in Loop: Header=BB27_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_76
.LBB27_87:                              # %for.end457
	cmpl	$2015774573, -64(%rbp)  # imm = 0x7826476D
	jne	.LBB27_89
.LBB27_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB27_88
.Lfunc_end27:
	.size	estimate_weighting_factor_P_slice.24, .Lfunc_end27-estimate_weighting_factor_P_slice.24
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.25
.LCPI28_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.25
	.p2align	4, 0x90
	.type	test_wp_B_slice.25,@function
test_wp_B_slice.25:                     # @test_wp_B_slice.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$1095185875, -84(%rbp)  # imm = 0x414735D3
	movl	%edi, -80(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB28_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB28_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB28_4
.LBB28_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB28_4
.LBB28_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -36(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB28_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_7 Depth 2
                                        #       Child Loop BB28_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB28_5 Depth=1
	movl	$0, -24(%rbp)
.LBB28_7:                               # %for.cond9
                                        #   Parent Loop BB28_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB28_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB28_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB28_7 Depth=2
	movl	$0, -32(%rbp)
.LBB28_9:                               # %for.cond14
                                        #   Parent Loop BB28_5 Depth=1
                                        #     Parent Loop BB28_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB28_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB28_9 Depth=3
	movl	-36(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-36(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB28_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB28_9
.LBB28_12:                              # %for.end
                                        #   in Loop: Header=BB28_7 Depth=2
	jmp	.LBB28_13
.LBB28_13:                              # %for.inc41
                                        #   in Loop: Header=BB28_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB28_7
.LBB28_14:                              # %for.end43
                                        #   in Loop: Header=BB28_5 Depth=1
	jmp	.LBB28_15
.LBB28_15:                              # %for.inc44
                                        #   in Loop: Header=BB28_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_5
.LBB28_16:                              # %for.end46
	movl	$0, -12(%rbp)
.LBB28_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_19 Depth 2
                                        #       Child Loop BB28_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB28_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB28_17 Depth=1
	movl	$0, -24(%rbp)
.LBB28_19:                              # %for.cond50
                                        #   Parent Loop BB28_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB28_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB28_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB28_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB28_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB28_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB28_26
.LBB28_22:                              # %cond.false61
                                        #   in Loop: Header=BB28_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB28_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB28_19 Depth=2
	movl	$127, %eax
	jmp	.LBB28_25
.LBB28_24:                              # %cond.false71
                                        #   in Loop: Header=BB28_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB28_25:                              # %cond.end79
                                        #   in Loop: Header=BB28_19 Depth=2
.LBB28_26:                              # %cond.end81
                                        #   in Loop: Header=BB28_19 Depth=2
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB28_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB28_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB28_32
.LBB28_28:                              # %cond.false90
                                        #   in Loop: Header=BB28_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB28_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB28_19 Depth=2
	movl	$127, %eax
	jmp	.LBB28_31
.LBB28_30:                              # %cond.false98
                                        #   in Loop: Header=BB28_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB28_31:                              # %cond.end104
                                        #   in Loop: Header=BB28_19 Depth=2
.LBB28_32:                              # %cond.end106
                                        #   in Loop: Header=BB28_19 Depth=2
	movl	%eax, -60(%rbp)
	movl	$0, -20(%rbp)
.LBB28_33:                              # %for.cond108
                                        #   Parent Loop BB28_17 Depth=1
                                        #     Parent Loop BB28_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB28_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB28_33 Depth=3
	cmpl	$0, -52(%rbp)
	jne	.LBB28_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB28_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB28_46
.LBB28_36:                              # %if.else
                                        #   in Loop: Header=BB28_33 Depth=3
	movl	-52(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-52(%rbp)
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB28_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB28_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB28_42
.LBB28_38:                              # %cond.false145
                                        #   in Loop: Header=BB28_33 Depth=3
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB28_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB28_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB28_41
.LBB28_40:                              # %cond.false151
                                        #   in Loop: Header=BB28_33 Depth=3
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB28_41:                              # %cond.end155
                                        #   in Loop: Header=BB28_33 Depth=3
.LBB28_42:                              # %cond.end157
                                        #   in Loop: Header=BB28_33 Depth=3
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB28_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB28_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB28_45
.LBB28_44:                              # %if.then183
                                        #   in Loop: Header=BB28_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB28_45:                              # %if.end
                                        #   in Loop: Header=BB28_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB28_46:                              # %if.end220
                                        #   in Loop: Header=BB28_33 Depth=3
	jmp	.LBB28_47
.LBB28_47:                              # %for.inc221
                                        #   in Loop: Header=BB28_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB28_33
.LBB28_48:                              # %for.end223
                                        #   in Loop: Header=BB28_19 Depth=2
	jmp	.LBB28_49
.LBB28_49:                              # %for.inc224
                                        #   in Loop: Header=BB28_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB28_19
.LBB28_50:                              # %for.end226
                                        #   in Loop: Header=BB28_17 Depth=1
	jmp	.LBB28_51
.LBB28_51:                              # %for.inc227
                                        #   in Loop: Header=BB28_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_17
.LBB28_52:                              # %for.end229
	cmpl	$1, -80(%rbp)
	jne	.LBB28_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB28_54:                              # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_56 Depth 2
                                        #       Child Loop BB28_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB28_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB28_54 Depth=1
	movl	$0, -24(%rbp)
.LBB28_56:                              # %for.cond235
                                        #   Parent Loop BB28_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB28_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB28_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB28_56 Depth=2
	movl	$0, -20(%rbp)
.LBB28_58:                              # %for.cond238
                                        #   Parent Loop BB28_54 Depth=1
                                        #     Parent Loop BB28_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB28_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB28_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB28_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB28_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB28_62
.LBB28_61:                              # %cond.false243
                                        #   in Loop: Header=BB28_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB28_62:                              # %cond.end244
                                        #   in Loop: Header=BB28_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -88(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB28_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB28_58
.LBB28_64:                              # %for.end276
                                        #   in Loop: Header=BB28_56 Depth=2
	jmp	.LBB28_65
.LBB28_65:                              # %for.inc277
                                        #   in Loop: Header=BB28_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB28_56
.LBB28_66:                              # %for.end279
                                        #   in Loop: Header=BB28_54 Depth=1
	jmp	.LBB28_67
.LBB28_67:                              # %for.inc280
                                        #   in Loop: Header=BB28_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_54
.LBB28_68:                              # %for.end282
	movl	$0, -16(%rbp)
.LBB28_69:                              # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB28_69 Depth=1
	movl	$0, -28(%rbp)
.LBB28_71:                              # %for.cond287
                                        #   Parent Loop BB28_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB28_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB28_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB28_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB28_71
.LBB28_74:                              # %for.end327
                                        #   in Loop: Header=BB28_69 Depth=1
	jmp	.LBB28_75
.LBB28_75:                              # %for.inc328
                                        #   in Loop: Header=BB28_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_69
.LBB28_76:                              # %for.end330
	jmp	.LBB28_142
.LBB28_77:                              # %if.else331
	movl	$0, -12(%rbp)
.LBB28_78:                              # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB28_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB28_78 Depth=1
	movl	$0, -24(%rbp)
.LBB28_80:                              # %for.cond335
                                        #   Parent Loop BB28_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB28_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB28_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB28_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB28_80
.LBB28_83:                              # %for.end345
                                        #   in Loop: Header=BB28_78 Depth=1
	jmp	.LBB28_84
.LBB28_84:                              # %for.inc346
                                        #   in Loop: Header=BB28_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_78
.LBB28_85:                              # %for.end348
	movl	$0, -16(%rbp)
.LBB28_86:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_88 Depth 2
                                        #       Child Loop BB28_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB28_86 Depth=1
	movl	$0, -32(%rbp)
.LBB28_88:                              # %for.cond354
                                        #   Parent Loop BB28_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB28_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB28_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB28_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB28_90:                              # %for.cond372
                                        #   Parent Loop BB28_86 Depth=1
                                        #     Parent Loop BB28_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB28_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB28_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_90
.LBB28_93:                              # %for.end389
                                        #   in Loop: Header=BB28_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB28_94
	jp	.LBB28_94
	jmp	.LBB28_95
.LBB28_94:                              # %if.then396
                                        #   in Loop: Header=BB28_88 Depth=2
	vmovsd	.LCPI28_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB28_96
.LBB28_95:                              # %if.else406
                                        #   in Loop: Header=BB28_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB28_96:                              # %if.end407
                                        #   in Loop: Header=BB28_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB28_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB28_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB28_99
.LBB28_98:                              # %if.then413
                                        #   in Loop: Header=BB28_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB28_99:                              # %if.end414
                                        #   in Loop: Header=BB28_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB28_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB28_88
.LBB28_101:                             # %for.end447
                                        #   in Loop: Header=BB28_86 Depth=1
	jmp	.LBB28_102
.LBB28_102:                             # %for.inc448
                                        #   in Loop: Header=BB28_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_86
.LBB28_103:                             # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB28_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB28_105:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_107 Depth 2
                                        #       Child Loop BB28_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB28_105 Depth=1
	movl	$0, -28(%rbp)
.LBB28_107:                             # %for.cond459
                                        #   Parent Loop BB28_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB28_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB28_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB28_107 Depth=2
	movl	$0, -20(%rbp)
.LBB28_109:                             # %for.cond465
                                        #   Parent Loop BB28_105 Depth=1
                                        #     Parent Loop BB28_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB28_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB28_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB28_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB28_109
.LBB28_112:                             # %for.end495
                                        #   in Loop: Header=BB28_107 Depth=2
	jmp	.LBB28_113
.LBB28_113:                             # %for.inc496
                                        #   in Loop: Header=BB28_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB28_107
.LBB28_114:                             # %for.end498
                                        #   in Loop: Header=BB28_105 Depth=1
	jmp	.LBB28_115
.LBB28_115:                             # %for.inc499
                                        #   in Loop: Header=BB28_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_105
.LBB28_116:                             # %for.end501
	jmp	.LBB28_126
.LBB28_117:                             # %if.else502
	movl	$0, -16(%rbp)
.LBB28_118:                             # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB28_118 Depth=1
	movl	$0, -28(%rbp)
.LBB28_120:                             # %for.cond508
                                        #   Parent Loop BB28_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB28_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB28_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB28_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB28_120
.LBB28_123:                             # %for.end549
                                        #   in Loop: Header=BB28_118 Depth=1
	jmp	.LBB28_124
.LBB28_124:                             # %for.inc550
                                        #   in Loop: Header=BB28_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_118
.LBB28_125:                             # %for.end552
	jmp	.LBB28_126
.LBB28_126:                             # %if.end553
	movl	$0, -12(%rbp)
.LBB28_127:                             # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_129 Depth 2
                                        #       Child Loop BB28_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB28_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB28_127 Depth=1
	movl	$0, -24(%rbp)
.LBB28_129:                             # %for.cond558
                                        #   Parent Loop BB28_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB28_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB28_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB28_129 Depth=2
	movl	$0, -20(%rbp)
.LBB28_131:                             # %for.cond562
                                        #   Parent Loop BB28_127 Depth=1
                                        #     Parent Loop BB28_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB28_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB28_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB28_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB28_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB28_135
.LBB28_134:                             # %cond.false569
                                        #   in Loop: Header=BB28_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB28_135:                             # %cond.end570
                                        #   in Loop: Header=BB28_131 Depth=3
	movl	%eax, -88(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB28_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB28_131
.LBB28_137:                             # %for.end598
                                        #   in Loop: Header=BB28_129 Depth=2
	jmp	.LBB28_138
.LBB28_138:                             # %for.inc599
                                        #   in Loop: Header=BB28_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB28_129
.LBB28_139:                             # %for.end601
                                        #   in Loop: Header=BB28_127 Depth=1
	jmp	.LBB28_140
.LBB28_140:                             # %for.inc602
                                        #   in Loop: Header=BB28_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_127
.LBB28_141:                             # %for.end604
	jmp	.LBB28_142
.LBB28_142:                             # %if.end605
	movl	$0, -16(%rbp)
.LBB28_143:                             # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_145 Depth 2
                                        #       Child Loop BB28_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB28_143 Depth=1
	movl	$0, -28(%rbp)
.LBB28_145:                             # %for.cond611
                                        #   Parent Loop BB28_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB28_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB28_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB28_145 Depth=2
	movl	$0, -20(%rbp)
.LBB28_147:                             # %for.cond617
                                        #   Parent Loop BB28_143 Depth=1
                                        #     Parent Loop BB28_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB28_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB28_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB28_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB28_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB28_151
.LBB28_150:                             # %if.then638
                                        #   in Loop: Header=BB28_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB28_154
.LBB28_151:                             # %if.end639
                                        #   in Loop: Header=BB28_147 Depth=3
	jmp	.LBB28_152
.LBB28_152:                             # %for.inc640
                                        #   in Loop: Header=BB28_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB28_147
.LBB28_153:                             # %for.end642.loopexit
                                        #   in Loop: Header=BB28_145 Depth=2
	jmp	.LBB28_154
.LBB28_154:                             # %for.end642
                                        #   in Loop: Header=BB28_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB28_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB28_143 Depth=1
	jmp	.LBB28_159
.LBB28_156:                             # %if.end646
                                        #   in Loop: Header=BB28_145 Depth=2
	jmp	.LBB28_157
.LBB28_157:                             # %for.inc647
                                        #   in Loop: Header=BB28_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB28_145
.LBB28_158:                             # %for.end649.loopexit
                                        #   in Loop: Header=BB28_143 Depth=1
	jmp	.LBB28_159
.LBB28_159:                             # %for.end649
                                        #   in Loop: Header=BB28_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB28_161
# %bb.160:                              # %if.then652
	jmp	.LBB28_164
.LBB28_161:                             # %if.end653
                                        #   in Loop: Header=BB28_143 Depth=1
	jmp	.LBB28_162
.LBB28_162:                             # %for.inc654
                                        #   in Loop: Header=BB28_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_143
.LBB28_163:                             # %for.end656.loopexit
	jmp	.LBB28_164
.LBB28_164:                             # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$1095185875, -84(%rbp)  # imm = 0x414735D3
	jne	.LBB28_166
.LBB28_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_166:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB28_165
.Lfunc_end28:
	.size	test_wp_B_slice.25, .Lfunc_end28-test_wp_B_slice.25
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.26
.LCPI29_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.26
	.p2align	4, 0x90
	.type	test_wp_B_slice.26,@function
test_wp_B_slice.26:                     # @test_wp_B_slice.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$1468331631, -76(%rbp)  # imm = 0x5784F66F
	movl	%edi, -80(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB29_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB29_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB29_4
.LBB29_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB29_4
.LBB29_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB29_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_7 Depth 2
                                        #       Child Loop BB29_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB29_5 Depth=1
	movl	$0, -24(%rbp)
.LBB29_7:                               # %for.cond9
                                        #   Parent Loop BB29_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB29_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB29_7 Depth=2
	movl	$0, -32(%rbp)
.LBB29_9:                               # %for.cond14
                                        #   Parent Loop BB29_5 Depth=1
                                        #     Parent Loop BB29_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB29_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB29_9 Depth=3
	movl	-40(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB29_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB29_9
.LBB29_12:                              # %for.end
                                        #   in Loop: Header=BB29_7 Depth=2
	jmp	.LBB29_13
.LBB29_13:                              # %for.inc41
                                        #   in Loop: Header=BB29_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB29_7
.LBB29_14:                              # %for.end43
                                        #   in Loop: Header=BB29_5 Depth=1
	jmp	.LBB29_15
.LBB29_15:                              # %for.inc44
                                        #   in Loop: Header=BB29_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_5
.LBB29_16:                              # %for.end46
	movl	$0, -12(%rbp)
.LBB29_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_19 Depth 2
                                        #       Child Loop BB29_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB29_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB29_17 Depth=1
	movl	$0, -24(%rbp)
.LBB29_19:                              # %for.cond50
                                        #   Parent Loop BB29_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB29_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB29_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB29_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB29_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB29_26
.LBB29_22:                              # %cond.false61
                                        #   in Loop: Header=BB29_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB29_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB29_19 Depth=2
	movl	$127, %eax
	jmp	.LBB29_25
.LBB29_24:                              # %cond.false71
                                        #   in Loop: Header=BB29_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB29_25:                              # %cond.end79
                                        #   in Loop: Header=BB29_19 Depth=2
.LBB29_26:                              # %cond.end81
                                        #   in Loop: Header=BB29_19 Depth=2
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB29_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB29_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB29_32
.LBB29_28:                              # %cond.false90
                                        #   in Loop: Header=BB29_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB29_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB29_19 Depth=2
	movl	$127, %eax
	jmp	.LBB29_31
.LBB29_30:                              # %cond.false98
                                        #   in Loop: Header=BB29_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB29_31:                              # %cond.end104
                                        #   in Loop: Header=BB29_19 Depth=2
.LBB29_32:                              # %cond.end106
                                        #   in Loop: Header=BB29_19 Depth=2
	movl	%eax, -60(%rbp)
	movl	$0, -20(%rbp)
.LBB29_33:                              # %for.cond108
                                        #   Parent Loop BB29_17 Depth=1
                                        #     Parent Loop BB29_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB29_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB29_33 Depth=3
	cmpl	$0, -52(%rbp)
	jne	.LBB29_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB29_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB29_46
.LBB29_36:                              # %if.else
                                        #   in Loop: Header=BB29_33 Depth=3
	movl	-52(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-52(%rbp)
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB29_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB29_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB29_42
.LBB29_38:                              # %cond.false145
                                        #   in Loop: Header=BB29_33 Depth=3
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB29_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB29_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB29_41
.LBB29_40:                              # %cond.false151
                                        #   in Loop: Header=BB29_33 Depth=3
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB29_41:                              # %cond.end155
                                        #   in Loop: Header=BB29_33 Depth=3
.LBB29_42:                              # %cond.end157
                                        #   in Loop: Header=BB29_33 Depth=3
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB29_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB29_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB29_45
.LBB29_44:                              # %if.then183
                                        #   in Loop: Header=BB29_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB29_45:                              # %if.end
                                        #   in Loop: Header=BB29_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB29_46:                              # %if.end220
                                        #   in Loop: Header=BB29_33 Depth=3
	jmp	.LBB29_47
.LBB29_47:                              # %for.inc221
                                        #   in Loop: Header=BB29_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB29_33
.LBB29_48:                              # %for.end223
                                        #   in Loop: Header=BB29_19 Depth=2
	jmp	.LBB29_49
.LBB29_49:                              # %for.inc224
                                        #   in Loop: Header=BB29_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB29_19
.LBB29_50:                              # %for.end226
                                        #   in Loop: Header=BB29_17 Depth=1
	jmp	.LBB29_51
.LBB29_51:                              # %for.inc227
                                        #   in Loop: Header=BB29_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_17
.LBB29_52:                              # %for.end229
	cmpl	$1, -80(%rbp)
	jne	.LBB29_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB29_54:                              # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_56 Depth 2
                                        #       Child Loop BB29_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB29_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB29_54 Depth=1
	movl	$0, -24(%rbp)
.LBB29_56:                              # %for.cond235
                                        #   Parent Loop BB29_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB29_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB29_56 Depth=2
	movl	$0, -20(%rbp)
.LBB29_58:                              # %for.cond238
                                        #   Parent Loop BB29_54 Depth=1
                                        #     Parent Loop BB29_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB29_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB29_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB29_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB29_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB29_62
.LBB29_61:                              # %cond.false243
                                        #   in Loop: Header=BB29_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB29_62:                              # %cond.end244
                                        #   in Loop: Header=BB29_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -84(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB29_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB29_58
.LBB29_64:                              # %for.end276
                                        #   in Loop: Header=BB29_56 Depth=2
	jmp	.LBB29_65
.LBB29_65:                              # %for.inc277
                                        #   in Loop: Header=BB29_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB29_56
.LBB29_66:                              # %for.end279
                                        #   in Loop: Header=BB29_54 Depth=1
	jmp	.LBB29_67
.LBB29_67:                              # %for.inc280
                                        #   in Loop: Header=BB29_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_54
.LBB29_68:                              # %for.end282
	movl	$0, -16(%rbp)
.LBB29_69:                              # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB29_69 Depth=1
	movl	$0, -28(%rbp)
.LBB29_71:                              # %for.cond287
                                        #   Parent Loop BB29_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB29_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB29_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB29_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB29_71
.LBB29_74:                              # %for.end327
                                        #   in Loop: Header=BB29_69 Depth=1
	jmp	.LBB29_75
.LBB29_75:                              # %for.inc328
                                        #   in Loop: Header=BB29_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_69
.LBB29_76:                              # %for.end330
	jmp	.LBB29_142
.LBB29_77:                              # %if.else331
	movl	$0, -12(%rbp)
.LBB29_78:                              # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB29_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB29_78 Depth=1
	movl	$0, -24(%rbp)
.LBB29_80:                              # %for.cond335
                                        #   Parent Loop BB29_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB29_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB29_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB29_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB29_80
.LBB29_83:                              # %for.end345
                                        #   in Loop: Header=BB29_78 Depth=1
	jmp	.LBB29_84
.LBB29_84:                              # %for.inc346
                                        #   in Loop: Header=BB29_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_78
.LBB29_85:                              # %for.end348
	movl	$0, -16(%rbp)
.LBB29_86:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_88 Depth 2
                                        #       Child Loop BB29_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB29_86 Depth=1
	movl	$0, -32(%rbp)
.LBB29_88:                              # %for.cond354
                                        #   Parent Loop BB29_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB29_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB29_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB29_90:                              # %for.cond372
                                        #   Parent Loop BB29_86 Depth=1
                                        #     Parent Loop BB29_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB29_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB29_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_90
.LBB29_93:                              # %for.end389
                                        #   in Loop: Header=BB29_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB29_94
	jp	.LBB29_94
	jmp	.LBB29_95
.LBB29_94:                              # %if.then396
                                        #   in Loop: Header=BB29_88 Depth=2
	vmovsd	.LCPI29_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB29_96
.LBB29_95:                              # %if.else406
                                        #   in Loop: Header=BB29_88 Depth=2
	movl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB29_96:                              # %if.end407
                                        #   in Loop: Header=BB29_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB29_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB29_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB29_99
.LBB29_98:                              # %if.then413
                                        #   in Loop: Header=BB29_88 Depth=2
	movl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB29_99:                              # %if.end414
                                        #   in Loop: Header=BB29_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB29_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB29_88
.LBB29_101:                             # %for.end447
                                        #   in Loop: Header=BB29_86 Depth=1
	jmp	.LBB29_102
.LBB29_102:                             # %for.inc448
                                        #   in Loop: Header=BB29_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_86
.LBB29_103:                             # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB29_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB29_105:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_107 Depth 2
                                        #       Child Loop BB29_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB29_105 Depth=1
	movl	$0, -28(%rbp)
.LBB29_107:                             # %for.cond459
                                        #   Parent Loop BB29_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB29_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB29_107 Depth=2
	movl	$0, -20(%rbp)
.LBB29_109:                             # %for.cond465
                                        #   Parent Loop BB29_105 Depth=1
                                        #     Parent Loop BB29_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB29_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB29_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB29_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB29_109
.LBB29_112:                             # %for.end495
                                        #   in Loop: Header=BB29_107 Depth=2
	jmp	.LBB29_113
.LBB29_113:                             # %for.inc496
                                        #   in Loop: Header=BB29_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB29_107
.LBB29_114:                             # %for.end498
                                        #   in Loop: Header=BB29_105 Depth=1
	jmp	.LBB29_115
.LBB29_115:                             # %for.inc499
                                        #   in Loop: Header=BB29_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_105
.LBB29_116:                             # %for.end501
	jmp	.LBB29_126
.LBB29_117:                             # %if.else502
	movl	$0, -16(%rbp)
.LBB29_118:                             # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB29_118 Depth=1
	movl	$0, -28(%rbp)
.LBB29_120:                             # %for.cond508
                                        #   Parent Loop BB29_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB29_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB29_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB29_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB29_120
.LBB29_123:                             # %for.end549
                                        #   in Loop: Header=BB29_118 Depth=1
	jmp	.LBB29_124
.LBB29_124:                             # %for.inc550
                                        #   in Loop: Header=BB29_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_118
.LBB29_125:                             # %for.end552
	jmp	.LBB29_126
.LBB29_126:                             # %if.end553
	movl	$0, -12(%rbp)
.LBB29_127:                             # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_129 Depth 2
                                        #       Child Loop BB29_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB29_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB29_127 Depth=1
	movl	$0, -24(%rbp)
.LBB29_129:                             # %for.cond558
                                        #   Parent Loop BB29_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB29_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB29_129 Depth=2
	movl	$0, -20(%rbp)
.LBB29_131:                             # %for.cond562
                                        #   Parent Loop BB29_127 Depth=1
                                        #     Parent Loop BB29_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB29_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB29_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB29_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB29_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB29_135
.LBB29_134:                             # %cond.false569
                                        #   in Loop: Header=BB29_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB29_135:                             # %cond.end570
                                        #   in Loop: Header=BB29_131 Depth=3
	movl	%eax, -84(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB29_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB29_131
.LBB29_137:                             # %for.end598
                                        #   in Loop: Header=BB29_129 Depth=2
	jmp	.LBB29_138
.LBB29_138:                             # %for.inc599
                                        #   in Loop: Header=BB29_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB29_129
.LBB29_139:                             # %for.end601
                                        #   in Loop: Header=BB29_127 Depth=1
	jmp	.LBB29_140
.LBB29_140:                             # %for.inc602
                                        #   in Loop: Header=BB29_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_127
.LBB29_141:                             # %for.end604
	jmp	.LBB29_142
.LBB29_142:                             # %if.end605
	movl	$0, -16(%rbp)
.LBB29_143:                             # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_145 Depth 2
                                        #       Child Loop BB29_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB29_143 Depth=1
	movl	$0, -28(%rbp)
.LBB29_145:                             # %for.cond611
                                        #   Parent Loop BB29_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB29_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB29_145 Depth=2
	movl	$0, -20(%rbp)
.LBB29_147:                             # %for.cond617
                                        #   Parent Loop BB29_143 Depth=1
                                        #     Parent Loop BB29_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB29_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB29_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB29_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB29_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB29_151
.LBB29_150:                             # %if.then638
                                        #   in Loop: Header=BB29_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB29_154
.LBB29_151:                             # %if.end639
                                        #   in Loop: Header=BB29_147 Depth=3
	jmp	.LBB29_152
.LBB29_152:                             # %for.inc640
                                        #   in Loop: Header=BB29_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB29_147
.LBB29_153:                             # %for.end642.loopexit
                                        #   in Loop: Header=BB29_145 Depth=2
	jmp	.LBB29_154
.LBB29_154:                             # %for.end642
                                        #   in Loop: Header=BB29_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB29_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB29_143 Depth=1
	jmp	.LBB29_159
.LBB29_156:                             # %if.end646
                                        #   in Loop: Header=BB29_145 Depth=2
	jmp	.LBB29_157
.LBB29_157:                             # %for.inc647
                                        #   in Loop: Header=BB29_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB29_145
.LBB29_158:                             # %for.end649.loopexit
                                        #   in Loop: Header=BB29_143 Depth=1
	jmp	.LBB29_159
.LBB29_159:                             # %for.end649
                                        #   in Loop: Header=BB29_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB29_161
# %bb.160:                              # %if.then652
	jmp	.LBB29_164
.LBB29_161:                             # %if.end653
                                        #   in Loop: Header=BB29_143 Depth=1
	jmp	.LBB29_162
.LBB29_162:                             # %for.inc654
                                        #   in Loop: Header=BB29_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_143
.LBB29_163:                             # %for.end656.loopexit
	jmp	.LBB29_164
.LBB29_164:                             # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$1468331631, -76(%rbp)  # imm = 0x5784F66F
	jne	.LBB29_166
.LBB29_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_166:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB29_165
.Lfunc_end29:
	.size	test_wp_B_slice.26, .Lfunc_end29-test_wp_B_slice.26
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.27
.LCPI30_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.27
	.p2align	4, 0x90
	.type	test_wp_B_slice.27,@function
test_wp_B_slice.27:                     # @test_wp_B_slice.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$1101829015, -80(%rbp)  # imm = 0x41AC9397
	movl	%edi, -88(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB30_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB30_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB30_4
.LBB30_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB30_4
.LBB30_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -36(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB30_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_7 Depth 2
                                        #       Child Loop BB30_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB30_5 Depth=1
	movl	$0, -24(%rbp)
.LBB30_7:                               # %for.cond9
                                        #   Parent Loop BB30_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB30_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB30_7 Depth=2
	movl	$0, -32(%rbp)
.LBB30_9:                               # %for.cond14
                                        #   Parent Loop BB30_5 Depth=1
                                        #     Parent Loop BB30_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB30_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB30_9 Depth=3
	movl	-36(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-36(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB30_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB30_9
.LBB30_12:                              # %for.end
                                        #   in Loop: Header=BB30_7 Depth=2
	jmp	.LBB30_13
.LBB30_13:                              # %for.inc41
                                        #   in Loop: Header=BB30_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB30_7
.LBB30_14:                              # %for.end43
                                        #   in Loop: Header=BB30_5 Depth=1
	jmp	.LBB30_15
.LBB30_15:                              # %for.inc44
                                        #   in Loop: Header=BB30_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_5
.LBB30_16:                              # %for.end46
	movl	$0, -12(%rbp)
.LBB30_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_19 Depth 2
                                        #       Child Loop BB30_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB30_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB30_17 Depth=1
	movl	$0, -24(%rbp)
.LBB30_19:                              # %for.cond50
                                        #   Parent Loop BB30_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB30_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB30_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB30_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB30_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB30_26
.LBB30_22:                              # %cond.false61
                                        #   in Loop: Header=BB30_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB30_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB30_19 Depth=2
	movl	$127, %eax
	jmp	.LBB30_25
.LBB30_24:                              # %cond.false71
                                        #   in Loop: Header=BB30_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB30_25:                              # %cond.end79
                                        #   in Loop: Header=BB30_19 Depth=2
.LBB30_26:                              # %cond.end81
                                        #   in Loop: Header=BB30_19 Depth=2
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB30_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB30_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB30_32
.LBB30_28:                              # %cond.false90
                                        #   in Loop: Header=BB30_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB30_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB30_19 Depth=2
	movl	$127, %eax
	jmp	.LBB30_31
.LBB30_30:                              # %cond.false98
                                        #   in Loop: Header=BB30_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB30_31:                              # %cond.end104
                                        #   in Loop: Header=BB30_19 Depth=2
.LBB30_32:                              # %cond.end106
                                        #   in Loop: Header=BB30_19 Depth=2
	movl	%eax, -60(%rbp)
	movl	$0, -20(%rbp)
.LBB30_33:                              # %for.cond108
                                        #   Parent Loop BB30_17 Depth=1
                                        #     Parent Loop BB30_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB30_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB30_33 Depth=3
	cmpl	$0, -52(%rbp)
	jne	.LBB30_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB30_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB30_46
.LBB30_36:                              # %if.else
                                        #   in Loop: Header=BB30_33 Depth=3
	movl	-52(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-52(%rbp)
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB30_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB30_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB30_42
.LBB30_38:                              # %cond.false145
                                        #   in Loop: Header=BB30_33 Depth=3
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB30_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB30_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB30_41
.LBB30_40:                              # %cond.false151
                                        #   in Loop: Header=BB30_33 Depth=3
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB30_41:                              # %cond.end155
                                        #   in Loop: Header=BB30_33 Depth=3
.LBB30_42:                              # %cond.end157
                                        #   in Loop: Header=BB30_33 Depth=3
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB30_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB30_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB30_45
.LBB30_44:                              # %if.then183
                                        #   in Loop: Header=BB30_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB30_45:                              # %if.end
                                        #   in Loop: Header=BB30_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB30_46:                              # %if.end220
                                        #   in Loop: Header=BB30_33 Depth=3
	jmp	.LBB30_47
.LBB30_47:                              # %for.inc221
                                        #   in Loop: Header=BB30_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB30_33
.LBB30_48:                              # %for.end223
                                        #   in Loop: Header=BB30_19 Depth=2
	jmp	.LBB30_49
.LBB30_49:                              # %for.inc224
                                        #   in Loop: Header=BB30_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB30_19
.LBB30_50:                              # %for.end226
                                        #   in Loop: Header=BB30_17 Depth=1
	jmp	.LBB30_51
.LBB30_51:                              # %for.inc227
                                        #   in Loop: Header=BB30_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_17
.LBB30_52:                              # %for.end229
	cmpl	$1, -88(%rbp)
	jne	.LBB30_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB30_54:                              # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_56 Depth 2
                                        #       Child Loop BB30_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB30_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB30_54 Depth=1
	movl	$0, -24(%rbp)
.LBB30_56:                              # %for.cond235
                                        #   Parent Loop BB30_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB30_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB30_56 Depth=2
	movl	$0, -20(%rbp)
.LBB30_58:                              # %for.cond238
                                        #   Parent Loop BB30_54 Depth=1
                                        #     Parent Loop BB30_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB30_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB30_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB30_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB30_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB30_62
.LBB30_61:                              # %cond.false243
                                        #   in Loop: Header=BB30_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB30_62:                              # %cond.end244
                                        #   in Loop: Header=BB30_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -76(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB30_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB30_58
.LBB30_64:                              # %for.end276
                                        #   in Loop: Header=BB30_56 Depth=2
	jmp	.LBB30_65
.LBB30_65:                              # %for.inc277
                                        #   in Loop: Header=BB30_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB30_56
.LBB30_66:                              # %for.end279
                                        #   in Loop: Header=BB30_54 Depth=1
	jmp	.LBB30_67
.LBB30_67:                              # %for.inc280
                                        #   in Loop: Header=BB30_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_54
.LBB30_68:                              # %for.end282
	movl	$0, -16(%rbp)
.LBB30_69:                              # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB30_69 Depth=1
	movl	$0, -28(%rbp)
.LBB30_71:                              # %for.cond287
                                        #   Parent Loop BB30_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB30_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB30_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB30_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB30_71
.LBB30_74:                              # %for.end327
                                        #   in Loop: Header=BB30_69 Depth=1
	jmp	.LBB30_75
.LBB30_75:                              # %for.inc328
                                        #   in Loop: Header=BB30_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_69
.LBB30_76:                              # %for.end330
	jmp	.LBB30_142
.LBB30_77:                              # %if.else331
	movl	$0, -12(%rbp)
.LBB30_78:                              # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB30_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB30_78 Depth=1
	movl	$0, -24(%rbp)
.LBB30_80:                              # %for.cond335
                                        #   Parent Loop BB30_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB30_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB30_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB30_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB30_80
.LBB30_83:                              # %for.end345
                                        #   in Loop: Header=BB30_78 Depth=1
	jmp	.LBB30_84
.LBB30_84:                              # %for.inc346
                                        #   in Loop: Header=BB30_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_78
.LBB30_85:                              # %for.end348
	movl	$0, -16(%rbp)
.LBB30_86:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_88 Depth 2
                                        #       Child Loop BB30_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB30_86 Depth=1
	movl	$0, -32(%rbp)
.LBB30_88:                              # %for.cond354
                                        #   Parent Loop BB30_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB30_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB30_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB30_90:                              # %for.cond372
                                        #   Parent Loop BB30_86 Depth=1
                                        #     Parent Loop BB30_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB30_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB30_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_90
.LBB30_93:                              # %for.end389
                                        #   in Loop: Header=BB30_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB30_94
	jp	.LBB30_94
	jmp	.LBB30_95
.LBB30_94:                              # %if.then396
                                        #   in Loop: Header=BB30_88 Depth=2
	vmovsd	.LCPI30_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB30_96
.LBB30_95:                              # %if.else406
                                        #   in Loop: Header=BB30_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB30_96:                              # %if.end407
                                        #   in Loop: Header=BB30_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB30_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB30_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB30_99
.LBB30_98:                              # %if.then413
                                        #   in Loop: Header=BB30_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB30_99:                              # %if.end414
                                        #   in Loop: Header=BB30_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB30_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB30_88
.LBB30_101:                             # %for.end447
                                        #   in Loop: Header=BB30_86 Depth=1
	jmp	.LBB30_102
.LBB30_102:                             # %for.inc448
                                        #   in Loop: Header=BB30_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_86
.LBB30_103:                             # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB30_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB30_105:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_107 Depth 2
                                        #       Child Loop BB30_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB30_105 Depth=1
	movl	$0, -28(%rbp)
.LBB30_107:                             # %for.cond459
                                        #   Parent Loop BB30_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB30_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB30_107 Depth=2
	movl	$0, -20(%rbp)
.LBB30_109:                             # %for.cond465
                                        #   Parent Loop BB30_105 Depth=1
                                        #     Parent Loop BB30_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB30_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB30_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB30_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB30_109
.LBB30_112:                             # %for.end495
                                        #   in Loop: Header=BB30_107 Depth=2
	jmp	.LBB30_113
.LBB30_113:                             # %for.inc496
                                        #   in Loop: Header=BB30_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB30_107
.LBB30_114:                             # %for.end498
                                        #   in Loop: Header=BB30_105 Depth=1
	jmp	.LBB30_115
.LBB30_115:                             # %for.inc499
                                        #   in Loop: Header=BB30_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_105
.LBB30_116:                             # %for.end501
	jmp	.LBB30_126
.LBB30_117:                             # %if.else502
	movl	$0, -16(%rbp)
.LBB30_118:                             # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB30_118 Depth=1
	movl	$0, -28(%rbp)
.LBB30_120:                             # %for.cond508
                                        #   Parent Loop BB30_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB30_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB30_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB30_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB30_120
.LBB30_123:                             # %for.end549
                                        #   in Loop: Header=BB30_118 Depth=1
	jmp	.LBB30_124
.LBB30_124:                             # %for.inc550
                                        #   in Loop: Header=BB30_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_118
.LBB30_125:                             # %for.end552
	jmp	.LBB30_126
.LBB30_126:                             # %if.end553
	movl	$0, -12(%rbp)
.LBB30_127:                             # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_129 Depth 2
                                        #       Child Loop BB30_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB30_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB30_127 Depth=1
	movl	$0, -24(%rbp)
.LBB30_129:                             # %for.cond558
                                        #   Parent Loop BB30_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB30_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB30_129 Depth=2
	movl	$0, -20(%rbp)
.LBB30_131:                             # %for.cond562
                                        #   Parent Loop BB30_127 Depth=1
                                        #     Parent Loop BB30_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB30_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB30_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB30_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB30_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB30_135
.LBB30_134:                             # %cond.false569
                                        #   in Loop: Header=BB30_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB30_135:                             # %cond.end570
                                        #   in Loop: Header=BB30_131 Depth=3
	movl	%eax, -76(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB30_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB30_131
.LBB30_137:                             # %for.end598
                                        #   in Loop: Header=BB30_129 Depth=2
	jmp	.LBB30_138
.LBB30_138:                             # %for.inc599
                                        #   in Loop: Header=BB30_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB30_129
.LBB30_139:                             # %for.end601
                                        #   in Loop: Header=BB30_127 Depth=1
	jmp	.LBB30_140
.LBB30_140:                             # %for.inc602
                                        #   in Loop: Header=BB30_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_127
.LBB30_141:                             # %for.end604
	jmp	.LBB30_142
.LBB30_142:                             # %if.end605
	movl	$0, -16(%rbp)
.LBB30_143:                             # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_145 Depth 2
                                        #       Child Loop BB30_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB30_143 Depth=1
	movl	$0, -28(%rbp)
.LBB30_145:                             # %for.cond611
                                        #   Parent Loop BB30_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB30_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB30_145 Depth=2
	movl	$0, -20(%rbp)
.LBB30_147:                             # %for.cond617
                                        #   Parent Loop BB30_143 Depth=1
                                        #     Parent Loop BB30_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB30_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB30_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB30_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB30_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB30_151
.LBB30_150:                             # %if.then638
                                        #   in Loop: Header=BB30_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB30_154
.LBB30_151:                             # %if.end639
                                        #   in Loop: Header=BB30_147 Depth=3
	jmp	.LBB30_152
.LBB30_152:                             # %for.inc640
                                        #   in Loop: Header=BB30_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB30_147
.LBB30_153:                             # %for.end642.loopexit
                                        #   in Loop: Header=BB30_145 Depth=2
	jmp	.LBB30_154
.LBB30_154:                             # %for.end642
                                        #   in Loop: Header=BB30_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB30_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB30_143 Depth=1
	jmp	.LBB30_159
.LBB30_156:                             # %if.end646
                                        #   in Loop: Header=BB30_145 Depth=2
	jmp	.LBB30_157
.LBB30_157:                             # %for.inc647
                                        #   in Loop: Header=BB30_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB30_145
.LBB30_158:                             # %for.end649.loopexit
                                        #   in Loop: Header=BB30_143 Depth=1
	jmp	.LBB30_159
.LBB30_159:                             # %for.end649
                                        #   in Loop: Header=BB30_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB30_161
# %bb.160:                              # %if.then652
	jmp	.LBB30_164
.LBB30_161:                             # %if.end653
                                        #   in Loop: Header=BB30_143 Depth=1
	jmp	.LBB30_162
.LBB30_162:                             # %for.inc654
                                        #   in Loop: Header=BB30_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_143
.LBB30_163:                             # %for.end656.loopexit
	jmp	.LBB30_164
.LBB30_164:                             # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$1101829015, -80(%rbp)  # imm = 0x41AC9397
	jne	.LBB30_166
.LBB30_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_166:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB30_165
.Lfunc_end30:
	.size	test_wp_B_slice.27, .Lfunc_end30-test_wp_B_slice.27
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.28
.LCPI31_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.28
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.28,@function
estimate_weighting_factor_P_slice.28:   # @estimate_weighting_factor_P_slice.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$516299163, -60(%rbp)   # imm = 0x1EC6199B
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB31_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB31_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB31_4
.LBB31_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB31_4
.LBB31_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB31_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_7 Depth 2
                                        #       Child Loop BB31_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB31_5 Depth=1
	movl	$0, -16(%rbp)
.LBB31_7:                               # %for.cond12
                                        #   Parent Loop BB31_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB31_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB31_7 Depth=2
	movl	$0, -4(%rbp)
.LBB31_9:                               # %for.cond17
                                        #   Parent Loop BB31_5 Depth=1
                                        #     Parent Loop BB31_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB31_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB31_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB31_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_9
.LBB31_12:                              # %for.end
                                        #   in Loop: Header=BB31_7 Depth=2
	jmp	.LBB31_13
.LBB31_13:                              # %for.inc48
                                        #   in Loop: Header=BB31_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_7
.LBB31_14:                              # %for.end50
                                        #   in Loop: Header=BB31_5 Depth=1
	jmp	.LBB31_15
.LBB31_15:                              # %for.inc51
                                        #   in Loop: Header=BB31_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_5
.LBB31_16:                              # %for.end53
	movl	$0, -12(%rbp)
.LBB31_17:                              # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB31_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB31_17 Depth=1
	movl	$0, -16(%rbp)
.LBB31_19:                              # %for.cond57
                                        #   Parent Loop BB31_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB31_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB31_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB31_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_19
.LBB31_22:                              # %for.end67
                                        #   in Loop: Header=BB31_17 Depth=1
	jmp	.LBB31_23
.LBB31_23:                              # %for.inc68
                                        #   in Loop: Header=BB31_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_17
.LBB31_24:                              # %for.end70
	movl	$0, -8(%rbp)
.LBB31_25:                              # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_27 Depth 2
                                        #       Child Loop BB31_29 Depth 3
                                        #       Child Loop BB31_48 Depth 3
                                        #       Child Loop BB31_58 Depth 3
                                        #         Child Loop BB31_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB31_25 Depth=1
	movl	$0, -4(%rbp)
.LBB31_27:                              # %for.cond76
                                        #   Parent Loop BB31_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_29 Depth 3
                                        #       Child Loop BB31_48 Depth 3
                                        #       Child Loop BB31_58 Depth 3
                                        #         Child Loop BB31_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB31_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB31_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -48(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB31_29:                              # %for.cond92
                                        #   Parent Loop BB31_25 Depth=1
                                        #     Parent Loop BB31_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB31_29 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB31_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_29
.LBB31_32:                              # %for.end106
                                        #   in Loop: Header=BB31_27 Depth=2
	vcvtsi2sdl	-64(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB31_40
	jp	.LBB31_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB31_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB31_34
	jp	.LBB31_34
	jmp	.LBB31_35
.LBB31_34:                              # %if.then114
                                        #   in Loop: Header=BB31_27 Depth=2
	vmovsd	.LCPI31_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB31_36
.LBB31_35:                              # %if.else
                                        #   in Loop: Header=BB31_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB31_36:                              # %if.end
                                        #   in Loop: Header=BB31_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB31_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB31_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB31_39
.LBB31_38:                              # %if.then147
                                        #   in Loop: Header=BB31_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB31_39:                              # %if.end154
                                        #   in Loop: Header=BB31_27 Depth=2
	jmp	.LBB31_47
.LBB31_40:                              # %if.else155
                                        #   in Loop: Header=BB31_27 Depth=2
	vmovsd	.LCPI31_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB31_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB31_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB31_46
.LBB31_42:                              # %cond.false179
                                        #   in Loop: Header=BB31_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB31_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB31_27 Depth=2
	movl	$127, %eax
	jmp	.LBB31_45
.LBB31_44:                              # %cond.false188
                                        #   in Loop: Header=BB31_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB31_45:                              # %cond.end194
                                        #   in Loop: Header=BB31_27 Depth=2
.LBB31_46:                              # %cond.end196
                                        #   in Loop: Header=BB31_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB31_47:                              # %if.end209
                                        #   in Loop: Header=BB31_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB31_48:                              # %for.cond222
                                        #   Parent Loop BB31_25 Depth=1
                                        #     Parent Loop BB31_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB31_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB31_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB31_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB31_55
.LBB31_51:                              # %cond.false248
                                        #   in Loop: Header=BB31_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB31_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB31_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_54
.LBB31_53:                              # %cond.false270
                                        #   in Loop: Header=BB31_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB31_54:                              # %cond.end288
                                        #   in Loop: Header=BB31_48 Depth=3
.LBB31_55:                              # %cond.end290
                                        #   in Loop: Header=BB31_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB31_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_48
.LBB31_57:                              # %for.end297
                                        #   in Loop: Header=BB31_27 Depth=2
	movl	$0, -12(%rbp)
.LBB31_58:                              # %for.cond298
                                        #   Parent Loop BB31_25 Depth=1
                                        #     Parent Loop BB31_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB31_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB31_58 Depth=3
	movl	$0, -16(%rbp)
.LBB31_60:                              # %for.cond305
                                        #   Parent Loop BB31_25 Depth=1
                                        #     Parent Loop BB31_27 Depth=2
                                        #       Parent Loop BB31_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB31_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB31_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB31_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB31_67
.LBB31_63:                              # %cond.false336
                                        #   in Loop: Header=BB31_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB31_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB31_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_66
.LBB31_65:                              # %cond.false364
                                        #   in Loop: Header=BB31_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB31_66:                              # %cond.end387
                                        #   in Loop: Header=BB31_60 Depth=4
.LBB31_67:                              # %cond.end389
                                        #   in Loop: Header=BB31_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB31_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_60
.LBB31_69:                              # %for.end400
                                        #   in Loop: Header=BB31_58 Depth=3
	jmp	.LBB31_70
.LBB31_70:                              # %for.inc401
                                        #   in Loop: Header=BB31_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_58
.LBB31_71:                              # %for.end403
                                        #   in Loop: Header=BB31_27 Depth=2
	jmp	.LBB31_72
.LBB31_72:                              # %for.inc404
                                        #   in Loop: Header=BB31_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_27
.LBB31_73:                              # %for.end406
                                        #   in Loop: Header=BB31_25 Depth=1
	jmp	.LBB31_74
.LBB31_74:                              # %for.inc407
                                        #   in Loop: Header=BB31_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_25
.LBB31_75:                              # %for.end409
	movl	$0, -8(%rbp)
.LBB31_76:                              # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_78 Depth 2
                                        #       Child Loop BB31_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB31_76 Depth=1
	movl	$0, -24(%rbp)
.LBB31_78:                              # %for.cond415
                                        #   Parent Loop BB31_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_80 Depth 3
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB31_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB31_78 Depth=2
	movl	$0, -20(%rbp)
.LBB31_80:                              # %for.cond421
                                        #   Parent Loop BB31_76 Depth=1
                                        #     Parent Loop BB31_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB31_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB31_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB31_80 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB31_80
.LBB31_83:                              # %for.end451
                                        #   in Loop: Header=BB31_78 Depth=2
	jmp	.LBB31_84
.LBB31_84:                              # %for.inc452
                                        #   in Loop: Header=BB31_78 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB31_78
.LBB31_85:                              # %for.end454
                                        #   in Loop: Header=BB31_76 Depth=1
	jmp	.LBB31_86
.LBB31_86:                              # %for.inc455
                                        #   in Loop: Header=BB31_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_76
.LBB31_87:                              # %for.end457
	cmpl	$516299163, -60(%rbp)   # imm = 0x1EC6199B
	jne	.LBB31_89
.LBB31_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB31_88
.Lfunc_end31:
	.size	estimate_weighting_factor_P_slice.28, .Lfunc_end31-estimate_weighting_factor_P_slice.28
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.29
.LCPI32_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.29
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.29,@function
estimate_weighting_factor_P_slice.29:   # @estimate_weighting_factor_P_slice.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$1020272518, -64(%rbp)  # imm = 0x3CD01F86
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB32_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB32_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB32_4
.LBB32_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB32_4
.LBB32_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB32_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_7 Depth 2
                                        #       Child Loop BB32_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB32_5 Depth=1
	movl	$0, -16(%rbp)
.LBB32_7:                               # %for.cond12
                                        #   Parent Loop BB32_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB32_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB32_7 Depth=2
	movl	$0, -4(%rbp)
.LBB32_9:                               # %for.cond17
                                        #   Parent Loop BB32_5 Depth=1
                                        #     Parent Loop BB32_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB32_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB32_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB32_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_9
.LBB32_12:                              # %for.end
                                        #   in Loop: Header=BB32_7 Depth=2
	jmp	.LBB32_13
.LBB32_13:                              # %for.inc48
                                        #   in Loop: Header=BB32_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_7
.LBB32_14:                              # %for.end50
                                        #   in Loop: Header=BB32_5 Depth=1
	jmp	.LBB32_15
.LBB32_15:                              # %for.inc51
                                        #   in Loop: Header=BB32_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_5
.LBB32_16:                              # %for.end53
	movl	$0, -12(%rbp)
.LBB32_17:                              # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB32_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB32_17 Depth=1
	movl	$0, -16(%rbp)
.LBB32_19:                              # %for.cond57
                                        #   Parent Loop BB32_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB32_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB32_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-48(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB32_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_19
.LBB32_22:                              # %for.end67
                                        #   in Loop: Header=BB32_17 Depth=1
	jmp	.LBB32_23
.LBB32_23:                              # %for.inc68
                                        #   in Loop: Header=BB32_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_17
.LBB32_24:                              # %for.end70
	movl	$0, -8(%rbp)
.LBB32_25:                              # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_27 Depth 2
                                        #       Child Loop BB32_29 Depth 3
                                        #       Child Loop BB32_48 Depth 3
                                        #       Child Loop BB32_58 Depth 3
                                        #         Child Loop BB32_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB32_25 Depth=1
	movl	$0, -4(%rbp)
.LBB32_27:                              # %for.cond76
                                        #   Parent Loop BB32_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_29 Depth 3
                                        #       Child Loop BB32_48 Depth 3
                                        #       Child Loop BB32_58 Depth 3
                                        #         Child Loop BB32_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB32_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB32_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -56(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB32_29:                              # %for.cond92
                                        #   Parent Loop BB32_25 Depth=1
                                        #     Parent Loop BB32_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB32_29 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB32_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_29
.LBB32_32:                              # %for.end106
                                        #   in Loop: Header=BB32_27 Depth=2
	vcvtsi2sdl	-60(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB32_40
	jp	.LBB32_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB32_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB32_34
	jp	.LBB32_34
	jmp	.LBB32_35
.LBB32_34:                              # %if.then114
                                        #   in Loop: Header=BB32_27 Depth=2
	vmovsd	.LCPI32_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-48(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB32_36
.LBB32_35:                              # %if.else
                                        #   in Loop: Header=BB32_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB32_36:                              # %if.end
                                        #   in Loop: Header=BB32_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB32_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB32_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB32_39
.LBB32_38:                              # %if.then147
                                        #   in Loop: Header=BB32_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB32_39:                              # %if.end154
                                        #   in Loop: Header=BB32_27 Depth=2
	jmp	.LBB32_47
.LBB32_40:                              # %if.else155
                                        #   in Loop: Header=BB32_27 Depth=2
	vmovsd	.LCPI32_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-48(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB32_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB32_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB32_46
.LBB32_42:                              # %cond.false179
                                        #   in Loop: Header=BB32_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB32_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB32_27 Depth=2
	movl	$127, %eax
	jmp	.LBB32_45
.LBB32_44:                              # %cond.false188
                                        #   in Loop: Header=BB32_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB32_45:                              # %cond.end194
                                        #   in Loop: Header=BB32_27 Depth=2
.LBB32_46:                              # %cond.end196
                                        #   in Loop: Header=BB32_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB32_47:                              # %if.end209
                                        #   in Loop: Header=BB32_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB32_48:                              # %for.cond222
                                        #   Parent Loop BB32_25 Depth=1
                                        #     Parent Loop BB32_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB32_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB32_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB32_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB32_55
.LBB32_51:                              # %cond.false248
                                        #   in Loop: Header=BB32_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB32_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB32_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB32_54
.LBB32_53:                              # %cond.false270
                                        #   in Loop: Header=BB32_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB32_54:                              # %cond.end288
                                        #   in Loop: Header=BB32_48 Depth=3
.LBB32_55:                              # %cond.end290
                                        #   in Loop: Header=BB32_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB32_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_48
.LBB32_57:                              # %for.end297
                                        #   in Loop: Header=BB32_27 Depth=2
	movl	$0, -12(%rbp)
.LBB32_58:                              # %for.cond298
                                        #   Parent Loop BB32_25 Depth=1
                                        #     Parent Loop BB32_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB32_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB32_58 Depth=3
	movl	$0, -16(%rbp)
.LBB32_60:                              # %for.cond305
                                        #   Parent Loop BB32_25 Depth=1
                                        #     Parent Loop BB32_27 Depth=2
                                        #       Parent Loop BB32_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB32_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB32_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB32_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB32_67
.LBB32_63:                              # %cond.false336
                                        #   in Loop: Header=BB32_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB32_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB32_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB32_66
.LBB32_65:                              # %cond.false364
                                        #   in Loop: Header=BB32_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB32_66:                              # %cond.end387
                                        #   in Loop: Header=BB32_60 Depth=4
.LBB32_67:                              # %cond.end389
                                        #   in Loop: Header=BB32_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB32_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_60
.LBB32_69:                              # %for.end400
                                        #   in Loop: Header=BB32_58 Depth=3
	jmp	.LBB32_70
.LBB32_70:                              # %for.inc401
                                        #   in Loop: Header=BB32_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_58
.LBB32_71:                              # %for.end403
                                        #   in Loop: Header=BB32_27 Depth=2
	jmp	.LBB32_72
.LBB32_72:                              # %for.inc404
                                        #   in Loop: Header=BB32_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_27
.LBB32_73:                              # %for.end406
                                        #   in Loop: Header=BB32_25 Depth=1
	jmp	.LBB32_74
.LBB32_74:                              # %for.inc407
                                        #   in Loop: Header=BB32_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_25
.LBB32_75:                              # %for.end409
	movl	$0, -8(%rbp)
.LBB32_76:                              # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_78 Depth 2
                                        #       Child Loop BB32_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB32_76 Depth=1
	movl	$0, -20(%rbp)
.LBB32_78:                              # %for.cond415
                                        #   Parent Loop BB32_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_80 Depth 3
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB32_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB32_78 Depth=2
	movl	$0, -24(%rbp)
.LBB32_80:                              # %for.cond421
                                        #   Parent Loop BB32_76 Depth=1
                                        #     Parent Loop BB32_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -24(%rbp)
	jge	.LBB32_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB32_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB32_80 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_80
.LBB32_83:                              # %for.end451
                                        #   in Loop: Header=BB32_78 Depth=2
	jmp	.LBB32_84
.LBB32_84:                              # %for.inc452
                                        #   in Loop: Header=BB32_78 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_78
.LBB32_85:                              # %for.end454
                                        #   in Loop: Header=BB32_76 Depth=1
	jmp	.LBB32_86
.LBB32_86:                              # %for.inc455
                                        #   in Loop: Header=BB32_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_76
.LBB32_87:                              # %for.end457
	cmpl	$1020272518, -64(%rbp)  # imm = 0x3CD01F86
	jne	.LBB32_89
.LBB32_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_88
.Lfunc_end32:
	.size	estimate_weighting_factor_P_slice.29, .Lfunc_end32-estimate_weighting_factor_P_slice.29
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.30
.LCPI33_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.30
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.30,@function
estimate_weighting_factor_P_slice.30:   # @estimate_weighting_factor_P_slice.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$1171149349, -64(%rbp)  # imm = 0x45CE5225
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB33_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB33_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB33_4
.LBB33_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB33_4
.LBB33_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB33_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_7 Depth 2
                                        #       Child Loop BB33_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB33_5 Depth=1
	movl	$0, -16(%rbp)
.LBB33_7:                               # %for.cond12
                                        #   Parent Loop BB33_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB33_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB33_7 Depth=2
	movl	$0, -4(%rbp)
.LBB33_9:                               # %for.cond17
                                        #   Parent Loop BB33_5 Depth=1
                                        #     Parent Loop BB33_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB33_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB33_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB33_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_9
.LBB33_12:                              # %for.end
                                        #   in Loop: Header=BB33_7 Depth=2
	jmp	.LBB33_13
.LBB33_13:                              # %for.inc48
                                        #   in Loop: Header=BB33_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_7
.LBB33_14:                              # %for.end50
                                        #   in Loop: Header=BB33_5 Depth=1
	jmp	.LBB33_15
.LBB33_15:                              # %for.inc51
                                        #   in Loop: Header=BB33_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_5
.LBB33_16:                              # %for.end53
	movl	$0, -12(%rbp)
.LBB33_17:                              # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB33_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB33_17 Depth=1
	movl	$0, -16(%rbp)
.LBB33_19:                              # %for.cond57
                                        #   Parent Loop BB33_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB33_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB33_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-48(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB33_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_19
.LBB33_22:                              # %for.end67
                                        #   in Loop: Header=BB33_17 Depth=1
	jmp	.LBB33_23
.LBB33_23:                              # %for.inc68
                                        #   in Loop: Header=BB33_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_17
.LBB33_24:                              # %for.end70
	movl	$0, -8(%rbp)
.LBB33_25:                              # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_27 Depth 2
                                        #       Child Loop BB33_29 Depth 3
                                        #       Child Loop BB33_48 Depth 3
                                        #       Child Loop BB33_58 Depth 3
                                        #         Child Loop BB33_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB33_25 Depth=1
	movl	$0, -4(%rbp)
.LBB33_27:                              # %for.cond76
                                        #   Parent Loop BB33_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_29 Depth 3
                                        #       Child Loop BB33_48 Depth 3
                                        #       Child Loop BB33_58 Depth 3
                                        #         Child Loop BB33_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB33_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB33_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -56(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB33_29:                              # %for.cond92
                                        #   Parent Loop BB33_25 Depth=1
                                        #     Parent Loop BB33_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB33_29 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB33_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_29
.LBB33_32:                              # %for.end106
                                        #   in Loop: Header=BB33_27 Depth=2
	vcvtsi2sdl	-60(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB33_40
	jp	.LBB33_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB33_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB33_34
	jp	.LBB33_34
	jmp	.LBB33_35
.LBB33_34:                              # %if.then114
                                        #   in Loop: Header=BB33_27 Depth=2
	vmovsd	.LCPI33_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-48(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB33_36
.LBB33_35:                              # %if.else
                                        #   in Loop: Header=BB33_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB33_36:                              # %if.end
                                        #   in Loop: Header=BB33_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB33_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB33_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB33_39
.LBB33_38:                              # %if.then147
                                        #   in Loop: Header=BB33_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB33_39:                              # %if.end154
                                        #   in Loop: Header=BB33_27 Depth=2
	jmp	.LBB33_47
.LBB33_40:                              # %if.else155
                                        #   in Loop: Header=BB33_27 Depth=2
	vmovsd	.LCPI33_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-48(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB33_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB33_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB33_46
.LBB33_42:                              # %cond.false179
                                        #   in Loop: Header=BB33_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB33_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB33_27 Depth=2
	movl	$127, %eax
	jmp	.LBB33_45
.LBB33_44:                              # %cond.false188
                                        #   in Loop: Header=BB33_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB33_45:                              # %cond.end194
                                        #   in Loop: Header=BB33_27 Depth=2
.LBB33_46:                              # %cond.end196
                                        #   in Loop: Header=BB33_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB33_47:                              # %if.end209
                                        #   in Loop: Header=BB33_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB33_48:                              # %for.cond222
                                        #   Parent Loop BB33_25 Depth=1
                                        #     Parent Loop BB33_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB33_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB33_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB33_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB33_55
.LBB33_51:                              # %cond.false248
                                        #   in Loop: Header=BB33_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB33_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB33_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB33_54
.LBB33_53:                              # %cond.false270
                                        #   in Loop: Header=BB33_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB33_54:                              # %cond.end288
                                        #   in Loop: Header=BB33_48 Depth=3
.LBB33_55:                              # %cond.end290
                                        #   in Loop: Header=BB33_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB33_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_48
.LBB33_57:                              # %for.end297
                                        #   in Loop: Header=BB33_27 Depth=2
	movl	$0, -12(%rbp)
.LBB33_58:                              # %for.cond298
                                        #   Parent Loop BB33_25 Depth=1
                                        #     Parent Loop BB33_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB33_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB33_58 Depth=3
	movl	$0, -16(%rbp)
.LBB33_60:                              # %for.cond305
                                        #   Parent Loop BB33_25 Depth=1
                                        #     Parent Loop BB33_27 Depth=2
                                        #       Parent Loop BB33_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB33_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB33_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB33_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB33_67
.LBB33_63:                              # %cond.false336
                                        #   in Loop: Header=BB33_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB33_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB33_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB33_66
.LBB33_65:                              # %cond.false364
                                        #   in Loop: Header=BB33_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB33_66:                              # %cond.end387
                                        #   in Loop: Header=BB33_60 Depth=4
.LBB33_67:                              # %cond.end389
                                        #   in Loop: Header=BB33_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB33_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_60
.LBB33_69:                              # %for.end400
                                        #   in Loop: Header=BB33_58 Depth=3
	jmp	.LBB33_70
.LBB33_70:                              # %for.inc401
                                        #   in Loop: Header=BB33_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_58
.LBB33_71:                              # %for.end403
                                        #   in Loop: Header=BB33_27 Depth=2
	jmp	.LBB33_72
.LBB33_72:                              # %for.inc404
                                        #   in Loop: Header=BB33_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_27
.LBB33_73:                              # %for.end406
                                        #   in Loop: Header=BB33_25 Depth=1
	jmp	.LBB33_74
.LBB33_74:                              # %for.inc407
                                        #   in Loop: Header=BB33_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_25
.LBB33_75:                              # %for.end409
	movl	$0, -8(%rbp)
.LBB33_76:                              # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_78 Depth 2
                                        #       Child Loop BB33_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB33_76 Depth=1
	movl	$0, -20(%rbp)
.LBB33_78:                              # %for.cond415
                                        #   Parent Loop BB33_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_80 Depth 3
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB33_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB33_78 Depth=2
	movl	$0, -24(%rbp)
.LBB33_80:                              # %for.cond421
                                        #   Parent Loop BB33_76 Depth=1
                                        #     Parent Loop BB33_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -24(%rbp)
	jge	.LBB33_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB33_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB33_80 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB33_80
.LBB33_83:                              # %for.end451
                                        #   in Loop: Header=BB33_78 Depth=2
	jmp	.LBB33_84
.LBB33_84:                              # %for.inc452
                                        #   in Loop: Header=BB33_78 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB33_78
.LBB33_85:                              # %for.end454
                                        #   in Loop: Header=BB33_76 Depth=1
	jmp	.LBB33_86
.LBB33_86:                              # %for.inc455
                                        #   in Loop: Header=BB33_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_76
.LBB33_87:                              # %for.end457
	cmpl	$1171149349, -64(%rbp)  # imm = 0x45CE5225
	jne	.LBB33_89
.LBB33_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB33_88
.Lfunc_end33:
	.size	estimate_weighting_factor_P_slice.30, .Lfunc_end33-estimate_weighting_factor_P_slice.30
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.31
.LCPI34_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.31
	.p2align	4, 0x90
	.type	test_wp_B_slice.31,@function
test_wp_B_slice.31:                     # @test_wp_B_slice.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$1110710966, -80(%rbp)  # imm = 0x42341AB6
	movl	%edi, -88(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB34_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB34_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB34_4
.LBB34_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB34_4
.LBB34_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB34_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_7 Depth 2
                                        #       Child Loop BB34_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB34_5 Depth=1
	movl	$0, -24(%rbp)
.LBB34_7:                               # %for.cond9
                                        #   Parent Loop BB34_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB34_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB34_7 Depth=2
	movl	$0, -32(%rbp)
.LBB34_9:                               # %for.cond14
                                        #   Parent Loop BB34_5 Depth=1
                                        #     Parent Loop BB34_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB34_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB34_9 Depth=3
	movl	-40(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB34_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB34_9
.LBB34_12:                              # %for.end
                                        #   in Loop: Header=BB34_7 Depth=2
	jmp	.LBB34_13
.LBB34_13:                              # %for.inc41
                                        #   in Loop: Header=BB34_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB34_7
.LBB34_14:                              # %for.end43
                                        #   in Loop: Header=BB34_5 Depth=1
	jmp	.LBB34_15
.LBB34_15:                              # %for.inc44
                                        #   in Loop: Header=BB34_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_5
.LBB34_16:                              # %for.end46
	movl	$0, -12(%rbp)
.LBB34_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_19 Depth 2
                                        #       Child Loop BB34_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB34_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB34_17 Depth=1
	movl	$0, -24(%rbp)
.LBB34_19:                              # %for.cond50
                                        #   Parent Loop BB34_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB34_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB34_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB34_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB34_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB34_26
.LBB34_22:                              # %cond.false61
                                        #   in Loop: Header=BB34_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB34_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB34_19 Depth=2
	movl	$127, %eax
	jmp	.LBB34_25
.LBB34_24:                              # %cond.false71
                                        #   in Loop: Header=BB34_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB34_25:                              # %cond.end79
                                        #   in Loop: Header=BB34_19 Depth=2
.LBB34_26:                              # %cond.end81
                                        #   in Loop: Header=BB34_19 Depth=2
	movl	%eax, -60(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB34_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB34_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB34_32
.LBB34_28:                              # %cond.false90
                                        #   in Loop: Header=BB34_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB34_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB34_19 Depth=2
	movl	$127, %eax
	jmp	.LBB34_31
.LBB34_30:                              # %cond.false98
                                        #   in Loop: Header=BB34_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB34_31:                              # %cond.end104
                                        #   in Loop: Header=BB34_19 Depth=2
.LBB34_32:                              # %cond.end106
                                        #   in Loop: Header=BB34_19 Depth=2
	movl	%eax, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB34_33:                              # %for.cond108
                                        #   Parent Loop BB34_17 Depth=1
                                        #     Parent Loop BB34_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB34_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB34_33 Depth=3
	cmpl	$0, -60(%rbp)
	jne	.LBB34_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB34_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB34_46
.LBB34_36:                              # %if.else
                                        #   in Loop: Header=BB34_33 Depth=3
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-60(%rbp)
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB34_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB34_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB34_42
.LBB34_38:                              # %cond.false145
                                        #   in Loop: Header=BB34_33 Depth=3
	movl	-52(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB34_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB34_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB34_41
.LBB34_40:                              # %cond.false151
                                        #   in Loop: Header=BB34_33 Depth=3
	movl	-52(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB34_41:                              # %cond.end155
                                        #   in Loop: Header=BB34_33 Depth=3
.LBB34_42:                              # %cond.end157
                                        #   in Loop: Header=BB34_33 Depth=3
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB34_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB34_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB34_45
.LBB34_44:                              # %if.then183
                                        #   in Loop: Header=BB34_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB34_45:                              # %if.end
                                        #   in Loop: Header=BB34_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB34_46:                              # %if.end220
                                        #   in Loop: Header=BB34_33 Depth=3
	jmp	.LBB34_47
.LBB34_47:                              # %for.inc221
                                        #   in Loop: Header=BB34_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB34_33
.LBB34_48:                              # %for.end223
                                        #   in Loop: Header=BB34_19 Depth=2
	jmp	.LBB34_49
.LBB34_49:                              # %for.inc224
                                        #   in Loop: Header=BB34_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB34_19
.LBB34_50:                              # %for.end226
                                        #   in Loop: Header=BB34_17 Depth=1
	jmp	.LBB34_51
.LBB34_51:                              # %for.inc227
                                        #   in Loop: Header=BB34_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_17
.LBB34_52:                              # %for.end229
	cmpl	$1, -88(%rbp)
	jne	.LBB34_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB34_54:                              # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_56 Depth 2
                                        #       Child Loop BB34_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB34_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB34_54 Depth=1
	movl	$0, -24(%rbp)
.LBB34_56:                              # %for.cond235
                                        #   Parent Loop BB34_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB34_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB34_56 Depth=2
	movl	$0, -20(%rbp)
.LBB34_58:                              # %for.cond238
                                        #   Parent Loop BB34_54 Depth=1
                                        #     Parent Loop BB34_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB34_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB34_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB34_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB34_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB34_62
.LBB34_61:                              # %cond.false243
                                        #   in Loop: Header=BB34_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB34_62:                              # %cond.end244
                                        #   in Loop: Header=BB34_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -84(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB34_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB34_58
.LBB34_64:                              # %for.end276
                                        #   in Loop: Header=BB34_56 Depth=2
	jmp	.LBB34_65
.LBB34_65:                              # %for.inc277
                                        #   in Loop: Header=BB34_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB34_56
.LBB34_66:                              # %for.end279
                                        #   in Loop: Header=BB34_54 Depth=1
	jmp	.LBB34_67
.LBB34_67:                              # %for.inc280
                                        #   in Loop: Header=BB34_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_54
.LBB34_68:                              # %for.end282
	movl	$0, -16(%rbp)
.LBB34_69:                              # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB34_69 Depth=1
	movl	$0, -28(%rbp)
.LBB34_71:                              # %for.cond287
                                        #   Parent Loop BB34_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB34_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB34_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB34_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB34_71
.LBB34_74:                              # %for.end327
                                        #   in Loop: Header=BB34_69 Depth=1
	jmp	.LBB34_75
.LBB34_75:                              # %for.inc328
                                        #   in Loop: Header=BB34_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_69
.LBB34_76:                              # %for.end330
	jmp	.LBB34_142
.LBB34_77:                              # %if.else331
	movl	$0, -12(%rbp)
.LBB34_78:                              # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB34_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB34_78 Depth=1
	movl	$0, -24(%rbp)
.LBB34_80:                              # %for.cond335
                                        #   Parent Loop BB34_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB34_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB34_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB34_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB34_80
.LBB34_83:                              # %for.end345
                                        #   in Loop: Header=BB34_78 Depth=1
	jmp	.LBB34_84
.LBB34_84:                              # %for.inc346
                                        #   in Loop: Header=BB34_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_78
.LBB34_85:                              # %for.end348
	movl	$0, -16(%rbp)
.LBB34_86:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_88 Depth 2
                                        #       Child Loop BB34_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB34_86 Depth=1
	movl	$0, -32(%rbp)
.LBB34_88:                              # %for.cond354
                                        #   Parent Loop BB34_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB34_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB34_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB34_90:                              # %for.cond372
                                        #   Parent Loop BB34_86 Depth=1
                                        #     Parent Loop BB34_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB34_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB34_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_90
.LBB34_93:                              # %for.end389
                                        #   in Loop: Header=BB34_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB34_94
	jp	.LBB34_94
	jmp	.LBB34_95
.LBB34_94:                              # %if.then396
                                        #   in Loop: Header=BB34_88 Depth=2
	vmovsd	.LCPI34_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB34_96
.LBB34_95:                              # %if.else406
                                        #   in Loop: Header=BB34_88 Depth=2
	movl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB34_96:                              # %if.end407
                                        #   in Loop: Header=BB34_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB34_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB34_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB34_99
.LBB34_98:                              # %if.then413
                                        #   in Loop: Header=BB34_88 Depth=2
	movl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB34_99:                              # %if.end414
                                        #   in Loop: Header=BB34_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB34_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB34_88
.LBB34_101:                             # %for.end447
                                        #   in Loop: Header=BB34_86 Depth=1
	jmp	.LBB34_102
.LBB34_102:                             # %for.inc448
                                        #   in Loop: Header=BB34_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_86
.LBB34_103:                             # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB34_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB34_105:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_107 Depth 2
                                        #       Child Loop BB34_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB34_105 Depth=1
	movl	$0, -28(%rbp)
.LBB34_107:                             # %for.cond459
                                        #   Parent Loop BB34_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB34_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB34_107 Depth=2
	movl	$0, -20(%rbp)
.LBB34_109:                             # %for.cond465
                                        #   Parent Loop BB34_105 Depth=1
                                        #     Parent Loop BB34_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB34_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB34_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB34_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB34_109
.LBB34_112:                             # %for.end495
                                        #   in Loop: Header=BB34_107 Depth=2
	jmp	.LBB34_113
.LBB34_113:                             # %for.inc496
                                        #   in Loop: Header=BB34_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB34_107
.LBB34_114:                             # %for.end498
                                        #   in Loop: Header=BB34_105 Depth=1
	jmp	.LBB34_115
.LBB34_115:                             # %for.inc499
                                        #   in Loop: Header=BB34_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_105
.LBB34_116:                             # %for.end501
	jmp	.LBB34_126
.LBB34_117:                             # %if.else502
	movl	$0, -16(%rbp)
.LBB34_118:                             # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB34_118 Depth=1
	movl	$0, -28(%rbp)
.LBB34_120:                             # %for.cond508
                                        #   Parent Loop BB34_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB34_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB34_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB34_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB34_120
.LBB34_123:                             # %for.end549
                                        #   in Loop: Header=BB34_118 Depth=1
	jmp	.LBB34_124
.LBB34_124:                             # %for.inc550
                                        #   in Loop: Header=BB34_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_118
.LBB34_125:                             # %for.end552
	jmp	.LBB34_126
.LBB34_126:                             # %if.end553
	movl	$0, -12(%rbp)
.LBB34_127:                             # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_129 Depth 2
                                        #       Child Loop BB34_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB34_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB34_127 Depth=1
	movl	$0, -24(%rbp)
.LBB34_129:                             # %for.cond558
                                        #   Parent Loop BB34_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB34_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB34_129 Depth=2
	movl	$0, -20(%rbp)
.LBB34_131:                             # %for.cond562
                                        #   Parent Loop BB34_127 Depth=1
                                        #     Parent Loop BB34_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB34_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB34_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB34_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB34_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB34_135
.LBB34_134:                             # %cond.false569
                                        #   in Loop: Header=BB34_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB34_135:                             # %cond.end570
                                        #   in Loop: Header=BB34_131 Depth=3
	movl	%eax, -84(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB34_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB34_131
.LBB34_137:                             # %for.end598
                                        #   in Loop: Header=BB34_129 Depth=2
	jmp	.LBB34_138
.LBB34_138:                             # %for.inc599
                                        #   in Loop: Header=BB34_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB34_129
.LBB34_139:                             # %for.end601
                                        #   in Loop: Header=BB34_127 Depth=1
	jmp	.LBB34_140
.LBB34_140:                             # %for.inc602
                                        #   in Loop: Header=BB34_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_127
.LBB34_141:                             # %for.end604
	jmp	.LBB34_142
.LBB34_142:                             # %if.end605
	movl	$0, -16(%rbp)
.LBB34_143:                             # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_145 Depth 2
                                        #       Child Loop BB34_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB34_143 Depth=1
	movl	$0, -28(%rbp)
.LBB34_145:                             # %for.cond611
                                        #   Parent Loop BB34_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB34_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB34_145 Depth=2
	movl	$0, -20(%rbp)
.LBB34_147:                             # %for.cond617
                                        #   Parent Loop BB34_143 Depth=1
                                        #     Parent Loop BB34_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB34_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB34_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB34_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB34_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB34_151
.LBB34_150:                             # %if.then638
                                        #   in Loop: Header=BB34_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB34_154
.LBB34_151:                             # %if.end639
                                        #   in Loop: Header=BB34_147 Depth=3
	jmp	.LBB34_152
.LBB34_152:                             # %for.inc640
                                        #   in Loop: Header=BB34_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB34_147
.LBB34_153:                             # %for.end642.loopexit
                                        #   in Loop: Header=BB34_145 Depth=2
	jmp	.LBB34_154
.LBB34_154:                             # %for.end642
                                        #   in Loop: Header=BB34_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB34_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB34_143 Depth=1
	jmp	.LBB34_159
.LBB34_156:                             # %if.end646
                                        #   in Loop: Header=BB34_145 Depth=2
	jmp	.LBB34_157
.LBB34_157:                             # %for.inc647
                                        #   in Loop: Header=BB34_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB34_145
.LBB34_158:                             # %for.end649.loopexit
                                        #   in Loop: Header=BB34_143 Depth=1
	jmp	.LBB34_159
.LBB34_159:                             # %for.end649
                                        #   in Loop: Header=BB34_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB34_161
# %bb.160:                              # %if.then652
	jmp	.LBB34_164
.LBB34_161:                             # %if.end653
                                        #   in Loop: Header=BB34_143 Depth=1
	jmp	.LBB34_162
.LBB34_162:                             # %for.inc654
                                        #   in Loop: Header=BB34_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_143
.LBB34_163:                             # %for.end656.loopexit
	jmp	.LBB34_164
.LBB34_164:                             # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$1110710966, -80(%rbp)  # imm = 0x42341AB6
	jne	.LBB34_166
.LBB34_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_166:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB34_165
.Lfunc_end34:
	.size	test_wp_B_slice.31, .Lfunc_end34-test_wp_B_slice.31
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.32
.LCPI35_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.32
	.p2align	4, 0x90
	.type	test_wp_B_slice.32,@function
test_wp_B_slice.32:                     # @test_wp_B_slice.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$978960045, -84(%rbp)   # imm = 0x3A59BEAD
	movl	%edi, -76(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB35_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB35_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB35_4
.LBB35_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB35_4
.LBB35_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB35_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_7 Depth 2
                                        #       Child Loop BB35_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB35_5 Depth=1
	movl	$0, -24(%rbp)
.LBB35_7:                               # %for.cond9
                                        #   Parent Loop BB35_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB35_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB35_7 Depth=2
	movl	$0, -32(%rbp)
.LBB35_9:                               # %for.cond14
                                        #   Parent Loop BB35_5 Depth=1
                                        #     Parent Loop BB35_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB35_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB35_9 Depth=3
	movl	-40(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB35_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB35_9
.LBB35_12:                              # %for.end
                                        #   in Loop: Header=BB35_7 Depth=2
	jmp	.LBB35_13
.LBB35_13:                              # %for.inc41
                                        #   in Loop: Header=BB35_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB35_7
.LBB35_14:                              # %for.end43
                                        #   in Loop: Header=BB35_5 Depth=1
	jmp	.LBB35_15
.LBB35_15:                              # %for.inc44
                                        #   in Loop: Header=BB35_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_5
.LBB35_16:                              # %for.end46
	movl	$0, -12(%rbp)
.LBB35_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_19 Depth 2
                                        #       Child Loop BB35_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB35_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB35_17 Depth=1
	movl	$0, -24(%rbp)
.LBB35_19:                              # %for.cond50
                                        #   Parent Loop BB35_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB35_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB35_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB35_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB35_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB35_26
.LBB35_22:                              # %cond.false61
                                        #   in Loop: Header=BB35_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB35_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB35_19 Depth=2
	movl	$127, %eax
	jmp	.LBB35_25
.LBB35_24:                              # %cond.false71
                                        #   in Loop: Header=BB35_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB35_25:                              # %cond.end79
                                        #   in Loop: Header=BB35_19 Depth=2
.LBB35_26:                              # %cond.end81
                                        #   in Loop: Header=BB35_19 Depth=2
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB35_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB35_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB35_32
.LBB35_28:                              # %cond.false90
                                        #   in Loop: Header=BB35_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB35_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB35_19 Depth=2
	movl	$127, %eax
	jmp	.LBB35_31
.LBB35_30:                              # %cond.false98
                                        #   in Loop: Header=BB35_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB35_31:                              # %cond.end104
                                        #   in Loop: Header=BB35_19 Depth=2
.LBB35_32:                              # %cond.end106
                                        #   in Loop: Header=BB35_19 Depth=2
	movl	%eax, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB35_33:                              # %for.cond108
                                        #   Parent Loop BB35_17 Depth=1
                                        #     Parent Loop BB35_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB35_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB35_33 Depth=3
	cmpl	$0, -52(%rbp)
	jne	.LBB35_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB35_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB35_46
.LBB35_36:                              # %if.else
                                        #   in Loop: Header=BB35_33 Depth=3
	movl	-52(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-52(%rbp)
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB35_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB35_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB35_42
.LBB35_38:                              # %cond.false145
                                        #   in Loop: Header=BB35_33 Depth=3
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB35_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB35_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB35_41
.LBB35_40:                              # %cond.false151
                                        #   in Loop: Header=BB35_33 Depth=3
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB35_41:                              # %cond.end155
                                        #   in Loop: Header=BB35_33 Depth=3
.LBB35_42:                              # %cond.end157
                                        #   in Loop: Header=BB35_33 Depth=3
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB35_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB35_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB35_45
.LBB35_44:                              # %if.then183
                                        #   in Loop: Header=BB35_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB35_45:                              # %if.end
                                        #   in Loop: Header=BB35_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB35_46:                              # %if.end220
                                        #   in Loop: Header=BB35_33 Depth=3
	jmp	.LBB35_47
.LBB35_47:                              # %for.inc221
                                        #   in Loop: Header=BB35_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB35_33
.LBB35_48:                              # %for.end223
                                        #   in Loop: Header=BB35_19 Depth=2
	jmp	.LBB35_49
.LBB35_49:                              # %for.inc224
                                        #   in Loop: Header=BB35_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB35_19
.LBB35_50:                              # %for.end226
                                        #   in Loop: Header=BB35_17 Depth=1
	jmp	.LBB35_51
.LBB35_51:                              # %for.inc227
                                        #   in Loop: Header=BB35_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_17
.LBB35_52:                              # %for.end229
	cmpl	$1, -76(%rbp)
	jne	.LBB35_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB35_54:                              # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_56 Depth 2
                                        #       Child Loop BB35_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB35_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB35_54 Depth=1
	movl	$0, -24(%rbp)
.LBB35_56:                              # %for.cond235
                                        #   Parent Loop BB35_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB35_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB35_56 Depth=2
	movl	$0, -20(%rbp)
.LBB35_58:                              # %for.cond238
                                        #   Parent Loop BB35_54 Depth=1
                                        #     Parent Loop BB35_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB35_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB35_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB35_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB35_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB35_62
.LBB35_61:                              # %cond.false243
                                        #   in Loop: Header=BB35_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB35_62:                              # %cond.end244
                                        #   in Loop: Header=BB35_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -88(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB35_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB35_58
.LBB35_64:                              # %for.end276
                                        #   in Loop: Header=BB35_56 Depth=2
	jmp	.LBB35_65
.LBB35_65:                              # %for.inc277
                                        #   in Loop: Header=BB35_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB35_56
.LBB35_66:                              # %for.end279
                                        #   in Loop: Header=BB35_54 Depth=1
	jmp	.LBB35_67
.LBB35_67:                              # %for.inc280
                                        #   in Loop: Header=BB35_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_54
.LBB35_68:                              # %for.end282
	movl	$0, -16(%rbp)
.LBB35_69:                              # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB35_69 Depth=1
	movl	$0, -28(%rbp)
.LBB35_71:                              # %for.cond287
                                        #   Parent Loop BB35_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB35_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB35_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB35_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB35_71
.LBB35_74:                              # %for.end327
                                        #   in Loop: Header=BB35_69 Depth=1
	jmp	.LBB35_75
.LBB35_75:                              # %for.inc328
                                        #   in Loop: Header=BB35_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_69
.LBB35_76:                              # %for.end330
	jmp	.LBB35_142
.LBB35_77:                              # %if.else331
	movl	$0, -12(%rbp)
.LBB35_78:                              # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB35_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB35_78 Depth=1
	movl	$0, -24(%rbp)
.LBB35_80:                              # %for.cond335
                                        #   Parent Loop BB35_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB35_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB35_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB35_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB35_80
.LBB35_83:                              # %for.end345
                                        #   in Loop: Header=BB35_78 Depth=1
	jmp	.LBB35_84
.LBB35_84:                              # %for.inc346
                                        #   in Loop: Header=BB35_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_78
.LBB35_85:                              # %for.end348
	movl	$0, -16(%rbp)
.LBB35_86:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_88 Depth 2
                                        #       Child Loop BB35_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB35_86 Depth=1
	movl	$0, -32(%rbp)
.LBB35_88:                              # %for.cond354
                                        #   Parent Loop BB35_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB35_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB35_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB35_90:                              # %for.cond372
                                        #   Parent Loop BB35_86 Depth=1
                                        #     Parent Loop BB35_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB35_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB35_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_90
.LBB35_93:                              # %for.end389
                                        #   in Loop: Header=BB35_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB35_94
	jp	.LBB35_94
	jmp	.LBB35_95
.LBB35_94:                              # %if.then396
                                        #   in Loop: Header=BB35_88 Depth=2
	vmovsd	.LCPI35_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB35_96
.LBB35_95:                              # %if.else406
                                        #   in Loop: Header=BB35_88 Depth=2
	movl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB35_96:                              # %if.end407
                                        #   in Loop: Header=BB35_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB35_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB35_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB35_99
.LBB35_98:                              # %if.then413
                                        #   in Loop: Header=BB35_88 Depth=2
	movl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB35_99:                              # %if.end414
                                        #   in Loop: Header=BB35_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB35_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB35_88
.LBB35_101:                             # %for.end447
                                        #   in Loop: Header=BB35_86 Depth=1
	jmp	.LBB35_102
.LBB35_102:                             # %for.inc448
                                        #   in Loop: Header=BB35_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_86
.LBB35_103:                             # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB35_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB35_105:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_107 Depth 2
                                        #       Child Loop BB35_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB35_105 Depth=1
	movl	$0, -28(%rbp)
.LBB35_107:                             # %for.cond459
                                        #   Parent Loop BB35_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB35_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB35_107 Depth=2
	movl	$0, -20(%rbp)
.LBB35_109:                             # %for.cond465
                                        #   Parent Loop BB35_105 Depth=1
                                        #     Parent Loop BB35_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB35_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB35_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB35_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB35_109
.LBB35_112:                             # %for.end495
                                        #   in Loop: Header=BB35_107 Depth=2
	jmp	.LBB35_113
.LBB35_113:                             # %for.inc496
                                        #   in Loop: Header=BB35_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB35_107
.LBB35_114:                             # %for.end498
                                        #   in Loop: Header=BB35_105 Depth=1
	jmp	.LBB35_115
.LBB35_115:                             # %for.inc499
                                        #   in Loop: Header=BB35_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_105
.LBB35_116:                             # %for.end501
	jmp	.LBB35_126
.LBB35_117:                             # %if.else502
	movl	$0, -16(%rbp)
.LBB35_118:                             # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB35_118 Depth=1
	movl	$0, -28(%rbp)
.LBB35_120:                             # %for.cond508
                                        #   Parent Loop BB35_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB35_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB35_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB35_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB35_120
.LBB35_123:                             # %for.end549
                                        #   in Loop: Header=BB35_118 Depth=1
	jmp	.LBB35_124
.LBB35_124:                             # %for.inc550
                                        #   in Loop: Header=BB35_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_118
.LBB35_125:                             # %for.end552
	jmp	.LBB35_126
.LBB35_126:                             # %if.end553
	movl	$0, -12(%rbp)
.LBB35_127:                             # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_129 Depth 2
                                        #       Child Loop BB35_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB35_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB35_127 Depth=1
	movl	$0, -24(%rbp)
.LBB35_129:                             # %for.cond558
                                        #   Parent Loop BB35_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB35_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB35_129 Depth=2
	movl	$0, -20(%rbp)
.LBB35_131:                             # %for.cond562
                                        #   Parent Loop BB35_127 Depth=1
                                        #     Parent Loop BB35_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB35_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB35_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB35_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB35_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB35_135
.LBB35_134:                             # %cond.false569
                                        #   in Loop: Header=BB35_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB35_135:                             # %cond.end570
                                        #   in Loop: Header=BB35_131 Depth=3
	movl	%eax, -88(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB35_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB35_131
.LBB35_137:                             # %for.end598
                                        #   in Loop: Header=BB35_129 Depth=2
	jmp	.LBB35_138
.LBB35_138:                             # %for.inc599
                                        #   in Loop: Header=BB35_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB35_129
.LBB35_139:                             # %for.end601
                                        #   in Loop: Header=BB35_127 Depth=1
	jmp	.LBB35_140
.LBB35_140:                             # %for.inc602
                                        #   in Loop: Header=BB35_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_127
.LBB35_141:                             # %for.end604
	jmp	.LBB35_142
.LBB35_142:                             # %if.end605
	movl	$0, -16(%rbp)
.LBB35_143:                             # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_145 Depth 2
                                        #       Child Loop BB35_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB35_143 Depth=1
	movl	$0, -28(%rbp)
.LBB35_145:                             # %for.cond611
                                        #   Parent Loop BB35_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB35_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB35_145 Depth=2
	movl	$0, -20(%rbp)
.LBB35_147:                             # %for.cond617
                                        #   Parent Loop BB35_143 Depth=1
                                        #     Parent Loop BB35_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB35_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB35_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB35_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB35_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB35_151
.LBB35_150:                             # %if.then638
                                        #   in Loop: Header=BB35_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB35_154
.LBB35_151:                             # %if.end639
                                        #   in Loop: Header=BB35_147 Depth=3
	jmp	.LBB35_152
.LBB35_152:                             # %for.inc640
                                        #   in Loop: Header=BB35_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB35_147
.LBB35_153:                             # %for.end642.loopexit
                                        #   in Loop: Header=BB35_145 Depth=2
	jmp	.LBB35_154
.LBB35_154:                             # %for.end642
                                        #   in Loop: Header=BB35_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB35_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB35_143 Depth=1
	jmp	.LBB35_159
.LBB35_156:                             # %if.end646
                                        #   in Loop: Header=BB35_145 Depth=2
	jmp	.LBB35_157
.LBB35_157:                             # %for.inc647
                                        #   in Loop: Header=BB35_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB35_145
.LBB35_158:                             # %for.end649.loopexit
                                        #   in Loop: Header=BB35_143 Depth=1
	jmp	.LBB35_159
.LBB35_159:                             # %for.end649
                                        #   in Loop: Header=BB35_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB35_161
# %bb.160:                              # %if.then652
	jmp	.LBB35_164
.LBB35_161:                             # %if.end653
                                        #   in Loop: Header=BB35_143 Depth=1
	jmp	.LBB35_162
.LBB35_162:                             # %for.inc654
                                        #   in Loop: Header=BB35_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_143
.LBB35_163:                             # %for.end656.loopexit
	jmp	.LBB35_164
.LBB35_164:                             # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$978960045, -84(%rbp)   # imm = 0x3A59BEAD
	jne	.LBB35_166
.LBB35_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_166:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB35_165
.Lfunc_end35:
	.size	test_wp_B_slice.32, .Lfunc_end35-test_wp_B_slice.32
	.cfi_endproc
                                        # -- End function
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
