	.text
	.file	"image.c"
	.globl	MbAffPostProc           # -- Begin function MbAffPostProc
	.p2align	4, 0x90
	.type	MbAffPostProc,@function
MbAffPostProc:                          # @MbAffPostProc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB0_5
# %bb.1:                                # %func_MbAffPostProc.50
	callq	MbAffPostProc.50
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_MbAffPostProc.53
	.cfi_def_cfa %rbp, 16
	callq	MbAffPostProc.53
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_MbAffPostProc.57
	.cfi_def_cfa %rbp, 16
	callq	MbAffPostProc.57
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_MbAffPostProc.73
	.cfi_def_cfa %rbp, 16
	callq	MbAffPostProc.73
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
	jmp	.LBB0_4
.Lfunc_end0:
	.size	MbAffPostProc, .Lfunc_end0-MbAffPostProc
	.cfi_endproc
                                        # -- End function
	.globl	code_a_picture          # -- Begin function code_a_picture
	.p2align	4, 0x90
	.type	code_a_picture,@function
code_a_picture:                         # @code_a_picture
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB1_5
# %bb.1:                                # %func_code_a_picture.3
	movq	%rbx, %rdi
	callq	code_a_picture.3
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_code_a_picture.9
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	code_a_picture.9
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_3:                                # %func_code_a_picture.22
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	code_a_picture.22
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_4:                                # %func_code_a_picture.56
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	code_a_picture.56
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB1_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB1_3
	jmp	.LBB1_4
.Lfunc_end1:
	.size	code_a_picture, .Lfunc_end1-code_a_picture
	.cfi_endproc
                                        # -- End function
	.globl	encode_one_frame        # -- Begin function encode_one_frame
	.p2align	4, 0x90
	.type	encode_one_frame,@function
encode_one_frame:                       # @encode_one_frame
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB2_5
# %bb.1:                                # %func_encode_one_frame.24
	callq	encode_one_frame.24
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_encode_one_frame.26
	.cfi_def_cfa %rbp, 16
	callq	encode_one_frame.26
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_3:                                # %func_encode_one_frame.47
	.cfi_def_cfa %rbp, 16
	callq	encode_one_frame.47
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_4:                                # %func_encode_one_frame.51
	.cfi_def_cfa %rbp, 16
	callq	encode_one_frame.51
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB2_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB2_3
	jmp	.LBB2_4
.Lfunc_end2:
	.size	encode_one_frame, .Lfunc_end2-encode_one_frame
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReadOneFrame
	.type	ReadOneFrame,@function
ReadOneFrame:                           # @ReadOneFrame
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB3_5
# %bb.1:                                # %func_ReadOneFrame.58
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	callq	ReadOneFrame.58
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_ReadOneFrame.65
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	callq	ReadOneFrame.65
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_ReadOneFrame.70
	.cfi_def_cfa %rbp, 16
	callq	ReadOneFrame.70
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_ReadOneFrame.71
	.cfi_def_cfa %rbp, 16
	callq	ReadOneFrame.71
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	-44(%rbp), %r9d         # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r15d, %edi
	je	.LBB3_3
	jmp	.LBB3_4
.Lfunc_end3:
	.size	ReadOneFrame, .Lfunc_end3-ReadOneFrame
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function PaddAutoCropBorders
	.type	PaddAutoCropBorders,@function
PaddAutoCropBorders:                    # @PaddAutoCropBorders
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB4_5
# %bb.1:                                # %func_PaddAutoCropBorders.82
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	PaddAutoCropBorders.82
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_2:                                # %func_PaddAutoCropBorders.89
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	PaddAutoCropBorders.89
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_3:                                # %func_PaddAutoCropBorders.99
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	PaddAutoCropBorders.99
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_4:                                # %func_PaddAutoCropBorders.100
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	PaddAutoCropBorders.100
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	16(%rbp), %r11d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	24(%rbp), %r10d
	cmpl	$1, %eax
	je	.LBB4_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r11d, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r15d, %edi
	je	.LBB4_3
	jmp	.LBB4_4
.Lfunc_end4:
	.size	PaddAutoCropBorders, .Lfunc_end4-PaddAutoCropBorders
	.cfi_endproc
                                        # -- End function
	.globl	field_picture           # -- Begin function field_picture
	.p2align	4, 0x90
	.type	field_picture,@function
field_picture:                          # @field_picture
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB5_5
# %bb.1:                                # %func_field_picture.11
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	field_picture.11
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_field_picture.42
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	field_picture.42
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_field_picture.66
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	field_picture.66
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_field_picture.76
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	field_picture.76
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
	jmp	.LBB5_4
.Lfunc_end5:
	.size	field_picture, .Lfunc_end5-field_picture
	.cfi_endproc
                                        # -- End function
	.globl	frame_picture           # -- Begin function frame_picture
	.p2align	4, 0x90
	.type	frame_picture,@function
frame_picture:                          # @frame_picture
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB6_2
# %bb.1:                                # %func_frame_picture.17
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	frame_picture.17
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_frame_picture.29
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	frame_picture.29
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end6:
	.size	frame_picture, .Lfunc_end6-frame_picture
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function picture_structure_decision
	.type	picture_structure_decision,@function
picture_structure_decision:             # @picture_structure_decision
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB7_5
# %bb.1:                                # %func_picture_structure_decision.41
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	picture_structure_decision.41
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_picture_structure_decision.72
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	picture_structure_decision.72
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_picture_structure_decision.81
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	picture_structure_decision.81
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_picture_structure_decision.95
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	picture_structure_decision.95
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB7_3
	jmp	.LBB7_4
.Lfunc_end7:
	.size	picture_structure_decision, .Lfunc_end7-picture_structure_decision
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function field_mode_buffer
	.type	field_mode_buffer,@function
field_mode_buffer:                      # @field_mode_buffer
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	vmovss	%xmm2, -20(%rbp)        # 4-byte Spill
	vmovss	%xmm1, -16(%rbp)        # 4-byte Spill
	vmovss	%xmm0, -12(%rbp)        # 4-byte Spill
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB8_5
# %bb.1:                                # %func_field_mode_buffer.55
	movl	%ebx, %edi
	vmovss	-12(%rbp), %xmm0        # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	vmovss	-16(%rbp), %xmm1        # 4-byte Reload
                                        # xmm1 = mem[0],zero,zero,zero
	vmovss	-20(%rbp), %xmm2        # 4-byte Reload
                                        # xmm2 = mem[0],zero,zero,zero
	callq	field_mode_buffer.55
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_2:                                # %func_field_mode_buffer.78
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	field_mode_buffer.78
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_3:                                # %func_field_mode_buffer.87
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	field_mode_buffer.87
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_4:                                # %func_field_mode_buffer.88
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	field_mode_buffer.88
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovss	-12(%rbp), %xmm0        # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	vmovss	-16(%rbp), %xmm1        # 4-byte Reload
                                        # xmm1 = mem[0],zero,zero,zero
	vmovss	-20(%rbp), %xmm2        # 4-byte Reload
                                        # xmm2 = mem[0],zero,zero,zero
	cmpl	$1, %eax
	je	.LBB8_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB8_3
	jmp	.LBB8_4
.Lfunc_end8:
	.size	field_mode_buffer, .Lfunc_end8-field_mode_buffer
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeout_picture
	.type	writeout_picture,@function
writeout_picture:                       # @writeout_picture
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB9_5
# %bb.1:                                # %func_writeout_picture.16
	movq	%rbx, %rdi
	callq	writeout_picture.16
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_2:                                # %func_writeout_picture.34
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	writeout_picture.34
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_3:                                # %func_writeout_picture.68
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	writeout_picture.68
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_4:                                # %func_writeout_picture.79
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	writeout_picture.79
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB9_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB9_3
	jmp	.LBB9_4
.Lfunc_end9:
	.size	writeout_picture, .Lfunc_end9-writeout_picture
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function frame_mode_buffer
	.type	frame_mode_buffer,@function
frame_mode_buffer:                      # @frame_mode_buffer
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	vmovss	%xmm2, -20(%rbp)        # 4-byte Spill
	vmovss	%xmm1, -16(%rbp)        # 4-byte Spill
	vmovss	%xmm0, -12(%rbp)        # 4-byte Spill
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB10_5
# %bb.1:                                # %func_frame_mode_buffer.30
	movl	%ebx, %edi
	vmovss	-12(%rbp), %xmm0        # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	vmovss	-16(%rbp), %xmm1        # 4-byte Reload
                                        # xmm1 = mem[0],zero,zero,zero
	vmovss	-20(%rbp), %xmm2        # 4-byte Reload
                                        # xmm2 = mem[0],zero,zero,zero
	callq	frame_mode_buffer.30
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_2:                               # %func_frame_mode_buffer.59
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	frame_mode_buffer.59
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_3:                               # %func_frame_mode_buffer.83
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	frame_mode_buffer.83
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_4:                               # %func_frame_mode_buffer.92
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	frame_mode_buffer.92
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovss	-12(%rbp), %xmm0        # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	vmovss	-16(%rbp), %xmm1        # 4-byte Reload
                                        # xmm1 = mem[0],zero,zero,zero
	vmovss	-20(%rbp), %xmm2        # 4-byte Reload
                                        # xmm2 = mem[0],zero,zero,zero
	cmpl	$1, %eax
	je	.LBB10_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB10_3
	jmp	.LBB10_4
.Lfunc_end10:
	.size	frame_mode_buffer, .Lfunc_end10-frame_mode_buffer
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportNALNonVLCBits
	.type	ReportNALNonVLCBits,@function
ReportNALNonVLCBits:                    # @ReportNALNonVLCBits
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB11_2
# %bb.1:                                # %func_ReportNALNonVLCBits.14
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportNALNonVLCBits.14
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_2:                               # %func_ReportNALNonVLCBits.74
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportNALNonVLCBits.74
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end11:
	.size	ReportNALNonVLCBits, .Lfunc_end11-ReportNALNonVLCBits
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportFirstframe
	.type	ReportFirstframe,@function
ReportFirstframe:                       # @ReportFirstframe
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB12_5
# %bb.1:                                # %func_ReportFirstframe.32
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportFirstframe.32
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_2:                               # %func_ReportFirstframe.85
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportFirstframe.85
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_3:                               # %func_ReportFirstframe.90
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportFirstframe.90
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_4:                               # %func_ReportFirstframe.93
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportFirstframe.93
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB12_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB12_3
	jmp	.LBB12_4
.Lfunc_end12:
	.size	ReportFirstframe, .Lfunc_end12-ReportFirstframe
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportIntra
	.type	ReportIntra,@function
ReportIntra:                            # @ReportIntra
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB13_2
# %bb.1:                                # %func_ReportIntra.4
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportIntra.4
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_2:                               # %func_ReportIntra.46
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportIntra.46
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end13:
	.size	ReportIntra, .Lfunc_end13-ReportIntra
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportSP
	.type	ReportSP,@function
ReportSP:                               # @ReportSP
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB14_2
# %bb.1:                                # %func_ReportSP.6
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportSP.6
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_2:                               # %func_ReportSP.45
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportSP.45
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end14:
	.size	ReportSP, .Lfunc_end14-ReportSP
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportRB
	.type	ReportRB,@function
ReportRB:                               # @ReportRB
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB15_2
# %bb.1:                                # %func_ReportRB.63
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportRB.63
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_2:                               # %func_ReportRB.84
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportRB.84
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end15:
	.size	ReportRB, .Lfunc_end15-ReportRB
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportB
	.type	ReportB,@function
ReportB:                                # @ReportB
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB16_2
# %bb.1:                                # %func_ReportB.10
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportB.10
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_2:                               # %func_ReportB.13
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportB.13
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end16:
	.size	ReportB, .Lfunc_end16-ReportB
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportP
	.type	ReportP,@function
ReportP:                                # @ReportP
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB17_2
# %bb.1:                                # %func_ReportP.8
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportP.8
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_2:                               # %func_ReportP.12
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportP.12
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end17:
	.size	ReportP, .Lfunc_end17-ReportP
	.cfi_endproc
                                        # -- End function
	.globl	copy_params             # -- Begin function copy_params
	.p2align	4, 0x90
	.type	copy_params,@function
copy_params:                            # @copy_params
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	active_sps, %rax
	movl	1148(%rax), %eax
	movq	enc_picture, %rcx
	movl	%eax, 6556(%rcx)
	movq	active_sps, %rax
	movl	1160(%rax), %eax
	movq	enc_picture, %rcx
	movl	%eax, 6560(%rcx)
	movq	active_sps, %rax
	movl	32(%rax), %eax
	movq	enc_picture, %rcx
	movl	%eax, 6552(%rcx)
	movq	active_sps, %rax
	cmpl	$0, 1160(%rax)
	je	.LBB18_2
# %bb.1:                                # %if.then
	movq	active_sps, %rax
	movl	1164(%rax), %eax
	movq	enc_picture, %rcx
	movl	%eax, 6564(%rcx)
	movq	active_sps, %rax
	movl	1168(%rax), %eax
	movq	enc_picture, %rcx
	movl	%eax, 6568(%rcx)
	movq	active_sps, %rax
	movl	1172(%rax), %eax
	movq	enc_picture, %rcx
	movl	%eax, 6572(%rcx)
	movq	active_sps, %rax
	movl	1176(%rax), %eax
	movq	enc_picture, %rcx
	movl	%eax, 6576(%rcx)
	jmp	.LBB18_3
.LBB18_2:                               # %if.else
	movq	enc_picture, %rax
	movl	$0, 6564(%rax)
	movq	enc_picture, %rax
	movl	$0, 6568(%rax)
	movq	enc_picture, %rax
	movl	$0, 6572(%rax)
	movq	enc_picture, %rax
	movl	$0, 6576(%rax)
.LBB18_3:                               # %if.end
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end18:
	.size	copy_params, .Lfunc_end18-copy_params
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function distortion_fld
	.type	distortion_fld,@function
distortion_fld:                         # @distortion_fld
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB19_5
# %bb.1:                                # %func_distortion_fld.5
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	distortion_fld.5
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_2:                               # %func_distortion_fld.25
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	distortion_fld.25
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_3:                               # %func_distortion_fld.36
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	distortion_fld.36
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_4:                               # %func_distortion_fld.37
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	distortion_fld.37
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB19_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB19_3
	jmp	.LBB19_4
.Lfunc_end19:
	.size	distortion_fld, .Lfunc_end19-distortion_fld
	.cfi_endproc
                                        # -- End function
	.globl	UnifiedOneForthPix      # -- Begin function UnifiedOneForthPix
	.p2align	4, 0x90
	.type	UnifiedOneForthPix,@function
UnifiedOneForthPix:                     # @UnifiedOneForthPix
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB20_5
# %bb.1:                                # %func_UnifiedOneForthPix.27
	movq	%rbx, %rdi
	callq	UnifiedOneForthPix.27
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_2:                               # %func_UnifiedOneForthPix.52
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	UnifiedOneForthPix.52
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_3:                               # %func_UnifiedOneForthPix.67
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	UnifiedOneForthPix.67
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_4:                               # %func_UnifiedOneForthPix.103
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	UnifiedOneForthPix.103
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB20_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB20_3
	jmp	.LBB20_4
.Lfunc_end20:
	.size	UnifiedOneForthPix, .Lfunc_end20-UnifiedOneForthPix
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function GenerateFullPelRepresentation
	.type	GenerateFullPelRepresentation,@function
GenerateFullPelRepresentation:          # @GenerateFullPelRepresentation
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%ecx, %r14d
	movl	%edx, %r15d
	movq	%rsi, %r12
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB21_5
# %bb.1:                                # %func_GenerateFullPelRepresentation.80
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	GenerateFullPelRepresentation.80
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_2:                               # %func_GenerateFullPelRepresentation.102
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	GenerateFullPelRepresentation.102
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_3:                               # %func_GenerateFullPelRepresentation.104
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	GenerateFullPelRepresentation.104
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_4:                               # %func_GenerateFullPelRepresentation.106
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	GenerateFullPelRepresentation.106
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB21_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB21_3
	jmp	.LBB21_4
.Lfunc_end21:
	.size	GenerateFullPelRepresentation, .Lfunc_end21-GenerateFullPelRepresentation
	.cfi_endproc
                                        # -- End function
	.globl	dummy_slice_too_big     # -- Begin function dummy_slice_too_big
	.p2align	4, 0x90
	.type	dummy_slice_too_big,@function
dummy_slice_too_big:                    # @dummy_slice_too_big
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -4(%rbp)
	xorl	%eax, %eax
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end22:
	.size	dummy_slice_too_big, .Lfunc_end22-dummy_slice_too_big
	.cfi_endproc
                                        # -- End function
	.globl	copy_rdopt_data         # -- Begin function copy_rdopt_data
	.p2align	4, 0x90
	.type	copy_rdopt_data,@function
copy_rdopt_data:                        # @copy_rdopt_data
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB23_5
# %bb.1:                                # %func_copy_rdopt_data.31
	movl	%ebx, %edi
	callq	copy_rdopt_data.31
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_2:                               # %func_copy_rdopt_data.33
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	copy_rdopt_data.33
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_3:                               # %func_copy_rdopt_data.60
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	copy_rdopt_data.60
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_4:                               # %func_copy_rdopt_data.75
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	copy_rdopt_data.75
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB23_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB23_3
	jmp	.LBB23_4
.Lfunc_end23:
	.size	copy_rdopt_data, .Lfunc_end23-copy_rdopt_data
	.cfi_endproc
                                        # -- End function
	.globl	buf2img                 # -- Begin function buf2img
	.p2align	4, 0x90
	.type	buf2img,@function
buf2img:                                # @buf2img
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movq	%rsi, %r13
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB24_5
# %bb.1:                                # %func_buf2img.1
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	buf2img.1
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_2:                               # %func_buf2img.20
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	buf2img.20
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_3:                               # %func_buf2img.61
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	buf2img.61
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_4:                               # %func_buf2img.64
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	buf2img.64
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB24_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB24_3
	jmp	.LBB24_4
.Lfunc_end24:
	.size	buf2img, .Lfunc_end24-buf2img
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeUnit
	.type	writeUnit,@function
writeUnit:                              # @writeUnit
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB25_5
# %bb.1:                                # %func_writeUnit.2
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	writeUnit.2
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_2:                               # %func_writeUnit.77
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	writeUnit.77
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_3:                               # %func_writeUnit.86
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	writeUnit.86
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_4:                               # %func_writeUnit.94
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	writeUnit.94
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB25_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB25_3
	jmp	.LBB25_4
.Lfunc_end25:
	.size	writeUnit, .Lfunc_end25-writeUnit
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function init_frame
	.type	init_frame,@function
init_frame:                             # @init_frame
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB26_5
# %bb.1:                                # %func_init_frame.28
	callq	init_frame.28
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_2:                               # %func_init_frame.40
	.cfi_def_cfa %rbp, 16
	callq	init_frame.40
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_3:                               # %func_init_frame.54
	.cfi_def_cfa %rbp, 16
	callq	init_frame.54
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_4:                               # %func_init_frame.69
	.cfi_def_cfa %rbp, 16
	callq	init_frame.69
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB26_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB26_3
	jmp	.LBB26_4
.Lfunc_end26:
	.size	init_frame, .Lfunc_end26-init_frame
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function init_dec_ref_pic_marking_buffer
	.type	init_dec_ref_pic_marking_buffer,@function
init_dec_ref_pic_marking_buffer:        # @init_dec_ref_pic_marking_buffer
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	img, %rax
	movq	$0, 72512(%rax)
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end27:
	.size	init_dec_ref_pic_marking_buffer, .Lfunc_end27-init_dec_ref_pic_marking_buffer
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function init_field
	.type	init_field,@function
init_field:                             # @init_field
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB28_5
# %bb.1:                                # %func_init_field.48
	callq	init_field.48
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_2:                               # %func_init_field.91
	.cfi_def_cfa %rbp, 16
	callq	init_field.91
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_3:                               # %func_init_field.97
	.cfi_def_cfa %rbp, 16
	callq	init_field.97
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_4:                               # %func_init_field.98
	.cfi_def_cfa %rbp, 16
	callq	init_field.98
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB28_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB28_3
	jmp	.LBB28_4
.Lfunc_end28:
	.size	init_field, .Lfunc_end28-init_field
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function find_snr
	.type	find_snr,@function
find_snr:                               # @find_snr
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB29_5
# %bb.1:                                # %func_find_snr.7
	callq	find_snr.7
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_2:                               # %func_find_snr.18
	.cfi_def_cfa %rbp, 16
	callq	find_snr.18
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_3:                               # %func_find_snr.35
	.cfi_def_cfa %rbp, 16
	callq	find_snr.35
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_4:                               # %func_find_snr.39
	.cfi_def_cfa %rbp, 16
	callq	find_snr.39
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB29_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB29_3
	jmp	.LBB29_4
.Lfunc_end29:
	.size	find_snr, .Lfunc_end29-find_snr
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function find_distortion
	.type	find_distortion,@function
find_distortion:                        # @find_distortion
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB30_5
# %bb.1:                                # %func_find_distortion.15
	callq	find_distortion.15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_2:                               # %func_find_distortion.43
	.cfi_def_cfa %rbp, 16
	callq	find_distortion.43
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_3:                               # %func_find_distortion.44
	.cfi_def_cfa %rbp, 16
	callq	find_distortion.44
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_4:                               # %func_find_distortion.49
	.cfi_def_cfa %rbp, 16
	callq	find_distortion.49
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB30_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB30_3
	jmp	.LBB30_4
.Lfunc_end30:
	.size	find_distortion, .Lfunc_end30-find_distortion
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_motion_vectors_MB
	.type	copy_motion_vectors_MB,@function
copy_motion_vectors_MB:                 # @copy_motion_vectors_MB
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB31_5
# %bb.1:                                # %func_copy_motion_vectors_MB.21
	callq	copy_motion_vectors_MB.21
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_2:                               # %func_copy_motion_vectors_MB.23
	.cfi_def_cfa %rbp, 16
	callq	copy_motion_vectors_MB.23
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_3:                               # %func_copy_motion_vectors_MB.38
	.cfi_def_cfa %rbp, 16
	callq	copy_motion_vectors_MB.38
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_4:                               # %func_copy_motion_vectors_MB.62
	.cfi_def_cfa %rbp, 16
	callq	copy_motion_vectors_MB.62
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB31_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB31_3
	jmp	.LBB31_4
.Lfunc_end31:
	.size	copy_motion_vectors_MB, .Lfunc_end31-copy_motion_vectors_MB
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function CalculateFrameNumber
	.type	CalculateFrameNumber,@function
CalculateFrameNumber:                   # @CalculateFrameNumber
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	je	.LBB32_5
# %bb.1:                                # %if.then
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB32_3
# %bb.2:                                # %if.then2
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	subl	$1, %ecx
	movq	input, %rdx
	movl	20(%rdx), %edx
	addl	$1, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movl	%eax, frame_no
	jmp	.LBB32_4
.LBB32_3:                               # %if.else
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	subl	$1, %ecx
	movq	input, %rdx
	movl	20(%rdx), %edx
	addl	$1, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movl	%eax, frame_no
.LBB32_4:                               # %if.end
	jmp	.LBB32_9
.LBB32_5:                               # %if.else24
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	input, %rdx
	movl	20(%rdx), %edx
	addl	$1, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	%eax, frame_no
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB32_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB32_8
# %bb.7:                                # %if.then35
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, frame_no
.LBB32_8:                               # %if.end37
	jmp	.LBB32_9
.LBB32_9:                               # %if.end38
	movl	frame_no, %eax
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end32:
	.size	CalculateFrameNumber, .Lfunc_end32-CalculateFrameNumber
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function put_buffer_frame
	.type	put_buffer_frame,@function
put_buffer_frame:                       # @put_buffer_frame
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end33:
	.size	put_buffer_frame, .Lfunc_end33-put_buffer_frame
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function put_buffer_top
	.type	put_buffer_top,@function
put_buffer_top:                         # @put_buffer_top
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	img, %rax
	movl	$0, 71796(%rax)
	movq	imgY_org_top, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_top, %rax
	movq	%rax, imgUV_org
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end34:
	.size	put_buffer_top, .Lfunc_end34-put_buffer_top
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function put_buffer_bot
	.type	put_buffer_bot,@function
put_buffer_bot:                         # @put_buffer_bot
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	img, %rax
	movl	$1, 71796(%rax)
	movq	imgY_org_bot, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_bot, %rax
	movq	%rax, imgUV_org
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end35:
	.size	put_buffer_bot, .Lfunc_end35-put_buffer_bot
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function rdPictureCoding
	.type	rdPictureCoding,@function
rdPictureCoding:                        # @rdPictureCoding
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB36_5
# %bb.1:                                # %func_rdPictureCoding.19
	callq	rdPictureCoding.19
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_2:                               # %func_rdPictureCoding.96
	.cfi_def_cfa %rbp, 16
	callq	rdPictureCoding.96
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_3:                               # %func_rdPictureCoding.101
	.cfi_def_cfa %rbp, 16
	callq	rdPictureCoding.101
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_4:                               # %func_rdPictureCoding.105
	.cfi_def_cfa %rbp, 16
	callq	rdPictureCoding.105
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB36_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB36_3
	jmp	.LBB36_4
.Lfunc_end36:
	.size	rdPictureCoding, .Lfunc_end36-rdPictureCoding
	.cfi_endproc
                                        # -- End function
	.globl	buf2img.1               # -- Begin function buf2img.1
	.p2align	4, 0x90
	.type	buf2img.1,@function
buf2img.1:                              # @buf2img.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1427276541, -60(%rbp)  # imm = 0x551282FD
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movslq	-24(%rbp), %rax
	cmpq	$2, %rax
	jbe	.LBB37_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.3, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB37_2:                               # %if.end
	movb	$0, %al
	callq	testEndian
	cmpl	$0, %eax
	je	.LBB37_35
# %bb.3:                                # %if.then2
	movl	-24(%rbp), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB37_6
	jmp	.LBB37_4
.LBB37_4:                               # %if.then2
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB37_15
	jmp	.LBB37_5
.LBB37_5:                               # %if.then2
	subl	$4, %eax
	je	.LBB37_24
	jmp	.LBB37_33
.LBB37_6:                               # %sw.bb
	movl	$0, -4(%rbp)
.LBB37_7:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_9 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB37_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	$0, -8(%rbp)
.LBB37_9:                               # %for.cond5
                                        #   Parent Loop BB37_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB37_12
# %bb.10:                               # %for.body8
                                        #   in Loop: Header=BB37_9 Depth=2
	movq	-48(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB37_9 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_9
.LBB37_12:                              # %for.end
                                        #   in Loop: Header=BB37_7 Depth=1
	jmp	.LBB37_13
.LBB37_13:                              # %for.inc14
                                        #   in Loop: Header=BB37_7 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_7
.LBB37_14:                              # %for.end16
	jmp	.LBB37_34
.LBB37_15:                              # %sw.bb17
	movl	$0, -4(%rbp)
.LBB37_16:                              # %for.cond18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_18 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB37_23
# %bb.17:                               # %for.body21
                                        #   in Loop: Header=BB37_16 Depth=1
	movl	$0, -8(%rbp)
.LBB37_18:                              # %for.cond22
                                        #   Parent Loop BB37_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB37_21
# %bb.19:                               # %for.body25
                                        #   in Loop: Header=BB37_18 Depth=2
	movq	-48(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx), %ax
	movw	%ax, -14(%rbp)
	movzwl	-14(%rbp), %eax
	sarl	$8, %eax
	movzwl	-14(%rbp), %ecx
	andl	$255, %ecx
	shll	$8, %ecx
	orl	%ecx, %eax
	movw	%ax, -26(%rbp)
	movw	-26(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.20:                               # %for.inc36
                                        #   in Loop: Header=BB37_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_18
.LBB37_21:                              # %for.end38
                                        #   in Loop: Header=BB37_16 Depth=1
	jmp	.LBB37_22
.LBB37_22:                              # %for.inc39
                                        #   in Loop: Header=BB37_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_16
.LBB37_23:                              # %for.end41
	jmp	.LBB37_34
.LBB37_24:                              # %sw.bb42
	movl	$0, -4(%rbp)
.LBB37_25:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_27 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB37_32
# %bb.26:                               # %for.body46
                                        #   in Loop: Header=BB37_25 Depth=1
	movl	$0, -8(%rbp)
.LBB37_27:                              # %for.cond47
                                        #   Parent Loop BB37_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB37_30
# %bb.28:                               # %for.body50
                                        #   in Loop: Header=BB37_27 Depth=2
	movq	-48(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-56(%rbp), %rax
	andq	$65280, %rax            # imm = 0xFF00
	shlq	$8, %rax
	movq	-56(%rbp), %rcx
	andq	$255, %rcx
	shlq	$24, %rcx
	orq	%rcx, %rax
	movq	-56(%rbp), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	shrq	$8, %rcx
	orq	%rcx, %rax
	movl	$4278190080, %ecx       # imm = 0xFF000000
	andq	-56(%rbp), %rcx
	shrq	$24, %rcx
	orq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.29:                               # %for.inc72
                                        #   in Loop: Header=BB37_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_27
.LBB37_30:                              # %for.end74
                                        #   in Loop: Header=BB37_25 Depth=1
	jmp	.LBB37_31
.LBB37_31:                              # %for.inc75
                                        #   in Loop: Header=BB37_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_25
.LBB37_32:                              # %for.end77
	jmp	.LBB37_33
.LBB37_33:                              # %sw.default
	movabsq	$.L.str.4, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB37_34:                              # %sw.epilog
	jmp	.LBB37_44
.LBB37_35:                              # %if.else
	movl	$0, -4(%rbp)
.LBB37_36:                              # %for.cond78
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_38 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB37_43
# %bb.37:                               # %for.body81
                                        #   in Loop: Header=BB37_36 Depth=1
	movl	$0, -8(%rbp)
.LBB37_38:                              # %for.cond82
                                        #   Parent Loop BB37_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB37_41
# %bb.39:                               # %for.body85
                                        #   in Loop: Header=BB37_38 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-8(%rbp), %rax
	shlq	$1, %rax
	addq	%rax, %rdi
	movq	-48(%rbp), %rsi
	movl	-8(%rbp), %eax
	movl	-4(%rbp), %ecx
	imull	-12(%rbp), %ecx
	addl	%ecx, %eax
	imull	-24(%rbp), %eax
	cltq
	addq	%rax, %rsi
	movslq	-24(%rbp), %rdx
	callq	memcpy
# %bb.40:                               # %for.inc100
                                        #   in Loop: Header=BB37_38 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_38
.LBB37_41:                              # %for.end102
                                        #   in Loop: Header=BB37_36 Depth=1
	jmp	.LBB37_42
.LBB37_42:                              # %for.inc103
                                        #   in Loop: Header=BB37_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_36
.LBB37_43:                              # %for.end105
	jmp	.LBB37_44
.LBB37_44:                              # %if.end106
	cmpl	$1427276541, -60(%rbp)  # imm = 0x551282FD
	jne	.LBB37_46
.LBB37_45:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_46:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_45
.Lfunc_end37:
	.size	buf2img.1, .Lfunc_end37-buf2img.1
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeUnit.2
	.type	writeUnit.2,@function
writeUnit.2:                            # @writeUnit.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$40379003, -16(%rbp)    # imm = 0x268227B
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %edi
	movq	img, %rax
	imull	60(%rax), %edi
	shll	$2, %edi
	movb	$0, %al
	callq	AllocNALU
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	cmpl	$0, %eax
	movl	$3, %eax
	movl	$2, %ecx
	cmovel	%eax, %ecx
	addl	$2, %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	addq	$1, %rdi
	movq	-24(%rbp), %rax
	movq	32(%rax), %rsi
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	subl	$1, %eax
	movl	%eax, %edx
	callq	memcpy
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB38_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	movl	$5, 12(%rax)
	movq	-8(%rbp), %rax
	movl	$3, 16(%rax)
	jmp	.LBB38_18
.LBB38_2:                               # %if.else
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB38_10
# %bb.3:                                # %if.then6
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB38_5
# %bb.4:                                # %if.then9
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB38_6
.LBB38_5:                               # %if.else11
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB38_6:                               # %if.end
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB38_8
# %bb.7:                                # %if.then17
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB38_9
.LBB38_8:                               # %if.else19
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB38_9:                               # %if.end21
	jmp	.LBB38_17
.LBB38_10:                              # %if.else22
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB38_12
# %bb.11:                               # %if.then26
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB38_13
.LBB38_12:                              # %if.else28
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB38_13:                              # %if.end31
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB38_15
# %bb.14:                               # %if.then35
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB38_16
.LBB38_15:                              # %if.else37
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB38_16:                              # %if.end39
	jmp	.LBB38_17
.LBB38_17:                              # %if.end40
	jmp	.LBB38_18
.LBB38_18:                              # %if.end41
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	movq	WriteNALU, %rax
	movq	-8(%rbp), %rdi
	callq	*%rax
	movq	stats, %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-8(%rbp), %rdi
	callq	FreeNALU
	cmpl	$40379003, -16(%rbp)    # imm = 0x268227B
	jne	.LBB38_20
.LBB38_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_19
.Lfunc_end38:
	.size	writeUnit.2, .Lfunc_end38-writeUnit.2
	.cfi_endproc
                                        # -- End function
	.globl	code_a_picture.3        # -- Begin function code_a_picture.3
	.p2align	4, 0x90
	.type	code_a_picture.3,@function
code_a_picture.3:                       # @code_a_picture.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1927708201, -28(%rbp)  # imm = 0x72E67E29
	movq	%rdi, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
	movq	-24(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB39_2
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$2, 28(%rax)
	movb	$1, %al
	jne	.LBB39_8
.LBB39_2:                               # %lor.rhs
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 1228(%rcx)
	je	.LBB39_7
# %bb.3:                                # %land.lhs.true2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB39_6
# %bb.4:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB39_6
# %bb.5:                                # %lor.lhs.false6
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	jne	.LBB39_7
.LBB39_6:                               # %land.rhs
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	xorb	$-1, %al
.LBB39_7:                               # %land.end
.LBB39_8:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movq	14152(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 812(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 820(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 816(%rax)
	movb	$0, %al
	callq	RandomIntraNewPicture
	movq	img, %rax
	movl	$1, 72652(%rax)
	movq	img, %rdi
	movq	active_pps, %rsi
	movq	active_sps, %rdx
	callq	FmoInit
	movb	$0, %al
	callq	FmoStartPicture
	movb	$0, %al
	callq	CalculateQuantParam
	movb	$0, %al
	callq	CalculateOffsetParam
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB39_10
# %bb.9:                                # %if.then
	movb	$0, %al
	callq	CalculateQuant8Param
	movb	$0, %al
	callq	CalculateOffset8Param
.LBB39_10:                              # %if.end
	jmp	.LBB39_11
.LBB39_11:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_13 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB39_16
# %bb.12:                               # %while.body
                                        #   in Loop: Header=BB39_11 Depth=1
	jmp	.LBB39_13
.LBB39_13:                              # %while.cond15
                                        #   Parent Loop BB39_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %edi
	callq	FmoSliceGroupCompletelyCoded
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB39_14
	jmp	.LBB39_15
.LBB39_14:                              # %while.body19
                                        #   in Loop: Header=BB39_13 Depth=2
	movl	-4(%rbp), %edi
	movq	-24(%rbp), %rsi
	callq	encode_one_slice
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoSetLastMacroblockInSlice
	movq	img, %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	jmp	.LBB39_13
.LBB39_15:                              # %while.end
                                        #   in Loop: Header=BB39_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_11
.LBB39_16:                              # %while.end22
	movb	$0, %al
	callq	FmoEndPicture
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB39_23
# %bb.17:                               # %land.lhs.true25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB39_23
# %bb.18:                               # %if.then28
	movl	$0, -8(%rbp)
.LBB39_19:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB39_22
# %bb.20:                               # %for.body
                                        #   in Loop: Header=BB39_19 Depth=1
	movq	img, %rdi
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	xorl	%edx, %edx
	callq	DeblockFrame
# %bb.21:                               # %for.inc
                                        #   in Loop: Header=BB39_19 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_19
.LBB39_22:                              # %for.end
	jmp	.LBB39_23
.LBB39_23:                              # %if.end31
	movq	img, %rdi
	movq	enc_picture, %rax
	movq	6424(%rax), %rsi
	movq	enc_picture, %rax
	movq	6464(%rax), %rdx
	callq	DeblockFrame
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB39_25
# %bb.24:                               # %if.then33
	callq	MbAffPostProc
.LBB39_25:                              # %if.end34
	cmpl	$1927708201, -28(%rbp)  # imm = 0x72E67E29
	jne	.LBB39_27
.LBB39_26:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_27:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_26
.Lfunc_end39:
	.size	code_a_picture.3, .Lfunc_end39-code_a_picture.3
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportIntra.4
	.type	ReportIntra.4,@function
ReportIntra.4:                          # @ReportIntra.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$440156668, -12(%rbp)   # imm = 0x1A3C41FC
	movl	%edi, -4(%rbp)
	movl	%esi, -8(%rbp)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$1, 4(%rax)
	jne	.LBB40_2
# %bb.1:                                # %if.then
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-4(%rbp), %r9d
	movl	-8(%rbp), %r10d
	movq	img, %rcx
	movl	71800(%rcx), %ecx
	cmpl	$0, %ecx
	movabsq	$.L.str.7, %rcx
	movabsq	$.L.str.8, %rax
	cmovneq	%rcx, %rax
	movl	intras, %r11d
	movabsq	$.L.str.6, %rdi
	movl	$0, %ecx
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	jmp	.LBB40_3
.LBB40_2:                               # %if.else
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-4(%rbp), %r9d
	movl	-8(%rbp), %r10d
	movq	img, %rcx
	movl	71800(%rcx), %ecx
	cmpl	$0, %ecx
	movabsq	$.L.str.7, %rcx
	movabsq	$.L.str.8, %rax
	cmovneq	%rcx, %rax
	movl	intras, %r11d
	movabsq	$.L.str.9, %rdi
	movl	$0, %ecx
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
.LBB40_3:                               # %if.end
	cmpl	$440156668, -12(%rbp)   # imm = 0x1A3C41FC
	jne	.LBB40_5
.LBB40_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_4
.Lfunc_end40:
	.size	ReportIntra.4, .Lfunc_end40-ReportIntra.4
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function distortion_fld.5
	.type	distortion_fld.5,@function
distortion_fld.5:                       # @distortion_fld.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$319830167, -4(%rbp)    # imm = 0x13103897
	movq	%rdi, -32(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movb	$0, %al
	callq	combine_field
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	callq	find_distortion
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vmovss	%xmm0, (%rax)
	cmpl	$319830167, -4(%rbp)    # imm = 0x13103897
	jne	.LBB41_2
.LBB41_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_1
.Lfunc_end41:
	.size	distortion_fld.5, .Lfunc_end41-distortion_fld.5
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportSP.6
	.type	ReportSP.6,@function
ReportSP.6:                             # @ReportSP.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$776822111, -12(%rbp)   # imm = 0x2E4D5D5F
	movl	%edi, -4(%rbp)
	movl	%esi, -8(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	active_pps, %rax
	movl	192(%rax), %ecx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-4(%rbp), %r9d
	movl	-8(%rbp), %r10d
	movq	img, %rdi
	movl	71800(%rdi), %edi
	cmpl	$0, %edi
	movabsq	$.L.str.7, %rdi
	movabsq	$.L.str.8, %rax
	cmovneq	%rdi, %rax
	movl	intras, %r11d
	movabsq	$.L.str.10, %rdi
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	cmpl	$776822111, -12(%rbp)   # imm = 0x2E4D5D5F
	jne	.LBB42_2
.LBB42_1:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_1
.Lfunc_end42:
	.size	ReportSP.6, .Lfunc_end42-ReportSP.6
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function find_snr.7
.LCPI43_0:
	.quad	4621819117588971520     # double 10
	.text
	.p2align	4, 0x90
	.type	find_snr.7,@function
find_snr.7:                             # @find_snr.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$2119100130, -48(%rbp)  # imm = 0x7E4EE6E2
	movq	$0, -16(%rbp)
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	imull	72684(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movq	img, %rcx
	imull	72688(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	movl	3304(%rax), %eax
	movq	input, %rcx
	imull	3308(%rcx), %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB43_20
# %bb.1:                                # %if.then
	movq	$0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB43_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_4 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB43_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB43_2 Depth=1
	movl	$0, -8(%rbp)
.LBB43_4:                               # %for.cond8
                                        #   Parent Loop BB43_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB43_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB43_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgY_com, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB43_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_4
.LBB43_7:                               # %for.end
                                        #   in Loop: Header=BB43_2 Depth=1
	jmp	.LBB43_8
.LBB43_8:                               # %for.inc22
                                        #   in Loop: Header=BB43_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_2
.LBB43_9:                               # %for.end24
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB43_19
# %bb.10:                               # %if.then27
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB43_11:                              # %for.cond28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_13 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB43_18
# %bb.12:                               # %for.body32
                                        #   in Loop: Header=BB43_11 Depth=1
	movl	$0, -8(%rbp)
.LBB43_13:                              # %for.cond33
                                        #   Parent Loop BB43_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB43_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB43_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	8(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.15:                               # %for.inc74
                                        #   in Loop: Header=BB43_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_13
.LBB43_16:                              # %for.end76
                                        #   in Loop: Header=BB43_11 Depth=1
	jmp	.LBB43_17
.LBB43_17:                              # %for.inc77
                                        #   in Loop: Header=BB43_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_11
.LBB43_18:                              # %for.end79
	jmp	.LBB43_19
.LBB43_19:                              # %if.end
	jmp	.LBB43_41
.LBB43_20:                              # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB43_22
# %bb.21:                               # %if.then82
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
.LBB43_22:                              # %if.end83
	movq	$0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB43_23:                              # %for.cond84
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_25 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB43_30
# %bb.24:                               # %for.body88
                                        #   in Loop: Header=BB43_23 Depth=1
	movl	$0, -8(%rbp)
.LBB43_25:                              # %for.cond89
                                        #   Parent Loop BB43_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB43_28
# %bb.26:                               # %for.body93
                                        #   in Loop: Header=BB43_25 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.27:                               # %for.inc110
                                        #   in Loop: Header=BB43_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_25
.LBB43_28:                              # %for.end112
                                        #   in Loop: Header=BB43_23 Depth=1
	jmp	.LBB43_29
.LBB43_29:                              # %for.inc113
                                        #   in Loop: Header=BB43_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_23
.LBB43_30:                              # %for.end115
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB43_40
# %bb.31:                               # %if.then119
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB43_32:                              # %for.cond120
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_34 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB43_39
# %bb.33:                               # %for.body124
                                        #   in Loop: Header=BB43_32 Depth=1
	movl	$0, -8(%rbp)
.LBB43_34:                              # %for.cond125
                                        #   Parent Loop BB43_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB43_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB43_34 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.36:                               # %for.inc167
                                        #   in Loop: Header=BB43_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_34
.LBB43_37:                              # %for.end169
                                        #   in Loop: Header=BB43_32 Depth=1
	jmp	.LBB43_38
.LBB43_38:                              # %for.inc170
                                        #   in Loop: Header=BB43_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_32
.LBB43_39:                              # %for.end172
	jmp	.LBB43_40
.LBB43_40:                              # %if.end173
	jmp	.LBB43_41
.LBB43_41:                              # %if.end174
	cmpq	$0, -16(%rbp)
	jne	.LBB43_43
# %bb.42:                               # %if.then177
	movq	$1, -16(%rbp)
.LBB43_43:                              # %if.end178
	cmpq	$0, -24(%rbp)
	jne	.LBB43_45
# %bb.44:                               # %if.then181
	movq	$1, -24(%rbp)
.LBB43_45:                              # %if.end182
	cmpq	$0, -32(%rbp)
	jne	.LBB43_47
# %bb.46:                               # %if.then185
	movq	$1, -32(%rbp)
.LBB43_47:                              # %if.end186
	cmpq	$0, -16(%rbp)
	je	.LBB43_52
# %bb.48:                               # %if.then189
	movl	-52(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-44(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-16(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI43_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB43_50
# %bb.49:                               # %if.then199
	movl	-40(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-24(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI43_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr(%rip), %rax
	vmovss	%xmm0, 4(%rax)
	movl	-40(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-32(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI43_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	jmp	.LBB43_51
.LBB43_50:                              # %if.else216
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 4(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
.LBB43_51:                              # %if.end219
	jmp	.LBB43_52
.LBB43_52:                              # %if.end220
	movq	img, %rax
	cmpl	$0, (%rax)
	jne	.LBB43_54
# %bb.53:                               # %if.then223
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 12(%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 16(%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 20(%rax)
	movq	snr, %rax
	vmovss	12(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	16(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	20(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB43_55
.LBB43_54:                              # %if.else245
	movq	snr, %rax
	vmovss	60(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	64(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	68(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
.LBB43_55:                              # %if.end285
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_57
# %bb.56:                               # %if.then288
	movq	snr, %rax
	vmovss	32(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	44(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	56(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	jmp	.LBB43_61
.LBB43_57:                              # %if.else322
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB43_59
# %bb.58:                               # %if.then326
	movq	snr, %rax
	vmovss	28(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	40(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	52(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB43_60
.LBB43_59:                              # %if.else360
	movq	snr, %rax
	vmovss	24(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	36(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	48(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
.LBB43_60:                              # %if.end394
	jmp	.LBB43_61
.LBB43_61:                              # %if.end395
	cmpl	$2119100130, -48(%rbp)  # imm = 0x7E4EE6E2
	jne	.LBB43_63
.LBB43_62:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_62
.Lfunc_end43:
	.size	find_snr.7, .Lfunc_end43-find_snr.7
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportP.8
	.type	ReportP.8,@function
ReportP.8:                              # @ReportP.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1236387610, -12(%rbp)  # imm = 0x49B1C71A
	movl	%edi, -4(%rbp)
	movl	%esi, -8(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	active_pps, %rax
	movl	192(%rax), %ecx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-4(%rbp), %r9d
	movl	-8(%rbp), %r10d
	movq	img, %rdi
	movl	71800(%rdi), %edi
	cmpl	$0, %edi
	movabsq	$.L.str.7, %rdi
	movabsq	$.L.str.8, %rax
	cmovneq	%rdi, %rax
	movl	intras, %r11d
	movabsq	$.L.str.13, %rdi
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	cmpl	$1236387610, -12(%rbp)  # imm = 0x49B1C71A
	jne	.LBB44_2
.LBB44_1:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_1
.Lfunc_end44:
	.size	ReportP.8, .Lfunc_end44-ReportP.8
	.cfi_endproc
                                        # -- End function
	.globl	code_a_picture.9        # -- Begin function code_a_picture.9
	.p2align	4, 0x90
	.type	code_a_picture.9,@function
code_a_picture.9:                       # @code_a_picture.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$221845078, -28(%rbp)   # imm = 0xD391656
	movq	%rdi, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
	movq	-24(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB45_2
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$2, 28(%rax)
	movb	$1, %al
	jne	.LBB45_8
.LBB45_2:                               # %lor.rhs
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 1228(%rcx)
	je	.LBB45_7
# %bb.3:                                # %land.lhs.true2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB45_6
# %bb.4:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB45_6
# %bb.5:                                # %lor.lhs.false6
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	jne	.LBB45_7
.LBB45_6:                               # %land.rhs
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	xorb	$-1, %al
.LBB45_7:                               # %land.end
.LBB45_8:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movq	14152(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 812(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 820(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 816(%rax)
	movb	$0, %al
	callq	RandomIntraNewPicture
	movq	img, %rax
	movl	$1, 72652(%rax)
	movq	img, %rdi
	movq	active_pps, %rsi
	movq	active_sps, %rdx
	callq	FmoInit
	movb	$0, %al
	callq	FmoStartPicture
	movb	$0, %al
	callq	CalculateQuantParam
	movb	$0, %al
	callq	CalculateOffsetParam
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB45_10
# %bb.9:                                # %if.then
	movb	$0, %al
	callq	CalculateQuant8Param
	movb	$0, %al
	callq	CalculateOffset8Param
.LBB45_10:                              # %if.end
	jmp	.LBB45_11
.LBB45_11:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_13 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB45_16
# %bb.12:                               # %while.body
                                        #   in Loop: Header=BB45_11 Depth=1
	jmp	.LBB45_13
.LBB45_13:                              # %while.cond15
                                        #   Parent Loop BB45_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %edi
	callq	FmoSliceGroupCompletelyCoded
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB45_14
	jmp	.LBB45_15
.LBB45_14:                              # %while.body19
                                        #   in Loop: Header=BB45_13 Depth=2
	movl	-4(%rbp), %edi
	movq	-24(%rbp), %rsi
	callq	encode_one_slice
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoSetLastMacroblockInSlice
	movq	img, %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	jmp	.LBB45_13
.LBB45_15:                              # %while.end
                                        #   in Loop: Header=BB45_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_11
.LBB45_16:                              # %while.end22
	movb	$0, %al
	callq	FmoEndPicture
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB45_23
# %bb.17:                               # %land.lhs.true25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB45_23
# %bb.18:                               # %if.then28
	movl	$0, -8(%rbp)
.LBB45_19:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB45_22
# %bb.20:                               # %for.body
                                        #   in Loop: Header=BB45_19 Depth=1
	movq	img, %rdi
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	xorl	%edx, %edx
	callq	DeblockFrame
# %bb.21:                               # %for.inc
                                        #   in Loop: Header=BB45_19 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_19
.LBB45_22:                              # %for.end
	jmp	.LBB45_23
.LBB45_23:                              # %if.end31
	movq	img, %rdi
	movq	enc_picture, %rax
	movq	6424(%rax), %rsi
	movq	enc_picture, %rax
	movq	6464(%rax), %rdx
	callq	DeblockFrame
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB45_25
# %bb.24:                               # %if.then33
	callq	MbAffPostProc
.LBB45_25:                              # %if.end34
	cmpl	$221845078, -28(%rbp)   # imm = 0xD391656
	jne	.LBB45_27
.LBB45_26:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_27:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_26
.Lfunc_end45:
	.size	code_a_picture.9, .Lfunc_end45-code_a_picture.9
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportB.10
	.type	ReportB.10,@function
ReportB.10:                             # @ReportB.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$189799440, -16(%rbp)   # imm = 0xB501C10
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	active_pps, %rax
	movl	196(%rax), %ecx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %r10d
	movq	img, %rdi
	movl	71800(%rdi), %edi
	cmpl	$0, %edi
	movabsq	$.L.str.7, %rdi
	movabsq	$.L.str.8, %rax
	cmovneq	%rdi, %rax
	movl	intras, %r11d
	movq	img, %rdi
	movl	71996(%rdi), %ebx
	movabsq	$.L.str.12, %rdi
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movl	%ebx, 24(%rsp)
	movb	$3, %al
	callq	printf
	cmpl	$189799440, -16(%rbp)   # imm = 0xB501C10
	jne	.LBB46_2
.LBB46_1:
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_1
.Lfunc_end46:
	.size	ReportB.10, .Lfunc_end46-ReportB.10
	.cfi_endproc
                                        # -- End function
	.globl	field_picture.11        # -- Begin function field_picture.11
	.p2align	4, 0x90
	.type	field_picture.11,@function
field_picture.11:                       # @field_picture.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$925761307, -16(%rbp)   # imm = 0x372DFF1B
	movq	%rdi, -8(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	stats, %rax
	movl	$0, 1472(%rax)
	movq	stats, %rax
	addq	$1472, %rax             # imm = 0x5C0
	movq	stats, %rcx
	movq	%rax, 1480(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	68(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	img, %rax
	movl	72488(%rax), %eax
	shrl	$1, %eax
	movq	img, %rcx
	movl	%eax, 72484(%rcx)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_top_picture
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_top_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_top_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$1, 28(%rax)
	movq	enc_top_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_top
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB47_2
# %bb.1:                                # %if.then
	movl	nextP_tr_fld, %eax
	addl	$-1, %eax
	movl	%eax, nextP_tr_fld
.LBB47_2:                               # %if.end
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB47_7
# %bb.3:                                # %if.then15
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB47_5
# %bb.4:                                # %if.then17
	xorl	%edi, %edi
	movl	$1, %esi
	movl	$1, %edx
	callq	rc_init_pict
	jmp	.LBB47_6
.LBB47_5:                               # %if.else
	xorl	%edi, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
.LBB47_6:                               # %if.end18
	movl	$1, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB47_7:                               # %if.end20
	movq	img, %rax
	movl	$1, 72596(%rax)
	movq	top_pic, %rdi
	callq	code_a_picture
	movq	enc_picture, %rax
	movl	$1, (%rax)
	movq	enc_top_picture, %rdi
	callq	store_picture_in_dpb
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_bottom_picture
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_bottom_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_bottom_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$2, 28(%rax)
	movq	enc_bottom_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_bot
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB47_9
# %bb.8:                                # %if.then46
	movl	nextP_tr_fld, %eax
	addl	$1, %eax
	movl	%eax, nextP_tr_fld
.LBB47_9:                               # %if.end48
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_12
# %bb.10:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$1, 2888(%rax)
	je	.LBB47_12
# %bb.11:                               # %if.then52
	movq	img, %rax
	movl	$0, 24(%rax)
.LBB47_12:                              # %if.end54
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB47_14
# %bb.13:                               # %if.then58
	movl	-12(%rbp), %edi
	callq	setbitscount
.LBB47_14:                              # %if.end59
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB47_16
# %bb.15:                               # %if.then62
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB47_16:                              # %if.end65
	movq	img, %rax
	movl	$0, 72596(%rax)
	movq	enc_picture, %rax
	movl	$2, (%rax)
	movq	bottom_pic, %rdi
	callq	code_a_picture
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rdi
	addq	$812, %rdi              # imm = 0x32C
	movq	-8(%rbp), %rsi
	addq	$816, %rsi              # imm = 0x330
	movq	-8(%rbp), %rdx
	addq	$820, %rdx              # imm = 0x334
	callq	distortion_fld
	cmpl	$925761307, -16(%rbp)   # imm = 0x372DFF1B
	jne	.LBB47_18
.LBB47_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_18:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_17
.Lfunc_end47:
	.size	field_picture.11, .Lfunc_end47-field_picture.11
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportP.12
	.type	ReportP.12,@function
ReportP.12:                             # @ReportP.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$742966458, -12(%rbp)   # imm = 0x2C48C4BA
	movl	%edi, -8(%rbp)
	movl	%esi, -4(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	active_pps, %rax
	movl	192(%rax), %ecx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-8(%rbp), %r9d
	movl	-4(%rbp), %r10d
	movq	img, %rdi
	movl	71800(%rdi), %edi
	cmpl	$0, %edi
	movabsq	$.L.str.7, %rdi
	movabsq	$.L.str.8, %rax
	cmovneq	%rdi, %rax
	movl	intras, %r11d
	movabsq	$.L.str.13, %rdi
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	cmpl	$742966458, -12(%rbp)   # imm = 0x2C48C4BA
	jne	.LBB48_2
.LBB48_1:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_1
.Lfunc_end48:
	.size	ReportP.12, .Lfunc_end48-ReportP.12
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportB.13
	.type	ReportB.13,@function
ReportB.13:                             # @ReportB.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$779606185, -16(%rbp)   # imm = 0x2E77D8A9
	movl	%edi, -20(%rbp)
	movl	%esi, -12(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	active_pps, %rax
	movl	196(%rax), %ecx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-20(%rbp), %r9d
	movl	-12(%rbp), %r10d
	movq	img, %rdi
	movl	71800(%rdi), %edi
	cmpl	$0, %edi
	movabsq	$.L.str.7, %rdi
	movabsq	$.L.str.8, %rax
	cmovneq	%rdi, %rax
	movl	intras, %r11d
	movq	img, %rdi
	movl	71996(%rdi), %ebx
	movabsq	$.L.str.12, %rdi
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movl	%ebx, 24(%rsp)
	movb	$3, %al
	callq	printf
	cmpl	$779606185, -16(%rbp)   # imm = 0x2E77D8A9
	jne	.LBB49_2
.LBB49_1:
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_1
.Lfunc_end49:
	.size	ReportB.13, .Lfunc_end49-ReportB.13
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportNALNonVLCBits.14
	.type	ReportNALNonVLCBits.14,@function
ReportNALNonVLCBits.14:                 # @ReportNALNonVLCBits.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$918393335, -4(%rbp)    # imm = 0x36BD91F7
	movl	%edi, -12(%rbp)
	movl	%esi, -8(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	1492(%rax), %edx
	movabsq	$.L.str.5, %rdi
	movb	$0, %al
	callq	printf
	cmpl	$918393335, -4(%rbp)    # imm = 0x36BD91F7
	jne	.LBB50_2
.LBB50_1:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_1
.Lfunc_end50:
	.size	ReportNALNonVLCBits.14, .Lfunc_end50-ReportNALNonVLCBits.14
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function find_distortion.15
	.type	find_distortion.15,@function
find_distortion.15:                     # @find_distortion.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1533890869, -44(%rbp)  # imm = 0x5B6D5135
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB51_20
# %bb.1:                                # %if.then
	movq	$0, -40(%rbp)
	movl	$0, -16(%rbp)
.LBB51_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_4 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB51_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB51_2 Depth=1
	movl	$0, -12(%rbp)
.LBB51_4:                               # %for.cond3
                                        #   Parent Loop BB51_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB51_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB51_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgY_com, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB51_4 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_4
.LBB51_7:                               # %for.end
                                        #   in Loop: Header=BB51_2 Depth=1
	jmp	.LBB51_8
.LBB51_8:                               # %for.inc17
                                        #   in Loop: Header=BB51_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_2
.LBB51_9:                               # %for.end19
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB51_19
# %bb.10:                               # %if.then22
	movl	$0, -16(%rbp)
.LBB51_11:                              # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_13 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB51_18
# %bb.12:                               # %for.body26
                                        #   in Loop: Header=BB51_11 Depth=1
	movl	$0, -12(%rbp)
.LBB51_13:                              # %for.cond27
                                        #   Parent Loop BB51_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB51_16
# %bb.14:                               # %for.body30
                                        #   in Loop: Header=BB51_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.15:                               # %for.inc69
                                        #   in Loop: Header=BB51_13 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_13
.LBB51_16:                              # %for.end71
                                        #   in Loop: Header=BB51_11 Depth=1
	jmp	.LBB51_17
.LBB51_17:                              # %for.inc72
                                        #   in Loop: Header=BB51_11 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_11
.LBB51_18:                              # %for.end74
	jmp	.LBB51_19
.LBB51_19:                              # %if.end
	jmp	.LBB51_39
.LBB51_20:                              # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	$0, -40(%rbp)
	movl	$0, -16(%rbp)
.LBB51_21:                              # %for.cond75
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_23 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB51_28
# %bb.22:                               # %for.body79
                                        #   in Loop: Header=BB51_21 Depth=1
	movl	$0, -12(%rbp)
.LBB51_23:                              # %for.cond80
                                        #   Parent Loop BB51_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB51_26
# %bb.24:                               # %for.body84
                                        #   in Loop: Header=BB51_23 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.25:                               # %for.inc102
                                        #   in Loop: Header=BB51_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_23
.LBB51_26:                              # %for.end104
                                        #   in Loop: Header=BB51_21 Depth=1
	jmp	.LBB51_27
.LBB51_27:                              # %for.inc105
                                        #   in Loop: Header=BB51_21 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_21
.LBB51_28:                              # %for.end107
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB51_38
# %bb.29:                               # %if.then111
	movl	$0, -16(%rbp)
.LBB51_30:                              # %for.cond112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_32 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB51_37
# %bb.31:                               # %for.body116
                                        #   in Loop: Header=BB51_30 Depth=1
	movl	$0, -12(%rbp)
.LBB51_32:                              # %for.cond117
                                        #   Parent Loop BB51_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB51_35
# %bb.33:                               # %for.body121
                                        #   in Loop: Header=BB51_32 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.34:                               # %for.inc161
                                        #   in Loop: Header=BB51_32 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_32
.LBB51_35:                              # %for.end163
                                        #   in Loop: Header=BB51_30 Depth=1
	jmp	.LBB51_36
.LBB51_36:                              # %for.inc164
                                        #   in Loop: Header=BB51_30 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_30
.LBB51_37:                              # %for.end166
	jmp	.LBB51_38
.LBB51_38:                              # %if.end167
	jmp	.LBB51_39
.LBB51_39:                              # %if.end168
	vcvtsi2ssq	-40(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vcvtsi2ssq	-24(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vcvtsi2ssq	-32(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$1533890869, -44(%rbp)  # imm = 0x5B6D5135
	jne	.LBB51_41
.LBB51_40:
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_40
.Lfunc_end51:
	.size	find_distortion.15, .Lfunc_end51-find_distortion.15
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeout_picture.16
	.type	writeout_picture.16,@function
writeout_picture.16:                    # @writeout_picture.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1516095046, -28(%rbp)  # imm = 0x5A5DC646
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movl	$0, -8(%rbp)
.LBB52_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_3 Depth 2
	movl	-8(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB52_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB52_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	8(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB52_3:                               # %for.cond1
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB52_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB52_3 Depth=2
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rdi
	movl	-4(%rbp), %esi
	callq	writeUnit
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB52_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_3
.LBB52_6:                               # %for.end
                                        #   in Loop: Header=BB52_1 Depth=1
	jmp	.LBB52_7
.LBB52_7:                               # %for.inc10
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_1
.LBB52_8:                               # %for.end12
	cmpl	$1516095046, -28(%rbp)  # imm = 0x5A5DC646
	jne	.LBB52_10
.LBB52_9:
	xorl	%eax, %eax
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_9
.Lfunc_end52:
	.size	writeout_picture.16, .Lfunc_end52-writeout_picture.16
	.cfi_endproc
                                        # -- End function
	.globl	frame_picture.17        # -- Begin function frame_picture.17
	.p2align	4, 0x90
	.type	frame_picture.17,@function
frame_picture.17:                       # @frame_picture.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1368084545, -16(%rbp)  # imm = 0x518B5041
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	img, %rax
	movl	$0, 28(%rax)
	movq	img, %rax
	movl	72488(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72484(%rcx)
	cmpl	$2, -12(%rbp)
	jne	.LBB53_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_frame_picture3
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 8(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_frame_picture3, %rax
	movl	$1, 6412(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72400(%rcx)
	movq	enc_frame_picture3, %rcx
	movl	%eax, 6416(%rcx)
	movq	enc_frame_picture3, %rax
	movq	%rax, enc_picture
	callq	copy_params
	jmp	.LBB53_6
.LBB53_2:                               # %if.else
	cmpl	$1, -12(%rbp)
	jne	.LBB53_4
# %bb.3:                                # %if.then9
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_frame_picture2
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 8(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_frame_picture2, %rax
	movl	$1, 6412(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72400(%rcx)
	movq	enc_frame_picture2, %rcx
	movl	%eax, 6416(%rcx)
	movq	enc_frame_picture2, %rax
	movq	%rax, enc_picture
	callq	copy_params
	jmp	.LBB53_5
.LBB53_4:                               # %if.else35
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_frame_picture
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 8(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_frame_picture, %rax
	movl	$1, 6412(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72400(%rcx)
	movq	enc_frame_picture, %rcx
	movl	%eax, 6416(%rcx)
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
.LBB53_5:                               # %if.end
	jmp	.LBB53_6
.LBB53_6:                               # %if.end61
	movq	stats, %rax
	movl	$0, 1468(%rax)
	movq	stats, %rax
	addq	$1468, %rax             # imm = 0x5BC
	movq	stats, %rcx
	movq	%rax, 1480(%rcx)
	movq	img, %rax
	movl	$0, 71800(%rax)
	movq	-8(%rbp), %rdi
	callq	code_a_picture
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB53_8
# %bb.7:                                # %if.then66
	callq	find_distortion
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	vmovss	%xmm0, 812(%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	vmovss	%xmm0, 816(%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	vmovss	%xmm0, 820(%rax)
.LBB53_8:                               # %if.end67
	cmpl	$1368084545, -16(%rbp)  # imm = 0x518B5041
	jne	.LBB53_10
.LBB53_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_9
.Lfunc_end53:
	.size	frame_picture.17, .Lfunc_end53-frame_picture.17
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function find_snr.18
.LCPI54_0:
	.quad	4621819117588971520     # double 10
	.text
	.p2align	4, 0x90
	.type	find_snr.18,@function
find_snr.18:                            # @find_snr.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$473584967, -48(%rbp)   # imm = 0x1C3A5547
	movq	$0, -16(%rbp)
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	imull	72684(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movq	img, %rcx
	imull	72688(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	movl	3304(%rax), %eax
	movq	input, %rcx
	imull	3308(%rcx), %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB54_20
# %bb.1:                                # %if.then
	movq	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB54_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_4 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB54_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB54_2 Depth=1
	movl	$0, -4(%rbp)
.LBB54_4:                               # %for.cond8
                                        #   Parent Loop BB54_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB54_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB54_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgY_com, %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB54_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_4
.LBB54_7:                               # %for.end
                                        #   in Loop: Header=BB54_2 Depth=1
	jmp	.LBB54_8
.LBB54_8:                               # %for.inc22
                                        #   in Loop: Header=BB54_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_2
.LBB54_9:                               # %for.end24
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB54_19
# %bb.10:                               # %if.then27
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB54_11:                              # %for.cond28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_13 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB54_18
# %bb.12:                               # %for.body32
                                        #   in Loop: Header=BB54_11 Depth=1
	movl	$0, -4(%rbp)
.LBB54_13:                              # %for.cond33
                                        #   Parent Loop BB54_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB54_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB54_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.15:                               # %for.inc74
                                        #   in Loop: Header=BB54_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_13
.LBB54_16:                              # %for.end76
                                        #   in Loop: Header=BB54_11 Depth=1
	jmp	.LBB54_17
.LBB54_17:                              # %for.inc77
                                        #   in Loop: Header=BB54_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_11
.LBB54_18:                              # %for.end79
	jmp	.LBB54_19
.LBB54_19:                              # %if.end
	jmp	.LBB54_41
.LBB54_20:                              # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB54_22
# %bb.21:                               # %if.then82
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
.LBB54_22:                              # %if.end83
	movq	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB54_23:                              # %for.cond84
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_25 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB54_30
# %bb.24:                               # %for.body88
                                        #   in Loop: Header=BB54_23 Depth=1
	movl	$0, -4(%rbp)
.LBB54_25:                              # %for.cond89
                                        #   Parent Loop BB54_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB54_28
# %bb.26:                               # %for.body93
                                        #   in Loop: Header=BB54_25 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.27:                               # %for.inc110
                                        #   in Loop: Header=BB54_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_25
.LBB54_28:                              # %for.end112
                                        #   in Loop: Header=BB54_23 Depth=1
	jmp	.LBB54_29
.LBB54_29:                              # %for.inc113
                                        #   in Loop: Header=BB54_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_23
.LBB54_30:                              # %for.end115
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB54_40
# %bb.31:                               # %if.then119
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB54_32:                              # %for.cond120
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_34 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB54_39
# %bb.33:                               # %for.body124
                                        #   in Loop: Header=BB54_32 Depth=1
	movl	$0, -4(%rbp)
.LBB54_34:                              # %for.cond125
                                        #   Parent Loop BB54_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB54_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB54_34 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.36:                               # %for.inc167
                                        #   in Loop: Header=BB54_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_34
.LBB54_37:                              # %for.end169
                                        #   in Loop: Header=BB54_32 Depth=1
	jmp	.LBB54_38
.LBB54_38:                              # %for.inc170
                                        #   in Loop: Header=BB54_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_32
.LBB54_39:                              # %for.end172
	jmp	.LBB54_40
.LBB54_40:                              # %if.end173
	jmp	.LBB54_41
.LBB54_41:                              # %if.end174
	cmpq	$0, -16(%rbp)
	jne	.LBB54_43
# %bb.42:                               # %if.then177
	movq	$1, -16(%rbp)
.LBB54_43:                              # %if.end178
	cmpq	$0, -32(%rbp)
	jne	.LBB54_45
# %bb.44:                               # %if.then181
	movq	$1, -32(%rbp)
.LBB54_45:                              # %if.end182
	cmpq	$0, -24(%rbp)
	jne	.LBB54_47
# %bb.46:                               # %if.then185
	movq	$1, -24(%rbp)
.LBB54_47:                              # %if.end186
	cmpq	$0, -16(%rbp)
	je	.LBB54_52
# %bb.48:                               # %if.then189
	movl	-52(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-44(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-16(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI54_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB54_50
# %bb.49:                               # %if.then199
	movl	-40(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-32(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI54_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr(%rip), %rax
	vmovss	%xmm0, 4(%rax)
	movl	-40(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-24(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI54_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	jmp	.LBB54_51
.LBB54_50:                              # %if.else216
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 4(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
.LBB54_51:                              # %if.end219
	jmp	.LBB54_52
.LBB54_52:                              # %if.end220
	movq	img, %rax
	cmpl	$0, (%rax)
	jne	.LBB54_54
# %bb.53:                               # %if.then223
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 12(%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 16(%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 20(%rax)
	movq	snr, %rax
	vmovss	12(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	16(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	20(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB54_55
.LBB54_54:                              # %if.else245
	movq	snr, %rax
	vmovss	60(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	64(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	68(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
.LBB54_55:                              # %if.end285
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_57
# %bb.56:                               # %if.then288
	movq	snr, %rax
	vmovss	32(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	44(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	56(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	jmp	.LBB54_61
.LBB54_57:                              # %if.else322
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB54_59
# %bb.58:                               # %if.then326
	movq	snr, %rax
	vmovss	28(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	40(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	52(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB54_60
.LBB54_59:                              # %if.else360
	movq	snr, %rax
	vmovss	24(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	36(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	48(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
.LBB54_60:                              # %if.end394
	jmp	.LBB54_61
.LBB54_61:                              # %if.end395
	cmpl	$473584967, -48(%rbp)   # imm = 0x1C3A5547
	jne	.LBB54_63
.LBB54_62:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_62
.Lfunc_end54:
	.size	find_snr.18, .Lfunc_end54-find_snr.18
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function rdPictureCoding.19
	.type	rdPictureCoding.19,@function
rdPictureCoding.19:                     # @rdPictureCoding.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$778542842, -24(%rbp)   # imm = 0x2E679EFA
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -4(%rbp)
	movl	intras, %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB55_9
# %bb.1:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB55_9
# %bb.2:                                # %if.then
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB55_7
# %bb.3:                                # %if.then5
	xorl	%edi, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB55_5
# %bb.4:                                # %if.then7
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB55_6
.LBB55_5:                               # %if.else
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB55_6:                               # %if.end
	jmp	.LBB55_8
.LBB55_7:                               # %if.else9
	movabsq	$PicParSet, %rax
	addq	$480, %rax              # imm = 0x1E0
	movq	%rax, active_pps
.LBB55_8:                               # %if.end10
	jmp	.LBB55_10
.LBB55_9:                               # %if.else11
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB55_10:                              # %if.end14
	movq	active_pps, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB55_12
# %bb.11:                               # %if.then17
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture2
	jmp	.LBB55_13
.LBB55_12:                              # %if.else18
	movq	frame_pic2, %rdi
	movl	$1, %esi
	callq	frame_picture
	movq	frame_pic, %rdi
	movq	frame_pic2, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
.LBB55_13:                              # %if.end21
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB55_19
# %bb.14:                               # %if.then24
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB55_17
# %bb.15:                               # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB55_17
# %bb.16:                               # %if.then30
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	jmp	.LBB55_18
.LBB55_17:                              # %if.else32
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB55_18:                              # %if.end34
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB55_20
.LBB55_19:                              # %if.else35
	movl	intras, %eax
	movl	%eax, -12(%rbp)
.LBB55_20:                              # %if.end36
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB55_35
# %bb.21:                               # %land.lhs.true39
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB55_35
# %bb.22:                               # %if.then42
	movl	$0, -8(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB55_27
# %bb.23:                               # %if.then46
	movl	$1, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB55_25
# %bb.24:                               # %if.then49
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB55_26
.LBB55_25:                              # %if.else50
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB55_26:                              # %if.end53
	jmp	.LBB55_34
.LBB55_27:                              # %if.else54
	xorl	%edi, %edi
	callq	test_wp_B_slice
	cmpl	$1, %eax
	jne	.LBB55_29
# %bb.28:                               # %if.then57
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB55_33
.LBB55_29:                              # %if.else58
	movq	input, %rax
	movl	1308(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB55_31
# %bb.30:                               # %if.then60
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB55_32
.LBB55_31:                              # %if.else63
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB55_32:                              # %if.end66
	jmp	.LBB55_33
.LBB55_33:                              # %if.end67
	jmp	.LBB55_34
.LBB55_34:                              # %if.end68
	jmp	.LBB55_36
.LBB55_35:                              # %if.else69
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB55_36:                              # %if.end72
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB55_40
# %bb.37:                               # %land.lhs.true75
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB55_40
# %bb.38:                               # %land.lhs.true78
	imull	$100, intras, %eax
	movq	img, %rcx
	xorl	%edx, %edx
	divl	72488(%rcx)
	cmpl	$75, %eax
	jb	.LBB55_40
# %bb.39:                               # %if.then80
	movq	img, %rax
	movl	$2, 24(%rax)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB55_40:                              # %if.end82
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB55_42
# %bb.41:                               # %if.then85
	movq	$0, enc_frame_picture3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB55_46
.LBB55_42:                              # %if.else87
	movq	frame_pic3, %rdi
	movl	$2, %esi
	callq	frame_picture
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB55_44
# %bb.43:                               # %if.then90
	movq	frame_pic, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
	jmp	.LBB55_45
.LBB55_44:                              # %if.else94
	movq	frame_pic2, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	addl	71804(%rcx), %eax
	movl	%eax, 71804(%rcx)
.LBB55_45:                              # %if.end98
	jmp	.LBB55_46
.LBB55_46:                              # %if.end99
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB55_48
# %bb.47:                               # %if.then102
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB55_51
.LBB55_48:                              # %if.else105
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB55_50
# %bb.49:                               # %if.then108
	movq	enc_frame_picture2, %rax
	movq	%rax, enc_picture
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	%rax, active_pps
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
.LBB55_50:                              # %if.end111
	jmp	.LBB55_51
.LBB55_51:                              # %if.end112
	cmpl	$778542842, -24(%rbp)   # imm = 0x2E679EFA
	jne	.LBB55_53
.LBB55_52:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_53:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_52
.Lfunc_end55:
	.size	rdPictureCoding.19, .Lfunc_end55-rdPictureCoding.19
	.cfi_endproc
                                        # -- End function
	.globl	buf2img.20              # -- Begin function buf2img.20
	.p2align	4, 0x90
	.type	buf2img.20,@function
buf2img.20:                             # @buf2img.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1316443596, -60(%rbp)  # imm = 0x4E7755CC
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -20(%rbp)
	movslq	-20(%rbp), %rax
	cmpq	$2, %rax
	jbe	.LBB56_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.3, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB56_2:                               # %if.end
	movb	$0, %al
	callq	testEndian
	cmpl	$0, %eax
	je	.LBB56_35
# %bb.3:                                # %if.then2
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB56_6
	jmp	.LBB56_4
.LBB56_4:                               # %if.then2
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB56_15
	jmp	.LBB56_5
.LBB56_5:                               # %if.then2
	subl	$4, %eax
	je	.LBB56_24
	jmp	.LBB56_33
.LBB56_6:                               # %sw.bb
	movl	$0, -4(%rbp)
.LBB56_7:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_9 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB56_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	$0, -8(%rbp)
.LBB56_9:                               # %for.cond5
                                        #   Parent Loop BB56_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB56_12
# %bb.10:                               # %for.body8
                                        #   in Loop: Header=BB56_9 Depth=2
	movq	-48(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB56_9 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_9
.LBB56_12:                              # %for.end
                                        #   in Loop: Header=BB56_7 Depth=1
	jmp	.LBB56_13
.LBB56_13:                              # %for.inc14
                                        #   in Loop: Header=BB56_7 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_7
.LBB56_14:                              # %for.end16
	jmp	.LBB56_34
.LBB56_15:                              # %sw.bb17
	movl	$0, -4(%rbp)
.LBB56_16:                              # %for.cond18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_18 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB56_23
# %bb.17:                               # %for.body21
                                        #   in Loop: Header=BB56_16 Depth=1
	movl	$0, -8(%rbp)
.LBB56_18:                              # %for.cond22
                                        #   Parent Loop BB56_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB56_21
# %bb.19:                               # %for.body25
                                        #   in Loop: Header=BB56_18 Depth=2
	movq	-48(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx), %ax
	movw	%ax, -14(%rbp)
	movzwl	-14(%rbp), %eax
	sarl	$8, %eax
	movzwl	-14(%rbp), %ecx
	andl	$255, %ecx
	shll	$8, %ecx
	orl	%ecx, %eax
	movw	%ax, -26(%rbp)
	movw	-26(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.20:                               # %for.inc36
                                        #   in Loop: Header=BB56_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_18
.LBB56_21:                              # %for.end38
                                        #   in Loop: Header=BB56_16 Depth=1
	jmp	.LBB56_22
.LBB56_22:                              # %for.inc39
                                        #   in Loop: Header=BB56_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_16
.LBB56_23:                              # %for.end41
	jmp	.LBB56_34
.LBB56_24:                              # %sw.bb42
	movl	$0, -4(%rbp)
.LBB56_25:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_27 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB56_32
# %bb.26:                               # %for.body46
                                        #   in Loop: Header=BB56_25 Depth=1
	movl	$0, -8(%rbp)
.LBB56_27:                              # %for.cond47
                                        #   Parent Loop BB56_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB56_30
# %bb.28:                               # %for.body50
                                        #   in Loop: Header=BB56_27 Depth=2
	movq	-48(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-56(%rbp), %rax
	andq	$65280, %rax            # imm = 0xFF00
	shlq	$8, %rax
	movq	-56(%rbp), %rcx
	andq	$255, %rcx
	shlq	$24, %rcx
	orq	%rcx, %rax
	movq	-56(%rbp), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	shrq	$8, %rcx
	orq	%rcx, %rax
	movl	$4278190080, %ecx       # imm = 0xFF000000
	andq	-56(%rbp), %rcx
	shrq	$24, %rcx
	orq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.29:                               # %for.inc72
                                        #   in Loop: Header=BB56_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_27
.LBB56_30:                              # %for.end74
                                        #   in Loop: Header=BB56_25 Depth=1
	jmp	.LBB56_31
.LBB56_31:                              # %for.inc75
                                        #   in Loop: Header=BB56_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_25
.LBB56_32:                              # %for.end77
	jmp	.LBB56_33
.LBB56_33:                              # %sw.default
	movabsq	$.L.str.4, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB56_34:                              # %sw.epilog
	jmp	.LBB56_44
.LBB56_35:                              # %if.else
	movl	$0, -4(%rbp)
.LBB56_36:                              # %for.cond78
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_38 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB56_43
# %bb.37:                               # %for.body81
                                        #   in Loop: Header=BB56_36 Depth=1
	movl	$0, -8(%rbp)
.LBB56_38:                              # %for.cond82
                                        #   Parent Loop BB56_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB56_41
# %bb.39:                               # %for.body85
                                        #   in Loop: Header=BB56_38 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-8(%rbp), %rax
	shlq	$1, %rax
	addq	%rax, %rdi
	movq	-48(%rbp), %rsi
	movl	-8(%rbp), %eax
	movl	-4(%rbp), %ecx
	imull	-12(%rbp), %ecx
	addl	%ecx, %eax
	imull	-20(%rbp), %eax
	cltq
	addq	%rax, %rsi
	movslq	-20(%rbp), %rdx
	callq	memcpy
# %bb.40:                               # %for.inc100
                                        #   in Loop: Header=BB56_38 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_38
.LBB56_41:                              # %for.end102
                                        #   in Loop: Header=BB56_36 Depth=1
	jmp	.LBB56_42
.LBB56_42:                              # %for.inc103
                                        #   in Loop: Header=BB56_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_36
.LBB56_43:                              # %for.end105
	jmp	.LBB56_44
.LBB56_44:                              # %if.end106
	cmpl	$1316443596, -60(%rbp)  # imm = 0x4E7755CC
	jne	.LBB56_46
.LBB56_45:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_46:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_45
.Lfunc_end56:
	.size	buf2img.20, .Lfunc_end56-buf2img.20
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_motion_vectors_MB.21
	.type	copy_motion_vectors_MB.21,@function
copy_motion_vectors_MB.21:              # @copy_motion_vectors_MB.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$698521350, -20(%rbp)   # imm = 0x29A29706
	movl	$0, -16(%rbp)
.LBB57_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_3 Depth 2
                                        #       Child Loop BB57_5 Depth 3
                                        #         Child Loop BB57_7 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB57_20
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB57_1 Depth=1
	movl	$0, -12(%rbp)
.LBB57_3:                               # %for.cond1
                                        #   Parent Loop BB57_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_5 Depth 3
                                        #         Child Loop BB57_7 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB57_18
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB57_3 Depth=2
	movl	$0, -4(%rbp)
.LBB57_5:                               # %for.cond4
                                        #   Parent Loop BB57_1 Depth=1
                                        #     Parent Loop BB57_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_7 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB57_16
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB57_5 Depth=3
	movl	$0, -8(%rbp)
.LBB57_7:                               # %for.cond7
                                        #   Parent Loop BB57_1 Depth=1
                                        #     Parent Loop BB57_3 Depth=2
                                        #       Parent Loop BB57_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$9, -8(%rbp)
	jge	.LBB57_14
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB57_7 Depth=4
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB57_12
# %bb.9:                                # %land.lhs.true
                                        #   in Loop: Header=BB57_7 Depth=4
	cmpl	$1, -4(%rbp)
	jne	.LBB57_12
# %bb.10:                               # %land.lhs.true96
                                        #   in Loop: Header=BB57_7 Depth=4
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB57_12
# %bb.11:                               # %if.then
                                        #   in Loop: Header=BB57_7 Depth=4
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB57_12:                              # %if.end
                                        #   in Loop: Header=BB57_7 Depth=4
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB57_7 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_7
.LBB57_14:                              # %for.end
                                        #   in Loop: Header=BB57_5 Depth=3
	jmp	.LBB57_15
.LBB57_15:                              # %for.inc359
                                        #   in Loop: Header=BB57_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_5
.LBB57_16:                              # %for.end361
                                        #   in Loop: Header=BB57_3 Depth=2
	jmp	.LBB57_17
.LBB57_17:                              # %for.inc362
                                        #   in Loop: Header=BB57_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_3
.LBB57_18:                              # %for.end364
                                        #   in Loop: Header=BB57_1 Depth=1
	jmp	.LBB57_19
.LBB57_19:                              # %for.inc365
                                        #   in Loop: Header=BB57_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_1
.LBB57_20:                              # %for.end367
	cmpl	$698521350, -20(%rbp)   # imm = 0x29A29706
	jne	.LBB57_22
.LBB57_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_22:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_21
.Lfunc_end57:
	.size	copy_motion_vectors_MB.21, .Lfunc_end57-copy_motion_vectors_MB.21
	.cfi_endproc
                                        # -- End function
	.globl	code_a_picture.22       # -- Begin function code_a_picture.22
	.p2align	4, 0x90
	.type	code_a_picture.22,@function
code_a_picture.22:                      # @code_a_picture.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$689144922, -28(%rbp)   # imm = 0x2913845A
	movq	%rdi, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -8(%rbp)
	movq	-24(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB58_2
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$2, 28(%rax)
	movb	$1, %al
	jne	.LBB58_8
.LBB58_2:                               # %lor.rhs
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 1228(%rcx)
	je	.LBB58_7
# %bb.3:                                # %land.lhs.true2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB58_6
# %bb.4:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB58_6
# %bb.5:                                # %lor.lhs.false6
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	jne	.LBB58_7
.LBB58_6:                               # %land.rhs
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	xorb	$-1, %al
.LBB58_7:                               # %land.end
.LBB58_8:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movq	14152(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 812(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 820(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 816(%rax)
	movb	$0, %al
	callq	RandomIntraNewPicture
	movq	img, %rax
	movl	$1, 72652(%rax)
	movq	img, %rdi
	movq	active_pps, %rsi
	movq	active_sps, %rdx
	callq	FmoInit
	movb	$0, %al
	callq	FmoStartPicture
	movb	$0, %al
	callq	CalculateQuantParam
	movb	$0, %al
	callq	CalculateOffsetParam
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB58_10
# %bb.9:                                # %if.then
	movb	$0, %al
	callq	CalculateQuant8Param
	movb	$0, %al
	callq	CalculateOffset8Param
.LBB58_10:                              # %if.end
	jmp	.LBB58_11
.LBB58_11:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_13 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB58_16
# %bb.12:                               # %while.body
                                        #   in Loop: Header=BB58_11 Depth=1
	jmp	.LBB58_13
.LBB58_13:                              # %while.cond15
                                        #   Parent Loop BB58_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %edi
	callq	FmoSliceGroupCompletelyCoded
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB58_14
	jmp	.LBB58_15
.LBB58_14:                              # %while.body19
                                        #   in Loop: Header=BB58_13 Depth=2
	movl	-8(%rbp), %edi
	movq	-24(%rbp), %rsi
	callq	encode_one_slice
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoSetLastMacroblockInSlice
	movq	img, %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	jmp	.LBB58_13
.LBB58_15:                              # %while.end
                                        #   in Loop: Header=BB58_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_11
.LBB58_16:                              # %while.end22
	movb	$0, %al
	callq	FmoEndPicture
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB58_23
# %bb.17:                               # %land.lhs.true25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB58_23
# %bb.18:                               # %if.then28
	movl	$0, -4(%rbp)
.LBB58_19:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB58_22
# %bb.20:                               # %for.body
                                        #   in Loop: Header=BB58_19 Depth=1
	movq	img, %rdi
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	xorl	%edx, %edx
	callq	DeblockFrame
# %bb.21:                               # %for.inc
                                        #   in Loop: Header=BB58_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_19
.LBB58_22:                              # %for.end
	jmp	.LBB58_23
.LBB58_23:                              # %if.end31
	movq	img, %rdi
	movq	enc_picture, %rax
	movq	6424(%rax), %rsi
	movq	enc_picture, %rax
	movq	6464(%rax), %rdx
	callq	DeblockFrame
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB58_25
# %bb.24:                               # %if.then33
	callq	MbAffPostProc
.LBB58_25:                              # %if.end34
	cmpl	$689144922, -28(%rbp)   # imm = 0x2913845A
	jne	.LBB58_27
.LBB58_26:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_27:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_26
.Lfunc_end58:
	.size	code_a_picture.22, .Lfunc_end58-code_a_picture.22
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_motion_vectors_MB.23
	.type	copy_motion_vectors_MB.23,@function
copy_motion_vectors_MB.23:              # @copy_motion_vectors_MB.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1673848242, -20(%rbp)  # imm = 0x63C4E5B2
	movl	$0, -12(%rbp)
.LBB59_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_3 Depth 2
                                        #       Child Loop BB59_5 Depth 3
                                        #         Child Loop BB59_7 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB59_20
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB59_1 Depth=1
	movl	$0, -8(%rbp)
.LBB59_3:                               # %for.cond1
                                        #   Parent Loop BB59_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_5 Depth 3
                                        #         Child Loop BB59_7 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB59_18
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB59_3 Depth=2
	movl	$0, -4(%rbp)
.LBB59_5:                               # %for.cond4
                                        #   Parent Loop BB59_1 Depth=1
                                        #     Parent Loop BB59_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB59_7 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB59_16
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB59_5 Depth=3
	movl	$0, -16(%rbp)
.LBB59_7:                               # %for.cond7
                                        #   Parent Loop BB59_1 Depth=1
                                        #     Parent Loop BB59_3 Depth=2
                                        #       Parent Loop BB59_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$9, -16(%rbp)
	jge	.LBB59_14
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB59_7 Depth=4
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB59_12
# %bb.9:                                # %land.lhs.true
                                        #   in Loop: Header=BB59_7 Depth=4
	cmpl	$1, -4(%rbp)
	jne	.LBB59_12
# %bb.10:                               # %land.lhs.true96
                                        #   in Loop: Header=BB59_7 Depth=4
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB59_12
# %bb.11:                               # %if.then
                                        #   in Loop: Header=BB59_7 Depth=4
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB59_12:                              # %if.end
                                        #   in Loop: Header=BB59_7 Depth=4
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB59_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_7
.LBB59_14:                              # %for.end
                                        #   in Loop: Header=BB59_5 Depth=3
	jmp	.LBB59_15
.LBB59_15:                              # %for.inc359
                                        #   in Loop: Header=BB59_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_5
.LBB59_16:                              # %for.end361
                                        #   in Loop: Header=BB59_3 Depth=2
	jmp	.LBB59_17
.LBB59_17:                              # %for.inc362
                                        #   in Loop: Header=BB59_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_3
.LBB59_18:                              # %for.end364
                                        #   in Loop: Header=BB59_1 Depth=1
	jmp	.LBB59_19
.LBB59_19:                              # %for.inc365
                                        #   in Loop: Header=BB59_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_1
.LBB59_20:                              # %for.end367
	cmpl	$1673848242, -20(%rbp)  # imm = 0x63C4E5B2
	jne	.LBB59_22
.LBB59_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_22:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_21
.Lfunc_end59:
	.size	copy_motion_vectors_MB.23, .Lfunc_end59-copy_motion_vectors_MB.23
	.cfi_endproc
                                        # -- End function
	.globl	encode_one_frame.24     # -- Begin function encode_one_frame.24
	.p2align	4, 0x90
	.type	encode_one_frame.24,@function
encode_one_frame.24:                    # @encode_one_frame.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$29984121, -36(%rbp)    # imm = 0x1C98579
	movl	$0, -44(%rbp)
	movl	$0, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, -40(%rbp)
	vmovss	%xmm0, -28(%rbp)
	vmovss	%xmm0, -64(%rbp)
	vmovss	%xmm0, -24(%rbp)
	vmovss	%xmm0, -60(%rbp)
	vmovss	%xmm0, -56(%rbp)
	vmovss	%xmm0, -68(%rbp)
	vmovss	%xmm0, -32(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, me_time
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture
	movq	$0, enc_frame_picture2
	movq	$0, enc_frame_picture3
	leaq	-112(%rbp), %rdi
	callq	ftime
	leaq	-88(%rbp), %rdi
	callq	time
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	input, %rax
	cmpl	$0, 56(%rax)
	je	.LBB60_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB60_3
# %bb.2:                                # %if.then
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	write_PPS
	movq	stats, %rcx
	movl	%eax, 1492(%rcx)
	movq	stats, %rax
	movl	1492(%rax), %eax
	movq	stats, %rcx
	addl	1488(%rcx), %eax
	movl	%eax, 1488(%rcx)
.LBB60_3:                               # %if.end
	callq	put_buffer_frame
	callq	init_frame
	callq	CalculateFrameNumber
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %edi
	movq	input, %rax
	movl	220(%rax), %esi
	movq	input, %rax
	movl	64(%rax), %edx
	movq	input, %rax
	movl	68(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	callq	ReadOneFrame
	movq	input, %rax
	movl	64(%rax), %edi
	movq	input, %rax
	movl	68(%rax), %esi
	movq	img, %rax
	movl	52(%rax), %edx
	movq	img, %rax
	movl	60(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	movq	img, %rax
	movl	56(%rax), %eax
	movq	img, %rbx
	movl	64(%rbx), %ebx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	callq	PaddAutoCropBorders
	movq	input, %rax
	movl	1248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71996(%rcx)
	movq	input, %rax
	movl	2928(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71984(%rcx)
	movq	input, %rax
	movl	2932(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71988(%rcx)
	movq	input, %rax
	movl	2936(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71992(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB60_5
# %bb.4:                                # %if.then14
	movl	Bframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Bframe_ctr
	jmp	.LBB60_9
.LBB60_5:                               # %if.else
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_7
# %bb.6:                                # %if.then17
	movl	Iframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Iframe_ctr
	jmp	.LBB60_8
.LBB60_7:                               # %if.else19
	movl	Pframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Pframe_ctr
.LBB60_8:                               # %if.end21
	jmp	.LBB60_9
.LBB60_9:                               # %if.end22
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB60_11
# %bb.10:                               # %if.then24
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	img, %rax
	movl	$1, 71800(%rax)
	jmp	.LBB60_38
.LBB60_11:                              # %if.else25
	movq	img, %rax
	movl	$0, 72600(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB60_13
# %bb.12:                               # %if.then28
	movl	$1, mb_adaptive
.LBB60_13:                              # %if.end29
	movq	img, %rax
	movl	$0, 72444(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB60_21
# %bb.14:                               # %if.then32
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB60_19
# %bb.15:                               # %land.lhs.true35
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB60_19
# %bb.16:                               # %land.lhs.true37
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB60_19
# %bb.17:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB60_19
# %bb.18:                               # %if.then42
	movq	input, %rax
	movl	3248(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	jmp	.LBB60_20
.LBB60_19:                              # %if.else44
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
.LBB60_20:                              # %if.end47
	movl	$1, %edi
	xorl	%esi, %esi
	movl	$1, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -92(%rbp)
	movl	$0, QP
.LBB60_21:                              # %if.end50
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB60_23
# %bb.22:                               # %if.then52
	movq	img, %rax
	movl	$0, 72596(%rax)
.LBB60_23:                              # %if.end53
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB60_25
# %bb.24:                               # %if.then55
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB60_25:                              # %if.end56
	movq	frame_pic, %rdi
	xorl	%esi, %esi
	callq	frame_picture
	movq	input, %rax
	cmpl	$0, 1300(%rax)
	jne	.LBB60_27
# %bb.26:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB60_29
.LBB60_27:                              # %land.lhs.true60
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB60_29
# %bb.28:                               # %if.then62
	callq	rdPictureCoding
.LBB60_29:                              # %if.end63
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB60_31
# %bb.30:                               # %if.then66
	movl	$0, mb_adaptive
.LBB60_31:                              # %if.end67
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB60_36
# %bb.32:                               # %if.then70
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	img, %rax
	movl	$0, 72628(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	top_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	top_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	top_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -60(%rbp)
	movq	frame_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	frame_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	frame_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -40(%rbp)
	movq	frame_pic, %rdi
	movq	top_pic, %rsi
	movq	bottom_pic, %rdx
	callq	picture_structure_decision
	movq	img, %rcx
	movl	%eax, 71800(%rcx)
	movq	img, %rax
	movl	71800(%rax), %edi
	callq	update_field_frame_contexts
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	jne	.LBB60_34
# %bb.33:                               # %if.then86
	movq	img, %rax
	movl	$1, 72604(%rax)
	jmp	.LBB60_35
.LBB60_34:                              # %if.else87
	movq	img, %rax
	movl	$0, 72604(%rax)
.LBB60_35:                              # %if.end89
	jmp	.LBB60_37
.LBB60_36:                              # %if.else90
	movq	img, %rax
	movl	$0, 71800(%rax)
.LBB60_37:                              # %if.end92
	jmp	.LBB60_38
.LBB60_38:                              # %if.end93
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB60_40
# %bb.39:                               # %if.then96
	movq	stats, %rax
	movl	1472(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	jmp	.LBB60_41
.LBB60_40:                              # %if.else98
	movq	stats, %rax
	movl	1468(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
.LBB60_41:                              # %if.end101
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB60_43
# %bb.42:                               # %if.then104
	movq	img, %rax
	movl	71800(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71872(%rcx)
.LBB60_43:                              # %if.end106
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB60_45
# %bb.44:                               # %if.then109
	movl	-48(%rbp), %edi
	vmovss	-56(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-68(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-32(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	field_mode_buffer
	movq	top_pic, %rdi
	callq	writeout_picture
	movq	bottom_pic, %rdi
	callq	writeout_picture
	jmp	.LBB60_54
.LBB60_45:                              # %if.else112
	movl	-44(%rbp), %edi
	vmovss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-64(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-24(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	frame_mode_buffer
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB60_48
# %bb.46:                               # %land.lhs.true115
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB60_48
# %bb.47:                               # %if.then118
	movq	frame_pic3, %rdi
	callq	writeout_picture
	jmp	.LBB60_53
.LBB60_48:                              # %if.else120
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB60_51
# %bb.49:                               # %land.lhs.true123
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB60_51
# %bb.50:                               # %if.then126
	movq	frame_pic2, %rdi
	callq	writeout_picture
	jmp	.LBB60_52
.LBB60_51:                              # %if.else128
	movq	frame_pic, %rdi
	callq	writeout_picture
.LBB60_52:                              # %if.end130
	jmp	.LBB60_53
.LBB60_53:                              # %if.end131
	jmp	.LBB60_54
.LBB60_54:                              # %if.end132
	cmpq	$0, frame_pic3
	je	.LBB60_56
# %bb.55:                               # %if.then134
	movq	frame_pic3, %rdi
	callq	free_slice_list
.LBB60_56:                              # %if.end135
	cmpq	$0, frame_pic2
	je	.LBB60_58
# %bb.57:                               # %if.then137
	movq	frame_pic2, %rdi
	callq	free_slice_list
.LBB60_58:                              # %if.end138
	cmpq	$0, frame_pic
	je	.LBB60_60
# %bb.59:                               # %if.then140
	movq	frame_pic, %rdi
	callq	free_slice_list
.LBB60_60:                              # %if.end141
	cmpq	$0, top_pic
	je	.LBB60_62
# %bb.61:                               # %if.then143
	movq	top_pic, %rdi
	callq	free_slice_list
.LBB60_62:                              # %if.end144
	cmpq	$0, bottom_pic
	je	.LBB60_64
# %bb.63:                               # %if.then146
	movq	bottom_pic, %rdi
	callq	free_slice_list
.LBB60_64:                              # %if.end147
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB60_66
# %bb.65:                               # %if.then150
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %edi
	callq	rc_update_pict_frame
.LBB60_66:                              # %if.end151
	callq	find_snr
	leaq	-80(%rbp), %rdi
	callq	time
	leaq	-128(%rbp), %rdi
	callq	ftime
	imulq	$1000, -80(%rbp), %rax  # imm = 0x3E8
	movzwl	-120(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -88(%rbp), %rcx  # imm = 0x3E8
	movzwl	-104(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -12(%rbp)
	movl	tot_time, %eax
	addl	-12(%rbp), %eax
	movl	%eax, tot_time
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB60_71
# %bb.67:                               # %if.then166
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB60_69
# %bb.68:                               # %if.then169
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	jmp	.LBB60_70
.LBB60_69:                              # %if.else170
	movq	enc_frame_picture, %rdi
	callq	replace_top_pic_with_frame
	movq	enc_bottom_picture, %rdi
	callq	free_storable_picture
.LBB60_70:                              # %if.end171
	jmp	.LBB60_81
.LBB60_71:                              # %if.else172
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB60_73
# %bb.72:                               # %if.then175
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	jmp	.LBB60_80
.LBB60_73:                              # %if.else176
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB60_75
# %bb.74:                               # %if.then180
	movq	enc_frame_picture3, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	jmp	.LBB60_79
.LBB60_75:                              # %if.else181
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB60_77
# %bb.76:                               # %if.then185
	movq	enc_frame_picture2, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
	jmp	.LBB60_78
.LBB60_77:                              # %if.else186
	movq	enc_frame_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
.LBB60_78:                              # %if.end187
	jmp	.LBB60_79
.LBB60_79:                              # %if.end188
	jmp	.LBB60_80
.LBB60_80:                              # %if.end189
	jmp	.LBB60_81
.LBB60_81:                              # %if.end190
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	cltq
	movq	total_frame_buffer, %rcx
	movq	%rax, Bit_Buffer(,%rcx,8)
	movq	total_frame_buffer, %rax
	addq	$1, %rax
	movq	%rax, total_frame_buffer
	movq	img, %rax
	cmpl	$2, 72404(%rax)
	jne	.LBB60_89
# %bb.82:                               # %if.then198
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB60_84
# %bb.83:                               # %if.then200
	movl	encode_one_frame.consecutive_non_reference_pictures, %eax
	addl	$1, %eax
	movl	%eax, encode_one_frame.consecutive_non_reference_pictures
	jmp	.LBB60_85
.LBB60_84:                              # %if.else202
	movl	$0, encode_one_frame.consecutive_non_reference_pictures
.LBB60_85:                              # %if.end203
	movl	frame_no, %eax
	cmpl	encode_one_frame.prev_frame_no, %eax
	jl	.LBB60_87
# %bb.86:                               # %lor.lhs.false206
	cmpl	$1, encode_one_frame.consecutive_non_reference_pictures
	jle	.LBB60_88
.LBB60_87:                              # %if.then209
	movabsq	$.L.str, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB60_88:                              # %if.end210
	movl	frame_no, %eax
	movl	%eax, encode_one_frame.prev_frame_no
.LBB60_89:                              # %if.end211
	movq	stats, %rax
	cmpl	$0, 1492(%rax)
	je	.LBB60_91
# %bb.90:                               # %if.then215
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportNALNonVLCBits
.LBB60_91:                              # %if.end216
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB60_93
# %bb.92:                               # %if.then221
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportFirstframe
	jmp	.LBB60_110
.LBB60_93:                              # %if.else222
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB60_99
# %bb.94:                               # %if.then225
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB60_97
# %bb.95:                               # %land.lhs.true228
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB60_97
# %bb.96:                               # %if.then231
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_98
.LBB60_97:                              # %if.else235
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Pprev_bits, %eax
	movl	%eax, -16(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Pprev_bits
.LBB60_98:                              # %if.end239
	jmp	.LBB60_99
.LBB60_99:                              # %if.end240
	movq	img(%rip), %rax
	movl	24(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB60_104
	jmp	.LBB60_100
.LBB60_100:                             # %if.end240
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB60_102
	jmp	.LBB60_101
.LBB60_101:                             # %if.end240
	subl	$3, %eax
	je	.LBB60_103
	jmp	.LBB60_108
.LBB60_102:                             # %sw.bb
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	704(%rcx), %eax
	movl	%eax, 704(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportIntra
	jmp	.LBB60_109
.LBB60_103:                             # %sw.bb246
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportSP
	jmp	.LBB60_109
.LBB60_104:                             # %sw.bb251
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	712(%rcx), %eax
	movl	%eax, 712(%rcx)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB60_106
# %bb.105:                              # %if.then259
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportRB
	jmp	.LBB60_107
.LBB60_106:                             # %if.else260
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportB
.LBB60_107:                             # %if.end261
	jmp	.LBB60_109
.LBB60_108:                             # %sw.default
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportP
.LBB60_109:                             # %sw.epilog
	jmp	.LBB60_110
.LBB60_110:                             # %if.end267
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 20(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB60_120
# %bb.111:                              # %if.then272
	movl	-16(%rbp), %edi
	callq	rc_update_pict
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB60_114
# %bb.112:                              # %land.lhs.true276
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB60_114
# %bb.113:                              # %if.then279
	movb	$0, %al
	callq	updateRCModel
	jmp	.LBB60_119
.LBB60_114:                             # %if.else280
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB60_118
# %bb.115:                              # %land.lhs.true284
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB60_118
# %bb.116:                              # %land.lhs.true287
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB60_118
# %bb.117:                              # %if.then291
	movb	$0, %al
	callq	updateRCModel
.LBB60_118:                             # %if.end292
	jmp	.LBB60_119
.LBB60_119:                             # %if.end293
	jmp	.LBB60_120
.LBB60_120:                             # %if.end294
	movq	stats, %rax
	movl	$0, 1492(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB60_122
# %bb.121:                              # %if.then300
	movl	$0, -20(%rbp)
	jmp	.LBB60_123
.LBB60_122:                             # %if.else301
	movl	$1, -20(%rbp)
.LBB60_123:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$29984121, -36(%rbp)    # imm = 0x1C98579
	jne	.LBB60_125
.LBB60_124:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_125:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_124
.Lfunc_end60:
	.size	encode_one_frame.24, .Lfunc_end60-encode_one_frame.24
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function distortion_fld.25
	.type	distortion_fld.25,@function
distortion_fld.25:                      # @distortion_fld.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1499888611, -4(%rbp)   # imm = 0x59667BE3
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -16(%rbp)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movb	$0, %al
	callq	combine_field
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	callq	find_distortion
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vmovss	%xmm0, (%rax)
	cmpl	$1499888611, -4(%rbp)   # imm = 0x59667BE3
	jne	.LBB61_2
.LBB61_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_1
.Lfunc_end61:
	.size	distortion_fld.25, .Lfunc_end61-distortion_fld.25
	.cfi_endproc
                                        # -- End function
	.globl	encode_one_frame.26     # -- Begin function encode_one_frame.26
	.p2align	4, 0x90
	.type	encode_one_frame.26,@function
encode_one_frame.26:                    # @encode_one_frame.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1370334799, -60(%rbp)  # imm = 0x51ADA64F
	movl	$0, -28(%rbp)
	movl	$0, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, -36(%rbp)
	vmovss	%xmm0, -48(%rbp)
	vmovss	%xmm0, -32(%rbp)
	vmovss	%xmm0, -40(%rbp)
	vmovss	%xmm0, -52(%rbp)
	vmovss	%xmm0, -64(%rbp)
	vmovss	%xmm0, -24(%rbp)
	vmovss	%xmm0, -44(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, me_time
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture
	movq	$0, enc_frame_picture2
	movq	$0, enc_frame_picture3
	leaq	-112(%rbp), %rdi
	callq	ftime
	leaq	-88(%rbp), %rdi
	callq	time
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	input, %rax
	cmpl	$0, 56(%rax)
	je	.LBB62_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB62_3
# %bb.2:                                # %if.then
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	write_PPS
	movq	stats, %rcx
	movl	%eax, 1492(%rcx)
	movq	stats, %rax
	movl	1492(%rax), %eax
	movq	stats, %rcx
	addl	1488(%rcx), %eax
	movl	%eax, 1488(%rcx)
.LBB62_3:                               # %if.end
	callq	put_buffer_frame
	callq	init_frame
	callq	CalculateFrameNumber
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %edi
	movq	input, %rax
	movl	220(%rax), %esi
	movq	input, %rax
	movl	64(%rax), %edx
	movq	input, %rax
	movl	68(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	callq	ReadOneFrame
	movq	input, %rax
	movl	64(%rax), %edi
	movq	input, %rax
	movl	68(%rax), %esi
	movq	img, %rax
	movl	52(%rax), %edx
	movq	img, %rax
	movl	60(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	movq	img, %rax
	movl	56(%rax), %eax
	movq	img, %rbx
	movl	64(%rbx), %ebx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	callq	PaddAutoCropBorders
	movq	input, %rax
	movl	1248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71996(%rcx)
	movq	input, %rax
	movl	2928(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71984(%rcx)
	movq	input, %rax
	movl	2932(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71988(%rcx)
	movq	input, %rax
	movl	2936(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71992(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB62_5
# %bb.4:                                # %if.then14
	movl	Bframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Bframe_ctr
	jmp	.LBB62_9
.LBB62_5:                               # %if.else
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_7
# %bb.6:                                # %if.then17
	movl	Iframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Iframe_ctr
	jmp	.LBB62_8
.LBB62_7:                               # %if.else19
	movl	Pframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Pframe_ctr
.LBB62_8:                               # %if.end21
	jmp	.LBB62_9
.LBB62_9:                               # %if.end22
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB62_11
# %bb.10:                               # %if.then24
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	img, %rax
	movl	$1, 71800(%rax)
	jmp	.LBB62_38
.LBB62_11:                              # %if.else25
	movq	img, %rax
	movl	$0, 72600(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB62_13
# %bb.12:                               # %if.then28
	movl	$1, mb_adaptive
.LBB62_13:                              # %if.end29
	movq	img, %rax
	movl	$0, 72444(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB62_21
# %bb.14:                               # %if.then32
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB62_19
# %bb.15:                               # %land.lhs.true35
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB62_19
# %bb.16:                               # %land.lhs.true37
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB62_19
# %bb.17:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB62_19
# %bb.18:                               # %if.then42
	movq	input, %rax
	movl	3248(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	jmp	.LBB62_20
.LBB62_19:                              # %if.else44
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
.LBB62_20:                              # %if.end47
	movl	$1, %edi
	xorl	%esi, %esi
	movl	$1, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -92(%rbp)
	movl	$0, QP
.LBB62_21:                              # %if.end50
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB62_23
# %bb.22:                               # %if.then52
	movq	img, %rax
	movl	$0, 72596(%rax)
.LBB62_23:                              # %if.end53
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB62_25
# %bb.24:                               # %if.then55
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB62_25:                              # %if.end56
	movq	frame_pic, %rdi
	xorl	%esi, %esi
	callq	frame_picture
	movq	input, %rax
	cmpl	$0, 1300(%rax)
	jne	.LBB62_27
# %bb.26:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB62_29
.LBB62_27:                              # %land.lhs.true60
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB62_29
# %bb.28:                               # %if.then62
	callq	rdPictureCoding
.LBB62_29:                              # %if.end63
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB62_31
# %bb.30:                               # %if.then66
	movl	$0, mb_adaptive
.LBB62_31:                              # %if.end67
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB62_36
# %bb.32:                               # %if.then70
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	img, %rax
	movl	$0, 72628(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	top_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	top_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	top_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -52(%rbp)
	movq	frame_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	frame_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	frame_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -36(%rbp)
	movq	frame_pic, %rdi
	movq	top_pic, %rsi
	movq	bottom_pic, %rdx
	callq	picture_structure_decision
	movq	img, %rcx
	movl	%eax, 71800(%rcx)
	movq	img, %rax
	movl	71800(%rax), %edi
	callq	update_field_frame_contexts
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	jne	.LBB62_34
# %bb.33:                               # %if.then86
	movq	img, %rax
	movl	$1, 72604(%rax)
	jmp	.LBB62_35
.LBB62_34:                              # %if.else87
	movq	img, %rax
	movl	$0, 72604(%rax)
.LBB62_35:                              # %if.end89
	jmp	.LBB62_37
.LBB62_36:                              # %if.else90
	movq	img, %rax
	movl	$0, 71800(%rax)
.LBB62_37:                              # %if.end92
	jmp	.LBB62_38
.LBB62_38:                              # %if.end93
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB62_40
# %bb.39:                               # %if.then96
	movq	stats, %rax
	movl	1472(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	jmp	.LBB62_41
.LBB62_40:                              # %if.else98
	movq	stats, %rax
	movl	1468(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
.LBB62_41:                              # %if.end101
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB62_43
# %bb.42:                               # %if.then104
	movq	img, %rax
	movl	71800(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71872(%rcx)
.LBB62_43:                              # %if.end106
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB62_45
# %bb.44:                               # %if.then109
	movl	-56(%rbp), %edi
	vmovss	-64(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-24(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-44(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	field_mode_buffer
	movq	top_pic, %rdi
	callq	writeout_picture
	movq	bottom_pic, %rdi
	callq	writeout_picture
	jmp	.LBB62_54
.LBB62_45:                              # %if.else112
	movl	-28(%rbp), %edi
	vmovss	-48(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-32(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-40(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	frame_mode_buffer
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB62_48
# %bb.46:                               # %land.lhs.true115
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB62_48
# %bb.47:                               # %if.then118
	movq	frame_pic3, %rdi
	callq	writeout_picture
	jmp	.LBB62_53
.LBB62_48:                              # %if.else120
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB62_51
# %bb.49:                               # %land.lhs.true123
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB62_51
# %bb.50:                               # %if.then126
	movq	frame_pic2, %rdi
	callq	writeout_picture
	jmp	.LBB62_52
.LBB62_51:                              # %if.else128
	movq	frame_pic, %rdi
	callq	writeout_picture
.LBB62_52:                              # %if.end130
	jmp	.LBB62_53
.LBB62_53:                              # %if.end131
	jmp	.LBB62_54
.LBB62_54:                              # %if.end132
	cmpq	$0, frame_pic3
	je	.LBB62_56
# %bb.55:                               # %if.then134
	movq	frame_pic3, %rdi
	callq	free_slice_list
.LBB62_56:                              # %if.end135
	cmpq	$0, frame_pic2
	je	.LBB62_58
# %bb.57:                               # %if.then137
	movq	frame_pic2, %rdi
	callq	free_slice_list
.LBB62_58:                              # %if.end138
	cmpq	$0, frame_pic
	je	.LBB62_60
# %bb.59:                               # %if.then140
	movq	frame_pic, %rdi
	callq	free_slice_list
.LBB62_60:                              # %if.end141
	cmpq	$0, top_pic
	je	.LBB62_62
# %bb.61:                               # %if.then143
	movq	top_pic, %rdi
	callq	free_slice_list
.LBB62_62:                              # %if.end144
	cmpq	$0, bottom_pic
	je	.LBB62_64
# %bb.63:                               # %if.then146
	movq	bottom_pic, %rdi
	callq	free_slice_list
.LBB62_64:                              # %if.end147
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB62_66
# %bb.65:                               # %if.then150
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %edi
	callq	rc_update_pict_frame
.LBB62_66:                              # %if.end151
	callq	find_snr
	leaq	-80(%rbp), %rdi
	callq	time
	leaq	-128(%rbp), %rdi
	callq	ftime
	imulq	$1000, -80(%rbp), %rax  # imm = 0x3E8
	movzwl	-120(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -88(%rbp), %rcx  # imm = 0x3E8
	movzwl	-104(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -12(%rbp)
	movl	tot_time, %eax
	addl	-12(%rbp), %eax
	movl	%eax, tot_time
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB62_71
# %bb.67:                               # %if.then166
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB62_69
# %bb.68:                               # %if.then169
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	jmp	.LBB62_70
.LBB62_69:                              # %if.else170
	movq	enc_frame_picture, %rdi
	callq	replace_top_pic_with_frame
	movq	enc_bottom_picture, %rdi
	callq	free_storable_picture
.LBB62_70:                              # %if.end171
	jmp	.LBB62_81
.LBB62_71:                              # %if.else172
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB62_73
# %bb.72:                               # %if.then175
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	jmp	.LBB62_80
.LBB62_73:                              # %if.else176
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB62_75
# %bb.74:                               # %if.then180
	movq	enc_frame_picture3, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	jmp	.LBB62_79
.LBB62_75:                              # %if.else181
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB62_77
# %bb.76:                               # %if.then185
	movq	enc_frame_picture2, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
	jmp	.LBB62_78
.LBB62_77:                              # %if.else186
	movq	enc_frame_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
.LBB62_78:                              # %if.end187
	jmp	.LBB62_79
.LBB62_79:                              # %if.end188
	jmp	.LBB62_80
.LBB62_80:                              # %if.end189
	jmp	.LBB62_81
.LBB62_81:                              # %if.end190
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	cltq
	movq	total_frame_buffer, %rcx
	movq	%rax, Bit_Buffer(,%rcx,8)
	movq	total_frame_buffer, %rax
	addq	$1, %rax
	movq	%rax, total_frame_buffer
	movq	img, %rax
	cmpl	$2, 72404(%rax)
	jne	.LBB62_89
# %bb.82:                               # %if.then198
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB62_84
# %bb.83:                               # %if.then200
	movl	encode_one_frame.consecutive_non_reference_pictures, %eax
	addl	$1, %eax
	movl	%eax, encode_one_frame.consecutive_non_reference_pictures
	jmp	.LBB62_85
.LBB62_84:                              # %if.else202
	movl	$0, encode_one_frame.consecutive_non_reference_pictures
.LBB62_85:                              # %if.end203
	movl	frame_no, %eax
	cmpl	encode_one_frame.prev_frame_no, %eax
	jl	.LBB62_87
# %bb.86:                               # %lor.lhs.false206
	cmpl	$1, encode_one_frame.consecutive_non_reference_pictures
	jle	.LBB62_88
.LBB62_87:                              # %if.then209
	movabsq	$.L.str, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB62_88:                              # %if.end210
	movl	frame_no, %eax
	movl	%eax, encode_one_frame.prev_frame_no
.LBB62_89:                              # %if.end211
	movq	stats, %rax
	cmpl	$0, 1492(%rax)
	je	.LBB62_91
# %bb.90:                               # %if.then215
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportNALNonVLCBits
.LBB62_91:                              # %if.end216
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB62_93
# %bb.92:                               # %if.then221
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportFirstframe
	jmp	.LBB62_110
.LBB62_93:                              # %if.else222
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB62_99
# %bb.94:                               # %if.then225
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB62_97
# %bb.95:                               # %land.lhs.true228
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB62_97
# %bb.96:                               # %if.then231
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_98
.LBB62_97:                              # %if.else235
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Pprev_bits, %eax
	movl	%eax, -16(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Pprev_bits
.LBB62_98:                              # %if.end239
	jmp	.LBB62_99
.LBB62_99:                              # %if.end240
	movq	img(%rip), %rax
	movl	24(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB62_104
	jmp	.LBB62_100
.LBB62_100:                             # %if.end240
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB62_102
	jmp	.LBB62_101
.LBB62_101:                             # %if.end240
	subl	$3, %eax
	je	.LBB62_103
	jmp	.LBB62_108
.LBB62_102:                             # %sw.bb
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	704(%rcx), %eax
	movl	%eax, 704(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportIntra
	jmp	.LBB62_109
.LBB62_103:                             # %sw.bb246
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportSP
	jmp	.LBB62_109
.LBB62_104:                             # %sw.bb251
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	712(%rcx), %eax
	movl	%eax, 712(%rcx)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB62_106
# %bb.105:                              # %if.then259
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportRB
	jmp	.LBB62_107
.LBB62_106:                             # %if.else260
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportB
.LBB62_107:                             # %if.end261
	jmp	.LBB62_109
.LBB62_108:                             # %sw.default
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportP
.LBB62_109:                             # %sw.epilog
	jmp	.LBB62_110
.LBB62_110:                             # %if.end267
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 20(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB62_120
# %bb.111:                              # %if.then272
	movl	-16(%rbp), %edi
	callq	rc_update_pict
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB62_114
# %bb.112:                              # %land.lhs.true276
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB62_114
# %bb.113:                              # %if.then279
	movb	$0, %al
	callq	updateRCModel
	jmp	.LBB62_119
.LBB62_114:                             # %if.else280
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB62_118
# %bb.115:                              # %land.lhs.true284
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB62_118
# %bb.116:                              # %land.lhs.true287
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB62_118
# %bb.117:                              # %if.then291
	movb	$0, %al
	callq	updateRCModel
.LBB62_118:                             # %if.end292
	jmp	.LBB62_119
.LBB62_119:                             # %if.end293
	jmp	.LBB62_120
.LBB62_120:                             # %if.end294
	movq	stats, %rax
	movl	$0, 1492(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB62_122
# %bb.121:                              # %if.then300
	movl	$0, -20(%rbp)
	jmp	.LBB62_123
.LBB62_122:                             # %if.else301
	movl	$1, -20(%rbp)
.LBB62_123:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1370334799, -60(%rbp)  # imm = 0x51ADA64F
	jne	.LBB62_125
.LBB62_124:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_125:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_124
.Lfunc_end62:
	.size	encode_one_frame.26, .Lfunc_end62-encode_one_frame.26
	.cfi_endproc
                                        # -- End function
	.globl	UnifiedOneForthPix.27   # -- Begin function UnifiedOneForthPix.27
	.p2align	4, 0x90
	.type	UnifiedOneForthPix.27,@function
UnifiedOneForthPix.27:                  # @UnifiedOneForthPix.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$475096625, -108(%rbp)  # imm = 0x1C516631
	movq	%rdi, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	6424(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	cmpq	$0, 6448(%rax)
	jne	.LBB63_2
# %bb.1:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpq	$0, 6432(%rax)
	je	.LBB63_3
.LBB63_2:                               # %if.then
	jmp	.LBB63_266
.LBB63_3:                               # %if.end
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6432(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6432(%rax), %rcx
	jne	.LBB63_5
# %bb.4:                                # %if.then9
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB63_5:                               # %if.end10
	movq	-64(%rbp), %rdi
	addq	$6448, %rdi             # imm = 0x1930
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB63_8
# %bb.6:                                # %lor.lhs.false19
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB63_8
# %bb.7:                                # %lor.lhs.false21
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB63_11
.LBB63_8:                               # %if.then23
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6440(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6440(%rax), %rcx
	jne	.LBB63_10
# %bb.9:                                # %if.then33
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB63_10:                              # %if.end34
	movq	-64(%rbp), %rdi
	addq	$6456, %rdi             # imm = 0x1938
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
.LBB63_11:                              # %if.end42
	movq	-64(%rbp), %rax
	movq	6448(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-64(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$-4, -48(%rbp)
.LBB63_12:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_14 Depth 2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_91
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB63_12 Depth=1
	movl	$-4, -44(%rbp)
.LBB63_14:                              # %for.cond49
                                        #   Parent Loop BB63_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_89
# %bb.15:                               # %for.body54
                                        #   in Loop: Header=BB63_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB63_17
# %bb.16:                               # %cond.true
                                        #   in Loop: Header=BB63_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB63_18
.LBB63_17:                              # %cond.false
                                        #   in Loop: Header=BB63_14 Depth=2
	movl	-48(%rbp), %eax
.LBB63_18:                              # %cond.end
                                        #   in Loop: Header=BB63_14 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_20
# %bb.19:                               # %cond.true62
                                        #   in Loop: Header=BB63_14 Depth=2
	xorl	%eax, %eax
	jmp	.LBB63_24
.LBB63_20:                              # %cond.false63
                                        #   in Loop: Header=BB63_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB63_22
# %bb.21:                               # %cond.true68
                                        #   in Loop: Header=BB63_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB63_23
.LBB63_22:                              # %cond.false71
                                        #   in Loop: Header=BB63_14 Depth=2
	movl	-48(%rbp), %eax
.LBB63_23:                              # %cond.end72
                                        #   in Loop: Header=BB63_14 Depth=2
.LBB63_24:                              # %cond.end74
                                        #   in Loop: Header=BB63_14 Depth=2
	movl	%eax, -84(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	-104(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB63_26
# %bb.25:                               # %cond.true80
                                        #   in Loop: Header=BB63_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB63_27
.LBB63_26:                              # %cond.false83
                                        #   in Loop: Header=BB63_14 Depth=2
	movl	-44(%rbp), %edx
.LBB63_27:                              # %cond.end84
                                        #   in Loop: Header=BB63_14 Depth=2
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB63_29
# %bb.28:                               # %cond.true88
                                        #   in Loop: Header=BB63_14 Depth=2
	xorl	%edx, %edx
	jmp	.LBB63_33
.LBB63_29:                              # %cond.false89
                                        #   in Loop: Header=BB63_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB63_31
# %bb.30:                               # %cond.true94
                                        #   in Loop: Header=BB63_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB63_32
.LBB63_31:                              # %cond.false97
                                        #   in Loop: Header=BB63_14 Depth=2
	movl	-44(%rbp), %edx
.LBB63_32:                              # %cond.end98
                                        #   in Loop: Header=BB63_14 Depth=2
.LBB63_33:                              # %cond.end100
                                        #   in Loop: Header=BB63_14 Depth=2
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB63_35
# %bb.34:                               # %cond.true112
                                        #   in Loop: Header=BB63_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB63_36
.LBB63_35:                              # %cond.false115
                                        #   in Loop: Header=BB63_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB63_36:                              # %cond.end117
                                        #   in Loop: Header=BB63_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB63_38
# %bb.37:                               # %cond.true121
                                        #   in Loop: Header=BB63_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB63_42
.LBB63_38:                              # %cond.false122
                                        #   in Loop: Header=BB63_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB63_40
# %bb.39:                               # %cond.true128
                                        #   in Loop: Header=BB63_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB63_41
.LBB63_40:                              # %cond.false131
                                        #   in Loop: Header=BB63_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB63_41:                              # %cond.end133
                                        #   in Loop: Header=BB63_14 Depth=2
.LBB63_42:                              # %cond.end135
                                        #   in Loop: Header=BB63_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB63_44
# %bb.43:                               # %cond.true149
                                        #   in Loop: Header=BB63_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB63_45
.LBB63_44:                              # %cond.false152
                                        #   in Loop: Header=BB63_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB63_45:                              # %cond.end154
                                        #   in Loop: Header=BB63_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB63_47
# %bb.46:                               # %cond.true158
                                        #   in Loop: Header=BB63_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB63_51
.LBB63_47:                              # %cond.false159
                                        #   in Loop: Header=BB63_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB63_49
# %bb.48:                               # %cond.true165
                                        #   in Loop: Header=BB63_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB63_50
.LBB63_49:                              # %cond.false168
                                        #   in Loop: Header=BB63_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB63_50:                              # %cond.end170
                                        #   in Loop: Header=BB63_14 Depth=2
.LBB63_51:                              # %cond.end172
                                        #   in Loop: Header=BB63_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB63_53
# %bb.52:                               # %cond.true184
                                        #   in Loop: Header=BB63_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB63_54
.LBB63_53:                              # %cond.false187
                                        #   in Loop: Header=BB63_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB63_54:                              # %cond.end189
                                        #   in Loop: Header=BB63_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB63_56
# %bb.55:                               # %cond.true193
                                        #   in Loop: Header=BB63_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB63_60
.LBB63_56:                              # %cond.false194
                                        #   in Loop: Header=BB63_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB63_58
# %bb.57:                               # %cond.true200
                                        #   in Loop: Header=BB63_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB63_59
.LBB63_58:                              # %cond.false203
                                        #   in Loop: Header=BB63_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB63_59:                              # %cond.end205
                                        #   in Loop: Header=BB63_14 Depth=2
.LBB63_60:                              # %cond.end207
                                        #   in Loop: Header=BB63_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB63_62
# %bb.61:                               # %cond.true222
                                        #   in Loop: Header=BB63_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB63_63
.LBB63_62:                              # %cond.false225
                                        #   in Loop: Header=BB63_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB63_63:                              # %cond.end227
                                        #   in Loop: Header=BB63_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB63_65
# %bb.64:                               # %cond.true231
                                        #   in Loop: Header=BB63_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB63_69
.LBB63_65:                              # %cond.false232
                                        #   in Loop: Header=BB63_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB63_67
# %bb.66:                               # %cond.true238
                                        #   in Loop: Header=BB63_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB63_68
.LBB63_67:                              # %cond.false241
                                        #   in Loop: Header=BB63_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB63_68:                              # %cond.end243
                                        #   in Loop: Header=BB63_14 Depth=2
.LBB63_69:                              # %cond.end245
                                        #   in Loop: Header=BB63_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB63_71
# %bb.70:                               # %cond.true257
                                        #   in Loop: Header=BB63_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB63_72
.LBB63_71:                              # %cond.false260
                                        #   in Loop: Header=BB63_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB63_72:                              # %cond.end262
                                        #   in Loop: Header=BB63_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB63_74
# %bb.73:                               # %cond.true266
                                        #   in Loop: Header=BB63_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB63_78
.LBB63_74:                              # %cond.false267
                                        #   in Loop: Header=BB63_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB63_76
# %bb.75:                               # %cond.true273
                                        #   in Loop: Header=BB63_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB63_77
.LBB63_76:                              # %cond.false276
                                        #   in Loop: Header=BB63_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB63_77:                              # %cond.end278
                                        #   in Loop: Header=BB63_14 Depth=2
.LBB63_78:                              # %cond.end280
                                        #   in Loop: Header=BB63_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	%eax, -88(%rbp)
	movq	-104(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB63_80
# %bb.79:                               # %cond.true294
                                        #   in Loop: Header=BB63_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB63_81
.LBB63_80:                              # %cond.false297
                                        #   in Loop: Header=BB63_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB63_81:                              # %cond.end298
                                        #   in Loop: Header=BB63_14 Depth=2
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB63_83
# %bb.82:                               # %cond.true302
                                        #   in Loop: Header=BB63_14 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB63_87
.LBB63_83:                              # %cond.false303
                                        #   in Loop: Header=BB63_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB63_85
# %bb.84:                               # %cond.true308
                                        #   in Loop: Header=BB63_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB63_86
.LBB63_85:                              # %cond.false311
                                        #   in Loop: Header=BB63_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB63_86:                              # %cond.end312
                                        #   in Loop: Header=BB63_14 Depth=2
.LBB63_87:                              # %cond.end314
                                        #   in Loop: Header=BB63_14 Depth=2
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	shll	$10, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-88(%rbp), %eax
	shll	$5, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.88:                               # %for.inc
                                        #   in Loop: Header=BB63_14 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB63_14
.LBB63_89:                              # %for.end
                                        #   in Loop: Header=BB63_12 Depth=1
	jmp	.LBB63_90
.LBB63_90:                              # %for.inc336
                                        #   in Loop: Header=BB63_12 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB63_12
.LBB63_91:                              # %for.end338
	movl	$0, -44(%rbp)
.LBB63_92:                              # %for.cond339
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_94 Depth 2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$8, %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_132
# %bb.93:                               # %for.body345
                                        #   in Loop: Header=BB63_92 Depth=1
	movl	$0, -48(%rbp)
.LBB63_94:                              # %for.cond346
                                        #   Parent Loop BB63_92 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_130
# %bb.95:                               # %for.body351
                                        #   in Loop: Header=BB63_94 Depth=2
	movl	-48(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -124(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	img4Y_tmp, %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	img4Y_tmp, %rdx
	movl	-92(%rbp), %esi
	movl	-48(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB63_97
# %bb.96:                               # %cond.true363
                                        #   in Loop: Header=BB63_94 Depth=2
	movl	-92(%rbp), %esi
	jmp	.LBB63_98
.LBB63_97:                              # %cond.false364
                                        #   in Loop: Header=BB63_94 Depth=2
	movl	-48(%rbp), %esi
	addl	$1, %esi
.LBB63_98:                              # %cond.end366
                                        #   in Loop: Header=BB63_94 Depth=2
	xorl	%edi, %edi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$1, %esi
	cmpl	%esi, %edi
	jle	.LBB63_100
# %bb.99:                               # %cond.true377
                                        #   in Loop: Header=BB63_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB63_101
.LBB63_100:                             # %cond.false378
                                        #   in Loop: Header=BB63_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$1, %esi
.LBB63_101:                             # %cond.end380
                                        #   in Loop: Header=BB63_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-92(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB63_103
# %bb.102:                              # %cond.true389
                                        #   in Loop: Header=BB63_94 Depth=2
	movl	-92(%rbp), %edi
	jmp	.LBB63_104
.LBB63_103:                             # %cond.false390
                                        #   in Loop: Header=BB63_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$2, %edi
.LBB63_104:                             # %cond.end392
                                        #   in Loop: Header=BB63_94 Depth=2
	xorl	%ebx, %ebx
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$2, %esi
	cmpl	%esi, %ebx
	jle	.LBB63_106
# %bb.105:                              # %cond.true404
                                        #   in Loop: Header=BB63_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB63_107
.LBB63_106:                             # %cond.false405
                                        #   in Loop: Header=BB63_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$2, %esi
.LBB63_107:                             # %cond.end407
                                        #   in Loop: Header=BB63_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-92(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB63_109
# %bb.108:                              # %cond.true416
                                        #   in Loop: Header=BB63_94 Depth=2
	movl	-92(%rbp), %edi
	jmp	.LBB63_110
.LBB63_109:                             # %cond.false417
                                        #   in Loop: Header=BB63_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$3, %edi
.LBB63_110:                             # %cond.end419
                                        #   in Loop: Header=BB63_94 Depth=2
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -88(%rbp)
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	movl	-44(%rbp), %r8d
	subl	$8, %r8d
	shll	$1, %r8d
	movq	img, %rax
	movl	72684(%rax), %ebx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
	cmpl	%eax, %ebx
	jge	.LBB63_112
# %bb.111:                              # %cond.true440
                                        #   in Loop: Header=BB63_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_113
.LBB63_112:                             # %cond.false442
                                        #   in Loop: Header=BB63_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB63_113:                             # %cond.end449
                                        #   in Loop: Header=BB63_94 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_115
# %bb.114:                              # %cond.true453
                                        #   in Loop: Header=BB63_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB63_119
.LBB63_115:                             # %cond.false454
                                        #   in Loop: Header=BB63_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %ecx
	jge	.LBB63_117
# %bb.116:                              # %cond.true464
                                        #   in Loop: Header=BB63_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_118
.LBB63_117:                             # %cond.false466
                                        #   in Loop: Header=BB63_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB63_118:                             # %cond.end473
                                        #   in Loop: Header=BB63_94 Depth=2
.LBB63_119:                             # %cond.end475
                                        #   in Loop: Header=BB63_94 Depth=2
	movl	%r8d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	addl	$2, %esi
	movl	-44(%rbp), %ecx
	subl	$8, %ecx
	shll	$1, %ecx
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB63_121
# %bb.120:                              # %cond.true488
                                        #   in Loop: Header=BB63_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_122
.LBB63_121:                             # %cond.false490
                                        #   in Loop: Header=BB63_94 Depth=2
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB63_122:                             # %cond.end493
                                        #   in Loop: Header=BB63_94 Depth=2
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB63_124
# %bb.123:                              # %cond.true497
                                        #   in Loop: Header=BB63_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB63_128
.LBB63_124:                             # %cond.false498
                                        #   in Loop: Header=BB63_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB63_126
# %bb.125:                              # %cond.true504
                                        #   in Loop: Header=BB63_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_127
.LBB63_126:                             # %cond.false506
                                        #   in Loop: Header=BB63_94 Depth=2
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB63_127:                             # %cond.end509
                                        #   in Loop: Header=BB63_94 Depth=2
.LBB63_128:                             # %cond.end511
                                        #   in Loop: Header=BB63_94 Depth=2
	movl	%ecx, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.129:                              # %for.inc514
                                        #   in Loop: Header=BB63_94 Depth=2
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB63_94
.LBB63_130:                             # %for.end516
                                        #   in Loop: Header=BB63_92 Depth=1
	jmp	.LBB63_131
.LBB63_131:                             # %for.inc517
                                        #   in Loop: Header=BB63_92 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB63_92
.LBB63_132:                             # %for.end519
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -68(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -48(%rbp)
.LBB63_133:                             # %for.cond528
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_135 Depth 2
	movl	-48(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_161
# %bb.134:                              # %for.body532
                                        #   in Loop: Header=BB63_133 Depth=1
	movl	$0, -44(%rbp)
.LBB63_135:                             # %for.cond533
                                        #   Parent Loop BB63_133 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_159
# %bb.136:                              # %for.body537
                                        #   in Loop: Header=BB63_135 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r15d
	subl	$16, %r15d
	movl	-44(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_138
# %bb.137:                              # %cond.true551
                                        #   in Loop: Header=BB63_135 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB63_139
.LBB63_138:                             # %cond.false553
                                        #   in Loop: Header=BB63_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB63_139:                             # %cond.end555
                                        #   in Loop: Header=BB63_135 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB63_141
# %bb.140:                              # %cond.true565
                                        #   in Loop: Header=BB63_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_145
.LBB63_141:                             # %cond.false567
                                        #   in Loop: Header=BB63_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_143
# %bb.142:                              # %cond.true577
                                        #   in Loop: Header=BB63_135 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB63_144
.LBB63_143:                             # %cond.false579
                                        #   in Loop: Header=BB63_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB63_144:                             # %cond.end581
                                        #   in Loop: Header=BB63_135 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB63_145:                             # %cond.end589
                                        #   in Loop: Header=BB63_135 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_147
# %bb.146:                              # %cond.true593
                                        #   in Loop: Header=BB63_135 Depth=2
	xorl	%eax, %eax
	jmp	.LBB63_157
.LBB63_147:                             # %cond.false594
                                        #   in Loop: Header=BB63_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_149
# %bb.148:                              # %cond.true605
                                        #   in Loop: Header=BB63_135 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB63_150
.LBB63_149:                             # %cond.false607
                                        #   in Loop: Header=BB63_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB63_150:                             # %cond.end609
                                        #   in Loop: Header=BB63_135 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB63_152
# %bb.151:                              # %cond.true619
                                        #   in Loop: Header=BB63_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_156
.LBB63_152:                             # %cond.false621
                                        #   in Loop: Header=BB63_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_154
# %bb.153:                              # %cond.true631
                                        #   in Loop: Header=BB63_135 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB63_155
.LBB63_154:                             # %cond.false633
                                        #   in Loop: Header=BB63_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB63_155:                             # %cond.end635
                                        #   in Loop: Header=BB63_135 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB63_156:                             # %cond.end643
                                        #   in Loop: Header=BB63_135 Depth=2
.LBB63_157:                             # %cond.end645
                                        #   in Loop: Header=BB63_135 Depth=2
	movq	%r14, %rdi
	movl	%r15d, %esi
	movl	%r12d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.158:                              # %for.inc648
                                        #   in Loop: Header=BB63_135 Depth=2
	movl	-44(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB63_135
.LBB63_159:                             # %for.end650
                                        #   in Loop: Header=BB63_133 Depth=1
	jmp	.LBB63_160
.LBB63_160:                             # %for.inc651
                                        #   in Loop: Header=BB63_133 Depth=1
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB63_133
.LBB63_161:                             # %for.end653
	movl	$0, -44(%rbp)
.LBB63_162:                             # %for.cond654
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_164 Depth 2
	movl	-44(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_265
# %bb.163:                              # %for.body658
                                        #   in Loop: Header=BB63_162 Depth=1
	movl	$0, -48(%rbp)
.LBB63_164:                             # %for.cond659
                                        #   Parent Loop BB63_162 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_263
# %bb.165:                              # %for.body663
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB63_188
# %bb.166:                              # %if.then666
                                        #   in Loop: Header=BB63_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_168
# %bb.167:                              # %cond.true679
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB63_169
.LBB63_168:                             # %cond.false681
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB63_169:                             # %cond.end683
                                        #   in Loop: Header=BB63_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB63_171
# %bb.170:                              # %cond.true694
                                        #   in Loop: Header=BB63_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_175
.LBB63_171:                             # %cond.false696
                                        #   in Loop: Header=BB63_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_173
# %bb.172:                              # %cond.true705
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB63_174
.LBB63_173:                             # %cond.false707
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB63_174:                             # %cond.end709
                                        #   in Loop: Header=BB63_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB63_175:                             # %cond.end718
                                        #   in Loop: Header=BB63_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_177
# %bb.176:                              # %cond.true722
                                        #   in Loop: Header=BB63_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB63_187
.LBB63_177:                             # %cond.false723
                                        #   in Loop: Header=BB63_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_179
# %bb.178:                              # %cond.true733
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB63_180
.LBB63_179:                             # %cond.false735
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB63_180:                             # %cond.end737
                                        #   in Loop: Header=BB63_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB63_182
# %bb.181:                              # %cond.true748
                                        #   in Loop: Header=BB63_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_186
.LBB63_182:                             # %cond.false750
                                        #   in Loop: Header=BB63_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_184
# %bb.183:                              # %cond.true759
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB63_185
.LBB63_184:                             # %cond.false761
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB63_185:                             # %cond.end763
                                        #   in Loop: Header=BB63_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB63_186:                             # %cond.end772
                                        #   in Loop: Header=BB63_164 Depth=2
.LBB63_187:                             # %cond.end774
                                        #   in Loop: Header=BB63_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB63_261
.LBB63_188:                             # %if.else
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB63_190
# %bb.189:                              # %land.lhs.true
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	je	.LBB63_192
.LBB63_190:                             # %lor.lhs.false783
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$2, %edx
	jne	.LBB63_226
# %bb.191:                              # %land.lhs.true787
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$3, %edx
	jne	.LBB63_226
.LBB63_192:                             # %if.then791
                                        #   in Loop: Header=BB63_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_194
# %bb.193:                              # %cond.true801
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB63_195
.LBB63_194:                             # %cond.false803
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB63_195:                             # %cond.end805
                                        #   in Loop: Header=BB63_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_197
# %bb.196:                              # %cond.true814
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB63_198
.LBB63_197:                             # %cond.false816
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB63_198:                             # %cond.end818
                                        #   in Loop: Header=BB63_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB63_200
# %bb.199:                              # %cond.true830
                                        #   in Loop: Header=BB63_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_207
.LBB63_200:                             # %cond.false832
                                        #   in Loop: Header=BB63_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_202
# %bb.201:                              # %cond.true838
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB63_203
.LBB63_202:                             # %cond.false840
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB63_203:                             # %cond.end842
                                        #   in Loop: Header=BB63_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_205
# %bb.204:                              # %cond.true851
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB63_206
.LBB63_205:                             # %cond.false853
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB63_206:                             # %cond.end855
                                        #   in Loop: Header=BB63_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB63_207:                             # %cond.end865
                                        #   in Loop: Header=BB63_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_209
# %bb.208:                              # %cond.true869
                                        #   in Loop: Header=BB63_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB63_225
.LBB63_209:                             # %cond.false870
                                        #   in Loop: Header=BB63_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_211
# %bb.210:                              # %cond.true877
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB63_212
.LBB63_211:                             # %cond.false879
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB63_212:                             # %cond.end881
                                        #   in Loop: Header=BB63_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_214
# %bb.213:                              # %cond.true890
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB63_215
.LBB63_214:                             # %cond.false892
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB63_215:                             # %cond.end894
                                        #   in Loop: Header=BB63_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB63_217
# %bb.216:                              # %cond.true906
                                        #   in Loop: Header=BB63_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_224
.LBB63_217:                             # %cond.false908
                                        #   in Loop: Header=BB63_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_219
# %bb.218:                              # %cond.true914
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB63_220
.LBB63_219:                             # %cond.false916
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB63_220:                             # %cond.end918
                                        #   in Loop: Header=BB63_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_222
# %bb.221:                              # %cond.true927
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB63_223
.LBB63_222:                             # %cond.false929
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB63_223:                             # %cond.end931
                                        #   in Loop: Header=BB63_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB63_224:                             # %cond.end941
                                        #   in Loop: Header=BB63_164 Depth=2
.LBB63_225:                             # %cond.end943
                                        #   in Loop: Header=BB63_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB63_260
.LBB63_226:                             # %if.else946
                                        #   in Loop: Header=BB63_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_228
# %bb.227:                              # %cond.true960
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB63_229
.LBB63_228:                             # %cond.false962
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB63_229:                             # %cond.end964
                                        #   in Loop: Header=BB63_164 Depth=2
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_231
# %bb.230:                              # %cond.true971
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB63_232
.LBB63_231:                             # %cond.false973
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB63_232:                             # %cond.end975
                                        #   in Loop: Header=BB63_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB63_234
# %bb.233:                              # %cond.true985
                                        #   in Loop: Header=BB63_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_241
.LBB63_234:                             # %cond.false987
                                        #   in Loop: Header=BB63_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_236
# %bb.235:                              # %cond.true997
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB63_237
.LBB63_236:                             # %cond.false999
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB63_237:                             # %cond.end1001
                                        #   in Loop: Header=BB63_164 Depth=2
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_239
# %bb.238:                              # %cond.true1008
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB63_240
.LBB63_239:                             # %cond.false1010
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB63_240:                             # %cond.end1012
                                        #   in Loop: Header=BB63_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB63_241:                             # %cond.end1020
                                        #   in Loop: Header=BB63_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_243
# %bb.242:                              # %cond.true1024
                                        #   in Loop: Header=BB63_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB63_259
.LBB63_243:                             # %cond.false1025
                                        #   in Loop: Header=BB63_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_245
# %bb.244:                              # %cond.true1036
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB63_246
.LBB63_245:                             # %cond.false1038
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB63_246:                             # %cond.end1040
                                        #   in Loop: Header=BB63_164 Depth=2
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_248
# %bb.247:                              # %cond.true1047
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB63_249
.LBB63_248:                             # %cond.false1049
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB63_249:                             # %cond.end1051
                                        #   in Loop: Header=BB63_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB63_251
# %bb.250:                              # %cond.true1061
                                        #   in Loop: Header=BB63_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_258
.LBB63_251:                             # %cond.false1063
                                        #   in Loop: Header=BB63_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_253
# %bb.252:                              # %cond.true1073
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB63_254
.LBB63_253:                             # %cond.false1075
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB63_254:                             # %cond.end1077
                                        #   in Loop: Header=BB63_164 Depth=2
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_256
# %bb.255:                              # %cond.true1084
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB63_257
.LBB63_256:                             # %cond.false1086
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB63_257:                             # %cond.end1088
                                        #   in Loop: Header=BB63_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB63_258:                             # %cond.end1096
                                        #   in Loop: Header=BB63_164 Depth=2
.LBB63_259:                             # %cond.end1098
                                        #   in Loop: Header=BB63_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
.LBB63_260:                             # %if.end1101
                                        #   in Loop: Header=BB63_164 Depth=2
	jmp	.LBB63_261
.LBB63_261:                             # %if.end1102
                                        #   in Loop: Header=BB63_164 Depth=2
	jmp	.LBB63_262
.LBB63_262:                             # %for.inc1103
                                        #   in Loop: Header=BB63_164 Depth=2
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB63_164
.LBB63_263:                             # %for.end1105
                                        #   in Loop: Header=BB63_162 Depth=1
	jmp	.LBB63_264
.LBB63_264:                             # %for.inc1106
                                        #   in Loop: Header=BB63_162 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB63_162
.LBB63_265:                             # %for.end1108
	movq	-80(%rbp), %rdi
	movq	-120(%rbp), %rsi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	movq	-64(%rbp), %rax
	movl	6396(%rax), %ecx
	callq	GenerateFullPelRepresentation
.LBB63_266:                             # %return
	cmpl	$475096625, -108(%rbp)  # imm = 0x1C516631
	jne	.LBB63_268
.LBB63_267:
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_268:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_267
.Lfunc_end63:
	.size	UnifiedOneForthPix.27, .Lfunc_end63-UnifiedOneForthPix.27
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_frame.28
.LCPI64_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_frame.28,@function
init_frame.28:                          # @init_frame.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$328588976, -16(%rbp)   # imm = 0x1395DEB0
	movq	last_P_no_frm, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movl	$0, -4(%rbp)
.LBB64_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %esi
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %edi
	idivl	%edi
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	idivl	%edi
	imull	%eax, %ecx
	cmpl	%ecx, %esi
	jge	.LBB64_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB64_1 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	$-1, 4(%rax)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_1
.LBB64_4:                               # %for.end
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB64_29
# %bb.5:                                # %if.then
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	input, %rdx
	movl	20(%rdx), %edx
	addl	$1, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	movl	71876(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71880(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71876(%rcx)
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB64_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB64_8
# %bb.7:                                # %if.then10
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB64_8:                               # %if.end
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	je	.LBB64_11
# %bb.9:                                # %land.lhs.true16
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB64_11
# %bb.10:                               # %if.then18
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_frm
.LBB64_11:                              # %if.end20
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB64_26
# %bb.12:                               # %if.then22
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_18
# %bb.13:                               # %if.then24
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB64_16
# %bb.14:                               # %land.lhs.true26
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB64_16
# %bb.15:                               # %if.then30
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB64_17
.LBB64_16:                              # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB64_17:                              # %if.end32
	jmp	.LBB64_25
.LBB64_18:                              # %if.else33
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB64_21
# %bb.19:                               # %land.lhs.true36
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB64_21
# %bb.20:                               # %if.then40
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB64_22
.LBB64_21:                              # %if.else42
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB64_22:                              # %if.end44
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB64_24
# %bb.23:                               # %if.then47
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB64_24:                              # %if.end50
	jmp	.LBB64_25
.LBB64_25:                              # %if.end51
	jmp	.LBB64_26
.LBB64_26:                              # %if.end52
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB64_28
# %bb.27:                               # %if.then54
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB64_28:                              # %if.end62
	jmp	.LBB64_72
.LBB64_29:                              # %if.else63
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	subl	$1, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -8(%rbp)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	$1, -4(%rbp)
.LBB64_30:                              # %for.cond78
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jge	.LBB64_33
# %bb.31:                               # %for.body80
                                        #   in Loop: Header=BB64_30 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc88
                                        #   in Loop: Header=BB64_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_30
.LBB64_33:                              # %for.end90
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB64_36
# %bb.34:                               # %land.lhs.true93
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB64_36
# %bb.35:                               # %if.then98
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	subl	-8(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB64_36:                              # %if.end102
	vmovsd	.LCPI64_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB64_38
# %bb.37:                               # %if.then111
	vmovsd	.LCPI64_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB64_38:                              # %if.end113
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB64_40
# %bb.39:                               # %if.then116
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB64_41
.LBB64_40:                              # %if.else128
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB64_41:                              # %if.end136
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB64_43
# %bb.42:                               # %if.then140
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB64_43:                              # %if.end143
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB64_68
# %bb.44:                               # %land.lhs.true146
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB64_68
# %bb.45:                               # %if.then150
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB64_48
# %bb.46:                               # %land.lhs.true154
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB64_48
# %bb.47:                               # %if.then159
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB64_49
.LBB64_48:                              # %if.else161
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB64_49:                              # %if.end163
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB64_67
# %bb.50:                               # %if.then165
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB64_59
# %bb.51:                               # %land.lhs.true169
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB64_59
# %bb.52:                               # %if.then174
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB64_54
# %bb.53:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB64_58
.LBB64_54:                              # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB64_56
# %bb.55:                               # %cond.true184
	movl	$51, %eax
	jmp	.LBB64_57
.LBB64_56:                              # %cond.false185
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB64_57:                              # %cond.end
.LBB64_58:                              # %cond.end189
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB64_66
.LBB64_59:                              # %if.else192
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB64_61
# %bb.60:                               # %cond.true197
	xorl	%eax, %eax
	jmp	.LBB64_65
.LBB64_61:                              # %cond.false198
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB64_63
# %bb.62:                               # %cond.true204
	movl	$51, %eax
	jmp	.LBB64_64
.LBB64_63:                              # %cond.false205
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB64_64:                              # %cond.end209
.LBB64_65:                              # %cond.end211
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB64_66:                              # %if.end214
	jmp	.LBB64_67
.LBB64_67:                              # %if.end215
	jmp	.LBB64_71
.LBB64_68:                              # %if.else216
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB64_70
# %bb.69:                               # %if.then220
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB64_70:                              # %if.end226
	jmp	.LBB64_71
.LBB64_71:                              # %if.end227
	jmp	.LBB64_72
.LBB64_72:                              # %if.end228
	movq	img, %rax
	movl	72384(%rax), %edi
	callq	UpdateSubseqInfo
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	callq	UpdateSceneInformation
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	$0, 72504(%rax)
	movq	img, %rax
	movl	$0, 72508(%rax)
	callq	init_dec_ref_pic_marking_buffer
	cmpl	$328588976, -16(%rbp)   # imm = 0x1395DEB0
	jne	.LBB64_74
.LBB64_73:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_74:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_73
.Lfunc_end64:
	.size	init_frame.28, .Lfunc_end64-init_frame.28
	.cfi_endproc
                                        # -- End function
	.globl	frame_picture.29        # -- Begin function frame_picture.29
	.p2align	4, 0x90
	.type	frame_picture.29,@function
frame_picture.29:                       # @frame_picture.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$498448334, -16(%rbp)   # imm = 0x1DB5B7CE
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	img, %rax
	movl	$0, 28(%rax)
	movq	img, %rax
	movl	72488(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72484(%rcx)
	cmpl	$2, -12(%rbp)
	jne	.LBB65_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_frame_picture3
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 8(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_frame_picture3, %rax
	movl	$1, 6412(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72400(%rcx)
	movq	enc_frame_picture3, %rcx
	movl	%eax, 6416(%rcx)
	movq	enc_frame_picture3, %rax
	movq	%rax, enc_picture
	callq	copy_params
	jmp	.LBB65_6
.LBB65_2:                               # %if.else
	cmpl	$1, -12(%rbp)
	jne	.LBB65_4
# %bb.3:                                # %if.then9
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_frame_picture2
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 8(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_frame_picture2, %rax
	movl	$1, 6412(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72400(%rcx)
	movq	enc_frame_picture2, %rcx
	movl	%eax, 6416(%rcx)
	movq	enc_frame_picture2, %rax
	movq	%rax, enc_picture
	callq	copy_params
	jmp	.LBB65_5
.LBB65_4:                               # %if.else35
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_frame_picture
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 8(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_frame_picture, %rax
	movl	$1, 6412(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72400(%rcx)
	movq	enc_frame_picture, %rcx
	movl	%eax, 6416(%rcx)
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
.LBB65_5:                               # %if.end
	jmp	.LBB65_6
.LBB65_6:                               # %if.end61
	movq	stats, %rax
	movl	$0, 1468(%rax)
	movq	stats, %rax
	addq	$1468, %rax             # imm = 0x5BC
	movq	stats, %rcx
	movq	%rax, 1480(%rcx)
	movq	img, %rax
	movl	$0, 71800(%rax)
	movq	-8(%rbp), %rdi
	callq	code_a_picture
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB65_8
# %bb.7:                                # %if.then66
	callq	find_distortion
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	vmovss	%xmm0, 812(%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	vmovss	%xmm0, 816(%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	vmovss	%xmm0, 820(%rax)
.LBB65_8:                               # %if.end67
	cmpl	$498448334, -16(%rbp)   # imm = 0x1DB5B7CE
	jne	.LBB65_10
.LBB65_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_9
.Lfunc_end65:
	.size	frame_picture.29, .Lfunc_end65-frame_picture.29
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function frame_mode_buffer.30
	.type	frame_mode_buffer.30,@function
frame_mode_buffer.30:                   # @frame_mode_buffer.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1435691372, -16(%rbp)  # imm = 0x5592E96C
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -8(%rbp)
	vmovss	%xmm1, -4(%rbp)
	vmovss	%xmm2, -12(%rbp)
	callq	put_buffer_frame
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB66_2
# %bb.1:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB66_3
.LBB66_2:                               # %if.then
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_top
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_bot
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	callq	put_buffer_frame
.LBB66_3:                               # %if.end
	cmpl	$1435691372, -16(%rbp)  # imm = 0x5592E96C
	jne	.LBB66_5
.LBB66_4:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_4
.Lfunc_end66:
	.size	frame_mode_buffer.30, .Lfunc_end66-frame_mode_buffer.30
	.cfi_endproc
                                        # -- End function
	.globl	copy_rdopt_data.31      # -- Begin function copy_rdopt_data.31
	.p2align	4, 0x90
	.type	copy_rdopt_data.31,@function
copy_rdopt_data.31:                     # @copy_rdopt_data.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1203766315, -52(%rbp)  # imm = 0x47C0042B
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB67_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB67_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB67_4
.LBB67_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB67_4
.LBB67_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	rdopt, %rax
	movl	3224(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	rdopt, %rax
	movl	3096(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	rdopt, %rax
	movl	3208(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	rdopt, %rax
	movq	3216(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movq	rdopt, %rax
	movl	3100(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	movq	rdopt, %rax
	movl	3328(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	rdopt, %rax
	movl	3348(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	rdopt, %rax
	movl	3352(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 596(%rcx)
	movq	rdopt, %rax
	movl	3344(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	rdopt, %rax
	movl	3332(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	$0, -4(%rbp)
.LBB67_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_7 Depth 2
                                        #       Child Loop BB67_9 Depth 3
                                        #         Child Loop BB67_11 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_20
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB67_5 Depth=1
	movl	$0, -8(%rbp)
.LBB67_7:                               # %for.cond17
                                        #   Parent Loop BB67_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_9 Depth 3
                                        #         Child Loop BB67_11 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB67_18
# %bb.8:                                # %for.body20
                                        #   in Loop: Header=BB67_7 Depth=2
	movl	$0, -12(%rbp)
.LBB67_9:                               # %for.cond21
                                        #   Parent Loop BB67_5 Depth=1
                                        #     Parent Loop BB67_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB67_11 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB67_16
# %bb.10:                               # %for.body24
                                        #   in Loop: Header=BB67_9 Depth=3
	movl	$0, -16(%rbp)
.LBB67_11:                              # %for.cond25
                                        #   Parent Loop BB67_5 Depth=1
                                        #     Parent Loop BB67_7 Depth=2
                                        #       Parent Loop BB67_9 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB67_14
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB67_11 Depth=4
	movq	rdopt, %rax
	movq	3080(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB67_11 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_11
.LBB67_14:                              # %for.end
                                        #   in Loop: Header=BB67_9 Depth=3
	jmp	.LBB67_15
.LBB67_15:                              # %for.inc46
                                        #   in Loop: Header=BB67_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_9
.LBB67_16:                              # %for.end48
                                        #   in Loop: Header=BB67_7 Depth=2
	jmp	.LBB67_17
.LBB67_17:                              # %for.inc49
                                        #   in Loop: Header=BB67_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_7
.LBB67_18:                              # %for.end51
                                        #   in Loop: Header=BB67_5 Depth=1
	jmp	.LBB67_19
.LBB67_19:                              # %for.inc52
                                        #   in Loop: Header=BB67_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_5
.LBB67_20:                              # %for.end54
	movl	$0, -4(%rbp)
.LBB67_21:                              # %for.cond55
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_23 Depth 2
                                        #       Child Loop BB67_25 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB67_32
# %bb.22:                               # %for.body58
                                        #   in Loop: Header=BB67_21 Depth=1
	movl	$0, -12(%rbp)
.LBB67_23:                              # %for.cond59
                                        #   Parent Loop BB67_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_25 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB67_30
# %bb.24:                               # %for.body62
                                        #   in Loop: Header=BB67_23 Depth=2
	movl	$0, -16(%rbp)
.LBB67_25:                              # %for.cond63
                                        #   Parent Loop BB67_21 Depth=1
                                        #     Parent Loop BB67_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB67_28
# %bb.26:                               # %for.body66
                                        #   in Loop: Header=BB67_25 Depth=3
	movq	rdopt, %rax
	movq	3088(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc80
                                        #   in Loop: Header=BB67_25 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_25
.LBB67_28:                              # %for.end82
                                        #   in Loop: Header=BB67_23 Depth=2
	jmp	.LBB67_29
.LBB67_29:                              # %for.inc83
                                        #   in Loop: Header=BB67_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_23
.LBB67_30:                              # %for.end85
                                        #   in Loop: Header=BB67_21 Depth=1
	jmp	.LBB67_31
.LBB67_31:                              # %for.inc86
                                        #   in Loop: Header=BB67_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_21
.LBB67_32:                              # %for.end88
	movl	$0, -8(%rbp)
.LBB67_33:                              # %for.cond89
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_35 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB67_42
# %bb.34:                               # %for.body92
                                        #   in Loop: Header=BB67_33 Depth=1
	movl	$0, -4(%rbp)
.LBB67_35:                              # %for.cond93
                                        #   Parent Loop BB67_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB67_40
# %bb.36:                               # %for.body96
                                        #   in Loop: Header=BB67_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-40(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -36(%rbp)
	je	.LBB67_38
# %bb.37:                               # %if.then
                                        #   in Loop: Header=BB67_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB67_38:                              # %if.end
                                        #   in Loop: Header=BB67_35 Depth=2
	jmp	.LBB67_39
.LBB67_39:                              # %for.inc176
                                        #   in Loop: Header=BB67_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_35
.LBB67_40:                              # %for.end178
                                        #   in Loop: Header=BB67_33 Depth=1
	jmp	.LBB67_41
.LBB67_41:                              # %for.inc179
                                        #   in Loop: Header=BB67_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_33
.LBB67_42:                              # %for.end181
	movl	$0, -8(%rbp)
.LBB67_43:                              # %for.cond182
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_45 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB67_50
# %bb.44:                               # %for.body185
                                        #   in Loop: Header=BB67_43 Depth=1
	movl	$0, -4(%rbp)
.LBB67_45:                              # %for.cond186
                                        #   Parent Loop BB67_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB67_48
# %bb.46:                               # %for.body189
                                        #   in Loop: Header=BB67_45 Depth=2
	movq	rdopt, %rax
	addq	$8, %rax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.47:                               # %for.inc201
                                        #   in Loop: Header=BB67_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_45
.LBB67_48:                              # %for.end203
                                        #   in Loop: Header=BB67_43 Depth=1
	jmp	.LBB67_49
.LBB67_49:                              # %for.inc204
                                        #   in Loop: Header=BB67_43 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_43
.LBB67_50:                              # %for.end206
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB67_60
# %bb.51:                               # %if.then209
	movl	$0, -8(%rbp)
.LBB67_52:                              # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_54 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB67_59
# %bb.53:                               # %for.body213
                                        #   in Loop: Header=BB67_52 Depth=1
	movl	$0, -4(%rbp)
.LBB67_54:                              # %for.cond214
                                        #   Parent Loop BB67_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB67_57
# %bb.55:                               # %for.body217
                                        #   in Loop: Header=BB67_54 Depth=2
	movq	rdopt, %rax
	addq	$1032, %rax             # imm = 0x408
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	rdopt, %rax
	addq	$2056, %rax             # imm = 0x808
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc245
                                        #   in Loop: Header=BB67_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_54
.LBB67_57:                              # %for.end247
                                        #   in Loop: Header=BB67_52 Depth=1
	jmp	.LBB67_58
.LBB67_58:                              # %for.inc248
                                        #   in Loop: Header=BB67_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_52
.LBB67_59:                              # %for.end250
	jmp	.LBB67_60
.LBB67_60:                              # %if.end251
	movl	$0, -4(%rbp)
.LBB67_61:                              # %for.cond252
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB67_64
# %bb.62:                               # %for.body255
                                        #   in Loop: Header=BB67_61 Depth=1
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3104(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3120(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.63:                               # %for.inc268
                                        #   in Loop: Header=BB67_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_61
.LBB67_64:                              # %for.end270
	movq	rdopt, %rax
	movl	3336(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
	cmpl	$8, -28(%rbp)
	jne	.LBB67_74
# %bb.65:                               # %if.then274
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB67_66:                              # %for.cond276
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_68 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_73
# %bb.67:                               # %for.body281
                                        #   in Loop: Header=BB67_66 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB67_68:                              # %for.cond283
                                        #   Parent Loop BB67_66 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_71
# %bb.69:                               # %for.body288
                                        #   in Loop: Header=BB67_68 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.70:                               # %for.inc303
                                        #   in Loop: Header=BB67_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_68
.LBB67_71:                              # %for.end306
                                        #   in Loop: Header=BB67_66 Depth=1
	jmp	.LBB67_72
.LBB67_72:                              # %for.inc307
                                        #   in Loop: Header=BB67_66 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_66
.LBB67_73:                              # %for.end309
	jmp	.LBB67_98
.LBB67_74:                              # %if.else
	cmpl	$9, -28(%rbp)
	je	.LBB67_85
# %bb.75:                               # %land.lhs.true312
	cmpl	$13, -28(%rbp)
	je	.LBB67_85
# %bb.76:                               # %if.then315
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB67_77:                              # %for.cond317
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_79 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_84
# %bb.78:                               # %for.body322
                                        #   in Loop: Header=BB67_77 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB67_79:                              # %for.cond324
                                        #   Parent Loop BB67_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_82
# %bb.80:                               # %for.body329
                                        #   in Loop: Header=BB67_79 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.81:                               # %for.inc338
                                        #   in Loop: Header=BB67_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_79
.LBB67_82:                              # %for.end341
                                        #   in Loop: Header=BB67_77 Depth=1
	jmp	.LBB67_83
.LBB67_83:                              # %for.inc342
                                        #   in Loop: Header=BB67_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_77
.LBB67_84:                              # %for.end344
	jmp	.LBB67_97
.LBB67_85:                              # %if.else345
	cmpl	$9, -28(%rbp)
	je	.LBB67_87
# %bb.86:                               # %lor.lhs.false
	cmpl	$13, -28(%rbp)
	jne	.LBB67_96
.LBB67_87:                              # %if.then350
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB67_88:                              # %for.cond352
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_90 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_95
# %bb.89:                               # %for.body357
                                        #   in Loop: Header=BB67_88 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB67_90:                              # %for.cond359
                                        #   Parent Loop BB67_88 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_93
# %bb.91:                               # %for.body364
                                        #   in Loop: Header=BB67_90 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.92:                               # %for.inc381
                                        #   in Loop: Header=BB67_90 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_90
.LBB67_93:                              # %for.end384
                                        #   in Loop: Header=BB67_88 Depth=1
	jmp	.LBB67_94
.LBB67_94:                              # %for.inc385
                                        #   in Loop: Header=BB67_88 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_88
.LBB67_95:                              # %for.end387
	jmp	.LBB67_96
.LBB67_96:                              # %if.end388
	jmp	.LBB67_97
.LBB67_97:                              # %if.end389
	jmp	.LBB67_98
.LBB67_98:                              # %if.end390
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB67_131
# %bb.99:                               # %if.then393
	callq	copy_motion_vectors_MB
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB67_119
# %bb.100:                              # %lor.lhs.false397
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB67_119
# %bb.101:                              # %lor.lhs.false401
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB67_119
# %bb.102:                              # %if.then405
	movl	$0, -8(%rbp)
.LBB67_103:                             # %for.cond406
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_105 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB67_118
# %bb.104:                              # %for.body409
                                        #   in Loop: Header=BB67_103 Depth=1
	movl	$0, -4(%rbp)
.LBB67_105:                             # %for.cond410
                                        #   Parent Loop BB67_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB67_116
# %bb.106:                              # %for.body413
                                        #   in Loop: Header=BB67_105 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	488(%rsi,%rax,4), %eax
	movl	%eax, -44(%rbp)
	cmpl	$1, -44(%rbp)
	je	.LBB67_108
# %bb.107:                              # %if.then428
                                        #   in Loop: Header=BB67_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB67_109
.LBB67_108:                             # %if.else483
                                        #   in Loop: Header=BB67_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB67_109:                             # %if.end506
                                        #   in Loop: Header=BB67_105 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB67_114
# %bb.110:                              # %if.then508
                                        #   in Loop: Header=BB67_105 Depth=2
	cmpl	$0, -44(%rbp)
	je	.LBB67_112
# %bb.111:                              # %if.then511
                                        #   in Loop: Header=BB67_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB67_113
.LBB67_112:                             # %if.else568
                                        #   in Loop: Header=BB67_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB67_113:                             # %if.end591
                                        #   in Loop: Header=BB67_105 Depth=2
	jmp	.LBB67_114
.LBB67_114:                             # %if.end592
                                        #   in Loop: Header=BB67_105 Depth=2
	jmp	.LBB67_115
.LBB67_115:                             # %for.inc593
                                        #   in Loop: Header=BB67_105 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_105
.LBB67_116:                             # %for.end595
                                        #   in Loop: Header=BB67_103 Depth=1
	jmp	.LBB67_117
.LBB67_117:                             # %for.inc596
                                        #   in Loop: Header=BB67_103 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_103
.LBB67_118:                             # %for.end598
	jmp	.LBB67_130
.LBB67_119:                             # %if.else599
	movl	$0, -8(%rbp)
.LBB67_120:                             # %for.cond600
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_122 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB67_129
# %bb.121:                              # %for.body603
                                        #   in Loop: Header=BB67_120 Depth=1
	movl	$0, -4(%rbp)
.LBB67_122:                             # %for.cond604
                                        #   Parent Loop BB67_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB67_127
# %bb.123:                              # %for.body607
                                        #   in Loop: Header=BB67_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	cmpl	$0, -36(%rbp)
	je	.LBB67_125
# %bb.124:                              # %if.then631
                                        #   in Loop: Header=BB67_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB67_125:                             # %if.end654
                                        #   in Loop: Header=BB67_122 Depth=2
	jmp	.LBB67_126
.LBB67_126:                             # %for.inc655
                                        #   in Loop: Header=BB67_122 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_122
.LBB67_127:                             # %for.end657
                                        #   in Loop: Header=BB67_120 Depth=1
	jmp	.LBB67_128
.LBB67_128:                             # %for.inc658
                                        #   in Loop: Header=BB67_120 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_120
.LBB67_129:                             # %for.end660
	jmp	.LBB67_130
.LBB67_130:                             # %if.end661
	jmp	.LBB67_131
.LBB67_131:                             # %if.end662
	cmpl	$1203766315, -52(%rbp)  # imm = 0x47C0042B
	jne	.LBB67_133
.LBB67_132:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_133:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_132
.Lfunc_end67:
	.size	copy_rdopt_data.31, .Lfunc_end67-copy_rdopt_data.31
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportFirstframe.32
	.type	ReportFirstframe.32,@function
ReportFirstframe.32:                    # @ReportFirstframe.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1172535431, -12(%rbp)  # imm = 0x45E37887
	movl	%edi, -16(%rbp)
	movl	%esi, -4(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-16(%rbp), %r9d
	movl	-4(%rbp), %r10d
	movq	img, %rcx
	movl	71800(%rcx), %ecx
	cmpl	$0, %ecx
	movabsq	$.L.str.7, %rcx
	movabsq	$.L.str.8, %rax
	cmovneq	%rcx, %rax
	movl	intras, %r11d
	movabsq	$.L.str.6, %rdi
	movl	$0, %ecx
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB68_6
# %bb.1:                                # %if.then
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB68_4
# %bb.2:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB68_4
# %bb.3:                                # %if.then6
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_5
.LBB68_4:                               # %if.else
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Iprev_bits, %eax
	movl	%eax, -8(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Iprev_bits
.LBB68_5:                               # %if.end
	jmp	.LBB68_6
.LBB68_6:                               # %if.end13
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 704(%rcx)
	movq	stats, %rax
	movl	$0, 16(%rax)
	cmpl	$1172535431, -12(%rbp)  # imm = 0x45E37887
	jne	.LBB68_8
.LBB68_7:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_7
.Lfunc_end68:
	.size	ReportFirstframe.32, .Lfunc_end68-ReportFirstframe.32
	.cfi_endproc
                                        # -- End function
	.globl	copy_rdopt_data.33      # -- Begin function copy_rdopt_data.33
	.p2align	4, 0x90
	.type	copy_rdopt_data.33,@function
copy_rdopt_data.33:                     # @copy_rdopt_data.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1354429482, -52(%rbp)  # imm = 0x50BAF42A
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB69_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB69_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB69_4
.LBB69_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB69_4
.LBB69_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movq	rdopt, %rax
	movl	3224(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	rdopt, %rax
	movl	3096(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	rdopt, %rax
	movl	3208(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	rdopt, %rax
	movq	3216(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movq	rdopt, %rax
	movl	3100(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	movq	rdopt, %rax
	movl	3328(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	rdopt, %rax
	movl	3348(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	rdopt, %rax
	movl	3352(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 596(%rcx)
	movq	rdopt, %rax
	movl	3344(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	rdopt, %rax
	movl	3332(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	$0, -4(%rbp)
.LBB69_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_7 Depth 2
                                        #       Child Loop BB69_9 Depth 3
                                        #         Child Loop BB69_11 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_20
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB69_5 Depth=1
	movl	$0, -8(%rbp)
.LBB69_7:                               # %for.cond17
                                        #   Parent Loop BB69_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_9 Depth 3
                                        #         Child Loop BB69_11 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB69_18
# %bb.8:                                # %for.body20
                                        #   in Loop: Header=BB69_7 Depth=2
	movl	$0, -12(%rbp)
.LBB69_9:                               # %for.cond21
                                        #   Parent Loop BB69_5 Depth=1
                                        #     Parent Loop BB69_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB69_11 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB69_16
# %bb.10:                               # %for.body24
                                        #   in Loop: Header=BB69_9 Depth=3
	movl	$0, -16(%rbp)
.LBB69_11:                              # %for.cond25
                                        #   Parent Loop BB69_5 Depth=1
                                        #     Parent Loop BB69_7 Depth=2
                                        #       Parent Loop BB69_9 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB69_14
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB69_11 Depth=4
	movq	rdopt, %rax
	movq	3080(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB69_11 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_11
.LBB69_14:                              # %for.end
                                        #   in Loop: Header=BB69_9 Depth=3
	jmp	.LBB69_15
.LBB69_15:                              # %for.inc46
                                        #   in Loop: Header=BB69_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_9
.LBB69_16:                              # %for.end48
                                        #   in Loop: Header=BB69_7 Depth=2
	jmp	.LBB69_17
.LBB69_17:                              # %for.inc49
                                        #   in Loop: Header=BB69_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_7
.LBB69_18:                              # %for.end51
                                        #   in Loop: Header=BB69_5 Depth=1
	jmp	.LBB69_19
.LBB69_19:                              # %for.inc52
                                        #   in Loop: Header=BB69_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_5
.LBB69_20:                              # %for.end54
	movl	$0, -4(%rbp)
.LBB69_21:                              # %for.cond55
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_23 Depth 2
                                        #       Child Loop BB69_25 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB69_32
# %bb.22:                               # %for.body58
                                        #   in Loop: Header=BB69_21 Depth=1
	movl	$0, -12(%rbp)
.LBB69_23:                              # %for.cond59
                                        #   Parent Loop BB69_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_25 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB69_30
# %bb.24:                               # %for.body62
                                        #   in Loop: Header=BB69_23 Depth=2
	movl	$0, -16(%rbp)
.LBB69_25:                              # %for.cond63
                                        #   Parent Loop BB69_21 Depth=1
                                        #     Parent Loop BB69_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB69_28
# %bb.26:                               # %for.body66
                                        #   in Loop: Header=BB69_25 Depth=3
	movq	rdopt, %rax
	movq	3088(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc80
                                        #   in Loop: Header=BB69_25 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_25
.LBB69_28:                              # %for.end82
                                        #   in Loop: Header=BB69_23 Depth=2
	jmp	.LBB69_29
.LBB69_29:                              # %for.inc83
                                        #   in Loop: Header=BB69_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_23
.LBB69_30:                              # %for.end85
                                        #   in Loop: Header=BB69_21 Depth=1
	jmp	.LBB69_31
.LBB69_31:                              # %for.inc86
                                        #   in Loop: Header=BB69_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_21
.LBB69_32:                              # %for.end88
	movl	$0, -8(%rbp)
.LBB69_33:                              # %for.cond89
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_35 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB69_42
# %bb.34:                               # %for.body92
                                        #   in Loop: Header=BB69_33 Depth=1
	movl	$0, -4(%rbp)
.LBB69_35:                              # %for.cond93
                                        #   Parent Loop BB69_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB69_40
# %bb.36:                               # %for.body96
                                        #   in Loop: Header=BB69_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-44(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -36(%rbp)
	je	.LBB69_38
# %bb.37:                               # %if.then
                                        #   in Loop: Header=BB69_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB69_38:                              # %if.end
                                        #   in Loop: Header=BB69_35 Depth=2
	jmp	.LBB69_39
.LBB69_39:                              # %for.inc176
                                        #   in Loop: Header=BB69_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_35
.LBB69_40:                              # %for.end178
                                        #   in Loop: Header=BB69_33 Depth=1
	jmp	.LBB69_41
.LBB69_41:                              # %for.inc179
                                        #   in Loop: Header=BB69_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_33
.LBB69_42:                              # %for.end181
	movl	$0, -8(%rbp)
.LBB69_43:                              # %for.cond182
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_45 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB69_50
# %bb.44:                               # %for.body185
                                        #   in Loop: Header=BB69_43 Depth=1
	movl	$0, -4(%rbp)
.LBB69_45:                              # %for.cond186
                                        #   Parent Loop BB69_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB69_48
# %bb.46:                               # %for.body189
                                        #   in Loop: Header=BB69_45 Depth=2
	movq	rdopt, %rax
	addq	$8, %rax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.47:                               # %for.inc201
                                        #   in Loop: Header=BB69_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_45
.LBB69_48:                              # %for.end203
                                        #   in Loop: Header=BB69_43 Depth=1
	jmp	.LBB69_49
.LBB69_49:                              # %for.inc204
                                        #   in Loop: Header=BB69_43 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_43
.LBB69_50:                              # %for.end206
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB69_60
# %bb.51:                               # %if.then209
	movl	$0, -8(%rbp)
.LBB69_52:                              # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_54 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB69_59
# %bb.53:                               # %for.body213
                                        #   in Loop: Header=BB69_52 Depth=1
	movl	$0, -4(%rbp)
.LBB69_54:                              # %for.cond214
                                        #   Parent Loop BB69_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB69_57
# %bb.55:                               # %for.body217
                                        #   in Loop: Header=BB69_54 Depth=2
	movq	rdopt, %rax
	addq	$1032, %rax             # imm = 0x408
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	rdopt, %rax
	addq	$2056, %rax             # imm = 0x808
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc245
                                        #   in Loop: Header=BB69_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_54
.LBB69_57:                              # %for.end247
                                        #   in Loop: Header=BB69_52 Depth=1
	jmp	.LBB69_58
.LBB69_58:                              # %for.inc248
                                        #   in Loop: Header=BB69_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_52
.LBB69_59:                              # %for.end250
	jmp	.LBB69_60
.LBB69_60:                              # %if.end251
	movl	$0, -4(%rbp)
.LBB69_61:                              # %for.cond252
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB69_64
# %bb.62:                               # %for.body255
                                        #   in Loop: Header=BB69_61 Depth=1
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3104(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3120(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.63:                               # %for.inc268
                                        #   in Loop: Header=BB69_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_61
.LBB69_64:                              # %for.end270
	movq	rdopt, %rax
	movl	3336(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
	cmpl	$8, -28(%rbp)
	jne	.LBB69_74
# %bb.65:                               # %if.then274
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB69_66:                              # %for.cond276
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_68 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_73
# %bb.67:                               # %for.body281
                                        #   in Loop: Header=BB69_66 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB69_68:                              # %for.cond283
                                        #   Parent Loop BB69_66 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_71
# %bb.69:                               # %for.body288
                                        #   in Loop: Header=BB69_68 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.70:                               # %for.inc303
                                        #   in Loop: Header=BB69_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_68
.LBB69_71:                              # %for.end306
                                        #   in Loop: Header=BB69_66 Depth=1
	jmp	.LBB69_72
.LBB69_72:                              # %for.inc307
                                        #   in Loop: Header=BB69_66 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_66
.LBB69_73:                              # %for.end309
	jmp	.LBB69_98
.LBB69_74:                              # %if.else
	cmpl	$9, -28(%rbp)
	je	.LBB69_85
# %bb.75:                               # %land.lhs.true312
	cmpl	$13, -28(%rbp)
	je	.LBB69_85
# %bb.76:                               # %if.then315
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB69_77:                              # %for.cond317
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_79 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_84
# %bb.78:                               # %for.body322
                                        #   in Loop: Header=BB69_77 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB69_79:                              # %for.cond324
                                        #   Parent Loop BB69_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_82
# %bb.80:                               # %for.body329
                                        #   in Loop: Header=BB69_79 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.81:                               # %for.inc338
                                        #   in Loop: Header=BB69_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_79
.LBB69_82:                              # %for.end341
                                        #   in Loop: Header=BB69_77 Depth=1
	jmp	.LBB69_83
.LBB69_83:                              # %for.inc342
                                        #   in Loop: Header=BB69_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_77
.LBB69_84:                              # %for.end344
	jmp	.LBB69_97
.LBB69_85:                              # %if.else345
	cmpl	$9, -28(%rbp)
	je	.LBB69_87
# %bb.86:                               # %lor.lhs.false
	cmpl	$13, -28(%rbp)
	jne	.LBB69_96
.LBB69_87:                              # %if.then350
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB69_88:                              # %for.cond352
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_90 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_95
# %bb.89:                               # %for.body357
                                        #   in Loop: Header=BB69_88 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB69_90:                              # %for.cond359
                                        #   Parent Loop BB69_88 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_93
# %bb.91:                               # %for.body364
                                        #   in Loop: Header=BB69_90 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.92:                               # %for.inc381
                                        #   in Loop: Header=BB69_90 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_90
.LBB69_93:                              # %for.end384
                                        #   in Loop: Header=BB69_88 Depth=1
	jmp	.LBB69_94
.LBB69_94:                              # %for.inc385
                                        #   in Loop: Header=BB69_88 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_88
.LBB69_95:                              # %for.end387
	jmp	.LBB69_96
.LBB69_96:                              # %if.end388
	jmp	.LBB69_97
.LBB69_97:                              # %if.end389
	jmp	.LBB69_98
.LBB69_98:                              # %if.end390
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB69_131
# %bb.99:                               # %if.then393
	callq	copy_motion_vectors_MB
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB69_119
# %bb.100:                              # %lor.lhs.false397
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB69_119
# %bb.101:                              # %lor.lhs.false401
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB69_119
# %bb.102:                              # %if.then405
	movl	$0, -8(%rbp)
.LBB69_103:                             # %for.cond406
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_105 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB69_118
# %bb.104:                              # %for.body409
                                        #   in Loop: Header=BB69_103 Depth=1
	movl	$0, -4(%rbp)
.LBB69_105:                             # %for.cond410
                                        #   Parent Loop BB69_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB69_116
# %bb.106:                              # %for.body413
                                        #   in Loop: Header=BB69_105 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	488(%rsi,%rax,4), %eax
	movl	%eax, -40(%rbp)
	cmpl	$1, -40(%rbp)
	je	.LBB69_108
# %bb.107:                              # %if.then428
                                        #   in Loop: Header=BB69_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB69_109
.LBB69_108:                             # %if.else483
                                        #   in Loop: Header=BB69_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB69_109:                             # %if.end506
                                        #   in Loop: Header=BB69_105 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB69_114
# %bb.110:                              # %if.then508
                                        #   in Loop: Header=BB69_105 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB69_112
# %bb.111:                              # %if.then511
                                        #   in Loop: Header=BB69_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB69_113
.LBB69_112:                             # %if.else568
                                        #   in Loop: Header=BB69_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB69_113:                             # %if.end591
                                        #   in Loop: Header=BB69_105 Depth=2
	jmp	.LBB69_114
.LBB69_114:                             # %if.end592
                                        #   in Loop: Header=BB69_105 Depth=2
	jmp	.LBB69_115
.LBB69_115:                             # %for.inc593
                                        #   in Loop: Header=BB69_105 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_105
.LBB69_116:                             # %for.end595
                                        #   in Loop: Header=BB69_103 Depth=1
	jmp	.LBB69_117
.LBB69_117:                             # %for.inc596
                                        #   in Loop: Header=BB69_103 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_103
.LBB69_118:                             # %for.end598
	jmp	.LBB69_130
.LBB69_119:                             # %if.else599
	movl	$0, -8(%rbp)
.LBB69_120:                             # %for.cond600
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_122 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB69_129
# %bb.121:                              # %for.body603
                                        #   in Loop: Header=BB69_120 Depth=1
	movl	$0, -4(%rbp)
.LBB69_122:                             # %for.cond604
                                        #   Parent Loop BB69_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB69_127
# %bb.123:                              # %for.body607
                                        #   in Loop: Header=BB69_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	cmpl	$0, -36(%rbp)
	je	.LBB69_125
# %bb.124:                              # %if.then631
                                        #   in Loop: Header=BB69_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB69_125:                             # %if.end654
                                        #   in Loop: Header=BB69_122 Depth=2
	jmp	.LBB69_126
.LBB69_126:                             # %for.inc655
                                        #   in Loop: Header=BB69_122 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_122
.LBB69_127:                             # %for.end657
                                        #   in Loop: Header=BB69_120 Depth=1
	jmp	.LBB69_128
.LBB69_128:                             # %for.inc658
                                        #   in Loop: Header=BB69_120 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_120
.LBB69_129:                             # %for.end660
	jmp	.LBB69_130
.LBB69_130:                             # %if.end661
	jmp	.LBB69_131
.LBB69_131:                             # %if.end662
	cmpl	$1354429482, -52(%rbp)  # imm = 0x50BAF42A
	jne	.LBB69_133
.LBB69_132:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_133:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_132
.Lfunc_end69:
	.size	copy_rdopt_data.33, .Lfunc_end69-copy_rdopt_data.33
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeout_picture.34
	.type	writeout_picture.34,@function
writeout_picture.34:                    # @writeout_picture.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2017137692, -28(%rbp)  # imm = 0x783B141C
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movl	$0, -8(%rbp)
.LBB70_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_3 Depth 2
	movl	-8(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB70_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB70_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	8(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB70_3:                               # %for.cond1
                                        #   Parent Loop BB70_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB70_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB70_3 Depth=2
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rdi
	movl	-4(%rbp), %esi
	callq	writeUnit
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB70_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_3
.LBB70_6:                               # %for.end
                                        #   in Loop: Header=BB70_1 Depth=1
	jmp	.LBB70_7
.LBB70_7:                               # %for.inc10
                                        #   in Loop: Header=BB70_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_1
.LBB70_8:                               # %for.end12
	cmpl	$2017137692, -28(%rbp)  # imm = 0x783B141C
	jne	.LBB70_10
.LBB70_9:
	xorl	%eax, %eax
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_9
.Lfunc_end70:
	.size	writeout_picture.34, .Lfunc_end70-writeout_picture.34
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function find_snr.35
.LCPI71_0:
	.quad	4621819117588971520     # double 10
	.text
	.p2align	4, 0x90
	.type	find_snr.35,@function
find_snr.35:                            # @find_snr.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1866368472, -44(%rbp)  # imm = 0x6F3E85D8
	movq	$0, -16(%rbp)
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	imull	72684(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movq	img, %rcx
	imull	72688(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	movl	3304(%rax), %eax
	movq	input, %rcx
	imull	3308(%rcx), %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB71_20
# %bb.1:                                # %if.then
	movq	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB71_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_4 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB71_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB71_2 Depth=1
	movl	$0, -4(%rbp)
.LBB71_4:                               # %for.cond8
                                        #   Parent Loop BB71_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB71_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB71_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgY_com, %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB71_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_4
.LBB71_7:                               # %for.end
                                        #   in Loop: Header=BB71_2 Depth=1
	jmp	.LBB71_8
.LBB71_8:                               # %for.inc22
                                        #   in Loop: Header=BB71_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_2
.LBB71_9:                               # %for.end24
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB71_19
# %bb.10:                               # %if.then27
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB71_11:                              # %for.cond28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_13 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB71_18
# %bb.12:                               # %for.body32
                                        #   in Loop: Header=BB71_11 Depth=1
	movl	$0, -4(%rbp)
.LBB71_13:                              # %for.cond33
                                        #   Parent Loop BB71_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB71_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB71_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.15:                               # %for.inc74
                                        #   in Loop: Header=BB71_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_13
.LBB71_16:                              # %for.end76
                                        #   in Loop: Header=BB71_11 Depth=1
	jmp	.LBB71_17
.LBB71_17:                              # %for.inc77
                                        #   in Loop: Header=BB71_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_11
.LBB71_18:                              # %for.end79
	jmp	.LBB71_19
.LBB71_19:                              # %if.end
	jmp	.LBB71_41
.LBB71_20:                              # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB71_22
# %bb.21:                               # %if.then82
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
.LBB71_22:                              # %if.end83
	movq	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB71_23:                              # %for.cond84
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_25 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB71_30
# %bb.24:                               # %for.body88
                                        #   in Loop: Header=BB71_23 Depth=1
	movl	$0, -4(%rbp)
.LBB71_25:                              # %for.cond89
                                        #   Parent Loop BB71_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB71_28
# %bb.26:                               # %for.body93
                                        #   in Loop: Header=BB71_25 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.27:                               # %for.inc110
                                        #   in Loop: Header=BB71_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_25
.LBB71_28:                              # %for.end112
                                        #   in Loop: Header=BB71_23 Depth=1
	jmp	.LBB71_29
.LBB71_29:                              # %for.inc113
                                        #   in Loop: Header=BB71_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_23
.LBB71_30:                              # %for.end115
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB71_40
# %bb.31:                               # %if.then119
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB71_32:                              # %for.cond120
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_34 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB71_39
# %bb.33:                               # %for.body124
                                        #   in Loop: Header=BB71_32 Depth=1
	movl	$0, -4(%rbp)
.LBB71_34:                              # %for.cond125
                                        #   Parent Loop BB71_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB71_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB71_34 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.36:                               # %for.inc167
                                        #   in Loop: Header=BB71_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_34
.LBB71_37:                              # %for.end169
                                        #   in Loop: Header=BB71_32 Depth=1
	jmp	.LBB71_38
.LBB71_38:                              # %for.inc170
                                        #   in Loop: Header=BB71_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_32
.LBB71_39:                              # %for.end172
	jmp	.LBB71_40
.LBB71_40:                              # %if.end173
	jmp	.LBB71_41
.LBB71_41:                              # %if.end174
	cmpq	$0, -16(%rbp)
	jne	.LBB71_43
# %bb.42:                               # %if.then177
	movq	$1, -16(%rbp)
.LBB71_43:                              # %if.end178
	cmpq	$0, -32(%rbp)
	jne	.LBB71_45
# %bb.44:                               # %if.then181
	movq	$1, -32(%rbp)
.LBB71_45:                              # %if.end182
	cmpq	$0, -24(%rbp)
	jne	.LBB71_47
# %bb.46:                               # %if.then185
	movq	$1, -24(%rbp)
.LBB71_47:                              # %if.end186
	cmpq	$0, -16(%rbp)
	je	.LBB71_52
# %bb.48:                               # %if.then189
	movl	-48(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-16(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI71_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB71_50
# %bb.49:                               # %if.then199
	movl	-40(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-32(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI71_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr(%rip), %rax
	vmovss	%xmm0, 4(%rax)
	movl	-40(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-24(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI71_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	jmp	.LBB71_51
.LBB71_50:                              # %if.else216
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 4(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
.LBB71_51:                              # %if.end219
	jmp	.LBB71_52
.LBB71_52:                              # %if.end220
	movq	img, %rax
	cmpl	$0, (%rax)
	jne	.LBB71_54
# %bb.53:                               # %if.then223
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 12(%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 16(%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 20(%rax)
	movq	snr, %rax
	vmovss	12(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	16(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	20(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB71_55
.LBB71_54:                              # %if.else245
	movq	snr, %rax
	vmovss	60(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	64(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	68(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
.LBB71_55:                              # %if.end285
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_57
# %bb.56:                               # %if.then288
	movq	snr, %rax
	vmovss	32(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	44(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	56(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	jmp	.LBB71_61
.LBB71_57:                              # %if.else322
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB71_59
# %bb.58:                               # %if.then326
	movq	snr, %rax
	vmovss	28(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	40(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	52(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB71_60
.LBB71_59:                              # %if.else360
	movq	snr, %rax
	vmovss	24(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	36(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	48(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
.LBB71_60:                              # %if.end394
	jmp	.LBB71_61
.LBB71_61:                              # %if.end395
	cmpl	$1866368472, -44(%rbp)  # imm = 0x6F3E85D8
	jne	.LBB71_63
.LBB71_62:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_62
.Lfunc_end71:
	.size	find_snr.35, .Lfunc_end71-find_snr.35
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function distortion_fld.36
	.type	distortion_fld.36,@function
distortion_fld.36:                      # @distortion_fld.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1723027076, -4(%rbp)   # imm = 0x66B34E84
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -16(%rbp)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movb	$0, %al
	callq	combine_field
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	callq	find_distortion
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vmovss	%xmm0, (%rax)
	cmpl	$1723027076, -4(%rbp)   # imm = 0x66B34E84
	jne	.LBB72_2
.LBB72_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_1
.Lfunc_end72:
	.size	distortion_fld.36, .Lfunc_end72-distortion_fld.36
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function distortion_fld.37
	.type	distortion_fld.37,@function
distortion_fld.37:                      # @distortion_fld.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1574493163, -4(%rbp)   # imm = 0x5DD8DBEB
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movb	$0, %al
	callq	combine_field
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	callq	find_distortion
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	vmovss	%xmm0, (%rax)
	cmpl	$1574493163, -4(%rbp)   # imm = 0x5DD8DBEB
	jne	.LBB73_2
.LBB73_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_1
.Lfunc_end73:
	.size	distortion_fld.37, .Lfunc_end73-distortion_fld.37
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_motion_vectors_MB.38
	.type	copy_motion_vectors_MB.38,@function
copy_motion_vectors_MB.38:              # @copy_motion_vectors_MB.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1581816809, -20(%rbp)  # imm = 0x5E489BE9
	movl	$0, -16(%rbp)
.LBB74_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_3 Depth 2
                                        #       Child Loop BB74_5 Depth 3
                                        #         Child Loop BB74_7 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB74_20
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -8(%rbp)
.LBB74_3:                               # %for.cond1
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_5 Depth 3
                                        #         Child Loop BB74_7 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB74_18
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB74_3 Depth=2
	movl	$0, -4(%rbp)
.LBB74_5:                               # %for.cond4
                                        #   Parent Loop BB74_1 Depth=1
                                        #     Parent Loop BB74_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB74_7 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB74_16
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB74_5 Depth=3
	movl	$0, -12(%rbp)
.LBB74_7:                               # %for.cond7
                                        #   Parent Loop BB74_1 Depth=1
                                        #     Parent Loop BB74_3 Depth=2
                                        #       Parent Loop BB74_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$9, -12(%rbp)
	jge	.LBB74_14
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB74_7 Depth=4
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB74_12
# %bb.9:                                # %land.lhs.true
                                        #   in Loop: Header=BB74_7 Depth=4
	cmpl	$1, -4(%rbp)
	jne	.LBB74_12
# %bb.10:                               # %land.lhs.true96
                                        #   in Loop: Header=BB74_7 Depth=4
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB74_12
# %bb.11:                               # %if.then
                                        #   in Loop: Header=BB74_7 Depth=4
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB74_12:                              # %if.end
                                        #   in Loop: Header=BB74_7 Depth=4
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB74_7 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_7
.LBB74_14:                              # %for.end
                                        #   in Loop: Header=BB74_5 Depth=3
	jmp	.LBB74_15
.LBB74_15:                              # %for.inc359
                                        #   in Loop: Header=BB74_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_5
.LBB74_16:                              # %for.end361
                                        #   in Loop: Header=BB74_3 Depth=2
	jmp	.LBB74_17
.LBB74_17:                              # %for.inc362
                                        #   in Loop: Header=BB74_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_3
.LBB74_18:                              # %for.end364
                                        #   in Loop: Header=BB74_1 Depth=1
	jmp	.LBB74_19
.LBB74_19:                              # %for.inc365
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_1
.LBB74_20:                              # %for.end367
	cmpl	$1581816809, -20(%rbp)  # imm = 0x5E489BE9
	jne	.LBB74_22
.LBB74_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_22:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_21
.Lfunc_end74:
	.size	copy_motion_vectors_MB.38, .Lfunc_end74-copy_motion_vectors_MB.38
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function find_snr.39
.LCPI75_0:
	.quad	4621819117588971520     # double 10
	.text
	.p2align	4, 0x90
	.type	find_snr.39,@function
find_snr.39:                            # @find_snr.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$119855760, -48(%rbp)   # imm = 0x724DA90
	movq	$0, -16(%rbp)
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	imull	72684(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movq	img, %rcx
	imull	72688(%rcx), %eax
	movl	%eax, -36(%rbp)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	movl	3304(%rax), %eax
	movq	input, %rcx
	imull	3308(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB75_20
# %bb.1:                                # %if.then
	movq	$0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB75_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_4 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB75_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB75_2 Depth=1
	movl	$0, -8(%rbp)
.LBB75_4:                               # %for.cond8
                                        #   Parent Loop BB75_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB75_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB75_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgY_com, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB75_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_4
.LBB75_7:                               # %for.end
                                        #   in Loop: Header=BB75_2 Depth=1
	jmp	.LBB75_8
.LBB75_8:                               # %for.inc22
                                        #   in Loop: Header=BB75_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_2
.LBB75_9:                               # %for.end24
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB75_19
# %bb.10:                               # %if.then27
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB75_11:                              # %for.cond28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_13 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB75_18
# %bb.12:                               # %for.body32
                                        #   in Loop: Header=BB75_11 Depth=1
	movl	$0, -8(%rbp)
.LBB75_13:                              # %for.cond33
                                        #   Parent Loop BB75_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB75_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB75_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	8(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.15:                               # %for.inc74
                                        #   in Loop: Header=BB75_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_13
.LBB75_16:                              # %for.end76
                                        #   in Loop: Header=BB75_11 Depth=1
	jmp	.LBB75_17
.LBB75_17:                              # %for.inc77
                                        #   in Loop: Header=BB75_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_11
.LBB75_18:                              # %for.end79
	jmp	.LBB75_19
.LBB75_19:                              # %if.end
	jmp	.LBB75_41
.LBB75_20:                              # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB75_22
# %bb.21:                               # %if.then82
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
.LBB75_22:                              # %if.end83
	movq	$0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB75_23:                              # %for.cond84
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_25 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB75_30
# %bb.24:                               # %for.body88
                                        #   in Loop: Header=BB75_23 Depth=1
	movl	$0, -8(%rbp)
.LBB75_25:                              # %for.cond89
                                        #   Parent Loop BB75_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB75_28
# %bb.26:                               # %for.body93
                                        #   in Loop: Header=BB75_25 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.27:                               # %for.inc110
                                        #   in Loop: Header=BB75_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_25
.LBB75_28:                              # %for.end112
                                        #   in Loop: Header=BB75_23 Depth=1
	jmp	.LBB75_29
.LBB75_29:                              # %for.inc113
                                        #   in Loop: Header=BB75_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_23
.LBB75_30:                              # %for.end115
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB75_40
# %bb.31:                               # %if.then119
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB75_32:                              # %for.cond120
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_34 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB75_39
# %bb.33:                               # %for.body124
                                        #   in Loop: Header=BB75_32 Depth=1
	movl	$0, -8(%rbp)
.LBB75_34:                              # %for.cond125
                                        #   Parent Loop BB75_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB75_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB75_34 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.36:                               # %for.inc167
                                        #   in Loop: Header=BB75_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_34
.LBB75_37:                              # %for.end169
                                        #   in Loop: Header=BB75_32 Depth=1
	jmp	.LBB75_38
.LBB75_38:                              # %for.inc170
                                        #   in Loop: Header=BB75_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_32
.LBB75_39:                              # %for.end172
	jmp	.LBB75_40
.LBB75_40:                              # %if.end173
	jmp	.LBB75_41
.LBB75_41:                              # %if.end174
	cmpq	$0, -16(%rbp)
	jne	.LBB75_43
# %bb.42:                               # %if.then177
	movq	$1, -16(%rbp)
.LBB75_43:                              # %if.end178
	cmpq	$0, -24(%rbp)
	jne	.LBB75_45
# %bb.44:                               # %if.then181
	movq	$1, -24(%rbp)
.LBB75_45:                              # %if.end182
	cmpq	$0, -32(%rbp)
	jne	.LBB75_47
# %bb.46:                               # %if.then185
	movq	$1, -32(%rbp)
.LBB75_47:                              # %if.end186
	cmpq	$0, -16(%rbp)
	je	.LBB75_52
# %bb.48:                               # %if.then189
	movl	-52(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-44(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-16(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI75_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB75_50
# %bb.49:                               # %if.then199
	movl	-36(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-24(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI75_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr(%rip), %rax
	vmovss	%xmm0, 4(%rax)
	movl	-36(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-32(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI75_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	jmp	.LBB75_51
.LBB75_50:                              # %if.else216
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 4(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
.LBB75_51:                              # %if.end219
	jmp	.LBB75_52
.LBB75_52:                              # %if.end220
	movq	img, %rax
	cmpl	$0, (%rax)
	jne	.LBB75_54
# %bb.53:                               # %if.then223
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 12(%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 16(%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 20(%rax)
	movq	snr, %rax
	vmovss	12(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	16(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	20(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB75_55
.LBB75_54:                              # %if.else245
	movq	snr, %rax
	vmovss	60(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	64(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	68(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
.LBB75_55:                              # %if.end285
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_57
# %bb.56:                               # %if.then288
	movq	snr, %rax
	vmovss	32(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	44(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	56(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	jmp	.LBB75_61
.LBB75_57:                              # %if.else322
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB75_59
# %bb.58:                               # %if.then326
	movq	snr, %rax
	vmovss	28(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	40(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	52(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB75_60
.LBB75_59:                              # %if.else360
	movq	snr, %rax
	vmovss	24(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	36(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	48(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
.LBB75_60:                              # %if.end394
	jmp	.LBB75_61
.LBB75_61:                              # %if.end395
	cmpl	$119855760, -48(%rbp)   # imm = 0x724DA90
	jne	.LBB75_63
.LBB75_62:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_62
.Lfunc_end75:
	.size	find_snr.39, .Lfunc_end75-find_snr.39
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_frame.40
.LCPI76_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_frame.40,@function
init_frame.40:                          # @init_frame.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$2091639687, -16(%rbp)  # imm = 0x7CABE387
	movq	last_P_no_frm, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movl	$0, -4(%rbp)
.LBB76_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %esi
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %edi
	idivl	%edi
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	idivl	%edi
	imull	%eax, %ecx
	cmpl	%ecx, %esi
	jge	.LBB76_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB76_1 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	$-1, 4(%rax)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_1
.LBB76_4:                               # %for.end
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB76_29
# %bb.5:                                # %if.then
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	input, %rdx
	movl	20(%rdx), %edx
	addl	$1, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	movl	71876(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71880(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71876(%rcx)
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB76_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB76_8
# %bb.7:                                # %if.then10
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB76_8:                               # %if.end
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	je	.LBB76_11
# %bb.9:                                # %land.lhs.true16
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB76_11
# %bb.10:                               # %if.then18
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_frm
.LBB76_11:                              # %if.end20
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB76_26
# %bb.12:                               # %if.then22
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_18
# %bb.13:                               # %if.then24
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB76_16
# %bb.14:                               # %land.lhs.true26
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB76_16
# %bb.15:                               # %if.then30
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB76_17
.LBB76_16:                              # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB76_17:                              # %if.end32
	jmp	.LBB76_25
.LBB76_18:                              # %if.else33
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB76_21
# %bb.19:                               # %land.lhs.true36
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB76_21
# %bb.20:                               # %if.then40
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB76_22
.LBB76_21:                              # %if.else42
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB76_22:                              # %if.end44
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB76_24
# %bb.23:                               # %if.then47
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB76_24:                              # %if.end50
	jmp	.LBB76_25
.LBB76_25:                              # %if.end51
	jmp	.LBB76_26
.LBB76_26:                              # %if.end52
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB76_28
# %bb.27:                               # %if.then54
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB76_28:                              # %if.end62
	jmp	.LBB76_72
.LBB76_29:                              # %if.else63
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	subl	$1, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -8(%rbp)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	$1, -4(%rbp)
.LBB76_30:                              # %for.cond78
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jge	.LBB76_33
# %bb.31:                               # %for.body80
                                        #   in Loop: Header=BB76_30 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc88
                                        #   in Loop: Header=BB76_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_30
.LBB76_33:                              # %for.end90
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB76_36
# %bb.34:                               # %land.lhs.true93
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB76_36
# %bb.35:                               # %if.then98
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	subl	-8(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB76_36:                              # %if.end102
	vmovsd	.LCPI76_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB76_38
# %bb.37:                               # %if.then111
	vmovsd	.LCPI76_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB76_38:                              # %if.end113
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB76_40
# %bb.39:                               # %if.then116
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB76_41
.LBB76_40:                              # %if.else128
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB76_41:                              # %if.end136
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB76_43
# %bb.42:                               # %if.then140
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB76_43:                              # %if.end143
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB76_68
# %bb.44:                               # %land.lhs.true146
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB76_68
# %bb.45:                               # %if.then150
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB76_48
# %bb.46:                               # %land.lhs.true154
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB76_48
# %bb.47:                               # %if.then159
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB76_49
.LBB76_48:                              # %if.else161
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB76_49:                              # %if.end163
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB76_67
# %bb.50:                               # %if.then165
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB76_59
# %bb.51:                               # %land.lhs.true169
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB76_59
# %bb.52:                               # %if.then174
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB76_54
# %bb.53:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB76_58
.LBB76_54:                              # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB76_56
# %bb.55:                               # %cond.true184
	movl	$51, %eax
	jmp	.LBB76_57
.LBB76_56:                              # %cond.false185
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB76_57:                              # %cond.end
.LBB76_58:                              # %cond.end189
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB76_66
.LBB76_59:                              # %if.else192
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB76_61
# %bb.60:                               # %cond.true197
	xorl	%eax, %eax
	jmp	.LBB76_65
.LBB76_61:                              # %cond.false198
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB76_63
# %bb.62:                               # %cond.true204
	movl	$51, %eax
	jmp	.LBB76_64
.LBB76_63:                              # %cond.false205
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB76_64:                              # %cond.end209
.LBB76_65:                              # %cond.end211
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB76_66:                              # %if.end214
	jmp	.LBB76_67
.LBB76_67:                              # %if.end215
	jmp	.LBB76_71
.LBB76_68:                              # %if.else216
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB76_70
# %bb.69:                               # %if.then220
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB76_70:                              # %if.end226
	jmp	.LBB76_71
.LBB76_71:                              # %if.end227
	jmp	.LBB76_72
.LBB76_72:                              # %if.end228
	movq	img, %rax
	movl	72384(%rax), %edi
	callq	UpdateSubseqInfo
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	callq	UpdateSceneInformation
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	$0, 72504(%rax)
	movq	img, %rax
	movl	$0, 72508(%rax)
	callq	init_dec_ref_pic_marking_buffer
	cmpl	$2091639687, -16(%rbp)  # imm = 0x7CABE387
	jne	.LBB76_74
.LBB76_73:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_74:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_73
.Lfunc_end76:
	.size	init_frame.40, .Lfunc_end76-init_frame.40
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function picture_structure_decision.41
.LCPI77_0:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI77_1:
	.quad	4611686018427387904     # double 2
.LCPI77_2:
	.quad	4613937818241073152     # double 3
	.text
	.p2align	4, 0x90
	.type	picture_structure_decision.41,@function
picture_structure_decision.41:          # @picture_structure_decision.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI77_1(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI77_2(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$814411366, -44(%rbp)   # imm = 0x308AEE66
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -56(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI77_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$4, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -64(%rbp)
	movq	-16(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-16(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -28(%rbp)
	movq	-24(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-24(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -48(%rbp)
	movq	-24(%rbp), %rax
	movl	808(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	808(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -32(%rbp)
	vmovss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-48(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movl	-40(%rbp), %edi
	movl	-32(%rbp), %esi
	vmovsd	-64(%rbp), %xmm2        # xmm2 = mem[0],zero
	callq	decide_fld_frame
	movl	%eax, %ebx
	cmpl	$814411366, -44(%rbp)   # imm = 0x308AEE66
	jne	.LBB77_2
.LBB77_1:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_1
.Lfunc_end77:
	.size	picture_structure_decision.41, .Lfunc_end77-picture_structure_decision.41
	.cfi_endproc
                                        # -- End function
	.globl	field_picture.42        # -- Begin function field_picture.42
	.p2align	4, 0x90
	.type	field_picture.42,@function
field_picture.42:                       # @field_picture.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$220389141, -12(%rbp)   # imm = 0xD22DF15
	movq	%rdi, -8(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	stats, %rax
	movl	$0, 1472(%rax)
	movq	stats, %rax
	addq	$1472, %rax             # imm = 0x5C0
	movq	stats, %rcx
	movq	%rax, 1480(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	68(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	img, %rax
	movl	72488(%rax), %eax
	shrl	$1, %eax
	movq	img, %rcx
	movl	%eax, 72484(%rcx)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_top_picture
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_top_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_top_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$1, 28(%rax)
	movq	enc_top_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_top
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB78_2
# %bb.1:                                # %if.then
	movl	nextP_tr_fld, %eax
	addl	$-1, %eax
	movl	%eax, nextP_tr_fld
.LBB78_2:                               # %if.end
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB78_7
# %bb.3:                                # %if.then15
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB78_5
# %bb.4:                                # %if.then17
	xorl	%edi, %edi
	movl	$1, %esi
	movl	$1, %edx
	callq	rc_init_pict
	jmp	.LBB78_6
.LBB78_5:                               # %if.else
	xorl	%edi, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
.LBB78_6:                               # %if.end18
	movl	$1, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB78_7:                               # %if.end20
	movq	img, %rax
	movl	$1, 72596(%rax)
	movq	top_pic, %rdi
	callq	code_a_picture
	movq	enc_picture, %rax
	movl	$1, (%rax)
	movq	enc_top_picture, %rdi
	callq	store_picture_in_dpb
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_bottom_picture
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_bottom_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_bottom_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$2, 28(%rax)
	movq	enc_bottom_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_bot
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB78_9
# %bb.8:                                # %if.then46
	movl	nextP_tr_fld, %eax
	addl	$1, %eax
	movl	%eax, nextP_tr_fld
.LBB78_9:                               # %if.end48
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_12
# %bb.10:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$1, 2888(%rax)
	je	.LBB78_12
# %bb.11:                               # %if.then52
	movq	img, %rax
	movl	$0, 24(%rax)
.LBB78_12:                              # %if.end54
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB78_14
# %bb.13:                               # %if.then58
	movl	-16(%rbp), %edi
	callq	setbitscount
.LBB78_14:                              # %if.end59
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB78_16
# %bb.15:                               # %if.then62
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB78_16:                              # %if.end65
	movq	img, %rax
	movl	$0, 72596(%rax)
	movq	enc_picture, %rax
	movl	$2, (%rax)
	movq	bottom_pic, %rdi
	callq	code_a_picture
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rdi
	addq	$812, %rdi              # imm = 0x32C
	movq	-8(%rbp), %rsi
	addq	$816, %rsi              # imm = 0x330
	movq	-8(%rbp), %rdx
	addq	$820, %rdx              # imm = 0x334
	callq	distortion_fld
	cmpl	$220389141, -12(%rbp)   # imm = 0xD22DF15
	jne	.LBB78_18
.LBB78_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_18:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_17
.Lfunc_end78:
	.size	field_picture.42, .Lfunc_end78-field_picture.42
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function find_distortion.43
	.type	find_distortion.43,@function
find_distortion.43:                     # @find_distortion.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$205639820, -44(%rbp)   # imm = 0xC41D08C
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB79_20
# %bb.1:                                # %if.then
	movq	$0, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB79_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_4 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB79_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB79_2 Depth=1
	movl	$0, -12(%rbp)
.LBB79_4:                               # %for.cond3
                                        #   Parent Loop BB79_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB79_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB79_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgY_com, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB79_4 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_4
.LBB79_7:                               # %for.end
                                        #   in Loop: Header=BB79_2 Depth=1
	jmp	.LBB79_8
.LBB79_8:                               # %for.inc17
                                        #   in Loop: Header=BB79_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_2
.LBB79_9:                               # %for.end19
	movq	$0, -24(%rbp)
	movq	$0, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB79_19
# %bb.10:                               # %if.then22
	movl	$0, -16(%rbp)
.LBB79_11:                              # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_13 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB79_18
# %bb.12:                               # %for.body26
                                        #   in Loop: Header=BB79_11 Depth=1
	movl	$0, -12(%rbp)
.LBB79_13:                              # %for.cond27
                                        #   Parent Loop BB79_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB79_16
# %bb.14:                               # %for.body30
                                        #   in Loop: Header=BB79_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.15:                               # %for.inc69
                                        #   in Loop: Header=BB79_13 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_13
.LBB79_16:                              # %for.end71
                                        #   in Loop: Header=BB79_11 Depth=1
	jmp	.LBB79_17
.LBB79_17:                              # %for.inc72
                                        #   in Loop: Header=BB79_11 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_11
.LBB79_18:                              # %for.end74
	jmp	.LBB79_19
.LBB79_19:                              # %if.end
	jmp	.LBB79_39
.LBB79_20:                              # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	$0, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB79_21:                              # %for.cond75
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_23 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB79_28
# %bb.22:                               # %for.body79
                                        #   in Loop: Header=BB79_21 Depth=1
	movl	$0, -12(%rbp)
.LBB79_23:                              # %for.cond80
                                        #   Parent Loop BB79_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB79_26
# %bb.24:                               # %for.body84
                                        #   in Loop: Header=BB79_23 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.25:                               # %for.inc102
                                        #   in Loop: Header=BB79_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_23
.LBB79_26:                              # %for.end104
                                        #   in Loop: Header=BB79_21 Depth=1
	jmp	.LBB79_27
.LBB79_27:                              # %for.inc105
                                        #   in Loop: Header=BB79_21 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_21
.LBB79_28:                              # %for.end107
	movq	$0, -24(%rbp)
	movq	$0, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB79_38
# %bb.29:                               # %if.then111
	movl	$0, -16(%rbp)
.LBB79_30:                              # %for.cond112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_32 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB79_37
# %bb.31:                               # %for.body116
                                        #   in Loop: Header=BB79_30 Depth=1
	movl	$0, -12(%rbp)
.LBB79_32:                              # %for.cond117
                                        #   Parent Loop BB79_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB79_35
# %bb.33:                               # %for.body121
                                        #   in Loop: Header=BB79_32 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.34:                               # %for.inc161
                                        #   in Loop: Header=BB79_32 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_32
.LBB79_35:                              # %for.end163
                                        #   in Loop: Header=BB79_30 Depth=1
	jmp	.LBB79_36
.LBB79_36:                              # %for.inc164
                                        #   in Loop: Header=BB79_30 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_30
.LBB79_37:                              # %for.end166
	jmp	.LBB79_38
.LBB79_38:                              # %if.end167
	jmp	.LBB79_39
.LBB79_39:                              # %if.end168
	vcvtsi2ssq	-32(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vcvtsi2ssq	-24(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vcvtsi2ssq	-40(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$205639820, -44(%rbp)   # imm = 0xC41D08C
	jne	.LBB79_41
.LBB79_40:
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_40
.Lfunc_end79:
	.size	find_distortion.43, .Lfunc_end79-find_distortion.43
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function find_distortion.44
	.type	find_distortion.44,@function
find_distortion.44:                     # @find_distortion.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1092845580, -44(%rbp)  # imm = 0x4123800C
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB80_20
# %bb.1:                                # %if.then
	movq	$0, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB80_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_4 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB80_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB80_2 Depth=1
	movl	$0, -16(%rbp)
.LBB80_4:                               # %for.cond3
                                        #   Parent Loop BB80_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB80_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB80_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgY_com, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB80_4 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_4
.LBB80_7:                               # %for.end
                                        #   in Loop: Header=BB80_2 Depth=1
	jmp	.LBB80_8
.LBB80_8:                               # %for.inc17
                                        #   in Loop: Header=BB80_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_2
.LBB80_9:                               # %for.end19
	movq	$0, -40(%rbp)
	movq	$0, -24(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB80_19
# %bb.10:                               # %if.then22
	movl	$0, -12(%rbp)
.LBB80_11:                              # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_13 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB80_18
# %bb.12:                               # %for.body26
                                        #   in Loop: Header=BB80_11 Depth=1
	movl	$0, -16(%rbp)
.LBB80_13:                              # %for.cond27
                                        #   Parent Loop BB80_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB80_16
# %bb.14:                               # %for.body30
                                        #   in Loop: Header=BB80_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.15:                               # %for.inc69
                                        #   in Loop: Header=BB80_13 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_13
.LBB80_16:                              # %for.end71
                                        #   in Loop: Header=BB80_11 Depth=1
	jmp	.LBB80_17
.LBB80_17:                              # %for.inc72
                                        #   in Loop: Header=BB80_11 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_11
.LBB80_18:                              # %for.end74
	jmp	.LBB80_19
.LBB80_19:                              # %if.end
	jmp	.LBB80_39
.LBB80_20:                              # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	$0, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB80_21:                              # %for.cond75
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_23 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB80_28
# %bb.22:                               # %for.body79
                                        #   in Loop: Header=BB80_21 Depth=1
	movl	$0, -16(%rbp)
.LBB80_23:                              # %for.cond80
                                        #   Parent Loop BB80_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB80_26
# %bb.24:                               # %for.body84
                                        #   in Loop: Header=BB80_23 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.25:                               # %for.inc102
                                        #   in Loop: Header=BB80_23 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_23
.LBB80_26:                              # %for.end104
                                        #   in Loop: Header=BB80_21 Depth=1
	jmp	.LBB80_27
.LBB80_27:                              # %for.inc105
                                        #   in Loop: Header=BB80_21 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_21
.LBB80_28:                              # %for.end107
	movq	$0, -40(%rbp)
	movq	$0, -24(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB80_38
# %bb.29:                               # %if.then111
	movl	$0, -12(%rbp)
.LBB80_30:                              # %for.cond112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_32 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB80_37
# %bb.31:                               # %for.body116
                                        #   in Loop: Header=BB80_30 Depth=1
	movl	$0, -16(%rbp)
.LBB80_32:                              # %for.cond117
                                        #   Parent Loop BB80_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB80_35
# %bb.33:                               # %for.body121
                                        #   in Loop: Header=BB80_32 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.34:                               # %for.inc161
                                        #   in Loop: Header=BB80_32 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_32
.LBB80_35:                              # %for.end163
                                        #   in Loop: Header=BB80_30 Depth=1
	jmp	.LBB80_36
.LBB80_36:                              # %for.inc164
                                        #   in Loop: Header=BB80_30 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_30
.LBB80_37:                              # %for.end166
	jmp	.LBB80_38
.LBB80_38:                              # %if.end167
	jmp	.LBB80_39
.LBB80_39:                              # %if.end168
	vcvtsi2ssq	-32(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vcvtsi2ssq	-40(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vcvtsi2ssq	-24(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$1092845580, -44(%rbp)  # imm = 0x4123800C
	jne	.LBB80_41
.LBB80_40:
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_40
.Lfunc_end80:
	.size	find_distortion.44, .Lfunc_end80-find_distortion.44
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportSP.45
	.type	ReportSP.45,@function
ReportSP.45:                            # @ReportSP.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$829977271, -8(%rbp)    # imm = 0x317872B7
	movl	%edi, -12(%rbp)
	movl	%esi, -4(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	active_pps, %rax
	movl	192(%rax), %ecx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-12(%rbp), %r9d
	movl	-4(%rbp), %r10d
	movq	img, %rdi
	movl	71800(%rdi), %edi
	cmpl	$0, %edi
	movabsq	$.L.str.7, %rdi
	movabsq	$.L.str.8, %rax
	cmovneq	%rdi, %rax
	movl	intras, %r11d
	movabsq	$.L.str.10, %rdi
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	cmpl	$829977271, -8(%rbp)    # imm = 0x317872B7
	jne	.LBB81_2
.LBB81_1:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_1
.Lfunc_end81:
	.size	ReportSP.45, .Lfunc_end81-ReportSP.45
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportIntra.46
	.type	ReportIntra.46,@function
ReportIntra.46:                         # @ReportIntra.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1792358722, -12(%rbp)  # imm = 0x6AD53942
	movl	%edi, -8(%rbp)
	movl	%esi, -4(%rbp)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$1, 4(%rax)
	jne	.LBB82_2
# %bb.1:                                # %if.then
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-8(%rbp), %r9d
	movl	-4(%rbp), %r10d
	movq	img, %rcx
	movl	71800(%rcx), %ecx
	cmpl	$0, %ecx
	movabsq	$.L.str.7, %rcx
	movabsq	$.L.str.8, %rax
	cmovneq	%rcx, %rax
	movl	intras, %r11d
	movabsq	$.L.str.6, %rdi
	movl	$0, %ecx
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	jmp	.LBB82_3
.LBB82_2:                               # %if.else
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-8(%rbp), %r9d
	movl	-4(%rbp), %r10d
	movq	img, %rcx
	movl	71800(%rcx), %ecx
	cmpl	$0, %ecx
	movabsq	$.L.str.7, %rcx
	movabsq	$.L.str.8, %rax
	cmovneq	%rcx, %rax
	movl	intras, %r11d
	movabsq	$.L.str.9, %rdi
	movl	$0, %ecx
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
.LBB82_3:                               # %if.end
	cmpl	$1792358722, -12(%rbp)  # imm = 0x6AD53942
	jne	.LBB82_5
.LBB82_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_4
.Lfunc_end82:
	.size	ReportIntra.46, .Lfunc_end82-ReportIntra.46
	.cfi_endproc
                                        # -- End function
	.globl	encode_one_frame.47     # -- Begin function encode_one_frame.47
	.p2align	4, 0x90
	.type	encode_one_frame.47,@function
encode_one_frame.47:                    # @encode_one_frame.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1922268013, -36(%rbp)  # imm = 0x72937B6D
	movl	$0, -68(%rbp)
	movl	$0, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, -40(%rbp)
	vmovss	%xmm0, -56(%rbp)
	vmovss	%xmm0, -48(%rbp)
	vmovss	%xmm0, -52(%rbp)
	vmovss	%xmm0, -24(%rbp)
	vmovss	%xmm0, -32(%rbp)
	vmovss	%xmm0, -64(%rbp)
	vmovss	%xmm0, -44(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, me_time
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture
	movq	$0, enc_frame_picture2
	movq	$0, enc_frame_picture3
	leaq	-112(%rbp), %rdi
	callq	ftime
	leaq	-80(%rbp), %rdi
	callq	time
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	input, %rax
	cmpl	$0, 56(%rax)
	je	.LBB83_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB83_3
# %bb.2:                                # %if.then
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	write_PPS
	movq	stats, %rcx
	movl	%eax, 1492(%rcx)
	movq	stats, %rax
	movl	1492(%rax), %eax
	movq	stats, %rcx
	addl	1488(%rcx), %eax
	movl	%eax, 1488(%rcx)
.LBB83_3:                               # %if.end
	callq	put_buffer_frame
	callq	init_frame
	callq	CalculateFrameNumber
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %edi
	movq	input, %rax
	movl	220(%rax), %esi
	movq	input, %rax
	movl	64(%rax), %edx
	movq	input, %rax
	movl	68(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	callq	ReadOneFrame
	movq	input, %rax
	movl	64(%rax), %edi
	movq	input, %rax
	movl	68(%rax), %esi
	movq	img, %rax
	movl	52(%rax), %edx
	movq	img, %rax
	movl	60(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	movq	img, %rax
	movl	56(%rax), %eax
	movq	img, %rbx
	movl	64(%rbx), %ebx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	callq	PaddAutoCropBorders
	movq	input, %rax
	movl	1248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71996(%rcx)
	movq	input, %rax
	movl	2928(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71984(%rcx)
	movq	input, %rax
	movl	2932(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71988(%rcx)
	movq	input, %rax
	movl	2936(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71992(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB83_5
# %bb.4:                                # %if.then14
	movl	Bframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Bframe_ctr
	jmp	.LBB83_9
.LBB83_5:                               # %if.else
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_7
# %bb.6:                                # %if.then17
	movl	Iframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Iframe_ctr
	jmp	.LBB83_8
.LBB83_7:                               # %if.else19
	movl	Pframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Pframe_ctr
.LBB83_8:                               # %if.end21
	jmp	.LBB83_9
.LBB83_9:                               # %if.end22
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB83_11
# %bb.10:                               # %if.then24
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	img, %rax
	movl	$1, 71800(%rax)
	jmp	.LBB83_38
.LBB83_11:                              # %if.else25
	movq	img, %rax
	movl	$0, 72600(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB83_13
# %bb.12:                               # %if.then28
	movl	$1, mb_adaptive
.LBB83_13:                              # %if.end29
	movq	img, %rax
	movl	$0, 72444(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB83_21
# %bb.14:                               # %if.then32
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB83_19
# %bb.15:                               # %land.lhs.true35
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB83_19
# %bb.16:                               # %land.lhs.true37
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB83_19
# %bb.17:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB83_19
# %bb.18:                               # %if.then42
	movq	input, %rax
	movl	3248(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	jmp	.LBB83_20
.LBB83_19:                              # %if.else44
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
.LBB83_20:                              # %if.end47
	movl	$1, %edi
	xorl	%esi, %esi
	movl	$1, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -92(%rbp)
	movl	$0, QP
.LBB83_21:                              # %if.end50
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB83_23
# %bb.22:                               # %if.then52
	movq	img, %rax
	movl	$0, 72596(%rax)
.LBB83_23:                              # %if.end53
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB83_25
# %bb.24:                               # %if.then55
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB83_25:                              # %if.end56
	movq	frame_pic, %rdi
	xorl	%esi, %esi
	callq	frame_picture
	movq	input, %rax
	cmpl	$0, 1300(%rax)
	jne	.LBB83_27
# %bb.26:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB83_29
.LBB83_27:                              # %land.lhs.true60
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB83_29
# %bb.28:                               # %if.then62
	callq	rdPictureCoding
.LBB83_29:                              # %if.end63
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB83_31
# %bb.30:                               # %if.then66
	movl	$0, mb_adaptive
.LBB83_31:                              # %if.end67
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB83_36
# %bb.32:                               # %if.then70
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	img, %rax
	movl	$0, 72628(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	top_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	top_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	top_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -24(%rbp)
	movq	frame_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	frame_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	frame_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -40(%rbp)
	movq	frame_pic, %rdi
	movq	top_pic, %rsi
	movq	bottom_pic, %rdx
	callq	picture_structure_decision
	movq	img, %rcx
	movl	%eax, 71800(%rcx)
	movq	img, %rax
	movl	71800(%rax), %edi
	callq	update_field_frame_contexts
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	jne	.LBB83_34
# %bb.33:                               # %if.then86
	movq	img, %rax
	movl	$1, 72604(%rax)
	jmp	.LBB83_35
.LBB83_34:                              # %if.else87
	movq	img, %rax
	movl	$0, 72604(%rax)
.LBB83_35:                              # %if.end89
	jmp	.LBB83_37
.LBB83_36:                              # %if.else90
	movq	img, %rax
	movl	$0, 71800(%rax)
.LBB83_37:                              # %if.end92
	jmp	.LBB83_38
.LBB83_38:                              # %if.end93
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB83_40
# %bb.39:                               # %if.then96
	movq	stats, %rax
	movl	1472(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	jmp	.LBB83_41
.LBB83_40:                              # %if.else98
	movq	stats, %rax
	movl	1468(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
.LBB83_41:                              # %if.end101
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB83_43
# %bb.42:                               # %if.then104
	movq	img, %rax
	movl	71800(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71872(%rcx)
.LBB83_43:                              # %if.end106
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB83_45
# %bb.44:                               # %if.then109
	movl	-60(%rbp), %edi
	vmovss	-32(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-64(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-44(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	field_mode_buffer
	movq	top_pic, %rdi
	callq	writeout_picture
	movq	bottom_pic, %rdi
	callq	writeout_picture
	jmp	.LBB83_54
.LBB83_45:                              # %if.else112
	movl	-68(%rbp), %edi
	vmovss	-56(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-48(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-52(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	frame_mode_buffer
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB83_48
# %bb.46:                               # %land.lhs.true115
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB83_48
# %bb.47:                               # %if.then118
	movq	frame_pic3, %rdi
	callq	writeout_picture
	jmp	.LBB83_53
.LBB83_48:                              # %if.else120
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB83_51
# %bb.49:                               # %land.lhs.true123
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB83_51
# %bb.50:                               # %if.then126
	movq	frame_pic2, %rdi
	callq	writeout_picture
	jmp	.LBB83_52
.LBB83_51:                              # %if.else128
	movq	frame_pic, %rdi
	callq	writeout_picture
.LBB83_52:                              # %if.end130
	jmp	.LBB83_53
.LBB83_53:                              # %if.end131
	jmp	.LBB83_54
.LBB83_54:                              # %if.end132
	cmpq	$0, frame_pic3
	je	.LBB83_56
# %bb.55:                               # %if.then134
	movq	frame_pic3, %rdi
	callq	free_slice_list
.LBB83_56:                              # %if.end135
	cmpq	$0, frame_pic2
	je	.LBB83_58
# %bb.57:                               # %if.then137
	movq	frame_pic2, %rdi
	callq	free_slice_list
.LBB83_58:                              # %if.end138
	cmpq	$0, frame_pic
	je	.LBB83_60
# %bb.59:                               # %if.then140
	movq	frame_pic, %rdi
	callq	free_slice_list
.LBB83_60:                              # %if.end141
	cmpq	$0, top_pic
	je	.LBB83_62
# %bb.61:                               # %if.then143
	movq	top_pic, %rdi
	callq	free_slice_list
.LBB83_62:                              # %if.end144
	cmpq	$0, bottom_pic
	je	.LBB83_64
# %bb.63:                               # %if.then146
	movq	bottom_pic, %rdi
	callq	free_slice_list
.LBB83_64:                              # %if.end147
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB83_66
# %bb.65:                               # %if.then150
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %edi
	callq	rc_update_pict_frame
.LBB83_66:                              # %if.end151
	callq	find_snr
	leaq	-88(%rbp), %rdi
	callq	time
	leaq	-128(%rbp), %rdi
	callq	ftime
	imulq	$1000, -88(%rbp), %rax  # imm = 0x3E8
	movzwl	-120(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -80(%rbp), %rcx  # imm = 0x3E8
	movzwl	-104(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -12(%rbp)
	movl	tot_time, %eax
	addl	-12(%rbp), %eax
	movl	%eax, tot_time
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB83_71
# %bb.67:                               # %if.then166
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB83_69
# %bb.68:                               # %if.then169
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	jmp	.LBB83_70
.LBB83_69:                              # %if.else170
	movq	enc_frame_picture, %rdi
	callq	replace_top_pic_with_frame
	movq	enc_bottom_picture, %rdi
	callq	free_storable_picture
.LBB83_70:                              # %if.end171
	jmp	.LBB83_81
.LBB83_71:                              # %if.else172
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB83_73
# %bb.72:                               # %if.then175
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	jmp	.LBB83_80
.LBB83_73:                              # %if.else176
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB83_75
# %bb.74:                               # %if.then180
	movq	enc_frame_picture3, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	jmp	.LBB83_79
.LBB83_75:                              # %if.else181
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB83_77
# %bb.76:                               # %if.then185
	movq	enc_frame_picture2, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
	jmp	.LBB83_78
.LBB83_77:                              # %if.else186
	movq	enc_frame_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
.LBB83_78:                              # %if.end187
	jmp	.LBB83_79
.LBB83_79:                              # %if.end188
	jmp	.LBB83_80
.LBB83_80:                              # %if.end189
	jmp	.LBB83_81
.LBB83_81:                              # %if.end190
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	cltq
	movq	total_frame_buffer, %rcx
	movq	%rax, Bit_Buffer(,%rcx,8)
	movq	total_frame_buffer, %rax
	addq	$1, %rax
	movq	%rax, total_frame_buffer
	movq	img, %rax
	cmpl	$2, 72404(%rax)
	jne	.LBB83_89
# %bb.82:                               # %if.then198
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB83_84
# %bb.83:                               # %if.then200
	movl	encode_one_frame.consecutive_non_reference_pictures, %eax
	addl	$1, %eax
	movl	%eax, encode_one_frame.consecutive_non_reference_pictures
	jmp	.LBB83_85
.LBB83_84:                              # %if.else202
	movl	$0, encode_one_frame.consecutive_non_reference_pictures
.LBB83_85:                              # %if.end203
	movl	frame_no, %eax
	cmpl	encode_one_frame.prev_frame_no, %eax
	jl	.LBB83_87
# %bb.86:                               # %lor.lhs.false206
	cmpl	$1, encode_one_frame.consecutive_non_reference_pictures
	jle	.LBB83_88
.LBB83_87:                              # %if.then209
	movabsq	$.L.str, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB83_88:                              # %if.end210
	movl	frame_no, %eax
	movl	%eax, encode_one_frame.prev_frame_no
.LBB83_89:                              # %if.end211
	movq	stats, %rax
	cmpl	$0, 1492(%rax)
	je	.LBB83_91
# %bb.90:                               # %if.then215
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportNALNonVLCBits
.LBB83_91:                              # %if.end216
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB83_93
# %bb.92:                               # %if.then221
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportFirstframe
	jmp	.LBB83_110
.LBB83_93:                              # %if.else222
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB83_99
# %bb.94:                               # %if.then225
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB83_97
# %bb.95:                               # %land.lhs.true228
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB83_97
# %bb.96:                               # %if.then231
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_98
.LBB83_97:                              # %if.else235
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Pprev_bits, %eax
	movl	%eax, -16(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Pprev_bits
.LBB83_98:                              # %if.end239
	jmp	.LBB83_99
.LBB83_99:                              # %if.end240
	movq	img(%rip), %rax
	movl	24(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB83_104
	jmp	.LBB83_100
.LBB83_100:                             # %if.end240
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB83_102
	jmp	.LBB83_101
.LBB83_101:                             # %if.end240
	subl	$3, %eax
	je	.LBB83_103
	jmp	.LBB83_108
.LBB83_102:                             # %sw.bb
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	704(%rcx), %eax
	movl	%eax, 704(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportIntra
	jmp	.LBB83_109
.LBB83_103:                             # %sw.bb246
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportSP
	jmp	.LBB83_109
.LBB83_104:                             # %sw.bb251
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	712(%rcx), %eax
	movl	%eax, 712(%rcx)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB83_106
# %bb.105:                              # %if.then259
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportRB
	jmp	.LBB83_107
.LBB83_106:                             # %if.else260
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportB
.LBB83_107:                             # %if.end261
	jmp	.LBB83_109
.LBB83_108:                             # %sw.default
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportP
.LBB83_109:                             # %sw.epilog
	jmp	.LBB83_110
.LBB83_110:                             # %if.end267
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 20(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB83_120
# %bb.111:                              # %if.then272
	movl	-16(%rbp), %edi
	callq	rc_update_pict
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB83_114
# %bb.112:                              # %land.lhs.true276
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB83_114
# %bb.113:                              # %if.then279
	movb	$0, %al
	callq	updateRCModel
	jmp	.LBB83_119
.LBB83_114:                             # %if.else280
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB83_118
# %bb.115:                              # %land.lhs.true284
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB83_118
# %bb.116:                              # %land.lhs.true287
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB83_118
# %bb.117:                              # %if.then291
	movb	$0, %al
	callq	updateRCModel
.LBB83_118:                             # %if.end292
	jmp	.LBB83_119
.LBB83_119:                             # %if.end293
	jmp	.LBB83_120
.LBB83_120:                             # %if.end294
	movq	stats, %rax
	movl	$0, 1492(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB83_122
# %bb.121:                              # %if.then300
	movl	$0, -20(%rbp)
	jmp	.LBB83_123
.LBB83_122:                             # %if.else301
	movl	$1, -20(%rbp)
.LBB83_123:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1922268013, -36(%rbp)  # imm = 0x72937B6D
	jne	.LBB83_125
.LBB83_124:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_125:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_124
.Lfunc_end83:
	.size	encode_one_frame.47, .Lfunc_end83-encode_one_frame.47
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_field.48
.LCPI84_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_field.48,@function
init_field.48:                          # @init_field.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$222523830, -16(%rbp)   # imm = 0xD4371B6
	movq	last_P_no_fld, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	input, %rax
	movl	20(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	input, %rax
	movl	1236(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 1236(%rax)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB84_27
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	movl	20(%rcx), %ecx
	addl	$2, %ecx
	imull	%ecx, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB84_3
# %bb.2:                                # %if.then9
	movq	img, %rax
	movl	71884(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71888(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71884(%rcx)
.LBB84_3:                               # %if.end
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB84_6
# %bb.4:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB84_6
# %bb.5:                                # %if.then15
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB84_6:                               # %if.end18
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB84_9
# %bb.7:                                # %land.lhs.true21
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB84_9
# %bb.8:                                # %if.then24
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_fld
.LBB84_9:                               # %if.end26
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB84_24
# %bb.10:                               # %if.then28
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB84_16
# %bb.11:                               # %if.then30
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB84_14
# %bb.12:                               # %land.lhs.true32
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB84_14
# %bb.13:                               # %if.then36
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB84_15
.LBB84_14:                              # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB84_15:                              # %if.end38
	jmp	.LBB84_23
.LBB84_16:                              # %if.else39
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB84_19
# %bb.17:                               # %land.lhs.true42
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB84_19
# %bb.18:                               # %if.then46
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB84_20
.LBB84_19:                              # %if.else48
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB84_20:                              # %if.end50
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB84_22
# %bb.21:                               # %if.then53
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB84_22:                              # %if.end56
	jmp	.LBB84_23
.LBB84_23:                              # %if.end57
	jmp	.LBB84_24
.LBB84_24:                              # %if.end58
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB84_26
# %bb.25:                               # %if.then60
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB84_26:                              # %if.end66
	jmp	.LBB84_77
.LBB84_27:                              # %if.else67
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$2, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	$1, %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB84_33
# %bb.28:                               # %if.then82
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB84_29:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB84_32
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB84_29 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB84_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_29
.LBB84_32:                              # %for.end
	jmp	.LBB84_38
.LBB84_33:                              # %if.else105
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB84_34:                              # %for.cond109
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB84_37
# %bb.35:                               # %for.body112
                                        #   in Loop: Header=BB84_34 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc132
                                        #   in Loop: Header=BB84_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_34
.LBB84_37:                              # %for.end134
	jmp	.LBB84_38
.LBB84_38:                              # %if.end135
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB84_41
# %bb.39:                               # %land.lhs.true138
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB84_41
# %bb.40:                               # %if.then143
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	subl	-8(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB84_41:                              # %if.end147
	vmovsd	.LCPI84_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB84_43
# %bb.42:                               # %if.then156
	vmovsd	.LCPI84_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB84_43:                              # %if.end158
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB84_45
# %bb.44:                               # %if.then161
	vmovsd	.LCPI84_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB84_46
.LBB84_45:                              # %if.else174
	vmovsd	.LCPI84_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB84_46:                              # %if.end183
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB84_48
# %bb.47:                               # %if.then187
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB84_48:                              # %if.end190
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB84_73
# %bb.49:                               # %land.lhs.true193
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB84_73
# %bb.50:                               # %if.then197
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB84_53
# %bb.51:                               # %land.lhs.true201
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB84_53
# %bb.52:                               # %if.then206
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB84_54
.LBB84_53:                              # %if.else208
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB84_54:                              # %if.end210
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB84_72
# %bb.55:                               # %if.then212
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB84_64
# %bb.56:                               # %land.lhs.true216
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB84_64
# %bb.57:                               # %if.then221
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB84_59
# %bb.58:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB84_63
.LBB84_59:                              # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB84_61
# %bb.60:                               # %cond.true231
	movl	$51, %eax
	jmp	.LBB84_62
.LBB84_61:                              # %cond.false232
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB84_62:                              # %cond.end
.LBB84_63:                              # %cond.end236
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB84_71
.LBB84_64:                              # %if.else239
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB84_66
# %bb.65:                               # %cond.true244
	xorl	%eax, %eax
	jmp	.LBB84_70
.LBB84_66:                              # %cond.false245
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB84_68
# %bb.67:                               # %cond.true251
	movl	$51, %eax
	jmp	.LBB84_69
.LBB84_68:                              # %cond.false252
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB84_69:                              # %cond.end256
.LBB84_70:                              # %cond.end258
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB84_71:                              # %if.end261
	jmp	.LBB84_72
.LBB84_72:                              # %if.end262
	jmp	.LBB84_76
.LBB84_73:                              # %if.else263
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB84_75
# %bb.74:                               # %if.then267
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB84_75:                              # %if.end273
	jmp	.LBB84_76
.LBB84_76:                              # %if.end274
	jmp	.LBB84_77
.LBB84_77:                              # %if.end275
	movq	input, %rcx
	movl	20(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, 20(%rcx)
	movq	input, %rcx
	movl	1236(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 1236(%rcx)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	cmpl	$222523830, -16(%rbp)   # imm = 0xD4371B6
	jne	.LBB84_79
.LBB84_78:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_79:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_78
.Lfunc_end84:
	.size	init_field.48, .Lfunc_end84-init_field.48
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function find_distortion.49
	.type	find_distortion.49,@function
find_distortion.49:                     # @find_distortion.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1458750847, -44(%rbp)  # imm = 0x56F2C57F
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB85_20
# %bb.1:                                # %if.then
	movq	$0, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB85_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_4 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB85_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB85_2 Depth=1
	movl	$0, -16(%rbp)
.LBB85_4:                               # %for.cond3
                                        #   Parent Loop BB85_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB85_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB85_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgY_com, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB85_4 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_4
.LBB85_7:                               # %for.end
                                        #   in Loop: Header=BB85_2 Depth=1
	jmp	.LBB85_8
.LBB85_8:                               # %for.inc17
                                        #   in Loop: Header=BB85_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_2
.LBB85_9:                               # %for.end19
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB85_19
# %bb.10:                               # %if.then22
	movl	$0, -12(%rbp)
.LBB85_11:                              # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_13 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB85_18
# %bb.12:                               # %for.body26
                                        #   in Loop: Header=BB85_11 Depth=1
	movl	$0, -16(%rbp)
.LBB85_13:                              # %for.cond27
                                        #   Parent Loop BB85_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB85_16
# %bb.14:                               # %for.body30
                                        #   in Loop: Header=BB85_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.15:                               # %for.inc69
                                        #   in Loop: Header=BB85_13 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_13
.LBB85_16:                              # %for.end71
                                        #   in Loop: Header=BB85_11 Depth=1
	jmp	.LBB85_17
.LBB85_17:                              # %for.inc72
                                        #   in Loop: Header=BB85_11 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_11
.LBB85_18:                              # %for.end74
	jmp	.LBB85_19
.LBB85_19:                              # %if.end
	jmp	.LBB85_39
.LBB85_20:                              # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	$0, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB85_21:                              # %for.cond75
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_23 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB85_28
# %bb.22:                               # %for.body79
                                        #   in Loop: Header=BB85_21 Depth=1
	movl	$0, -16(%rbp)
.LBB85_23:                              # %for.cond80
                                        #   Parent Loop BB85_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB85_26
# %bb.24:                               # %for.body84
                                        #   in Loop: Header=BB85_23 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.25:                               # %for.inc102
                                        #   in Loop: Header=BB85_23 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_23
.LBB85_26:                              # %for.end104
                                        #   in Loop: Header=BB85_21 Depth=1
	jmp	.LBB85_27
.LBB85_27:                              # %for.inc105
                                        #   in Loop: Header=BB85_21 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_21
.LBB85_28:                              # %for.end107
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB85_38
# %bb.29:                               # %if.then111
	movl	$0, -12(%rbp)
.LBB85_30:                              # %for.cond112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_32 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB85_37
# %bb.31:                               # %for.body116
                                        #   in Loop: Header=BB85_30 Depth=1
	movl	$0, -16(%rbp)
.LBB85_32:                              # %for.cond117
                                        #   Parent Loop BB85_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB85_35
# %bb.33:                               # %for.body121
                                        #   in Loop: Header=BB85_32 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.34:                               # %for.inc161
                                        #   in Loop: Header=BB85_32 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_32
.LBB85_35:                              # %for.end163
                                        #   in Loop: Header=BB85_30 Depth=1
	jmp	.LBB85_36
.LBB85_36:                              # %for.inc164
                                        #   in Loop: Header=BB85_30 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_30
.LBB85_37:                              # %for.end166
	jmp	.LBB85_38
.LBB85_38:                              # %if.end167
	jmp	.LBB85_39
.LBB85_39:                              # %if.end168
	vcvtsi2ssq	-40(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vcvtsi2ssq	-24(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vcvtsi2ssq	-32(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$1458750847, -44(%rbp)  # imm = 0x56F2C57F
	jne	.LBB85_41
.LBB85_40:
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_40
.Lfunc_end85:
	.size	find_distortion.49, .Lfunc_end85-find_distortion.49
	.cfi_endproc
                                        # -- End function
	.globl	MbAffPostProc.50        # -- Begin function MbAffPostProc.50
	.p2align	4, 0x90
	.type	MbAffPostProc.50,@function
MbAffPostProc.50:                       # @MbAffPostProc.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1072, %rsp             # imm = 0x430
	movl	$1018107386, -44(%rbp)  # imm = 0x3CAF15FA
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB86_44
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB86_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_5 Depth 2
                                        #       Child Loop BB86_7 Depth 3
                                        #     Child Loop BB86_13 Depth 2
                                        #       Child Loop BB86_15 Depth 3
                                        #     Child Loop BB86_21 Depth 2
                                        #       Child Loop BB86_23 Depth 3
                                        #         Child Loop BB86_25 Depth 4
                                        #       Child Loop BB86_31 Depth 3
                                        #         Child Loop BB86_33 Depth 4
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB86_43
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB86_2 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB86_41
# %bb.4:                                # %if.then4
                                        #   in Loop: Header=BB86_2 Depth=1
	movl	-20(%rbp), %edi
	leaq	-12(%rbp), %rsi
	leaq	-16(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -8(%rbp)
.LBB86_5:                               # %for.cond5
                                        #   Parent Loop BB86_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_7 Depth 3
	cmpl	$32, -8(%rbp)
	jge	.LBB86_12
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB86_5 Depth=2
	movl	$0, -4(%rbp)
.LBB86_7:                               # %for.cond8
                                        #   Parent Loop BB86_2 Depth=1
                                        #     Parent Loop BB86_5 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB86_10
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB86_7 Depth=3
	movq	-32(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB86_7 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_7
.LBB86_10:                              # %for.end
                                        #   in Loop: Header=BB86_5 Depth=2
	jmp	.LBB86_11
.LBB86_11:                              # %for.inc20
                                        #   in Loop: Header=BB86_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_5
.LBB86_12:                              # %for.end22
                                        #   in Loop: Header=BB86_2 Depth=1
	movl	$0, -8(%rbp)
.LBB86_13:                              # %for.cond23
                                        #   Parent Loop BB86_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_15 Depth 3
	cmpl	$16, -8(%rbp)
	jge	.LBB86_20
# %bb.14:                               # %for.body25
                                        #   in Loop: Header=BB86_13 Depth=2
	movl	$0, -4(%rbp)
.LBB86_15:                              # %for.cond26
                                        #   Parent Loop BB86_2 Depth=1
                                        #     Parent Loop BB86_13 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB86_18
# %bb.16:                               # %for.body28
                                        #   in Loop: Header=BB86_15 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.17:                               # %for.inc52
                                        #   in Loop: Header=BB86_15 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_15
.LBB86_18:                              # %for.end54
                                        #   in Loop: Header=BB86_13 Depth=2
	jmp	.LBB86_19
.LBB86_19:                              # %for.inc55
                                        #   in Loop: Header=BB86_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_13
.LBB86_20:                              # %for.end57
                                        #   in Loop: Header=BB86_2 Depth=1
	movl	-12(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72708(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72712(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -16(%rbp)
	movl	$0, -24(%rbp)
.LBB86_21:                              # %for.cond61
                                        #   Parent Loop BB86_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_23 Depth 3
                                        #         Child Loop BB86_25 Depth 4
                                        #       Child Loop BB86_31 Depth 3
                                        #         Child Loop BB86_33 Depth 4
	cmpl	$2, -24(%rbp)
	jge	.LBB86_40
# %bb.22:                               # %for.body63
                                        #   in Loop: Header=BB86_21 Depth=2
	movl	$0, -8(%rbp)
.LBB86_23:                              # %for.cond64
                                        #   Parent Loop BB86_2 Depth=1
                                        #     Parent Loop BB86_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_25 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_30
# %bb.24:                               # %for.body68
                                        #   in Loop: Header=BB86_23 Depth=3
	movl	$0, -4(%rbp)
.LBB86_25:                              # %for.cond69
                                        #   Parent Loop BB86_2 Depth=1
                                        #     Parent Loop BB86_21 Depth=2
                                        #       Parent Loop BB86_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB86_28
# %bb.26:                               # %for.body72
                                        #   in Loop: Header=BB86_25 Depth=4
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.27:                               # %for.inc85
                                        #   in Loop: Header=BB86_25 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_25
.LBB86_28:                              # %for.end87
                                        #   in Loop: Header=BB86_23 Depth=3
	jmp	.LBB86_29
.LBB86_29:                              # %for.inc88
                                        #   in Loop: Header=BB86_23 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_23
.LBB86_30:                              # %for.end90
                                        #   in Loop: Header=BB86_21 Depth=2
	movl	$0, -8(%rbp)
.LBB86_31:                              # %for.cond91
                                        #   Parent Loop BB86_2 Depth=1
                                        #     Parent Loop BB86_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_33 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB86_38
# %bb.32:                               # %for.body94
                                        #   in Loop: Header=BB86_31 Depth=3
	movl	$0, -4(%rbp)
.LBB86_33:                              # %for.cond95
                                        #   Parent Loop BB86_2 Depth=1
                                        #     Parent Loop BB86_21 Depth=2
                                        #       Parent Loop BB86_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB86_36
# %bb.34:                               # %for.body98
                                        #   in Loop: Header=BB86_33 Depth=4
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-40(%rbp), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	movq	img, %rdx
	addl	72712(%rdx), %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-40(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.35:                               # %for.inc128
                                        #   in Loop: Header=BB86_33 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_33
.LBB86_36:                              # %for.end130
                                        #   in Loop: Header=BB86_31 Depth=3
	jmp	.LBB86_37
.LBB86_37:                              # %for.inc131
                                        #   in Loop: Header=BB86_31 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_31
.LBB86_38:                              # %for.end133
                                        #   in Loop: Header=BB86_21 Depth=2
	jmp	.LBB86_39
.LBB86_39:                              # %for.inc134
                                        #   in Loop: Header=BB86_21 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_21
.LBB86_40:                              # %for.end136
                                        #   in Loop: Header=BB86_2 Depth=1
	jmp	.LBB86_41
.LBB86_41:                              # %if.end
                                        #   in Loop: Header=BB86_2 Depth=1
	jmp	.LBB86_42
.LBB86_42:                              # %for.inc137
                                        #   in Loop: Header=BB86_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_2
.LBB86_43:                              # %for.end139
	jmp	.LBB86_67
.LBB86_44:                              # %if.else
	movl	$0, -20(%rbp)
.LBB86_45:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_48 Depth 2
                                        #       Child Loop BB86_50 Depth 3
                                        #     Child Loop BB86_56 Depth 2
                                        #       Child Loop BB86_58 Depth 3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB86_66
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB86_45 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB86_64
# %bb.47:                               # %if.then148
                                        #   in Loop: Header=BB86_45 Depth=1
	movl	-20(%rbp), %edi
	leaq	-12(%rbp), %rsi
	leaq	-16(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -8(%rbp)
.LBB86_48:                              # %for.cond149
                                        #   Parent Loop BB86_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_50 Depth 3
	cmpl	$32, -8(%rbp)
	jge	.LBB86_55
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB86_48 Depth=2
	movl	$0, -4(%rbp)
.LBB86_50:                              # %for.cond152
                                        #   Parent Loop BB86_45 Depth=1
                                        #     Parent Loop BB86_48 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB86_53
# %bb.51:                               # %for.body154
                                        #   in Loop: Header=BB86_50 Depth=3
	movq	-32(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.52:                               # %for.inc165
                                        #   in Loop: Header=BB86_50 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_50
.LBB86_53:                              # %for.end167
                                        #   in Loop: Header=BB86_48 Depth=2
	jmp	.LBB86_54
.LBB86_54:                              # %for.inc168
                                        #   in Loop: Header=BB86_48 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_48
.LBB86_55:                              # %for.end170
                                        #   in Loop: Header=BB86_45 Depth=1
	movl	$0, -8(%rbp)
.LBB86_56:                              # %for.cond171
                                        #   Parent Loop BB86_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_58 Depth 3
	cmpl	$16, -8(%rbp)
	jge	.LBB86_63
# %bb.57:                               # %for.body173
                                        #   in Loop: Header=BB86_56 Depth=2
	movl	$0, -4(%rbp)
.LBB86_58:                              # %for.cond174
                                        #   Parent Loop BB86_45 Depth=1
                                        #     Parent Loop BB86_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB86_61
# %bb.59:                               # %for.body176
                                        #   in Loop: Header=BB86_58 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc201
                                        #   in Loop: Header=BB86_58 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_58
.LBB86_61:                              # %for.end203
                                        #   in Loop: Header=BB86_56 Depth=2
	jmp	.LBB86_62
.LBB86_62:                              # %for.inc204
                                        #   in Loop: Header=BB86_56 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_56
.LBB86_63:                              # %for.end206
                                        #   in Loop: Header=BB86_45 Depth=1
	jmp	.LBB86_64
.LBB86_64:                              # %if.end207
                                        #   in Loop: Header=BB86_45 Depth=1
	jmp	.LBB86_65
.LBB86_65:                              # %for.inc208
                                        #   in Loop: Header=BB86_45 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_45
.LBB86_66:                              # %for.end210
	jmp	.LBB86_67
.LBB86_67:                              # %if.end211
	cmpl	$1018107386, -44(%rbp)  # imm = 0x3CAF15FA
	jne	.LBB86_69
.LBB86_68:
	addq	$1072, %rsp             # imm = 0x430
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_69:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_68
.Lfunc_end86:
	.size	MbAffPostProc.50, .Lfunc_end86-MbAffPostProc.50
	.cfi_endproc
                                        # -- End function
	.globl	encode_one_frame.51     # -- Begin function encode_one_frame.51
	.p2align	4, 0x90
	.type	encode_one_frame.51,@function
encode_one_frame.51:                    # @encode_one_frame.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1024594010, -44(%rbp)  # imm = 0x3D12105A
	movl	$0, -48(%rbp)
	movl	$0, -32(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, -28(%rbp)
	vmovss	%xmm0, -40(%rbp)
	vmovss	%xmm0, -64(%rbp)
	vmovss	%xmm0, -68(%rbp)
	vmovss	%xmm0, -56(%rbp)
	vmovss	%xmm0, -52(%rbp)
	vmovss	%xmm0, -24(%rbp)
	vmovss	%xmm0, -60(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, me_time
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture
	movq	$0, enc_frame_picture2
	movq	$0, enc_frame_picture3
	leaq	-128(%rbp), %rdi
	callq	ftime
	leaq	-80(%rbp), %rdi
	callq	time
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	input, %rax
	cmpl	$0, 56(%rax)
	je	.LBB87_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB87_3
# %bb.2:                                # %if.then
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	write_PPS
	movq	stats, %rcx
	movl	%eax, 1492(%rcx)
	movq	stats, %rax
	movl	1492(%rax), %eax
	movq	stats, %rcx
	addl	1488(%rcx), %eax
	movl	%eax, 1488(%rcx)
.LBB87_3:                               # %if.end
	callq	put_buffer_frame
	callq	init_frame
	callq	CalculateFrameNumber
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %edi
	movq	input, %rax
	movl	220(%rax), %esi
	movq	input, %rax
	movl	64(%rax), %edx
	movq	input, %rax
	movl	68(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	callq	ReadOneFrame
	movq	input, %rax
	movl	64(%rax), %edi
	movq	input, %rax
	movl	68(%rax), %esi
	movq	img, %rax
	movl	52(%rax), %edx
	movq	img, %rax
	movl	60(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	movq	img, %rax
	movl	56(%rax), %eax
	movq	img, %rbx
	movl	64(%rbx), %ebx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	callq	PaddAutoCropBorders
	movq	input, %rax
	movl	1248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71996(%rcx)
	movq	input, %rax
	movl	2928(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71984(%rcx)
	movq	input, %rax
	movl	2932(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71988(%rcx)
	movq	input, %rax
	movl	2936(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71992(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB87_5
# %bb.4:                                # %if.then14
	movl	Bframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Bframe_ctr
	jmp	.LBB87_9
.LBB87_5:                               # %if.else
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_7
# %bb.6:                                # %if.then17
	movl	Iframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Iframe_ctr
	jmp	.LBB87_8
.LBB87_7:                               # %if.else19
	movl	Pframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Pframe_ctr
.LBB87_8:                               # %if.end21
	jmp	.LBB87_9
.LBB87_9:                               # %if.end22
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB87_11
# %bb.10:                               # %if.then24
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	img, %rax
	movl	$1, 71800(%rax)
	jmp	.LBB87_38
.LBB87_11:                              # %if.else25
	movq	img, %rax
	movl	$0, 72600(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB87_13
# %bb.12:                               # %if.then28
	movl	$1, mb_adaptive
.LBB87_13:                              # %if.end29
	movq	img, %rax
	movl	$0, 72444(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB87_21
# %bb.14:                               # %if.then32
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB87_19
# %bb.15:                               # %land.lhs.true35
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB87_19
# %bb.16:                               # %land.lhs.true37
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB87_19
# %bb.17:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB87_19
# %bb.18:                               # %if.then42
	movq	input, %rax
	movl	3248(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	jmp	.LBB87_20
.LBB87_19:                              # %if.else44
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
.LBB87_20:                              # %if.end47
	movl	$1, %edi
	xorl	%esi, %esi
	movl	$1, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -92(%rbp)
	movl	$0, QP
.LBB87_21:                              # %if.end50
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB87_23
# %bb.22:                               # %if.then52
	movq	img, %rax
	movl	$0, 72596(%rax)
.LBB87_23:                              # %if.end53
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB87_25
# %bb.24:                               # %if.then55
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB87_25:                              # %if.end56
	movq	frame_pic, %rdi
	xorl	%esi, %esi
	callq	frame_picture
	movq	input, %rax
	cmpl	$0, 1300(%rax)
	jne	.LBB87_27
# %bb.26:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB87_29
.LBB87_27:                              # %land.lhs.true60
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB87_29
# %bb.28:                               # %if.then62
	callq	rdPictureCoding
.LBB87_29:                              # %if.end63
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB87_31
# %bb.30:                               # %if.then66
	movl	$0, mb_adaptive
.LBB87_31:                              # %if.end67
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB87_36
# %bb.32:                               # %if.then70
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	img, %rax
	movl	$0, 72628(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	top_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	top_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	top_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -56(%rbp)
	movq	frame_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	frame_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	frame_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -28(%rbp)
	movq	frame_pic, %rdi
	movq	top_pic, %rsi
	movq	bottom_pic, %rdx
	callq	picture_structure_decision
	movq	img, %rcx
	movl	%eax, 71800(%rcx)
	movq	img, %rax
	movl	71800(%rax), %edi
	callq	update_field_frame_contexts
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	jne	.LBB87_34
# %bb.33:                               # %if.then86
	movq	img, %rax
	movl	$1, 72604(%rax)
	jmp	.LBB87_35
.LBB87_34:                              # %if.else87
	movq	img, %rax
	movl	$0, 72604(%rax)
.LBB87_35:                              # %if.end89
	jmp	.LBB87_37
.LBB87_36:                              # %if.else90
	movq	img, %rax
	movl	$0, 71800(%rax)
.LBB87_37:                              # %if.end92
	jmp	.LBB87_38
.LBB87_38:                              # %if.end93
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB87_40
# %bb.39:                               # %if.then96
	movq	stats, %rax
	movl	1472(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	jmp	.LBB87_41
.LBB87_40:                              # %if.else98
	movq	stats, %rax
	movl	1468(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
.LBB87_41:                              # %if.end101
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB87_43
# %bb.42:                               # %if.then104
	movq	img, %rax
	movl	71800(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71872(%rcx)
.LBB87_43:                              # %if.end106
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB87_45
# %bb.44:                               # %if.then109
	movl	-32(%rbp), %edi
	vmovss	-52(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-24(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-60(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	field_mode_buffer
	movq	top_pic, %rdi
	callq	writeout_picture
	movq	bottom_pic, %rdi
	callq	writeout_picture
	jmp	.LBB87_54
.LBB87_45:                              # %if.else112
	movl	-48(%rbp), %edi
	vmovss	-40(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-64(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-68(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	frame_mode_buffer
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB87_48
# %bb.46:                               # %land.lhs.true115
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB87_48
# %bb.47:                               # %if.then118
	movq	frame_pic3, %rdi
	callq	writeout_picture
	jmp	.LBB87_53
.LBB87_48:                              # %if.else120
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB87_51
# %bb.49:                               # %land.lhs.true123
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB87_51
# %bb.50:                               # %if.then126
	movq	frame_pic2, %rdi
	callq	writeout_picture
	jmp	.LBB87_52
.LBB87_51:                              # %if.else128
	movq	frame_pic, %rdi
	callq	writeout_picture
.LBB87_52:                              # %if.end130
	jmp	.LBB87_53
.LBB87_53:                              # %if.end131
	jmp	.LBB87_54
.LBB87_54:                              # %if.end132
	cmpq	$0, frame_pic3
	je	.LBB87_56
# %bb.55:                               # %if.then134
	movq	frame_pic3, %rdi
	callq	free_slice_list
.LBB87_56:                              # %if.end135
	cmpq	$0, frame_pic2
	je	.LBB87_58
# %bb.57:                               # %if.then137
	movq	frame_pic2, %rdi
	callq	free_slice_list
.LBB87_58:                              # %if.end138
	cmpq	$0, frame_pic
	je	.LBB87_60
# %bb.59:                               # %if.then140
	movq	frame_pic, %rdi
	callq	free_slice_list
.LBB87_60:                              # %if.end141
	cmpq	$0, top_pic
	je	.LBB87_62
# %bb.61:                               # %if.then143
	movq	top_pic, %rdi
	callq	free_slice_list
.LBB87_62:                              # %if.end144
	cmpq	$0, bottom_pic
	je	.LBB87_64
# %bb.63:                               # %if.then146
	movq	bottom_pic, %rdi
	callq	free_slice_list
.LBB87_64:                              # %if.end147
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB87_66
# %bb.65:                               # %if.then150
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %edi
	callq	rc_update_pict_frame
.LBB87_66:                              # %if.end151
	callq	find_snr
	leaq	-88(%rbp), %rdi
	callq	time
	leaq	-112(%rbp), %rdi
	callq	ftime
	imulq	$1000, -88(%rbp), %rax  # imm = 0x3E8
	movzwl	-104(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -80(%rbp), %rcx  # imm = 0x3E8
	movzwl	-120(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -12(%rbp)
	movl	tot_time, %eax
	addl	-12(%rbp), %eax
	movl	%eax, tot_time
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB87_71
# %bb.67:                               # %if.then166
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB87_69
# %bb.68:                               # %if.then169
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	jmp	.LBB87_70
.LBB87_69:                              # %if.else170
	movq	enc_frame_picture, %rdi
	callq	replace_top_pic_with_frame
	movq	enc_bottom_picture, %rdi
	callq	free_storable_picture
.LBB87_70:                              # %if.end171
	jmp	.LBB87_81
.LBB87_71:                              # %if.else172
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB87_73
# %bb.72:                               # %if.then175
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	jmp	.LBB87_80
.LBB87_73:                              # %if.else176
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB87_75
# %bb.74:                               # %if.then180
	movq	enc_frame_picture3, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	jmp	.LBB87_79
.LBB87_75:                              # %if.else181
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB87_77
# %bb.76:                               # %if.then185
	movq	enc_frame_picture2, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
	jmp	.LBB87_78
.LBB87_77:                              # %if.else186
	movq	enc_frame_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
.LBB87_78:                              # %if.end187
	jmp	.LBB87_79
.LBB87_79:                              # %if.end188
	jmp	.LBB87_80
.LBB87_80:                              # %if.end189
	jmp	.LBB87_81
.LBB87_81:                              # %if.end190
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	cltq
	movq	total_frame_buffer, %rcx
	movq	%rax, Bit_Buffer(,%rcx,8)
	movq	total_frame_buffer, %rax
	addq	$1, %rax
	movq	%rax, total_frame_buffer
	movq	img, %rax
	cmpl	$2, 72404(%rax)
	jne	.LBB87_89
# %bb.82:                               # %if.then198
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB87_84
# %bb.83:                               # %if.then200
	movl	encode_one_frame.consecutive_non_reference_pictures, %eax
	addl	$1, %eax
	movl	%eax, encode_one_frame.consecutive_non_reference_pictures
	jmp	.LBB87_85
.LBB87_84:                              # %if.else202
	movl	$0, encode_one_frame.consecutive_non_reference_pictures
.LBB87_85:                              # %if.end203
	movl	frame_no, %eax
	cmpl	encode_one_frame.prev_frame_no, %eax
	jl	.LBB87_87
# %bb.86:                               # %lor.lhs.false206
	cmpl	$1, encode_one_frame.consecutive_non_reference_pictures
	jle	.LBB87_88
.LBB87_87:                              # %if.then209
	movabsq	$.L.str, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB87_88:                              # %if.end210
	movl	frame_no, %eax
	movl	%eax, encode_one_frame.prev_frame_no
.LBB87_89:                              # %if.end211
	movq	stats, %rax
	cmpl	$0, 1492(%rax)
	je	.LBB87_91
# %bb.90:                               # %if.then215
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportNALNonVLCBits
.LBB87_91:                              # %if.end216
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB87_93
# %bb.92:                               # %if.then221
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportFirstframe
	jmp	.LBB87_110
.LBB87_93:                              # %if.else222
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB87_99
# %bb.94:                               # %if.then225
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB87_97
# %bb.95:                               # %land.lhs.true228
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB87_97
# %bb.96:                               # %if.then231
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_98
.LBB87_97:                              # %if.else235
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Pprev_bits, %eax
	movl	%eax, -16(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Pprev_bits
.LBB87_98:                              # %if.end239
	jmp	.LBB87_99
.LBB87_99:                              # %if.end240
	movq	img(%rip), %rax
	movl	24(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB87_104
	jmp	.LBB87_100
.LBB87_100:                             # %if.end240
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB87_102
	jmp	.LBB87_101
.LBB87_101:                             # %if.end240
	subl	$3, %eax
	je	.LBB87_103
	jmp	.LBB87_108
.LBB87_102:                             # %sw.bb
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	704(%rcx), %eax
	movl	%eax, 704(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportIntra
	jmp	.LBB87_109
.LBB87_103:                             # %sw.bb246
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportSP
	jmp	.LBB87_109
.LBB87_104:                             # %sw.bb251
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	712(%rcx), %eax
	movl	%eax, 712(%rcx)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB87_106
# %bb.105:                              # %if.then259
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportRB
	jmp	.LBB87_107
.LBB87_106:                             # %if.else260
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportB
.LBB87_107:                             # %if.end261
	jmp	.LBB87_109
.LBB87_108:                             # %sw.default
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportP
.LBB87_109:                             # %sw.epilog
	jmp	.LBB87_110
.LBB87_110:                             # %if.end267
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 20(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB87_120
# %bb.111:                              # %if.then272
	movl	-16(%rbp), %edi
	callq	rc_update_pict
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB87_114
# %bb.112:                              # %land.lhs.true276
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB87_114
# %bb.113:                              # %if.then279
	movb	$0, %al
	callq	updateRCModel
	jmp	.LBB87_119
.LBB87_114:                             # %if.else280
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB87_118
# %bb.115:                              # %land.lhs.true284
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB87_118
# %bb.116:                              # %land.lhs.true287
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB87_118
# %bb.117:                              # %if.then291
	movb	$0, %al
	callq	updateRCModel
.LBB87_118:                             # %if.end292
	jmp	.LBB87_119
.LBB87_119:                             # %if.end293
	jmp	.LBB87_120
.LBB87_120:                             # %if.end294
	movq	stats, %rax
	movl	$0, 1492(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB87_122
# %bb.121:                              # %if.then300
	movl	$0, -20(%rbp)
	jmp	.LBB87_123
.LBB87_122:                             # %if.else301
	movl	$1, -20(%rbp)
.LBB87_123:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1024594010, -44(%rbp)  # imm = 0x3D12105A
	jne	.LBB87_125
.LBB87_124:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_125:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_124
.Lfunc_end87:
	.size	encode_one_frame.51, .Lfunc_end87-encode_one_frame.51
	.cfi_endproc
                                        # -- End function
	.globl	UnifiedOneForthPix.52   # -- Begin function UnifiedOneForthPix.52
	.p2align	4, 0x90
	.type	UnifiedOneForthPix.52,@function
UnifiedOneForthPix.52:                  # @UnifiedOneForthPix.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$967114198, -108(%rbp)  # imm = 0x39A4FDD6
	movq	%rdi, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	6424(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-64(%rbp), %rax
	cmpq	$0, 6448(%rax)
	jne	.LBB88_2
# %bb.1:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpq	$0, 6432(%rax)
	je	.LBB88_3
.LBB88_2:                               # %if.then
	jmp	.LBB88_266
.LBB88_3:                               # %if.end
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6432(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6432(%rax), %rcx
	jne	.LBB88_5
# %bb.4:                                # %if.then9
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB88_5:                               # %if.end10
	movq	-64(%rbp), %rdi
	addq	$6448, %rdi             # imm = 0x1930
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB88_8
# %bb.6:                                # %lor.lhs.false19
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB88_8
# %bb.7:                                # %lor.lhs.false21
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB88_11
.LBB88_8:                               # %if.then23
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6440(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6440(%rax), %rcx
	jne	.LBB88_10
# %bb.9:                                # %if.then33
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB88_10:                              # %if.end34
	movq	-64(%rbp), %rdi
	addq	$6456, %rdi             # imm = 0x1938
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
.LBB88_11:                              # %if.end42
	movq	-64(%rbp), %rax
	movq	6448(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-64(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$-4, -48(%rbp)
.LBB88_12:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_14 Depth 2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_91
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB88_12 Depth=1
	movl	$-4, -44(%rbp)
.LBB88_14:                              # %for.cond49
                                        #   Parent Loop BB88_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_89
# %bb.15:                               # %for.body54
                                        #   in Loop: Header=BB88_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB88_17
# %bb.16:                               # %cond.true
                                        #   in Loop: Header=BB88_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB88_18
.LBB88_17:                              # %cond.false
                                        #   in Loop: Header=BB88_14 Depth=2
	movl	-48(%rbp), %eax
.LBB88_18:                              # %cond.end
                                        #   in Loop: Header=BB88_14 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB88_20
# %bb.19:                               # %cond.true62
                                        #   in Loop: Header=BB88_14 Depth=2
	xorl	%eax, %eax
	jmp	.LBB88_24
.LBB88_20:                              # %cond.false63
                                        #   in Loop: Header=BB88_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB88_22
# %bb.21:                               # %cond.true68
                                        #   in Loop: Header=BB88_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB88_23
.LBB88_22:                              # %cond.false71
                                        #   in Loop: Header=BB88_14 Depth=2
	movl	-48(%rbp), %eax
.LBB88_23:                              # %cond.end72
                                        #   in Loop: Header=BB88_14 Depth=2
.LBB88_24:                              # %cond.end74
                                        #   in Loop: Header=BB88_14 Depth=2
	movl	%eax, -84(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	-104(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB88_26
# %bb.25:                               # %cond.true80
                                        #   in Loop: Header=BB88_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB88_27
.LBB88_26:                              # %cond.false83
                                        #   in Loop: Header=BB88_14 Depth=2
	movl	-44(%rbp), %edx
.LBB88_27:                              # %cond.end84
                                        #   in Loop: Header=BB88_14 Depth=2
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB88_29
# %bb.28:                               # %cond.true88
                                        #   in Loop: Header=BB88_14 Depth=2
	xorl	%edx, %edx
	jmp	.LBB88_33
.LBB88_29:                              # %cond.false89
                                        #   in Loop: Header=BB88_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB88_31
# %bb.30:                               # %cond.true94
                                        #   in Loop: Header=BB88_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB88_32
.LBB88_31:                              # %cond.false97
                                        #   in Loop: Header=BB88_14 Depth=2
	movl	-44(%rbp), %edx
.LBB88_32:                              # %cond.end98
                                        #   in Loop: Header=BB88_14 Depth=2
.LBB88_33:                              # %cond.end100
                                        #   in Loop: Header=BB88_14 Depth=2
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB88_35
# %bb.34:                               # %cond.true112
                                        #   in Loop: Header=BB88_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB88_36
.LBB88_35:                              # %cond.false115
                                        #   in Loop: Header=BB88_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB88_36:                              # %cond.end117
                                        #   in Loop: Header=BB88_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB88_38
# %bb.37:                               # %cond.true121
                                        #   in Loop: Header=BB88_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB88_42
.LBB88_38:                              # %cond.false122
                                        #   in Loop: Header=BB88_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB88_40
# %bb.39:                               # %cond.true128
                                        #   in Loop: Header=BB88_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB88_41
.LBB88_40:                              # %cond.false131
                                        #   in Loop: Header=BB88_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB88_41:                              # %cond.end133
                                        #   in Loop: Header=BB88_14 Depth=2
.LBB88_42:                              # %cond.end135
                                        #   in Loop: Header=BB88_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB88_44
# %bb.43:                               # %cond.true149
                                        #   in Loop: Header=BB88_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB88_45
.LBB88_44:                              # %cond.false152
                                        #   in Loop: Header=BB88_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB88_45:                              # %cond.end154
                                        #   in Loop: Header=BB88_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB88_47
# %bb.46:                               # %cond.true158
                                        #   in Loop: Header=BB88_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB88_51
.LBB88_47:                              # %cond.false159
                                        #   in Loop: Header=BB88_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB88_49
# %bb.48:                               # %cond.true165
                                        #   in Loop: Header=BB88_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB88_50
.LBB88_49:                              # %cond.false168
                                        #   in Loop: Header=BB88_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB88_50:                              # %cond.end170
                                        #   in Loop: Header=BB88_14 Depth=2
.LBB88_51:                              # %cond.end172
                                        #   in Loop: Header=BB88_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB88_53
# %bb.52:                               # %cond.true184
                                        #   in Loop: Header=BB88_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB88_54
.LBB88_53:                              # %cond.false187
                                        #   in Loop: Header=BB88_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB88_54:                              # %cond.end189
                                        #   in Loop: Header=BB88_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB88_56
# %bb.55:                               # %cond.true193
                                        #   in Loop: Header=BB88_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB88_60
.LBB88_56:                              # %cond.false194
                                        #   in Loop: Header=BB88_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB88_58
# %bb.57:                               # %cond.true200
                                        #   in Loop: Header=BB88_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB88_59
.LBB88_58:                              # %cond.false203
                                        #   in Loop: Header=BB88_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB88_59:                              # %cond.end205
                                        #   in Loop: Header=BB88_14 Depth=2
.LBB88_60:                              # %cond.end207
                                        #   in Loop: Header=BB88_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB88_62
# %bb.61:                               # %cond.true222
                                        #   in Loop: Header=BB88_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB88_63
.LBB88_62:                              # %cond.false225
                                        #   in Loop: Header=BB88_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB88_63:                              # %cond.end227
                                        #   in Loop: Header=BB88_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB88_65
# %bb.64:                               # %cond.true231
                                        #   in Loop: Header=BB88_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB88_69
.LBB88_65:                              # %cond.false232
                                        #   in Loop: Header=BB88_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB88_67
# %bb.66:                               # %cond.true238
                                        #   in Loop: Header=BB88_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB88_68
.LBB88_67:                              # %cond.false241
                                        #   in Loop: Header=BB88_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB88_68:                              # %cond.end243
                                        #   in Loop: Header=BB88_14 Depth=2
.LBB88_69:                              # %cond.end245
                                        #   in Loop: Header=BB88_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB88_71
# %bb.70:                               # %cond.true257
                                        #   in Loop: Header=BB88_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB88_72
.LBB88_71:                              # %cond.false260
                                        #   in Loop: Header=BB88_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB88_72:                              # %cond.end262
                                        #   in Loop: Header=BB88_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB88_74
# %bb.73:                               # %cond.true266
                                        #   in Loop: Header=BB88_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB88_78
.LBB88_74:                              # %cond.false267
                                        #   in Loop: Header=BB88_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB88_76
# %bb.75:                               # %cond.true273
                                        #   in Loop: Header=BB88_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB88_77
.LBB88_76:                              # %cond.false276
                                        #   in Loop: Header=BB88_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB88_77:                              # %cond.end278
                                        #   in Loop: Header=BB88_14 Depth=2
.LBB88_78:                              # %cond.end280
                                        #   in Loop: Header=BB88_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	%eax, -88(%rbp)
	movq	-104(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB88_80
# %bb.79:                               # %cond.true294
                                        #   in Loop: Header=BB88_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB88_81
.LBB88_80:                              # %cond.false297
                                        #   in Loop: Header=BB88_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB88_81:                              # %cond.end298
                                        #   in Loop: Header=BB88_14 Depth=2
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB88_83
# %bb.82:                               # %cond.true302
                                        #   in Loop: Header=BB88_14 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB88_87
.LBB88_83:                              # %cond.false303
                                        #   in Loop: Header=BB88_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB88_85
# %bb.84:                               # %cond.true308
                                        #   in Loop: Header=BB88_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB88_86
.LBB88_85:                              # %cond.false311
                                        #   in Loop: Header=BB88_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB88_86:                              # %cond.end312
                                        #   in Loop: Header=BB88_14 Depth=2
.LBB88_87:                              # %cond.end314
                                        #   in Loop: Header=BB88_14 Depth=2
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	shll	$10, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-88(%rbp), %eax
	shll	$5, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.88:                               # %for.inc
                                        #   in Loop: Header=BB88_14 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB88_14
.LBB88_89:                              # %for.end
                                        #   in Loop: Header=BB88_12 Depth=1
	jmp	.LBB88_90
.LBB88_90:                              # %for.inc336
                                        #   in Loop: Header=BB88_12 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB88_12
.LBB88_91:                              # %for.end338
	movl	$0, -44(%rbp)
.LBB88_92:                              # %for.cond339
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_94 Depth 2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$8, %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_132
# %bb.93:                               # %for.body345
                                        #   in Loop: Header=BB88_92 Depth=1
	movl	$0, -48(%rbp)
.LBB88_94:                              # %for.cond346
                                        #   Parent Loop BB88_92 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_130
# %bb.95:                               # %for.body351
                                        #   in Loop: Header=BB88_94 Depth=2
	movl	-48(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -124(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	img4Y_tmp, %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	img4Y_tmp, %rdx
	movl	-92(%rbp), %esi
	movl	-48(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB88_97
# %bb.96:                               # %cond.true363
                                        #   in Loop: Header=BB88_94 Depth=2
	movl	-92(%rbp), %esi
	jmp	.LBB88_98
.LBB88_97:                              # %cond.false364
                                        #   in Loop: Header=BB88_94 Depth=2
	movl	-48(%rbp), %esi
	addl	$1, %esi
.LBB88_98:                              # %cond.end366
                                        #   in Loop: Header=BB88_94 Depth=2
	xorl	%edi, %edi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$1, %esi
	cmpl	%esi, %edi
	jle	.LBB88_100
# %bb.99:                               # %cond.true377
                                        #   in Loop: Header=BB88_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB88_101
.LBB88_100:                             # %cond.false378
                                        #   in Loop: Header=BB88_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$1, %esi
.LBB88_101:                             # %cond.end380
                                        #   in Loop: Header=BB88_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-92(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB88_103
# %bb.102:                              # %cond.true389
                                        #   in Loop: Header=BB88_94 Depth=2
	movl	-92(%rbp), %edi
	jmp	.LBB88_104
.LBB88_103:                             # %cond.false390
                                        #   in Loop: Header=BB88_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$2, %edi
.LBB88_104:                             # %cond.end392
                                        #   in Loop: Header=BB88_94 Depth=2
	xorl	%ebx, %ebx
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$2, %esi
	cmpl	%esi, %ebx
	jle	.LBB88_106
# %bb.105:                              # %cond.true404
                                        #   in Loop: Header=BB88_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB88_107
.LBB88_106:                             # %cond.false405
                                        #   in Loop: Header=BB88_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$2, %esi
.LBB88_107:                             # %cond.end407
                                        #   in Loop: Header=BB88_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-92(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB88_109
# %bb.108:                              # %cond.true416
                                        #   in Loop: Header=BB88_94 Depth=2
	movl	-92(%rbp), %edi
	jmp	.LBB88_110
.LBB88_109:                             # %cond.false417
                                        #   in Loop: Header=BB88_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$3, %edi
.LBB88_110:                             # %cond.end419
                                        #   in Loop: Header=BB88_94 Depth=2
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -88(%rbp)
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	movl	-44(%rbp), %r8d
	subl	$8, %r8d
	shll	$1, %r8d
	movq	img, %rax
	movl	72684(%rax), %ebx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
	cmpl	%eax, %ebx
	jge	.LBB88_112
# %bb.111:                              # %cond.true440
                                        #   in Loop: Header=BB88_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_113
.LBB88_112:                             # %cond.false442
                                        #   in Loop: Header=BB88_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB88_113:                             # %cond.end449
                                        #   in Loop: Header=BB88_94 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB88_115
# %bb.114:                              # %cond.true453
                                        #   in Loop: Header=BB88_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB88_119
.LBB88_115:                             # %cond.false454
                                        #   in Loop: Header=BB88_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %ecx
	jge	.LBB88_117
# %bb.116:                              # %cond.true464
                                        #   in Loop: Header=BB88_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_118
.LBB88_117:                             # %cond.false466
                                        #   in Loop: Header=BB88_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB88_118:                             # %cond.end473
                                        #   in Loop: Header=BB88_94 Depth=2
.LBB88_119:                             # %cond.end475
                                        #   in Loop: Header=BB88_94 Depth=2
	movl	%r8d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	addl	$2, %esi
	movl	-44(%rbp), %ecx
	subl	$8, %ecx
	shll	$1, %ecx
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB88_121
# %bb.120:                              # %cond.true488
                                        #   in Loop: Header=BB88_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_122
.LBB88_121:                             # %cond.false490
                                        #   in Loop: Header=BB88_94 Depth=2
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB88_122:                             # %cond.end493
                                        #   in Loop: Header=BB88_94 Depth=2
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB88_124
# %bb.123:                              # %cond.true497
                                        #   in Loop: Header=BB88_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB88_128
.LBB88_124:                             # %cond.false498
                                        #   in Loop: Header=BB88_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB88_126
# %bb.125:                              # %cond.true504
                                        #   in Loop: Header=BB88_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_127
.LBB88_126:                             # %cond.false506
                                        #   in Loop: Header=BB88_94 Depth=2
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB88_127:                             # %cond.end509
                                        #   in Loop: Header=BB88_94 Depth=2
.LBB88_128:                             # %cond.end511
                                        #   in Loop: Header=BB88_94 Depth=2
	movl	%ecx, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.129:                              # %for.inc514
                                        #   in Loop: Header=BB88_94 Depth=2
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB88_94
.LBB88_130:                             # %for.end516
                                        #   in Loop: Header=BB88_92 Depth=1
	jmp	.LBB88_131
.LBB88_131:                             # %for.inc517
                                        #   in Loop: Header=BB88_92 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB88_92
.LBB88_132:                             # %for.end519
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -72(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -48(%rbp)
.LBB88_133:                             # %for.cond528
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_135 Depth 2
	movl	-48(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_161
# %bb.134:                              # %for.body532
                                        #   in Loop: Header=BB88_133 Depth=1
	movl	$0, -44(%rbp)
.LBB88_135:                             # %for.cond533
                                        #   Parent Loop BB88_133 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_159
# %bb.136:                              # %for.body537
                                        #   in Loop: Header=BB88_135 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r15d
	subl	$16, %r15d
	movl	-44(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_138
# %bb.137:                              # %cond.true551
                                        #   in Loop: Header=BB88_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB88_139
.LBB88_138:                             # %cond.false553
                                        #   in Loop: Header=BB88_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB88_139:                             # %cond.end555
                                        #   in Loop: Header=BB88_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB88_141
# %bb.140:                              # %cond.true565
                                        #   in Loop: Header=BB88_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_145
.LBB88_141:                             # %cond.false567
                                        #   in Loop: Header=BB88_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_143
# %bb.142:                              # %cond.true577
                                        #   in Loop: Header=BB88_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB88_144
.LBB88_143:                             # %cond.false579
                                        #   in Loop: Header=BB88_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB88_144:                             # %cond.end581
                                        #   in Loop: Header=BB88_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB88_145:                             # %cond.end589
                                        #   in Loop: Header=BB88_135 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB88_147
# %bb.146:                              # %cond.true593
                                        #   in Loop: Header=BB88_135 Depth=2
	xorl	%eax, %eax
	jmp	.LBB88_157
.LBB88_147:                             # %cond.false594
                                        #   in Loop: Header=BB88_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_149
# %bb.148:                              # %cond.true605
                                        #   in Loop: Header=BB88_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB88_150
.LBB88_149:                             # %cond.false607
                                        #   in Loop: Header=BB88_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB88_150:                             # %cond.end609
                                        #   in Loop: Header=BB88_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB88_152
# %bb.151:                              # %cond.true619
                                        #   in Loop: Header=BB88_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_156
.LBB88_152:                             # %cond.false621
                                        #   in Loop: Header=BB88_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_154
# %bb.153:                              # %cond.true631
                                        #   in Loop: Header=BB88_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB88_155
.LBB88_154:                             # %cond.false633
                                        #   in Loop: Header=BB88_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB88_155:                             # %cond.end635
                                        #   in Loop: Header=BB88_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB88_156:                             # %cond.end643
                                        #   in Loop: Header=BB88_135 Depth=2
.LBB88_157:                             # %cond.end645
                                        #   in Loop: Header=BB88_135 Depth=2
	movq	%r14, %rdi
	movl	%r15d, %esi
	movl	%r12d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.158:                              # %for.inc648
                                        #   in Loop: Header=BB88_135 Depth=2
	movl	-44(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB88_135
.LBB88_159:                             # %for.end650
                                        #   in Loop: Header=BB88_133 Depth=1
	jmp	.LBB88_160
.LBB88_160:                             # %for.inc651
                                        #   in Loop: Header=BB88_133 Depth=1
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB88_133
.LBB88_161:                             # %for.end653
	movl	$0, -44(%rbp)
.LBB88_162:                             # %for.cond654
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_164 Depth 2
	movl	-44(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_265
# %bb.163:                              # %for.body658
                                        #   in Loop: Header=BB88_162 Depth=1
	movl	$0, -48(%rbp)
.LBB88_164:                             # %for.cond659
                                        #   Parent Loop BB88_162 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_263
# %bb.165:                              # %for.body663
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB88_188
# %bb.166:                              # %if.then666
                                        #   in Loop: Header=BB88_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_168
# %bb.167:                              # %cond.true679
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB88_169
.LBB88_168:                             # %cond.false681
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB88_169:                             # %cond.end683
                                        #   in Loop: Header=BB88_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB88_171
# %bb.170:                              # %cond.true694
                                        #   in Loop: Header=BB88_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_175
.LBB88_171:                             # %cond.false696
                                        #   in Loop: Header=BB88_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_173
# %bb.172:                              # %cond.true705
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB88_174
.LBB88_173:                             # %cond.false707
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB88_174:                             # %cond.end709
                                        #   in Loop: Header=BB88_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB88_175:                             # %cond.end718
                                        #   in Loop: Header=BB88_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB88_177
# %bb.176:                              # %cond.true722
                                        #   in Loop: Header=BB88_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB88_187
.LBB88_177:                             # %cond.false723
                                        #   in Loop: Header=BB88_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_179
# %bb.178:                              # %cond.true733
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB88_180
.LBB88_179:                             # %cond.false735
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB88_180:                             # %cond.end737
                                        #   in Loop: Header=BB88_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB88_182
# %bb.181:                              # %cond.true748
                                        #   in Loop: Header=BB88_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_186
.LBB88_182:                             # %cond.false750
                                        #   in Loop: Header=BB88_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_184
# %bb.183:                              # %cond.true759
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB88_185
.LBB88_184:                             # %cond.false761
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB88_185:                             # %cond.end763
                                        #   in Loop: Header=BB88_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB88_186:                             # %cond.end772
                                        #   in Loop: Header=BB88_164 Depth=2
.LBB88_187:                             # %cond.end774
                                        #   in Loop: Header=BB88_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB88_261
.LBB88_188:                             # %if.else
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB88_190
# %bb.189:                              # %land.lhs.true
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	je	.LBB88_192
.LBB88_190:                             # %lor.lhs.false783
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$2, %edx
	jne	.LBB88_226
# %bb.191:                              # %land.lhs.true787
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$3, %edx
	jne	.LBB88_226
.LBB88_192:                             # %if.then791
                                        #   in Loop: Header=BB88_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_194
# %bb.193:                              # %cond.true801
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB88_195
.LBB88_194:                             # %cond.false803
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB88_195:                             # %cond.end805
                                        #   in Loop: Header=BB88_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_197
# %bb.196:                              # %cond.true814
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB88_198
.LBB88_197:                             # %cond.false816
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB88_198:                             # %cond.end818
                                        #   in Loop: Header=BB88_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB88_200
# %bb.199:                              # %cond.true830
                                        #   in Loop: Header=BB88_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_207
.LBB88_200:                             # %cond.false832
                                        #   in Loop: Header=BB88_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_202
# %bb.201:                              # %cond.true838
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB88_203
.LBB88_202:                             # %cond.false840
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB88_203:                             # %cond.end842
                                        #   in Loop: Header=BB88_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_205
# %bb.204:                              # %cond.true851
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB88_206
.LBB88_205:                             # %cond.false853
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB88_206:                             # %cond.end855
                                        #   in Loop: Header=BB88_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB88_207:                             # %cond.end865
                                        #   in Loop: Header=BB88_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB88_209
# %bb.208:                              # %cond.true869
                                        #   in Loop: Header=BB88_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB88_225
.LBB88_209:                             # %cond.false870
                                        #   in Loop: Header=BB88_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_211
# %bb.210:                              # %cond.true877
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB88_212
.LBB88_211:                             # %cond.false879
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB88_212:                             # %cond.end881
                                        #   in Loop: Header=BB88_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_214
# %bb.213:                              # %cond.true890
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB88_215
.LBB88_214:                             # %cond.false892
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB88_215:                             # %cond.end894
                                        #   in Loop: Header=BB88_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB88_217
# %bb.216:                              # %cond.true906
                                        #   in Loop: Header=BB88_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_224
.LBB88_217:                             # %cond.false908
                                        #   in Loop: Header=BB88_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_219
# %bb.218:                              # %cond.true914
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB88_220
.LBB88_219:                             # %cond.false916
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB88_220:                             # %cond.end918
                                        #   in Loop: Header=BB88_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_222
# %bb.221:                              # %cond.true927
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB88_223
.LBB88_222:                             # %cond.false929
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB88_223:                             # %cond.end931
                                        #   in Loop: Header=BB88_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB88_224:                             # %cond.end941
                                        #   in Loop: Header=BB88_164 Depth=2
.LBB88_225:                             # %cond.end943
                                        #   in Loop: Header=BB88_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB88_260
.LBB88_226:                             # %if.else946
                                        #   in Loop: Header=BB88_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_228
# %bb.227:                              # %cond.true960
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB88_229
.LBB88_228:                             # %cond.false962
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB88_229:                             # %cond.end964
                                        #   in Loop: Header=BB88_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_231
# %bb.230:                              # %cond.true971
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB88_232
.LBB88_231:                             # %cond.false973
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB88_232:                             # %cond.end975
                                        #   in Loop: Header=BB88_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB88_234
# %bb.233:                              # %cond.true985
                                        #   in Loop: Header=BB88_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_241
.LBB88_234:                             # %cond.false987
                                        #   in Loop: Header=BB88_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_236
# %bb.235:                              # %cond.true997
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB88_237
.LBB88_236:                             # %cond.false999
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB88_237:                             # %cond.end1001
                                        #   in Loop: Header=BB88_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_239
# %bb.238:                              # %cond.true1008
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB88_240
.LBB88_239:                             # %cond.false1010
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB88_240:                             # %cond.end1012
                                        #   in Loop: Header=BB88_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB88_241:                             # %cond.end1020
                                        #   in Loop: Header=BB88_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB88_243
# %bb.242:                              # %cond.true1024
                                        #   in Loop: Header=BB88_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB88_259
.LBB88_243:                             # %cond.false1025
                                        #   in Loop: Header=BB88_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_245
# %bb.244:                              # %cond.true1036
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB88_246
.LBB88_245:                             # %cond.false1038
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB88_246:                             # %cond.end1040
                                        #   in Loop: Header=BB88_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_248
# %bb.247:                              # %cond.true1047
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB88_249
.LBB88_248:                             # %cond.false1049
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB88_249:                             # %cond.end1051
                                        #   in Loop: Header=BB88_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB88_251
# %bb.250:                              # %cond.true1061
                                        #   in Loop: Header=BB88_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_258
.LBB88_251:                             # %cond.false1063
                                        #   in Loop: Header=BB88_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_253
# %bb.252:                              # %cond.true1073
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB88_254
.LBB88_253:                             # %cond.false1075
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB88_254:                             # %cond.end1077
                                        #   in Loop: Header=BB88_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_256
# %bb.255:                              # %cond.true1084
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB88_257
.LBB88_256:                             # %cond.false1086
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB88_257:                             # %cond.end1088
                                        #   in Loop: Header=BB88_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB88_258:                             # %cond.end1096
                                        #   in Loop: Header=BB88_164 Depth=2
.LBB88_259:                             # %cond.end1098
                                        #   in Loop: Header=BB88_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
.LBB88_260:                             # %if.end1101
                                        #   in Loop: Header=BB88_164 Depth=2
	jmp	.LBB88_261
.LBB88_261:                             # %if.end1102
                                        #   in Loop: Header=BB88_164 Depth=2
	jmp	.LBB88_262
.LBB88_262:                             # %for.inc1103
                                        #   in Loop: Header=BB88_164 Depth=2
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB88_164
.LBB88_263:                             # %for.end1105
                                        #   in Loop: Header=BB88_162 Depth=1
	jmp	.LBB88_264
.LBB88_264:                             # %for.inc1106
                                        #   in Loop: Header=BB88_162 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB88_162
.LBB88_265:                             # %for.end1108
	movq	-80(%rbp), %rdi
	movq	-120(%rbp), %rsi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	movq	-64(%rbp), %rax
	movl	6396(%rax), %ecx
	callq	GenerateFullPelRepresentation
.LBB88_266:                             # %return
	cmpl	$967114198, -108(%rbp)  # imm = 0x39A4FDD6
	jne	.LBB88_268
.LBB88_267:
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_268:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_267
.Lfunc_end88:
	.size	UnifiedOneForthPix.52, .Lfunc_end88-UnifiedOneForthPix.52
	.cfi_endproc
                                        # -- End function
	.globl	MbAffPostProc.53        # -- Begin function MbAffPostProc.53
	.p2align	4, 0x90
	.type	MbAffPostProc.53,@function
MbAffPostProc.53:                       # @MbAffPostProc.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1072, %rsp             # imm = 0x430
	movl	$619506878, -44(%rbp)   # imm = 0x24ECECBE
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB89_44
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB89_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_5 Depth 2
                                        #       Child Loop BB89_7 Depth 3
                                        #     Child Loop BB89_13 Depth 2
                                        #       Child Loop BB89_15 Depth 3
                                        #     Child Loop BB89_21 Depth 2
                                        #       Child Loop BB89_23 Depth 3
                                        #         Child Loop BB89_25 Depth 4
                                        #       Child Loop BB89_31 Depth 3
                                        #         Child Loop BB89_33 Depth 4
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB89_43
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB89_2 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB89_41
# %bb.4:                                # %if.then4
                                        #   in Loop: Header=BB89_2 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	leaq	-12(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -8(%rbp)
.LBB89_5:                               # %for.cond5
                                        #   Parent Loop BB89_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB89_7 Depth 3
	cmpl	$32, -8(%rbp)
	jge	.LBB89_12
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB89_5 Depth=2
	movl	$0, -4(%rbp)
.LBB89_7:                               # %for.cond8
                                        #   Parent Loop BB89_2 Depth=1
                                        #     Parent Loop BB89_5 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB89_10
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB89_7 Depth=3
	movq	-32(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB89_7 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_7
.LBB89_10:                              # %for.end
                                        #   in Loop: Header=BB89_5 Depth=2
	jmp	.LBB89_11
.LBB89_11:                              # %for.inc20
                                        #   in Loop: Header=BB89_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_5
.LBB89_12:                              # %for.end22
                                        #   in Loop: Header=BB89_2 Depth=1
	movl	$0, -8(%rbp)
.LBB89_13:                              # %for.cond23
                                        #   Parent Loop BB89_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB89_15 Depth 3
	cmpl	$16, -8(%rbp)
	jge	.LBB89_20
# %bb.14:                               # %for.body25
                                        #   in Loop: Header=BB89_13 Depth=2
	movl	$0, -4(%rbp)
.LBB89_15:                              # %for.cond26
                                        #   Parent Loop BB89_2 Depth=1
                                        #     Parent Loop BB89_13 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB89_18
# %bb.16:                               # %for.body28
                                        #   in Loop: Header=BB89_15 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-12(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-12(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.17:                               # %for.inc52
                                        #   in Loop: Header=BB89_15 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_15
.LBB89_18:                              # %for.end54
                                        #   in Loop: Header=BB89_13 Depth=2
	jmp	.LBB89_19
.LBB89_19:                              # %for.inc55
                                        #   in Loop: Header=BB89_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_13
.LBB89_20:                              # %for.end57
                                        #   in Loop: Header=BB89_2 Depth=1
	movl	-16(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72708(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -16(%rbp)
	movl	-12(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72712(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -12(%rbp)
	movl	$0, -24(%rbp)
.LBB89_21:                              # %for.cond61
                                        #   Parent Loop BB89_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB89_23 Depth 3
                                        #         Child Loop BB89_25 Depth 4
                                        #       Child Loop BB89_31 Depth 3
                                        #         Child Loop BB89_33 Depth 4
	cmpl	$2, -24(%rbp)
	jge	.LBB89_40
# %bb.22:                               # %for.body63
                                        #   in Loop: Header=BB89_21 Depth=2
	movl	$0, -8(%rbp)
.LBB89_23:                              # %for.cond64
                                        #   Parent Loop BB89_2 Depth=1
                                        #     Parent Loop BB89_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB89_25 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_30
# %bb.24:                               # %for.body68
                                        #   in Loop: Header=BB89_23 Depth=3
	movl	$0, -4(%rbp)
.LBB89_25:                              # %for.cond69
                                        #   Parent Loop BB89_2 Depth=1
                                        #     Parent Loop BB89_21 Depth=2
                                        #       Parent Loop BB89_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB89_28
# %bb.26:                               # %for.body72
                                        #   in Loop: Header=BB89_25 Depth=4
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.27:                               # %for.inc85
                                        #   in Loop: Header=BB89_25 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_25
.LBB89_28:                              # %for.end87
                                        #   in Loop: Header=BB89_23 Depth=3
	jmp	.LBB89_29
.LBB89_29:                              # %for.inc88
                                        #   in Loop: Header=BB89_23 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_23
.LBB89_30:                              # %for.end90
                                        #   in Loop: Header=BB89_21 Depth=2
	movl	$0, -8(%rbp)
.LBB89_31:                              # %for.cond91
                                        #   Parent Loop BB89_2 Depth=1
                                        #     Parent Loop BB89_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB89_33 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB89_38
# %bb.32:                               # %for.body94
                                        #   in Loop: Header=BB89_31 Depth=3
	movl	$0, -4(%rbp)
.LBB89_33:                              # %for.cond95
                                        #   Parent Loop BB89_2 Depth=1
                                        #     Parent Loop BB89_21 Depth=2
                                        #       Parent Loop BB89_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB89_36
# %bb.34:                               # %for.body98
                                        #   in Loop: Header=BB89_33 Depth=4
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-40(%rbp), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	movq	img, %rdx
	addl	72712(%rdx), %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-40(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.35:                               # %for.inc128
                                        #   in Loop: Header=BB89_33 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_33
.LBB89_36:                              # %for.end130
                                        #   in Loop: Header=BB89_31 Depth=3
	jmp	.LBB89_37
.LBB89_37:                              # %for.inc131
                                        #   in Loop: Header=BB89_31 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_31
.LBB89_38:                              # %for.end133
                                        #   in Loop: Header=BB89_21 Depth=2
	jmp	.LBB89_39
.LBB89_39:                              # %for.inc134
                                        #   in Loop: Header=BB89_21 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB89_21
.LBB89_40:                              # %for.end136
                                        #   in Loop: Header=BB89_2 Depth=1
	jmp	.LBB89_41
.LBB89_41:                              # %if.end
                                        #   in Loop: Header=BB89_2 Depth=1
	jmp	.LBB89_42
.LBB89_42:                              # %for.inc137
                                        #   in Loop: Header=BB89_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB89_2
.LBB89_43:                              # %for.end139
	jmp	.LBB89_67
.LBB89_44:                              # %if.else
	movl	$0, -20(%rbp)
.LBB89_45:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_48 Depth 2
                                        #       Child Loop BB89_50 Depth 3
                                        #     Child Loop BB89_56 Depth 2
                                        #       Child Loop BB89_58 Depth 3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB89_66
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB89_45 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB89_64
# %bb.47:                               # %if.then148
                                        #   in Loop: Header=BB89_45 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	leaq	-12(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -8(%rbp)
.LBB89_48:                              # %for.cond149
                                        #   Parent Loop BB89_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB89_50 Depth 3
	cmpl	$32, -8(%rbp)
	jge	.LBB89_55
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB89_48 Depth=2
	movl	$0, -4(%rbp)
.LBB89_50:                              # %for.cond152
                                        #   Parent Loop BB89_45 Depth=1
                                        #     Parent Loop BB89_48 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB89_53
# %bb.51:                               # %for.body154
                                        #   in Loop: Header=BB89_50 Depth=3
	movq	-32(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.52:                               # %for.inc165
                                        #   in Loop: Header=BB89_50 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_50
.LBB89_53:                              # %for.end167
                                        #   in Loop: Header=BB89_48 Depth=2
	jmp	.LBB89_54
.LBB89_54:                              # %for.inc168
                                        #   in Loop: Header=BB89_48 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_48
.LBB89_55:                              # %for.end170
                                        #   in Loop: Header=BB89_45 Depth=1
	movl	$0, -8(%rbp)
.LBB89_56:                              # %for.cond171
                                        #   Parent Loop BB89_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB89_58 Depth 3
	cmpl	$16, -8(%rbp)
	jge	.LBB89_63
# %bb.57:                               # %for.body173
                                        #   in Loop: Header=BB89_56 Depth=2
	movl	$0, -4(%rbp)
.LBB89_58:                              # %for.cond174
                                        #   Parent Loop BB89_45 Depth=1
                                        #     Parent Loop BB89_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB89_61
# %bb.59:                               # %for.body176
                                        #   in Loop: Header=BB89_58 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-12(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-12(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc201
                                        #   in Loop: Header=BB89_58 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_58
.LBB89_61:                              # %for.end203
                                        #   in Loop: Header=BB89_56 Depth=2
	jmp	.LBB89_62
.LBB89_62:                              # %for.inc204
                                        #   in Loop: Header=BB89_56 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_56
.LBB89_63:                              # %for.end206
                                        #   in Loop: Header=BB89_45 Depth=1
	jmp	.LBB89_64
.LBB89_64:                              # %if.end207
                                        #   in Loop: Header=BB89_45 Depth=1
	jmp	.LBB89_65
.LBB89_65:                              # %for.inc208
                                        #   in Loop: Header=BB89_45 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB89_45
.LBB89_66:                              # %for.end210
	jmp	.LBB89_67
.LBB89_67:                              # %if.end211
	cmpl	$619506878, -44(%rbp)   # imm = 0x24ECECBE
	jne	.LBB89_69
.LBB89_68:
	addq	$1072, %rsp             # imm = 0x430
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_69:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_68
.Lfunc_end89:
	.size	MbAffPostProc.53, .Lfunc_end89-MbAffPostProc.53
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_frame.54
.LCPI90_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_frame.54,@function
init_frame.54:                          # @init_frame.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$270721297, -16(%rbp)   # imm = 0x1022E111
	movq	last_P_no_frm, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movl	$0, -4(%rbp)
.LBB90_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %esi
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %edi
	idivl	%edi
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	idivl	%edi
	imull	%eax, %ecx
	cmpl	%ecx, %esi
	jge	.LBB90_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB90_1 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	$-1, 4(%rax)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB90_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_1
.LBB90_4:                               # %for.end
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB90_29
# %bb.5:                                # %if.then
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	input, %rdx
	movl	20(%rdx), %edx
	addl	$1, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	movl	71876(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71880(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71876(%rcx)
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB90_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB90_8
# %bb.7:                                # %if.then10
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB90_8:                               # %if.end
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	je	.LBB90_11
# %bb.9:                                # %land.lhs.true16
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB90_11
# %bb.10:                               # %if.then18
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_frm
.LBB90_11:                              # %if.end20
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB90_26
# %bb.12:                               # %if.then22
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB90_18
# %bb.13:                               # %if.then24
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB90_16
# %bb.14:                               # %land.lhs.true26
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB90_16
# %bb.15:                               # %if.then30
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB90_17
.LBB90_16:                              # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB90_17:                              # %if.end32
	jmp	.LBB90_25
.LBB90_18:                              # %if.else33
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB90_21
# %bb.19:                               # %land.lhs.true36
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB90_21
# %bb.20:                               # %if.then40
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB90_22
.LBB90_21:                              # %if.else42
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB90_22:                              # %if.end44
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB90_24
# %bb.23:                               # %if.then47
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB90_24:                              # %if.end50
	jmp	.LBB90_25
.LBB90_25:                              # %if.end51
	jmp	.LBB90_26
.LBB90_26:                              # %if.end52
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB90_28
# %bb.27:                               # %if.then54
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB90_28:                              # %if.end62
	jmp	.LBB90_72
.LBB90_29:                              # %if.else63
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	subl	$1, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	$1, -4(%rbp)
.LBB90_30:                              # %for.cond78
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jge	.LBB90_33
# %bb.31:                               # %for.body80
                                        #   in Loop: Header=BB90_30 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc88
                                        #   in Loop: Header=BB90_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_30
.LBB90_33:                              # %for.end90
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB90_36
# %bb.34:                               # %land.lhs.true93
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB90_36
# %bb.35:                               # %if.then98
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	-12(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB90_36:                              # %if.end102
	vmovsd	.LCPI90_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB90_38
# %bb.37:                               # %if.then111
	vmovsd	.LCPI90_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB90_38:                              # %if.end113
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB90_40
# %bb.39:                               # %if.then116
	movl	-12(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB90_41
.LBB90_40:                              # %if.else128
	movl	-12(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB90_41:                              # %if.end136
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-8(%rbp), %eax
	jl	.LBB90_43
# %bb.42:                               # %if.then140
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB90_43:                              # %if.end143
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB90_68
# %bb.44:                               # %land.lhs.true146
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB90_68
# %bb.45:                               # %if.then150
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB90_48
# %bb.46:                               # %land.lhs.true154
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB90_48
# %bb.47:                               # %if.then159
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB90_49
.LBB90_48:                              # %if.else161
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB90_49:                              # %if.end163
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB90_67
# %bb.50:                               # %if.then165
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB90_59
# %bb.51:                               # %land.lhs.true169
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB90_59
# %bb.52:                               # %if.then174
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB90_54
# %bb.53:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB90_58
.LBB90_54:                              # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB90_56
# %bb.55:                               # %cond.true184
	movl	$51, %eax
	jmp	.LBB90_57
.LBB90_56:                              # %cond.false185
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB90_57:                              # %cond.end
.LBB90_58:                              # %cond.end189
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB90_66
.LBB90_59:                              # %if.else192
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB90_61
# %bb.60:                               # %cond.true197
	xorl	%eax, %eax
	jmp	.LBB90_65
.LBB90_61:                              # %cond.false198
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB90_63
# %bb.62:                               # %cond.true204
	movl	$51, %eax
	jmp	.LBB90_64
.LBB90_63:                              # %cond.false205
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB90_64:                              # %cond.end209
.LBB90_65:                              # %cond.end211
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB90_66:                              # %if.end214
	jmp	.LBB90_67
.LBB90_67:                              # %if.end215
	jmp	.LBB90_71
.LBB90_68:                              # %if.else216
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB90_70
# %bb.69:                               # %if.then220
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB90_70:                              # %if.end226
	jmp	.LBB90_71
.LBB90_71:                              # %if.end227
	jmp	.LBB90_72
.LBB90_72:                              # %if.end228
	movq	img, %rax
	movl	72384(%rax), %edi
	callq	UpdateSubseqInfo
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	callq	UpdateSceneInformation
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	$0, 72504(%rax)
	movq	img, %rax
	movl	$0, 72508(%rax)
	callq	init_dec_ref_pic_marking_buffer
	cmpl	$270721297, -16(%rbp)   # imm = 0x1022E111
	jne	.LBB90_74
.LBB90_73:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_74:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_73
.Lfunc_end90:
	.size	init_frame.54, .Lfunc_end90-init_frame.54
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function field_mode_buffer.55
	.type	field_mode_buffer.55,@function
field_mode_buffer.55:                   # @field_mode_buffer.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2078074190, -16(%rbp)  # imm = 0x7BDCE54E
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -4(%rbp)
	vmovss	%xmm1, -8(%rbp)
	vmovss	%xmm2, -12(%rbp)
	callq	put_buffer_frame
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$2078074190, -16(%rbp)  # imm = 0x7BDCE54E
	jne	.LBB91_2
.LBB91_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_1
.Lfunc_end91:
	.size	field_mode_buffer.55, .Lfunc_end91-field_mode_buffer.55
	.cfi_endproc
                                        # -- End function
	.globl	code_a_picture.56       # -- Begin function code_a_picture.56
	.p2align	4, 0x90
	.type	code_a_picture.56,@function
code_a_picture.56:                      # @code_a_picture.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$657737745, -28(%rbp)   # imm = 0x27344811
	movq	%rdi, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
	movq	-24(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB92_2
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$2, 28(%rax)
	movb	$1, %al
	jne	.LBB92_8
.LBB92_2:                               # %lor.rhs
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 1228(%rcx)
	je	.LBB92_7
# %bb.3:                                # %land.lhs.true2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB92_6
# %bb.4:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB92_6
# %bb.5:                                # %lor.lhs.false6
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	jne	.LBB92_7
.LBB92_6:                               # %land.rhs
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	xorb	$-1, %al
.LBB92_7:                               # %land.end
.LBB92_8:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movq	14152(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 812(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 820(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 816(%rax)
	movb	$0, %al
	callq	RandomIntraNewPicture
	movq	img, %rax
	movl	$1, 72652(%rax)
	movq	img, %rdi
	movq	active_pps, %rsi
	movq	active_sps, %rdx
	callq	FmoInit
	movb	$0, %al
	callq	FmoStartPicture
	movb	$0, %al
	callq	CalculateQuantParam
	movb	$0, %al
	callq	CalculateOffsetParam
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB92_10
# %bb.9:                                # %if.then
	movb	$0, %al
	callq	CalculateQuant8Param
	movb	$0, %al
	callq	CalculateOffset8Param
.LBB92_10:                              # %if.end
	jmp	.LBB92_11
.LBB92_11:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_13 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB92_16
# %bb.12:                               # %while.body
                                        #   in Loop: Header=BB92_11 Depth=1
	jmp	.LBB92_13
.LBB92_13:                              # %while.cond15
                                        #   Parent Loop BB92_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %edi
	callq	FmoSliceGroupCompletelyCoded
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB92_14
	jmp	.LBB92_15
.LBB92_14:                              # %while.body19
                                        #   in Loop: Header=BB92_13 Depth=2
	movl	-4(%rbp), %edi
	movq	-24(%rbp), %rsi
	callq	encode_one_slice
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoSetLastMacroblockInSlice
	movq	img, %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	jmp	.LBB92_13
.LBB92_15:                              # %while.end
                                        #   in Loop: Header=BB92_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_11
.LBB92_16:                              # %while.end22
	movb	$0, %al
	callq	FmoEndPicture
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB92_23
# %bb.17:                               # %land.lhs.true25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB92_23
# %bb.18:                               # %if.then28
	movl	$0, -8(%rbp)
.LBB92_19:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB92_22
# %bb.20:                               # %for.body
                                        #   in Loop: Header=BB92_19 Depth=1
	movq	img, %rdi
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	xorl	%edx, %edx
	callq	DeblockFrame
# %bb.21:                               # %for.inc
                                        #   in Loop: Header=BB92_19 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_19
.LBB92_22:                              # %for.end
	jmp	.LBB92_23
.LBB92_23:                              # %if.end31
	movq	img, %rdi
	movq	enc_picture, %rax
	movq	6424(%rax), %rsi
	movq	enc_picture, %rax
	movq	6464(%rax), %rdx
	callq	DeblockFrame
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB92_25
# %bb.24:                               # %if.then33
	callq	MbAffPostProc
.LBB92_25:                              # %if.end34
	cmpl	$657737745, -28(%rbp)   # imm = 0x27344811
	jne	.LBB92_27
.LBB92_26:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB92_27:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB92_26
.Lfunc_end92:
	.size	code_a_picture.56, .Lfunc_end92-code_a_picture.56
	.cfi_endproc
                                        # -- End function
	.globl	MbAffPostProc.57        # -- Begin function MbAffPostProc.57
	.p2align	4, 0x90
	.type	MbAffPostProc.57,@function
MbAffPostProc.57:                       # @MbAffPostProc.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1072, %rsp             # imm = 0x430
	movl	$835067425, -44(%rbp)   # imm = 0x31C61E21
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB93_44
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB93_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_5 Depth 2
                                        #       Child Loop BB93_7 Depth 3
                                        #     Child Loop BB93_13 Depth 2
                                        #       Child Loop BB93_15 Depth 3
                                        #     Child Loop BB93_21 Depth 2
                                        #       Child Loop BB93_23 Depth 3
                                        #         Child Loop BB93_25 Depth 4
                                        #       Child Loop BB93_31 Depth 3
                                        #         Child Loop BB93_33 Depth 4
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB93_43
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB93_2 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB93_41
# %bb.4:                                # %if.then4
                                        #   in Loop: Header=BB93_2 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	leaq	-12(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -8(%rbp)
.LBB93_5:                               # %for.cond5
                                        #   Parent Loop BB93_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_7 Depth 3
	cmpl	$32, -8(%rbp)
	jge	.LBB93_12
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB93_5 Depth=2
	movl	$0, -4(%rbp)
.LBB93_7:                               # %for.cond8
                                        #   Parent Loop BB93_2 Depth=1
                                        #     Parent Loop BB93_5 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB93_10
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB93_7 Depth=3
	movq	-32(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB93_7 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_7
.LBB93_10:                              # %for.end
                                        #   in Loop: Header=BB93_5 Depth=2
	jmp	.LBB93_11
.LBB93_11:                              # %for.inc20
                                        #   in Loop: Header=BB93_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_5
.LBB93_12:                              # %for.end22
                                        #   in Loop: Header=BB93_2 Depth=1
	movl	$0, -8(%rbp)
.LBB93_13:                              # %for.cond23
                                        #   Parent Loop BB93_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_15 Depth 3
	cmpl	$16, -8(%rbp)
	jge	.LBB93_20
# %bb.14:                               # %for.body25
                                        #   in Loop: Header=BB93_13 Depth=2
	movl	$0, -4(%rbp)
.LBB93_15:                              # %for.cond26
                                        #   Parent Loop BB93_2 Depth=1
                                        #     Parent Loop BB93_13 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB93_18
# %bb.16:                               # %for.body28
                                        #   in Loop: Header=BB93_15 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-12(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-12(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.17:                               # %for.inc52
                                        #   in Loop: Header=BB93_15 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_15
.LBB93_18:                              # %for.end54
                                        #   in Loop: Header=BB93_13 Depth=2
	jmp	.LBB93_19
.LBB93_19:                              # %for.inc55
                                        #   in Loop: Header=BB93_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_13
.LBB93_20:                              # %for.end57
                                        #   in Loop: Header=BB93_2 Depth=1
	movl	-16(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72708(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -16(%rbp)
	movl	-12(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72712(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -12(%rbp)
	movl	$0, -24(%rbp)
.LBB93_21:                              # %for.cond61
                                        #   Parent Loop BB93_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_23 Depth 3
                                        #         Child Loop BB93_25 Depth 4
                                        #       Child Loop BB93_31 Depth 3
                                        #         Child Loop BB93_33 Depth 4
	cmpl	$2, -24(%rbp)
	jge	.LBB93_40
# %bb.22:                               # %for.body63
                                        #   in Loop: Header=BB93_21 Depth=2
	movl	$0, -8(%rbp)
.LBB93_23:                              # %for.cond64
                                        #   Parent Loop BB93_2 Depth=1
                                        #     Parent Loop BB93_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB93_25 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_30
# %bb.24:                               # %for.body68
                                        #   in Loop: Header=BB93_23 Depth=3
	movl	$0, -4(%rbp)
.LBB93_25:                              # %for.cond69
                                        #   Parent Loop BB93_2 Depth=1
                                        #     Parent Loop BB93_21 Depth=2
                                        #       Parent Loop BB93_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB93_28
# %bb.26:                               # %for.body72
                                        #   in Loop: Header=BB93_25 Depth=4
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.27:                               # %for.inc85
                                        #   in Loop: Header=BB93_25 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_25
.LBB93_28:                              # %for.end87
                                        #   in Loop: Header=BB93_23 Depth=3
	jmp	.LBB93_29
.LBB93_29:                              # %for.inc88
                                        #   in Loop: Header=BB93_23 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_23
.LBB93_30:                              # %for.end90
                                        #   in Loop: Header=BB93_21 Depth=2
	movl	$0, -8(%rbp)
.LBB93_31:                              # %for.cond91
                                        #   Parent Loop BB93_2 Depth=1
                                        #     Parent Loop BB93_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB93_33 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB93_38
# %bb.32:                               # %for.body94
                                        #   in Loop: Header=BB93_31 Depth=3
	movl	$0, -4(%rbp)
.LBB93_33:                              # %for.cond95
                                        #   Parent Loop BB93_2 Depth=1
                                        #     Parent Loop BB93_21 Depth=2
                                        #       Parent Loop BB93_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB93_36
# %bb.34:                               # %for.body98
                                        #   in Loop: Header=BB93_33 Depth=4
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-40(%rbp), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	movq	img, %rdx
	addl	72712(%rdx), %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-40(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.35:                               # %for.inc128
                                        #   in Loop: Header=BB93_33 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_33
.LBB93_36:                              # %for.end130
                                        #   in Loop: Header=BB93_31 Depth=3
	jmp	.LBB93_37
.LBB93_37:                              # %for.inc131
                                        #   in Loop: Header=BB93_31 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_31
.LBB93_38:                              # %for.end133
                                        #   in Loop: Header=BB93_21 Depth=2
	jmp	.LBB93_39
.LBB93_39:                              # %for.inc134
                                        #   in Loop: Header=BB93_21 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_21
.LBB93_40:                              # %for.end136
                                        #   in Loop: Header=BB93_2 Depth=1
	jmp	.LBB93_41
.LBB93_41:                              # %if.end
                                        #   in Loop: Header=BB93_2 Depth=1
	jmp	.LBB93_42
.LBB93_42:                              # %for.inc137
                                        #   in Loop: Header=BB93_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_2
.LBB93_43:                              # %for.end139
	jmp	.LBB93_67
.LBB93_44:                              # %if.else
	movl	$0, -20(%rbp)
.LBB93_45:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_48 Depth 2
                                        #       Child Loop BB93_50 Depth 3
                                        #     Child Loop BB93_56 Depth 2
                                        #       Child Loop BB93_58 Depth 3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB93_66
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB93_45 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB93_64
# %bb.47:                               # %if.then148
                                        #   in Loop: Header=BB93_45 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	leaq	-12(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -8(%rbp)
.LBB93_48:                              # %for.cond149
                                        #   Parent Loop BB93_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_50 Depth 3
	cmpl	$32, -8(%rbp)
	jge	.LBB93_55
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB93_48 Depth=2
	movl	$0, -4(%rbp)
.LBB93_50:                              # %for.cond152
                                        #   Parent Loop BB93_45 Depth=1
                                        #     Parent Loop BB93_48 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB93_53
# %bb.51:                               # %for.body154
                                        #   in Loop: Header=BB93_50 Depth=3
	movq	-32(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.52:                               # %for.inc165
                                        #   in Loop: Header=BB93_50 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_50
.LBB93_53:                              # %for.end167
                                        #   in Loop: Header=BB93_48 Depth=2
	jmp	.LBB93_54
.LBB93_54:                              # %for.inc168
                                        #   in Loop: Header=BB93_48 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_48
.LBB93_55:                              # %for.end170
                                        #   in Loop: Header=BB93_45 Depth=1
	movl	$0, -8(%rbp)
.LBB93_56:                              # %for.cond171
                                        #   Parent Loop BB93_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_58 Depth 3
	cmpl	$16, -8(%rbp)
	jge	.LBB93_63
# %bb.57:                               # %for.body173
                                        #   in Loop: Header=BB93_56 Depth=2
	movl	$0, -4(%rbp)
.LBB93_58:                              # %for.cond174
                                        #   Parent Loop BB93_45 Depth=1
                                        #     Parent Loop BB93_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB93_61
# %bb.59:                               # %for.body176
                                        #   in Loop: Header=BB93_58 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-12(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-12(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc201
                                        #   in Loop: Header=BB93_58 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_58
.LBB93_61:                              # %for.end203
                                        #   in Loop: Header=BB93_56 Depth=2
	jmp	.LBB93_62
.LBB93_62:                              # %for.inc204
                                        #   in Loop: Header=BB93_56 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_56
.LBB93_63:                              # %for.end206
                                        #   in Loop: Header=BB93_45 Depth=1
	jmp	.LBB93_64
.LBB93_64:                              # %if.end207
                                        #   in Loop: Header=BB93_45 Depth=1
	jmp	.LBB93_65
.LBB93_65:                              # %for.inc208
                                        #   in Loop: Header=BB93_45 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_45
.LBB93_66:                              # %for.end210
	jmp	.LBB93_67
.LBB93_67:                              # %if.end211
	cmpl	$835067425, -44(%rbp)   # imm = 0x31C61E21
	jne	.LBB93_69
.LBB93_68:
	addq	$1072, %rsp             # imm = 0x430
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB93_69:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB93_68
.Lfunc_end93:
	.size	MbAffPostProc.57, .Lfunc_end93-MbAffPostProc.57
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReadOneFrame.58
	.type	ReadOneFrame.58,@function
ReadOneFrame.58:                        # @ReadOneFrame.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	xorl	%r10d, %r10d
	movl	$595705908, -76(%rbp)   # imm = 0x2381C034
	movl	%edi, -60(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -28(%rbp)
	movl	%r9d, -40(%rbp)
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -8(%rbp)
	movl	-32(%rbp), %eax
	imull	-36(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-28(%rbp), %eax
	imull	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-68(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-72(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	cltq
	movq	%rax, -56(%rbp)
	movq	input, %rax
	cmpl	$1, 3312(%rax)
	jne	.LBB94_2
# %bb.1:                                # %land.rhs
	movq	input, %rax
	cmpl	$3, 72(%rax)
	sete	%r10b
.LBB94_2:                               # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	imull	-36(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, %edi
	callq	malloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	%rax, %rcx
	jne	.LBB94_4
# %bb.3:                                # %if.then
	movabsq	$.L.str.14, %rdi
	callq	no_mem_exit
.LBB94_4:                               # %if.end
	movl	p_in, %edi
	movslq	-64(%rbp), %rsi
	xorl	%edx, %edx
	callq	lseek
	movslq	-64(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB94_6
# %bb.5:                                # %if.then18
	movabsq	$.L.str.15, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB94_6:                               # %if.end19
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movq	input, %rax
	movslq	1232(%rax), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB94_8
# %bb.7:                                # %if.then25
	movq	input, %rax
	movl	1232(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB94_8:                               # %if.end28
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movslq	-60(%rbp), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB94_10
# %bb.9:                                # %if.then34
	movq	input, %rax
	movl	1232(%rax), %ecx
	addl	-60(%rbp), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB94_10:                              # %if.end38
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB94_26
# %bb.11:                               # %if.then42
	cmpl	$0, -44(%rbp)
	je	.LBB94_13
# %bb.12:                               # %if.then43
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB94_13:                              # %if.end46
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-4(%rbp), %rdx
	callq	read
	movslq	-4(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB94_15
# %bb.14:                               # %if.then52
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB94_15:                              # %if.end54
	movq	imgY_org_frm, %rdi
	movq	-24(%rbp), %rsi
	movl	-32(%rbp), %edx
	movl	-36(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB94_25
# %bb.16:                               # %if.then58
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB94_18
# %bb.17:                               # %if.then64
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB94_18:                              # %if.end66
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-28(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -44(%rbp)
	je	.LBB94_20
# %bb.19:                               # %if.then68
	xorl	%esi, %esi
	movl	p_in, %edi
	subq	-56(%rbp), %rsi
	movl	$1, %edx
	callq	lseek
.LBB94_20:                              # %if.end70
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB94_22
# %bb.21:                               # %if.then76
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB94_22:                              # %if.end78
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-28(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -44(%rbp)
	je	.LBB94_24
# %bb.23:                               # %if.then81
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	shlq	$1, %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB94_24:                              # %if.end85
	jmp	.LBB94_25
.LBB94_25:                              # %if.end86
	jmp	.LBB94_27
.LBB94_26:                              # %if.else
	movabsq	$.L.str.18, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB94_27:                              # %if.end88
	movq	-24(%rbp), %rdi
	callq	free
	cmpl	$595705908, -76(%rbp)   # imm = 0x2381C034
	jne	.LBB94_29
.LBB94_28:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB94_29:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB94_28
.Lfunc_end94:
	.size	ReadOneFrame.58, .Lfunc_end94-ReadOneFrame.58
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function frame_mode_buffer.59
	.type	frame_mode_buffer.59,@function
frame_mode_buffer.59:                   # @frame_mode_buffer.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$271042809, -16(%rbp)   # imm = 0x1027C8F9
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -4(%rbp)
	vmovss	%xmm1, -8(%rbp)
	vmovss	%xmm2, -12(%rbp)
	callq	put_buffer_frame
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB95_2
# %bb.1:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB95_3
.LBB95_2:                               # %if.then
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_top
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_bot
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	callq	put_buffer_frame
.LBB95_3:                               # %if.end
	cmpl	$271042809, -16(%rbp)   # imm = 0x1027C8F9
	jne	.LBB95_5
.LBB95_4:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB95_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB95_4
.Lfunc_end95:
	.size	frame_mode_buffer.59, .Lfunc_end95-frame_mode_buffer.59
	.cfi_endproc
                                        # -- End function
	.globl	copy_rdopt_data.60      # -- Begin function copy_rdopt_data.60
	.p2align	4, 0x90
	.type	copy_rdopt_data.60,@function
copy_rdopt_data.60:                     # @copy_rdopt_data.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$389626066, -52(%rbp)   # imm = 0x173938D2
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB96_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB96_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB96_4
.LBB96_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB96_4
.LBB96_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movq	rdopt, %rax
	movl	3224(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	rdopt, %rax
	movl	3096(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	rdopt, %rax
	movl	3208(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	rdopt, %rax
	movq	3216(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movq	rdopt, %rax
	movl	3100(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	movq	rdopt, %rax
	movl	3328(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	rdopt, %rax
	movl	3348(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	rdopt, %rax
	movl	3352(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 596(%rcx)
	movq	rdopt, %rax
	movl	3344(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	rdopt, %rax
	movl	3332(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	$0, -4(%rbp)
.LBB96_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_7 Depth 2
                                        #       Child Loop BB96_9 Depth 3
                                        #         Child Loop BB96_11 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB96_20
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB96_5 Depth=1
	movl	$0, -8(%rbp)
.LBB96_7:                               # %for.cond17
                                        #   Parent Loop BB96_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB96_9 Depth 3
                                        #         Child Loop BB96_11 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB96_18
# %bb.8:                                # %for.body20
                                        #   in Loop: Header=BB96_7 Depth=2
	movl	$0, -12(%rbp)
.LBB96_9:                               # %for.cond21
                                        #   Parent Loop BB96_5 Depth=1
                                        #     Parent Loop BB96_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB96_11 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB96_16
# %bb.10:                               # %for.body24
                                        #   in Loop: Header=BB96_9 Depth=3
	movl	$0, -16(%rbp)
.LBB96_11:                              # %for.cond25
                                        #   Parent Loop BB96_5 Depth=1
                                        #     Parent Loop BB96_7 Depth=2
                                        #       Parent Loop BB96_9 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB96_14
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB96_11 Depth=4
	movq	rdopt, %rax
	movq	3080(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB96_11 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB96_11
.LBB96_14:                              # %for.end
                                        #   in Loop: Header=BB96_9 Depth=3
	jmp	.LBB96_15
.LBB96_15:                              # %for.inc46
                                        #   in Loop: Header=BB96_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB96_9
.LBB96_16:                              # %for.end48
                                        #   in Loop: Header=BB96_7 Depth=2
	jmp	.LBB96_17
.LBB96_17:                              # %for.inc49
                                        #   in Loop: Header=BB96_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_7
.LBB96_18:                              # %for.end51
                                        #   in Loop: Header=BB96_5 Depth=1
	jmp	.LBB96_19
.LBB96_19:                              # %for.inc52
                                        #   in Loop: Header=BB96_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_5
.LBB96_20:                              # %for.end54
	movl	$0, -4(%rbp)
.LBB96_21:                              # %for.cond55
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_23 Depth 2
                                        #       Child Loop BB96_25 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB96_32
# %bb.22:                               # %for.body58
                                        #   in Loop: Header=BB96_21 Depth=1
	movl	$0, -12(%rbp)
.LBB96_23:                              # %for.cond59
                                        #   Parent Loop BB96_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB96_25 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB96_30
# %bb.24:                               # %for.body62
                                        #   in Loop: Header=BB96_23 Depth=2
	movl	$0, -16(%rbp)
.LBB96_25:                              # %for.cond63
                                        #   Parent Loop BB96_21 Depth=1
                                        #     Parent Loop BB96_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB96_28
# %bb.26:                               # %for.body66
                                        #   in Loop: Header=BB96_25 Depth=3
	movq	rdopt, %rax
	movq	3088(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc80
                                        #   in Loop: Header=BB96_25 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB96_25
.LBB96_28:                              # %for.end82
                                        #   in Loop: Header=BB96_23 Depth=2
	jmp	.LBB96_29
.LBB96_29:                              # %for.inc83
                                        #   in Loop: Header=BB96_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB96_23
.LBB96_30:                              # %for.end85
                                        #   in Loop: Header=BB96_21 Depth=1
	jmp	.LBB96_31
.LBB96_31:                              # %for.inc86
                                        #   in Loop: Header=BB96_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_21
.LBB96_32:                              # %for.end88
	movl	$0, -8(%rbp)
.LBB96_33:                              # %for.cond89
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_35 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB96_42
# %bb.34:                               # %for.body92
                                        #   in Loop: Header=BB96_33 Depth=1
	movl	$0, -4(%rbp)
.LBB96_35:                              # %for.cond93
                                        #   Parent Loop BB96_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB96_40
# %bb.36:                               # %for.body96
                                        #   in Loop: Header=BB96_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-44(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -36(%rbp)
	je	.LBB96_38
# %bb.37:                               # %if.then
                                        #   in Loop: Header=BB96_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB96_38:                              # %if.end
                                        #   in Loop: Header=BB96_35 Depth=2
	jmp	.LBB96_39
.LBB96_39:                              # %for.inc176
                                        #   in Loop: Header=BB96_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_35
.LBB96_40:                              # %for.end178
                                        #   in Loop: Header=BB96_33 Depth=1
	jmp	.LBB96_41
.LBB96_41:                              # %for.inc179
                                        #   in Loop: Header=BB96_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_33
.LBB96_42:                              # %for.end181
	movl	$0, -8(%rbp)
.LBB96_43:                              # %for.cond182
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_45 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB96_50
# %bb.44:                               # %for.body185
                                        #   in Loop: Header=BB96_43 Depth=1
	movl	$0, -4(%rbp)
.LBB96_45:                              # %for.cond186
                                        #   Parent Loop BB96_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB96_48
# %bb.46:                               # %for.body189
                                        #   in Loop: Header=BB96_45 Depth=2
	movq	rdopt, %rax
	addq	$8, %rax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.47:                               # %for.inc201
                                        #   in Loop: Header=BB96_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_45
.LBB96_48:                              # %for.end203
                                        #   in Loop: Header=BB96_43 Depth=1
	jmp	.LBB96_49
.LBB96_49:                              # %for.inc204
                                        #   in Loop: Header=BB96_43 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_43
.LBB96_50:                              # %for.end206
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB96_60
# %bb.51:                               # %if.then209
	movl	$0, -8(%rbp)
.LBB96_52:                              # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_54 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB96_59
# %bb.53:                               # %for.body213
                                        #   in Loop: Header=BB96_52 Depth=1
	movl	$0, -4(%rbp)
.LBB96_54:                              # %for.cond214
                                        #   Parent Loop BB96_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB96_57
# %bb.55:                               # %for.body217
                                        #   in Loop: Header=BB96_54 Depth=2
	movq	rdopt, %rax
	addq	$1032, %rax             # imm = 0x408
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	rdopt, %rax
	addq	$2056, %rax             # imm = 0x808
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc245
                                        #   in Loop: Header=BB96_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_54
.LBB96_57:                              # %for.end247
                                        #   in Loop: Header=BB96_52 Depth=1
	jmp	.LBB96_58
.LBB96_58:                              # %for.inc248
                                        #   in Loop: Header=BB96_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_52
.LBB96_59:                              # %for.end250
	jmp	.LBB96_60
.LBB96_60:                              # %if.end251
	movl	$0, -4(%rbp)
.LBB96_61:                              # %for.cond252
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB96_64
# %bb.62:                               # %for.body255
                                        #   in Loop: Header=BB96_61 Depth=1
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3104(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3120(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.63:                               # %for.inc268
                                        #   in Loop: Header=BB96_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_61
.LBB96_64:                              # %for.end270
	movq	rdopt, %rax
	movl	3336(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
	cmpl	$8, -28(%rbp)
	jne	.LBB96_74
# %bb.65:                               # %if.then274
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB96_66:                              # %for.cond276
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_68 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB96_73
# %bb.67:                               # %for.body281
                                        #   in Loop: Header=BB96_66 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB96_68:                              # %for.cond283
                                        #   Parent Loop BB96_66 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB96_71
# %bb.69:                               # %for.body288
                                        #   in Loop: Header=BB96_68 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.70:                               # %for.inc303
                                        #   in Loop: Header=BB96_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB96_68
.LBB96_71:                              # %for.end306
                                        #   in Loop: Header=BB96_66 Depth=1
	jmp	.LBB96_72
.LBB96_72:                              # %for.inc307
                                        #   in Loop: Header=BB96_66 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_66
.LBB96_73:                              # %for.end309
	jmp	.LBB96_98
.LBB96_74:                              # %if.else
	cmpl	$9, -28(%rbp)
	je	.LBB96_85
# %bb.75:                               # %land.lhs.true312
	cmpl	$13, -28(%rbp)
	je	.LBB96_85
# %bb.76:                               # %if.then315
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB96_77:                              # %for.cond317
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_79 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB96_84
# %bb.78:                               # %for.body322
                                        #   in Loop: Header=BB96_77 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB96_79:                              # %for.cond324
                                        #   Parent Loop BB96_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB96_82
# %bb.80:                               # %for.body329
                                        #   in Loop: Header=BB96_79 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.81:                               # %for.inc338
                                        #   in Loop: Header=BB96_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB96_79
.LBB96_82:                              # %for.end341
                                        #   in Loop: Header=BB96_77 Depth=1
	jmp	.LBB96_83
.LBB96_83:                              # %for.inc342
                                        #   in Loop: Header=BB96_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_77
.LBB96_84:                              # %for.end344
	jmp	.LBB96_97
.LBB96_85:                              # %if.else345
	cmpl	$9, -28(%rbp)
	je	.LBB96_87
# %bb.86:                               # %lor.lhs.false
	cmpl	$13, -28(%rbp)
	jne	.LBB96_96
.LBB96_87:                              # %if.then350
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB96_88:                              # %for.cond352
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_90 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB96_95
# %bb.89:                               # %for.body357
                                        #   in Loop: Header=BB96_88 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB96_90:                              # %for.cond359
                                        #   Parent Loop BB96_88 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB96_93
# %bb.91:                               # %for.body364
                                        #   in Loop: Header=BB96_90 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.92:                               # %for.inc381
                                        #   in Loop: Header=BB96_90 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB96_90
.LBB96_93:                              # %for.end384
                                        #   in Loop: Header=BB96_88 Depth=1
	jmp	.LBB96_94
.LBB96_94:                              # %for.inc385
                                        #   in Loop: Header=BB96_88 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_88
.LBB96_95:                              # %for.end387
	jmp	.LBB96_96
.LBB96_96:                              # %if.end388
	jmp	.LBB96_97
.LBB96_97:                              # %if.end389
	jmp	.LBB96_98
.LBB96_98:                              # %if.end390
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB96_131
# %bb.99:                               # %if.then393
	callq	copy_motion_vectors_MB
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB96_119
# %bb.100:                              # %lor.lhs.false397
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB96_119
# %bb.101:                              # %lor.lhs.false401
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB96_119
# %bb.102:                              # %if.then405
	movl	$0, -8(%rbp)
.LBB96_103:                             # %for.cond406
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_105 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB96_118
# %bb.104:                              # %for.body409
                                        #   in Loop: Header=BB96_103 Depth=1
	movl	$0, -4(%rbp)
.LBB96_105:                             # %for.cond410
                                        #   Parent Loop BB96_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB96_116
# %bb.106:                              # %for.body413
                                        #   in Loop: Header=BB96_105 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	488(%rsi,%rax,4), %eax
	movl	%eax, -40(%rbp)
	cmpl	$1, -40(%rbp)
	je	.LBB96_108
# %bb.107:                              # %if.then428
                                        #   in Loop: Header=BB96_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB96_109
.LBB96_108:                             # %if.else483
                                        #   in Loop: Header=BB96_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB96_109:                             # %if.end506
                                        #   in Loop: Header=BB96_105 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB96_114
# %bb.110:                              # %if.then508
                                        #   in Loop: Header=BB96_105 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB96_112
# %bb.111:                              # %if.then511
                                        #   in Loop: Header=BB96_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB96_113
.LBB96_112:                             # %if.else568
                                        #   in Loop: Header=BB96_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB96_113:                             # %if.end591
                                        #   in Loop: Header=BB96_105 Depth=2
	jmp	.LBB96_114
.LBB96_114:                             # %if.end592
                                        #   in Loop: Header=BB96_105 Depth=2
	jmp	.LBB96_115
.LBB96_115:                             # %for.inc593
                                        #   in Loop: Header=BB96_105 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_105
.LBB96_116:                             # %for.end595
                                        #   in Loop: Header=BB96_103 Depth=1
	jmp	.LBB96_117
.LBB96_117:                             # %for.inc596
                                        #   in Loop: Header=BB96_103 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_103
.LBB96_118:                             # %for.end598
	jmp	.LBB96_130
.LBB96_119:                             # %if.else599
	movl	$0, -8(%rbp)
.LBB96_120:                             # %for.cond600
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_122 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB96_129
# %bb.121:                              # %for.body603
                                        #   in Loop: Header=BB96_120 Depth=1
	movl	$0, -4(%rbp)
.LBB96_122:                             # %for.cond604
                                        #   Parent Loop BB96_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB96_127
# %bb.123:                              # %for.body607
                                        #   in Loop: Header=BB96_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	cmpl	$0, -36(%rbp)
	je	.LBB96_125
# %bb.124:                              # %if.then631
                                        #   in Loop: Header=BB96_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB96_125:                             # %if.end654
                                        #   in Loop: Header=BB96_122 Depth=2
	jmp	.LBB96_126
.LBB96_126:                             # %for.inc655
                                        #   in Loop: Header=BB96_122 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_122
.LBB96_127:                             # %for.end657
                                        #   in Loop: Header=BB96_120 Depth=1
	jmp	.LBB96_128
.LBB96_128:                             # %for.inc658
                                        #   in Loop: Header=BB96_120 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_120
.LBB96_129:                             # %for.end660
	jmp	.LBB96_130
.LBB96_130:                             # %if.end661
	jmp	.LBB96_131
.LBB96_131:                             # %if.end662
	cmpl	$389626066, -52(%rbp)   # imm = 0x173938D2
	jne	.LBB96_133
.LBB96_132:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB96_133:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB96_132
.Lfunc_end96:
	.size	copy_rdopt_data.60, .Lfunc_end96-copy_rdopt_data.60
	.cfi_endproc
                                        # -- End function
	.globl	buf2img.61              # -- Begin function buf2img.61
	.p2align	4, 0x90
	.type	buf2img.61,@function
buf2img.61:                             # @buf2img.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$362146939, -60(%rbp)   # imm = 0x1595EC7B
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movslq	-24(%rbp), %rax
	cmpq	$2, %rax
	jbe	.LBB97_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.3, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB97_2:                               # %if.end
	movb	$0, %al
	callq	testEndian
	cmpl	$0, %eax
	je	.LBB97_35
# %bb.3:                                # %if.then2
	movl	-24(%rbp), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB97_6
	jmp	.LBB97_4
.LBB97_4:                               # %if.then2
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB97_15
	jmp	.LBB97_5
.LBB97_5:                               # %if.then2
	subl	$4, %eax
	je	.LBB97_24
	jmp	.LBB97_33
.LBB97_6:                               # %sw.bb
	movl	$0, -4(%rbp)
.LBB97_7:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_9 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB97_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB97_7 Depth=1
	movl	$0, -8(%rbp)
.LBB97_9:                               # %for.cond5
                                        #   Parent Loop BB97_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB97_12
# %bb.10:                               # %for.body8
                                        #   in Loop: Header=BB97_9 Depth=2
	movq	-48(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB97_9 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB97_9
.LBB97_12:                              # %for.end
                                        #   in Loop: Header=BB97_7 Depth=1
	jmp	.LBB97_13
.LBB97_13:                              # %for.inc14
                                        #   in Loop: Header=BB97_7 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_7
.LBB97_14:                              # %for.end16
	jmp	.LBB97_34
.LBB97_15:                              # %sw.bb17
	movl	$0, -4(%rbp)
.LBB97_16:                              # %for.cond18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_18 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB97_23
# %bb.17:                               # %for.body21
                                        #   in Loop: Header=BB97_16 Depth=1
	movl	$0, -8(%rbp)
.LBB97_18:                              # %for.cond22
                                        #   Parent Loop BB97_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB97_21
# %bb.19:                               # %for.body25
                                        #   in Loop: Header=BB97_18 Depth=2
	movq	-48(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx), %ax
	movw	%ax, -14(%rbp)
	movzwl	-14(%rbp), %eax
	sarl	$8, %eax
	movzwl	-14(%rbp), %ecx
	andl	$255, %ecx
	shll	$8, %ecx
	orl	%ecx, %eax
	movw	%ax, -26(%rbp)
	movw	-26(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.20:                               # %for.inc36
                                        #   in Loop: Header=BB97_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB97_18
.LBB97_21:                              # %for.end38
                                        #   in Loop: Header=BB97_16 Depth=1
	jmp	.LBB97_22
.LBB97_22:                              # %for.inc39
                                        #   in Loop: Header=BB97_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_16
.LBB97_23:                              # %for.end41
	jmp	.LBB97_34
.LBB97_24:                              # %sw.bb42
	movl	$0, -4(%rbp)
.LBB97_25:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_27 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB97_32
# %bb.26:                               # %for.body46
                                        #   in Loop: Header=BB97_25 Depth=1
	movl	$0, -8(%rbp)
.LBB97_27:                              # %for.cond47
                                        #   Parent Loop BB97_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB97_30
# %bb.28:                               # %for.body50
                                        #   in Loop: Header=BB97_27 Depth=2
	movq	-48(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-56(%rbp), %rax
	andq	$65280, %rax            # imm = 0xFF00
	shlq	$8, %rax
	movq	-56(%rbp), %rcx
	andq	$255, %rcx
	shlq	$24, %rcx
	orq	%rcx, %rax
	movq	-56(%rbp), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	shrq	$8, %rcx
	orq	%rcx, %rax
	movl	$4278190080, %ecx       # imm = 0xFF000000
	andq	-56(%rbp), %rcx
	shrq	$24, %rcx
	orq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.29:                               # %for.inc72
                                        #   in Loop: Header=BB97_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB97_27
.LBB97_30:                              # %for.end74
                                        #   in Loop: Header=BB97_25 Depth=1
	jmp	.LBB97_31
.LBB97_31:                              # %for.inc75
                                        #   in Loop: Header=BB97_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_25
.LBB97_32:                              # %for.end77
	jmp	.LBB97_33
.LBB97_33:                              # %sw.default
	movabsq	$.L.str.4, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB97_34:                              # %sw.epilog
	jmp	.LBB97_44
.LBB97_35:                              # %if.else
	movl	$0, -4(%rbp)
.LBB97_36:                              # %for.cond78
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_38 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB97_43
# %bb.37:                               # %for.body81
                                        #   in Loop: Header=BB97_36 Depth=1
	movl	$0, -8(%rbp)
.LBB97_38:                              # %for.cond82
                                        #   Parent Loop BB97_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB97_41
# %bb.39:                               # %for.body85
                                        #   in Loop: Header=BB97_38 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-8(%rbp), %rax
	shlq	$1, %rax
	addq	%rax, %rdi
	movq	-48(%rbp), %rsi
	movl	-8(%rbp), %eax
	movl	-4(%rbp), %ecx
	imull	-12(%rbp), %ecx
	addl	%ecx, %eax
	imull	-24(%rbp), %eax
	cltq
	addq	%rax, %rsi
	movslq	-24(%rbp), %rdx
	callq	memcpy
# %bb.40:                               # %for.inc100
                                        #   in Loop: Header=BB97_38 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB97_38
.LBB97_41:                              # %for.end102
                                        #   in Loop: Header=BB97_36 Depth=1
	jmp	.LBB97_42
.LBB97_42:                              # %for.inc103
                                        #   in Loop: Header=BB97_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_36
.LBB97_43:                              # %for.end105
	jmp	.LBB97_44
.LBB97_44:                              # %if.end106
	cmpl	$362146939, -60(%rbp)   # imm = 0x1595EC7B
	jne	.LBB97_46
.LBB97_45:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB97_46:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB97_45
.Lfunc_end97:
	.size	buf2img.61, .Lfunc_end97-buf2img.61
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_motion_vectors_MB.62
	.type	copy_motion_vectors_MB.62,@function
copy_motion_vectors_MB.62:              # @copy_motion_vectors_MB.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$960868137, -20(%rbp)   # imm = 0x3945AF29
	movl	$0, -16(%rbp)
.LBB98_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_3 Depth 2
                                        #       Child Loop BB98_5 Depth 3
                                        #         Child Loop BB98_7 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB98_20
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB98_1 Depth=1
	movl	$0, -12(%rbp)
.LBB98_3:                               # %for.cond1
                                        #   Parent Loop BB98_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_5 Depth 3
                                        #         Child Loop BB98_7 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB98_18
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB98_3 Depth=2
	movl	$0, -4(%rbp)
.LBB98_5:                               # %for.cond4
                                        #   Parent Loop BB98_1 Depth=1
                                        #     Parent Loop BB98_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB98_7 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB98_16
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB98_5 Depth=3
	movl	$0, -8(%rbp)
.LBB98_7:                               # %for.cond7
                                        #   Parent Loop BB98_1 Depth=1
                                        #     Parent Loop BB98_3 Depth=2
                                        #       Parent Loop BB98_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$9, -8(%rbp)
	jge	.LBB98_14
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB98_7 Depth=4
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB98_12
# %bb.9:                                # %land.lhs.true
                                        #   in Loop: Header=BB98_7 Depth=4
	cmpl	$1, -4(%rbp)
	jne	.LBB98_12
# %bb.10:                               # %land.lhs.true96
                                        #   in Loop: Header=BB98_7 Depth=4
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB98_12
# %bb.11:                               # %if.then
                                        #   in Loop: Header=BB98_7 Depth=4
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB98_12:                              # %if.end
                                        #   in Loop: Header=BB98_7 Depth=4
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB98_7 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_7
.LBB98_14:                              # %for.end
                                        #   in Loop: Header=BB98_5 Depth=3
	jmp	.LBB98_15
.LBB98_15:                              # %for.inc359
                                        #   in Loop: Header=BB98_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_5
.LBB98_16:                              # %for.end361
                                        #   in Loop: Header=BB98_3 Depth=2
	jmp	.LBB98_17
.LBB98_17:                              # %for.inc362
                                        #   in Loop: Header=BB98_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB98_3
.LBB98_18:                              # %for.end364
                                        #   in Loop: Header=BB98_1 Depth=1
	jmp	.LBB98_19
.LBB98_19:                              # %for.inc365
                                        #   in Loop: Header=BB98_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB98_1
.LBB98_20:                              # %for.end367
	cmpl	$960868137, -20(%rbp)   # imm = 0x3945AF29
	jne	.LBB98_22
.LBB98_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB98_22:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB98_21
.Lfunc_end98:
	.size	copy_motion_vectors_MB.62, .Lfunc_end98-copy_motion_vectors_MB.62
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportRB.63
	.type	ReportRB.63,@function
ReportRB.63:                            # @ReportRB.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1905927953, -20(%rbp)  # imm = 0x719A2711
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	active_pps, %rax
	movl	196(%rax), %ecx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-16(%rbp), %r9d
	movl	-12(%rbp), %r10d
	movq	img, %rdi
	movl	71800(%rdi), %edi
	cmpl	$0, %edi
	movabsq	$.L.str.7, %rdi
	movabsq	$.L.str.8, %rax
	cmovneq	%rdi, %rax
	movl	intras, %r11d
	movq	img, %rdi
	movl	71996(%rdi), %ebx
	movabsq	$.L.str.11, %rdi
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movl	%ebx, 24(%rsp)
	movb	$3, %al
	callq	printf
	cmpl	$1905927953, -20(%rbp)  # imm = 0x719A2711
	jne	.LBB99_2
.LBB99_1:
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB99_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB99_1
.Lfunc_end99:
	.size	ReportRB.63, .Lfunc_end99-ReportRB.63
	.cfi_endproc
                                        # -- End function
	.globl	buf2img.64              # -- Begin function buf2img.64
	.p2align	4, 0x90
	.type	buf2img.64,@function
buf2img.64:                             # @buf2img.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$677644168, -60(%rbp)   # imm = 0x28640788
	movq	%rdi, -40(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movslq	-24(%rbp), %rax
	cmpq	$2, %rax
	jbe	.LBB100_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.3, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB100_2:                              # %if.end
	movb	$0, %al
	callq	testEndian
	cmpl	$0, %eax
	je	.LBB100_35
# %bb.3:                                # %if.then2
	movl	-24(%rbp), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB100_6
	jmp	.LBB100_4
.LBB100_4:                              # %if.then2
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB100_15
	jmp	.LBB100_5
.LBB100_5:                              # %if.then2
	subl	$4, %eax
	je	.LBB100_24
	jmp	.LBB100_33
.LBB100_6:                              # %sw.bb
	movl	$0, -4(%rbp)
.LBB100_7:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_9 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB100_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB100_7 Depth=1
	movl	$0, -8(%rbp)
.LBB100_9:                              # %for.cond5
                                        #   Parent Loop BB100_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB100_12
# %bb.10:                               # %for.body8
                                        #   in Loop: Header=BB100_9 Depth=2
	movq	-56(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB100_9 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_9
.LBB100_12:                             # %for.end
                                        #   in Loop: Header=BB100_7 Depth=1
	jmp	.LBB100_13
.LBB100_13:                             # %for.inc14
                                        #   in Loop: Header=BB100_7 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_7
.LBB100_14:                             # %for.end16
	jmp	.LBB100_34
.LBB100_15:                             # %sw.bb17
	movl	$0, -4(%rbp)
.LBB100_16:                             # %for.cond18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_18 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB100_23
# %bb.17:                               # %for.body21
                                        #   in Loop: Header=BB100_16 Depth=1
	movl	$0, -8(%rbp)
.LBB100_18:                             # %for.cond22
                                        #   Parent Loop BB100_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB100_21
# %bb.19:                               # %for.body25
                                        #   in Loop: Header=BB100_18 Depth=2
	movq	-56(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx), %ax
	movw	%ax, -14(%rbp)
	movzwl	-14(%rbp), %eax
	sarl	$8, %eax
	movzwl	-14(%rbp), %ecx
	andl	$255, %ecx
	shll	$8, %ecx
	orl	%ecx, %eax
	movw	%ax, -26(%rbp)
	movw	-26(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.20:                               # %for.inc36
                                        #   in Loop: Header=BB100_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_18
.LBB100_21:                             # %for.end38
                                        #   in Loop: Header=BB100_16 Depth=1
	jmp	.LBB100_22
.LBB100_22:                             # %for.inc39
                                        #   in Loop: Header=BB100_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_16
.LBB100_23:                             # %for.end41
	jmp	.LBB100_34
.LBB100_24:                             # %sw.bb42
	movl	$0, -4(%rbp)
.LBB100_25:                             # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_27 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB100_32
# %bb.26:                               # %for.body46
                                        #   in Loop: Header=BB100_25 Depth=1
	movl	$0, -8(%rbp)
.LBB100_27:                             # %for.cond47
                                        #   Parent Loop BB100_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB100_30
# %bb.28:                               # %for.body50
                                        #   in Loop: Header=BB100_27 Depth=2
	movq	-56(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	-48(%rbp), %rax
	andq	$65280, %rax            # imm = 0xFF00
	shlq	$8, %rax
	movq	-48(%rbp), %rcx
	andq	$255, %rcx
	shlq	$24, %rcx
	orq	%rcx, %rax
	movq	-48(%rbp), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	shrq	$8, %rcx
	orq	%rcx, %rax
	movl	$4278190080, %ecx       # imm = 0xFF000000
	andq	-48(%rbp), %rcx
	shrq	$24, %rcx
	orq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.29:                               # %for.inc72
                                        #   in Loop: Header=BB100_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_27
.LBB100_30:                             # %for.end74
                                        #   in Loop: Header=BB100_25 Depth=1
	jmp	.LBB100_31
.LBB100_31:                             # %for.inc75
                                        #   in Loop: Header=BB100_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_25
.LBB100_32:                             # %for.end77
	jmp	.LBB100_33
.LBB100_33:                             # %sw.default
	movabsq	$.L.str.4, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB100_34:                             # %sw.epilog
	jmp	.LBB100_44
.LBB100_35:                             # %if.else
	movl	$0, -4(%rbp)
.LBB100_36:                             # %for.cond78
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_38 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB100_43
# %bb.37:                               # %for.body81
                                        #   in Loop: Header=BB100_36 Depth=1
	movl	$0, -8(%rbp)
.LBB100_38:                             # %for.cond82
                                        #   Parent Loop BB100_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB100_41
# %bb.39:                               # %for.body85
                                        #   in Loop: Header=BB100_38 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-8(%rbp), %rax
	shlq	$1, %rax
	addq	%rax, %rdi
	movq	-56(%rbp), %rsi
	movl	-8(%rbp), %eax
	movl	-4(%rbp), %ecx
	imull	-12(%rbp), %ecx
	addl	%ecx, %eax
	imull	-24(%rbp), %eax
	cltq
	addq	%rax, %rsi
	movslq	-24(%rbp), %rdx
	callq	memcpy
# %bb.40:                               # %for.inc100
                                        #   in Loop: Header=BB100_38 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_38
.LBB100_41:                             # %for.end102
                                        #   in Loop: Header=BB100_36 Depth=1
	jmp	.LBB100_42
.LBB100_42:                             # %for.inc103
                                        #   in Loop: Header=BB100_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_36
.LBB100_43:                             # %for.end105
	jmp	.LBB100_44
.LBB100_44:                             # %if.end106
	cmpl	$677644168, -60(%rbp)   # imm = 0x28640788
	jne	.LBB100_46
.LBB100_45:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB100_46:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB100_45
.Lfunc_end100:
	.size	buf2img.64, .Lfunc_end100-buf2img.64
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReadOneFrame.65
	.type	ReadOneFrame.65,@function
ReadOneFrame.65:                        # @ReadOneFrame.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	xorl	%r10d, %r10d
	movl	$1472280331, -68(%rbp)  # imm = 0x57C1370B
	movl	%edi, -64(%rbp)
	movl	%esi, -60(%rbp)
	movl	%edx, -44(%rbp)
	movl	%ecx, -40(%rbp)
	movl	%r8d, -36(%rbp)
	movl	%r9d, -32(%rbp)
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -8(%rbp)
	movl	-44(%rbp), %eax
	imull	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-36(%rbp), %eax
	imull	-32(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-76(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	cltq
	movq	%rax, -56(%rbp)
	movq	input, %rax
	cmpl	$1, 3312(%rax)
	jne	.LBB101_2
# %bb.1:                                # %land.rhs
	movq	input, %rax
	cmpl	$3, 72(%rax)
	sete	%r10b
.LBB101_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -28(%rbp)
	movl	-44(%rbp), %eax
	imull	-40(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, %edi
	callq	malloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	%rax, %rcx
	jne	.LBB101_4
# %bb.3:                                # %if.then
	movabsq	$.L.str.14, %rdi
	callq	no_mem_exit
.LBB101_4:                              # %if.end
	movl	p_in, %edi
	movslq	-60(%rbp), %rsi
	xorl	%edx, %edx
	callq	lseek
	movslq	-60(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB101_6
# %bb.5:                                # %if.then18
	movabsq	$.L.str.15, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB101_6:                              # %if.end19
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movq	input, %rax
	movslq	1232(%rax), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB101_8
# %bb.7:                                # %if.then25
	movq	input, %rax
	movl	1232(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB101_8:                              # %if.end28
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movslq	-64(%rbp), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB101_10
# %bb.9:                                # %if.then34
	movq	input, %rax
	movl	1232(%rax), %ecx
	addl	-64(%rbp), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB101_10:                             # %if.end38
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB101_26
# %bb.11:                               # %if.then42
	cmpl	$0, -28(%rbp)
	je	.LBB101_13
# %bb.12:                               # %if.then43
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB101_13:                             # %if.end46
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-4(%rbp), %rdx
	callq	read
	movslq	-4(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB101_15
# %bb.14:                               # %if.then52
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB101_15:                             # %if.end54
	movq	imgY_org_frm, %rdi
	movq	-24(%rbp), %rsi
	movl	-44(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB101_25
# %bb.16:                               # %if.then58
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB101_18
# %bb.17:                               # %if.then64
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB101_18:                             # %if.end66
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-36(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -28(%rbp)
	je	.LBB101_20
# %bb.19:                               # %if.then68
	xorl	%esi, %esi
	movl	p_in, %edi
	subq	-56(%rbp), %rsi
	movl	$1, %edx
	callq	lseek
.LBB101_20:                             # %if.end70
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB101_22
# %bb.21:                               # %if.then76
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB101_22:                             # %if.end78
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-36(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -28(%rbp)
	je	.LBB101_24
# %bb.23:                               # %if.then81
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	shlq	$1, %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB101_24:                             # %if.end85
	jmp	.LBB101_25
.LBB101_25:                             # %if.end86
	jmp	.LBB101_27
.LBB101_26:                             # %if.else
	movabsq	$.L.str.18, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB101_27:                             # %if.end88
	movq	-24(%rbp), %rdi
	callq	free
	cmpl	$1472280331, -68(%rbp)  # imm = 0x57C1370B
	jne	.LBB101_29
.LBB101_28:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB101_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB101_28
.Lfunc_end101:
	.size	ReadOneFrame.65, .Lfunc_end101-ReadOneFrame.65
	.cfi_endproc
                                        # -- End function
	.globl	field_picture.66        # -- Begin function field_picture.66
	.p2align	4, 0x90
	.type	field_picture.66,@function
field_picture.66:                       # @field_picture.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2008608329, -16(%rbp)  # imm = 0x77B8EE49
	movq	%rdi, -8(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	stats, %rax
	movl	$0, 1472(%rax)
	movq	stats, %rax
	addq	$1472, %rax             # imm = 0x5C0
	movq	stats, %rcx
	movq	%rax, 1480(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	68(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	img, %rax
	movl	72488(%rax), %eax
	shrl	$1, %eax
	movq	img, %rcx
	movl	%eax, 72484(%rcx)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_top_picture
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_top_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_top_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$1, 28(%rax)
	movq	enc_top_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_top
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB102_2
# %bb.1:                                # %if.then
	movl	nextP_tr_fld, %eax
	addl	$-1, %eax
	movl	%eax, nextP_tr_fld
.LBB102_2:                              # %if.end
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB102_7
# %bb.3:                                # %if.then15
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB102_5
# %bb.4:                                # %if.then17
	xorl	%edi, %edi
	movl	$1, %esi
	movl	$1, %edx
	callq	rc_init_pict
	jmp	.LBB102_6
.LBB102_5:                              # %if.else
	xorl	%edi, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
.LBB102_6:                              # %if.end18
	movl	$1, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB102_7:                              # %if.end20
	movq	img, %rax
	movl	$1, 72596(%rax)
	movq	top_pic, %rdi
	callq	code_a_picture
	movq	enc_picture, %rax
	movl	$1, (%rax)
	movq	enc_top_picture, %rdi
	callq	store_picture_in_dpb
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_bottom_picture
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_bottom_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_bottom_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$2, 28(%rax)
	movq	enc_bottom_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_bot
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB102_9
# %bb.8:                                # %if.then46
	movl	nextP_tr_fld, %eax
	addl	$1, %eax
	movl	%eax, nextP_tr_fld
.LBB102_9:                              # %if.end48
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB102_12
# %bb.10:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$1, 2888(%rax)
	je	.LBB102_12
# %bb.11:                               # %if.then52
	movq	img, %rax
	movl	$0, 24(%rax)
.LBB102_12:                             # %if.end54
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB102_14
# %bb.13:                               # %if.then58
	movl	-12(%rbp), %edi
	callq	setbitscount
.LBB102_14:                             # %if.end59
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB102_16
# %bb.15:                               # %if.then62
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB102_16:                             # %if.end65
	movq	img, %rax
	movl	$0, 72596(%rax)
	movq	enc_picture, %rax
	movl	$2, (%rax)
	movq	bottom_pic, %rdi
	callq	code_a_picture
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rdi
	addq	$812, %rdi              # imm = 0x32C
	movq	-8(%rbp), %rsi
	addq	$816, %rsi              # imm = 0x330
	movq	-8(%rbp), %rdx
	addq	$820, %rdx              # imm = 0x334
	callq	distortion_fld
	cmpl	$2008608329, -16(%rbp)  # imm = 0x77B8EE49
	jne	.LBB102_18
.LBB102_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB102_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB102_17
.Lfunc_end102:
	.size	field_picture.66, .Lfunc_end102-field_picture.66
	.cfi_endproc
                                        # -- End function
	.globl	UnifiedOneForthPix.67   # -- Begin function UnifiedOneForthPix.67
	.p2align	4, 0x90
	.type	UnifiedOneForthPix.67,@function
UnifiedOneForthPix.67:                  # @UnifiedOneForthPix.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$785716063, -108(%rbp)  # imm = 0x2ED5135F
	movq	%rdi, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	6424(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-64(%rbp), %rax
	cmpq	$0, 6448(%rax)
	jne	.LBB103_2
# %bb.1:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpq	$0, 6432(%rax)
	je	.LBB103_3
.LBB103_2:                              # %if.then
	jmp	.LBB103_266
.LBB103_3:                              # %if.end
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6432(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6432(%rax), %rcx
	jne	.LBB103_5
# %bb.4:                                # %if.then9
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB103_5:                              # %if.end10
	movq	-64(%rbp), %rdi
	addq	$6448, %rdi             # imm = 0x1930
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB103_8
# %bb.6:                                # %lor.lhs.false19
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB103_8
# %bb.7:                                # %lor.lhs.false21
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB103_11
.LBB103_8:                              # %if.then23
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6440(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6440(%rax), %rcx
	jne	.LBB103_10
# %bb.9:                                # %if.then33
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB103_10:                             # %if.end34
	movq	-64(%rbp), %rdi
	addq	$6456, %rdi             # imm = 0x1938
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
.LBB103_11:                             # %if.end42
	movq	-64(%rbp), %rax
	movq	6448(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-64(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$-4, -48(%rbp)
.LBB103_12:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_14 Depth 2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_91
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB103_12 Depth=1
	movl	$-4, -44(%rbp)
.LBB103_14:                             # %for.cond49
                                        #   Parent Loop BB103_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_89
# %bb.15:                               # %for.body54
                                        #   in Loop: Header=BB103_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB103_17
# %bb.16:                               # %cond.true
                                        #   in Loop: Header=BB103_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB103_18
.LBB103_17:                             # %cond.false
                                        #   in Loop: Header=BB103_14 Depth=2
	movl	-48(%rbp), %eax
.LBB103_18:                             # %cond.end
                                        #   in Loop: Header=BB103_14 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB103_20
# %bb.19:                               # %cond.true62
                                        #   in Loop: Header=BB103_14 Depth=2
	xorl	%eax, %eax
	jmp	.LBB103_24
.LBB103_20:                             # %cond.false63
                                        #   in Loop: Header=BB103_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB103_22
# %bb.21:                               # %cond.true68
                                        #   in Loop: Header=BB103_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB103_23
.LBB103_22:                             # %cond.false71
                                        #   in Loop: Header=BB103_14 Depth=2
	movl	-48(%rbp), %eax
.LBB103_23:                             # %cond.end72
                                        #   in Loop: Header=BB103_14 Depth=2
.LBB103_24:                             # %cond.end74
                                        #   in Loop: Header=BB103_14 Depth=2
	movl	%eax, -84(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	-104(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB103_26
# %bb.25:                               # %cond.true80
                                        #   in Loop: Header=BB103_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB103_27
.LBB103_26:                             # %cond.false83
                                        #   in Loop: Header=BB103_14 Depth=2
	movl	-44(%rbp), %edx
.LBB103_27:                             # %cond.end84
                                        #   in Loop: Header=BB103_14 Depth=2
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB103_29
# %bb.28:                               # %cond.true88
                                        #   in Loop: Header=BB103_14 Depth=2
	xorl	%edx, %edx
	jmp	.LBB103_33
.LBB103_29:                             # %cond.false89
                                        #   in Loop: Header=BB103_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB103_31
# %bb.30:                               # %cond.true94
                                        #   in Loop: Header=BB103_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB103_32
.LBB103_31:                             # %cond.false97
                                        #   in Loop: Header=BB103_14 Depth=2
	movl	-44(%rbp), %edx
.LBB103_32:                             # %cond.end98
                                        #   in Loop: Header=BB103_14 Depth=2
.LBB103_33:                             # %cond.end100
                                        #   in Loop: Header=BB103_14 Depth=2
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB103_35
# %bb.34:                               # %cond.true112
                                        #   in Loop: Header=BB103_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB103_36
.LBB103_35:                             # %cond.false115
                                        #   in Loop: Header=BB103_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB103_36:                             # %cond.end117
                                        #   in Loop: Header=BB103_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB103_38
# %bb.37:                               # %cond.true121
                                        #   in Loop: Header=BB103_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB103_42
.LBB103_38:                             # %cond.false122
                                        #   in Loop: Header=BB103_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB103_40
# %bb.39:                               # %cond.true128
                                        #   in Loop: Header=BB103_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB103_41
.LBB103_40:                             # %cond.false131
                                        #   in Loop: Header=BB103_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB103_41:                             # %cond.end133
                                        #   in Loop: Header=BB103_14 Depth=2
.LBB103_42:                             # %cond.end135
                                        #   in Loop: Header=BB103_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB103_44
# %bb.43:                               # %cond.true149
                                        #   in Loop: Header=BB103_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB103_45
.LBB103_44:                             # %cond.false152
                                        #   in Loop: Header=BB103_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB103_45:                             # %cond.end154
                                        #   in Loop: Header=BB103_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB103_47
# %bb.46:                               # %cond.true158
                                        #   in Loop: Header=BB103_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB103_51
.LBB103_47:                             # %cond.false159
                                        #   in Loop: Header=BB103_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB103_49
# %bb.48:                               # %cond.true165
                                        #   in Loop: Header=BB103_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB103_50
.LBB103_49:                             # %cond.false168
                                        #   in Loop: Header=BB103_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB103_50:                             # %cond.end170
                                        #   in Loop: Header=BB103_14 Depth=2
.LBB103_51:                             # %cond.end172
                                        #   in Loop: Header=BB103_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB103_53
# %bb.52:                               # %cond.true184
                                        #   in Loop: Header=BB103_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB103_54
.LBB103_53:                             # %cond.false187
                                        #   in Loop: Header=BB103_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB103_54:                             # %cond.end189
                                        #   in Loop: Header=BB103_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB103_56
# %bb.55:                               # %cond.true193
                                        #   in Loop: Header=BB103_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB103_60
.LBB103_56:                             # %cond.false194
                                        #   in Loop: Header=BB103_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB103_58
# %bb.57:                               # %cond.true200
                                        #   in Loop: Header=BB103_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB103_59
.LBB103_58:                             # %cond.false203
                                        #   in Loop: Header=BB103_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB103_59:                             # %cond.end205
                                        #   in Loop: Header=BB103_14 Depth=2
.LBB103_60:                             # %cond.end207
                                        #   in Loop: Header=BB103_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB103_62
# %bb.61:                               # %cond.true222
                                        #   in Loop: Header=BB103_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB103_63
.LBB103_62:                             # %cond.false225
                                        #   in Loop: Header=BB103_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB103_63:                             # %cond.end227
                                        #   in Loop: Header=BB103_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB103_65
# %bb.64:                               # %cond.true231
                                        #   in Loop: Header=BB103_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB103_69
.LBB103_65:                             # %cond.false232
                                        #   in Loop: Header=BB103_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB103_67
# %bb.66:                               # %cond.true238
                                        #   in Loop: Header=BB103_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB103_68
.LBB103_67:                             # %cond.false241
                                        #   in Loop: Header=BB103_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB103_68:                             # %cond.end243
                                        #   in Loop: Header=BB103_14 Depth=2
.LBB103_69:                             # %cond.end245
                                        #   in Loop: Header=BB103_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB103_71
# %bb.70:                               # %cond.true257
                                        #   in Loop: Header=BB103_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB103_72
.LBB103_71:                             # %cond.false260
                                        #   in Loop: Header=BB103_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB103_72:                             # %cond.end262
                                        #   in Loop: Header=BB103_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB103_74
# %bb.73:                               # %cond.true266
                                        #   in Loop: Header=BB103_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB103_78
.LBB103_74:                             # %cond.false267
                                        #   in Loop: Header=BB103_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB103_76
# %bb.75:                               # %cond.true273
                                        #   in Loop: Header=BB103_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB103_77
.LBB103_76:                             # %cond.false276
                                        #   in Loop: Header=BB103_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB103_77:                             # %cond.end278
                                        #   in Loop: Header=BB103_14 Depth=2
.LBB103_78:                             # %cond.end280
                                        #   in Loop: Header=BB103_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	%eax, -88(%rbp)
	movq	-104(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB103_80
# %bb.79:                               # %cond.true294
                                        #   in Loop: Header=BB103_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB103_81
.LBB103_80:                             # %cond.false297
                                        #   in Loop: Header=BB103_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB103_81:                             # %cond.end298
                                        #   in Loop: Header=BB103_14 Depth=2
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB103_83
# %bb.82:                               # %cond.true302
                                        #   in Loop: Header=BB103_14 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB103_87
.LBB103_83:                             # %cond.false303
                                        #   in Loop: Header=BB103_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB103_85
# %bb.84:                               # %cond.true308
                                        #   in Loop: Header=BB103_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB103_86
.LBB103_85:                             # %cond.false311
                                        #   in Loop: Header=BB103_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB103_86:                             # %cond.end312
                                        #   in Loop: Header=BB103_14 Depth=2
.LBB103_87:                             # %cond.end314
                                        #   in Loop: Header=BB103_14 Depth=2
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	shll	$10, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-88(%rbp), %eax
	shll	$5, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.88:                               # %for.inc
                                        #   in Loop: Header=BB103_14 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB103_14
.LBB103_89:                             # %for.end
                                        #   in Loop: Header=BB103_12 Depth=1
	jmp	.LBB103_90
.LBB103_90:                             # %for.inc336
                                        #   in Loop: Header=BB103_12 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB103_12
.LBB103_91:                             # %for.end338
	movl	$0, -44(%rbp)
.LBB103_92:                             # %for.cond339
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_94 Depth 2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$8, %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_132
# %bb.93:                               # %for.body345
                                        #   in Loop: Header=BB103_92 Depth=1
	movl	$0, -48(%rbp)
.LBB103_94:                             # %for.cond346
                                        #   Parent Loop BB103_92 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_130
# %bb.95:                               # %for.body351
                                        #   in Loop: Header=BB103_94 Depth=2
	movl	-48(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -124(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	img4Y_tmp, %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	img4Y_tmp, %rdx
	movl	-92(%rbp), %esi
	movl	-48(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB103_97
# %bb.96:                               # %cond.true363
                                        #   in Loop: Header=BB103_94 Depth=2
	movl	-92(%rbp), %esi
	jmp	.LBB103_98
.LBB103_97:                             # %cond.false364
                                        #   in Loop: Header=BB103_94 Depth=2
	movl	-48(%rbp), %esi
	addl	$1, %esi
.LBB103_98:                             # %cond.end366
                                        #   in Loop: Header=BB103_94 Depth=2
	xorl	%edi, %edi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$1, %esi
	cmpl	%esi, %edi
	jle	.LBB103_100
# %bb.99:                               # %cond.true377
                                        #   in Loop: Header=BB103_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB103_101
.LBB103_100:                            # %cond.false378
                                        #   in Loop: Header=BB103_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$1, %esi
.LBB103_101:                            # %cond.end380
                                        #   in Loop: Header=BB103_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-92(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB103_103
# %bb.102:                              # %cond.true389
                                        #   in Loop: Header=BB103_94 Depth=2
	movl	-92(%rbp), %edi
	jmp	.LBB103_104
.LBB103_103:                            # %cond.false390
                                        #   in Loop: Header=BB103_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$2, %edi
.LBB103_104:                            # %cond.end392
                                        #   in Loop: Header=BB103_94 Depth=2
	xorl	%ebx, %ebx
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$2, %esi
	cmpl	%esi, %ebx
	jle	.LBB103_106
# %bb.105:                              # %cond.true404
                                        #   in Loop: Header=BB103_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB103_107
.LBB103_106:                            # %cond.false405
                                        #   in Loop: Header=BB103_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$2, %esi
.LBB103_107:                            # %cond.end407
                                        #   in Loop: Header=BB103_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-92(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB103_109
# %bb.108:                              # %cond.true416
                                        #   in Loop: Header=BB103_94 Depth=2
	movl	-92(%rbp), %edi
	jmp	.LBB103_110
.LBB103_109:                            # %cond.false417
                                        #   in Loop: Header=BB103_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$3, %edi
.LBB103_110:                            # %cond.end419
                                        #   in Loop: Header=BB103_94 Depth=2
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -88(%rbp)
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	movl	-44(%rbp), %r8d
	subl	$8, %r8d
	shll	$1, %r8d
	movq	img, %rax
	movl	72684(%rax), %ebx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
	cmpl	%eax, %ebx
	jge	.LBB103_112
# %bb.111:                              # %cond.true440
                                        #   in Loop: Header=BB103_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB103_113
.LBB103_112:                            # %cond.false442
                                        #   in Loop: Header=BB103_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB103_113:                            # %cond.end449
                                        #   in Loop: Header=BB103_94 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB103_115
# %bb.114:                              # %cond.true453
                                        #   in Loop: Header=BB103_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB103_119
.LBB103_115:                            # %cond.false454
                                        #   in Loop: Header=BB103_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %ecx
	jge	.LBB103_117
# %bb.116:                              # %cond.true464
                                        #   in Loop: Header=BB103_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB103_118
.LBB103_117:                            # %cond.false466
                                        #   in Loop: Header=BB103_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB103_118:                            # %cond.end473
                                        #   in Loop: Header=BB103_94 Depth=2
.LBB103_119:                            # %cond.end475
                                        #   in Loop: Header=BB103_94 Depth=2
	movl	%r8d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	addl	$2, %esi
	movl	-44(%rbp), %ecx
	subl	$8, %ecx
	shll	$1, %ecx
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB103_121
# %bb.120:                              # %cond.true488
                                        #   in Loop: Header=BB103_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB103_122
.LBB103_121:                            # %cond.false490
                                        #   in Loop: Header=BB103_94 Depth=2
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB103_122:                            # %cond.end493
                                        #   in Loop: Header=BB103_94 Depth=2
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB103_124
# %bb.123:                              # %cond.true497
                                        #   in Loop: Header=BB103_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB103_128
.LBB103_124:                            # %cond.false498
                                        #   in Loop: Header=BB103_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB103_126
# %bb.125:                              # %cond.true504
                                        #   in Loop: Header=BB103_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB103_127
.LBB103_126:                            # %cond.false506
                                        #   in Loop: Header=BB103_94 Depth=2
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB103_127:                            # %cond.end509
                                        #   in Loop: Header=BB103_94 Depth=2
.LBB103_128:                            # %cond.end511
                                        #   in Loop: Header=BB103_94 Depth=2
	movl	%ecx, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.129:                              # %for.inc514
                                        #   in Loop: Header=BB103_94 Depth=2
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB103_94
.LBB103_130:                            # %for.end516
                                        #   in Loop: Header=BB103_92 Depth=1
	jmp	.LBB103_131
.LBB103_131:                            # %for.inc517
                                        #   in Loop: Header=BB103_92 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB103_92
.LBB103_132:                            # %for.end519
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -68(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -48(%rbp)
.LBB103_133:                            # %for.cond528
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_135 Depth 2
	movl	-48(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_161
# %bb.134:                              # %for.body532
                                        #   in Loop: Header=BB103_133 Depth=1
	movl	$0, -44(%rbp)
.LBB103_135:                            # %for.cond533
                                        #   Parent Loop BB103_133 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_159
# %bb.136:                              # %for.body537
                                        #   in Loop: Header=BB103_135 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r15d
	subl	$16, %r15d
	movl	-44(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_138
# %bb.137:                              # %cond.true551
                                        #   in Loop: Header=BB103_135 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB103_139
.LBB103_138:                            # %cond.false553
                                        #   in Loop: Header=BB103_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB103_139:                            # %cond.end555
                                        #   in Loop: Header=BB103_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB103_141
# %bb.140:                              # %cond.true565
                                        #   in Loop: Header=BB103_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB103_145
.LBB103_141:                            # %cond.false567
                                        #   in Loop: Header=BB103_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_143
# %bb.142:                              # %cond.true577
                                        #   in Loop: Header=BB103_135 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB103_144
.LBB103_143:                            # %cond.false579
                                        #   in Loop: Header=BB103_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB103_144:                            # %cond.end581
                                        #   in Loop: Header=BB103_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB103_145:                            # %cond.end589
                                        #   in Loop: Header=BB103_135 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB103_147
# %bb.146:                              # %cond.true593
                                        #   in Loop: Header=BB103_135 Depth=2
	xorl	%eax, %eax
	jmp	.LBB103_157
.LBB103_147:                            # %cond.false594
                                        #   in Loop: Header=BB103_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_149
# %bb.148:                              # %cond.true605
                                        #   in Loop: Header=BB103_135 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB103_150
.LBB103_149:                            # %cond.false607
                                        #   in Loop: Header=BB103_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB103_150:                            # %cond.end609
                                        #   in Loop: Header=BB103_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB103_152
# %bb.151:                              # %cond.true619
                                        #   in Loop: Header=BB103_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB103_156
.LBB103_152:                            # %cond.false621
                                        #   in Loop: Header=BB103_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_154
# %bb.153:                              # %cond.true631
                                        #   in Loop: Header=BB103_135 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB103_155
.LBB103_154:                            # %cond.false633
                                        #   in Loop: Header=BB103_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB103_155:                            # %cond.end635
                                        #   in Loop: Header=BB103_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB103_156:                            # %cond.end643
                                        #   in Loop: Header=BB103_135 Depth=2
.LBB103_157:                            # %cond.end645
                                        #   in Loop: Header=BB103_135 Depth=2
	movq	%r14, %rdi
	movl	%r15d, %esi
	movl	%r12d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.158:                              # %for.inc648
                                        #   in Loop: Header=BB103_135 Depth=2
	movl	-44(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB103_135
.LBB103_159:                            # %for.end650
                                        #   in Loop: Header=BB103_133 Depth=1
	jmp	.LBB103_160
.LBB103_160:                            # %for.inc651
                                        #   in Loop: Header=BB103_133 Depth=1
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB103_133
.LBB103_161:                            # %for.end653
	movl	$0, -44(%rbp)
.LBB103_162:                            # %for.cond654
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_164 Depth 2
	movl	-44(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_265
# %bb.163:                              # %for.body658
                                        #   in Loop: Header=BB103_162 Depth=1
	movl	$0, -48(%rbp)
.LBB103_164:                            # %for.cond659
                                        #   Parent Loop BB103_162 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_263
# %bb.165:                              # %for.body663
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB103_188
# %bb.166:                              # %if.then666
                                        #   in Loop: Header=BB103_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_168
# %bb.167:                              # %cond.true679
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB103_169
.LBB103_168:                            # %cond.false681
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB103_169:                            # %cond.end683
                                        #   in Loop: Header=BB103_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB103_171
# %bb.170:                              # %cond.true694
                                        #   in Loop: Header=BB103_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB103_175
.LBB103_171:                            # %cond.false696
                                        #   in Loop: Header=BB103_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_173
# %bb.172:                              # %cond.true705
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB103_174
.LBB103_173:                            # %cond.false707
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB103_174:                            # %cond.end709
                                        #   in Loop: Header=BB103_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB103_175:                            # %cond.end718
                                        #   in Loop: Header=BB103_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB103_177
# %bb.176:                              # %cond.true722
                                        #   in Loop: Header=BB103_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB103_187
.LBB103_177:                            # %cond.false723
                                        #   in Loop: Header=BB103_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_179
# %bb.178:                              # %cond.true733
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB103_180
.LBB103_179:                            # %cond.false735
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB103_180:                            # %cond.end737
                                        #   in Loop: Header=BB103_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB103_182
# %bb.181:                              # %cond.true748
                                        #   in Loop: Header=BB103_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB103_186
.LBB103_182:                            # %cond.false750
                                        #   in Loop: Header=BB103_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_184
# %bb.183:                              # %cond.true759
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB103_185
.LBB103_184:                            # %cond.false761
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB103_185:                            # %cond.end763
                                        #   in Loop: Header=BB103_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB103_186:                            # %cond.end772
                                        #   in Loop: Header=BB103_164 Depth=2
.LBB103_187:                            # %cond.end774
                                        #   in Loop: Header=BB103_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB103_261
.LBB103_188:                            # %if.else
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB103_190
# %bb.189:                              # %land.lhs.true
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	je	.LBB103_192
.LBB103_190:                            # %lor.lhs.false783
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$2, %edx
	jne	.LBB103_226
# %bb.191:                              # %land.lhs.true787
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$3, %edx
	jne	.LBB103_226
.LBB103_192:                            # %if.then791
                                        #   in Loop: Header=BB103_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_194
# %bb.193:                              # %cond.true801
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB103_195
.LBB103_194:                            # %cond.false803
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB103_195:                            # %cond.end805
                                        #   in Loop: Header=BB103_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_197
# %bb.196:                              # %cond.true814
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB103_198
.LBB103_197:                            # %cond.false816
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB103_198:                            # %cond.end818
                                        #   in Loop: Header=BB103_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB103_200
# %bb.199:                              # %cond.true830
                                        #   in Loop: Header=BB103_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB103_207
.LBB103_200:                            # %cond.false832
                                        #   in Loop: Header=BB103_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_202
# %bb.201:                              # %cond.true838
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB103_203
.LBB103_202:                            # %cond.false840
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB103_203:                            # %cond.end842
                                        #   in Loop: Header=BB103_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_205
# %bb.204:                              # %cond.true851
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB103_206
.LBB103_205:                            # %cond.false853
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB103_206:                            # %cond.end855
                                        #   in Loop: Header=BB103_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB103_207:                            # %cond.end865
                                        #   in Loop: Header=BB103_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB103_209
# %bb.208:                              # %cond.true869
                                        #   in Loop: Header=BB103_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB103_225
.LBB103_209:                            # %cond.false870
                                        #   in Loop: Header=BB103_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_211
# %bb.210:                              # %cond.true877
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB103_212
.LBB103_211:                            # %cond.false879
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB103_212:                            # %cond.end881
                                        #   in Loop: Header=BB103_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_214
# %bb.213:                              # %cond.true890
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB103_215
.LBB103_214:                            # %cond.false892
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB103_215:                            # %cond.end894
                                        #   in Loop: Header=BB103_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB103_217
# %bb.216:                              # %cond.true906
                                        #   in Loop: Header=BB103_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB103_224
.LBB103_217:                            # %cond.false908
                                        #   in Loop: Header=BB103_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_219
# %bb.218:                              # %cond.true914
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB103_220
.LBB103_219:                            # %cond.false916
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB103_220:                            # %cond.end918
                                        #   in Loop: Header=BB103_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_222
# %bb.221:                              # %cond.true927
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB103_223
.LBB103_222:                            # %cond.false929
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB103_223:                            # %cond.end931
                                        #   in Loop: Header=BB103_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB103_224:                            # %cond.end941
                                        #   in Loop: Header=BB103_164 Depth=2
.LBB103_225:                            # %cond.end943
                                        #   in Loop: Header=BB103_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB103_260
.LBB103_226:                            # %if.else946
                                        #   in Loop: Header=BB103_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_228
# %bb.227:                              # %cond.true960
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB103_229
.LBB103_228:                            # %cond.false962
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB103_229:                            # %cond.end964
                                        #   in Loop: Header=BB103_164 Depth=2
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_231
# %bb.230:                              # %cond.true971
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB103_232
.LBB103_231:                            # %cond.false973
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB103_232:                            # %cond.end975
                                        #   in Loop: Header=BB103_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB103_234
# %bb.233:                              # %cond.true985
                                        #   in Loop: Header=BB103_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB103_241
.LBB103_234:                            # %cond.false987
                                        #   in Loop: Header=BB103_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_236
# %bb.235:                              # %cond.true997
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB103_237
.LBB103_236:                            # %cond.false999
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB103_237:                            # %cond.end1001
                                        #   in Loop: Header=BB103_164 Depth=2
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_239
# %bb.238:                              # %cond.true1008
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB103_240
.LBB103_239:                            # %cond.false1010
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB103_240:                            # %cond.end1012
                                        #   in Loop: Header=BB103_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB103_241:                            # %cond.end1020
                                        #   in Loop: Header=BB103_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB103_243
# %bb.242:                              # %cond.true1024
                                        #   in Loop: Header=BB103_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB103_259
.LBB103_243:                            # %cond.false1025
                                        #   in Loop: Header=BB103_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_245
# %bb.244:                              # %cond.true1036
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB103_246
.LBB103_245:                            # %cond.false1038
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB103_246:                            # %cond.end1040
                                        #   in Loop: Header=BB103_164 Depth=2
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_248
# %bb.247:                              # %cond.true1047
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB103_249
.LBB103_248:                            # %cond.false1049
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB103_249:                            # %cond.end1051
                                        #   in Loop: Header=BB103_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB103_251
# %bb.250:                              # %cond.true1061
                                        #   in Loop: Header=BB103_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB103_258
.LBB103_251:                            # %cond.false1063
                                        #   in Loop: Header=BB103_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_253
# %bb.252:                              # %cond.true1073
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB103_254
.LBB103_253:                            # %cond.false1075
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB103_254:                            # %cond.end1077
                                        #   in Loop: Header=BB103_164 Depth=2
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_256
# %bb.255:                              # %cond.true1084
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB103_257
.LBB103_256:                            # %cond.false1086
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB103_257:                            # %cond.end1088
                                        #   in Loop: Header=BB103_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB103_258:                            # %cond.end1096
                                        #   in Loop: Header=BB103_164 Depth=2
.LBB103_259:                            # %cond.end1098
                                        #   in Loop: Header=BB103_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
.LBB103_260:                            # %if.end1101
                                        #   in Loop: Header=BB103_164 Depth=2
	jmp	.LBB103_261
.LBB103_261:                            # %if.end1102
                                        #   in Loop: Header=BB103_164 Depth=2
	jmp	.LBB103_262
.LBB103_262:                            # %for.inc1103
                                        #   in Loop: Header=BB103_164 Depth=2
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB103_164
.LBB103_263:                            # %for.end1105
                                        #   in Loop: Header=BB103_162 Depth=1
	jmp	.LBB103_264
.LBB103_264:                            # %for.inc1106
                                        #   in Loop: Header=BB103_162 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB103_162
.LBB103_265:                            # %for.end1108
	movq	-80(%rbp), %rdi
	movq	-120(%rbp), %rsi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	movq	-64(%rbp), %rax
	movl	6396(%rax), %ecx
	callq	GenerateFullPelRepresentation
.LBB103_266:                            # %return
	cmpl	$785716063, -108(%rbp)  # imm = 0x2ED5135F
	jne	.LBB103_268
.LBB103_267:
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB103_268:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB103_267
.Lfunc_end103:
	.size	UnifiedOneForthPix.67, .Lfunc_end103-UnifiedOneForthPix.67
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeout_picture.68
	.type	writeout_picture.68,@function
writeout_picture.68:                    # @writeout_picture.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$45462257, -28(%rbp)    # imm = 0x2B5B2F1
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movl	$0, -8(%rbp)
.LBB104_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_3 Depth 2
	movl	-8(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB104_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB104_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	8(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB104_3:                              # %for.cond1
                                        #   Parent Loop BB104_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB104_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB104_3 Depth=2
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rdi
	movl	-4(%rbp), %esi
	callq	writeUnit
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB104_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_3
.LBB104_6:                              # %for.end
                                        #   in Loop: Header=BB104_1 Depth=1
	jmp	.LBB104_7
.LBB104_7:                              # %for.inc10
                                        #   in Loop: Header=BB104_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_1
.LBB104_8:                              # %for.end12
	cmpl	$45462257, -28(%rbp)    # imm = 0x2B5B2F1
	jne	.LBB104_10
.LBB104_9:
	xorl	%eax, %eax
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB104_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB104_9
.Lfunc_end104:
	.size	writeout_picture.68, .Lfunc_end104-writeout_picture.68
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_frame.69
.LCPI105_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_frame.69,@function
init_frame.69:                          # @init_frame.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$201354547, -16(%rbp)   # imm = 0xC006D33
	movq	last_P_no_frm, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movl	$0, -4(%rbp)
.LBB105_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %esi
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %edi
	idivl	%edi
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	idivl	%edi
	imull	%eax, %ecx
	cmpl	%ecx, %esi
	jge	.LBB105_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB105_1 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	$-1, 4(%rax)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB105_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_1
.LBB105_4:                              # %for.end
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB105_29
# %bb.5:                                # %if.then
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	input, %rdx
	movl	20(%rdx), %edx
	addl	$1, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	movl	71876(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71880(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71876(%rcx)
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB105_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB105_8
# %bb.7:                                # %if.then10
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB105_8:                              # %if.end
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	je	.LBB105_11
# %bb.9:                                # %land.lhs.true16
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB105_11
# %bb.10:                               # %if.then18
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_frm
.LBB105_11:                             # %if.end20
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB105_26
# %bb.12:                               # %if.then22
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB105_18
# %bb.13:                               # %if.then24
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB105_16
# %bb.14:                               # %land.lhs.true26
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB105_16
# %bb.15:                               # %if.then30
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB105_17
.LBB105_16:                             # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB105_17:                             # %if.end32
	jmp	.LBB105_25
.LBB105_18:                             # %if.else33
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB105_21
# %bb.19:                               # %land.lhs.true36
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB105_21
# %bb.20:                               # %if.then40
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB105_22
.LBB105_21:                             # %if.else42
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB105_22:                             # %if.end44
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB105_24
# %bb.23:                               # %if.then47
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB105_24:                             # %if.end50
	jmp	.LBB105_25
.LBB105_25:                             # %if.end51
	jmp	.LBB105_26
.LBB105_26:                             # %if.end52
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB105_28
# %bb.27:                               # %if.then54
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB105_28:                             # %if.end62
	jmp	.LBB105_72
.LBB105_29:                             # %if.else63
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	subl	$1, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	$1, -4(%rbp)
.LBB105_30:                             # %for.cond78
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jge	.LBB105_33
# %bb.31:                               # %for.body80
                                        #   in Loop: Header=BB105_30 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc88
                                        #   in Loop: Header=BB105_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_30
.LBB105_33:                             # %for.end90
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB105_36
# %bb.34:                               # %land.lhs.true93
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB105_36
# %bb.35:                               # %if.then98
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	-12(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB105_36:                             # %if.end102
	vmovsd	.LCPI105_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB105_38
# %bb.37:                               # %if.then111
	vmovsd	.LCPI105_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB105_38:                             # %if.end113
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB105_40
# %bb.39:                               # %if.then116
	movl	-12(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB105_41
.LBB105_40:                             # %if.else128
	movl	-12(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB105_41:                             # %if.end136
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-8(%rbp), %eax
	jl	.LBB105_43
# %bb.42:                               # %if.then140
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB105_43:                             # %if.end143
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB105_68
# %bb.44:                               # %land.lhs.true146
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB105_68
# %bb.45:                               # %if.then150
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB105_48
# %bb.46:                               # %land.lhs.true154
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB105_48
# %bb.47:                               # %if.then159
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB105_49
.LBB105_48:                             # %if.else161
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB105_49:                             # %if.end163
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB105_67
# %bb.50:                               # %if.then165
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB105_59
# %bb.51:                               # %land.lhs.true169
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB105_59
# %bb.52:                               # %if.then174
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB105_54
# %bb.53:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB105_58
.LBB105_54:                             # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB105_56
# %bb.55:                               # %cond.true184
	movl	$51, %eax
	jmp	.LBB105_57
.LBB105_56:                             # %cond.false185
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB105_57:                             # %cond.end
.LBB105_58:                             # %cond.end189
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB105_66
.LBB105_59:                             # %if.else192
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB105_61
# %bb.60:                               # %cond.true197
	xorl	%eax, %eax
	jmp	.LBB105_65
.LBB105_61:                             # %cond.false198
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB105_63
# %bb.62:                               # %cond.true204
	movl	$51, %eax
	jmp	.LBB105_64
.LBB105_63:                             # %cond.false205
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB105_64:                             # %cond.end209
.LBB105_65:                             # %cond.end211
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB105_66:                             # %if.end214
	jmp	.LBB105_67
.LBB105_67:                             # %if.end215
	jmp	.LBB105_71
.LBB105_68:                             # %if.else216
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB105_70
# %bb.69:                               # %if.then220
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB105_70:                             # %if.end226
	jmp	.LBB105_71
.LBB105_71:                             # %if.end227
	jmp	.LBB105_72
.LBB105_72:                             # %if.end228
	movq	img, %rax
	movl	72384(%rax), %edi
	callq	UpdateSubseqInfo
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	callq	UpdateSceneInformation
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	$0, 72504(%rax)
	movq	img, %rax
	movl	$0, 72508(%rax)
	callq	init_dec_ref_pic_marking_buffer
	cmpl	$201354547, -16(%rbp)   # imm = 0xC006D33
	jne	.LBB105_74
.LBB105_73:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB105_74:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB105_73
.Lfunc_end105:
	.size	init_frame.69, .Lfunc_end105-init_frame.69
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReadOneFrame.70
	.type	ReadOneFrame.70,@function
ReadOneFrame.70:                        # @ReadOneFrame.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	xorl	%r10d, %r10d
	movl	$100678418, -76(%rbp)   # imm = 0x6003B12
	movl	%edi, -60(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -40(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -36(%rbp)
	movl	%r9d, -32(%rbp)
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	-40(%rbp), %eax
	imull	-28(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-36(%rbp), %eax
	imull	-32(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-68(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-72(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	cltq
	movq	%rax, -56(%rbp)
	movq	input, %rax
	cmpl	$1, 3312(%rax)
	jne	.LBB106_2
# %bb.1:                                # %land.rhs
	movq	input, %rax
	cmpl	$3, 72(%rax)
	sete	%r10b
.LBB106_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -44(%rbp)
	movl	-40(%rbp), %eax
	imull	-28(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, %edi
	callq	malloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	%rax, %rcx
	jne	.LBB106_4
# %bb.3:                                # %if.then
	movabsq	$.L.str.14, %rdi
	callq	no_mem_exit
.LBB106_4:                              # %if.end
	movl	p_in, %edi
	movslq	-64(%rbp), %rsi
	xorl	%edx, %edx
	callq	lseek
	movslq	-64(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB106_6
# %bb.5:                                # %if.then18
	movabsq	$.L.str.15, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB106_6:                              # %if.end19
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movq	input, %rax
	movslq	1232(%rax), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB106_8
# %bb.7:                                # %if.then25
	movq	input, %rax
	movl	1232(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB106_8:                              # %if.end28
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movslq	-60(%rbp), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB106_10
# %bb.9:                                # %if.then34
	movq	input, %rax
	movl	1232(%rax), %ecx
	addl	-60(%rbp), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB106_10:                             # %if.end38
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB106_26
# %bb.11:                               # %if.then42
	cmpl	$0, -44(%rbp)
	je	.LBB106_13
# %bb.12:                               # %if.then43
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB106_13:                             # %if.end46
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-8(%rbp), %rdx
	callq	read
	movslq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB106_15
# %bb.14:                               # %if.then52
	movl	-8(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB106_15:                             # %if.end54
	movq	imgY_org_frm, %rdi
	movq	-24(%rbp), %rsi
	movl	-40(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	buf2img
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB106_25
# %bb.16:                               # %if.then58
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB106_18
# %bb.17:                               # %if.then64
	movl	-8(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB106_18:                             # %if.end66
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-36(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -44(%rbp)
	je	.LBB106_20
# %bb.19:                               # %if.then68
	xorl	%esi, %esi
	movl	p_in, %edi
	subq	-56(%rbp), %rsi
	movl	$1, %edx
	callq	lseek
.LBB106_20:                             # %if.end70
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB106_22
# %bb.21:                               # %if.then76
	movl	-8(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB106_22:                             # %if.end78
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-36(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -44(%rbp)
	je	.LBB106_24
# %bb.23:                               # %if.then81
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	shlq	$1, %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB106_24:                             # %if.end85
	jmp	.LBB106_25
.LBB106_25:                             # %if.end86
	jmp	.LBB106_27
.LBB106_26:                             # %if.else
	movabsq	$.L.str.18, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB106_27:                             # %if.end88
	movq	-24(%rbp), %rdi
	callq	free
	cmpl	$100678418, -76(%rbp)   # imm = 0x6003B12
	jne	.LBB106_29
.LBB106_28:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB106_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB106_28
.Lfunc_end106:
	.size	ReadOneFrame.70, .Lfunc_end106-ReadOneFrame.70
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReadOneFrame.71
	.type	ReadOneFrame.71,@function
ReadOneFrame.71:                        # @ReadOneFrame.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	xorl	%r10d, %r10d
	movl	$1729946731, -68(%rbp)  # imm = 0x671CE46B
	movl	%edi, -64(%rbp)
	movl	%esi, -60(%rbp)
	movl	%edx, -28(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -32(%rbp)
	movl	%r9d, -40(%rbp)
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -8(%rbp)
	movl	-28(%rbp), %eax
	imull	-36(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-32(%rbp), %eax
	imull	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-76(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-72(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	cltq
	movq	%rax, -56(%rbp)
	movq	input, %rax
	cmpl	$1, 3312(%rax)
	jne	.LBB107_2
# %bb.1:                                # %land.rhs
	movq	input, %rax
	cmpl	$3, 72(%rax)
	sete	%r10b
.LBB107_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	imull	-36(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, %edi
	callq	malloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	%rax, %rcx
	jne	.LBB107_4
# %bb.3:                                # %if.then
	movabsq	$.L.str.14, %rdi
	callq	no_mem_exit
.LBB107_4:                              # %if.end
	movl	p_in, %edi
	movslq	-60(%rbp), %rsi
	xorl	%edx, %edx
	callq	lseek
	movslq	-60(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB107_6
# %bb.5:                                # %if.then18
	movabsq	$.L.str.15, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB107_6:                              # %if.end19
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movq	input, %rax
	movslq	1232(%rax), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB107_8
# %bb.7:                                # %if.then25
	movq	input, %rax
	movl	1232(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB107_8:                              # %if.end28
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movslq	-64(%rbp), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB107_10
# %bb.9:                                # %if.then34
	movq	input, %rax
	movl	1232(%rax), %ecx
	addl	-64(%rbp), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB107_10:                             # %if.end38
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB107_26
# %bb.11:                               # %if.then42
	cmpl	$0, -44(%rbp)
	je	.LBB107_13
# %bb.12:                               # %if.then43
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB107_13:                             # %if.end46
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-4(%rbp), %rdx
	callq	read
	movslq	-4(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB107_15
# %bb.14:                               # %if.then52
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB107_15:                             # %if.end54
	movq	imgY_org_frm, %rdi
	movq	-24(%rbp), %rsi
	movl	-28(%rbp), %edx
	movl	-36(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB107_25
# %bb.16:                               # %if.then58
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB107_18
# %bb.17:                               # %if.then64
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB107_18:                             # %if.end66
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-32(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -44(%rbp)
	je	.LBB107_20
# %bb.19:                               # %if.then68
	xorl	%esi, %esi
	movl	p_in, %edi
	subq	-56(%rbp), %rsi
	movl	$1, %edx
	callq	lseek
.LBB107_20:                             # %if.end70
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB107_22
# %bb.21:                               # %if.then76
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB107_22:                             # %if.end78
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-32(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -44(%rbp)
	je	.LBB107_24
# %bb.23:                               # %if.then81
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	shlq	$1, %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB107_24:                             # %if.end85
	jmp	.LBB107_25
.LBB107_25:                             # %if.end86
	jmp	.LBB107_27
.LBB107_26:                             # %if.else
	movabsq	$.L.str.18, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB107_27:                             # %if.end88
	movq	-24(%rbp), %rdi
	callq	free
	cmpl	$1729946731, -68(%rbp)  # imm = 0x671CE46B
	jne	.LBB107_29
.LBB107_28:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB107_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB107_28
.Lfunc_end107:
	.size	ReadOneFrame.71, .Lfunc_end107-ReadOneFrame.71
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function picture_structure_decision.72
.LCPI108_0:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI108_1:
	.quad	4611686018427387904     # double 2
.LCPI108_2:
	.quad	4613937818241073152     # double 3
	.text
	.p2align	4, 0x90
	.type	picture_structure_decision.72,@function
picture_structure_decision.72:          # @picture_structure_decision.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI108_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI108_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movl	$1071698931, -40(%rbp)  # imm = 0x3FE0D3F3
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -56(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI108_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$4, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -64(%rbp)
	movq	-16(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-16(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -48(%rbp)
	movq	-24(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-24(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -44(%rbp)
	movq	-24(%rbp), %rax
	movl	808(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	808(%rcx), %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -32(%rbp)
	vmovss	-48(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-44(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	vmovsd	-64(%rbp), %xmm2        # xmm2 = mem[0],zero
	callq	decide_fld_frame
	movl	%eax, %ebx
	cmpl	$1071698931, -40(%rbp)  # imm = 0x3FE0D3F3
	jne	.LBB108_2
.LBB108_1:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB108_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB108_1
.Lfunc_end108:
	.size	picture_structure_decision.72, .Lfunc_end108-picture_structure_decision.72
	.cfi_endproc
                                        # -- End function
	.globl	MbAffPostProc.73        # -- Begin function MbAffPostProc.73
	.p2align	4, 0x90
	.type	MbAffPostProc.73,@function
MbAffPostProc.73:                       # @MbAffPostProc.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1072, %rsp             # imm = 0x430
	movl	$361566839, -44(%rbp)   # imm = 0x158D1277
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB109_44
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB109_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_5 Depth 2
                                        #       Child Loop BB109_7 Depth 3
                                        #     Child Loop BB109_13 Depth 2
                                        #       Child Loop BB109_15 Depth 3
                                        #     Child Loop BB109_21 Depth 2
                                        #       Child Loop BB109_23 Depth 3
                                        #         Child Loop BB109_25 Depth 4
                                        #       Child Loop BB109_31 Depth 3
                                        #         Child Loop BB109_33 Depth 4
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB109_43
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB109_2 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB109_41
# %bb.4:                                # %if.then4
                                        #   in Loop: Header=BB109_2 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	leaq	-12(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -8(%rbp)
.LBB109_5:                              # %for.cond5
                                        #   Parent Loop BB109_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_7 Depth 3
	cmpl	$32, -8(%rbp)
	jge	.LBB109_12
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB109_5 Depth=2
	movl	$0, -4(%rbp)
.LBB109_7:                              # %for.cond8
                                        #   Parent Loop BB109_2 Depth=1
                                        #     Parent Loop BB109_5 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB109_10
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB109_7 Depth=3
	movq	-32(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB109_7 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_7
.LBB109_10:                             # %for.end
                                        #   in Loop: Header=BB109_5 Depth=2
	jmp	.LBB109_11
.LBB109_11:                             # %for.inc20
                                        #   in Loop: Header=BB109_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_5
.LBB109_12:                             # %for.end22
                                        #   in Loop: Header=BB109_2 Depth=1
	movl	$0, -8(%rbp)
.LBB109_13:                             # %for.cond23
                                        #   Parent Loop BB109_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_15 Depth 3
	cmpl	$16, -8(%rbp)
	jge	.LBB109_20
# %bb.14:                               # %for.body25
                                        #   in Loop: Header=BB109_13 Depth=2
	movl	$0, -4(%rbp)
.LBB109_15:                             # %for.cond26
                                        #   Parent Loop BB109_2 Depth=1
                                        #     Parent Loop BB109_13 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB109_18
# %bb.16:                               # %for.body28
                                        #   in Loop: Header=BB109_15 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-12(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-12(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.17:                               # %for.inc52
                                        #   in Loop: Header=BB109_15 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_15
.LBB109_18:                             # %for.end54
                                        #   in Loop: Header=BB109_13 Depth=2
	jmp	.LBB109_19
.LBB109_19:                             # %for.inc55
                                        #   in Loop: Header=BB109_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_13
.LBB109_20:                             # %for.end57
                                        #   in Loop: Header=BB109_2 Depth=1
	movl	-16(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72708(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -16(%rbp)
	movl	-12(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72712(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -12(%rbp)
	movl	$0, -24(%rbp)
.LBB109_21:                             # %for.cond61
                                        #   Parent Loop BB109_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_23 Depth 3
                                        #         Child Loop BB109_25 Depth 4
                                        #       Child Loop BB109_31 Depth 3
                                        #         Child Loop BB109_33 Depth 4
	cmpl	$2, -24(%rbp)
	jge	.LBB109_40
# %bb.22:                               # %for.body63
                                        #   in Loop: Header=BB109_21 Depth=2
	movl	$0, -8(%rbp)
.LBB109_23:                             # %for.cond64
                                        #   Parent Loop BB109_2 Depth=1
                                        #     Parent Loop BB109_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB109_25 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_30
# %bb.24:                               # %for.body68
                                        #   in Loop: Header=BB109_23 Depth=3
	movl	$0, -4(%rbp)
.LBB109_25:                             # %for.cond69
                                        #   Parent Loop BB109_2 Depth=1
                                        #     Parent Loop BB109_21 Depth=2
                                        #       Parent Loop BB109_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB109_28
# %bb.26:                               # %for.body72
                                        #   in Loop: Header=BB109_25 Depth=4
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.27:                               # %for.inc85
                                        #   in Loop: Header=BB109_25 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_25
.LBB109_28:                             # %for.end87
                                        #   in Loop: Header=BB109_23 Depth=3
	jmp	.LBB109_29
.LBB109_29:                             # %for.inc88
                                        #   in Loop: Header=BB109_23 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_23
.LBB109_30:                             # %for.end90
                                        #   in Loop: Header=BB109_21 Depth=2
	movl	$0, -8(%rbp)
.LBB109_31:                             # %for.cond91
                                        #   Parent Loop BB109_2 Depth=1
                                        #     Parent Loop BB109_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB109_33 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB109_38
# %bb.32:                               # %for.body94
                                        #   in Loop: Header=BB109_31 Depth=3
	movl	$0, -4(%rbp)
.LBB109_33:                             # %for.cond95
                                        #   Parent Loop BB109_2 Depth=1
                                        #     Parent Loop BB109_21 Depth=2
                                        #       Parent Loop BB109_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB109_36
# %bb.34:                               # %for.body98
                                        #   in Loop: Header=BB109_33 Depth=4
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-40(%rbp), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	movq	img, %rdx
	addl	72712(%rdx), %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-40(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.35:                               # %for.inc128
                                        #   in Loop: Header=BB109_33 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_33
.LBB109_36:                             # %for.end130
                                        #   in Loop: Header=BB109_31 Depth=3
	jmp	.LBB109_37
.LBB109_37:                             # %for.inc131
                                        #   in Loop: Header=BB109_31 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_31
.LBB109_38:                             # %for.end133
                                        #   in Loop: Header=BB109_21 Depth=2
	jmp	.LBB109_39
.LBB109_39:                             # %for.inc134
                                        #   in Loop: Header=BB109_21 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_21
.LBB109_40:                             # %for.end136
                                        #   in Loop: Header=BB109_2 Depth=1
	jmp	.LBB109_41
.LBB109_41:                             # %if.end
                                        #   in Loop: Header=BB109_2 Depth=1
	jmp	.LBB109_42
.LBB109_42:                             # %for.inc137
                                        #   in Loop: Header=BB109_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_2
.LBB109_43:                             # %for.end139
	jmp	.LBB109_67
.LBB109_44:                             # %if.else
	movl	$0, -20(%rbp)
.LBB109_45:                             # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_48 Depth 2
                                        #       Child Loop BB109_50 Depth 3
                                        #     Child Loop BB109_56 Depth 2
                                        #       Child Loop BB109_58 Depth 3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB109_66
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB109_45 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB109_64
# %bb.47:                               # %if.then148
                                        #   in Loop: Header=BB109_45 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	leaq	-12(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -8(%rbp)
.LBB109_48:                             # %for.cond149
                                        #   Parent Loop BB109_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_50 Depth 3
	cmpl	$32, -8(%rbp)
	jge	.LBB109_55
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB109_48 Depth=2
	movl	$0, -4(%rbp)
.LBB109_50:                             # %for.cond152
                                        #   Parent Loop BB109_45 Depth=1
                                        #     Parent Loop BB109_48 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB109_53
# %bb.51:                               # %for.body154
                                        #   in Loop: Header=BB109_50 Depth=3
	movq	-32(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.52:                               # %for.inc165
                                        #   in Loop: Header=BB109_50 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_50
.LBB109_53:                             # %for.end167
                                        #   in Loop: Header=BB109_48 Depth=2
	jmp	.LBB109_54
.LBB109_54:                             # %for.inc168
                                        #   in Loop: Header=BB109_48 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_48
.LBB109_55:                             # %for.end170
                                        #   in Loop: Header=BB109_45 Depth=1
	movl	$0, -8(%rbp)
.LBB109_56:                             # %for.cond171
                                        #   Parent Loop BB109_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_58 Depth 3
	cmpl	$16, -8(%rbp)
	jge	.LBB109_63
# %bb.57:                               # %for.body173
                                        #   in Loop: Header=BB109_56 Depth=2
	movl	$0, -4(%rbp)
.LBB109_58:                             # %for.cond174
                                        #   Parent Loop BB109_45 Depth=1
                                        #     Parent Loop BB109_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB109_61
# %bb.59:                               # %for.body176
                                        #   in Loop: Header=BB109_58 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-12(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-12(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc201
                                        #   in Loop: Header=BB109_58 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_58
.LBB109_61:                             # %for.end203
                                        #   in Loop: Header=BB109_56 Depth=2
	jmp	.LBB109_62
.LBB109_62:                             # %for.inc204
                                        #   in Loop: Header=BB109_56 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_56
.LBB109_63:                             # %for.end206
                                        #   in Loop: Header=BB109_45 Depth=1
	jmp	.LBB109_64
.LBB109_64:                             # %if.end207
                                        #   in Loop: Header=BB109_45 Depth=1
	jmp	.LBB109_65
.LBB109_65:                             # %for.inc208
                                        #   in Loop: Header=BB109_45 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_45
.LBB109_66:                             # %for.end210
	jmp	.LBB109_67
.LBB109_67:                             # %if.end211
	cmpl	$361566839, -44(%rbp)   # imm = 0x158D1277
	jne	.LBB109_69
.LBB109_68:
	addq	$1072, %rsp             # imm = 0x430
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB109_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB109_68
.Lfunc_end109:
	.size	MbAffPostProc.73, .Lfunc_end109-MbAffPostProc.73
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportNALNonVLCBits.74
	.type	ReportNALNonVLCBits.74,@function
ReportNALNonVLCBits.74:                 # @ReportNALNonVLCBits.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1941075759, -4(%rbp)   # imm = 0x73B2772F
	movl	%edi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	1492(%rax), %edx
	movabsq	$.L.str.5, %rdi
	movb	$0, %al
	callq	printf
	cmpl	$1941075759, -4(%rbp)   # imm = 0x73B2772F
	jne	.LBB110_2
.LBB110_1:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB110_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB110_1
.Lfunc_end110:
	.size	ReportNALNonVLCBits.74, .Lfunc_end110-ReportNALNonVLCBits.74
	.cfi_endproc
                                        # -- End function
	.globl	copy_rdopt_data.75      # -- Begin function copy_rdopt_data.75
	.p2align	4, 0x90
	.type	copy_rdopt_data.75,@function
copy_rdopt_data.75:                     # @copy_rdopt_data.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1233524297, -48(%rbp)  # imm = 0x49861649
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB111_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB111_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB111_4
.LBB111_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB111_4
.LBB111_4:                              # %cond.end
	movl	%ecx, -44(%rbp)
	movq	rdopt, %rax
	movl	3224(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	rdopt, %rax
	movl	3096(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	rdopt, %rax
	movl	3208(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	rdopt, %rax
	movq	3216(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movq	rdopt, %rax
	movl	3100(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	movq	rdopt, %rax
	movl	3328(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	rdopt, %rax
	movl	3348(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	rdopt, %rax
	movl	3352(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 596(%rcx)
	movq	rdopt, %rax
	movl	3344(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	rdopt, %rax
	movl	3332(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	$0, -4(%rbp)
.LBB111_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_7 Depth 2
                                        #       Child Loop BB111_9 Depth 3
                                        #         Child Loop BB111_11 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB111_20
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB111_5 Depth=1
	movl	$0, -8(%rbp)
.LBB111_7:                              # %for.cond17
                                        #   Parent Loop BB111_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB111_9 Depth 3
                                        #         Child Loop BB111_11 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB111_18
# %bb.8:                                # %for.body20
                                        #   in Loop: Header=BB111_7 Depth=2
	movl	$0, -12(%rbp)
.LBB111_9:                              # %for.cond21
                                        #   Parent Loop BB111_5 Depth=1
                                        #     Parent Loop BB111_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB111_11 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB111_16
# %bb.10:                               # %for.body24
                                        #   in Loop: Header=BB111_9 Depth=3
	movl	$0, -16(%rbp)
.LBB111_11:                             # %for.cond25
                                        #   Parent Loop BB111_5 Depth=1
                                        #     Parent Loop BB111_7 Depth=2
                                        #       Parent Loop BB111_9 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB111_14
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB111_11 Depth=4
	movq	rdopt, %rax
	movq	3080(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB111_11 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB111_11
.LBB111_14:                             # %for.end
                                        #   in Loop: Header=BB111_9 Depth=3
	jmp	.LBB111_15
.LBB111_15:                             # %for.inc46
                                        #   in Loop: Header=BB111_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_9
.LBB111_16:                             # %for.end48
                                        #   in Loop: Header=BB111_7 Depth=2
	jmp	.LBB111_17
.LBB111_17:                             # %for.inc49
                                        #   in Loop: Header=BB111_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_7
.LBB111_18:                             # %for.end51
                                        #   in Loop: Header=BB111_5 Depth=1
	jmp	.LBB111_19
.LBB111_19:                             # %for.inc52
                                        #   in Loop: Header=BB111_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_5
.LBB111_20:                             # %for.end54
	movl	$0, -4(%rbp)
.LBB111_21:                             # %for.cond55
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_23 Depth 2
                                        #       Child Loop BB111_25 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB111_32
# %bb.22:                               # %for.body58
                                        #   in Loop: Header=BB111_21 Depth=1
	movl	$0, -12(%rbp)
.LBB111_23:                             # %for.cond59
                                        #   Parent Loop BB111_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB111_25 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB111_30
# %bb.24:                               # %for.body62
                                        #   in Loop: Header=BB111_23 Depth=2
	movl	$0, -16(%rbp)
.LBB111_25:                             # %for.cond63
                                        #   Parent Loop BB111_21 Depth=1
                                        #     Parent Loop BB111_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB111_28
# %bb.26:                               # %for.body66
                                        #   in Loop: Header=BB111_25 Depth=3
	movq	rdopt, %rax
	movq	3088(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc80
                                        #   in Loop: Header=BB111_25 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB111_25
.LBB111_28:                             # %for.end82
                                        #   in Loop: Header=BB111_23 Depth=2
	jmp	.LBB111_29
.LBB111_29:                             # %for.inc83
                                        #   in Loop: Header=BB111_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_23
.LBB111_30:                             # %for.end85
                                        #   in Loop: Header=BB111_21 Depth=1
	jmp	.LBB111_31
.LBB111_31:                             # %for.inc86
                                        #   in Loop: Header=BB111_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_21
.LBB111_32:                             # %for.end88
	movl	$0, -8(%rbp)
.LBB111_33:                             # %for.cond89
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_35 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB111_42
# %bb.34:                               # %for.body92
                                        #   in Loop: Header=BB111_33 Depth=1
	movl	$0, -4(%rbp)
.LBB111_35:                             # %for.cond93
                                        #   Parent Loop BB111_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB111_40
# %bb.36:                               # %for.body96
                                        #   in Loop: Header=BB111_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-44(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -36(%rbp)
	je	.LBB111_38
# %bb.37:                               # %if.then
                                        #   in Loop: Header=BB111_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB111_38:                             # %if.end
                                        #   in Loop: Header=BB111_35 Depth=2
	jmp	.LBB111_39
.LBB111_39:                             # %for.inc176
                                        #   in Loop: Header=BB111_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_35
.LBB111_40:                             # %for.end178
                                        #   in Loop: Header=BB111_33 Depth=1
	jmp	.LBB111_41
.LBB111_41:                             # %for.inc179
                                        #   in Loop: Header=BB111_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_33
.LBB111_42:                             # %for.end181
	movl	$0, -8(%rbp)
.LBB111_43:                             # %for.cond182
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_45 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB111_50
# %bb.44:                               # %for.body185
                                        #   in Loop: Header=BB111_43 Depth=1
	movl	$0, -4(%rbp)
.LBB111_45:                             # %for.cond186
                                        #   Parent Loop BB111_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB111_48
# %bb.46:                               # %for.body189
                                        #   in Loop: Header=BB111_45 Depth=2
	movq	rdopt, %rax
	addq	$8, %rax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.47:                               # %for.inc201
                                        #   in Loop: Header=BB111_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_45
.LBB111_48:                             # %for.end203
                                        #   in Loop: Header=BB111_43 Depth=1
	jmp	.LBB111_49
.LBB111_49:                             # %for.inc204
                                        #   in Loop: Header=BB111_43 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_43
.LBB111_50:                             # %for.end206
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB111_60
# %bb.51:                               # %if.then209
	movl	$0, -8(%rbp)
.LBB111_52:                             # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_54 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB111_59
# %bb.53:                               # %for.body213
                                        #   in Loop: Header=BB111_52 Depth=1
	movl	$0, -4(%rbp)
.LBB111_54:                             # %for.cond214
                                        #   Parent Loop BB111_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB111_57
# %bb.55:                               # %for.body217
                                        #   in Loop: Header=BB111_54 Depth=2
	movq	rdopt, %rax
	addq	$1032, %rax             # imm = 0x408
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	rdopt, %rax
	addq	$2056, %rax             # imm = 0x808
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc245
                                        #   in Loop: Header=BB111_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_54
.LBB111_57:                             # %for.end247
                                        #   in Loop: Header=BB111_52 Depth=1
	jmp	.LBB111_58
.LBB111_58:                             # %for.inc248
                                        #   in Loop: Header=BB111_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_52
.LBB111_59:                             # %for.end250
	jmp	.LBB111_60
.LBB111_60:                             # %if.end251
	movl	$0, -4(%rbp)
.LBB111_61:                             # %for.cond252
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB111_64
# %bb.62:                               # %for.body255
                                        #   in Loop: Header=BB111_61 Depth=1
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3104(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3120(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.63:                               # %for.inc268
                                        #   in Loop: Header=BB111_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_61
.LBB111_64:                             # %for.end270
	movq	rdopt, %rax
	movl	3336(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
	cmpl	$8, -28(%rbp)
	jne	.LBB111_74
# %bb.65:                               # %if.then274
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB111_66:                             # %for.cond276
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_68 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB111_73
# %bb.67:                               # %for.body281
                                        #   in Loop: Header=BB111_66 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB111_68:                             # %for.cond283
                                        #   Parent Loop BB111_66 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB111_71
# %bb.69:                               # %for.body288
                                        #   in Loop: Header=BB111_68 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.70:                               # %for.inc303
                                        #   in Loop: Header=BB111_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_68
.LBB111_71:                             # %for.end306
                                        #   in Loop: Header=BB111_66 Depth=1
	jmp	.LBB111_72
.LBB111_72:                             # %for.inc307
                                        #   in Loop: Header=BB111_66 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_66
.LBB111_73:                             # %for.end309
	jmp	.LBB111_98
.LBB111_74:                             # %if.else
	cmpl	$9, -28(%rbp)
	je	.LBB111_85
# %bb.75:                               # %land.lhs.true312
	cmpl	$13, -28(%rbp)
	je	.LBB111_85
# %bb.76:                               # %if.then315
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB111_77:                             # %for.cond317
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_79 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB111_84
# %bb.78:                               # %for.body322
                                        #   in Loop: Header=BB111_77 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB111_79:                             # %for.cond324
                                        #   Parent Loop BB111_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB111_82
# %bb.80:                               # %for.body329
                                        #   in Loop: Header=BB111_79 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.81:                               # %for.inc338
                                        #   in Loop: Header=BB111_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_79
.LBB111_82:                             # %for.end341
                                        #   in Loop: Header=BB111_77 Depth=1
	jmp	.LBB111_83
.LBB111_83:                             # %for.inc342
                                        #   in Loop: Header=BB111_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_77
.LBB111_84:                             # %for.end344
	jmp	.LBB111_97
.LBB111_85:                             # %if.else345
	cmpl	$9, -28(%rbp)
	je	.LBB111_87
# %bb.86:                               # %lor.lhs.false
	cmpl	$13, -28(%rbp)
	jne	.LBB111_96
.LBB111_87:                             # %if.then350
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB111_88:                             # %for.cond352
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_90 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB111_95
# %bb.89:                               # %for.body357
                                        #   in Loop: Header=BB111_88 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB111_90:                             # %for.cond359
                                        #   Parent Loop BB111_88 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB111_93
# %bb.91:                               # %for.body364
                                        #   in Loop: Header=BB111_90 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.92:                               # %for.inc381
                                        #   in Loop: Header=BB111_90 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_90
.LBB111_93:                             # %for.end384
                                        #   in Loop: Header=BB111_88 Depth=1
	jmp	.LBB111_94
.LBB111_94:                             # %for.inc385
                                        #   in Loop: Header=BB111_88 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_88
.LBB111_95:                             # %for.end387
	jmp	.LBB111_96
.LBB111_96:                             # %if.end388
	jmp	.LBB111_97
.LBB111_97:                             # %if.end389
	jmp	.LBB111_98
.LBB111_98:                             # %if.end390
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB111_131
# %bb.99:                               # %if.then393
	callq	copy_motion_vectors_MB
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB111_119
# %bb.100:                              # %lor.lhs.false397
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB111_119
# %bb.101:                              # %lor.lhs.false401
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB111_119
# %bb.102:                              # %if.then405
	movl	$0, -8(%rbp)
.LBB111_103:                            # %for.cond406
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_105 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB111_118
# %bb.104:                              # %for.body409
                                        #   in Loop: Header=BB111_103 Depth=1
	movl	$0, -4(%rbp)
.LBB111_105:                            # %for.cond410
                                        #   Parent Loop BB111_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB111_116
# %bb.106:                              # %for.body413
                                        #   in Loop: Header=BB111_105 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	488(%rsi,%rax,4), %eax
	movl	%eax, -40(%rbp)
	cmpl	$1, -40(%rbp)
	je	.LBB111_108
# %bb.107:                              # %if.then428
                                        #   in Loop: Header=BB111_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB111_109
.LBB111_108:                            # %if.else483
                                        #   in Loop: Header=BB111_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB111_109:                            # %if.end506
                                        #   in Loop: Header=BB111_105 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB111_114
# %bb.110:                              # %if.then508
                                        #   in Loop: Header=BB111_105 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB111_112
# %bb.111:                              # %if.then511
                                        #   in Loop: Header=BB111_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB111_113
.LBB111_112:                            # %if.else568
                                        #   in Loop: Header=BB111_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB111_113:                            # %if.end591
                                        #   in Loop: Header=BB111_105 Depth=2
	jmp	.LBB111_114
.LBB111_114:                            # %if.end592
                                        #   in Loop: Header=BB111_105 Depth=2
	jmp	.LBB111_115
.LBB111_115:                            # %for.inc593
                                        #   in Loop: Header=BB111_105 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_105
.LBB111_116:                            # %for.end595
                                        #   in Loop: Header=BB111_103 Depth=1
	jmp	.LBB111_117
.LBB111_117:                            # %for.inc596
                                        #   in Loop: Header=BB111_103 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_103
.LBB111_118:                            # %for.end598
	jmp	.LBB111_130
.LBB111_119:                            # %if.else599
	movl	$0, -8(%rbp)
.LBB111_120:                            # %for.cond600
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_122 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB111_129
# %bb.121:                              # %for.body603
                                        #   in Loop: Header=BB111_120 Depth=1
	movl	$0, -4(%rbp)
.LBB111_122:                            # %for.cond604
                                        #   Parent Loop BB111_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB111_127
# %bb.123:                              # %for.body607
                                        #   in Loop: Header=BB111_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	cmpl	$0, -36(%rbp)
	je	.LBB111_125
# %bb.124:                              # %if.then631
                                        #   in Loop: Header=BB111_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB111_125:                            # %if.end654
                                        #   in Loop: Header=BB111_122 Depth=2
	jmp	.LBB111_126
.LBB111_126:                            # %for.inc655
                                        #   in Loop: Header=BB111_122 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_122
.LBB111_127:                            # %for.end657
                                        #   in Loop: Header=BB111_120 Depth=1
	jmp	.LBB111_128
.LBB111_128:                            # %for.inc658
                                        #   in Loop: Header=BB111_120 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_120
.LBB111_129:                            # %for.end660
	jmp	.LBB111_130
.LBB111_130:                            # %if.end661
	jmp	.LBB111_131
.LBB111_131:                            # %if.end662
	cmpl	$1233524297, -48(%rbp)  # imm = 0x49861649
	jne	.LBB111_133
.LBB111_132:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB111_133:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB111_132
.Lfunc_end111:
	.size	copy_rdopt_data.75, .Lfunc_end111-copy_rdopt_data.75
	.cfi_endproc
                                        # -- End function
	.globl	field_picture.76        # -- Begin function field_picture.76
	.p2align	4, 0x90
	.type	field_picture.76,@function
field_picture.76:                       # @field_picture.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$516896708, -16(%rbp)   # imm = 0x1ECF37C4
	movq	%rdi, -8(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	stats, %rax
	movl	$0, 1472(%rax)
	movq	stats, %rax
	addq	$1472, %rax             # imm = 0x5C0
	movq	stats, %rcx
	movq	%rax, 1480(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	68(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	img, %rax
	movl	72488(%rax), %eax
	shrl	$1, %eax
	movq	img, %rcx
	movl	%eax, 72484(%rcx)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_top_picture
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_top_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_top_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$1, 28(%rax)
	movq	enc_top_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_top
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB112_2
# %bb.1:                                # %if.then
	movl	nextP_tr_fld, %eax
	addl	$-1, %eax
	movl	%eax, nextP_tr_fld
.LBB112_2:                              # %if.end
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB112_7
# %bb.3:                                # %if.then15
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB112_5
# %bb.4:                                # %if.then17
	xorl	%edi, %edi
	movl	$1, %esi
	movl	$1, %edx
	callq	rc_init_pict
	jmp	.LBB112_6
.LBB112_5:                              # %if.else
	xorl	%edi, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
.LBB112_6:                              # %if.end18
	movl	$1, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB112_7:                              # %if.end20
	movq	img, %rax
	movl	$1, 72596(%rax)
	movq	top_pic, %rdi
	callq	code_a_picture
	movq	enc_picture, %rax
	movl	$1, (%rax)
	movq	enc_top_picture, %rdi
	callq	store_picture_in_dpb
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_bottom_picture
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_bottom_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_bottom_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$2, 28(%rax)
	movq	enc_bottom_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_bot
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB112_9
# %bb.8:                                # %if.then46
	movl	nextP_tr_fld, %eax
	addl	$1, %eax
	movl	%eax, nextP_tr_fld
.LBB112_9:                              # %if.end48
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB112_12
# %bb.10:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$1, 2888(%rax)
	je	.LBB112_12
# %bb.11:                               # %if.then52
	movq	img, %rax
	movl	$0, 24(%rax)
.LBB112_12:                             # %if.end54
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB112_14
# %bb.13:                               # %if.then58
	movl	-12(%rbp), %edi
	callq	setbitscount
.LBB112_14:                             # %if.end59
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB112_16
# %bb.15:                               # %if.then62
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB112_16:                             # %if.end65
	movq	img, %rax
	movl	$0, 72596(%rax)
	movq	enc_picture, %rax
	movl	$2, (%rax)
	movq	bottom_pic, %rdi
	callq	code_a_picture
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rdi
	addq	$812, %rdi              # imm = 0x32C
	movq	-8(%rbp), %rsi
	addq	$816, %rsi              # imm = 0x330
	movq	-8(%rbp), %rdx
	addq	$820, %rdx              # imm = 0x334
	callq	distortion_fld
	cmpl	$516896708, -16(%rbp)   # imm = 0x1ECF37C4
	jne	.LBB112_18
.LBB112_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB112_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB112_17
.Lfunc_end112:
	.size	field_picture.76, .Lfunc_end112-field_picture.76
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeUnit.77
	.type	writeUnit.77,@function
writeUnit.77:                           # @writeUnit.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1070867210, -16(%rbp)  # imm = 0x3FD4230A
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %edi
	movq	img, %rax
	imull	60(%rax), %edi
	shll	$2, %edi
	movb	$0, %al
	callq	AllocNALU
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	cmpl	$0, %eax
	movl	$3, %eax
	movl	$2, %ecx
	cmovel	%eax, %ecx
	addl	$2, %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	addq	$1, %rdi
	movq	-24(%rbp), %rax
	movq	32(%rax), %rsi
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	subl	$1, %eax
	movl	%eax, %edx
	callq	memcpy
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB113_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	movl	$5, 12(%rax)
	movq	-8(%rbp), %rax
	movl	$3, 16(%rax)
	jmp	.LBB113_18
.LBB113_2:                              # %if.else
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB113_10
# %bb.3:                                # %if.then6
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB113_5
# %bb.4:                                # %if.then9
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB113_6
.LBB113_5:                              # %if.else11
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB113_6:                              # %if.end
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB113_8
# %bb.7:                                # %if.then17
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB113_9
.LBB113_8:                              # %if.else19
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB113_9:                              # %if.end21
	jmp	.LBB113_17
.LBB113_10:                             # %if.else22
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB113_12
# %bb.11:                               # %if.then26
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB113_13
.LBB113_12:                             # %if.else28
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB113_13:                             # %if.end31
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB113_15
# %bb.14:                               # %if.then35
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB113_16
.LBB113_15:                             # %if.else37
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB113_16:                             # %if.end39
	jmp	.LBB113_17
.LBB113_17:                             # %if.end40
	jmp	.LBB113_18
.LBB113_18:                             # %if.end41
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	movq	WriteNALU, %rax
	movq	-8(%rbp), %rdi
	callq	*%rax
	movq	stats, %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-8(%rbp), %rdi
	callq	FreeNALU
	cmpl	$1070867210, -16(%rbp)  # imm = 0x3FD4230A
	jne	.LBB113_20
.LBB113_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB113_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB113_19
.Lfunc_end113:
	.size	writeUnit.77, .Lfunc_end113-writeUnit.77
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function field_mode_buffer.78
	.type	field_mode_buffer.78,@function
field_mode_buffer.78:                   # @field_mode_buffer.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1197234868, -16(%rbp)  # imm = 0x475C5AB4
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -4(%rbp)
	vmovss	%xmm1, -8(%rbp)
	vmovss	%xmm2, -12(%rbp)
	callq	put_buffer_frame
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$1197234868, -16(%rbp)  # imm = 0x475C5AB4
	jne	.LBB114_2
.LBB114_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB114_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB114_1
.Lfunc_end114:
	.size	field_mode_buffer.78, .Lfunc_end114-field_mode_buffer.78
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeout_picture.79
	.type	writeout_picture.79,@function
writeout_picture.79:                    # @writeout_picture.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1818782695, -28(%rbp)  # imm = 0x6C686BE7
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movl	$0, -8(%rbp)
.LBB115_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_3 Depth 2
	movl	-8(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB115_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB115_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	8(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB115_3:                              # %for.cond1
                                        #   Parent Loop BB115_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB115_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB115_3 Depth=2
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rdi
	movl	-4(%rbp), %esi
	callq	writeUnit
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB115_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_3
.LBB115_6:                              # %for.end
                                        #   in Loop: Header=BB115_1 Depth=1
	jmp	.LBB115_7
.LBB115_7:                              # %for.inc10
                                        #   in Loop: Header=BB115_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_1
.LBB115_8:                              # %for.end12
	cmpl	$1818782695, -28(%rbp)  # imm = 0x6C686BE7
	jne	.LBB115_10
.LBB115_9:
	xorl	%eax, %eax
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB115_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB115_9
.Lfunc_end115:
	.size	writeout_picture.79, .Lfunc_end115-writeout_picture.79
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function GenerateFullPelRepresentation.80
	.type	GenerateFullPelRepresentation.80,@function
GenerateFullPelRepresentation.80:       # @GenerateFullPelRepresentation.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$1829425268, -44(%rbp)  # imm = 0x6D0AD074
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movl	$0, -28(%rbp)
.LBB116_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_3 Depth 2
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB116_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB116_1 Depth=1
	movl	$0, -32(%rbp)
.LBB116_3:                              # %for.cond1
                                        #   Parent Loop BB116_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-32(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB116_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB116_3 Depth=2
	movq	-64(%rbp), %rbx
	movl	-28(%rbp), %r14d
	movl	-32(%rbp), %r15d
	movq	-56(%rbp), %rdi
	movl	-28(%rbp), %esi
	shll	$2, %esi
	movl	-32(%rbp), %edx
	shll	$2, %edx
	movl	-40(%rbp), %ecx
	movl	-36(%rbp), %r8d
	callq	FastPelY_14
	movl	-36(%rbp), %r8d
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_11
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB116_3 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB116_3
.LBB116_6:                              # %for.end
                                        #   in Loop: Header=BB116_1 Depth=1
	jmp	.LBB116_7
.LBB116_7:                              # %for.inc5
                                        #   in Loop: Header=BB116_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB116_1
.LBB116_8:                              # %for.end7
	cmpl	$1829425268, -44(%rbp)  # imm = 0x6D0AD074
	jne	.LBB116_10
.LBB116_9:
	addq	$40, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB116_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB116_9
.Lfunc_end116:
	.size	GenerateFullPelRepresentation.80, .Lfunc_end116-GenerateFullPelRepresentation.80
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function picture_structure_decision.81
.LCPI117_0:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI117_1:
	.quad	4611686018427387904     # double 2
.LCPI117_2:
	.quad	4613937818241073152     # double 3
	.text
	.p2align	4, 0x90
	.type	picture_structure_decision.81,@function
picture_structure_decision.81:          # @picture_structure_decision.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI117_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI117_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movl	$1761037776, -36(%rbp)  # imm = 0x68F74DD0
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -56(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI117_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	movl	-44(%rbp), %eax
	cmpl	$0, %eax
	movl	$4, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -64(%rbp)
	movq	-16(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-16(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -40(%rbp)
	movq	-24(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-24(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -32(%rbp)
	movq	-24(%rbp), %rax
	movl	808(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	808(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -28(%rbp)
	vmovss	-40(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-32(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movl	-48(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-64(%rbp), %xmm2        # xmm2 = mem[0],zero
	callq	decide_fld_frame
	movl	%eax, %ebx
	cmpl	$1761037776, -36(%rbp)  # imm = 0x68F74DD0
	jne	.LBB117_2
.LBB117_1:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB117_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB117_1
.Lfunc_end117:
	.size	picture_structure_decision.81, .Lfunc_end117-picture_structure_decision.81
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function PaddAutoCropBorders.82
	.type	PaddAutoCropBorders.82,@function
PaddAutoCropBorders.82:                 # @PaddAutoCropBorders.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1359662088, -24(%rbp)  # imm = 0x510ACC08
	movl	%edi, -28(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -32(%rbp)
	movl	%r9d, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB118_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB118_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB118_1 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB118_3:                              # %for.cond1
                                        #   Parent Loop BB118_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB118_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB118_3 Depth=2
	movq	imgY_org_frm, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB118_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_3
.LBB118_6:                              # %for.end
                                        #   in Loop: Header=BB118_1 Depth=1
	jmp	.LBB118_7
.LBB118_7:                              # %for.inc10
                                        #   in Loop: Header=BB118_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_1
.LBB118_8:                              # %for.end12
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB118_9:                              # %for.cond13
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_11 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB118_16
# %bb.10:                               # %for.body15
                                        #   in Loop: Header=BB118_9 Depth=1
	movl	$0, -8(%rbp)
.LBB118_11:                             # %for.cond16
                                        #   Parent Loop BB118_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB118_14
# %bb.12:                               # %for.body18
                                        #   in Loop: Header=BB118_11 Depth=2
	movq	imgY_org_frm, %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.13:                               # %for.inc28
                                        #   in Loop: Header=BB118_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_11
.LBB118_14:                             # %for.end30
                                        #   in Loop: Header=BB118_9 Depth=1
	jmp	.LBB118_15
.LBB118_15:                             # %for.inc31
                                        #   in Loop: Header=BB118_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_9
.LBB118_16:                             # %for.end33
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB118_34
# %bb.17:                               # %if.then
	movl	$0, -4(%rbp)
.LBB118_18:                             # %for.cond35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_20 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB118_25
# %bb.19:                               # %for.body37
                                        #   in Loop: Header=BB118_18 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB118_20:                             # %for.cond38
                                        #   Parent Loop BB118_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB118_23
# %bb.21:                               # %for.body40
                                        #   in Loop: Header=BB118_20 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc63
                                        #   in Loop: Header=BB118_20 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_20
.LBB118_23:                             # %for.end65
                                        #   in Loop: Header=BB118_18 Depth=1
	jmp	.LBB118_24
.LBB118_24:                             # %for.inc66
                                        #   in Loop: Header=BB118_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_18
.LBB118_25:                             # %for.end68
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB118_26:                             # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_28 Depth 2
	movl	-4(%rbp), %eax
	cmpl	24(%rbp), %eax
	jge	.LBB118_33
# %bb.27:                               # %for.body71
                                        #   in Loop: Header=BB118_26 Depth=1
	movl	$0, -8(%rbp)
.LBB118_28:                             # %for.cond72
                                        #   Parent Loop BB118_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB118_31
# %bb.29:                               # %for.body74
                                        #   in Loop: Header=BB118_28 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.30:                               # %for.inc97
                                        #   in Loop: Header=BB118_28 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_28
.LBB118_31:                             # %for.end99
                                        #   in Loop: Header=BB118_26 Depth=1
	jmp	.LBB118_32
.LBB118_32:                             # %for.inc100
                                        #   in Loop: Header=BB118_26 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_26
.LBB118_33:                             # %for.end102
	jmp	.LBB118_34
.LBB118_34:                             # %if.end
	cmpl	$1359662088, -24(%rbp)  # imm = 0x510ACC08
	jne	.LBB118_36
.LBB118_35:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB118_36:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB118_35
.Lfunc_end118:
	.size	PaddAutoCropBorders.82, .Lfunc_end118-PaddAutoCropBorders.82
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function frame_mode_buffer.83
	.type	frame_mode_buffer.83,@function
frame_mode_buffer.83:                   # @frame_mode_buffer.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1096690997, -8(%rbp)   # imm = 0x415E2D35
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -4(%rbp)
	vmovss	%xmm1, -12(%rbp)
	vmovss	%xmm2, -16(%rbp)
	callq	put_buffer_frame
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB119_2
# %bb.1:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB119_3
.LBB119_2:                              # %if.then
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_top
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_bot
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-16(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	callq	put_buffer_frame
.LBB119_3:                              # %if.end
	cmpl	$1096690997, -8(%rbp)   # imm = 0x415E2D35
	jne	.LBB119_5
.LBB119_4:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB119_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB119_4
.Lfunc_end119:
	.size	frame_mode_buffer.83, .Lfunc_end119-frame_mode_buffer.83
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportRB.84
	.type	ReportRB.84,@function
ReportRB.84:                            # @ReportRB.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$759136452, -16(%rbp)   # imm = 0x2D3F80C4
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	active_pps, %rax
	movl	196(%rax), %ecx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %r10d
	movq	img, %rdi
	movl	71800(%rdi), %edi
	cmpl	$0, %edi
	movabsq	$.L.str.7, %rdi
	movabsq	$.L.str.8, %rax
	cmovneq	%rdi, %rax
	movl	intras, %r11d
	movq	img, %rdi
	movl	71996(%rdi), %ebx
	movabsq	$.L.str.11, %rdi
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movl	%ebx, 24(%rsp)
	movb	$3, %al
	callq	printf
	cmpl	$759136452, -16(%rbp)   # imm = 0x2D3F80C4
	jne	.LBB120_2
.LBB120_1:
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB120_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB120_1
.Lfunc_end120:
	.size	ReportRB.84, .Lfunc_end120-ReportRB.84
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportFirstframe.85
	.type	ReportFirstframe.85,@function
ReportFirstframe.85:                    # @ReportFirstframe.85
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$185672849, -16(%rbp)   # imm = 0xB112491
	movl	%edi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-8(%rbp), %r9d
	movl	-12(%rbp), %r10d
	movq	img, %rcx
	movl	71800(%rcx), %ecx
	cmpl	$0, %ecx
	movabsq	$.L.str.7, %rcx
	movabsq	$.L.str.8, %rax
	cmovneq	%rcx, %rax
	movl	intras, %r11d
	movabsq	$.L.str.6, %rdi
	movl	$0, %ecx
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB121_6
# %bb.1:                                # %if.then
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB121_4
# %bb.2:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB121_4
# %bb.3:                                # %if.then6
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_5
.LBB121_4:                              # %if.else
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Iprev_bits, %eax
	movl	%eax, -4(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Iprev_bits
.LBB121_5:                              # %if.end
	jmp	.LBB121_6
.LBB121_6:                              # %if.end13
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 704(%rcx)
	movq	stats, %rax
	movl	$0, 16(%rax)
	cmpl	$185672849, -16(%rbp)   # imm = 0xB112491
	jne	.LBB121_8
.LBB121_7:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB121_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB121_7
.Lfunc_end121:
	.size	ReportFirstframe.85, .Lfunc_end121-ReportFirstframe.85
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeUnit.86
	.type	writeUnit.86,@function
writeUnit.86:                           # @writeUnit.86
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$250146697, -16(%rbp)   # imm = 0xEE8EF89
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %edi
	movq	img, %rax
	imull	60(%rax), %edi
	shll	$2, %edi
	movb	$0, %al
	callq	AllocNALU
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	cmpl	$0, %eax
	movl	$3, %eax
	movl	$2, %ecx
	cmovel	%eax, %ecx
	addl	$2, %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	addq	$1, %rdi
	movq	-24(%rbp), %rax
	movq	32(%rax), %rsi
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	subl	$1, %eax
	movl	%eax, %edx
	callq	memcpy
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB122_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	movl	$5, 12(%rax)
	movq	-8(%rbp), %rax
	movl	$3, 16(%rax)
	jmp	.LBB122_18
.LBB122_2:                              # %if.else
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB122_10
# %bb.3:                                # %if.then6
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB122_5
# %bb.4:                                # %if.then9
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB122_6
.LBB122_5:                              # %if.else11
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB122_6:                              # %if.end
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB122_8
# %bb.7:                                # %if.then17
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB122_9
.LBB122_8:                              # %if.else19
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB122_9:                              # %if.end21
	jmp	.LBB122_17
.LBB122_10:                             # %if.else22
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB122_12
# %bb.11:                               # %if.then26
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB122_13
.LBB122_12:                             # %if.else28
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB122_13:                             # %if.end31
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB122_15
# %bb.14:                               # %if.then35
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB122_16
.LBB122_15:                             # %if.else37
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB122_16:                             # %if.end39
	jmp	.LBB122_17
.LBB122_17:                             # %if.end40
	jmp	.LBB122_18
.LBB122_18:                             # %if.end41
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	movq	WriteNALU, %rax
	movq	-8(%rbp), %rdi
	callq	*%rax
	movq	stats, %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-8(%rbp), %rdi
	callq	FreeNALU
	cmpl	$250146697, -16(%rbp)   # imm = 0xEE8EF89
	jne	.LBB122_20
.LBB122_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB122_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB122_19
.Lfunc_end122:
	.size	writeUnit.86, .Lfunc_end122-writeUnit.86
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function field_mode_buffer.87
	.type	field_mode_buffer.87,@function
field_mode_buffer.87:                   # @field_mode_buffer.87
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1260067400, -8(%rbp)   # imm = 0x4B1B1A48
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -16(%rbp)
	vmovss	%xmm1, -12(%rbp)
	vmovss	%xmm2, -4(%rbp)
	callq	put_buffer_frame
	vmovss	-16(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$1260067400, -8(%rbp)   # imm = 0x4B1B1A48
	jne	.LBB123_2
.LBB123_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB123_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB123_1
.Lfunc_end123:
	.size	field_mode_buffer.87, .Lfunc_end123-field_mode_buffer.87
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function field_mode_buffer.88
	.type	field_mode_buffer.88,@function
field_mode_buffer.88:                   # @field_mode_buffer.88
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$686489680, -16(%rbp)   # imm = 0x28EB0050
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -12(%rbp)
	vmovss	%xmm1, -8(%rbp)
	vmovss	%xmm2, -4(%rbp)
	callq	put_buffer_frame
	vmovss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$686489680, -16(%rbp)   # imm = 0x28EB0050
	jne	.LBB124_2
.LBB124_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB124_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB124_1
.Lfunc_end124:
	.size	field_mode_buffer.88, .Lfunc_end124-field_mode_buffer.88
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function PaddAutoCropBorders.89
	.type	PaddAutoCropBorders.89,@function
PaddAutoCropBorders.89:                 # @PaddAutoCropBorders.89
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1170596174, -32(%rbp)  # imm = 0x45C5E14E
	movl	%edi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -28(%rbp)
	movl	%r9d, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB125_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB125_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB125_1 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB125_3:                              # %for.cond1
                                        #   Parent Loop BB125_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB125_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB125_3 Depth=2
	movq	imgY_org_frm, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB125_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_3
.LBB125_6:                              # %for.end
                                        #   in Loop: Header=BB125_1 Depth=1
	jmp	.LBB125_7
.LBB125_7:                              # %for.inc10
                                        #   in Loop: Header=BB125_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_1
.LBB125_8:                              # %for.end12
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB125_9:                              # %for.cond13
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_11 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB125_16
# %bb.10:                               # %for.body15
                                        #   in Loop: Header=BB125_9 Depth=1
	movl	$0, -4(%rbp)
.LBB125_11:                             # %for.cond16
                                        #   Parent Loop BB125_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB125_14
# %bb.12:                               # %for.body18
                                        #   in Loop: Header=BB125_11 Depth=2
	movq	imgY_org_frm, %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.13:                               # %for.inc28
                                        #   in Loop: Header=BB125_11 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_11
.LBB125_14:                             # %for.end30
                                        #   in Loop: Header=BB125_9 Depth=1
	jmp	.LBB125_15
.LBB125_15:                             # %for.inc31
                                        #   in Loop: Header=BB125_9 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_9
.LBB125_16:                             # %for.end33
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB125_34
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB125_18:                             # %for.cond35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_20 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB125_25
# %bb.19:                               # %for.body37
                                        #   in Loop: Header=BB125_18 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB125_20:                             # %for.cond38
                                        #   Parent Loop BB125_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB125_23
# %bb.21:                               # %for.body40
                                        #   in Loop: Header=BB125_20 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc63
                                        #   in Loop: Header=BB125_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_20
.LBB125_23:                             # %for.end65
                                        #   in Loop: Header=BB125_18 Depth=1
	jmp	.LBB125_24
.LBB125_24:                             # %for.inc66
                                        #   in Loop: Header=BB125_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_18
.LBB125_25:                             # %for.end68
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB125_26:                             # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_28 Depth 2
	movl	-8(%rbp), %eax
	cmpl	24(%rbp), %eax
	jge	.LBB125_33
# %bb.27:                               # %for.body71
                                        #   in Loop: Header=BB125_26 Depth=1
	movl	$0, -4(%rbp)
.LBB125_28:                             # %for.cond72
                                        #   Parent Loop BB125_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB125_31
# %bb.29:                               # %for.body74
                                        #   in Loop: Header=BB125_28 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.30:                               # %for.inc97
                                        #   in Loop: Header=BB125_28 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_28
.LBB125_31:                             # %for.end99
                                        #   in Loop: Header=BB125_26 Depth=1
	jmp	.LBB125_32
.LBB125_32:                             # %for.inc100
                                        #   in Loop: Header=BB125_26 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_26
.LBB125_33:                             # %for.end102
	jmp	.LBB125_34
.LBB125_34:                             # %if.end
	cmpl	$1170596174, -32(%rbp)  # imm = 0x45C5E14E
	jne	.LBB125_36
.LBB125_35:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB125_36:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB125_35
.Lfunc_end125:
	.size	PaddAutoCropBorders.89, .Lfunc_end125-PaddAutoCropBorders.89
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportFirstframe.90
	.type	ReportFirstframe.90,@function
ReportFirstframe.90:                    # @ReportFirstframe.90
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1951266567, -16(%rbp)  # imm = 0x744DF707
	movl	%edi, -4(%rbp)
	movl	%esi, -8(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-4(%rbp), %r9d
	movl	-8(%rbp), %r10d
	movq	img, %rcx
	movl	71800(%rcx), %ecx
	cmpl	$0, %ecx
	movabsq	$.L.str.7, %rcx
	movabsq	$.L.str.8, %rax
	cmovneq	%rcx, %rax
	movl	intras, %r11d
	movabsq	$.L.str.6, %rdi
	movl	$0, %ecx
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB126_6
# %bb.1:                                # %if.then
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB126_4
# %bb.2:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB126_4
# %bb.3:                                # %if.then6
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB126_5
.LBB126_4:                              # %if.else
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Iprev_bits, %eax
	movl	%eax, -12(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Iprev_bits
.LBB126_5:                              # %if.end
	jmp	.LBB126_6
.LBB126_6:                              # %if.end13
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 704(%rcx)
	movq	stats, %rax
	movl	$0, 16(%rax)
	cmpl	$1951266567, -16(%rbp)  # imm = 0x744DF707
	jne	.LBB126_8
.LBB126_7:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB126_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB126_7
.Lfunc_end126:
	.size	ReportFirstframe.90, .Lfunc_end126-ReportFirstframe.90
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_field.91
.LCPI127_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_field.91,@function
init_field.91:                          # @init_field.91
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$353357080, -16(%rbp)   # imm = 0x150FCD18
	movq	last_P_no_fld, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	input, %rax
	movl	20(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	input, %rax
	movl	1236(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 1236(%rax)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB127_27
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	movl	20(%rcx), %ecx
	addl	$2, %ecx
	imull	%ecx, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB127_3
# %bb.2:                                # %if.then9
	movq	img, %rax
	movl	71884(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71888(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71884(%rcx)
.LBB127_3:                              # %if.end
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB127_6
# %bb.4:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB127_6
# %bb.5:                                # %if.then15
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB127_6:                              # %if.end18
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB127_9
# %bb.7:                                # %land.lhs.true21
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB127_9
# %bb.8:                                # %if.then24
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_fld
.LBB127_9:                              # %if.end26
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB127_24
# %bb.10:                               # %if.then28
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB127_16
# %bb.11:                               # %if.then30
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB127_14
# %bb.12:                               # %land.lhs.true32
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB127_14
# %bb.13:                               # %if.then36
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB127_15
.LBB127_14:                             # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB127_15:                             # %if.end38
	jmp	.LBB127_23
.LBB127_16:                             # %if.else39
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB127_19
# %bb.17:                               # %land.lhs.true42
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB127_19
# %bb.18:                               # %if.then46
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB127_20
.LBB127_19:                             # %if.else48
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB127_20:                             # %if.end50
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB127_22
# %bb.21:                               # %if.then53
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB127_22:                             # %if.end56
	jmp	.LBB127_23
.LBB127_23:                             # %if.end57
	jmp	.LBB127_24
.LBB127_24:                             # %if.end58
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB127_26
# %bb.25:                               # %if.then60
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB127_26:                             # %if.end66
	jmp	.LBB127_77
.LBB127_27:                             # %if.else67
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$2, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	$1, %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB127_33
# %bb.28:                               # %if.then82
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB127_29:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB127_32
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB127_29 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB127_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_29
.LBB127_32:                             # %for.end
	jmp	.LBB127_38
.LBB127_33:                             # %if.else105
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB127_34:                             # %for.cond109
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB127_37
# %bb.35:                               # %for.body112
                                        #   in Loop: Header=BB127_34 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc132
                                        #   in Loop: Header=BB127_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_34
.LBB127_37:                             # %for.end134
	jmp	.LBB127_38
.LBB127_38:                             # %if.end135
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB127_41
# %bb.39:                               # %land.lhs.true138
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB127_41
# %bb.40:                               # %if.then143
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	subl	-8(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB127_41:                             # %if.end147
	vmovsd	.LCPI127_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB127_43
# %bb.42:                               # %if.then156
	vmovsd	.LCPI127_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB127_43:                             # %if.end158
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB127_45
# %bb.44:                               # %if.then161
	vmovsd	.LCPI127_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB127_46
.LBB127_45:                             # %if.else174
	vmovsd	.LCPI127_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB127_46:                             # %if.end183
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB127_48
# %bb.47:                               # %if.then187
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB127_48:                             # %if.end190
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB127_73
# %bb.49:                               # %land.lhs.true193
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB127_73
# %bb.50:                               # %if.then197
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB127_53
# %bb.51:                               # %land.lhs.true201
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB127_53
# %bb.52:                               # %if.then206
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB127_54
.LBB127_53:                             # %if.else208
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB127_54:                             # %if.end210
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB127_72
# %bb.55:                               # %if.then212
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB127_64
# %bb.56:                               # %land.lhs.true216
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB127_64
# %bb.57:                               # %if.then221
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB127_59
# %bb.58:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB127_63
.LBB127_59:                             # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB127_61
# %bb.60:                               # %cond.true231
	movl	$51, %eax
	jmp	.LBB127_62
.LBB127_61:                             # %cond.false232
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB127_62:                             # %cond.end
.LBB127_63:                             # %cond.end236
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB127_71
.LBB127_64:                             # %if.else239
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB127_66
# %bb.65:                               # %cond.true244
	xorl	%eax, %eax
	jmp	.LBB127_70
.LBB127_66:                             # %cond.false245
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB127_68
# %bb.67:                               # %cond.true251
	movl	$51, %eax
	jmp	.LBB127_69
.LBB127_68:                             # %cond.false252
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB127_69:                             # %cond.end256
.LBB127_70:                             # %cond.end258
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB127_71:                             # %if.end261
	jmp	.LBB127_72
.LBB127_72:                             # %if.end262
	jmp	.LBB127_76
.LBB127_73:                             # %if.else263
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB127_75
# %bb.74:                               # %if.then267
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB127_75:                             # %if.end273
	jmp	.LBB127_76
.LBB127_76:                             # %if.end274
	jmp	.LBB127_77
.LBB127_77:                             # %if.end275
	movq	input, %rcx
	movl	20(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, 20(%rcx)
	movq	input, %rcx
	movl	1236(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 1236(%rcx)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	cmpl	$353357080, -16(%rbp)   # imm = 0x150FCD18
	jne	.LBB127_79
.LBB127_78:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB127_79:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB127_78
.Lfunc_end127:
	.size	init_field.91, .Lfunc_end127-init_field.91
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function frame_mode_buffer.92
	.type	frame_mode_buffer.92,@function
frame_mode_buffer.92:                   # @frame_mode_buffer.92
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$6467762, -12(%rbp)     # imm = 0x62B0B2
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -16(%rbp)
	vmovss	%xmm1, -4(%rbp)
	vmovss	%xmm2, -8(%rbp)
	callq	put_buffer_frame
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB128_2
# %bb.1:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB128_3
.LBB128_2:                              # %if.then
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_top
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_bot
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	vmovss	-16(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	callq	put_buffer_frame
.LBB128_3:                              # %if.end
	cmpl	$6467762, -12(%rbp)     # imm = 0x62B0B2
	jne	.LBB128_5
.LBB128_4:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB128_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB128_4
.Lfunc_end128:
	.size	frame_mode_buffer.92, .Lfunc_end128-frame_mode_buffer.92
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportFirstframe.93
	.type	ReportFirstframe.93,@function
ReportFirstframe.93:                    # @ReportFirstframe.93
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2056383303, -8(%rbp)   # imm = 0x7A91EB47
	movl	%edi, -12(%rbp)
	movl	%esi, -4(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-12(%rbp), %r9d
	movl	-4(%rbp), %r10d
	movq	img, %rcx
	movl	71800(%rcx), %ecx
	cmpl	$0, %ecx
	movabsq	$.L.str.7, %rcx
	movabsq	$.L.str.8, %rax
	cmovneq	%rcx, %rax
	movl	intras, %r11d
	movabsq	$.L.str.6, %rdi
	movl	$0, %ecx
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB129_6
# %bb.1:                                # %if.then
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB129_4
# %bb.2:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB129_4
# %bb.3:                                # %if.then6
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB129_5
.LBB129_4:                              # %if.else
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Iprev_bits, %eax
	movl	%eax, -16(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Iprev_bits
.LBB129_5:                              # %if.end
	jmp	.LBB129_6
.LBB129_6:                              # %if.end13
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 704(%rcx)
	movq	stats, %rax
	movl	$0, 16(%rax)
	cmpl	$2056383303, -8(%rbp)   # imm = 0x7A91EB47
	jne	.LBB129_8
.LBB129_7:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB129_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB129_7
.Lfunc_end129:
	.size	ReportFirstframe.93, .Lfunc_end129-ReportFirstframe.93
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeUnit.94
	.type	writeUnit.94,@function
writeUnit.94:                           # @writeUnit.94
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$347816588, -16(%rbp)   # imm = 0x14BB428C
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %edi
	movq	img, %rax
	imull	60(%rax), %edi
	shll	$2, %edi
	movb	$0, %al
	callq	AllocNALU
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	cmpl	$0, %eax
	movl	$3, %eax
	movl	$2, %ecx
	cmovel	%eax, %ecx
	addl	$2, %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	addq	$1, %rdi
	movq	-24(%rbp), %rax
	movq	32(%rax), %rsi
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	subl	$1, %eax
	movl	%eax, %edx
	callq	memcpy
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB130_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	movl	$5, 12(%rax)
	movq	-8(%rbp), %rax
	movl	$3, 16(%rax)
	jmp	.LBB130_18
.LBB130_2:                              # %if.else
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB130_10
# %bb.3:                                # %if.then6
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB130_5
# %bb.4:                                # %if.then9
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB130_6
.LBB130_5:                              # %if.else11
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB130_6:                              # %if.end
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB130_8
# %bb.7:                                # %if.then17
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB130_9
.LBB130_8:                              # %if.else19
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB130_9:                              # %if.end21
	jmp	.LBB130_17
.LBB130_10:                             # %if.else22
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB130_12
# %bb.11:                               # %if.then26
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB130_13
.LBB130_12:                             # %if.else28
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB130_13:                             # %if.end31
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB130_15
# %bb.14:                               # %if.then35
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB130_16
.LBB130_15:                             # %if.else37
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB130_16:                             # %if.end39
	jmp	.LBB130_17
.LBB130_17:                             # %if.end40
	jmp	.LBB130_18
.LBB130_18:                             # %if.end41
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	movq	WriteNALU, %rax
	movq	-8(%rbp), %rdi
	callq	*%rax
	movq	stats, %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-8(%rbp), %rdi
	callq	FreeNALU
	cmpl	$347816588, -16(%rbp)   # imm = 0x14BB428C
	jne	.LBB130_20
.LBB130_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB130_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB130_19
.Lfunc_end130:
	.size	writeUnit.94, .Lfunc_end130-writeUnit.94
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function picture_structure_decision.95
.LCPI131_0:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI131_1:
	.quad	4611686018427387904     # double 2
.LCPI131_2:
	.quad	4613937818241073152     # double 3
	.text
	.p2align	4, 0x90
	.type	picture_structure_decision.95,@function
picture_structure_decision.95:          # @picture_structure_decision.95
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI131_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI131_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movl	$47299407, -40(%rbp)    # imm = 0x2D1BB4F
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -56(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI131_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	movl	-44(%rbp), %eax
	cmpl	$0, %eax
	movl	$4, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -64(%rbp)
	movq	-16(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-16(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -28(%rbp)
	movq	-24(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-24(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -36(%rbp)
	movq	-24(%rbp), %rax
	movl	808(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	808(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -32(%rbp)
	vmovss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-36(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movl	-48(%rbp), %edi
	movl	-32(%rbp), %esi
	vmovsd	-64(%rbp), %xmm2        # xmm2 = mem[0],zero
	callq	decide_fld_frame
	movl	%eax, %ebx
	cmpl	$47299407, -40(%rbp)    # imm = 0x2D1BB4F
	jne	.LBB131_2
.LBB131_1:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB131_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB131_1
.Lfunc_end131:
	.size	picture_structure_decision.95, .Lfunc_end131-picture_structure_decision.95
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function rdPictureCoding.96
	.type	rdPictureCoding.96,@function
rdPictureCoding.96:                     # @rdPictureCoding.96
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2138587483, -24(%rbp)  # imm = 0x7F78415B
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -4(%rbp)
	movl	intras, %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB132_9
# %bb.1:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB132_9
# %bb.2:                                # %if.then
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB132_7
# %bb.3:                                # %if.then5
	xorl	%edi, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB132_5
# %bb.4:                                # %if.then7
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB132_6
.LBB132_5:                              # %if.else
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB132_6:                              # %if.end
	jmp	.LBB132_8
.LBB132_7:                              # %if.else9
	movabsq	$PicParSet, %rax
	addq	$480, %rax              # imm = 0x1E0
	movq	%rax, active_pps
.LBB132_8:                              # %if.end10
	jmp	.LBB132_10
.LBB132_9:                              # %if.else11
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB132_10:                             # %if.end14
	movq	active_pps, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB132_12
# %bb.11:                               # %if.then17
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture2
	jmp	.LBB132_13
.LBB132_12:                             # %if.else18
	movq	frame_pic2, %rdi
	movl	$1, %esi
	callq	frame_picture
	movq	frame_pic, %rdi
	movq	frame_pic2, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
.LBB132_13:                             # %if.end21
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB132_19
# %bb.14:                               # %if.then24
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB132_17
# %bb.15:                               # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB132_17
# %bb.16:                               # %if.then30
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	jmp	.LBB132_18
.LBB132_17:                             # %if.else32
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB132_18:                             # %if.end34
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB132_20
.LBB132_19:                             # %if.else35
	movl	intras, %eax
	movl	%eax, -12(%rbp)
.LBB132_20:                             # %if.end36
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB132_35
# %bb.21:                               # %land.lhs.true39
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB132_35
# %bb.22:                               # %if.then42
	movl	$0, -8(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB132_27
# %bb.23:                               # %if.then46
	movl	$1, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB132_25
# %bb.24:                               # %if.then49
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB132_26
.LBB132_25:                             # %if.else50
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB132_26:                             # %if.end53
	jmp	.LBB132_34
.LBB132_27:                             # %if.else54
	xorl	%edi, %edi
	callq	test_wp_B_slice
	cmpl	$1, %eax
	jne	.LBB132_29
# %bb.28:                               # %if.then57
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB132_33
.LBB132_29:                             # %if.else58
	movq	input, %rax
	movl	1308(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB132_31
# %bb.30:                               # %if.then60
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB132_32
.LBB132_31:                             # %if.else63
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB132_32:                             # %if.end66
	jmp	.LBB132_33
.LBB132_33:                             # %if.end67
	jmp	.LBB132_34
.LBB132_34:                             # %if.end68
	jmp	.LBB132_36
.LBB132_35:                             # %if.else69
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB132_36:                             # %if.end72
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB132_40
# %bb.37:                               # %land.lhs.true75
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB132_40
# %bb.38:                               # %land.lhs.true78
	imull	$100, intras, %eax
	movq	img, %rcx
	xorl	%edx, %edx
	divl	72488(%rcx)
	cmpl	$75, %eax
	jb	.LBB132_40
# %bb.39:                               # %if.then80
	movq	img, %rax
	movl	$2, 24(%rax)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB132_40:                             # %if.end82
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB132_42
# %bb.41:                               # %if.then85
	movq	$0, enc_frame_picture3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB132_46
.LBB132_42:                             # %if.else87
	movq	frame_pic3, %rdi
	movl	$2, %esi
	callq	frame_picture
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB132_44
# %bb.43:                               # %if.then90
	movq	frame_pic, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
	jmp	.LBB132_45
.LBB132_44:                             # %if.else94
	movq	frame_pic2, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	addl	71804(%rcx), %eax
	movl	%eax, 71804(%rcx)
.LBB132_45:                             # %if.end98
	jmp	.LBB132_46
.LBB132_46:                             # %if.end99
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB132_48
# %bb.47:                               # %if.then102
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB132_51
.LBB132_48:                             # %if.else105
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB132_50
# %bb.49:                               # %if.then108
	movq	enc_frame_picture2, %rax
	movq	%rax, enc_picture
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	%rax, active_pps
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
.LBB132_50:                             # %if.end111
	jmp	.LBB132_51
.LBB132_51:                             # %if.end112
	cmpl	$2138587483, -24(%rbp)  # imm = 0x7F78415B
	jne	.LBB132_53
.LBB132_52:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB132_53:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB132_52
.Lfunc_end132:
	.size	rdPictureCoding.96, .Lfunc_end132-rdPictureCoding.96
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_field.97
.LCPI133_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_field.97,@function
init_field.97:                          # @init_field.97
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1252855735, -16(%rbp)  # imm = 0x4AAD0FB7
	movq	last_P_no_fld, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	input, %rax
	movl	20(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	input, %rax
	movl	1236(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 1236(%rax)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB133_27
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	movl	20(%rcx), %ecx
	addl	$2, %ecx
	imull	%ecx, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB133_3
# %bb.2:                                # %if.then9
	movq	img, %rax
	movl	71884(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71888(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71884(%rcx)
.LBB133_3:                              # %if.end
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB133_6
# %bb.4:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB133_6
# %bb.5:                                # %if.then15
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB133_6:                              # %if.end18
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB133_9
# %bb.7:                                # %land.lhs.true21
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB133_9
# %bb.8:                                # %if.then24
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_fld
.LBB133_9:                              # %if.end26
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB133_24
# %bb.10:                               # %if.then28
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB133_16
# %bb.11:                               # %if.then30
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB133_14
# %bb.12:                               # %land.lhs.true32
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB133_14
# %bb.13:                               # %if.then36
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB133_15
.LBB133_14:                             # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB133_15:                             # %if.end38
	jmp	.LBB133_23
.LBB133_16:                             # %if.else39
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB133_19
# %bb.17:                               # %land.lhs.true42
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB133_19
# %bb.18:                               # %if.then46
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB133_20
.LBB133_19:                             # %if.else48
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB133_20:                             # %if.end50
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB133_22
# %bb.21:                               # %if.then53
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB133_22:                             # %if.end56
	jmp	.LBB133_23
.LBB133_23:                             # %if.end57
	jmp	.LBB133_24
.LBB133_24:                             # %if.end58
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB133_26
# %bb.25:                               # %if.then60
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB133_26:                             # %if.end66
	jmp	.LBB133_77
.LBB133_27:                             # %if.else67
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$2, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	$1, %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB133_33
# %bb.28:                               # %if.then82
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB133_29:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB133_32
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB133_29 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB133_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB133_29
.LBB133_32:                             # %for.end
	jmp	.LBB133_38
.LBB133_33:                             # %if.else105
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB133_34:                             # %for.cond109
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB133_37
# %bb.35:                               # %for.body112
                                        #   in Loop: Header=BB133_34 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc132
                                        #   in Loop: Header=BB133_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB133_34
.LBB133_37:                             # %for.end134
	jmp	.LBB133_38
.LBB133_38:                             # %if.end135
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB133_41
# %bb.39:                               # %land.lhs.true138
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB133_41
# %bb.40:                               # %if.then143
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	subl	-8(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB133_41:                             # %if.end147
	vmovsd	.LCPI133_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB133_43
# %bb.42:                               # %if.then156
	vmovsd	.LCPI133_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB133_43:                             # %if.end158
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB133_45
# %bb.44:                               # %if.then161
	vmovsd	.LCPI133_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB133_46
.LBB133_45:                             # %if.else174
	vmovsd	.LCPI133_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB133_46:                             # %if.end183
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB133_48
# %bb.47:                               # %if.then187
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB133_48:                             # %if.end190
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB133_73
# %bb.49:                               # %land.lhs.true193
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB133_73
# %bb.50:                               # %if.then197
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB133_53
# %bb.51:                               # %land.lhs.true201
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB133_53
# %bb.52:                               # %if.then206
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB133_54
.LBB133_53:                             # %if.else208
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB133_54:                             # %if.end210
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB133_72
# %bb.55:                               # %if.then212
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB133_64
# %bb.56:                               # %land.lhs.true216
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB133_64
# %bb.57:                               # %if.then221
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB133_59
# %bb.58:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB133_63
.LBB133_59:                             # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB133_61
# %bb.60:                               # %cond.true231
	movl	$51, %eax
	jmp	.LBB133_62
.LBB133_61:                             # %cond.false232
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB133_62:                             # %cond.end
.LBB133_63:                             # %cond.end236
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB133_71
.LBB133_64:                             # %if.else239
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB133_66
# %bb.65:                               # %cond.true244
	xorl	%eax, %eax
	jmp	.LBB133_70
.LBB133_66:                             # %cond.false245
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB133_68
# %bb.67:                               # %cond.true251
	movl	$51, %eax
	jmp	.LBB133_69
.LBB133_68:                             # %cond.false252
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB133_69:                             # %cond.end256
.LBB133_70:                             # %cond.end258
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB133_71:                             # %if.end261
	jmp	.LBB133_72
.LBB133_72:                             # %if.end262
	jmp	.LBB133_76
.LBB133_73:                             # %if.else263
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB133_75
# %bb.74:                               # %if.then267
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB133_75:                             # %if.end273
	jmp	.LBB133_76
.LBB133_76:                             # %if.end274
	jmp	.LBB133_77
.LBB133_77:                             # %if.end275
	movq	input, %rcx
	movl	20(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, 20(%rcx)
	movq	input, %rcx
	movl	1236(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 1236(%rcx)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	cmpl	$1252855735, -16(%rbp)  # imm = 0x4AAD0FB7
	jne	.LBB133_79
.LBB133_78:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB133_79:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB133_78
.Lfunc_end133:
	.size	init_field.97, .Lfunc_end133-init_field.97
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_field.98
.LCPI134_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_field.98,@function
init_field.98:                          # @init_field.98
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1284192829, -16(%rbp)  # imm = 0x4C8B3A3D
	movq	last_P_no_fld, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	input, %rax
	movl	20(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	input, %rax
	movl	1236(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 1236(%rax)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB134_27
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	movl	20(%rcx), %ecx
	addl	$2, %ecx
	imull	%ecx, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB134_3
# %bb.2:                                # %if.then9
	movq	img, %rax
	movl	71884(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71888(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71884(%rcx)
.LBB134_3:                              # %if.end
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB134_6
# %bb.4:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB134_6
# %bb.5:                                # %if.then15
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB134_6:                              # %if.end18
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB134_9
# %bb.7:                                # %land.lhs.true21
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB134_9
# %bb.8:                                # %if.then24
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_fld
.LBB134_9:                              # %if.end26
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB134_24
# %bb.10:                               # %if.then28
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB134_16
# %bb.11:                               # %if.then30
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB134_14
# %bb.12:                               # %land.lhs.true32
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB134_14
# %bb.13:                               # %if.then36
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB134_15
.LBB134_14:                             # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB134_15:                             # %if.end38
	jmp	.LBB134_23
.LBB134_16:                             # %if.else39
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB134_19
# %bb.17:                               # %land.lhs.true42
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB134_19
# %bb.18:                               # %if.then46
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB134_20
.LBB134_19:                             # %if.else48
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB134_20:                             # %if.end50
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB134_22
# %bb.21:                               # %if.then53
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB134_22:                             # %if.end56
	jmp	.LBB134_23
.LBB134_23:                             # %if.end57
	jmp	.LBB134_24
.LBB134_24:                             # %if.end58
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB134_26
# %bb.25:                               # %if.then60
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB134_26:                             # %if.end66
	jmp	.LBB134_77
.LBB134_27:                             # %if.else67
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$2, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	$1, %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB134_33
# %bb.28:                               # %if.then82
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB134_29:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB134_32
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB134_29 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB134_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB134_29
.LBB134_32:                             # %for.end
	jmp	.LBB134_38
.LBB134_33:                             # %if.else105
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB134_34:                             # %for.cond109
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB134_37
# %bb.35:                               # %for.body112
                                        #   in Loop: Header=BB134_34 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc132
                                        #   in Loop: Header=BB134_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB134_34
.LBB134_37:                             # %for.end134
	jmp	.LBB134_38
.LBB134_38:                             # %if.end135
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB134_41
# %bb.39:                               # %land.lhs.true138
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB134_41
# %bb.40:                               # %if.then143
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	subl	-8(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB134_41:                             # %if.end147
	vmovsd	.LCPI134_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB134_43
# %bb.42:                               # %if.then156
	vmovsd	.LCPI134_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB134_43:                             # %if.end158
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB134_45
# %bb.44:                               # %if.then161
	vmovsd	.LCPI134_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB134_46
.LBB134_45:                             # %if.else174
	vmovsd	.LCPI134_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB134_46:                             # %if.end183
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB134_48
# %bb.47:                               # %if.then187
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB134_48:                             # %if.end190
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB134_73
# %bb.49:                               # %land.lhs.true193
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB134_73
# %bb.50:                               # %if.then197
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB134_53
# %bb.51:                               # %land.lhs.true201
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB134_53
# %bb.52:                               # %if.then206
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB134_54
.LBB134_53:                             # %if.else208
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB134_54:                             # %if.end210
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB134_72
# %bb.55:                               # %if.then212
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB134_64
# %bb.56:                               # %land.lhs.true216
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB134_64
# %bb.57:                               # %if.then221
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB134_59
# %bb.58:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB134_63
.LBB134_59:                             # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB134_61
# %bb.60:                               # %cond.true231
	movl	$51, %eax
	jmp	.LBB134_62
.LBB134_61:                             # %cond.false232
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB134_62:                             # %cond.end
.LBB134_63:                             # %cond.end236
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB134_71
.LBB134_64:                             # %if.else239
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB134_66
# %bb.65:                               # %cond.true244
	xorl	%eax, %eax
	jmp	.LBB134_70
.LBB134_66:                             # %cond.false245
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB134_68
# %bb.67:                               # %cond.true251
	movl	$51, %eax
	jmp	.LBB134_69
.LBB134_68:                             # %cond.false252
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB134_69:                             # %cond.end256
.LBB134_70:                             # %cond.end258
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB134_71:                             # %if.end261
	jmp	.LBB134_72
.LBB134_72:                             # %if.end262
	jmp	.LBB134_76
.LBB134_73:                             # %if.else263
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB134_75
# %bb.74:                               # %if.then267
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB134_75:                             # %if.end273
	jmp	.LBB134_76
.LBB134_76:                             # %if.end274
	jmp	.LBB134_77
.LBB134_77:                             # %if.end275
	movq	input, %rcx
	movl	20(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, 20(%rcx)
	movq	input, %rcx
	movl	1236(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 1236(%rcx)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	cmpl	$1284192829, -16(%rbp)  # imm = 0x4C8B3A3D
	jne	.LBB134_79
.LBB134_78:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB134_79:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB134_78
.Lfunc_end134:
	.size	init_field.98, .Lfunc_end134-init_field.98
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function PaddAutoCropBorders.99
	.type	PaddAutoCropBorders.99,@function
PaddAutoCropBorders.99:                 # @PaddAutoCropBorders.99
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1585145598, -36(%rbp)  # imm = 0x5E7B66FE
	movl	%edi, -28(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB135_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB135_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB135_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB135_1 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB135_3:                              # %for.cond1
                                        #   Parent Loop BB135_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB135_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB135_3 Depth=2
	movq	imgY_org_frm, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB135_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB135_3
.LBB135_6:                              # %for.end
                                        #   in Loop: Header=BB135_1 Depth=1
	jmp	.LBB135_7
.LBB135_7:                              # %for.inc10
                                        #   in Loop: Header=BB135_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB135_1
.LBB135_8:                              # %for.end12
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB135_9:                              # %for.cond13
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB135_11 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB135_16
# %bb.10:                               # %for.body15
                                        #   in Loop: Header=BB135_9 Depth=1
	movl	$0, -8(%rbp)
.LBB135_11:                             # %for.cond16
                                        #   Parent Loop BB135_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB135_14
# %bb.12:                               # %for.body18
                                        #   in Loop: Header=BB135_11 Depth=2
	movq	imgY_org_frm, %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.13:                               # %for.inc28
                                        #   in Loop: Header=BB135_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB135_11
.LBB135_14:                             # %for.end30
                                        #   in Loop: Header=BB135_9 Depth=1
	jmp	.LBB135_15
.LBB135_15:                             # %for.inc31
                                        #   in Loop: Header=BB135_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB135_9
.LBB135_16:                             # %for.end33
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB135_34
# %bb.17:                               # %if.then
	movl	$0, -4(%rbp)
.LBB135_18:                             # %for.cond35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB135_20 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB135_25
# %bb.19:                               # %for.body37
                                        #   in Loop: Header=BB135_18 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB135_20:                             # %for.cond38
                                        #   Parent Loop BB135_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB135_23
# %bb.21:                               # %for.body40
                                        #   in Loop: Header=BB135_20 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc63
                                        #   in Loop: Header=BB135_20 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB135_20
.LBB135_23:                             # %for.end65
                                        #   in Loop: Header=BB135_18 Depth=1
	jmp	.LBB135_24
.LBB135_24:                             # %for.inc66
                                        #   in Loop: Header=BB135_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB135_18
.LBB135_25:                             # %for.end68
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB135_26:                             # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB135_28 Depth 2
	movl	-4(%rbp), %eax
	cmpl	24(%rbp), %eax
	jge	.LBB135_33
# %bb.27:                               # %for.body71
                                        #   in Loop: Header=BB135_26 Depth=1
	movl	$0, -8(%rbp)
.LBB135_28:                             # %for.cond72
                                        #   Parent Loop BB135_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB135_31
# %bb.29:                               # %for.body74
                                        #   in Loop: Header=BB135_28 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.30:                               # %for.inc97
                                        #   in Loop: Header=BB135_28 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB135_28
.LBB135_31:                             # %for.end99
                                        #   in Loop: Header=BB135_26 Depth=1
	jmp	.LBB135_32
.LBB135_32:                             # %for.inc100
                                        #   in Loop: Header=BB135_26 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB135_26
.LBB135_33:                             # %for.end102
	jmp	.LBB135_34
.LBB135_34:                             # %if.end
	cmpl	$1585145598, -36(%rbp)  # imm = 0x5E7B66FE
	jne	.LBB135_36
.LBB135_35:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB135_36:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB135_35
.Lfunc_end135:
	.size	PaddAutoCropBorders.99, .Lfunc_end135-PaddAutoCropBorders.99
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function PaddAutoCropBorders.100
	.type	PaddAutoCropBorders.100,@function
PaddAutoCropBorders.100:                # @PaddAutoCropBorders.100
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$435346440, -32(%rbp)   # imm = 0x19F2DC08
	movl	%edi, -36(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB136_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB136_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB136_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB136_1 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB136_3:                              # %for.cond1
                                        #   Parent Loop BB136_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB136_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB136_3 Depth=2
	movq	imgY_org_frm, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB136_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_3
.LBB136_6:                              # %for.end
                                        #   in Loop: Header=BB136_1 Depth=1
	jmp	.LBB136_7
.LBB136_7:                              # %for.inc10
                                        #   in Loop: Header=BB136_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB136_1
.LBB136_8:                              # %for.end12
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB136_9:                              # %for.cond13
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB136_11 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB136_16
# %bb.10:                               # %for.body15
                                        #   in Loop: Header=BB136_9 Depth=1
	movl	$0, -4(%rbp)
.LBB136_11:                             # %for.cond16
                                        #   Parent Loop BB136_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB136_14
# %bb.12:                               # %for.body18
                                        #   in Loop: Header=BB136_11 Depth=2
	movq	imgY_org_frm, %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.13:                               # %for.inc28
                                        #   in Loop: Header=BB136_11 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_11
.LBB136_14:                             # %for.end30
                                        #   in Loop: Header=BB136_9 Depth=1
	jmp	.LBB136_15
.LBB136_15:                             # %for.inc31
                                        #   in Loop: Header=BB136_9 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB136_9
.LBB136_16:                             # %for.end33
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB136_34
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB136_18:                             # %for.cond35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB136_20 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB136_25
# %bb.19:                               # %for.body37
                                        #   in Loop: Header=BB136_18 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB136_20:                             # %for.cond38
                                        #   Parent Loop BB136_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB136_23
# %bb.21:                               # %for.body40
                                        #   in Loop: Header=BB136_20 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc63
                                        #   in Loop: Header=BB136_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_20
.LBB136_23:                             # %for.end65
                                        #   in Loop: Header=BB136_18 Depth=1
	jmp	.LBB136_24
.LBB136_24:                             # %for.inc66
                                        #   in Loop: Header=BB136_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB136_18
.LBB136_25:                             # %for.end68
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB136_26:                             # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB136_28 Depth 2
	movl	-8(%rbp), %eax
	cmpl	24(%rbp), %eax
	jge	.LBB136_33
# %bb.27:                               # %for.body71
                                        #   in Loop: Header=BB136_26 Depth=1
	movl	$0, -4(%rbp)
.LBB136_28:                             # %for.cond72
                                        #   Parent Loop BB136_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB136_31
# %bb.29:                               # %for.body74
                                        #   in Loop: Header=BB136_28 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.30:                               # %for.inc97
                                        #   in Loop: Header=BB136_28 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_28
.LBB136_31:                             # %for.end99
                                        #   in Loop: Header=BB136_26 Depth=1
	jmp	.LBB136_32
.LBB136_32:                             # %for.inc100
                                        #   in Loop: Header=BB136_26 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB136_26
.LBB136_33:                             # %for.end102
	jmp	.LBB136_34
.LBB136_34:                             # %if.end
	cmpl	$435346440, -32(%rbp)   # imm = 0x19F2DC08
	jne	.LBB136_36
.LBB136_35:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB136_36:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB136_35
.Lfunc_end136:
	.size	PaddAutoCropBorders.100, .Lfunc_end136-PaddAutoCropBorders.100
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function rdPictureCoding.101
	.type	rdPictureCoding.101,@function
rdPictureCoding.101:                    # @rdPictureCoding.101
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$150256053, -24(%rbp)   # imm = 0x8F4B9B5
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -4(%rbp)
	movl	intras, %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB137_9
# %bb.1:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB137_9
# %bb.2:                                # %if.then
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB137_7
# %bb.3:                                # %if.then5
	xorl	%edi, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB137_5
# %bb.4:                                # %if.then7
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB137_6
.LBB137_5:                              # %if.else
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB137_6:                              # %if.end
	jmp	.LBB137_8
.LBB137_7:                              # %if.else9
	movabsq	$PicParSet, %rax
	addq	$480, %rax              # imm = 0x1E0
	movq	%rax, active_pps
.LBB137_8:                              # %if.end10
	jmp	.LBB137_10
.LBB137_9:                              # %if.else11
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB137_10:                             # %if.end14
	movq	active_pps, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB137_12
# %bb.11:                               # %if.then17
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture2
	jmp	.LBB137_13
.LBB137_12:                             # %if.else18
	movq	frame_pic2, %rdi
	movl	$1, %esi
	callq	frame_picture
	movq	frame_pic, %rdi
	movq	frame_pic2, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
.LBB137_13:                             # %if.end21
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB137_19
# %bb.14:                               # %if.then24
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB137_17
# %bb.15:                               # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB137_17
# %bb.16:                               # %if.then30
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	jmp	.LBB137_18
.LBB137_17:                             # %if.else32
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB137_18:                             # %if.end34
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB137_20
.LBB137_19:                             # %if.else35
	movl	intras, %eax
	movl	%eax, -12(%rbp)
.LBB137_20:                             # %if.end36
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB137_35
# %bb.21:                               # %land.lhs.true39
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB137_35
# %bb.22:                               # %if.then42
	movl	$0, -8(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB137_27
# %bb.23:                               # %if.then46
	movl	$1, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB137_25
# %bb.24:                               # %if.then49
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB137_26
.LBB137_25:                             # %if.else50
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB137_26:                             # %if.end53
	jmp	.LBB137_34
.LBB137_27:                             # %if.else54
	xorl	%edi, %edi
	callq	test_wp_B_slice
	cmpl	$1, %eax
	jne	.LBB137_29
# %bb.28:                               # %if.then57
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB137_33
.LBB137_29:                             # %if.else58
	movq	input, %rax
	movl	1308(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB137_31
# %bb.30:                               # %if.then60
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB137_32
.LBB137_31:                             # %if.else63
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB137_32:                             # %if.end66
	jmp	.LBB137_33
.LBB137_33:                             # %if.end67
	jmp	.LBB137_34
.LBB137_34:                             # %if.end68
	jmp	.LBB137_36
.LBB137_35:                             # %if.else69
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB137_36:                             # %if.end72
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB137_40
# %bb.37:                               # %land.lhs.true75
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB137_40
# %bb.38:                               # %land.lhs.true78
	imull	$100, intras, %eax
	movq	img, %rcx
	xorl	%edx, %edx
	divl	72488(%rcx)
	cmpl	$75, %eax
	jb	.LBB137_40
# %bb.39:                               # %if.then80
	movq	img, %rax
	movl	$2, 24(%rax)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB137_40:                             # %if.end82
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB137_42
# %bb.41:                               # %if.then85
	movq	$0, enc_frame_picture3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB137_46
.LBB137_42:                             # %if.else87
	movq	frame_pic3, %rdi
	movl	$2, %esi
	callq	frame_picture
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB137_44
# %bb.43:                               # %if.then90
	movq	frame_pic, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
	jmp	.LBB137_45
.LBB137_44:                             # %if.else94
	movq	frame_pic2, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	addl	71804(%rcx), %eax
	movl	%eax, 71804(%rcx)
.LBB137_45:                             # %if.end98
	jmp	.LBB137_46
.LBB137_46:                             # %if.end99
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB137_48
# %bb.47:                               # %if.then102
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB137_51
.LBB137_48:                             # %if.else105
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB137_50
# %bb.49:                               # %if.then108
	movq	enc_frame_picture2, %rax
	movq	%rax, enc_picture
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	%rax, active_pps
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
.LBB137_50:                             # %if.end111
	jmp	.LBB137_51
.LBB137_51:                             # %if.end112
	cmpl	$150256053, -24(%rbp)   # imm = 0x8F4B9B5
	jne	.LBB137_53
.LBB137_52:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB137_53:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB137_52
.Lfunc_end137:
	.size	rdPictureCoding.101, .Lfunc_end137-rdPictureCoding.101
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function GenerateFullPelRepresentation.102
	.type	GenerateFullPelRepresentation.102,@function
GenerateFullPelRepresentation.102:      # @GenerateFullPelRepresentation.102
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$1827991686, -44(%rbp)  # imm = 0x6CF4F086
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movl	$0, -28(%rbp)
.LBB138_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_3 Depth 2
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB138_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB138_1 Depth=1
	movl	$0, -32(%rbp)
.LBB138_3:                              # %for.cond1
                                        #   Parent Loop BB138_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-32(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB138_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB138_3 Depth=2
	movq	-64(%rbp), %rbx
	movl	-28(%rbp), %r14d
	movl	-32(%rbp), %r15d
	movq	-56(%rbp), %rdi
	movl	-28(%rbp), %esi
	shll	$2, %esi
	movl	-32(%rbp), %edx
	shll	$2, %edx
	movl	-40(%rbp), %ecx
	movl	-36(%rbp), %r8d
	callq	FastPelY_14
	movl	-36(%rbp), %r8d
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_11
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB138_3 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB138_3
.LBB138_6:                              # %for.end
                                        #   in Loop: Header=BB138_1 Depth=1
	jmp	.LBB138_7
.LBB138_7:                              # %for.inc5
                                        #   in Loop: Header=BB138_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB138_1
.LBB138_8:                              # %for.end7
	cmpl	$1827991686, -44(%rbp)  # imm = 0x6CF4F086
	jne	.LBB138_10
.LBB138_9:
	addq	$40, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB138_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB138_9
.Lfunc_end138:
	.size	GenerateFullPelRepresentation.102, .Lfunc_end138-GenerateFullPelRepresentation.102
	.cfi_endproc
                                        # -- End function
	.globl	UnifiedOneForthPix.103  # -- Begin function UnifiedOneForthPix.103
	.p2align	4, 0x90
	.type	UnifiedOneForthPix.103,@function
UnifiedOneForthPix.103:                 # @UnifiedOneForthPix.103
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$1107816339, -108(%rbp) # imm = 0x4207EF93
	movq	%rdi, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	6424(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	cmpq	$0, 6448(%rax)
	jne	.LBB139_2
# %bb.1:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpq	$0, 6432(%rax)
	je	.LBB139_3
.LBB139_2:                              # %if.then
	jmp	.LBB139_266
.LBB139_3:                              # %if.end
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6432(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6432(%rax), %rcx
	jne	.LBB139_5
# %bb.4:                                # %if.then9
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB139_5:                              # %if.end10
	movq	-64(%rbp), %rdi
	addq	$6448, %rdi             # imm = 0x1930
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB139_8
# %bb.6:                                # %lor.lhs.false19
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB139_8
# %bb.7:                                # %lor.lhs.false21
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB139_11
.LBB139_8:                              # %if.then23
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6440(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6440(%rax), %rcx
	jne	.LBB139_10
# %bb.9:                                # %if.then33
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB139_10:                             # %if.end34
	movq	-64(%rbp), %rdi
	addq	$6456, %rdi             # imm = 0x1938
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
.LBB139_11:                             # %if.end42
	movq	-64(%rbp), %rax
	movq	6448(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-64(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$-4, -48(%rbp)
.LBB139_12:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB139_14 Depth 2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB139_91
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB139_12 Depth=1
	movl	$-4, -44(%rbp)
.LBB139_14:                             # %for.cond49
                                        #   Parent Loop BB139_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB139_89
# %bb.15:                               # %for.body54
                                        #   in Loop: Header=BB139_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB139_17
# %bb.16:                               # %cond.true
                                        #   in Loop: Header=BB139_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB139_18
.LBB139_17:                             # %cond.false
                                        #   in Loop: Header=BB139_14 Depth=2
	movl	-48(%rbp), %eax
.LBB139_18:                             # %cond.end
                                        #   in Loop: Header=BB139_14 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB139_20
# %bb.19:                               # %cond.true62
                                        #   in Loop: Header=BB139_14 Depth=2
	xorl	%eax, %eax
	jmp	.LBB139_24
.LBB139_20:                             # %cond.false63
                                        #   in Loop: Header=BB139_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB139_22
# %bb.21:                               # %cond.true68
                                        #   in Loop: Header=BB139_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB139_23
.LBB139_22:                             # %cond.false71
                                        #   in Loop: Header=BB139_14 Depth=2
	movl	-48(%rbp), %eax
.LBB139_23:                             # %cond.end72
                                        #   in Loop: Header=BB139_14 Depth=2
.LBB139_24:                             # %cond.end74
                                        #   in Loop: Header=BB139_14 Depth=2
	movl	%eax, -84(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	-104(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB139_26
# %bb.25:                               # %cond.true80
                                        #   in Loop: Header=BB139_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB139_27
.LBB139_26:                             # %cond.false83
                                        #   in Loop: Header=BB139_14 Depth=2
	movl	-44(%rbp), %edx
.LBB139_27:                             # %cond.end84
                                        #   in Loop: Header=BB139_14 Depth=2
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB139_29
# %bb.28:                               # %cond.true88
                                        #   in Loop: Header=BB139_14 Depth=2
	xorl	%edx, %edx
	jmp	.LBB139_33
.LBB139_29:                             # %cond.false89
                                        #   in Loop: Header=BB139_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB139_31
# %bb.30:                               # %cond.true94
                                        #   in Loop: Header=BB139_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB139_32
.LBB139_31:                             # %cond.false97
                                        #   in Loop: Header=BB139_14 Depth=2
	movl	-44(%rbp), %edx
.LBB139_32:                             # %cond.end98
                                        #   in Loop: Header=BB139_14 Depth=2
.LBB139_33:                             # %cond.end100
                                        #   in Loop: Header=BB139_14 Depth=2
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB139_35
# %bb.34:                               # %cond.true112
                                        #   in Loop: Header=BB139_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB139_36
.LBB139_35:                             # %cond.false115
                                        #   in Loop: Header=BB139_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB139_36:                             # %cond.end117
                                        #   in Loop: Header=BB139_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB139_38
# %bb.37:                               # %cond.true121
                                        #   in Loop: Header=BB139_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB139_42
.LBB139_38:                             # %cond.false122
                                        #   in Loop: Header=BB139_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB139_40
# %bb.39:                               # %cond.true128
                                        #   in Loop: Header=BB139_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB139_41
.LBB139_40:                             # %cond.false131
                                        #   in Loop: Header=BB139_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB139_41:                             # %cond.end133
                                        #   in Loop: Header=BB139_14 Depth=2
.LBB139_42:                             # %cond.end135
                                        #   in Loop: Header=BB139_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB139_44
# %bb.43:                               # %cond.true149
                                        #   in Loop: Header=BB139_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB139_45
.LBB139_44:                             # %cond.false152
                                        #   in Loop: Header=BB139_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB139_45:                             # %cond.end154
                                        #   in Loop: Header=BB139_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB139_47
# %bb.46:                               # %cond.true158
                                        #   in Loop: Header=BB139_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB139_51
.LBB139_47:                             # %cond.false159
                                        #   in Loop: Header=BB139_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB139_49
# %bb.48:                               # %cond.true165
                                        #   in Loop: Header=BB139_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB139_50
.LBB139_49:                             # %cond.false168
                                        #   in Loop: Header=BB139_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB139_50:                             # %cond.end170
                                        #   in Loop: Header=BB139_14 Depth=2
.LBB139_51:                             # %cond.end172
                                        #   in Loop: Header=BB139_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB139_53
# %bb.52:                               # %cond.true184
                                        #   in Loop: Header=BB139_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB139_54
.LBB139_53:                             # %cond.false187
                                        #   in Loop: Header=BB139_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB139_54:                             # %cond.end189
                                        #   in Loop: Header=BB139_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB139_56
# %bb.55:                               # %cond.true193
                                        #   in Loop: Header=BB139_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB139_60
.LBB139_56:                             # %cond.false194
                                        #   in Loop: Header=BB139_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB139_58
# %bb.57:                               # %cond.true200
                                        #   in Loop: Header=BB139_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB139_59
.LBB139_58:                             # %cond.false203
                                        #   in Loop: Header=BB139_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB139_59:                             # %cond.end205
                                        #   in Loop: Header=BB139_14 Depth=2
.LBB139_60:                             # %cond.end207
                                        #   in Loop: Header=BB139_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB139_62
# %bb.61:                               # %cond.true222
                                        #   in Loop: Header=BB139_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB139_63
.LBB139_62:                             # %cond.false225
                                        #   in Loop: Header=BB139_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB139_63:                             # %cond.end227
                                        #   in Loop: Header=BB139_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB139_65
# %bb.64:                               # %cond.true231
                                        #   in Loop: Header=BB139_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB139_69
.LBB139_65:                             # %cond.false232
                                        #   in Loop: Header=BB139_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB139_67
# %bb.66:                               # %cond.true238
                                        #   in Loop: Header=BB139_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB139_68
.LBB139_67:                             # %cond.false241
                                        #   in Loop: Header=BB139_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB139_68:                             # %cond.end243
                                        #   in Loop: Header=BB139_14 Depth=2
.LBB139_69:                             # %cond.end245
                                        #   in Loop: Header=BB139_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB139_71
# %bb.70:                               # %cond.true257
                                        #   in Loop: Header=BB139_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB139_72
.LBB139_71:                             # %cond.false260
                                        #   in Loop: Header=BB139_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB139_72:                             # %cond.end262
                                        #   in Loop: Header=BB139_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB139_74
# %bb.73:                               # %cond.true266
                                        #   in Loop: Header=BB139_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB139_78
.LBB139_74:                             # %cond.false267
                                        #   in Loop: Header=BB139_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB139_76
# %bb.75:                               # %cond.true273
                                        #   in Loop: Header=BB139_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB139_77
.LBB139_76:                             # %cond.false276
                                        #   in Loop: Header=BB139_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB139_77:                             # %cond.end278
                                        #   in Loop: Header=BB139_14 Depth=2
.LBB139_78:                             # %cond.end280
                                        #   in Loop: Header=BB139_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movq	-104(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB139_80
# %bb.79:                               # %cond.true294
                                        #   in Loop: Header=BB139_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB139_81
.LBB139_80:                             # %cond.false297
                                        #   in Loop: Header=BB139_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB139_81:                             # %cond.end298
                                        #   in Loop: Header=BB139_14 Depth=2
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB139_83
# %bb.82:                               # %cond.true302
                                        #   in Loop: Header=BB139_14 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB139_87
.LBB139_83:                             # %cond.false303
                                        #   in Loop: Header=BB139_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB139_85
# %bb.84:                               # %cond.true308
                                        #   in Loop: Header=BB139_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB139_86
.LBB139_85:                             # %cond.false311
                                        #   in Loop: Header=BB139_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB139_86:                             # %cond.end312
                                        #   in Loop: Header=BB139_14 Depth=2
.LBB139_87:                             # %cond.end314
                                        #   in Loop: Header=BB139_14 Depth=2
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	shll	$10, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	shll	$5, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.88:                               # %for.inc
                                        #   in Loop: Header=BB139_14 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB139_14
.LBB139_89:                             # %for.end
                                        #   in Loop: Header=BB139_12 Depth=1
	jmp	.LBB139_90
.LBB139_90:                             # %for.inc336
                                        #   in Loop: Header=BB139_12 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB139_12
.LBB139_91:                             # %for.end338
	movl	$0, -44(%rbp)
.LBB139_92:                             # %for.cond339
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB139_94 Depth 2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$8, %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB139_132
# %bb.93:                               # %for.body345
                                        #   in Loop: Header=BB139_92 Depth=1
	movl	$0, -48(%rbp)
.LBB139_94:                             # %for.cond346
                                        #   Parent Loop BB139_92 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB139_130
# %bb.95:                               # %for.body351
                                        #   in Loop: Header=BB139_94 Depth=2
	movl	-48(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -124(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	movl	%eax, -88(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	img4Y_tmp, %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	img4Y_tmp, %rdx
	movl	-88(%rbp), %esi
	movl	-48(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB139_97
# %bb.96:                               # %cond.true363
                                        #   in Loop: Header=BB139_94 Depth=2
	movl	-88(%rbp), %esi
	jmp	.LBB139_98
.LBB139_97:                             # %cond.false364
                                        #   in Loop: Header=BB139_94 Depth=2
	movl	-48(%rbp), %esi
	addl	$1, %esi
.LBB139_98:                             # %cond.end366
                                        #   in Loop: Header=BB139_94 Depth=2
	xorl	%edi, %edi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$1, %esi
	cmpl	%esi, %edi
	jle	.LBB139_100
# %bb.99:                               # %cond.true377
                                        #   in Loop: Header=BB139_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB139_101
.LBB139_100:                            # %cond.false378
                                        #   in Loop: Header=BB139_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$1, %esi
.LBB139_101:                            # %cond.end380
                                        #   in Loop: Header=BB139_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-88(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB139_103
# %bb.102:                              # %cond.true389
                                        #   in Loop: Header=BB139_94 Depth=2
	movl	-88(%rbp), %edi
	jmp	.LBB139_104
.LBB139_103:                            # %cond.false390
                                        #   in Loop: Header=BB139_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$2, %edi
.LBB139_104:                            # %cond.end392
                                        #   in Loop: Header=BB139_94 Depth=2
	xorl	%ebx, %ebx
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$2, %esi
	cmpl	%esi, %ebx
	jle	.LBB139_106
# %bb.105:                              # %cond.true404
                                        #   in Loop: Header=BB139_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB139_107
.LBB139_106:                            # %cond.false405
                                        #   in Loop: Header=BB139_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$2, %esi
.LBB139_107:                            # %cond.end407
                                        #   in Loop: Header=BB139_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-88(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB139_109
# %bb.108:                              # %cond.true416
                                        #   in Loop: Header=BB139_94 Depth=2
	movl	-88(%rbp), %edi
	jmp	.LBB139_110
.LBB139_109:                            # %cond.false417
                                        #   in Loop: Header=BB139_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$3, %edi
.LBB139_110:                            # %cond.end419
                                        #   in Loop: Header=BB139_94 Depth=2
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	movl	-44(%rbp), %r8d
	subl	$8, %r8d
	shll	$1, %r8d
	movq	img, %rax
	movl	72684(%rax), %ebx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
	cmpl	%eax, %ebx
	jge	.LBB139_112
# %bb.111:                              # %cond.true440
                                        #   in Loop: Header=BB139_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB139_113
.LBB139_112:                            # %cond.false442
                                        #   in Loop: Header=BB139_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB139_113:                            # %cond.end449
                                        #   in Loop: Header=BB139_94 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB139_115
# %bb.114:                              # %cond.true453
                                        #   in Loop: Header=BB139_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB139_119
.LBB139_115:                            # %cond.false454
                                        #   in Loop: Header=BB139_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %ecx
	jge	.LBB139_117
# %bb.116:                              # %cond.true464
                                        #   in Loop: Header=BB139_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB139_118
.LBB139_117:                            # %cond.false466
                                        #   in Loop: Header=BB139_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB139_118:                            # %cond.end473
                                        #   in Loop: Header=BB139_94 Depth=2
.LBB139_119:                            # %cond.end475
                                        #   in Loop: Header=BB139_94 Depth=2
	movl	%r8d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	addl	$2, %esi
	movl	-44(%rbp), %ecx
	subl	$8, %ecx
	shll	$1, %ecx
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB139_121
# %bb.120:                              # %cond.true488
                                        #   in Loop: Header=BB139_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB139_122
.LBB139_121:                            # %cond.false490
                                        #   in Loop: Header=BB139_94 Depth=2
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB139_122:                            # %cond.end493
                                        #   in Loop: Header=BB139_94 Depth=2
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB139_124
# %bb.123:                              # %cond.true497
                                        #   in Loop: Header=BB139_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB139_128
.LBB139_124:                            # %cond.false498
                                        #   in Loop: Header=BB139_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB139_126
# %bb.125:                              # %cond.true504
                                        #   in Loop: Header=BB139_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB139_127
.LBB139_126:                            # %cond.false506
                                        #   in Loop: Header=BB139_94 Depth=2
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB139_127:                            # %cond.end509
                                        #   in Loop: Header=BB139_94 Depth=2
.LBB139_128:                            # %cond.end511
                                        #   in Loop: Header=BB139_94 Depth=2
	movl	%ecx, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.129:                              # %for.inc514
                                        #   in Loop: Header=BB139_94 Depth=2
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB139_94
.LBB139_130:                            # %for.end516
                                        #   in Loop: Header=BB139_92 Depth=1
	jmp	.LBB139_131
.LBB139_131:                            # %for.inc517
                                        #   in Loop: Header=BB139_92 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB139_92
.LBB139_132:                            # %for.end519
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -72(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -48(%rbp)
.LBB139_133:                            # %for.cond528
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB139_135 Depth 2
	movl	-48(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB139_161
# %bb.134:                              # %for.body532
                                        #   in Loop: Header=BB139_133 Depth=1
	movl	$0, -44(%rbp)
.LBB139_135:                            # %for.cond533
                                        #   Parent Loop BB139_133 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB139_159
# %bb.136:                              # %for.body537
                                        #   in Loop: Header=BB139_135 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r15d
	subl	$16, %r15d
	movl	-44(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB139_138
# %bb.137:                              # %cond.true551
                                        #   in Loop: Header=BB139_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB139_139
.LBB139_138:                            # %cond.false553
                                        #   in Loop: Header=BB139_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB139_139:                            # %cond.end555
                                        #   in Loop: Header=BB139_135 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB139_141
# %bb.140:                              # %cond.true565
                                        #   in Loop: Header=BB139_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB139_145
.LBB139_141:                            # %cond.false567
                                        #   in Loop: Header=BB139_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB139_143
# %bb.142:                              # %cond.true577
                                        #   in Loop: Header=BB139_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB139_144
.LBB139_143:                            # %cond.false579
                                        #   in Loop: Header=BB139_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB139_144:                            # %cond.end581
                                        #   in Loop: Header=BB139_135 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB139_145:                            # %cond.end589
                                        #   in Loop: Header=BB139_135 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB139_147
# %bb.146:                              # %cond.true593
                                        #   in Loop: Header=BB139_135 Depth=2
	xorl	%eax, %eax
	jmp	.LBB139_157
.LBB139_147:                            # %cond.false594
                                        #   in Loop: Header=BB139_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB139_149
# %bb.148:                              # %cond.true605
                                        #   in Loop: Header=BB139_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB139_150
.LBB139_149:                            # %cond.false607
                                        #   in Loop: Header=BB139_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB139_150:                            # %cond.end609
                                        #   in Loop: Header=BB139_135 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB139_152
# %bb.151:                              # %cond.true619
                                        #   in Loop: Header=BB139_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB139_156
.LBB139_152:                            # %cond.false621
                                        #   in Loop: Header=BB139_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB139_154
# %bb.153:                              # %cond.true631
                                        #   in Loop: Header=BB139_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB139_155
.LBB139_154:                            # %cond.false633
                                        #   in Loop: Header=BB139_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB139_155:                            # %cond.end635
                                        #   in Loop: Header=BB139_135 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB139_156:                            # %cond.end643
                                        #   in Loop: Header=BB139_135 Depth=2
.LBB139_157:                            # %cond.end645
                                        #   in Loop: Header=BB139_135 Depth=2
	movq	%r14, %rdi
	movl	%r15d, %esi
	movl	%r12d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.158:                              # %for.inc648
                                        #   in Loop: Header=BB139_135 Depth=2
	movl	-44(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB139_135
.LBB139_159:                            # %for.end650
                                        #   in Loop: Header=BB139_133 Depth=1
	jmp	.LBB139_160
.LBB139_160:                            # %for.inc651
                                        #   in Loop: Header=BB139_133 Depth=1
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB139_133
.LBB139_161:                            # %for.end653
	movl	$0, -44(%rbp)
.LBB139_162:                            # %for.cond654
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB139_164 Depth 2
	movl	-44(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB139_265
# %bb.163:                              # %for.body658
                                        #   in Loop: Header=BB139_162 Depth=1
	movl	$0, -48(%rbp)
.LBB139_164:                            # %for.cond659
                                        #   Parent Loop BB139_162 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB139_263
# %bb.165:                              # %for.body663
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB139_188
# %bb.166:                              # %if.then666
                                        #   in Loop: Header=BB139_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB139_168
# %bb.167:                              # %cond.true679
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB139_169
.LBB139_168:                            # %cond.false681
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB139_169:                            # %cond.end683
                                        #   in Loop: Header=BB139_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB139_171
# %bb.170:                              # %cond.true694
                                        #   in Loop: Header=BB139_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB139_175
.LBB139_171:                            # %cond.false696
                                        #   in Loop: Header=BB139_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB139_173
# %bb.172:                              # %cond.true705
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB139_174
.LBB139_173:                            # %cond.false707
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB139_174:                            # %cond.end709
                                        #   in Loop: Header=BB139_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB139_175:                            # %cond.end718
                                        #   in Loop: Header=BB139_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB139_177
# %bb.176:                              # %cond.true722
                                        #   in Loop: Header=BB139_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB139_187
.LBB139_177:                            # %cond.false723
                                        #   in Loop: Header=BB139_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB139_179
# %bb.178:                              # %cond.true733
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB139_180
.LBB139_179:                            # %cond.false735
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB139_180:                            # %cond.end737
                                        #   in Loop: Header=BB139_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB139_182
# %bb.181:                              # %cond.true748
                                        #   in Loop: Header=BB139_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB139_186
.LBB139_182:                            # %cond.false750
                                        #   in Loop: Header=BB139_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB139_184
# %bb.183:                              # %cond.true759
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB139_185
.LBB139_184:                            # %cond.false761
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB139_185:                            # %cond.end763
                                        #   in Loop: Header=BB139_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB139_186:                            # %cond.end772
                                        #   in Loop: Header=BB139_164 Depth=2
.LBB139_187:                            # %cond.end774
                                        #   in Loop: Header=BB139_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB139_261
.LBB139_188:                            # %if.else
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB139_190
# %bb.189:                              # %land.lhs.true
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	je	.LBB139_192
.LBB139_190:                            # %lor.lhs.false783
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$2, %edx
	jne	.LBB139_226
# %bb.191:                              # %land.lhs.true787
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$3, %edx
	jne	.LBB139_226
.LBB139_192:                            # %if.then791
                                        #   in Loop: Header=BB139_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB139_194
# %bb.193:                              # %cond.true801
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB139_195
.LBB139_194:                            # %cond.false803
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB139_195:                            # %cond.end805
                                        #   in Loop: Header=BB139_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB139_197
# %bb.196:                              # %cond.true814
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB139_198
.LBB139_197:                            # %cond.false816
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB139_198:                            # %cond.end818
                                        #   in Loop: Header=BB139_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB139_200
# %bb.199:                              # %cond.true830
                                        #   in Loop: Header=BB139_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB139_207
.LBB139_200:                            # %cond.false832
                                        #   in Loop: Header=BB139_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB139_202
# %bb.201:                              # %cond.true838
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB139_203
.LBB139_202:                            # %cond.false840
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB139_203:                            # %cond.end842
                                        #   in Loop: Header=BB139_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB139_205
# %bb.204:                              # %cond.true851
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB139_206
.LBB139_205:                            # %cond.false853
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB139_206:                            # %cond.end855
                                        #   in Loop: Header=BB139_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB139_207:                            # %cond.end865
                                        #   in Loop: Header=BB139_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB139_209
# %bb.208:                              # %cond.true869
                                        #   in Loop: Header=BB139_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB139_225
.LBB139_209:                            # %cond.false870
                                        #   in Loop: Header=BB139_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB139_211
# %bb.210:                              # %cond.true877
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB139_212
.LBB139_211:                            # %cond.false879
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB139_212:                            # %cond.end881
                                        #   in Loop: Header=BB139_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB139_214
# %bb.213:                              # %cond.true890
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB139_215
.LBB139_214:                            # %cond.false892
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB139_215:                            # %cond.end894
                                        #   in Loop: Header=BB139_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB139_217
# %bb.216:                              # %cond.true906
                                        #   in Loop: Header=BB139_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB139_224
.LBB139_217:                            # %cond.false908
                                        #   in Loop: Header=BB139_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB139_219
# %bb.218:                              # %cond.true914
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB139_220
.LBB139_219:                            # %cond.false916
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB139_220:                            # %cond.end918
                                        #   in Loop: Header=BB139_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB139_222
# %bb.221:                              # %cond.true927
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB139_223
.LBB139_222:                            # %cond.false929
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB139_223:                            # %cond.end931
                                        #   in Loop: Header=BB139_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB139_224:                            # %cond.end941
                                        #   in Loop: Header=BB139_164 Depth=2
.LBB139_225:                            # %cond.end943
                                        #   in Loop: Header=BB139_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB139_260
.LBB139_226:                            # %if.else946
                                        #   in Loop: Header=BB139_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB139_228
# %bb.227:                              # %cond.true960
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB139_229
.LBB139_228:                            # %cond.false962
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB139_229:                            # %cond.end964
                                        #   in Loop: Header=BB139_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB139_231
# %bb.230:                              # %cond.true971
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB139_232
.LBB139_231:                            # %cond.false973
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB139_232:                            # %cond.end975
                                        #   in Loop: Header=BB139_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB139_234
# %bb.233:                              # %cond.true985
                                        #   in Loop: Header=BB139_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB139_241
.LBB139_234:                            # %cond.false987
                                        #   in Loop: Header=BB139_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB139_236
# %bb.235:                              # %cond.true997
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB139_237
.LBB139_236:                            # %cond.false999
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB139_237:                            # %cond.end1001
                                        #   in Loop: Header=BB139_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB139_239
# %bb.238:                              # %cond.true1008
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB139_240
.LBB139_239:                            # %cond.false1010
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB139_240:                            # %cond.end1012
                                        #   in Loop: Header=BB139_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB139_241:                            # %cond.end1020
                                        #   in Loop: Header=BB139_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB139_243
# %bb.242:                              # %cond.true1024
                                        #   in Loop: Header=BB139_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB139_259
.LBB139_243:                            # %cond.false1025
                                        #   in Loop: Header=BB139_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB139_245
# %bb.244:                              # %cond.true1036
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB139_246
.LBB139_245:                            # %cond.false1038
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB139_246:                            # %cond.end1040
                                        #   in Loop: Header=BB139_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB139_248
# %bb.247:                              # %cond.true1047
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB139_249
.LBB139_248:                            # %cond.false1049
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB139_249:                            # %cond.end1051
                                        #   in Loop: Header=BB139_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB139_251
# %bb.250:                              # %cond.true1061
                                        #   in Loop: Header=BB139_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB139_258
.LBB139_251:                            # %cond.false1063
                                        #   in Loop: Header=BB139_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB139_253
# %bb.252:                              # %cond.true1073
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB139_254
.LBB139_253:                            # %cond.false1075
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB139_254:                            # %cond.end1077
                                        #   in Loop: Header=BB139_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB139_256
# %bb.255:                              # %cond.true1084
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB139_257
.LBB139_256:                            # %cond.false1086
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB139_257:                            # %cond.end1088
                                        #   in Loop: Header=BB139_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB139_258:                            # %cond.end1096
                                        #   in Loop: Header=BB139_164 Depth=2
.LBB139_259:                            # %cond.end1098
                                        #   in Loop: Header=BB139_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
.LBB139_260:                            # %if.end1101
                                        #   in Loop: Header=BB139_164 Depth=2
	jmp	.LBB139_261
.LBB139_261:                            # %if.end1102
                                        #   in Loop: Header=BB139_164 Depth=2
	jmp	.LBB139_262
.LBB139_262:                            # %for.inc1103
                                        #   in Loop: Header=BB139_164 Depth=2
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB139_164
.LBB139_263:                            # %for.end1105
                                        #   in Loop: Header=BB139_162 Depth=1
	jmp	.LBB139_264
.LBB139_264:                            # %for.inc1106
                                        #   in Loop: Header=BB139_162 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB139_162
.LBB139_265:                            # %for.end1108
	movq	-80(%rbp), %rdi
	movq	-120(%rbp), %rsi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	movq	-64(%rbp), %rax
	movl	6396(%rax), %ecx
	callq	GenerateFullPelRepresentation
.LBB139_266:                            # %return
	cmpl	$1107816339, -108(%rbp) # imm = 0x4207EF93
	jne	.LBB139_268
.LBB139_267:
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB139_268:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB139_267
.Lfunc_end139:
	.size	UnifiedOneForthPix.103, .Lfunc_end139-UnifiedOneForthPix.103
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function GenerateFullPelRepresentation.104
	.type	GenerateFullPelRepresentation.104,@function
GenerateFullPelRepresentation.104:      # @GenerateFullPelRepresentation.104
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$1689680909, -44(%rbp)  # imm = 0x64B67C0D
	movq	%rdi, -64(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movl	$0, -32(%rbp)
.LBB140_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB140_3 Depth 2
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB140_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB140_1 Depth=1
	movl	$0, -28(%rbp)
.LBB140_3:                              # %for.cond1
                                        #   Parent Loop BB140_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB140_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB140_3 Depth=2
	movq	-56(%rbp), %rbx
	movl	-32(%rbp), %r14d
	movl	-28(%rbp), %r15d
	movq	-64(%rbp), %rdi
	movl	-32(%rbp), %esi
	shll	$2, %esi
	movl	-28(%rbp), %edx
	shll	$2, %edx
	movl	-40(%rbp), %ecx
	movl	-36(%rbp), %r8d
	callq	FastPelY_14
	movl	-36(%rbp), %r8d
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_11
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB140_3 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB140_3
.LBB140_6:                              # %for.end
                                        #   in Loop: Header=BB140_1 Depth=1
	jmp	.LBB140_7
.LBB140_7:                              # %for.inc5
                                        #   in Loop: Header=BB140_1 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB140_1
.LBB140_8:                              # %for.end7
	cmpl	$1689680909, -44(%rbp)  # imm = 0x64B67C0D
	jne	.LBB140_10
.LBB140_9:
	addq	$40, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB140_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB140_9
.Lfunc_end140:
	.size	GenerateFullPelRepresentation.104, .Lfunc_end140-GenerateFullPelRepresentation.104
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function rdPictureCoding.105
	.type	rdPictureCoding.105,@function
rdPictureCoding.105:                    # @rdPictureCoding.105
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1181100034, -24(%rbp)  # imm = 0x46662802
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -4(%rbp)
	movl	intras, %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB141_9
# %bb.1:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB141_9
# %bb.2:                                # %if.then
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB141_7
# %bb.3:                                # %if.then5
	xorl	%edi, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB141_5
# %bb.4:                                # %if.then7
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB141_6
.LBB141_5:                              # %if.else
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB141_6:                              # %if.end
	jmp	.LBB141_8
.LBB141_7:                              # %if.else9
	movabsq	$PicParSet, %rax
	addq	$480, %rax              # imm = 0x1E0
	movq	%rax, active_pps
.LBB141_8:                              # %if.end10
	jmp	.LBB141_10
.LBB141_9:                              # %if.else11
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB141_10:                             # %if.end14
	movq	active_pps, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB141_12
# %bb.11:                               # %if.then17
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture2
	jmp	.LBB141_13
.LBB141_12:                             # %if.else18
	movq	frame_pic2, %rdi
	movl	$1, %esi
	callq	frame_picture
	movq	frame_pic, %rdi
	movq	frame_pic2, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
.LBB141_13:                             # %if.end21
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB141_19
# %bb.14:                               # %if.then24
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB141_17
# %bb.15:                               # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB141_17
# %bb.16:                               # %if.then30
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	jmp	.LBB141_18
.LBB141_17:                             # %if.else32
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB141_18:                             # %if.end34
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB141_20
.LBB141_19:                             # %if.else35
	movl	intras, %eax
	movl	%eax, -12(%rbp)
.LBB141_20:                             # %if.end36
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB141_35
# %bb.21:                               # %land.lhs.true39
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB141_35
# %bb.22:                               # %if.then42
	movl	$0, -8(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB141_27
# %bb.23:                               # %if.then46
	movl	$1, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB141_25
# %bb.24:                               # %if.then49
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB141_26
.LBB141_25:                             # %if.else50
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB141_26:                             # %if.end53
	jmp	.LBB141_34
.LBB141_27:                             # %if.else54
	xorl	%edi, %edi
	callq	test_wp_B_slice
	cmpl	$1, %eax
	jne	.LBB141_29
# %bb.28:                               # %if.then57
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB141_33
.LBB141_29:                             # %if.else58
	movq	input, %rax
	movl	1308(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB141_31
# %bb.30:                               # %if.then60
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB141_32
.LBB141_31:                             # %if.else63
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB141_32:                             # %if.end66
	jmp	.LBB141_33
.LBB141_33:                             # %if.end67
	jmp	.LBB141_34
.LBB141_34:                             # %if.end68
	jmp	.LBB141_36
.LBB141_35:                             # %if.else69
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB141_36:                             # %if.end72
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB141_40
# %bb.37:                               # %land.lhs.true75
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB141_40
# %bb.38:                               # %land.lhs.true78
	imull	$100, intras, %eax
	movq	img, %rcx
	xorl	%edx, %edx
	divl	72488(%rcx)
	cmpl	$75, %eax
	jb	.LBB141_40
# %bb.39:                               # %if.then80
	movq	img, %rax
	movl	$2, 24(%rax)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB141_40:                             # %if.end82
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB141_42
# %bb.41:                               # %if.then85
	movq	$0, enc_frame_picture3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB141_46
.LBB141_42:                             # %if.else87
	movq	frame_pic3, %rdi
	movl	$2, %esi
	callq	frame_picture
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB141_44
# %bb.43:                               # %if.then90
	movq	frame_pic, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
	jmp	.LBB141_45
.LBB141_44:                             # %if.else94
	movq	frame_pic2, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	addl	71804(%rcx), %eax
	movl	%eax, 71804(%rcx)
.LBB141_45:                             # %if.end98
	jmp	.LBB141_46
.LBB141_46:                             # %if.end99
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB141_48
# %bb.47:                               # %if.then102
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB141_51
.LBB141_48:                             # %if.else105
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB141_50
# %bb.49:                               # %if.then108
	movq	enc_frame_picture2, %rax
	movq	%rax, enc_picture
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	%rax, active_pps
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
.LBB141_50:                             # %if.end111
	jmp	.LBB141_51
.LBB141_51:                             # %if.end112
	cmpl	$1181100034, -24(%rbp)  # imm = 0x46662802
	jne	.LBB141_53
.LBB141_52:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB141_53:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB141_52
.Lfunc_end141:
	.size	rdPictureCoding.105, .Lfunc_end141-rdPictureCoding.105
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function GenerateFullPelRepresentation.106
	.type	GenerateFullPelRepresentation.106,@function
GenerateFullPelRepresentation.106:      # @GenerateFullPelRepresentation.106
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$117269011, -44(%rbp)   # imm = 0x6FD6213
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movl	$0, -32(%rbp)
.LBB142_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB142_3 Depth 2
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB142_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB142_1 Depth=1
	movl	$0, -28(%rbp)
.LBB142_3:                              # %for.cond1
                                        #   Parent Loop BB142_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB142_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB142_3 Depth=2
	movq	-64(%rbp), %rbx
	movl	-32(%rbp), %r14d
	movl	-28(%rbp), %r15d
	movq	-56(%rbp), %rdi
	movl	-32(%rbp), %esi
	shll	$2, %esi
	movl	-28(%rbp), %edx
	shll	$2, %edx
	movl	-40(%rbp), %ecx
	movl	-36(%rbp), %r8d
	callq	FastPelY_14
	movl	-36(%rbp), %r8d
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_11
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB142_3 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB142_3
.LBB142_6:                              # %for.end
                                        #   in Loop: Header=BB142_1 Depth=1
	jmp	.LBB142_7
.LBB142_7:                              # %for.inc5
                                        #   in Loop: Header=BB142_1 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB142_1
.LBB142_8:                              # %for.end7
	cmpl	$117269011, -44(%rbp)   # imm = 0x6FD6213
	jne	.LBB142_10
.LBB142_9:
	addq	$40, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB142_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB142_9
.Lfunc_end142:
	.size	GenerateFullPelRepresentation.106, .Lfunc_end142-GenerateFullPelRepresentation.106
	.cfi_endproc
                                        # -- End function
	.type	ONE_FOURTH_TAP,@object  # @ONE_FOURTH_TAP
	.section	.rodata,"a",@progbits
	.globl	ONE_FOURTH_TAP
	.p2align	4
ONE_FOURTH_TAP:
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	4294967291              # 0xfffffffb
	.long	4294967292              # 0xfffffffc
	.long	1                       # 0x1
	.long	0                       # 0x0
	.size	ONE_FOURTH_TAP, 24

	.type	enc_picture,@object     # @enc_picture
	.comm	enc_picture,8,8
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	encode_one_frame.prev_frame_no,@object # @encode_one_frame.prev_frame_no
	.local	encode_one_frame.prev_frame_no
	.comm	encode_one_frame.prev_frame_no,4,4
	.type	encode_one_frame.consecutive_non_reference_pictures,@object # @encode_one_frame.consecutive_non_reference_pictures
	.local	encode_one_frame.consecutive_non_reference_pictures
	.comm	encode_one_frame.consecutive_non_reference_pictures,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	enc_frame_picture,@object # @enc_frame_picture
	.comm	enc_frame_picture,8,8
	.type	enc_frame_picture2,@object # @enc_frame_picture2
	.comm	enc_frame_picture2,8,8
	.type	enc_frame_picture3,@object # @enc_frame_picture3
	.comm	enc_frame_picture3,8,8
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	QP,@object              # @QP
	.comm	QP,4,4
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	enc_bottom_picture,@object # @enc_bottom_picture
	.comm	enc_bottom_picture,8,8
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"POC type 2 cannot be applied for the coding pattern where the encoding /decoding order of pictures are different from the output order.\n"
	.size	.L.str, 137

	.type	enc_top_picture,@object # @enc_top_picture
	.comm	enc_top_picture,8,8
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"alloc_storable_picture: s->imgY_11"
	.size	.L.str.1, 35

	.type	.L.str.2,@object        # @.str.2
.L.str.2:
	.asciz	"alloc_storable_picture: s->imgY_11_w"
	.size	.L.str.2, 37

	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	.L.str.3,@object        # @.str.3
.L.str.3:
	.asciz	"Source picture has higher bit depth than imgpel data type. Please recompile with larger data type for imgpel."
	.size	.L.str.3, 110

	.type	.L.str.4,@object        # @.str.4
.L.str.4:
	.asciz	"reading only from formats of 8, 16 or 32 bit allowed on big endian architecture"
	.size	.L.str.4, 80

	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4
	.type	seiHasUser_data_unregistered_info,@object # @seiHasUser_data_unregistered_info
	.comm	seiHasUser_data_unregistered_info,4,4
	.type	seiUser_data_unregistered,@object # @seiUser_data_unregistered
	.comm	seiUser_data_unregistered,32,8
	.type	seiHasUser_data_registered_itu_t_t35_info,@object # @seiHasUser_data_registered_itu_t_t35_info
	.comm	seiHasUser_data_registered_itu_t_t35_info,4,4
	.type	seiUser_data_registered_itu_t_t35,@object # @seiUser_data_registered_itu_t_t35
	.comm	seiUser_data_registered_itu_t_t35,40,8
	.type	seiHasRandomAccess_info,@object # @seiHasRandomAccess_info
	.comm	seiHasRandomAccess_info,4,4
	.type	seiRandomAccess,@object # @seiRandomAccess
	.comm	seiRandomAccess,24,8
	.type	WriteNALU,@object       # @WriteNALU
	.comm	WriteNALU,8,8
	.type	bit_rate,@object        # @bit_rate
	.comm	bit_rate,8,8
	.type	frame_rate,@object      # @frame_rate
	.comm	frame_rate,8,8
	.type	GAMMAP,@object          # @GAMMAP
	.comm	GAMMAP,8,8
	.type	BETAP,@object           # @BETAP
	.comm	BETAP,8,8
	.type	RC_MAX_QUANT,@object    # @RC_MAX_QUANT
	.comm	RC_MAX_QUANT,4,4
	.type	RC_MIN_QUANT,@object    # @RC_MIN_QUANT
	.comm	RC_MIN_QUANT,4,4
	.type	BufferSize,@object      # @BufferSize
	.comm	BufferSize,8,8
	.type	GOPTargetBufferLevel,@object # @GOPTargetBufferLevel
	.comm	GOPTargetBufferLevel,8,8
	.type	CurrentBufferFullness,@object # @CurrentBufferFullness
	.comm	CurrentBufferFullness,8,8
	.type	TargetBufferLevel,@object # @TargetBufferLevel
	.comm	TargetBufferLevel,8,8
	.type	PreviousBit_Rate,@object # @PreviousBit_Rate
	.comm	PreviousBit_Rate,8,8
	.type	AWp,@object             # @AWp
	.comm	AWp,8,8
	.type	AWb,@object             # @AWb
	.comm	AWb,8,8
	.type	MyInitialQp,@object     # @MyInitialQp
	.comm	MyInitialQp,4,4
	.type	PAverageQp,@object      # @PAverageQp
	.comm	PAverageQp,4,4
	.type	PreviousPictureMAD,@object # @PreviousPictureMAD
	.comm	PreviousPictureMAD,8,8
	.type	MADPictureC1,@object    # @MADPictureC1
	.comm	MADPictureC1,8,8
	.type	MADPictureC2,@object    # @MADPictureC2
	.comm	MADPictureC2,8,8
	.type	PMADPictureC1,@object   # @PMADPictureC1
	.comm	PMADPictureC1,8,8
	.type	PMADPictureC2,@object   # @PMADPictureC2
	.comm	PMADPictureC2,8,8
	.type	PictureRejected,@object # @PictureRejected
	.comm	PictureRejected,84,16
	.type	PPictureMAD,@object     # @PPictureMAD
	.comm	PPictureMAD,168,16
	.type	PictureMAD,@object      # @PictureMAD
	.comm	PictureMAD,168,16
	.type	ReferenceMAD,@object    # @ReferenceMAD
	.comm	ReferenceMAD,168,16
	.type	m_rgRejected,@object    # @m_rgRejected
	.comm	m_rgRejected,84,16
	.type	m_rgQp,@object          # @m_rgQp
	.comm	m_rgQp,168,16
	.type	m_rgRp,@object          # @m_rgRp
	.comm	m_rgRp,168,16
	.type	m_X1,@object            # @m_X1
	.comm	m_X1,8,8
	.type	m_X2,@object            # @m_X2
	.comm	m_X2,8,8
	.type	m_Qc,@object            # @m_Qc
	.comm	m_Qc,4,4
	.type	m_Qstep,@object         # @m_Qstep
	.comm	m_Qstep,8,8
	.type	m_Qp,@object            # @m_Qp
	.comm	m_Qp,4,4
	.type	Pm_Qp,@object           # @Pm_Qp
	.comm	Pm_Qp,4,4
	.type	PreAveMBHeader,@object  # @PreAveMBHeader
	.comm	PreAveMBHeader,4,4
	.type	CurAveMBHeader,@object  # @CurAveMBHeader
	.comm	CurAveMBHeader,4,4
	.type	PPreHeader,@object      # @PPreHeader
	.comm	PPreHeader,4,4
	.type	PreviousQp1,@object     # @PreviousQp1
	.comm	PreviousQp1,4,4
	.type	PreviousQp2,@object     # @PreviousQp2
	.comm	PreviousQp2,4,4
	.type	NumberofBFrames,@object # @NumberofBFrames
	.comm	NumberofBFrames,4,4
	.type	TotalFrameQP,@object    # @TotalFrameQP
	.comm	TotalFrameQP,4,4
	.type	NumberofBasicUnit,@object # @NumberofBasicUnit
	.comm	NumberofBasicUnit,4,4
	.type	PAveHeaderBits1,@object # @PAveHeaderBits1
	.comm	PAveHeaderBits1,4,4
	.type	PAveHeaderBits2,@object # @PAveHeaderBits2
	.comm	PAveHeaderBits2,4,4
	.type	PAveHeaderBits3,@object # @PAveHeaderBits3
	.comm	PAveHeaderBits3,4,4
	.type	PAveFrameQP,@object     # @PAveFrameQP
	.comm	PAveFrameQP,4,4
	.type	TotalNumberofBasicUnit,@object # @TotalNumberofBasicUnit
	.comm	TotalNumberofBasicUnit,4,4
	.type	CodedBasicUnit,@object  # @CodedBasicUnit
	.comm	CodedBasicUnit,4,4
	.type	MINVALUE,@object        # @MINVALUE
	.comm	MINVALUE,8,8
	.type	CurrentFrameMAD,@object # @CurrentFrameMAD
	.comm	CurrentFrameMAD,8,8
	.type	CurrentBUMAD,@object    # @CurrentBUMAD
	.comm	CurrentBUMAD,8,8
	.type	TotalBUMAD,@object      # @TotalBUMAD
	.comm	TotalBUMAD,8,8
	.type	PreviousFrameMAD,@object # @PreviousFrameMAD
	.comm	PreviousFrameMAD,8,8
	.type	m_Hp,@object            # @m_Hp
	.comm	m_Hp,4,4
	.type	m_windowSize,@object    # @m_windowSize
	.comm	m_windowSize,4,4
	.type	MADm_windowSize,@object # @MADm_windowSize
	.comm	MADm_windowSize,4,4
	.type	DDquant,@object         # @DDquant
	.comm	DDquant,4,4
	.type	MBPerRow,@object        # @MBPerRow
	.comm	MBPerRow,4,4
	.type	AverageMADPreviousFrame,@object # @AverageMADPreviousFrame
	.comm	AverageMADPreviousFrame,8,8
	.type	TotalBasicUnitBits,@object # @TotalBasicUnitBits
	.comm	TotalBasicUnitBits,4,4
	.type	QPLastPFrame,@object    # @QPLastPFrame
	.comm	QPLastPFrame,4,4
	.type	QPLastGOP,@object       # @QPLastGOP
	.comm	QPLastGOP,4,4
	.type	Pm_rgQp,@object         # @Pm_rgQp
	.comm	Pm_rgQp,160,16
	.type	Pm_rgRp,@object         # @Pm_rgRp
	.comm	Pm_rgRp,160,16
	.type	Pm_X1,@object           # @Pm_X1
	.comm	Pm_X1,8,8
	.type	Pm_X2,@object           # @Pm_X2
	.comm	Pm_X2,8,8
	.type	Pm_Hp,@object           # @Pm_Hp
	.comm	Pm_Hp,4,4
	.type	FieldQPBuffer,@object   # @FieldQPBuffer
	.comm	FieldQPBuffer,4,4
	.type	FrameQPBuffer,@object   # @FrameQPBuffer
	.comm	FrameQPBuffer,4,4
	.type	FrameAveHeaderBits,@object # @FrameAveHeaderBits
	.comm	FrameAveHeaderBits,4,4
	.type	FieldAveHeaderBits,@object # @FieldAveHeaderBits
	.comm	FieldAveHeaderBits,4,4
	.type	BUPFMAD,@object         # @BUPFMAD
	.comm	BUPFMAD,8,8
	.type	BUCFMAD,@object         # @BUCFMAD
	.comm	BUCFMAD,8,8
	.type	FCBUCFMAD,@object       # @FCBUCFMAD
	.comm	FCBUCFMAD,8,8
	.type	FCBUPFMAD,@object       # @FCBUPFMAD
	.comm	FCBUPFMAD,8,8
	.type	GOPOverdue,@object      # @GOPOverdue
	.comm	GOPOverdue,4,4
	.type	diffy,@object           # @diffy
	.comm	diffy,1024,16
	.type	diffyy,@object          # @diffyy
	.comm	diffyy,1024,16
	.type	diffy8,@object          # @diffy8
	.comm	diffy8,1024,16
	.type	last_P_no,@object       # @last_P_no
	.comm	last_P_no,8,8
	.type	last_P_no_frm,@object   # @last_P_no_frm
	.comm	last_P_no_frm,8,8
	.type	last_P_no_fld,@object   # @last_P_no_fld
	.comm	last_P_no_fld,8,8
	.type	.L.str.5,@object        # @.str.5
.L.str.5:
	.asciz	"%04d(NVB)%8d \n"
	.size	.L.str.5, 15

	.type	.L.str.6,@object        # @.str.6
.L.str.6:
	.asciz	"%04d(IDR)%8d %1d %2d %7.3f %7.3f %7.3f  %7d   %5d     %3s   %3d\n"
	.size	.L.str.6, 65

	.type	.L.str.7,@object        # @.str.7
.L.str.7:
	.asciz	"FLD"
	.size	.L.str.7, 4

	.type	.L.str.8,@object        # @.str.8
.L.str.8:
	.asciz	"FRM"
	.size	.L.str.8, 4

	.type	.L.str.9,@object        # @.str.9
.L.str.9:
	.asciz	"%04d(I)  %8d %1d %2d %7.3f %7.3f %7.3f  %7d   %5d     %3s   %3d\n"
	.size	.L.str.9, 65

	.type	.L.str.10,@object       # @.str.10
.L.str.10:
	.asciz	"%04d(SP) %8d %1d %2d %7.3f %7.3f %7.3f  %7d   %5d     %3s   %3d\n"
	.size	.L.str.10, 65

	.type	.L.str.11,@object       # @.str.11
.L.str.11:
	.asciz	"%04d(RB) %8d %1d %2d %7.3f %7.3f %7.3f  %7d   %5d     %3s   %3d %1d\n"
	.size	.L.str.11, 69

	.type	.L.str.12,@object       # @.str.12
.L.str.12:
	.asciz	"%04d(B)  %8d %1d %2d %7.3f %7.3f %7.3f  %7d   %5d     %3s   %3d %1d\n"
	.size	.L.str.12, 69

	.type	.L.str.13,@object       # @.str.13
.L.str.13:
	.asciz	"%04d(P)  %8d %1d %2d %7.3f %7.3f %7.3f  %7d   %5d     %3s   %3d\n"
	.size	.L.str.13, 65

	.type	.L.str.14,@object       # @.str.14
.L.str.14:
	.asciz	"ReadOneFrame: buf"
	.size	.L.str.14, 18

	.type	.L.str.15,@object       # @.str.15
.L.str.15:
	.asciz	"ReadOneFrame: cannot fseek to (Header size) in p_in"
	.size	.L.str.15, 52

	.type	.L.str.16,@object       # @.str.16
.L.str.16:
	.asciz	"ReadOneFrame: cannot advance file pointer in p_in beyond frame %d\n"
	.size	.L.str.16, 67

	.type	.L.str.17,@object       # @.str.17
.L.str.17:
	.asciz	"ReadOneFrame: cannot read %d bytes from input file, unexpected EOF?, exiting"
	.size	.L.str.17, 77

	.type	.L.str.18,@object       # @.str.18
.L.str.18:
	.asciz	"ReadOneFrame (NOT IMPLEMENTED): pic unit size on disk must be divided by 8"
	.size	.L.str.18, 75


	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
